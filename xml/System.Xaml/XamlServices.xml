<Type Name="XamlServices" FullName="System.Xaml.XamlServices">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b34e14110aa65e54e7ebad88c3081a75a17bdd15" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39796870" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class XamlServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit XamlServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlServices" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlServices abstract sealed" />
  <TypeSignature Language="F#" Value="type XamlServices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供更高層級的服務 (靜態方法) 來用於一般 XAML 工作，包括讀取 XAML 和寫入物件圖形，或是讀取物件圖形和寫入 XAML 檔案輸出以進行序列化。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 模式<xref:System.Xaml.XamlServices>中最常見的 XAML 讀取和寫入案例依賴建立 XAML 讀取器和 XAML 寫入器的執行個體所使用的類別。 這些讀取器和寫入都是特製化，但內部實作的公用類別，例如<xref:System.Xml.XmlReader>， <xref:System.Xaml.XamlXmlReader>，和<xref:System.Xaml.XamlObjectWriter>。 若要使用<xref:System.Xaml.XamlServices>大部分的情況下，您可以依賴預設內部實作，以取得您想要的結果。 您可以更具特製化的情況下，讀取器和寫入自己定義，並再將它們傳遞為引數的多載<xref:System.Xaml.XamlServices>方法。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> 不建議的 XAML 讀取或 XAML 撰寫的 API 集，如果您正在處理 WPF 定義的型別或 WPF 為基礎的類型。 針對[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]使用方式，使用<xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType>讀取或中載入 XAML （BAML）; 以及<xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType>以寫入回 XAML。 這些類別的.NET Framework XAML 服務 Api 的 XAML 讀取器和 XAML 寫入器在內部使用它們的實作;不過，它們也提供支援和特製化的 XAML 結構描述內容的 WPF 特有的概念，例如相依性屬性和已知型別的 WPF 的最佳化。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>載入 XAML 讀取器的來源，並寫入其輸出做為物件圖形。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Xaml.XamlServices.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">要載入做為輸入的資料流。</param>
        <summary>載入 XAML 讀取器的 <see cref="T:System.IO.Stream" /> 來源，並寫入其輸出做為物件圖形。</summary>
        <returns>已做為輸出寫入的物件圖形。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 針對不同的簽章<xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29>方法指定不同類型的來源 XAML 輸入。 <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29>內部的實作會先建立<xref:System.Xml.XmlReader>藉由呼叫<xref:System.Xml.XmlReader.Create%28System.IO.Stream%29>，然後建立特殊的新執行個體<xref:System.Xaml.XamlReader>，處理輸入。  
  
 為了讓<xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29>呼叫已成功建立物件圖形時，下列必須為真：  
  
-   來源是語式正確且有效的 XML。  
  
-   來源是有效的 XAML 語言層級。  
  
-   在來源中指定的 XAML 型別 XAML 必須解析為相關 XAML 命名空間中的支援型別。 比方說，WPF 命名空間的 XAML 型別可以解析 XAML; 中所指定的 WPF XAML 命名空間wpf 組件必須包含在專案中或可執行的時間;等等。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> 不是建議的 XAML 讀取或 XAML 撰寫的 API 集，如果您要處理[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]型別或根據[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]。 針對[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]使用方式，使用<xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType>讀取或載入 XAML; 和<xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType>以寫入回 XAML。 這些類別會使用<xref:System.Xaml>實作; 在內部 Api 不過，它們也提供支援 WPF 特有影響 XAML 讀取和寫入，例如相依性屬性的最佳化性質的概念。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader -&gt; obj" Usage="System.Xaml.XamlServices.Load textReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader">要做為所建立 <see cref="T:System.IO.TextReader" /> 之基準的 <see cref="T:System.Xml.XmlReader" />。</param>
        <summary>從 <see cref="T:System.IO.TextReader" /> 建立 XAML 讀取器，並傳回物件圖形。</summary>
        <returns>所傳回的物件圖形。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要傳回物件圖形`textReader`輸入應該使用相關的輸入來建構。 比方說，它應該傳遞<xref:System.IO.StringReader>建構使用有效的 XAML 做為字串輸入，針對<xref:System.IO.StringReader.%23ctor%28System.String%29>建構函式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textReader" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (fileName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; obj" Usage="System.Xaml.XamlServices.Load fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">要載入並做為來源的檔案名稱。</param>
        <summary>載入 XAML 讀取器的 <see cref="T:System.IO.Stream" /> 來源並傳回物件圖形。</summary>
        <returns>所傳回的物件圖形。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 針對不同的簽章<xref:System.Xaml.XamlServices.Load%2A>方法指定不同類型的來源 XAML 輸入。 <xref:System.Xaml.XamlServices.Load%2A>內部的實作會先建立<xref:System.Xml.XmlReader>藉由呼叫<xref:System.Xml.XmlReader.Create%28System.String%29>，然後建立特殊的新執行個體<xref:System.Xaml.XamlReader>，處理輸入。  
  
 為了讓<xref:System.Xaml.XamlServices.Load%28System.String%29>呼叫已成功建立物件圖形時，下列必須為真：  
  
-   來源是語式正確且有效的 XML。  
  
-   來源是有效的 XAML 語言層級。  
  
-   在來源中指定的 XAML 型別 XAML 必須解析為相關 XAML 命名空間中的支援型別。 比方說，WPF 命名空間的 XAML 型別可以解析 XAML; 中所指定的 WPF XAML 命名空間WPF 的組件必須包含在專案中，或可執行的時間;等等。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> 輸入是 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader xamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader xamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ xamlReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Xaml.XamlServices.Load xamlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="xamlReader">要做為這個 <see langword="Load" /> 作業之讀取器的 XAML 讀取器實作。</param>
        <summary>載入特定的 XAML 讀取器實作並傳回物件圖形。</summary>
        <returns>所傳回的物件圖形。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您通常應該只在下列情況下使用此簽章：  
  
-   定義您自己實作<xref:System.Xaml.XamlReader>。  
  
-   您指定的設定<xref:System.Xaml.XamlReader>不同於預設設定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlReader" /> 輸入是 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader xmlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader xmlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ xmlReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Xaml.XamlServices.Load xmlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="xmlReader">要做為這個 <see langword="Load" /> 作業之讀取器的 <see cref="T:System.Xml.XmlReader" /> 實作。</param>
        <summary>載入特定的 XML 讀取器實作並傳回物件圖形。</summary>
        <returns>輸出物件圖形。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您通常應該使用此簽章，只有在您定義您自己實作<xref:System.Xml.XmlReader>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlReader" /> 輸入是 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xaml);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xaml) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xaml As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xaml);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Xaml.XamlServices.Parse xaml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xaml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xaml">要剖析的 XAML 字串輸入。</param>
        <summary>讀取 XAML 做為字串輸出並傳回物件圖形。</summary>
        <returns>所傳回的物件圖形。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 為了讓<xref:System.Xaml.XamlServices.Parse%2A>呼叫已成功建立物件樹狀結構時，下列必須為真：  
  
-   `xaml`輸入的格式正確且有效的 XML。  
  
-   `xaml`輸入是有效的 XAML 語言層級。  
  
-   中指定的 XAML 型別`xaml`輸入必須解析成支援相關的 XAML 命名空間中的型別。 比方說，WPF 命名空間的 XAML 型別可以解析 XAML; 中所指定的 WPF XAML 命名空間WPF 的組件必須包含在專案中，或可執行的時間;等等。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> 不是建議的 XAML 讀取或 XAML 撰寫的 API 集，如果您要處理[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]型別或根據[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]。 針對[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]使用方式，使用<xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType>讀取或載入 XAML，和<xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType>以寫入回 XAML。 這些類別會使用<xref:System.Xaml>實作; 在內部 Api 不過，它們也提供支援 WPF 特有影響 XAML 讀取和寫入，例如相依性屬性的最佳化性質的概念。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xaml" /> 輸入是 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將提供的物件圖形處理成 XAML 節點表示，再處理成序列化的輸出格式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static string Save (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Save(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Save (instance As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Save(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : obj -&gt; string" Usage="System.Xaml.XamlServices.Save instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">要處理之物件圖形的根目錄。</param>
        <summary>將提供的物件樹狀結構處理成 XAML 節點表示，然後傳回輸出 XAML 的字串表示。</summary>
        <returns>字串形式的 XAML 標記輸出。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法的輸出是`ToString`的結果<xref:System.Xml.XmlWriter>，它由方法呼叫。 <xref:System.Xml.XmlWriter>由使用下列設定：<xref:System.Xml.XmlWriterSettings.Indent%2A?displayProperty=nameWithType>是`true`; 並<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A?displayProperty=nameWithType>是`true`。  
  
 傳回的字串可以透過有效的 xml 載入<xref:System.Xml.XmlReader.Create%2A>方法，如果您處理字串至資料流，或更明確地說專用的讀取器的 XAML。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.Stream stream, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.Stream stream, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::Stream ^ stream, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.IO.Stream * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (stream, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stream">目的資料流。</param>
        <param name="instance">要處理之物件圖形的根目錄。</param>
        <summary>將提供的物件圖形處理成 XAML 節點表示，再處理成序列化的輸出資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> 不是建議的 XAML 讀取或 XAML 撰寫的 API 集，如果您要處理[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]型別或根據[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]。 針對[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]使用方式，使用<xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType>讀取或載入 XAML; 和<xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType>以寫入回 XAML。 這些類別會使用<xref:System.Xaml>實作; 在內部 Api 不過，它們也提供支援 WPF 特有影響 XAML 讀取和寫入，例如相依性屬性的最佳化性質的概念。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 輸入是 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.TextWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.TextWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As TextWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::TextWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.IO.TextWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">寫入輸出的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="instance">要處理之物件圖形的根目錄。</param>
        <summary>將提供的物件圖形處理成 XAML 節點表示，再處理成流向所提供 <see cref="T:System.IO.TextWriter" /> 的輸出。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> 輸入是 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (string fileName, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(string fileName, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (fileName As String, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::String ^ fileName, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : string * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (fileName, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fileName">要將輸出寫入之目標檔案的名稱和位置。</param>
        <param name="instance">要處理之物件圖形的根目錄。</param>
        <summary>將提供的物件圖形處理成 XAML 節點表示，然後寫入至所提供位置上的輸出檔。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `fileName`參數值會做`outputFileName`呼叫的輸入<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>，這會建立<xref:System.Xml.XmlWriter>方法呼叫的一部分。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileName" /> 為空字串。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xaml.XamlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xaml.XamlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XamlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xaml::XamlWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.Xaml.XamlWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xaml.XamlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">要使用的 <see cref="T:System.Xaml.XamlWriter" /> 實作。</param>
        <param name="instance">要處理之物件圖形的根目錄。</param>
        <summary>將提供的物件圖形處理成 XAML 節點表示，然後寫入至提供的 XAML 寫入器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您通常應該只在下列情況下使用此簽章：  
  
-   定義您自己實作<xref:System.Xaml.XamlWriter>。  
  
-   您指定的設定<xref:System.Xaml.XamlWriter>不同於預設設定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> 輸入是 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xml.XmlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xml.XmlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XmlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xml::XmlWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.Xml.XmlWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">要使用的 <see cref="T:System.Xml.XmlWriter" /> 實作。</param>
        <param name="instance">要處理之物件圖形的根目錄。</param>
        <summary>將提供的物件圖形處理成 XAML 節點表示，然後寫入至提供的 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> 輸入是 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>連接 <see cref="T:System.Xaml.XamlReader" /> 和 <see cref="T:System.Xaml.XamlWriter" /> 以使用常見的 XAML 節點集中繼項目。 可能會轉換內容，視提供的讀取器和寫入器類型而定。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter);" />
      <MemberSignature Language="F#" Value="static member Transform : System.Xaml.XamlReader * System.Xaml.XamlWriter -&gt; unit" Usage="System.Xaml.XamlServices.Transform (xamlReader, xamlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
      </Parameters>
      <Docs>
        <param name="xamlReader">要使用的 <see cref="T:System.Xaml.XamlReader" /> 實作。</param>
        <param name="xamlWriter">要使用的 <see cref="T:System.Xaml.XamlWriter" />。</param>
        <summary>連接 <see cref="T:System.Xaml.XamlReader" /> 和 <see cref="T:System.Xaml.XamlWriter" /> 以使用常見的 XAML 節點集中繼項目。 可能會轉換內容，視提供的讀取器和寫入器類型而定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法是一個包裝函式<xref:System.Xaml.XamlServices.Transform%28System.Xaml.XamlReader%2CSystem.Xaml.XamlWriter%2CSystem.Boolean%29>，其中`closeWriter`指定為`true`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlReader" /> 或 <paramref name="xamlWriter" /> 輸入為 <see langword="null" />。</exception>
        <exception cref="T:System.Xaml.XamlException">XAML 結構描述內容在提供的 <paramref name="xamlReader" /> 和 <paramref name="xamlWriter" /> 之間不相符。</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter, bool closeWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter, bool closeWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter, bool closeWriter);" />
      <MemberSignature Language="F#" Value="static member Transform : System.Xaml.XamlReader * System.Xaml.XamlWriter * bool -&gt; unit" Usage="System.Xaml.XamlServices.Transform (xamlReader, xamlWriter, closeWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
        <Parameter Name="closeWriter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="xamlReader">要使用的 <see cref="T:System.Xaml.XamlReader" /> 實作。</param>
        <param name="xamlWriter">要使用的 <see cref="T:System.Xaml.XamlWriter" />。</param>
        <param name="closeWriter">
          <see langword="true" /> 表示在呼叫完成之後關閉寫入器，<see langword="false" /> 表示讓寫入器在最後寫入的位置上繼續保持開啟。</param>
        <summary>連接 <see cref="T:System.Xaml.XamlReader" /> 和 <see cref="T:System.Xaml.XamlWriter" /> 以使用常見的 XAML 節點集中繼項目。 可能會轉換內容，視提供的讀取器和寫入器類型而定。 提供參數來指定是否在完成呼叫後關閉寫入器。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlReader" /> 或 <paramref name="xamlWriter" /> 輸入為 <see langword="null" />。</exception>
        <exception cref="T:System.Xaml.XamlException">XAML 結構描述內容在提供的 <paramref name="xamlReader" /> 和 <paramref name="xamlWriter" /> 之間不相符。</exception>
      </Docs>
    </Member>
  </Members>
</Type>