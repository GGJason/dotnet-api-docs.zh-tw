<Type Name="XamlObjectWriterSettings" FullName="System.Xaml.XamlObjectWriterSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a94fb89f28b3f761992da4505a75cc54c6b173a7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlObjectWriterSettings : System.Xaml.XamlWriterSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlObjectWriterSettings extends System.Xaml.XamlWriterSettings" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlObjectWriterSettings" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlObjectWriterSettings&#xA;Inherits XamlWriterSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlObjectWriterSettings : System::Xaml::XamlWriterSettings" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xaml.XamlWriterSettings</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="75d83-101">提供 <see cref="T:System.Xaml.XamlObjectWriter" /> 的特定 XAML 寫入器設定。</span>
      <span class="sxs-lookup">
        <span data-stu-id="75d83-101">Provides specific XAML writer settings for <see cref="T:System.Xaml.XamlObjectWriter" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d83-102">A<xref:System.Xaml.XamlObjectWriter>可以函式內指定<xref:System.Xaml.XamlObjectWriterSettings>。</span><span class="sxs-lookup"><span data-stu-id="75d83-102">A <xref:System.Xaml.XamlObjectWriter> can function within specified <xref:System.Xaml.XamlObjectWriterSettings>.</span></span> <span data-ttu-id="75d83-103">未指定設定、 執行個體的<xref:System.Xaml.XamlObjectWriterSettings>存在具有預設值之已建構的<xref:System.Xaml.XamlObjectWriter>，而這個執行個體可以用於合併的設定中衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="75d83-103">Where settings are not specified, an instance of <xref:System.Xaml.XamlObjectWriterSettings> exists that has default values for a constructed <xref:System.Xaml.XamlObjectWriter>, and this instance can be used in merges of settings for a derived class.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectWriter" />
    <altmember cref="M:System.Xaml.IXamlObjectWriterFactory.GetXamlObjectWriter(System.Xaml.XamlObjectWriterSettings)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-104">初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-104">Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterSettings" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriterSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriterSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriterSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="75d83-105">初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-105">Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterSettings" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriterSettings (System.Xaml.XamlObjectWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlObjectWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriterSettings.#ctor(System.Xaml.XamlObjectWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (settings As XamlObjectWriterSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriterSettings(System::Xaml::XamlObjectWriterSettings ^ settings);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settings" Type="System.Xaml.XamlObjectWriterSettings" />
      </Parameters>
      <Docs>
        <param name="settings">
          <span data-ttu-id="75d83-106">要複製的設定執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-106">The settings instance to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="75d83-107">初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 類別的新執行個體，這個執行個體將會根據現有執行個體的複本產生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-107">Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterSettings" /> class that is based on the copy of an existing instance.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="75d83-108">
            <paramref name="settings" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-108">
              <paramref name="settings" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AccessLevel">
      <MemberSignature Language="C#" Value="public System.Xaml.Permissions.XamlAccessLevel AccessLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Permissions.XamlAccessLevel AccessLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriterSettings.AccessLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessLevel As XamlAccessLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Permissions::XamlAccessLevel ^ AccessLevel { System::Xaml::Permissions::XamlAccessLevel ^ get(); void set(System::Xaml::Permissions::XamlAccessLevel ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Permissions.XamlAccessLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-109">取得或設定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> XAML 寫入器觀察的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-109">Gets or sets <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> permissions that the XAML writer observes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d83-110">
            <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-110">The <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> permissions.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d83-111">這個屬性表示在部分信任的容許執行階段透過部分信任中存取的非公用成員的預期的存取層級。</span><span class="sxs-lookup"><span data-stu-id="75d83-111">This property indicates the expected access level for non-public members, which are accessed in partial trust through a partial-trust tolerant runtime.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AfterBeginInitHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Xaml.XamlObjectEventArgs&gt; AfterBeginInitHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Xaml.XamlObjectEventArgs&gt; AfterBeginInitHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" />
      <MemberSignature Language="VB.NET" Value="Public Property AfterBeginInitHandler As EventHandler(Of XamlObjectEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Xaml::XamlObjectEventArgs ^&gt; ^ AfterBeginInitHandler { EventHandler&lt;System::Xaml::XamlObjectEventArgs ^&gt; ^ get(); void set(EventHandler&lt;System::Xaml::XamlObjectEventArgs ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Xaml.XamlObjectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-112">取得或設定回呼的參考，針對每個建立的物件，XAML 寫入器會在物件存留期的 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 階段叫用這個回呼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-112">Gets or sets a reference to a callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> phase of the object lifetime for each created object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d83-113">由 XAML 寫入器在物件存留期 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 階段叫用的回呼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-113">A callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> phase of object lifetime.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)" />
        <altmember cref="T:System.Xaml.XamlObjectEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AfterEndInitHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Xaml.XamlObjectEventArgs&gt; AfterEndInitHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Xaml.XamlObjectEventArgs&gt; AfterEndInitHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" />
      <MemberSignature Language="VB.NET" Value="Public Property AfterEndInitHandler As EventHandler(Of XamlObjectEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Xaml::XamlObjectEventArgs ^&gt; ^ AfterEndInitHandler { EventHandler&lt;System::Xaml::XamlObjectEventArgs ^&gt; ^ get(); void set(EventHandler&lt;System::Xaml::XamlObjectEventArgs ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Xaml.XamlObjectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-114">取得或設定回呼的參考，針對每個建立的物件，XAML 寫入器會在物件存留期的 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 階段叫用這個回呼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-114">Gets or sets a reference to a callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> phase of the object lifetime for each created object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d83-115">由 XAML 寫入器在物件存留期 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 階段叫用的回呼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-115">A callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> phase of object lifetime.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)" />
        <altmember cref="T:System.Xaml.XamlObjectEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AfterPropertiesHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Xaml.XamlObjectEventArgs&gt; AfterPropertiesHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Xaml.XamlObjectEventArgs&gt; AfterPropertiesHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" />
      <MemberSignature Language="VB.NET" Value="Public Property AfterPropertiesHandler As EventHandler(Of XamlObjectEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Xaml::XamlObjectEventArgs ^&gt; ^ AfterPropertiesHandler { EventHandler&lt;System::Xaml::XamlObjectEventArgs ^&gt; ^ get(); void set(EventHandler&lt;System::Xaml::XamlObjectEventArgs ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Xaml.XamlObjectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-116">取得或設定回呼的參考，針對每個建立的物件，XAML 寫入器會在物件存留期的後置成員寫入階段叫用這個回呼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-116">Gets or sets a reference to a callback that is invoked by the XAML writer at the post-member-write phase of the object lifetime for each created object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d83-117">回呼，由 XAML 寫入器在物件存留期的後置成員寫入階段叫用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-117">A callback that is invoked by the XAML writer at the post-member-write phase of object lifetime.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)" />
        <altmember cref="T:System.Xaml.XamlObjectEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="BeforePropertiesHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Xaml.XamlObjectEventArgs&gt; BeforePropertiesHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Xaml.XamlObjectEventArgs&gt; BeforePropertiesHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" />
      <MemberSignature Language="VB.NET" Value="Public Property BeforePropertiesHandler As EventHandler(Of XamlObjectEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Xaml::XamlObjectEventArgs ^&gt; ^ BeforePropertiesHandler { EventHandler&lt;System::Xaml::XamlObjectEventArgs ^&gt; ^ get(); void set(EventHandler&lt;System::Xaml::XamlObjectEventArgs ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Xaml.XamlObjectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-118">取得或設定回呼的參考，針對每個建立的物件，XAML 寫入器會在物件存留期的後置成員寫入階段叫用這個回呼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-118">Gets or sets a reference to a callback that is invoked by the XAML writer at the pre-member-write phase of the object lifetime for each created object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d83-119">由 XAML 寫入器在物件存留期後置成員寫入階段叫用的回呼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-119">A callback that is invoked by the XAML writer at the pre-member-write phase of object lifetime.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)" />
        <altmember cref="T:System.Xaml.XamlObjectEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ExternalNameScope">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.INameScope ExternalNameScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.INameScope ExternalNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />
      <MemberSignature Language="VB.NET" Value="Public Property ExternalNameScope As INameScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::INameScope ^ ExternalNameScope { System::Windows::Markup::INameScope ^ get(); void set(System::Windows::Markup::INameScope ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.INameScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-120">取得或設定當 <see cref="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" /> 為 <see langword="true" /> 時，用於從 XAML 寫入器註冊名稱的名稱範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-120">Gets or sets the XAML namescope to use for registering names from the XAML writer if <see cref="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" /> is <see langword="true" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d83-121">用於註冊名稱的 XAML 名稱範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-121">The XAML namescope to use for registering names.</span>
          </span>
          <span data-ttu-id="75d83-122">預設值為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-122">The default is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d83-123">針對特定內容<xref:System.Xaml.XamlObjectWriter>可能會使用外部的 XAML 名稱範圍。</span><span class="sxs-lookup"><span data-stu-id="75d83-123">Specific contexts for a <xref:System.Xaml.XamlObjectWriter> might use an external XAML namescope.</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="75d83-124">WPF 使用注意事項</span><span class="sxs-lookup"><span data-stu-id="75d83-124">WPF Usage Notes</span></span>  
 <span data-ttu-id="75d83-125">在 WPF XAML 實作中，XAML 寫入器作業所起始的<xref:System.Windows.FrameworkTemplate>指定不同的 XAML 名稱範圍。</span><span class="sxs-lookup"><span data-stu-id="75d83-125">In the WPF XAML implementation, XAML writer operations that are initiated by <xref:System.Windows.FrameworkTemplate> specify a separate XAML namescope.</span></span> <span data-ttu-id="75d83-126">WPF 本例中，範本不應共用 XAML 名稱範圍與定義在 XAML 頁面的根。</span><span class="sxs-lookup"><span data-stu-id="75d83-126">In this WPF scenario, templates should not share a XAML namescope with the root of the XAML page that defines them.</span></span> <span data-ttu-id="75d83-127">相反地，它們應該處理到另一個指定的 XAML 名稱範圍。</span><span class="sxs-lookup"><span data-stu-id="75d83-127">Instead, they should process into a separate, designated XAML namescope.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreCanConvert">
      <MemberSignature Language="C#" Value="public bool IgnoreCanConvert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreCanConvert" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriterSettings.IgnoreCanConvert" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreCanConvert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreCanConvert { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-128">取得或設定值，這個值指定 XAML 寫入器是否應該在有型別轉換器的情況下忽略 (而不要呼叫) <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 上的 <see cref="T:System.ComponentModel.TypeConverter" /> 實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-128">Gets or sets a value that specifies whether the XAML writer should ignore (not call) <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> implementations on a <see cref="T:System.ComponentModel.TypeConverter" /> in type-converter situations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d83-129">如果 XAML 寫入器會忽略 <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 實作則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-129">
              <see langword="true" /> if the XAML writer ignores <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> implementations; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="75d83-130">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-130">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d83-131"><xref:System.ComponentModel.TypeConverter>類別和其<xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A>方法是在 CLR 中的型別轉換的整體設計的一部分。</span><span class="sxs-lookup"><span data-stu-id="75d83-131">The <xref:System.ComponentModel.TypeConverter> class and its <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A> method are part of an overall design for type conversion in the CLR.</span></span> <span data-ttu-id="75d83-132">在 XAML 系統中，您通常可以假設類型轉換器輸入可識別 XAML 讀取器，以及用於輸入的用途，一律是字串。</span><span class="sxs-lookup"><span data-stu-id="75d83-132">In XAML systems, you can typically assume that type-converter input is identifiable by the XAML reader, and for purposes of input, is always a string.</span></span> <span data-ttu-id="75d83-133">如果您將此屬性設定為`true`，啟用這項假設其中編寫到 XAML 物件寫入器行為中的模式。</span><span class="sxs-lookup"><span data-stu-id="75d83-133">If you set this property to `true`, you enable a mode where this assumption is codified in the XAML object writer behavior.</span></span>  
  
 <span data-ttu-id="75d83-134">此模式會針對先前版本的 WPF XAML 支援相容性需求。</span><span class="sxs-lookup"><span data-stu-id="75d83-134">This mode supports a compatibility requirement for previous versions of WPF XAML.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferUnconvertedDictionaryKeys">
      <MemberSignature Language="C#" Value="public bool PreferUnconvertedDictionaryKeys { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreferUnconvertedDictionaryKeys" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriterSettings.PreferUnconvertedDictionaryKeys" />
      <MemberSignature Language="VB.NET" Value="Public Property PreferUnconvertedDictionaryKeys As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PreferUnconvertedDictionaryKeys { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-135">取得或設定值，這個值決定是否要停用會在寫入物件圖形表示之前對 <see cref="T:System.Xaml.XamlObjectWriter" /> 的 <paramref name="K" /> 元件執行型別轉換的預設 <see cref="T:System.Collections.Generic.Dictionary`2" /> 功能。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-135">Gets or sets a value that determines whether to disable a default <see cref="T:System.Xaml.XamlObjectWriter" /> feature that runs type conversion on the <paramref name="K" /> component of a <see cref="T:System.Collections.Generic.Dictionary`2" /> before writing the object graph representation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d83-136">如果要停用 <see cref="T:System.Collections.Generic.Dictionary`2" /> 物件的 <paramref name="K" /> 型別轉換，則為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-136">
              <see langword="true" /> if <paramref name="K" /> type conversion for a <see cref="T:System.Collections.Generic.Dictionary`2" /> object should be disabled.</span>
          </span>
          <span data-ttu-id="75d83-137">如果要為適用的 <see cref="T:System.Collections.Generic.Dictionary`2" /> 物件執行 <paramref name="K" /> 型別轉換，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-137">
              <see langword="false" /> if performing <paramref name="K" /> type conversion for a <see cref="T:System.Collections.Generic.Dictionary`2" /> object applies.</span>
          </span>
          <span data-ttu-id="75d83-138">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-138">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d83-139">如需有關`K`輸入轉換功能，請參閱 < 備註 > 中的<xref:System.Xaml.XamlObjectWriter>。</span><span class="sxs-lookup"><span data-stu-id="75d83-139">For more information about the `K` type conversion feature, see Remarks in <xref:System.Xaml.XamlObjectWriter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterNamesOnExternalNamescope">
      <MemberSignature Language="C#" Value="public bool RegisterNamesOnExternalNamescope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RegisterNamesOnExternalNamescope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" />
      <MemberSignature Language="VB.NET" Value="Public Property RegisterNamesOnExternalNamescope As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RegisterNamesOnExternalNamescope { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-140">取得或設定值，這個值決定是否應該向指定的 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" /> 進行名稱註冊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-140">Gets or sets a value that determines whether name registration should occur against the specified <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d83-141">如果應該向 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" /> 進行名稱註冊，則為 <see langword="true" />。如果應該到父代 XAML 名稱範圍中進行名稱註冊，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-141">
              <see langword="true" /> if name registration should occur against the <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />; <see langword="false" /> if name registration should occur into the parent XAML namescope.</span>
          </span>
          <span data-ttu-id="75d83-142">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-142">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RootObjectInstance">
      <MemberSignature Language="C#" Value="public object RootObjectInstance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object RootObjectInstance" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriterSettings.RootObjectInstance" />
      <MemberSignature Language="VB.NET" Value="Public Property RootObjectInstance As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ RootObjectInstance { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-143">取得或設定 <see cref="T:System.Xaml.XamlObjectWriter" /> 作業的既有根物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-143">Gets or sets a preexisting root object for <see cref="T:System.Xaml.XamlObjectWriter" /> operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d83-144">
            <see cref="T:System.Xaml.XamlObjectWriter" /> 作業的既有根物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-144">A preexisting root object for <see cref="T:System.Xaml.XamlObjectWriter" /> operations.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d83-145">如果您將此值時，根物件執行個體做為隱含<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>（具有物件是直接傳輸，而不是來自讀取器的輸入） 的呼叫之前的第一個明確的節點寫入呼叫<xref:System.Xaml.XamlObjectWriter>。</span><span class="sxs-lookup"><span data-stu-id="75d83-145">If you set this value, the root object instance is used as an implicit <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> call (with object input that is direct instead of coming from the reader) that precedes the first explicit node-write call by the <xref:System.Xaml.XamlObjectWriter>.</span></span> <span data-ttu-id="75d83-146">任何錯誤檢查，例如查驗 XAML 的類型提供的根物件，會延後，直到也隱含<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>呼叫，而不是要檢查當您設定此設定的屬性。</span><span class="sxs-lookup"><span data-stu-id="75d83-146">Any error checking, such as verifying the XAML type of the provided root object, is deferred until that implicit <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> call, instead of being checked when you set this settings property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipDuplicatePropertyCheck">
      <MemberSignature Language="C#" Value="public bool SkipDuplicatePropertyCheck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipDuplicatePropertyCheck" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriterSettings.SkipDuplicatePropertyCheck" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipDuplicatePropertyCheck As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipDuplicatePropertyCheck { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-147">取得或設定值，這個值決定 XAML 寫入器是否要省略檢查一個會檢查重複屬性的程式碼路徑。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-147">Gets or sets a value that determines whether the XAML writer omits to check for the code path that checks for duplicate properties.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d83-148">如果應省略重複屬性檢查則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-148">
              <see langword="true" /> if the duplicate property check should be omitted; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d83-149">指定的程式碼路徑會檢查目前指派的屬性，並擲回例外狀況，如果嘗試重複的屬性集的具名環境屬性。</span><span class="sxs-lookup"><span data-stu-id="75d83-149">The specified code path checks the currently assigned properties and throws an exception if a duplicate property set of the named ambient property is attempted.</span></span> <span data-ttu-id="75d83-150">如需詳細資訊，請參閱<xref:System.Xaml.IAmbientProvider>。</span><span class="sxs-lookup"><span data-stu-id="75d83-150">For more information, see <xref:System.Xaml.IAmbientProvider>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipProvideValueOnRoot">
      <MemberSignature Language="C#" Value="public bool SkipProvideValueOnRoot { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipProvideValueOnRoot" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriterSettings.SkipProvideValueOnRoot" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipProvideValueOnRoot As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipProvideValueOnRoot { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-151">取得或設定值，這個值表示 <see cref="T:System.Xaml.XamlObjectWriter" /> 是否應該略過對標記延伸的 <see langword="ProvideValue" /> 呼叫，當標記延伸表示的是物件圖形的根時，這很重要。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-151">Gets or sets a value that indicates whether the <see cref="T:System.Xaml.XamlObjectWriter" /> should omit to call <see langword="ProvideValue" /> on a markup extension, which is relevant when the markup extension represents the root of an object graph.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d83-152">如果 <see cref="T:System.Xaml.XamlObjectWriter" /> 應該略過對標記延伸的 <see langword="true" /> 呼叫，則為 <see langword="ProvideValue" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-152">
              <see langword="true" /> if the <see cref="T:System.Xaml.XamlObjectWriter" /> should omit to call <see langword="ProvideValue" /> on a markup extension; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d83-153">使用此設定時<xref:System.Xaml.XamlObjectWriter>處理根節點 (<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>，或在根節點中的成員)。</span><span class="sxs-lookup"><span data-stu-id="75d83-153">This setting is used when the <xref:System.Xaml.XamlObjectWriter> processes the root node (<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>, or members within the root node).</span></span> <span data-ttu-id="75d83-154">這個屬性是與下列範本和延後載入情況相關。</span><span class="sxs-lookup"><span data-stu-id="75d83-154">This property is relevant for template and defer-load scenarios.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceBamlUri">
      <MemberSignature Language="C#" Value="public Uri SourceBamlUri { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri SourceBamlUri" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriterSettings.SourceBamlUri" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceBamlUri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ SourceBamlUri { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-155">用於 <see langword="BeginInitHandler" />，取代實際的 <see langword="BaseUri" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-155">Used in the <see langword="BeginInitHandler" /> in place of the actual <see langword="BaseUri" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d83-156">A<see cref="T:System.Uri" />來取代實際<see langword="BaseUri" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-156">A <see cref="T:System.Uri" /> to be used in place of the actual <see langword="BaseUri" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d83-157">內部用來提供正確的資訊，以處理常式中，同時保留執行階段行為完全相容。</span><span class="sxs-lookup"><span data-stu-id="75d83-157">Used internally to provide the correct info in the handler, while keeping runtime behavior fully compatible.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XamlSetValueHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetValueEventArgs&gt; XamlSetValueHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetValueEventArgs&gt; XamlSetValueHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" />
      <MemberSignature Language="VB.NET" Value="Public Property XamlSetValueHandler As EventHandler(Of XamlSetValueEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetValueEventArgs ^&gt; ^ XamlSetValueHandler { EventHandler&lt;System::Windows::Markup::XamlSetValueEventArgs ^&gt; ^ get(); void set(EventHandler&lt;System::Windows::Markup::XamlSetValueEventArgs ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetValueEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="75d83-158">取得或設定當物件寫入器對相依性屬性呼叫 CLR 實作的 <see langword="SetValue" /> 時，所要使用的處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-158">Gets or sets the handler to use when the object writer calls into a CLR-implemented <see langword="SetValue" /> for dependency properties.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="75d83-159">處理這個案例的處理常式實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="75d83-159">A handler implementation that handles this case.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75d83-160">此事件處理常式以一般<xref:System.EventHandler%601>委派，會使用<xref:System.Windows.Markup.XamlSetValueEventArgs>事件資料。</span><span class="sxs-lookup"><span data-stu-id="75d83-160">The event handler is based on the generic <xref:System.EventHandler%601> delegate that uses the <xref:System.Windows.Markup.XamlSetValueEventArgs> event data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>