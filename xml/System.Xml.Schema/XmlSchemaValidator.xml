<Type Name="XmlSchemaValidator" FullName="System.Xml.Schema.XmlSchemaValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a7dd1f469e75c518a4dd518e76246462451b7a72" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36441150" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XmlSchemaValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlSchemaValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaValidator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlSchemaValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaValidator sealed" />
  <TypeSignature Language="F#" Value="type XmlSchemaValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示 XML 結構描述定義語言 (XSD) 結構描述驗證引擎。 無法繼承 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 類別 (Class)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  -   請勿從未知或未受信任的來源或位置的結構描述。 如此一來，將危害您的程式碼的安全性。  
> -   XML 結構描述 （包括內嵌結構描述） 是本質上容易遭到阻絕服務攻擊。不接受其在受信任的案例。  
> -   結構描述驗證錯誤訊息和例外狀況可能會公開機密資訊的內容模型或結構描述檔案的 URI 路徑。 請小心不要公開給未受信任的呼叫端的這項資訊。  
  
 <xref:System.Xml.Schema.XmlSchemaValidator> 類別提供有效率的高效能機制，可根據 XML 結構描述以推入方式驗證 XML 資料。 例如，<xref:System.Xml.Schema.XmlSchemaValidator> 類別可讓您就地驗證 XML 資訊集，而無需將其序列化為 XML 文件，然後使用驗證 XML 讀取器重新剖析該文件。 <xref:System.Xml.Schema.XmlSchemaValidator>類別也可用來建置驗證引擎，透過自訂的 XML 資料來源，或做為建置驗證 XML 寫入的方式。  
  
 如需有關<xref:System.Xml.Schema.XmlSchemaValidator>類別，請參閱[XmlSchemaValidator 推入型驗證](~/docs/standard/data/xml/xmlschemavalidator-push-based-validation.md)主題。  
  
> [!IMPORTANT]
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>和<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>驗證旗標<xref:System.Xml.Schema.XmlSchemaValidator>物件不是集合是預設值。 此外，<xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A>屬性<xref:System.Xml.Schema.XmlSchemaValidator>物件是`null`預設。 如此一來，外部結構描述中參考包含，import 或 redefine 項目不會解決預設值。  
  
   
  
## Examples  
 下列範例會驗證`contosoBooks.xml`檔案對`contosoBooks.xsd`結構描述。 此範例使用 <xref:System.Xml.Serialization.XmlSerializer> 類別，將 `contosoBooks.xml` 檔案還原序列化，並將節點的值傳遞給 <xref:System.Xml.Schema.XmlSchemaValidator> 類別的方法。  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 該範例採用 `contosoBooks.xml` 檔案做為輸入。  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 該範例還採用 `contosoBooks.xsd` 做為輸入。  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaValidator (System.Xml.XmlNameTable nameTable, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.IXmlNamespaceResolver namespaceResolver, System.Xml.Schema.XmlSchemaValidationFlags validationFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.IXmlNamespaceResolver namespaceResolver, valuetype System.Xml.Schema.XmlSchemaValidationFlags validationFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable, schemas As XmlSchemaSet, namespaceResolver As IXmlNamespaceResolver, validationFlags As XmlSchemaValidationFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaValidator(System::Xml::XmlNameTable ^ nameTable, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::IXmlNamespaceResolver ^ namespaceResolver, System::Xml::Schema::XmlSchemaValidationFlags validationFlags);" />
      <MemberSignature Language="F#" Value="new System.Xml.Schema.XmlSchemaValidator : System.Xml.XmlNameTable * System.Xml.Schema.XmlSchemaSet * System.Xml.IXmlNamespaceResolver * System.Xml.Schema.XmlSchemaValidationFlags -&gt; System.Xml.Schema.XmlSchemaValidator" Usage="new System.Xml.Schema.XmlSchemaValidator (nameTable, schemas, namespaceResolver, validationFlags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
        <Parameter Name="validationFlags" Type="System.Xml.Schema.XmlSchemaValidationFlags" />
      </Parameters>
      <Docs>
        <param name="nameTable">
          <see cref="T:System.Xml.XmlNameTable" /> 物件，包含原子化字串形式的項目和屬性名稱。</param>
        <param name="schemas">
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件，包含用於驗證的 XML 結構描述定義語言 (XSD) 結構描述。</param>
        <param name="namespaceResolver">
          <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用於解析驗證期間遇到的命名空間。</param>
        <param name="validationFlags">
          <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> 值，指定結構描述驗證選項。</param>
        <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A>建構函式。  
  
-   內容<xref:System.Xml.Schema.XmlSchemaSet>參數複製到內部<xref:System.Xml.Schema.XmlSchemaSet>物件時<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>或<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>設定驗證選項。 如此一來，變更為輸入<xref:System.Xml.Schema.XmlSchemaSet>物件驗證期間不會影響驗證的結果。  
  
-   如果<xref:System.Xml.Schema.XmlSchemaSet>未編譯指定的參數，其<xref:System.Xml.Schema.XmlSchemaSet.Compile%2A>方法呼叫。  
  
-   <xref:System.Xml.IXmlNamespaceResolver>參數，請務必特別驗證`xs:QName`型別。 <xref:System.Xml.Schema.XmlSchemaValidator>類別不會複製範圍內命名空間的<xref:System.Xml.IXmlNamespaceResolver>物件，但改為包含它的參考。 這可讓新的命名空間加入至<xref:System.Xml.IXmlNamespaceResolver>驗證程序期間的物件。  
  
> [!IMPORTANT]
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>和<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>驗證旗標<xref:System.Xml.Schema.XmlSchemaValidator>物件不是集合是預設值。 此外，<xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A>屬性<xref:System.Xml.Schema.XmlSchemaValidator>物件是`null`預設。 如此一來，外部結構描述中參考包含，import 或 redefine 項目不會解決預設值。  
  
   
  
## Examples  
 如需<xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A>建構函式，請參閱<xref:System.Xml.Schema.XmlSchemaValidator>類別參考主題。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">一或多個指定的參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">在編譯 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 參數中的結構描述時發生錯誤。</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaSet" />
        <altmember cref="T:System.Xml.IXmlNamespaceResolver" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="AddSchema">
      <MemberSignature Language="C#" Value="public void AddSchema (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSchema(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddSchema (schema As XmlSchema)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSchema(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.AddSchema : System.Xml.Schema.XmlSchema -&gt; unit" Usage="xmlSchemaValidator.AddSchema schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">
          <see cref="T:System.Xml.Schema.XmlSchema" /> 物件，該物件要加入一組用於驗證的結構描述。</param>
        <summary>將 XML 結構描述定義語言 (XSD) 結構描述加入一組用於驗證的結構描述。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A>方法。  
  
-   <xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A>方法可用來模擬遇到內嵌 XML 結構描述驗證 XML 文件中的效果。  
  
-   <xref:System.Xml.Schema.XmlSchema> 參數的目標命名空間與 <xref:System.Xml.Schema.XmlSchemaValidator> 物件已遇到之任何項目或屬性的目標命名空間均不相符。  
  
-   如果<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>未設定驗證選項，<xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A>方法不會執行任何動作。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
          <see cref="T:System.Xml.Schema.XmlSchema" /> 參數的目標命名空間與 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件已經遇到之任何項目或屬性的目標命名空間都相符。</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">
          <see cref="T:System.Xml.Schema.XmlSchema" /> 參數是無效的。</exception>
        <altmember cref="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
        <altmember cref="T:System.Xml.Schema.XmlSchema" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="EndValidation">
      <MemberSignature Language="C#" Value="public void EndValidation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndValidation() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndValidation ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndValidation();" />
      <MemberSignature Language="F#" Value="member this.EndValidation : unit -&gt; unit" Usage="xmlSchemaValidator.EndValidation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>結束驗證，並檢查整個 XML 文件的識別條件約束。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A>方法結束驗證，並檢查整個 XML 文件的識別條件約束，如果<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>設定驗證選項。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">在 XML 文件中找到識別條件約束錯誤。</exception>
        <altmember cref="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="GetExpectedAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaAttribute[] GetExpectedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaAttribute[] GetExpectedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExpectedAttributes () As XmlSchemaAttribute()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Xml::Schema::XmlSchemaAttribute ^&gt; ^ GetExpectedAttributes();" />
      <MemberSignature Language="F#" Value="member this.GetExpectedAttributes : unit -&gt; System.Xml.Schema.XmlSchemaAttribute[]" Usage="xmlSchemaValidator.GetExpectedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaAttribute[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回目前元素內容的預期屬性。</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 物件的陣列；如果沒有預期屬性，則為空白陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A>方法。  
  
-   如果<xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A>方法之後，立即呼叫<xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A>方法，可能會顯示為 XML 文件中的所有屬性會都傳回。  
  
-   如果<xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A>方法在一個或多個呼叫後呼叫<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A>方法，這個方法會傳回尚未尚未驗證目前元素的屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpectedParticles">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaParticle[] GetExpectedParticles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaParticle[] GetExpectedParticles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExpectedParticles () As XmlSchemaParticle()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Xml::Schema::XmlSchemaParticle ^&gt; ^ GetExpectedParticles();" />
      <MemberSignature Language="F#" Value="member this.GetExpectedParticles : unit -&gt; System.Xml.Schema.XmlSchemaParticle[]" Usage="xmlSchemaValidator.GetExpectedParticles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaParticle[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回目前元素內容中的預期物件。</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> 物件的陣列；如果沒有預期物件，則為空白陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可由 <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> 方法傳回的有效物件為 <xref:System.Xml.Schema.XmlSchemaElement> 及 <xref:System.Xml.Schema.XmlSchemaAny> 類別的執行個體。  
  
 當內容模型的複合器為 `xs:sequence` 時，只傳回序列中的下一個物件。 如果內容模型的複合器為 `xs:all` 或 `xs:choice`，則傳回目前項目內容中所有後續的有效物件。  
  
 例如，在隨後的 XML 結構描述定義語言 (XSD) 結構描述及 XML 文件中，驗證 `book` 項目之後，`book` 項目會成為目前的項目內容。 <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> 方法會傳回包含單一 <xref:System.Xml.Schema.XmlSchemaElement> 物件的陣列，該物件表示 `title` 項目。 當驗證內容為 `title` 項目時，<xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> 方法會傳回空陣列。 如果在驗證 <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> 項目之後、驗證 `title` 項目之前，呼叫 `description` 方法，則它會傳回包含單一 <xref:System.Xml.Schema.XmlSchemaElement> 物件的陣列，該物件表示 `description` 項目。 如果在驗證 <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> 項目之後呼叫 `description` 方法，則它會傳回包含單一 <xref:System.Xml.Schema.XmlSchemaAny> 物件的陣列，該物件表示萬用字元。  
  
```vb  
Dim reader As XmlReader =  XmlReader.Create("input.xml")   
  
Dim schemaSet As XmlSchemaSet =  New XmlSchemaSet()   
schemaSet.Add(Nothing, "schema.xsd")  
Dim manager As XmlNamespaceManager =  New XmlNamespaceManager(reader.NameTable)   
  
Dim validator As XmlSchemaValidator =  New XmlSchemaValidator(reader.NameTable,schemaSet,manager,XmlSchemaValidationFlags.None)  
validator.Initialize()  
  
validator.ValidateElement("book", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
  
validator.ValidateElement("title", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
validator.ValidateEndElement(Nothing)  
  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
  
validator.ValidateElement("description", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateEndElement(Nothing)  
  
For Each particle As XmlSchemaParticle In validator.GetExpectedParticles()  
    Console.WriteLine(particle.GetType())  
Next  
  
validator.ValidateElement("namespace", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateEndElement(Nothing)  
  
validator.ValidateEndElement(Nothing)  
```  
  
```csharp  
XmlReader reader = XmlReader.Create("input.xml");  
  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "schema.xsd");  
XmlNamespaceManager manager = new XmlNamespaceManager(reader.NameTable);  
  
XmlSchemaValidator validator = new XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None);  
validator.Initialize();  
  
validator.ValidateElement("book", "", null);  
  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
  
validator.ValidateElement("title", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
validator.ValidateEndElement(null);  
  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
  
validator.ValidateElement("description", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateEndElement(null);  
  
foreach (XmlSchemaParticle particle in validator.GetExpectedParticles())  
{  
    Console.WriteLine(particle.GetType());  
}  
  
validator.ValidateElement("namespace", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateEndElement(null);  
  
validator.ValidateEndElement(null);  
```  
  
 該範例使用下列 XML 做為輸入。  
  
 `<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">`  
  
 `<xs:element name="book">`  
  
 `<xs:complexType>`  
  
 `<xs:sequence>`  
  
 `<xs:element name="title" type="xs:string" />`  
  
 `<xs:element name="description" type="xs:string" />`  
  
 `<xs:any processContents ="lax"/>`  
  
 `</xs:sequence>`  
  
 `</xs:complexType>`  
  
 `</xs:element>`  
  
 `</xs:schema>`  
  
 該範例使用下列 XSD 結構描述做為輸入。  
  
 `<book>`  
  
 `<title>My Book</title>`  
  
 `<description>My Book's Description</description>`  
  
 `<namespace>System.Xml.Schema</namespace>`  
  
 `</book>`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaParticle" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaElement" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAny" />
      </Docs>
    </Member>
    <Member MemberName="GetUnspecifiedDefaultAttributes">
      <MemberSignature Language="C#" Value="public void GetUnspecifiedDefaultAttributes (System.Collections.ArrayList defaultAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetUnspecifiedDefaultAttributes(class System.Collections.ArrayList defaultAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetUnspecifiedDefaultAttributes (defaultAttributes As ArrayList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetUnspecifiedDefaultAttributes(System::Collections::ArrayList ^ defaultAttributes);" />
      <MemberSignature Language="F#" Value="member this.GetUnspecifiedDefaultAttributes : System.Collections.ArrayList -&gt; unit" Usage="xmlSchemaValidator.GetUnspecifiedDefaultAttributes defaultAttributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="defaultAttributes" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="defaultAttributes">
          <see cref="T:System.Collections.ArrayList" />，要用驗證期間尚未在項目內容中遇到之任何屬性的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 物件填入。</param>
        <summary>對預設屬性驗證識別條件約束，並針對先前尚未使用 <see cref="T:System.Collections.ArrayList" /> 方法在項目內容中驗證預設值的任何屬性，以其 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 物件填入指定的 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A>驗證目前項目使用的所有屬性之後，必須呼叫方法<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A>方法。 應使用 <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> 方法，判斷要將哪些預設屬性插入要驗證的 XML 文件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ArrayList" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Initialize">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件的狀態。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize();" />
      <MemberSignature Language="F#" Value="member this.Initialize : unit -&gt; unit" Usage="xmlSchemaValidator.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件的狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A>方法才會有效建構之後立即呼叫<xref:System.Xml.Schema.XmlSchemaValidator>物件或呼叫後<xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A>。  
  
   
  
## Examples  
 下列範例會驗證`contosoBooks.xml`檔案對`contosoBooks.xsd`結構描述。 此範例使用 <xref:System.Xml.Serialization.XmlSerializer> 類別，將 `contosoBooks.xml` 檔案還原序列化，並將節點的值傳遞給 <xref:System.Xml.Schema.XmlSchemaValidator> 類別的方法。  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 該範例採用 `contosoBooks.xml` 檔案做為輸入。  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 該範例還採用 `contosoBooks.xsd` 做為輸入。  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">只有在建構 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> 物件之後或呼叫 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 之後立即呼叫，<see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> 方法才有效。</exception>
        <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (System.Xml.Schema.XmlSchemaObject partialValidationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Initialize(class System.Xml.Schema.XmlSchemaObject partialValidationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize (partialValidationType As XmlSchemaObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize(System::Xml::Schema::XmlSchemaObject ^ partialValidationType);" />
      <MemberSignature Language="F#" Value="member this.Initialize : System.Xml.Schema.XmlSchemaObject -&gt; unit" Usage="xmlSchemaValidator.Initialize partialValidationType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
      </Parameters>
      <Docs>
        <param name="partialValidationType">
          <see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 物件，用於初始化部分驗證之 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件的驗證內容。</param>
        <summary>使用為部分驗證指定的 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />，初始化 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 物件的狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以 <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> 做為參數的 <xref:System.Xml.Schema.XmlSchemaObject> 方法會將 <xref:System.Xml.Schema.XmlSchemaValidator> 物件初始化為開始狀態，以進行部分驗證。  
  
   
  
## Examples  
 在下列範例中，會使用 <xref:System.Xml.Schema.XmlSchemaObject> 方法初始化用於部分驗證的 <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A>。 傳遞 `orderNumber` 結構描述項目的方法是，在 <xref:System.Xml.XmlQualifiedName> 物件之 <xref:System.Xml.Schema.XmlSchemaObjectTable> 屬性所傳回的 <xref:System.Xml.Schema.XmlSchemaSet.GlobalElements%2A> 集合中，依 <xref:System.Xml.Schema.XmlSchemaSet> 選取結構描述項目。 然後，<xref:System.Xml.Schema.XmlSchemaValidator> 物件會驗證此特定項目。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "schema.xsd")  
schemaSet.Compile()  
Dim nameTable As NameTable = New NameTable()  
Dim manager As XmlNamespaceManager = New XmlNamespaceManager(nameTable)  
  
Dim validator As XmlSchemaValidator = New XmlSchemaValidator(nameTable, schemaSet, manager, XmlSchemaValidationFlags.None)  
validator.Initialize(schemaSet.GlobalElements.Item(New XmlQualifiedName("orderNumber")))  
  
validator.ValidateElement("orderNumber", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateText("123")  
validator.ValidateEndElement(Nothing)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "schema.xsd");  
schemaSet.Compile();  
NameTable nameTable = new NameTable();  
XmlNamespaceManager manager = new XmlNamespaceManager(nameTable);  
  
XmlSchemaValidator validator = new XmlSchemaValidator(nameTable, schemaSet, manager, XmlSchemaValidationFlags.None);  
validator.Initialize(schemaSet.GlobalElements[new XmlQualifiedName("orderNumber")]);  
  
validator.ValidateElement("orderNumber", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateText("123");  
validator.ValidateEndElement(null);  
```  
  
 該範例使用下列 XML 結構描述做為輸入。  
  
 `<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">`  
  
 `<xs:element name="orderNumber" type="xs:int" />`  
  
 `</xs:schema>`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">只有在建構 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> 物件之後或呼叫 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 之後立即呼叫，<see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> 方法才有效。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 參數不是 <see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 物件。</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 參數不可為 <see langword="null" />。</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaObject" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaElement" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaType" />
      </Docs>
    </Member>
    <Member MemberName="LineInfoProvider">
      <MemberSignature Language="C#" Value="public System.Xml.IXmlLineInfo LineInfoProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.IXmlLineInfo LineInfoProvider" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property LineInfoProvider As IXmlLineInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::IXmlLineInfo ^ LineInfoProvider { System::Xml::IXmlLineInfo ^ get(); void set(System::Xml::IXmlLineInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LineInfoProvider : System.Xml.IXmlLineInfo with get, set" Usage="System.Xml.Schema.XmlSchemaValidator.LineInfoProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.IXmlLineInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定正在驗證之 XML 節點的行號資訊。</summary>
        <value>
          <see cref="T:System.Xml.IXmlLineInfo" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   行資訊由任何報告<xref:System.Xml.Schema.XmlSchemaValidationException>驗證程序期間擲回。  
  
-   預設值<xref:System.Xml.IXmlLineInfo>所傳回物件<xref:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider%2A>屬性會傳回 0 代表<xref:System.Xml.IXmlLineInfo.LineNumber%2A>和<xref:System.Xml.IXmlLineInfo.LinePosition%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.IXmlLineInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <Member MemberName="SkipToEndElement">
      <MemberSignature Language="C#" Value="public void SkipToEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToEndElement (schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.SkipToEndElement : System.Xml.Schema.XmlSchemaInfo -&gt; unit" Usage="xmlSchemaValidator.SkipToEndElement schemaInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，如果順利略過目前項目內容，則會設定此物件的屬性。 這個參數可以是 <see langword="null" />。</param>
        <summary>略過目前項目內容的驗證，並準備 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件，以驗證父項目內容 (Context) 中的內容 (Content)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement%2A>方法。  
  
-   <xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement%2A>略過目前項目內容的驗證方法，並準備<xref:System.Xml.Schema.XmlSchemaValidator>物件以驗證父項目的內容中的內容; 它相當於略過目前項目的所有子系的驗證，然後呼叫<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>方法。  
  
-   如果順利跳過目前項目內容，<xref:System.Xml.Schema.XmlSchemaInfo>物件的 （如果已指定）<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>屬性設定為<xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>。  
  
> [!NOTE]
>  略過的內容會不報告任何驗證錯誤。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 方法。 例如，在呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="SourceUri">
      <MemberSignature Language="C#" Value="public Uri SourceUri { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri SourceUri" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.SourceUri" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceUri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ SourceUri { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceUri : Uri with get, set" Usage="System.Xml.Schema.XmlSchemaValidator.SourceUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定正在驗證之 XML 節點的來源 URI。</summary>
        <value>
          <see cref="T:System.Uri" /> 物件，表示正在驗證之 XML 節點的來源 URI；預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   URI 所報告任何來源<xref:System.Xml.Schema.XmlSchemaValidationException>驗證程序期間擲回。  
  
-   如果<xref:System.Xml.Schema.XmlSchemaValidator.SourceUri%2A>屬性未設定，XML 文件的檔案名稱是<xref:System.String.Empty>驗證錯誤訊息中。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>驗證目前元素內容中的屬性。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateAttribute">
      <MemberSignature Language="C#" Value="public object ValidateAttribute (string localName, string namespaceUri, string attributeValue, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateAttribute(string localName, string namespaceUri, string attributeValue, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateAttribute (localName As String, namespaceUri As String, attributeValue As String, schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateAttribute(System::String ^ localName, System::String ^ namespaceUri, System::String ^ attributeValue, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateAttribute : string * string * string * System.Xml.Schema.XmlSchemaInfo -&gt; obj" Usage="xmlSchemaValidator.ValidateAttribute (localName, namespaceUri, attributeValue, schemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">要驗證之屬性的本機名稱。</param>
        <param name="namespaceUri">要驗證之屬性的命名空間 URI。</param>
        <param name="attributeValue">要驗證之屬性的值。</param>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證屬性 (Attribute) 時會設定其屬性 (Property)。 這個參數可以是 <see langword="null" />。</param>
        <summary>驗證目前元素內容中的屬性名稱、命名空間 URI 和值。</summary>
        <returns>已驗證之屬性的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A>方法。  
  
-   <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A>驗證目前項目使用的所有屬性之後，必須呼叫方法<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A>方法。  
  
-   如果<xref:System.Xml.Schema.XmlSchemaAttribute>物件傳遞給<xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A>方法，<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A>方法會驗證對屬性<xref:System.Xml.Schema.XmlSchemaAttribute>物件。  
  
-   如果屬性已成功驗證在目前的項目內容中，<xref:System.Xml.Schema.XmlSchemaInfo>物件的 （如果已指定） <xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>，和<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>屬性會設定與驗證的結果。  
  
   
  
## Examples  
 下列範例會驗證`contosoBooks.xml`檔案對`contosoBooks.xsd`結構描述。 此範例使用 <xref:System.Xml.Serialization.XmlSerializer> 類別，將 `contosoBooks.xml` 檔案還原序列化，並將節點的值傳遞給 <xref:System.Xml.Schema.XmlSchemaValidator> 類別的方法。  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 該範例採用 `contosoBooks.xml` 檔案做為輸入。  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 該範例還採用 `contosoBooks.xsd` 做為輸入。  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">此屬性在目前項目內容中無效。</exception>
        <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個指定的參數為 <see langword="null" />。</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateAttribute">
      <MemberSignature Language="C#" Value="public object ValidateAttribute (string localName, string namespaceUri, System.Xml.Schema.XmlValueGetter attributeValue, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateAttribute(string localName, string namespaceUri, class System.Xml.Schema.XmlValueGetter attributeValue, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateAttribute (localName As String, namespaceUri As String, attributeValue As XmlValueGetter, schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateAttribute(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlValueGetter ^ attributeValue, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateAttribute : string * string * System.Xml.Schema.XmlValueGetter * System.Xml.Schema.XmlSchemaInfo -&gt; obj" Usage="xmlSchemaValidator.ValidateAttribute (localName, namespaceUri, attributeValue, schemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.Xml.Schema.XmlValueGetter" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">要驗證之屬性的本機名稱。</param>
        <param name="namespaceUri">要驗證之屬性的命名空間 URI。</param>
        <param name="attributeValue">
          <see cref="T:System.Xml.Schema.XmlValueGetter" />
          <see langword="delegate" />，用於將屬性的值當做與屬性之 XML 結構描述定義語言 (XSD) 類型相容的 Common Language Runtime (CLR) 類型進行傳遞。</param>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證屬性 (Attribute) 時會設定其屬性 (Property)。 這個參數可以是 <see langword="null" />。</param>
        <summary>驗證目前元素內容中的屬性名稱、命名空間 URI 和值。</summary>
        <returns>已驗證之屬性的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A>方法。  
  
-   <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A>驗證目前項目使用的所有屬性之後，必須呼叫方法<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A>方法。  
  
-   如果<xref:System.Xml.Schema.XmlSchemaAttribute>物件傳遞給<xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A>方法，<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A>方法會驗證對屬性<xref:System.Xml.Schema.XmlSchemaAttribute>物件。  
  
-   如果屬性已成功驗證在目前的項目內容中，<xref:System.Xml.Schema.XmlSchemaInfo>物件的 （如果已指定） <xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>，和<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>屬性會設定與驗證的結果。  
  
   
  
## Examples  
 下列範例會驗證`contosoBooks.xml`檔案對`contosoBooks.xsd`結構描述。 此範例使用 <xref:System.Xml.Serialization.XmlSerializer> 類別，將 `contosoBooks.xml` 檔案還原序列化，並將節點的值傳遞給 <xref:System.Xml.Schema.XmlSchemaValidator> 類別的方法。  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 該範例採用 `contosoBooks.xml` 檔案做為輸入。  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 該範例還採用 `contosoBooks.xsd` 做為輸入。  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">此屬性在目前項目內容中無效。</exception>
        <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個指定的參數為 <see langword="null" />。</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>驗證目前內容中的元素。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateElement">
      <MemberSignature Language="C#" Value="public void ValidateElement (string localName, string namespaceUri, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateElement(string localName, string namespaceUri, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateElement (localName As String, namespaceUri As String, schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateElement(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateElement : string * string * System.Xml.Schema.XmlSchemaInfo -&gt; unit" Usage="xmlSchemaValidator.ValidateElement (localName, namespaceUri, schemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">要驗證之元素的區域名稱。</param>
        <param name="namespaceUri">要驗證之元素的命名空間 (Namespace) URI。</param>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證項目名稱時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
        <summary>驗證目前內容中的元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A>方法。  
  
-   如果在目前內容中，已成功驗證項目名稱<xref:System.Xml.Schema.XmlSchemaInfo>物件的 （如果已指定） <xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A>，和<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>屬性會設定與驗證的結果。  
  
-   如果無效的項目名稱或其任何屬性目前的內容，<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>屬性設定為<xref:System.Xml.Schema.XmlSchemaValidity.Invalid>，否則為<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>屬性設定為<xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>。  
  
   
  
## Examples  
 下列範例會驗證`contosoBooks.xml`檔案對`contosoBooks.xsd`結構描述。 此範例使用 <xref:System.Xml.Serialization.XmlSerializer> 類別，將 `contosoBooks.xml` 檔案還原序列化，並將節點的值傳遞給 <xref:System.Xml.Schema.XmlSchemaValidator> 類別的方法。  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 該範例採用 `contosoBooks.xml` 檔案做為輸入。  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 該範例還採用 `contosoBooks.xsd` 做為輸入。  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">項目的名稱在目前內容中無效。</exception>
        <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <Member MemberName="ValidateElement">
      <MemberSignature Language="C#" Value="public void ValidateElement (string localName, string namespaceUri, System.Xml.Schema.XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateElement(string localName, string namespaceUri, class System.Xml.Schema.XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateElement (localName As String, namespaceUri As String, schemaInfo As XmlSchemaInfo, xsiType As String, xsiNil As String, xsiSchemaLocation As String, xsiNoNamespaceSchemaLocation As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateElement(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo, System::String ^ xsiType, System::String ^ xsiNil, System::String ^ xsiSchemaLocation, System::String ^ xsiNoNamespaceSchemaLocation);" />
      <MemberSignature Language="F#" Value="member this.ValidateElement : string * string * System.Xml.Schema.XmlSchemaInfo * string * string * string * string -&gt; unit" Usage="xmlSchemaValidator.ValidateElement (localName, namespaceUri, schemaInfo, xsiType, xsiNil, xsiSchemaLocation, xsiNoNamespaceSchemaLocation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
        <Parameter Name="xsiType" Type="System.String" />
        <Parameter Name="xsiNil" Type="System.String" />
        <Parameter Name="xsiSchemaLocation" Type="System.String" />
        <Parameter Name="xsiNoNamespaceSchemaLocation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要驗證之元素的區域名稱。</param>
        <param name="namespaceUri">要驗證之元素的命名空間 (Namespace) URI。</param>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證項目名稱時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
        <param name="xsiType">元素的 <c>xsi:Type</c> 屬性值。 這個參數可以是 <see langword="null" />。</param>
        <param name="xsiNil">元素的 <c>xsi:Nil</c> 屬性值。 這個參數可以是 <see langword="null" />。</param>
        <param name="xsiSchemaLocation">元素的 <c>xsi:SchemaLocation</c> 屬性值。 這個參數可以是 <see langword="null" />。</param>
        <param name="xsiNoNamespaceSchemaLocation">元素的 <c>xsi:NoNamespaceSchemaLocation</c> 屬性值。 這個參數可以是 <see langword="null" />。</param>
        <summary>驗證目前內容中已指定 <c>xsi:Yype</c>、<c>xsi:Nil</c>、<c>xsi:SchemaLocation</c> 和 <c>xsi:NoNamespaceSchemaLocation</c> 屬性值的元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A>方法。  
  
-   如果在目前內容中，已成功驗證項目名稱<xref:System.Xml.Schema.XmlSchemaInfo>物件的 （如果已指定） <xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A>，和<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>屬性會設定與驗證的結果。  
  
-   如果在目前內容中，無效的項目名稱或其任何屬性<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>屬性設定為<xref:System.Xml.Schema.XmlSchemaValidity.Invalid>，否則為<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>屬性設定為<xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>。  
  
-   如果<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>值並未當做參數傳遞<xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A>建構函式，`xsi:SchemaLocation`和`xsi:NoNamespaceSchemaLocation`屬性值會被忽略。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">項目的名稱在目前內容中無效。</exception>
        <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateEndElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>對於具有簡單內容的元素，根據元素的資料類型驗證它的文字內容是否有效；對於具有複雜內容的元素，驗證目前元素的內容是否完整。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateEndElement">
      <MemberSignature Language="C#" Value="public object ValidateEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateEndElement (schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateEndElement : System.Xml.Schema.XmlSchemaInfo -&gt; obj" Usage="xmlSchemaValidator.ValidateEndElement schemaInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證項目時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
        <summary>對於具有簡單內容的元素，根據元素的資料類型驗證它的文字內容是否有效；對於具有複雜內容的元素，驗證目前元素的內容是否完整。</summary>
        <returns>如果此元素具有簡單內容，則為此元素之已剖析的具類型文字值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>方法。  
  
-   具有簡單內容的項目<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>方法會驗證項目的文字內容是否根據其資料類型有效，且傳回的已剖析的具類型的值。 項目的文字內容取自先前呼叫的結果<xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>。  
  
-   具有複雜內容的項目<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>方法會驗證目前項目的內容是否完整。  
  
-   如果項目都有預設值，此值會傳回從<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>方法則是項目的預設值。  
  
-   如果<xref:System.Xml.Schema.XmlSchemaValidator>物件以建構<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>值做為參數，<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>識別條件約束規則 （如果有的話） 的方法會檢查套用至項目。  
  
-   如果項目已成功驗證在目前內容中，<xref:System.Xml.Schema.XmlSchemaInfo>物件的 （如果已指定） <xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>，和<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>屬性會設定與驗證的結果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">項目的內容無效。</exception>
        <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 方法。</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEndElement">
      <MemberSignature Language="C#" Value="public object ValidateEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo, object typedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo, object typedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateEndElement (schemaInfo As XmlSchemaInfo, typedValue As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo, System::Object ^ typedValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateEndElement : System.Xml.Schema.XmlSchemaInfo * obj -&gt; obj" Usage="xmlSchemaValidator.ValidateEndElement (schemaInfo, typedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
        <Parameter Name="typedValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證此項目的文字內容時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
        <param name="typedValue">此元素的具類型文字內容。</param>
        <summary>根據指定元素的資料類型，驗證此元素的文字內容是否有效。</summary>
        <returns>此元素之已剖析的具類型簡單內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  如果您要針對驗證`xs:key`， `xs:keyref`，或`xs:unique`識別條件約束，請勿使用<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>方法多載。 請改為呼叫<xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>方法並將它傳遞項目的值。 然後呼叫<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>方法多載會採用<xref:System.Xml.Schema.XmlSchemaInfo>做為引數，來檢查項目的文字內容是否根據其資料類型有效。  
  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>方法。  
  
-   具有簡單內容的項目<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A?displayProperty=nameWithType>方法會驗證項目的文字內容是否根據其資料類型有效，且傳回的已剖析的具類型的值。 從具型別做為參數傳遞的內容取得項目的文字內容。  
  
-   如果呼叫<xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>方法可能先前已，<xref:System.InvalidOperationException>就會擲回。  
  
-   如果項目具有複雜內容<xref:System.InvalidOperationException>就會擲回。  
  
-   如果<xref:System.Xml.Schema.XmlSchemaValidator>物件以建構<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>值做為參數，<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>識別條件約束規則 （如果有的話） 的方法會檢查套用至項目。  
  
-   如果項目已成功驗證在目前內容中，<xref:System.Xml.Schema.XmlSchemaInfo>物件的 （如果已指定） <xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>，和<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>屬性會設定與驗證的結果。  
  
   
  
## Examples  
 下列範例會驗證`contosoBooks.xml`檔案對`contosoBooks.xsd`結構描述。 此範例使用 <xref:System.Xml.Serialization.XmlSerializer> 類別，將 `contosoBooks.xml` 檔案還原序列化，並將節點的值傳遞給 <xref:System.Xml.Schema.XmlSchemaValidator> 類別的方法。  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 該範例採用 `contosoBooks.xml` 檔案做為輸入。  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 該範例還採用 `contosoBooks.xsd` 做為輸入。  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">此項目的文字內容無效。</exception>
        <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 方法 (例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 方法)、先前已呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 方法，或此項目具有複雜內容。</exception>
        <exception cref="T:System.ArgumentNullException">具型別之文字內容參數不能為 <see langword="null" />。</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEndOfAttributes">
      <MemberSignature Language="C#" Value="public void ValidateEndOfAttributes (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEndOfAttributes(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEndOfAttributes (schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEndOfAttributes(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateEndOfAttributes : System.Xml.Schema.XmlSchemaInfo -&gt; unit" Usage="xmlSchemaValidator.ValidateEndOfAttributes schemaInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證項目內容中的所有必要屬性都已存在時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
        <summary>驗證項目內容中的所有必要屬性是否均已存在，並準備 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件以驗證項目的子內容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A>方法。  
  
-   <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A>方法一律會呼叫之前<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A>。  
  
-   <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A>繼續項目內容的驗證之前，必須呼叫方法。  
  
-   如果項目內容中的所有必要的屬性不存在，<xref:System.Xml.Schema.XmlSchemaInfo>物件的 （如果已指定）<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>屬性設定為<xref:System.Xml.Schema.XmlSchemaValidity.Valid>。  
  
   
  
## Examples  
 下列範例會驗證`contosoBooks.xml`檔案對`contosoBooks.xsd`結構描述。 此範例使用 <xref:System.Xml.Serialization.XmlSerializer> 類別，將 `contosoBooks.xml` 檔案還原序列化，並將節點的值傳遞給 <xref:System.Xml.Schema.XmlSchemaValidator> 類別的方法。  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 該範例採用 `contosoBooks.xml` 檔案做為輸入。  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 該範例還採用 `contosoBooks.xsd` 做為輸入。  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">找不到目前項目內容中的一或多個必要屬性。</exception>
        <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> 方法。 例如，在呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
        <exception cref="T:System.ArgumentNullException">一或多個指定的參數為 <see langword="null" />。</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateText">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>驗證目前項目內容中是否允許文字，並且累積文件以驗證目前項目是否有簡單內容。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public void ValidateText (string elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateText(string elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateText (elementValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateText(System::String ^ elementValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateText : string -&gt; unit" Usage="xmlSchemaValidator.ValidateText elementValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementValue">目前項目內容中要驗證的文字 <see langword="string" />。</param>
        <summary>驗證在目前項目內容中是否允許指定的文字 <see langword="string" />，並在目前項目具有簡單內容的情況下，彙總文字以進行驗證。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>方法。  
  
-   如果元素具有簡單內容，文字`string`指定串連每次呼叫<xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>方法，直到<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>方法呼叫。 當<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>呼叫方法時，會驗證所有文字。  
  
-   如果項目具有複雜內容，就會不發生任何文字串連。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">在目前項目內容中不允許指定的文字 <see langword="string" />。</exception>
        <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
        <exception cref="T:System.ArgumentNullException">文字 <see langword="string" /> 參數不能為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public void ValidateText (System.Xml.Schema.XmlValueGetter elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateText(class System.Xml.Schema.XmlValueGetter elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateText (elementValue As XmlValueGetter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateText(System::Xml::Schema::XmlValueGetter ^ elementValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateText : System.Xml.Schema.XmlValueGetter -&gt; unit" Usage="xmlSchemaValidator.ValidateText elementValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.Xml.Schema.XmlValueGetter" />
      </Parameters>
      <Docs>
        <param name="elementValue">
          <see cref="T:System.Xml.Schema.XmlValueGetter" />
          <see langword="delegate" />，用於將文字值當做與屬性之 XML 結構描述定義語言 (XSD) 類型相容的 Common Language Runtime (CLR) 類型進行傳遞。</param>
        <summary>驗證在目前項目內容中是否允許指定之 <see cref="T:System.Xml.Schema.XmlValueGetter" /> 物件傳回的文字，並在目前項目具有簡單內容的情況下，彙總文字以進行驗證。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>方法。  
  
-   如果元素具有簡單內容，文字`string`指定串連每次呼叫<xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>方法，直到<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>方法呼叫。 當<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>呼叫方法時，會驗證所有文字。  
  
-   如果項目具有複雜內容，就會不發生任何文字串連。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">在目前項目內容中不允許指定的文字 <see langword="string" />。</exception>
        <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
        <exception cref="T:System.ArgumentNullException">文字 <see langword="string" /> 參數不能為 <see langword="null" />。</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateWhitespace">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>驗證在目前元素內容中是否允許空白字元，並在目前元素具有簡單內容的情況下，彙總空白字元以進行驗證。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateWhitespace">
      <MemberSignature Language="C#" Value="public void ValidateWhitespace (string elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateWhitespace(string elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateWhitespace (elementValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateWhitespace(System::String ^ elementValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateWhitespace : string -&gt; unit" Usage="xmlSchemaValidator.ValidateWhitespace elementValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementValue">要在目前項目內容中驗證的空白區 <see langword="string" />。</param>
        <summary>驗證在目前項目內容中是否允許指定之 <see langword="string" /> 中的空白區，並在目前項目具有簡單內容的情況下，彙總空白區以進行驗證。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">在目前項目內容中不允許空白區。</exception>
        <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateWhitespace">
      <MemberSignature Language="C#" Value="public void ValidateWhitespace (System.Xml.Schema.XmlValueGetter elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateWhitespace(class System.Xml.Schema.XmlValueGetter elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateWhitespace (elementValue As XmlValueGetter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateWhitespace(System::Xml::Schema::XmlValueGetter ^ elementValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateWhitespace : System.Xml.Schema.XmlValueGetter -&gt; unit" Usage="xmlSchemaValidator.ValidateWhitespace elementValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.Xml.Schema.XmlValueGetter" />
      </Parameters>
      <Docs>
        <param name="elementValue">
          <see cref="T:System.Xml.Schema.XmlValueGetter" />
          <see langword="delegate" />，用於將空白字元值當做與屬性之 XML 結構描述定義語言 (XSD) 類型相容的 Common Language Runtime (CLR) 類型進行傳遞。</param>
        <summary>驗證在目前項目內容中是否允許指定之 <see cref="T:System.Xml.Schema.XmlValueGetter" /> 物件傳回的空白區，並在目前項目具有簡單內容的情況下，彙總空白區以進行驗證。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">在目前項目內容中不允許空白區。</exception>
        <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Xml.Schema.ValidationEventHandler" />，可接收結構描述驗證期間遇到的結構描述驗證警告和錯誤。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果沒有<xref:System.Xml.Schema.ValidationEventHandler>指定，則<xref:System.Xml.Schema.XmlSchemaValidationException>就會擲回的所有結構描述驗證錯誤，<xref:System.Xml.Schema.XmlSeverityType>值<xref:System.Xml.Schema.XmlSeverityType.Error>。 <xref:System.Xml.Schema.XmlSchemaValidationException>才會擲回的驗證警告<xref:System.Xml.Schema.XmlSeverityType>值<xref:System.Xml.Schema.XmlSeverityType.Warning>。  
  
   
  
## Examples  
 下列範例會驗證`contosoBooks.xml`檔案對`contosoBooks.xsd`結構描述。 此範例使用 <xref:System.Xml.Serialization.XmlSerializer> 類別，將 `contosoBooks.xml` 檔案還原序列化，並將節點的值傳遞給 <xref:System.Xml.Schema.XmlSchemaValidator> 類別的方法。  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 該範例採用 `contosoBooks.xml` 檔案做為輸入。  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 該範例還採用 `contosoBooks.xsd` 做為輸入。  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
        <altmember cref="T:System.Xml.Schema.XmlSeverityType" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventSender">
      <MemberSignature Language="C#" Value="public object ValidationEventSender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ValidationEventSender" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationEventSender As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ValidationEventSender { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationEventSender : obj with get, set" Usage="System.Xml.Schema.XmlSchemaValidator.ValidationEventSender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定物件，該物件是以驗證事件的傳送者物件形式傳送。</summary>
        <value>
          <see cref="T:System.Object" />，預設為這個 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 如需驗證事件的範例，請參閱<xref:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler>事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Schema.XmlSchemaValidator.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>設定 <see cref="T:System.Xml.XmlResolver" /> 物件，用於解析 <c>xs:import</c> 和 <c>xs:include</c> 元素，以及 <c>xsi:schemaLocation</c> 和 <c>xsi:noNamespaceSchemaLocation</c> 屬性。</summary>
        <value>
          <see cref="T:System.Xml.XmlResolver" /> 物件，預設值為 <see cref="T:System.Xml.XmlUrlResolver" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>和<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>驗證旗標<xref:System.Xml.Schema.XmlSchemaValidator>物件不是集合是預設值。 此外，<xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A>屬性<xref:System.Xml.Schema.XmlSchemaValidator>物件是`null`預設。 如此一來，外部結構描述中參考包含，import 或 redefine 項目不會解決預設值。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>