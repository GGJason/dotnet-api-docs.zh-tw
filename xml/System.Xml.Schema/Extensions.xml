<Type Name="Extensions" FullName="System.Xml.Schema.Extensions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e7e34dcb838e574a5bf90abd34b31950b0d4f6ae" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.Extensions" />
  <TypeSignature Language="VB.NET" Value="Public Module Extensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class Extensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d5d0f-101">這個類別包含 XSD 驗證的 LINQ to XML 擴充方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d5d0f-101">This class contains the LINQ to XML extension methods for XSD validation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d0f-102">這個類別也包含方法，以取得已驗證的 XML 節點的後結構描述驗證資訊集 (PSVI)。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-102">This class also contains methods to get the post-schema-validation infoset (PSVI) of a validated XML node.</span></span>  
  
 <span data-ttu-id="d5d0f-103">當您驗證<xref:System.Xml.Linq.XDocument>， <xref:System.Xml.Linq.XElement>，或<xref:System.Xml.Linq.XAttribute>，您可以也可以選擇性地填入 XML 樹狀結構，使用後結構描述驗證資訊集。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-103">When you validate an <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>, or <xref:System.Xml.Linq.XAttribute>, you can also optionally populate the XML tree with the post-schema-validation infoset.</span></span> <span data-ttu-id="d5d0f-104">PSVI 資訊會新增為型別的附註<xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-104">PSVI information is added as an annotation of type <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5d0f-105">在 XSD[範例 XSD 檔： 客戶和訂單](http://msdn.microsoft.com/library/8b05efe3-cc5e-4c7b-b322-892dbda41687)包含可以用來驗證 XML 文件中的結構描述[範例 XML 檔： 客戶和訂單 (LINQ to XML)](http://msdn.microsoft.com/library/26790c41-5976-4558-a096-d0f67bfc4d92)。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-105">The XSD in [Sample XSD File: Customers and Orders](http://msdn.microsoft.com/library/8b05efe3-cc5e-4c7b-b322-892dbda41687) contains a schema that can be used to validate the XML document in [Sample XML File: Customers and Orders (LINQ to XML)](http://msdn.microsoft.com/library/26790c41-5976-4558-a096-d0f67bfc4d92).</span></span> <span data-ttu-id="d5d0f-106">下列範例會載入結構描述和文件，來驗證文件、 文件變更，讓`xs:key`和`xs:keyref`關聯性無效，，然後嘗試再次驗證。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-106">The following example loads the schema and the document, validates the document, changes the document so that the `xs:key` and `xs:keyref` relationship is not valid, and then attempts to validate again.</span></span>  
  
```csharp  
  
                XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", "CustomersOrders.xsd");  
  
XDocument custOrd = XDocument.Load("CustomersOrders.xml");  
  
Console.WriteLine("Validating custOrd");  
bool errors = false;  
custOrd.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("custOrd {0}", errors ? "did not validate" : "validated");  
  
// Modify the custOrd tree so that it is no longer valid.  
custOrd.Root.Element("Orders").Element("Order").Element("CustomerID").Value = "AAAAA";  
  
Console.WriteLine();  
Console.WriteLine("Validating custOrd");  
errors = false;  
custOrd.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("custOrd {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", "CustomersOrders.xsd")  
  
    Console.WriteLine("Validating custOrd")  
    Dim custOrd As XDocument = XDocument.Load("CustomersOrders.xml")  
    errors = False  
    custOrd.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("custOrd {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating custOrd")  
    ' Modify the source document so that it will not validate.  
    custOrd.Root.Element("Orders").Element("Order").Element("CustomerID").Value = "AAAAA"  
    errors = False  
    custOrd.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("custOrd {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="d5d0f-107">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="d5d0f-107">This example produces the following output:</span></span>  
  
```  
Validating custOrd  
custOrd validated  
  
Validating custOrd  
The key sequence 'AAAAA' in Keyref fails to refer to some key.  
custOrd did not validate  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetSchemaInfo">
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5d0f-108">取得已驗證節點的後結構描述驗證資訊集 (PSVI)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-108">Gets the post-schema-validation infoset (PSVI) of a validated node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d0f-109">您已驗證之後<xref:System.Xml.Linq.XDocument>，您可以擷取的後結構描述驗證 infoset<xref:System.Xml.Linq.XElement>或<xref:System.Xml.Linq.XAttribute>包含在文件。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-109">After you have validated an <xref:System.Xml.Linq.XDocument>, you can retrieve the post-schema-validation infoset for an <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> that is contained in the document.</span></span>  
  
 <span data-ttu-id="d5d0f-110">擷取後<xref:System.Xml.Schema.IXmlSchemaInfo>物件，您可以使用<xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A>或<xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A>屬性來取得部分驗證類型 (<xref:System.Xml.Schema.XmlSchemaElement>或<xref:System.Xml.Schema.XmlSchemaAttribute>)。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-110">After retrieving the <xref:System.Xml.Schema.IXmlSchemaInfo> object, you can use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> or <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> properties to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement> or <xref:System.Xml.Schema.XmlSchemaAttribute>).</span></span> <span data-ttu-id="d5d0f-111">您可以使用的部分驗證類型來驗證屬性或子樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-111">You can use the partial validation types to validate an attribute or a sub-tree.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSchemaInfo">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XAttribute source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo(class System.Xml.Linq.XAttribute source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaInfo (source As XAttribute) As IXmlSchemaInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Xml::Schema::IXmlSchemaInfo ^ GetSchemaInfo(System::Xml::Linq::XAttribute ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="d5d0f-112">之前已驗證的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-112">An <see cref="T:System.Xml.Linq.XAttribute" /> that has been previously validated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5d0f-113">取得已驗證屬性的後結構描述驗證資訊集 (PSVI)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-113">Gets the post-schema-validation infoset (PSVI) of a validated attribute.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5d0f-114">
            <see cref="T:System.Xml.Schema.IXmlSchemaInfo" />，其中包含 <see cref="T:System.Xml.Linq.XAttribute" /> 的後結構描述驗證資訊集。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-114">A <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> that contains the post-schema-validation infoset for an <see cref="T:System.Xml.Linq.XAttribute" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d0f-115">您可以使用<xref:System.Xml.Schema.IXmlSchemaInfo>傳回這個方法來判斷已驗證之屬性的某些特性。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-115">You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated attribute.</span></span> <span data-ttu-id="d5d0f-116">例如，您可以判斷是否屬性是從 「 XSD 中的預設屬性值。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-116">For example, you can determine if the attribute came from a default attribute value in an XSD.</span></span>  
  
 <span data-ttu-id="d5d0f-117">您使用<xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A>屬性來取得部分驗證類型 (<xref:System.Xml.Schema.XmlSchemaAttribute>)。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-117">You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaAttribute>).</span></span> <span data-ttu-id="d5d0f-118">您可以使用它來重新驗證而不驗證整份文件的屬性。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-118">You can use it to revalidate an attribute without validating an entire document.</span></span>  
  
 <span data-ttu-id="d5d0f-119">如需這個屬性的範例，請參閱<xref:System.Xml.Schema.Extensions.Validate%2A>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-119">For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaInfo">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XElement source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo(class System.Xml.Linq.XElement source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSchemaInfo (source As XElement) As IXmlSchemaInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Xml::Schema::IXmlSchemaInfo ^ GetSchemaInfo(System::Xml::Linq::XElement ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="d5d0f-120">之前已驗證的 <see cref="T:System.Xml.Linq.XElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-120">An <see cref="T:System.Xml.Linq.XElement" /> that has been previously validated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5d0f-121">取得已驗證項目的後結構描述驗證資訊集 (PSVI)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-121">Gets the post-schema-validation infoset (PSVI) of a validated element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5d0f-122">
            <see cref="T:System.Xml.Schema.IXmlSchemaInfo" />，其中包含 <see cref="T:System.Xml.Linq.XElement" /> 的後結構描述驗證資訊集 (PSVI)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-122">A <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> that contains the post-schema-validation infoset (PSVI) for an <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d0f-123">您可以使用<xref:System.Xml.Schema.IXmlSchemaInfo>傳回這個方法來判斷已驗證的項目之某些特性。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-123">You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated element.</span></span> <span data-ttu-id="d5d0f-124">例如，您可以判斷動態結構描述項目的型別。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-124">For example, you can determine the dynamic schema type of the element.</span></span>  
  
 <span data-ttu-id="d5d0f-125">您使用<xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A>屬性來取得部分驗證類型 (<xref:System.Xml.Schema.XmlSchemaElement>)。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-125">You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement>).</span></span> <span data-ttu-id="d5d0f-126">您可以使用它來重新驗證與在其根項目樹狀子目錄，而不驗證整份文件。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-126">You can use it to revalidate a sub-tree with an element at its root without validating an entire document.</span></span>  
  
 <span data-ttu-id="d5d0f-127">如需這個屬性的範例，請參閱<xref:System.Xml.Schema.Extensions.Validate%2A>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-127">For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5d0f-128">下列範例會填入 PSVI 的樹狀目錄。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-128">The following example populates the tree with a PSVI.</span></span> <span data-ttu-id="d5d0f-129">驗證之後，它會列印所有項目和屬性在樹狀目錄中，不能根據 PSVI。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-129">After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.</span></span>  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
    string xsdMarkup =  
         @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
   <xsd:simpleType name='GCType'>  
    <xsd:restriction base='xsd:token'>  
     <xsd:enumeration value='AAA'/>  
     <xsd:enumeration value='BBB'/>  
    </xsd:restriction>  
   </xsd:simpleType>  
   <xsd:element name='Root'>  
    <xsd:complexType>  
     <xsd:sequence>  
      <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
       <xsd:complexType>  
        <xsd:sequence>  
         <xsd:element name='GrandChild1' type='GCType'/>  
         <xsd:element name='GrandChild2' type='GCType'/>  
         <xsd:element name='GrandChild3' type='GCType'/>  
        </xsd:sequence>  
       </xsd:complexType>  
      </xsd:element>  
     </xsd:sequence>  
    </xsd:complexType>  
   </xsd:element>  
  </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XElement("Child1",  
                new XElement("GrandChild1", "AAA"),  
                new XElement("GrandChild2", "ZZZ"),  
                new XElement("GrandChild3", "ZZZ")  
            )  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:simpleType name='GCType'>  
            <xsd:restriction base='xsd:token'>  
                <xsd:enumeration value='AAA'/>  
                <xsd:enumeration value='BBB'/>  
            </xsd:restriction>  
        </xsd:simpleType>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                        <xsd:complexType>  
                            <xsd:sequence>  
                                <xsd:element name='GrandChild1' type='GCType'/>  
                                <xsd:element name='GrandChild2' type='GCType'/>  
                                <xsd:element name='GrandChild3' type='GCType'/>  
                            </xsd:sequence>  
                        </xsd:complexType>  
                    </xsd:element>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>  
            <GrandChild1>AAA</GrandChild1>  
            <GrandChild2>ZZZ</GrandChild2>  
            <GrandChild3>ZZZ</GrandChild3>  
        </Child1>  
    </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="d5d0f-130">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="d5d0f-130">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
The 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
The 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
doc1 did not validate  
Invalid Element /Root  
Invalid Element /Root/Child1  
Invalid Element /Root/Child1/GrandChild2  
Invalid Element /Root/Child1/GrandChild3  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5d0f-131">驗證 <see cref="T:System.Xml.Linq.XDocument" />、<see cref="T:System.Xml.Linq.XElement" /> 或 <see cref="T:System.Xml.Linq.XAttribute" /> 是否符合 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的 XSD。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-131">Validates that an <see cref="T:System.Xml.Linq.XDocument" />, an <see cref="T:System.Xml.Linq.XElement" />, or an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d0f-132">這些方法會使用基礎<xref:System.Xml.XmlReader>XSD 針對 XML 樹狀結構的驗證。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-132">These methods use an underlying <xref:System.Xml.XmlReader> to validate the XML tree against an XSD.</span></span>  
  
 <span data-ttu-id="d5d0f-133">驗證錯誤和警告訊息則會使用處理<xref:System.Xml.Schema.ValidationEventHandler>委派。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-133">Validation error and warning messages are handled using the <xref:System.Xml.Schema.ValidationEventHandler> delegate.</span></span> <span data-ttu-id="d5d0f-134">如果沒有事件處理常式提供給這些方法時，驗證錯誤會公開為<xref:System.Xml.Schema.XmlSchemaValidationException>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-134">If no event handler is provided to these methods, validation errors are exposed as an <xref:System.Xml.Schema.XmlSchemaValidationException>.</span></span> <span data-ttu-id="d5d0f-135">驗證警告不會導致<xref:System.Xml.Schema.XmlSchemaValidationException>擲回。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-135">Validation warnings do not cause an <xref:System.Xml.Schema.XmlSchemaValidationException> to be thrown.</span></span>  
  
 <span data-ttu-id="d5d0f-136">這些擴充方法的某些選擇性地允許後結構描述驗證 infoset (PSVI) 填入。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-136">Some of these extension methods optionally allow population of the post-schema-validation infoset (PSVI).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XDocument source, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XDocument ^ source, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XDocument" RefType="this" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="d5d0f-137">要驗證的 <see cref="T:System.Xml.Linq.XDocument" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-137">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</span>
          </span>
        </param>
        <param name="schemas">
          <span data-ttu-id="d5d0f-138">要用來驗證的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-138">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span>
          </span>
        </param>
        <param name="validationEventHandler">
          <span data-ttu-id="d5d0f-139">在讀取器遇到驗證錯誤時發生之事件的 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-139">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span>
          </span>
          <span data-ttu-id="d5d0f-140">若為 <see langword="null" />，則於發生驗證錯誤時擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-140">If <see langword="null" />, throws an exception upon validation errors.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5d0f-141">這個方法會驗證 <see cref="T:System.Xml.Linq.XDocument" /> 是否符合 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的 XSD。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-141">This method validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d0f-142">這個擴充方法會驗證<xref:System.Xml.Linq.XDocument>符合結構描述內容模型中<xref:System.Xml.Schema.XmlSchemaSet>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-142">This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5d0f-143">下列範例會建立 <xref:System.Xml.Schema.XmlSchemaSet>，然後針對結構描述設定驗證兩個 <xref:System.Xml.Linq.XDocument> 物件。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-143">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet>, then validates two <xref:System.Xml.Linq.XDocument> objects against the schema set.</span></span> <span data-ttu-id="d5d0f-144">其中一個文件有效，另一個無效。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-144">One of the documents is valid, the other is not.</span></span>  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child2", "content1")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     });  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>content1</Child1>  
        <Child2>content2</Child2>  
    </Root>  
  
    Dim doc2 As XDocument = _  
    <?xml version='1.0'?>  
    <Root>  
        <Child1>content1</Child1>  
        <Child3>content1</Child3>  
    </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="d5d0f-145">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="d5d0f-145">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
          <span data-ttu-id="d5d0f-146">針對 XML 結構描述定義語言 (XSD) 驗證錯誤而擲回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-146">Thrown for XML Schema Definition Language (XSD) validation errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XAttribute source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XAttribute ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="d5d0f-147">要驗證的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-147">The <see cref="T:System.Xml.Linq.XAttribute" /> to validate.</span>
          </span>
        </param>
        <param name="partialValidationType">
          <span data-ttu-id="d5d0f-148">
            <see cref="T:System.Xml.Schema.XmlSchemaObject" />，指定要驗證的樹狀子目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-148">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span>
          </span>
        </param>
        <param name="schemas">
          <span data-ttu-id="d5d0f-149">要用來驗證的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-149">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span>
          </span>
        </param>
        <param name="validationEventHandler">
          <span data-ttu-id="d5d0f-150">在讀取器遇到驗證錯誤時發生之事件的 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-150">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span>
          </span>
          <span data-ttu-id="d5d0f-151">若為 <see langword="null" />，則於發生驗證錯誤時擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-151">If <see langword="null" />, throws an exception upon validation errors.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5d0f-152">這個方法會驗證 <see cref="T:System.Xml.Linq.XAttribute" /> 是否符合指定的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-152">This method validates that an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d0f-153">您可以使用這個方法以驗證<xref:System.Xml.Linq.XAttribute>符合結構描述。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-153">You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema.</span></span> <span data-ttu-id="d5d0f-154">當您已修改屬性，且您想要確定仍符合其結構描述時，通常會使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-154">You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="d5d0f-155">您也可以驗證整份文件，但所花費處理時間少只驗證屬性。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-155">You could validate the entire document, but it takes less processing time to validate just the attribute.</span></span>  
  
 <span data-ttu-id="d5d0f-156">如果您要傳入`null`如`validationEventHandler`，這個方法會引發例外狀況時驗證錯誤。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-156">If you pass `null` for `validationEventHandler`, this method raises an exception upon validation errors.</span></span> <span data-ttu-id="d5d0f-157">驗證警告將不會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-157">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="d5d0f-158">若要驗證的屬性，您可以使用的執行個體<xref:System.Xml.Schema.XmlSchemaObject>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-158">To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="d5d0f-159">您可以取得此執行個體，以各種方式。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-159">You can obtain this instance in various ways.</span></span> <span data-ttu-id="d5d0f-160">簡單方法是，如下所示：</span><span class="sxs-lookup"><span data-stu-id="d5d0f-160">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="d5d0f-161">驗證文件符合結構描述。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-161">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="d5d0f-162">新增後結構描述驗證 infoset (PSVI)，藉由呼叫<xref:System.Xml.Schema.Extensions.Validate%2A>擴充方法。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-162">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="d5d0f-163">呼叫<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>擴充方法來擷取該物件會實作<xref:System.Xml.Schema.IXmlSchemaInfo>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-163">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="d5d0f-164">您可以從擷取的物件，取得<xref:System.Xml.Schema.XmlSchemaObject>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-164">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="d5d0f-165">如果您收到<xref:System.Xml.Schema.XmlSchemaObject>如<xref:System.Xml.Linq.XElement>，型別會<xref:System.Xml.Schema.XmlSchemaElement>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-165">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="d5d0f-166">如果您收到<xref:System.Xml.Schema.XmlSchemaObject>如<xref:System.Xml.Linq.XAttribute>，型別會<xref:System.Xml.Schema.XmlSchemaAttribute>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-166">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="d5d0f-167">執行個體之後<xref:System.Xml.Schema.XmlSchemaObject>，您可以使用這個方法來驗證屬性。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-167">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:simpleContent>  
          <xsd:extension base='xsd:string'>  
           <xsd:attribute name='Lang' use='required'>  
            <xsd:simpleType>  
             <xsd:restriction base='xsd:token'>  
              <xsd:enumeration value='C#'/>  
              <xsd:enumeration value='VB'/>  
             </xsd:restriction>  
            </xsd:simpleType>  
           </xsd:attribute>  
          </xsd:extension>  
         </xsd:simpleContent>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XAttribute("Lang", "C#")  
    )  
);  
  
Console.WriteLine("Validating doc1 ...");  
bool errors = false;  
doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating Lang attribute ...");  
XAttribute lang = doc1.Root.Attribute("Lang");  
  
errors = false;  
lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
  
// the following makes the Lang attribute invalid according to the schema  
lang.Value = "VC";  
  
Console.WriteLine();  
Console.WriteLine("Validating Lang attribute ...");  
  
errors = false;  
lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
      <?xml version='1.0'?>  
      <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
          <xsd:element name='Root'>  
              <xsd:complexType>  
                  <xsd:simpleContent>  
                      <xsd:extension base='xsd:string'>  
                          <xsd:attribute name='Lang' use='required'>  
                              <xsd:simpleType>  
                                  <xsd:restriction base='xsd:token'>  
                                      <xsd:enumeration value='C#'/>  
                                      <xsd:enumeration value='VB'/>  
                                  </xsd:restriction>  
                              </xsd:simpleType>  
                          </xsd:attribute>  
                      </xsd:extension>  
                  </xsd:simpleContent>  
              </xsd:complexType>  
          </xsd:element>  
      </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root Lang='C#'/>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
    Dim lang As XAttribute = doc1.Root.Attribute("Lang")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
  
    ' the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC"  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="d5d0f-168">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="d5d0f-168">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Lang attribute ...  
lang validated  
  
Validating Lang attribute ...  
The 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  
lang did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
          <span data-ttu-id="d5d0f-169">針對 XML 結構描述定義語言 (XSD) 驗證錯誤而擲回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-169">Thrown for XML Schema Definition Language (XSD) validation errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XDocument source, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XDocument ^ source, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XDocument" RefType="this" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="d5d0f-170">要驗證的 <see cref="T:System.Xml.Linq.XDocument" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-170">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</span>
          </span>
        </param>
        <param name="schemas">
          <span data-ttu-id="d5d0f-171">要用來驗證的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-171">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span>
          </span>
        </param>
        <param name="validationEventHandler">
          <span data-ttu-id="d5d0f-172">在讀取器遇到驗證錯誤時發生之事件的 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-172">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span>
          </span>
          <span data-ttu-id="d5d0f-173">若為 <see langword="null" />，則於發生驗證錯誤時擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-173">If <see langword="null" />, throws an exception upon validation errors.</span>
          </span>
        </param>
        <param name="addSchemaInfo">
          <span data-ttu-id="d5d0f-174">指出是否要填入 Post-Schema-Validation Infoset (PSVI) 的 <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-174">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5d0f-175">驗證 <see cref="T:System.Xml.Linq.XDocument" /> 是否符合 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的 XSD，並選擇性地將後結構描述驗證資訊集 (PSVI) 填入 XML 樹狀目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-175">Validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d0f-176">這個擴充方法會驗證<xref:System.Xml.Linq.XDocument>符合結構描述內容模型中<xref:System.Xml.Schema.XmlSchemaSet>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-176">This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.</span></span>  
  
 <span data-ttu-id="d5d0f-177">如果`addSchemaInfo`是`true`，這個方法會填入 XML 樹狀結構，使用後結構描述驗證 infoset (PSVI)。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-177">If `addSchemaInfo` is `true`, this method populates the XML tree with the post-schema-validation infoset (PSVI).</span></span>  
  
 <span data-ttu-id="d5d0f-178">有兩個步驟來填入 XML 樹狀結構的 PSVI。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-178">There are two steps to populating the XML tree with the PSVI.</span></span>  
  
1.  <span data-ttu-id="d5d0f-179">首先，註解加入所有節點在樹狀目錄中，您可以呼叫<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType>或<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType>項目或在樹狀目錄中的屬性。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-179">First, an annotation is added to all nodes in the tree to enable you to call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> or <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> on an element or attribute in the tree.</span></span>  
  
2.  <span data-ttu-id="d5d0f-180">第二，預設項目和屬性在 XSD 中定義，會加入到 XML 樹狀結構中。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-180">Second, default elements and attributes defined in the XSD are added to the XML tree.</span></span> <span data-ttu-id="d5d0f-181">透過呼叫其中一個<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>方法，您可以判斷是否特定的項目或屬性已加入從 XSD 做為預設項目或屬性。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-181">By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5d0f-182">下列範例包含定義 XSD`Child2`具有項目`Att1`屬性預設值。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-182">The following example contains an XSD that defines the `Child2` element with an `Att1` attribute with a default value.</span></span> <span data-ttu-id="d5d0f-183">已成功驗證之後文件，具有預設值的屬性加入到 XML 樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-183">After successfully validating the document, the attribute with the default value is added to the XML tree.</span></span> <span data-ttu-id="d5d0f-184">請注意，沒有預設屬性加入`doc2`，這不會針對結構描述驗證。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-184">Note that the default attribute is not added to `doc2`, which does not validate against the schema.</span></span>  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:simpleContent>  
             <xsd:extension base='xsd:string'>  
              <xsd:attribute name='Att1' default='Att1 Default Value'/>  
             </xsd:extension>  
            </xsd:simpleContent>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "c1"),  
        new XElement("Child2", "c2")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                           {  
                               Console.WriteLine("{0}", e.Message);  
                               errors = true;  
                           }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc1:");  
Console.WriteLine(doc1);  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc2:");  
Console.WriteLine(doc2);  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
    <?xml version='1.0'?>  
    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
        <xsd:element name='Root'>  
            <xsd:complexType>  
                <xsd:sequence>  
                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
                        <xsd:complexType>  
                            <xsd:simpleContent>  
                                <xsd:extension base='xsd:string'>  
                                    <xsd:attribute name='Att1' default='Att1 Default Value'/>  
                                </xsd:extension>  
                            </xsd:simpleContent>  
                        </xsd:complexType>  
                    </xsd:element>  
                </xsd:sequence>  
            </xsd:complexType>  
        </xsd:element>  
    </xsd:schema>  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root>  
                                <Child1>c1</Child1>  
                                <Child2>c2</Child2>  
                            </Root>  
    Dim doc2 As XDocument = <?xml version='1.0'?>  
                            <Root>  
                                <Child1>content1</Child1>  
                                <Child3>content1</Child3>  
                            </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc1:")  
    Console.WriteLine(doc1)  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc2:")  
    Console.WriteLine(doc2)  
End Sub  
```  
  
 <span data-ttu-id="d5d0f-185">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="d5d0f-185">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
  
Contents of doc1:  
<Root>  
  <Child1>c1</Child1>  
  <Child2 Att1="Att1 Default Value">c2</Child2>  
</Root>  
  
Contents of doc2:  
<Root>  
  <Child1>content1</Child1>  
  <Child3>content1</Child3>  
</Root>  
```  
  
 <span data-ttu-id="d5d0f-186">下列範例會填入 PSVI 的樹狀目錄。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-186">The following example populates the tree with PSVI.</span></span> <span data-ttu-id="d5d0f-187">驗證之後，它會列印所有項目和屬性在樹狀目錄中，不能根據 PSVI。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-187">After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.</span></span>  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
   string xsdMarkup =  
        @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
           <xsd:simpleType name='GCType'>  
            <xsd:restriction base='xsd:token'>  
             <xsd:enumeration value='AAA'/>  
             <xsd:enumeration value='BBB'/>  
            </xsd:restriction>  
           </xsd:simpleType>  
           <xsd:element name='Root'>  
            <xsd:complexType>  
             <xsd:sequence>  
              <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
               <xsd:complexType>  
                <xsd:sequence>  
                 <xsd:element name='GrandChild1' type='GCType'/>  
                 <xsd:element name='GrandChild2' type='GCType'/>  
                 <xsd:element name='GrandChild3' type='GCType'/>  
                </xsd:sequence>  
               </xsd:complexType>  
              </xsd:element>  
             </xsd:sequence>  
            </xsd:complexType>  
           </xsd:element>  
          </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XElement("Child1",  
                new XElement("GrandChild1", "AAA"),  
                new XElement("GrandChild2", "ZZZ"),  
                new XElement("GrandChild3", "ZZZ")  
            )  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
        {  
            Console.WriteLine(e.Message);  
            errors = true;  
        }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:simpleType name='GCType'>  
                <xsd:restriction base='xsd:token'>  
                    <xsd:enumeration value='AAA'/>  
                    <xsd:enumeration value='BBB'/>  
                </xsd:restriction>  
            </xsd:simpleType>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:sequence>  
                                    <xsd:element name='GrandChild1' type='GCType'/>  
                                    <xsd:element name='GrandChild2' type='GCType'/>  
                                    <xsd:element name='GrandChild3' type='GCType'/>  
                                </xsd:sequence>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>  
                <GrandChild1>AAA</GrandChild1>  
                <GrandChild2>ZZZ</GrandChild2>  
                <GrandChild3>ZZZ</GrandChild3>  
            </Child1>  
        </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="d5d0f-188">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="d5d0f-188">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
The 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
The 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  
doc1 did not validate  
Invalid Element /Root  
Invalid Element /Root/Child1  
Invalid Element /Root/Child1/GrandChild2  
Invalid Element /Root/Child1/GrandChild3  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
          <span data-ttu-id="d5d0f-189">針對 XML 結構描述定義語言 (XSD) 驗證錯誤而擲回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-189">Thrown for XML Schema Definition Language (XSD) validation errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XElement source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XElement ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="d5d0f-190">要驗證的 <see cref="T:System.Xml.Linq.XElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-190">The <see cref="T:System.Xml.Linq.XElement" /> to validate.</span>
          </span>
        </param>
        <param name="partialValidationType">
          <span data-ttu-id="d5d0f-191">
            <see cref="T:System.Xml.Schema.XmlSchemaObject" />，指定要驗證的樹狀子目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-191">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span>
          </span>
        </param>
        <param name="schemas">
          <span data-ttu-id="d5d0f-192">要用來驗證的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-192">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span>
          </span>
        </param>
        <param name="validationEventHandler">
          <span data-ttu-id="d5d0f-193">在讀取器遇到驗證錯誤時發生之事件的 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-193">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span>
          </span>
          <span data-ttu-id="d5d0f-194">若為 <see langword="null" />，則於發生驗證錯誤時擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-194">If <see langword="null" />, throws an exception upon validation errors.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5d0f-195">這個方法會驗證 <see cref="T:System.Xml.Linq.XElement" /> 樹狀子目錄是否符合指定的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-195">This method validates that an <see cref="T:System.Xml.Linq.XElement" /> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d0f-196">您可以使用這個方法以驗證子樹狀目錄 (與<xref:System.Xml.Linq.XElement>在其根) 符合結構描述。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-196">You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at its root) conforms to a schema.</span></span> <span data-ttu-id="d5d0f-197">當您已修改子樹狀目錄中，且您想要確定仍符合其結構描述時，通常會使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-197">You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="d5d0f-198">您也可以驗證整份文件，但它需要較少的處理時間只驗證樹狀子目錄。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-198">You could validate the entire document, but it takes less processing time to validate a just a sub-tree.</span></span>  
  
 <span data-ttu-id="d5d0f-199">如果您要傳入`null`如`validationEventHandler`，則這個方法會引發例外狀況時驗證錯誤。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-199">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="d5d0f-200">驗證警告將不會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-200">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="d5d0f-201">若要驗證子樹狀目錄中，您可以使用的執行個體<xref:System.Xml.Schema.XmlSchemaObject>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-201">To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="d5d0f-202">您可以取得此執行個體，以各種方式。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-202">You can obtain this instance in various ways.</span></span> <span data-ttu-id="d5d0f-203">簡單方法是，如下所示：</span><span class="sxs-lookup"><span data-stu-id="d5d0f-203">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="d5d0f-204">驗證文件符合結構描述。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-204">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="d5d0f-205">新增後結構描述驗證 infoset (PSVI)，藉由呼叫<xref:System.Xml.Schema.Extensions.Validate%2A>擴充方法。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-205">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="d5d0f-206">呼叫<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>擴充方法來擷取該物件會實作<xref:System.Xml.Schema.IXmlSchemaInfo>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-206">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="d5d0f-207">您可以從擷取的物件，取得<xref:System.Xml.Schema.XmlSchemaObject>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-207">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="d5d0f-208">如果您收到<xref:System.Xml.Schema.XmlSchemaObject>如<xref:System.Xml.Linq.XElement>，型別會<xref:System.Xml.Schema.XmlSchemaElement>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-208">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="d5d0f-209">如果您收到<xref:System.Xml.Schema.XmlSchemaObject>如<xref:System.Xml.Linq.XAttribute>，型別會<xref:System.Xml.Schema.XmlSchemaAttribute>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-209">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="d5d0f-210">執行個體之後<xref:System.Xml.Schema.XmlSchemaObject>，您可以使用這個方法來驗證樹狀子目錄。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-210">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an sub-tree.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:sequence>  
             <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  
             <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  
            </xsd:sequence>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1",  
            new XElement("GrandChild1", "gc"),  
            new XElement("GrandChild2", "gc")  
        )  
    )  
);  
  
Console.WriteLine("Validating doc1 ...");  
bool errors = false;  
doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating Child1 after first edit ...");  
XElement child1 = doc1.Element("Root").Element("Child1");  
child1.Add(new XElement("GrandChild2", "gc"));  
errors = false;  
child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("child1 {0}", errors ? "did not validate" : "validated");  
  
// the following makes the Child1 element invalid according to the schema  
child1.Add(new XElement("GrandChild3", "gc"));  
Console.WriteLine();  
Console.WriteLine("Validating Child1 after second edit ...");  
child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    });  
Console.WriteLine("child1 {0}", errors ? "did not validate" : "validated");  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:sequence>  
                                    <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  
                                    <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  
                                </xsd:sequence>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>  
                <GrandChild1>gc</GrandChild1>  
                <GrandChild2>gc</GrandChild2>  
            </Child1>  
        </Root>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Child1 after first edit ...")  
    Dim child1 As XElement = doc1.Element("Root").Element("Child1")  
    child1.Add(<GrandChild2>gc</GrandChild2>)  
    errors = False  
    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  
    Console.WriteLine("child1 {0}", IIf(errors, "did not validate", "validated"))  
  
    ' the following makes the Child1 element invalid according to the schema  
    child1.Add(<GrandChild3>gc</GrandChild3>)  
    Console.WriteLine()  
    Console.WriteLine("Validating Child1 after second edit ...")  
    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  
    Console.WriteLine("child1 {0}", IIf(errors, "did not validate", "validated"))  
End Sub  
```  
  
 <span data-ttu-id="d5d0f-211">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="d5d0f-211">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Child1 after first edit ...  
child1 validated  
  
Validating Child1 after second edit ...  
The element 'Child1' has invalid child element 'GrandChild3'.  
child1 did not validate  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
          <span data-ttu-id="d5d0f-212">針對 XML 結構描述定義語言 (XSD) 驗證錯誤而擲回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-212">Thrown for XML Schema Definition Language (XSD) validation errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XAttribute source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XAttribute ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XAttribute" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="d5d0f-213">要驗證的 <see cref="T:System.Xml.Linq.XAttribute" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-213">The <see cref="T:System.Xml.Linq.XAttribute" /> to validate.</span>
          </span>
        </param>
        <param name="partialValidationType">
          <span data-ttu-id="d5d0f-214">
            <see cref="T:System.Xml.Schema.XmlSchemaObject" />，指定要驗證的樹狀子目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-214">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span>
          </span>
        </param>
        <param name="schemas">
          <span data-ttu-id="d5d0f-215">要用來驗證的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-215">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span>
          </span>
        </param>
        <param name="validationEventHandler">
          <span data-ttu-id="d5d0f-216">在讀取器遇到驗證錯誤時發生之事件的 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-216">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span>
          </span>
          <span data-ttu-id="d5d0f-217">若為 <see langword="null" />，則於發生驗證錯誤時擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-217">If <see langword="null" />, throws an exception upon validation errors.</span>
          </span>
        </param>
        <param name="addSchemaInfo">
          <span data-ttu-id="d5d0f-218">指出是否要填入 Post-Schema-Validation Infoset (PSVI) 的 <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-218">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5d0f-219">驗證 <see cref="T:System.Xml.Linq.XAttribute" /> 是否符合指定的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，並選擇性地將後結構描述驗證資訊集 (PSVI) 填入 XML 樹狀目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-219">Validates that an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d0f-220">您可以使用這個方法以驗證<xref:System.Xml.Linq.XAttribute>符合結構描述。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-220">You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema.</span></span> <span data-ttu-id="d5d0f-221">當您已修改屬性，且您想要確定仍符合其結構描述時，通常會使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-221">You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="d5d0f-222">您也可以驗證整份文件，但所花費處理時間少只驗證屬性。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-222">You could validate the entire document, but it takes less processing time to validate just the attribute.</span></span>  
  
 <span data-ttu-id="d5d0f-223">如果`addSchemaInfo`是`true`，這個方法會填入後結構描述驗證 infoset (PSVI) 的屬性。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-223">If `addSchemaInfo` is `true`, this method populates the attribute with the post-schema-validation infoset (PSVI).</span></span> <span data-ttu-id="d5d0f-224">您已填入 XML 樹狀結構與 PSVI 之後，您可以呼叫<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType>已驗證之屬性上。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-224">After you have populated the XML tree with the PSVI, you can call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=nameWithType> on the validated attribute.</span></span> <span data-ttu-id="d5d0f-225">如果您要撰寫程式碼依賴所傳回的資料，這非常有用<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-225">This is useful if you are writing code that relies on data returned by <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>.</span></span>  
  
 <span data-ttu-id="d5d0f-226">如果您要傳入`null`如`validationEventHandler`，則這個方法會引發例外狀況時驗證錯誤。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-226">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="d5d0f-227">驗證警告將不會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-227">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="d5d0f-228">若要驗證的屬性，您可以使用的執行個體<xref:System.Xml.Schema.XmlSchemaObject>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-228">To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="d5d0f-229">您可以取得此執行個體，以各種方式。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-229">You can obtain this instance in various ways.</span></span> <span data-ttu-id="d5d0f-230">簡單方法是，如下所示：</span><span class="sxs-lookup"><span data-stu-id="d5d0f-230">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="d5d0f-231">驗證文件符合結構描述。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-231">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="d5d0f-232">新增後結構描述驗證 infoset (PSVI)，藉由呼叫<xref:System.Xml.Schema.Extensions.Validate%2A>擴充方法。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-232">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="d5d0f-233">呼叫<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>擴充方法來擷取該物件會實作<xref:System.Xml.Schema.IXmlSchemaInfo>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-233">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="d5d0f-234">您可以從擷取的物件，取得<xref:System.Xml.Schema.XmlSchemaObject>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-234">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="d5d0f-235">如果您收到<xref:System.Xml.Schema.XmlSchemaObject>如<xref:System.Xml.Linq.XElement>，型別會<xref:System.Xml.Schema.XmlSchemaElement>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-235">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="d5d0f-236">如果您收到<xref:System.Xml.Schema.XmlSchemaObject>如<xref:System.Xml.Linq.XAttribute>，型別會<xref:System.Xml.Schema.XmlSchemaAttribute>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-236">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="d5d0f-237">執行個體之後<xref:System.Xml.Schema.XmlSchemaObject>，您可以使用這個方法來驗證屬性。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-237">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                static void DumpInvalidNodes(XElement el)  
{  
    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
        Console.WriteLine("Invalid Element {0}",  
            el.AncestorsAndSelf()  
            .InDocumentOrder()  
            .Aggregate("", (s, i) => s + "/" + i.Name.ToString()));  
    foreach (XAttribute att in el.Attributes())  
        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  
            Console.WriteLine("Invalid Attribute {0}",  
                att  
                .Parent  
                .AncestorsAndSelf()  
                .InDocumentOrder()  
                .Aggregate("",  
                    (s, i) => s + "/" + i.Name.ToString()) + "/@" + att.Name.ToString()  
                );  
    foreach (XElement child in el.Elements())  
        DumpInvalidNodes(child);  
}  
  
static void Main(string[] args)  
{  
    string xsdMarkup =  
        @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:simpleContent>  
          <xsd:extension base='xsd:string'>  
           <xsd:attribute name='Lang' use='required'>  
            <xsd:simpleType>  
             <xsd:restriction base='xsd:token'>  
              <xsd:enumeration value='C#'/>  
              <xsd:enumeration value='VB'/>  
             </xsd:restriction>  
            </xsd:simpleType>  
           </xsd:attribute>  
          </xsd:extension>  
         </xsd:simpleContent>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
  
    XmlSchemaSet schemas = new XmlSchemaSet();  
    schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
    XDocument doc1 = new XDocument(  
        new XElement("Root",  
            new XAttribute("Lang", "C#")  
        )  
    );  
  
    Console.WriteLine("Validating doc1 ...");  
    bool errors = false;  
    doc1.Validate(schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
  
    Console.WriteLine();  
    Console.WriteLine("Validating Lang attribute ...");  
    XAttribute lang = doc1.Element("Root").Attribute("Lang");  
  
    errors = false;  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
  
    // the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC";  
  
    Console.WriteLine();  
    Console.WriteLine("Validating Lang attribute ...");  
  
    errors = false;  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  
    {  
        Console.WriteLine(e.Message);  
        errors = true;  
    }, true);  
    Console.WriteLine("lang {0}", errors ? "did not validate" : "validated");  
    DumpInvalidNodes(doc1.Root);  
}  
```  
  
```vb  
  
                Private Sub DumpInvalidNodes(ByVal el As XElement)  
    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
        Console.WriteLine("Invalid Element {0}", _  
            el _  
            .AncestorsAndSelf _  
            .InDocumentOrder() _  
            .Aggregate("", _  
                Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()))  
    End If  
    For Each att As XAttribute In el.Attributes()  
        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  
            Console.WriteLine("Invalid Attribute {0}", _  
                att _  
                .Parent _  
                .AncestorsAndSelf() _  
                .InDocumentOrder() _  
                .Aggregate("", _  
                    Function(ByVal s, ByVal i) s + "/" + i.Name.ToString()) + _  
                    "/@" + att.Name.ToString())  
        End If  
    Next  
    For Each child As XElement In el.Elements()  
        DumpInvalidNodes(child)  
    Next  
End Sub  
  
Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:simpleContent>  
                        <xsd:extension base='xsd:string'>  
                            <xsd:attribute name='Lang' use='required'>  
                                <xsd:simpleType>  
                                    <xsd:restriction base='xsd:token'>  
                                        <xsd:enumeration value='C#'/>  
                                        <xsd:enumeration value='VB'/>  
                                    </xsd:restriction>  
                                </xsd:simpleType>  
                            </xsd:attribute>  
                        </xsd:extension>  
                    </xsd:simpleContent>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = <?xml version='1.0'?>  
                            <Root Lang='C#'/>  
  
    Console.WriteLine("Validating doc1 ...")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
    Dim lang As XAttribute = doc1.Element("Root").Attribute("Lang")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
  
    ' the following makes the Lang attribute invalid according to the schema  
    lang.Value = "VC"  
  
    Console.WriteLine()  
    Console.WriteLine("Validating Lang attribute ...")  
  
    errors = False  
    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("lang {0}", IIf(errors, "did not validate", "validated"))  
    DumpInvalidNodes(doc1.Root)  
End Sub  
```  
  
 <span data-ttu-id="d5d0f-238">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="d5d0f-238">This example produces the following output:</span></span>  
  
```  
Validating doc1 ...  
doc1 validated  
  
Validating Lang attribute ...  
lang validated  
  
Validating Lang attribute ...  
The 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  
lang did not validate  
Invalid Attribute /Root/@Lang  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
          <span data-ttu-id="d5d0f-239">針對 XML 結構描述定義語言 (XSD) 驗證錯誤而擲回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-239">Thrown for XML Schema Definition Language (XSD) validation errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Xml.Linq.XElement source, class System.Xml.Schema.XmlSchemaObject partialValidationType, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Validate(System::Xml::Linq::XElement ^ source, System::Xml::Schema::XmlSchemaObject ^ partialValidationType, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, bool addSchemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Xml.Linq.XElement" RefType="this" />
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="addSchemaInfo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="d5d0f-240">要驗證的 <see cref="T:System.Xml.Linq.XElement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-240">The <see cref="T:System.Xml.Linq.XElement" /> to validate.</span>
          </span>
        </param>
        <param name="partialValidationType">
          <span data-ttu-id="d5d0f-241">
            <see cref="T:System.Xml.Schema.XmlSchemaObject" />，指定要驗證的樹狀子目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-241">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</span>
          </span>
        </param>
        <param name="schemas">
          <span data-ttu-id="d5d0f-242">要用來驗證的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-242">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</span>
          </span>
        </param>
        <param name="validationEventHandler">
          <span data-ttu-id="d5d0f-243">在讀取器遇到驗證錯誤時發生之事件的 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-243">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors.</span>
          </span>
          <span data-ttu-id="d5d0f-244">若為 <see langword="null" />，則於發生驗證錯誤時擲回例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-244">If <see langword="null" />, throws an exception upon validation errors.</span>
          </span>
        </param>
        <param name="addSchemaInfo">
          <span data-ttu-id="d5d0f-245">指出是否要填入 Post-Schema-Validation Infoset (PSVI) 的 <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-245">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5d0f-246">驗證 <see cref="T:System.Xml.Linq.XElement" /> 樹狀子目錄是否符合指定的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，並選擇性地將後結構描述驗證資訊集 (PSVI) 填入 XML 樹狀目錄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-246">Validates that an <see cref="T:System.Xml.Linq.XElement" /> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d0f-247">您可以使用這個方法以驗證子樹狀目錄 (與<xref:System.Xml.Linq.XElement>子樹狀結構的根目錄) 符合結構描述。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-247">You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at the root of the sub-tree) conforms to a schema.</span></span> <span data-ttu-id="d5d0f-248">當您已修改子樹狀目錄中，且您想要確定仍符合其結構描述時，通常會使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-248">You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema.</span></span> <span data-ttu-id="d5d0f-249">您也可以驗證整份文件，但它需要較少的處理時間只驗證樹狀子目錄。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-249">You could validate the entire document, but it takes less processing time to validate a just a sub-tree.</span></span>  
  
 <span data-ttu-id="d5d0f-250">如果`addSchemaInfo`是`true`，則這個方法會填入 XML 樹狀結構，使用後結構描述驗證 infoset (PSVI)。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-250">If `addSchemaInfo` is `true`, then this method populates the XML tree with the post-schema-validation infoset (PSVI).</span></span>  
  
 <span data-ttu-id="d5d0f-251">有兩個層面的填入 XML 樹狀結構的 PSVI。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-251">There are two aspects of populating the XML tree with the PSVI.</span></span>  
  
 <span data-ttu-id="d5d0f-252">首先，附註加入到樹狀結構中的所有節點，您現在可以呼叫<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>項目或在樹狀目錄中的屬性。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-252">First, an annotation is added to all nodes in the tree such that you can now call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> on an element or attribute in the tree.</span></span>  
  
 <span data-ttu-id="d5d0f-253">第二，預設項目和屬性在 XSD 中定義，會加入到 XML 樹狀結構中。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-253">Second, default elements and attributes defined in the XSD are added to the XML tree.</span></span> <span data-ttu-id="d5d0f-254">透過呼叫其中一個<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>方法，您可以判斷是否特定的項目或屬性已加入從 XSD 做為預設項目或屬性。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-254">By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.</span></span>  
  
 <span data-ttu-id="d5d0f-255">如果您要傳入`null`如`validationEventHandler`，則這個方法會引發例外狀況時驗證錯誤。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-255">If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors.</span></span> <span data-ttu-id="d5d0f-256">驗證警告將不會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-256">Validation warnings will not raise an exception.</span></span>  
  
 <span data-ttu-id="d5d0f-257">若要驗證子樹狀目錄中，您可以使用的執行個體<xref:System.Xml.Schema.XmlSchemaObject>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-257">To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>.</span></span> <span data-ttu-id="d5d0f-258">您可以取得此執行個體，以各種方式。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-258">You can obtain this instance in various ways.</span></span> <span data-ttu-id="d5d0f-259">簡單方法是，如下所示：</span><span class="sxs-lookup"><span data-stu-id="d5d0f-259">An easy way is as follows:</span></span>  
  
1.  <span data-ttu-id="d5d0f-260">驗證文件符合結構描述。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-260">Validate that a document conforms to a schema.</span></span>  
  
2.  <span data-ttu-id="d5d0f-261">新增後結構描述驗證 infoset (PSVI)，藉由呼叫<xref:System.Xml.Schema.Extensions.Validate%2A>擴充方法。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-261">Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.</span></span>  
  
3.  <span data-ttu-id="d5d0f-262">呼叫<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>擴充方法來擷取該物件會實作<xref:System.Xml.Schema.IXmlSchemaInfo>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-262">Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>.</span></span> <span data-ttu-id="d5d0f-263">您可以從擷取的物件，取得<xref:System.Xml.Schema.XmlSchemaObject>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-263">From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.</span></span>  
  
    -   <span data-ttu-id="d5d0f-264">如果您收到<xref:System.Xml.Schema.XmlSchemaObject>如<xref:System.Xml.Linq.XElement>，型別會<xref:System.Xml.Schema.XmlSchemaElement>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-264">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.</span></span>  
  
    -   <span data-ttu-id="d5d0f-265">如果您收到<xref:System.Xml.Schema.XmlSchemaObject>如<xref:System.Xml.Linq.XAttribute>，型別會<xref:System.Xml.Schema.XmlSchemaAttribute>。</span><span class="sxs-lookup"><span data-stu-id="d5d0f-265">If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.</span></span>  
  
 <span data-ttu-id="d5d0f-266">執行個體之後<xref:System.Xml.Schema.XmlSchemaObject>，您可以使用這個方法子樹狀結構的驗證...</span><span class="sxs-lookup"><span data-stu-id="d5d0f-266">After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate a sub-tree..</span></span>  
  
   
  
## Examples  
  
```csharp  
  
                string xsdMarkup =  
    @"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
       <xsd:element name='Root'>  
        <xsd:complexType>  
         <xsd:sequence>  
          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
           <xsd:complexType>  
            <xsd:simpleContent>  
             <xsd:extension base='xsd:string'>  
              <xsd:attribute name='Att1' default='Att1 Default Value'/>  
             </xsd:extension>  
            </xsd:simpleContent>  
           </xsd:complexType>  
          </xsd:element>  
         </xsd:sequence>  
        </xsd:complexType>  
       </xsd:element>  
      </xsd:schema>";  
XmlSchemaSet schemas = new XmlSchemaSet();  
schemas.Add("", XmlReader.Create(new StringReader(xsdMarkup)));  
  
XDocument doc1 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "c1"),  
        new XElement("Child2", "c2")  
    )  
);  
  
XDocument doc2 = new XDocument(  
    new XElement("Root",  
        new XElement("Child1", "content1"),  
        new XElement("Child3", "content1")  
    )  
);  
  
Console.WriteLine("Validating doc1");  
bool errors = false;  
doc1.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc1 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Validating doc2");  
errors = false;  
doc2.Validate(schemas, (o, e) =>  
                     {  
                         Console.WriteLine("{0}", e.Message);  
                         errors = true;  
                     }, true);  
Console.WriteLine("doc2 {0}", errors ? "did not validate" : "validated");  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc1:");  
Console.WriteLine(doc1);  
  
Console.WriteLine();  
Console.WriteLine("Contents of doc2:");  
Console.WriteLine(doc2);  
```  
  
```vb  
  
                Dim errors As Boolean = False  
  
Private Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  
    Console.WriteLine("{0}", e.Message)  
    errors = True  
End Sub  
  
Sub Main()  
    Dim xsdMarkup As XDocument = _  
        <?xml version='1.0'?>  
        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  
            <xsd:element name='Root'>  
                <xsd:complexType>  
                    <xsd:sequence>  
                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  
                        <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  
                            <xsd:complexType>  
                                <xsd:simpleContent>  
                                    <xsd:extension base='xsd:string'>  
                                        <xsd:attribute name='Att1' default='Att1 Default Value'/>  
                                    </xsd:extension>  
                                </xsd:simpleContent>  
                            </xsd:complexType>  
                        </xsd:element>  
                    </xsd:sequence>  
                </xsd:complexType>  
            </xsd:element>  
        </xsd:schema>  
    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  
    schemas.Add("", xsdMarkup.CreateReader)  
  
    Dim doc1 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>c1</Child1>  
            <Child2>c2</Child2>  
        </Root>  
  
    Dim doc2 As XDocument = _  
        <?xml version='1.0'?>  
        <Root>  
            <Child1>content1</Child1>  
            <Child3>content1</Child3>  
        </Root>  
  
    Console.WriteLine("Validating doc1")  
    errors = False  
    doc1.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc1 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Validating doc2")  
    errors = False  
    doc2.Validate(schemas, AddressOf XSDErrors, True)  
    Console.WriteLine("doc2 {0}", IIf(errors, "did not validate", "validated"))  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc1:")  
    Console.WriteLine(doc1)  
  
    Console.WriteLine()  
    Console.WriteLine("Contents of doc2:")  
    Console.WriteLine(doc2)  
End Sub  
```  
  
 <span data-ttu-id="d5d0f-267">這個範例會產生下列輸出：</span><span class="sxs-lookup"><span data-stu-id="d5d0f-267">This example produces the following output:</span></span>  
  
```  
Validating doc1  
doc1 validated  
  
Validating doc2  
The element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  
doc2 did not validate  
  
Contents of doc1:  
<Root>  
  <Child1>c1</Child1>  
  <Child2 Att1="Att1 Default Value">c2</Child2>  
</Root>  
  
Contents of doc2:  
<Root>  
  <Child1>content1</Child1>  
  <Child3>content1</Child3>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
          <span data-ttu-id="d5d0f-268">針對 XML 結構描述定義語言 (XSD) 驗證錯誤而擲回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d0f-268">Thrown for XML Schema Definition Language (XSD) validation errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>