<Type Name="XmlSchemaDatatype" FullName="System.Xml.Schema.XmlSchemaDatatype">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cd123cec3e94067e208522c91f02b4d06bf2d8fa" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58725554" /></Metadata><TypeSignature Language="C#" Value="public abstract class XmlSchemaDatatype" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlSchemaDatatype extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaDatatype" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XmlSchemaDatatype" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaDatatype abstract" />
  <TypeSignature Language="F#" Value="type XmlSchemaDatatype = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 類別是抽象類別，用於將 XML 結構描述定義語言 (XSD) 型別對應至 Common Language Runtime (CLR) 型別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範使用<xref:System.Xml.Schema.XmlSchemaDatatype>類別。  
  
 [!code-cpp[Classic Webdata XmlSchemaDatatype Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic Webdata XmlSchemaDatatype Example/CPP/datatype.cpp#1)]
 [!code-csharp[Classic Webdata XmlSchemaDatatype Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic Webdata XmlSchemaDatatype Example/CS/datatype.cs#1)]
 [!code-vb[Classic Webdata XmlSchemaDatatype Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic Webdata XmlSchemaDatatype Example/VB/datatype.vb#1)]  
  
 下列 XML 檔案用於上述程式碼範例。  
  
 [!code-xml[Classic Webdata XmlSchemaDatatype Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic Webdata XmlSchemaDatatype Example/XML/example.xsd#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlSchemaDatatype ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaDatatype.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlSchemaDatatype();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初始化狀態，在這種類型的衍生的類別建構函式會呼叫這個建構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChangeType">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定的值 (其型別是由 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示之 XML 結構描述型別的其中一個有效 Common Language Runtime (CLR) 表示) 轉換成相同值的其他有效 CLR 表示。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public virtual object ChangeType (object value, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ChangeType(object value, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ChangeType (value As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ChangeType(System::Object ^ value, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member ChangeType : obj * Type -&gt; obj&#xA;override this.ChangeType : obj * Type -&gt; obj" Usage="xmlSchemaDatatype.ChangeType (value, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="targetType" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">要轉換成指定型別的輸入值。</param>
        <param name="targetType">將輸入值轉換成的目標型別。</param>
        <summary>將指定的值 (其型別是由 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示之 XML 結構描述型別的其中一個有效 Common Language Runtime (CLR) 表示) 轉換成指定的 CLR 型別。</summary>
        <returns>已轉換的輸入值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需有關型別支援<xref:System.Xml?displayProperty=nameWithType>類別和轉換 XML 資料類型，請參閱[System.Xml 類別中的型別支援](~/docs/standard/data/xml/type-support-in-the-system-xml-classes.md)主題。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Object" /> 或 <see cref="T:System.Type" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidCastException"><see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示的型別不支援從指定值的型別到指定型別的轉換。</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public virtual object ChangeType (object value, Type targetType, System.Xml.IXmlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ChangeType(object value, class System.Type targetType, class System.Xml.IXmlNamespaceResolver namespaceResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type,System.Xml.IXmlNamespaceResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ChangeType (value As Object, targetType As Type, namespaceResolver As IXmlNamespaceResolver) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ChangeType(System::Object ^ value, Type ^ targetType, System::Xml::IXmlNamespaceResolver ^ namespaceResolver);" />
      <MemberSignature Language="F#" Value="abstract member ChangeType : obj * Type * System.Xml.IXmlNamespaceResolver -&gt; obj&#xA;override this.ChangeType : obj * Type * System.Xml.IXmlNamespaceResolver -&gt; obj" Usage="xmlSchemaDatatype.ChangeType (value, targetType, namespaceResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="targetType" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">要轉換成指定型別的輸入值。</param>
        <param name="targetType">將輸入值轉換成的目標型別。</param>
        <param name="namespaceResolver"><see cref="T:System.Xml.IXmlNamespaceResolver" />，用於解析命名空間前置詞。 這只在 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示 xs:QName 型別或其衍生的型別時使用。</param>
        <summary>將指定的值 (其型別是由 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示之 XML 結構描述型別的其中一個有效 Common Language Runtime (CLR) 表示) 轉換成指定的 CLR 型別，如果 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 表示 xs:QName 型別或其衍生的型別，則使用 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />。</summary>
        <returns>已轉換的輸入值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需有關型別支援<xref:System.Xml?displayProperty=nameWithType>類別和轉換 XML 資料類型，請參閱[System.Xml 類別中的型別支援](~/docs/standard/data/xml/type-support-in-the-system-xml-classes.md)主題。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Object" /> 或 <see cref="T:System.Type" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidCastException"><see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示的型別不支援從指定值的型別到指定型別的轉換。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsDerivedFrom">
      <MemberSignature Language="C#" Value="public virtual bool IsDerivedFrom (System.Xml.Schema.XmlSchemaDatatype datatype);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDerivedFrom(class System.Xml.Schema.XmlSchemaDatatype datatype) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDerivedFrom (datatype As XmlSchemaDatatype) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDerivedFrom(System::Xml::Schema::XmlSchemaDatatype ^ datatype);" />
      <MemberSignature Language="F#" Value="abstract member IsDerivedFrom : System.Xml.Schema.XmlSchemaDatatype -&gt; bool&#xA;override this.IsDerivedFrom : System.Xml.Schema.XmlSchemaDatatype -&gt; bool" Usage="xmlSchemaDatatype.IsDerivedFrom datatype" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datatype" Type="System.Xml.Schema.XmlSchemaDatatype" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="datatype"><see cref="T:System.Xml.Schema.XmlSchemaDatatype" />。</param>
        <summary><see cref="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)" /> 方法永遠傳回 <see langword="false" />。</summary>
        <returns>一律傳回 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseValue">
      <MemberSignature Language="C#" Value="public abstract object ParseValue (string s, System.Xml.XmlNameTable nameTable, System.Xml.IXmlNamespaceResolver nsmgr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ParseValue(string s, class System.Xml.XmlNameTable nameTable, class System.Xml.IXmlNamespaceResolver nsmgr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.IXmlNamespaceResolver)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ParseValue (s As String, nameTable As XmlNameTable, nsmgr As IXmlNamespaceResolver) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ParseValue(System::String ^ s, System::Xml::XmlNameTable ^ nameTable, System::Xml::IXmlNamespaceResolver ^ nsmgr);" />
      <MemberSignature Language="F#" Value="abstract member ParseValue : string * System.Xml.XmlNameTable * System.Xml.IXmlNamespaceResolver -&gt; obj" Usage="xmlSchemaDatatype.ParseValue (s, nameTable, nsmgr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="nsmgr" Type="System.Xml.IXmlNamespaceResolver" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">要對簡單型別驗證的 <see langword="string" />。</param>
        <param name="nameTable">如果這個 <see cref="T:System.Xml.XmlNameTable" /> 物件表示 xs:NCName 型別，則為 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />，用於剖析 <see langword="string" /> 時的原子化。</param>
        <param name="nsmgr">如果這個 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件表示 xs:QName 型別，則為剖析 <see langword="string" /> 時要使用的 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 物件。</param>
        <summary>在衍生類別中覆寫時，對內建或使用者定義的簡單型別驗證指定的 <see langword="string" />。</summary>
        <returns><see cref="T:System.Object" />，可安全地轉換為 <see cref="P:System.Xml.Schema.XmlSchemaDatatype.ValueType" /> 屬性傳回的型別。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaDatatype.ParseValue%2A>方法會驗證`string`指定針對內建或使用者定義的簡單型別。 例如，如果這個<xref:System.Xml.Schema.XmlSchemaDatatype>代表類型 xs: date 則的執行個體<xref:System.DateTime>會傳回。  
  
 以下是執行期間執行的步驟<xref:System.Xml.Schema.XmlSchemaDatatype.ParseValue%2A>方法的驗證程序。  
  
1.  轉換為指定的值`string`至其對應 Common Language Runtime (CLR) 類型。  
  
2.  請確認此值不違反任何簡單型別定義的 facet。  
  
 已轉換的值則會傳回做為<xref:System.Object>並且可以安全地轉換成所傳回的類型<xref:System.Xml.Schema.XmlSchemaDatatype.ValueType%2A>屬性。  
  
 當<xref:System.Xml.Schema.XmlSchemaDatatype>物件都代表清單類型、 輸入`string`值會轉換成一或多個物件的清單。 當<xref:System.Xml.Schema.XmlSchemaDatatype>物件表示清單型別，則嘗試將輸入的值剖析為聯集成員類型。 如果剖析嘗試失敗，則轉換會嘗試的聯集的下一個成員之前剖析成功，或沒有其他成員的型別來剖析。 如果剖析成功，則會擲回例外狀況。  
  
   
  
## Examples  
 下列範例會擷取`LotteryNumber`簡單型別從 example.xsd 檔案，作為<xref:System.Xml.Schema.XmlSchemaSimpleType>然後驗證`string`的值`5`使用<xref:System.Xml.Schema.XmlSchemaDatatype.ParseValue%2A>方法。  
  
 [!code-cpp[Classic Webdata XmlSchemaDatatype Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic Webdata XmlSchemaDatatype Example/CPP/datatype.cpp#1)]
 [!code-csharp[Classic Webdata XmlSchemaDatatype Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic Webdata XmlSchemaDatatype Example/CS/datatype.cs#1)]
 [!code-vb[Classic Webdata XmlSchemaDatatype Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic Webdata XmlSchemaDatatype Example/VB/datatype.vb#1)]  
  
 下列 XML 檔案用於上述程式碼範例。  
  
 [!code-xml[Classic Webdata XmlSchemaDatatype Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic Webdata XmlSchemaDatatype Example/XML/example.xsd#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">輸入值不是這個 W3C XML 結構描述型別的有效執行個體。</exception>
        <exception cref="T:System.ArgumentNullException">要剖析的值不能是 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseValue">
      <MemberSignature Language="C#" Value="public abstract object ParseValue (string s, System.Xml.XmlNameTable nameTable, System.Xml.XmlNamespaceManager nsmgr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ParseValue(string s, class System.Xml.XmlNameTable nameTable, class System.Xml.XmlNamespaceManager nsmgr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ParseValue (s As String, nameTable As XmlNameTable, nsmgr As XmlNamespaceManager) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ParseValue(System::String ^ s, System::Xml::XmlNameTable ^ nameTable, System::Xml::XmlNamespaceManager ^ nsmgr);" />
      <MemberSignature Language="F#" Value="abstract member ParseValue : string * System.Xml.XmlNameTable * System.Xml.XmlNamespaceManager -&gt; obj" Usage="xmlSchemaDatatype.ParseValue (s, nameTable, nsmgr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" Index="1" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="nsmgr" Type="System.Xml.XmlNamespaceManager" Index="2" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="s">針對簡單類型驗證的字串。</param>
        <param name="nameTable">如果這個 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 物件表示 xs:NCName 類型，則 <see cref="T:System.Xml.XmlNameTable" /> 用於剖析字串時的原子化。</param>
        <param name="nsmgr">如果這個 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 物件表示 xs:QName 類型，則為剖析字串時要使用的 <see cref="T:System.Xml.XmlNamespaceManager" /> 物件。</param>
        <summary>在衍生類別中覆寫時，對內建或使用者定義的簡單類型驗證指定的字串。</summary>
        <returns><see cref="T:System.Object" />，可安全地轉型為 <see cref="P:System.Xml.Schema.XmlSchemaDatatype.ValueType" /> 屬性傳回的型別。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<xref:System.Xml.Schema.XmlSchemaDatatype.ParseValue%2A>方法會驗證指定的字串，與內建或使用者定義的簡單型別。 例如，如果這個<xref:System.Xml.Schema.XmlSchemaDatatype>代表類型 xs: date 則的執行個體<xref:System.DateTime>會傳回。

以下是執行期間執行的步驟<xref:System.Xml.Schema.XmlSchemaDatatype.ParseValue%2A>方法的驗證程序。

1. 將指定的字串轉換為其對應的 Common Language Runtime (CLR) 型別。

2. 請確認此值不違反任何簡單型別定義的 facet。

已轉換的值則會傳回做為<xref:System.Object>並且可以安全地轉換成所傳回的型別<xref:System.Xml.Schema.XmlSchemaDatatype.ValueType>屬性。

當<xref:System.Xml.Schema.XmlSchemaDatatype>物件都代表清單類型時，將輸入的字串值轉換成一或多個物件的清單。 當<xref:System.Xml.Schema.XmlSchemaDatatype>物件表示清單型別，則嘗試將輸入的值剖析為聯集成員類型。 如果剖析嘗試失敗，則轉換會嘗試的聯集的下一個成員之前剖析成功，或沒有其他成員的型別來剖析。 如果剖析成功，則會擲回例外狀況。

]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">輸入值不是這個 W3C XML 結構描述型別的有效執行個體。</exception>
        <exception cref="T:System.ArgumentNullException">要剖析的值不可為 Null (在 Visual Basic 中為 Nothing)。</exception>
      </Docs>
    </Member>
    <Member MemberName="TokenizedType">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlTokenizedType TokenizedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlTokenizedType TokenizedType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaDatatype.TokenizedType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TokenizedType As XmlTokenizedType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xml::XmlTokenizedType TokenizedType { System::Xml::XmlTokenizedType get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenizedType : System.Xml.XmlTokenizedType" Usage="System.Xml.Schema.XmlSchemaDatatype.TokenizedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlTokenizedType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得如在全球資訊網協會 (W3C) XML 1.0 規格中所指定之 <see langword="string" /> 的型別。</summary>
        <value><see langword="string" /> 的 <see cref="T:System.Xml.XmlTokenizedType" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可讓`string`讀取做為特定 XML 類型，例如 CDATA 區段型別。  
  
 下表顯示語彙基元的型別。  
  
|XmlTokenizedType|描述|  
|----------------------|-----------------|  
|`CDATA`|CDATA 型別|  
|`ID`|識別碼類型|  
|`IDREF`|IDREF 型別|  
|`IDREFS`|IDREFS 類型|  
|`ENTITY`|實體類型|  
|`ENTITIES`|實體類型|  
|`NMTOKEN`|NMTOKEN 型別|  
|`NMTOKENS`|NMTOKENS 型別|  
|`NOTATION`|NOTATION 型別|  
|`ENUMERATION`|列舉型別|  
|`QName`|QName 類型|  
|`NCName`|NCName 型別|  
|`None`|沒有型別|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeCode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Schema.XmlTypeCode TypeCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlTypeCode TypeCode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaDatatype.TypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TypeCode As XmlTypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Schema::XmlTypeCode TypeCode { System::Xml::Schema::XmlTypeCode get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeCode : System.Xml.Schema.XmlTypeCode" Usage="System.Xml.Schema.XmlSchemaDatatype.TypeCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlTypeCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得簡單型別的 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值。</summary>
        <value>簡單型別的 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W3C XML 結構描述清單型別，例如 xs: entities、 xs: nmtokens 和 xs: idrefs 未表示的<xref:System.Xml.Schema.XmlTypeCode>列舉型別。 相反地，這些會由<xref:System.Xml.Schema.XmlTypeCode>xs:ENTITY、 xs 和 xs: idref 型別，具有值<xref:System.Xml.Schema.XmlSchemaDatatype.Variety%2A>屬性<xref:System.Xml.Schema.XmlSchemaDatatype>物件設為<xref:System.Xml.Schema.XmlSchemaDatatypeVariety.List>。  
  
> [!NOTE]
>  將 xs:anySimpleType 與 xs: anytype 的型別不由<xref:System.Xml.Schema.XmlTypeCode>列舉型別。 這些顯示在<xref:System.Xml.Schema.XmlSchemaDatatype>物件<xref:System.Xml.Schema.XmlTypeCode>的值是<xref:System.Xml.Schema.XmlTypeCode.UntypedAtomic>xs:anySimpleType 的或<xref:System.Xml.Schema.XmlTypeCode.Item>為 xs: anytype。  
  
   
  
## Examples  
 如需<xref:System.Xml.Schema.XmlSchemaDatatype.TypeCode%2A>屬性，請參閱<xref:System.Xml.Schema.XmlSchemaDatatype>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlTypeCode" />
      </Docs>
    </Member>
    <Member MemberName="ValueType">
      <MemberSignature Language="C#" Value="public abstract Type ValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValueType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaDatatype.ValueType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ValueType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ ValueType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueType : Type" Usage="System.Xml.Schema.XmlSchemaDatatype.ValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得項目的 Common Language Runtime (CLR) 型別。</summary>
        <value>項目的 Common Language Runtime (CLR) 型別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaDatatype.ValueType%2A>屬性取得的 CLR 類型的項目。 例如，類型的元素`xs:int`會有<xref:System.Xml.Schema.XmlSchemaDatatype.ValueType%2A>的<xref:System.Int32>預設。 不過，<xref:System.Xml.Schema.XmlSchemaDatatype.ValueType%2A>可能是任何一個可以對應到有效型別`xs:int`，例如<xref:System.Int16>或<xref:System.Double>。  
  
 如需有關型別支援<xref:System.Xml?displayProperty=nameWithType>命名空間，請參閱 < [System.Xml 類別中的型別支援](~/docs/standard/data/xml/type-support-in-the-system-xml-classes.md)。  
  
   
  
## Examples  
 如需<xref:System.Xml.Schema.XmlSchemaDatatype.ValueType%2A>屬性，請參閱<xref:System.Xml.Schema.XmlSchemaDatatype>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Variety">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Schema.XmlSchemaDatatypeVariety Variety { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaDatatypeVariety Variety" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaDatatype.Variety" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Variety As XmlSchemaDatatypeVariety" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Schema::XmlSchemaDatatypeVariety Variety { System::Xml::Schema::XmlSchemaDatatypeVariety get(); };" />
      <MemberSignature Language="F#" Value="member this.Variety : System.Xml.Schema.XmlSchemaDatatypeVariety" Usage="System.Xml.Schema.XmlSchemaDatatype.Variety" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaDatatypeVariety</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得簡單型別的 <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 值。</summary>
        <value>簡單型別的 <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 值。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" />
      </Docs>
    </Member>
  </Members>
</Type>