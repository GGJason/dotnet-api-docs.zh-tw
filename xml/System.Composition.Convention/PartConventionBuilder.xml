<Type Name="PartConventionBuilder" FullName="System.Composition.Convention.PartConventionBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dea13cfbbbe18508ce77a44dcc92584a8debdd29" /><Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="10/12/2018" /><Meta Name="ms.locfileid" Value="49142258" /></Metadata><TypeSignature Language="C#" Value="public class PartConventionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PartConventionBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Composition.Convention.PartConventionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class PartConventionBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class PartConventionBuilder" />
  <TypeSignature Language="F#" Value="type PartConventionBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Convention</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
    <AssemblyVersion>1.0.33.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="723ef-101">將類型設定為 Managed Extensibility Framework (MEF) 組件。</span><span class="sxs-lookup"><span data-stu-id="723ef-101">Configures a type as a Managed Extensibility Framework (MEF) part.</span></span></summary>
    <remarks></remarks>
  </Docs>
  <Members>
    <Member MemberName="AddPartMetadata">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder AddPartMetadata (string name, Func&lt;Type,object&gt; getValueFromPartType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder AddPartMetadata(string name, class System.Func`2&lt;class System.Type, object&gt; getValueFromPartType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.AddPartMetadata(System.String,System.Func{System.Type,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddPartMetadata (name As String, getValueFromPartType As Func(Of Type, Object)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ AddPartMetadata(System::String ^ name, Func&lt;Type ^, System::Object ^&gt; ^ getValueFromPartType);" />
      <MemberSignature Language="F#" Value="member this.AddPartMetadata : string * Func&lt;Type, obj&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.AddPartMetadata (name, getValueFromPartType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="getValueFromPartType" Type="System.Func&lt;System.Type,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="723ef-102">要加入之中繼資料的名稱。</span><span class="sxs-lookup"><span data-stu-id="723ef-102">The name of the metadata to add.</span></span></param>
        <param name="getValueFromPartType"><span data-ttu-id="723ef-103">傳回組件類型上的中繼資料值的函式。</span><span class="sxs-lookup"><span data-stu-id="723ef-103">A function that returns the metadata value on the part type.</span></span></param>
        <summary><span data-ttu-id="723ef-104">將具有指定之名稱及值的中繼資料加入至組件。</span><span class="sxs-lookup"><span data-stu-id="723ef-104">Adds metadata that has the specified name and value to the part.</span></span> <span data-ttu-id="723ef-105">值是由函式所傳回，該函式將組件類型對應到中繼資料值。</span><span class="sxs-lookup"><span data-stu-id="723ef-105">The value is returned by a function that maps the part type to the metadata value.</span></span></summary>
        <returns><span data-ttu-id="723ef-106">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-106">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPartMetadata">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder AddPartMetadata (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder AddPartMetadata(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.AddPartMetadata(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddPartMetadata (name As String, value As Object) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ AddPartMetadata(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddPartMetadata : string * obj -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.AddPartMetadata (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="723ef-107">中繼資料名稱。</span><span class="sxs-lookup"><span data-stu-id="723ef-107">The metadata name.</span></span></param>
        <param name="value"><span data-ttu-id="723ef-108">中繼資料值。</span><span class="sxs-lookup"><span data-stu-id="723ef-108">The metadata value.</span></span></param>
        <summary><span data-ttu-id="723ef-109">將具有指定之名稱及值的中繼資料加入至組件。</span><span class="sxs-lookup"><span data-stu-id="723ef-109">Adds metadata that has the specified name and value to the part.</span></span></summary>
        <returns><span data-ttu-id="723ef-110">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-110">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder Export ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder Export() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.Export" />
      <MemberSignature Language="VB.NET" Value="Public Function Export () As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ Export();" />
      <MemberSignature Language="F#" Value="member this.Export : unit -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.Export " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="723ef-111">將組件及其具象類型匯出為合約類型。</span><span class="sxs-lookup"><span data-stu-id="723ef-111">Exports the part with its concrete type as the contract type.</span></span></summary>
        <returns><span data-ttu-id="723ef-112">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-112">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder Export (Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder Export(class System.Action`1&lt;class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.Export(System.Action{System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function Export (exportConfiguration As Action(Of ExportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ Export(Action&lt;System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberSignature Language="F#" Value="member this.Export : Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.Export exportConfiguration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="exportConfiguration"><span data-ttu-id="723ef-113">設定組件的動作。</span><span class="sxs-lookup"><span data-stu-id="723ef-113">An action that configures the part.</span></span></param>
        <summary><span data-ttu-id="723ef-114">匯出具有指定之組態的組件。</span><span class="sxs-lookup"><span data-stu-id="723ef-114">Exports the part that has the specified configuration.</span></span></summary>
        <returns><span data-ttu-id="723ef-115">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-115">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Export&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder Export&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder Export&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.Export``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Export(Of T) () As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder ^ Export();" />
      <MemberSignature Language="F#" Value="member this.Export : unit -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.Export " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="723ef-116">合約類型。</span><span class="sxs-lookup"><span data-stu-id="723ef-116">The contract type.</span></span></typeparam>
        <summary><span data-ttu-id="723ef-117">匯出具有指定之合約類型的組件。</span><span class="sxs-lookup"><span data-stu-id="723ef-117">Exports the part that has the specified contract type.</span></span></summary>
        <returns><span data-ttu-id="723ef-118">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-118">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Export&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder Export&lt;T&gt; (Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder Export&lt;T&gt;(class System.Action`1&lt;class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.Export``1(System.Action{System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function Export(Of T) (exportConfiguration As Action(Of ExportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder ^ Export(Action&lt;System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberSignature Language="F#" Value="member this.Export : Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.Export exportConfiguration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="723ef-119">合約類型。</span><span class="sxs-lookup"><span data-stu-id="723ef-119">The contract type.</span></span></typeparam>
        <param name="exportConfiguration"><span data-ttu-id="723ef-120">設定組件的動作。</span><span class="sxs-lookup"><span data-stu-id="723ef-120">An action that configures the part.</span></span></param>
        <summary><span data-ttu-id="723ef-121">使用指定的組態，匯出具有指定之合約類型的組件。</span><span class="sxs-lookup"><span data-stu-id="723ef-121">Exports the part that has the specified contract type by using the specified configuration.</span></span></summary>
        <returns><span data-ttu-id="723ef-122">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-122">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportInterfaces">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ExportInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ExportInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ExportInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportInterfaces () As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ExportInterfaces();" />
      <MemberSignature Language="F#" Value="member this.ExportInterfaces : unit -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ExportInterfaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="723ef-123">選取要匯出之組件類型上的所有介面。</span><span class="sxs-lookup"><span data-stu-id="723ef-123">Selects all interfaces on the part type to be exported.</span></span></summary>
        <returns><span data-ttu-id="723ef-124">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-124">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportInterfaces">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ExportInterfaces (Predicate&lt;Type&gt; interfaceFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ExportInterfaces(class System.Predicate`1&lt;class System.Type&gt; interfaceFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ExportInterfaces(System.Predicate{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportInterfaces (interfaceFilter As Predicate(Of Type)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ExportInterfaces(Predicate&lt;Type ^&gt; ^ interfaceFilter);" />
      <MemberSignature Language="F#" Value="member this.ExportInterfaces : Predicate&lt;Type&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ExportInterfaces interfaceFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceFilter" Type="System.Predicate&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="interfaceFilter"><span data-ttu-id="723ef-125">指定要選取之介面的述詞。</span><span class="sxs-lookup"><span data-stu-id="723ef-125">A predicate that specifies the interfaces to be selected.</span></span></param>
        <summary><span data-ttu-id="723ef-126">根據指定的篩選條件，選取要匯出之組件類型上的介面。</span><span class="sxs-lookup"><span data-stu-id="723ef-126">Selects interfaces on the part type to be exported according to the specified filter.</span></span></summary>
        <returns><span data-ttu-id="723ef-127">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-127">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportInterfaces">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ExportInterfaces (Predicate&lt;Type&gt; interfaceFilter, Action&lt;Type,System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ExportInterfaces(class System.Predicate`1&lt;class System.Type&gt; interfaceFilter, class System.Action`2&lt;class System.Type, class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ExportInterfaces(System.Predicate{System.Type},System.Action{System.Type,System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportInterfaces (interfaceFilter As Predicate(Of Type), exportConfiguration As Action(Of Type, ExportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ExportInterfaces(Predicate&lt;Type ^&gt; ^ interfaceFilter, Action&lt;Type ^, System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ExportInterfaces : Predicate&lt;Type&gt; * Action&lt;Type, System.Composition.Convention.ExportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ExportInterfaces (interfaceFilter, exportConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceFilter" Type="System.Predicate&lt;System.Type&gt;" />
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Type,System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="interfaceFilter"><span data-ttu-id="723ef-128">指定要選取之介面的述詞。</span><span class="sxs-lookup"><span data-stu-id="723ef-128">A predicate that specifies the interfaces to be selected.</span></span></param>
        <param name="exportConfiguration"><span data-ttu-id="723ef-129">設定匯出的動作。</span><span class="sxs-lookup"><span data-stu-id="723ef-129">An action that configures the exports.</span></span></param>
        <summary><span data-ttu-id="723ef-130">使用指定的匯出組態，根據指定的篩選條件，選取要匯出之組件類型上的介面。</span><span class="sxs-lookup"><span data-stu-id="723ef-130">Selects interfaces on the part type to be exported according to the specified filter, using the specified export configuration.</span></span></summary>
        <returns><span data-ttu-id="723ef-131">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-131">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportProperties">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ExportProperties (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ExportProperties(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperties (propertyFilter As Predicate(Of PropertyInfo)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ExportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="member this.ExportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ExportProperties propertyFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyFilter"><span data-ttu-id="723ef-132">指定要匯出之屬性的述詞。</span><span class="sxs-lookup"><span data-stu-id="723ef-132">A predicate that specifies the properites to export.</span></span></param>
        <summary><span data-ttu-id="723ef-133">根據指定的述詞，選取要匯出之組件上的屬性。</span><span class="sxs-lookup"><span data-stu-id="723ef-133">Selects the properties on the part to export according to the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="723ef-134">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-134">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportProperties">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ExportProperties (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter, Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ExportProperties(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter, class System.Action`2&lt;class System.Reflection.PropertyInfo, class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperties (propertyFilter As Predicate(Of PropertyInfo), exportConfiguration As Action(Of PropertyInfo, ExportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ExportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter, Action&lt;System::Reflection::PropertyInfo ^, System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ExportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; * Action&lt;System.Reflection.PropertyInfo, System.Composition.Convention.ExportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ExportProperties (propertyFilter, exportConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyFilter"><span data-ttu-id="723ef-135">指定要匯出之屬性的述詞。</span><span class="sxs-lookup"><span data-stu-id="723ef-135">A predicate that specifies the properites to export.</span></span></param>
        <param name="exportConfiguration"><span data-ttu-id="723ef-136">設定匯出的動作。</span><span class="sxs-lookup"><span data-stu-id="723ef-136">An action that configures the exports.</span></span></param>
        <summary><span data-ttu-id="723ef-137">使用指定的匯出組態，根據指定的述詞，選取要匯出之組件上的屬性。</span><span class="sxs-lookup"><span data-stu-id="723ef-137">Selects the properties on the part to export according to the specified predicate, using the specified export configuration.</span></span></summary>
        <returns><span data-ttu-id="723ef-138">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-138">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportProperties&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ExportProperties&lt;T&gt; (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ExportProperties&lt;T&gt;(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperties(Of T) (propertyFilter As Predicate(Of PropertyInfo)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder ^ ExportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="member this.ExportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ExportProperties propertyFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="723ef-139">合約類型。</span><span class="sxs-lookup"><span data-stu-id="723ef-139">The contract type.</span></span></typeparam>
        <param name="propertyFilter"><span data-ttu-id="723ef-140">指定要匯出之屬性的述詞。</span><span class="sxs-lookup"><span data-stu-id="723ef-140">A predicate that specifies the properites to export.</span></span></param>
        <summary><span data-ttu-id="723ef-141">使用指定的合約類型，根據指定的述詞，選取要匯出之組件上的屬性。</span><span class="sxs-lookup"><span data-stu-id="723ef-141">Selects the properties on the part to export according to the specified predicate, using the specified contract type.</span></span></summary>
        <returns><span data-ttu-id="723ef-142">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-142">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportProperties&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ExportProperties&lt;T&gt; (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter, Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ExportProperties&lt;T&gt;(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter, class System.Action`2&lt;class System.Reflection.PropertyInfo, class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperties(Of T) (propertyFilter As Predicate(Of PropertyInfo), exportConfiguration As Action(Of PropertyInfo, ExportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder ^ ExportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter, Action&lt;System::Reflection::PropertyInfo ^, System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ExportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; * Action&lt;System.Reflection.PropertyInfo, System.Composition.Convention.ExportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ExportProperties (propertyFilter, exportConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="723ef-143">合約類型。</span><span class="sxs-lookup"><span data-stu-id="723ef-143">The contract type.</span></span></typeparam>
        <param name="propertyFilter"><span data-ttu-id="723ef-144">指定要匯出之屬性的述詞。</span><span class="sxs-lookup"><span data-stu-id="723ef-144">A predicate that specifies the properites to export.</span></span></param>
        <param name="exportConfiguration"><span data-ttu-id="723ef-145">設定匯出的動作。</span><span class="sxs-lookup"><span data-stu-id="723ef-145">An action that configures the exports.</span></span></param>
        <summary><span data-ttu-id="723ef-146">使用指定的合約類型和匯出組態，根據指定的述詞，選取要匯出之組件上的屬性。</span><span class="sxs-lookup"><span data-stu-id="723ef-146">Selects the properties on the part to export according to the specified predicate, using the specified contract type and export configuration.</span></span></summary>
        <returns><span data-ttu-id="723ef-147">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-147">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperties">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ImportProperties (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ImportProperties(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperties (propertyFilter As Predicate(Of PropertyInfo)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ImportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="member this.ImportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ImportProperties propertyFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyFilter"><span data-ttu-id="723ef-148">指定要匯入之屬性的述詞。</span><span class="sxs-lookup"><span data-stu-id="723ef-148">A predicate that specifies the properites to import.</span></span></param>
        <summary><span data-ttu-id="723ef-149">根據指定的述詞，選取要匯入之組件上的屬性。</span><span class="sxs-lookup"><span data-stu-id="723ef-149">Selects the properties on the part to import according to the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="723ef-150">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-150">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperties">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ImportProperties (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter, Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ImportProperties(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter, class System.Action`2&lt;class System.Reflection.PropertyInfo, class System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.Composition.Convention.ImportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperties (propertyFilter As Predicate(Of PropertyInfo), importConfiguration As Action(Of PropertyInfo, ImportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ImportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter, Action&lt;System::Reflection::PropertyInfo ^, System::Composition::Convention::ImportConventionBuilder ^&gt; ^ importConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ImportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; * Action&lt;System.Reflection.PropertyInfo, System.Composition.Convention.ImportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ImportProperties (propertyFilter, importConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
        <Parameter Name="importConfiguration" Type="System.Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ImportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyFilter"><span data-ttu-id="723ef-151">指定要匯入之屬性的述詞。</span><span class="sxs-lookup"><span data-stu-id="723ef-151">A predicate that specifies the properites to import.</span></span></param>
        <param name="importConfiguration"><span data-ttu-id="723ef-152">設定匯入的動作。</span><span class="sxs-lookup"><span data-stu-id="723ef-152">An action that configures the imports.</span></span></param>
        <summary><span data-ttu-id="723ef-153">使用指定的匯入組態，根據指定的述詞，選取要匯入之組件上的屬性。</span><span class="sxs-lookup"><span data-stu-id="723ef-153">Selects the properties on the part to import according to the specified predicate, using the specified import configuration.</span></span></summary>
        <returns><span data-ttu-id="723ef-154">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-154">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperties&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ImportProperties&lt;T&gt; (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ImportProperties&lt;T&gt;(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperties(Of T) (propertyFilter As Predicate(Of PropertyInfo)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder ^ ImportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="member this.ImportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ImportProperties propertyFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="723ef-155">合約類型。</span><span class="sxs-lookup"><span data-stu-id="723ef-155">The contract type.</span></span></typeparam>
        <param name="propertyFilter"><span data-ttu-id="723ef-156">指定要匯入之屬性的述詞。</span><span class="sxs-lookup"><span data-stu-id="723ef-156">A predicate that specifies the properties to import.</span></span></param>
        <summary><span data-ttu-id="723ef-157">使用指定的合約類型，根據指定的述詞，選取要匯入之組件上的屬性。</span><span class="sxs-lookup"><span data-stu-id="723ef-157">Selects the properties on the part to import according to the specified predicate, using the specified contract type.</span></span></summary>
        <returns><span data-ttu-id="723ef-158">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-158">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperties&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ImportProperties&lt;T&gt; (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter, Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ImportProperties&lt;T&gt;(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter, class System.Action`2&lt;class System.Reflection.PropertyInfo, class System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.Composition.Convention.ImportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperties(Of T) (propertyFilter As Predicate(Of PropertyInfo), importConfiguration As Action(Of PropertyInfo, ImportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder ^ ImportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter, Action&lt;System::Reflection::PropertyInfo ^, System::Composition::Convention::ImportConventionBuilder ^&gt; ^ importConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ImportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; * Action&lt;System.Reflection.PropertyInfo, System.Composition.Convention.ImportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ImportProperties (propertyFilter, importConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
        <Parameter Name="importConfiguration" Type="System.Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ImportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="723ef-159">合約類型。</span><span class="sxs-lookup"><span data-stu-id="723ef-159">The contract type.</span></span></typeparam>
        <param name="propertyFilter"><span data-ttu-id="723ef-160">指定要匯入之屬性的述詞。</span><span class="sxs-lookup"><span data-stu-id="723ef-160">A predicate that specifies the properties to import.</span></span></param>
        <param name="importConfiguration"><span data-ttu-id="723ef-161">設定匯入的動作。</span><span class="sxs-lookup"><span data-stu-id="723ef-161">An action that configures the imports.</span></span></param>
        <summary><span data-ttu-id="723ef-162">使用指定的合約類型和匯入組態，根據指定的述詞，選取要匯入之組件上的屬性。</span><span class="sxs-lookup"><span data-stu-id="723ef-162">Selects the properties on the part to import according to the specified predicate, using the specified contract type and import configuration.</span></span></summary>
        <returns><span data-ttu-id="723ef-163">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-163">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyImportsSatisfied">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder NotifyImportsSatisfied (Predicate&lt;System.Reflection.MethodInfo&gt; methodFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder NotifyImportsSatisfied(class System.Predicate`1&lt;class System.Reflection.MethodInfo&gt; methodFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.NotifyImportsSatisfied(System.Predicate{System.Reflection.MethodInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Function NotifyImportsSatisfied (methodFilter As Predicate(Of MethodInfo)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ NotifyImportsSatisfied(Predicate&lt;System::Reflection::MethodInfo ^&gt; ^ methodFilter);" />
      <MemberSignature Language="F#" Value="member this.NotifyImportsSatisfied : Predicate&lt;System.Reflection.MethodInfo&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.NotifyImportsSatisfied methodFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodFilter" Type="System.Predicate&lt;System.Reflection.MethodInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="methodFilter"><span data-ttu-id="723ef-164">選取方法的述詞。</span><span class="sxs-lookup"><span data-stu-id="723ef-164">A predicate that selects the methods.</span></span></param>
        <summary><span data-ttu-id="723ef-165">選取要在組合完成時當做通知的方法。</span><span class="sxs-lookup"><span data-stu-id="723ef-165">Select methods to be used as a notification when composition is complete.</span></span></summary>
        <returns><span data-ttu-id="723ef-166">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-166">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectConstructor">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder SelectConstructor (Func&lt;System.Collections.Generic.IEnumerable&lt;System.Reflection.ConstructorInfo&gt;,System.Reflection.ConstructorInfo&gt; constructorSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder SelectConstructor(class System.Func`2&lt;class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.ConstructorInfo&gt;, class System.Reflection.ConstructorInfo&gt; constructorSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.SelectConstructor(System.Func{System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo},System.Reflection.ConstructorInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectConstructor (constructorSelector As Func(Of IEnumerable(Of ConstructorInfo), ConstructorInfo)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ SelectConstructor(Func&lt;System::Collections::Generic::IEnumerable&lt;System::Reflection::ConstructorInfo ^&gt; ^, System::Reflection::ConstructorInfo ^&gt; ^ constructorSelector);" />
      <MemberSignature Language="F#" Value="member this.SelectConstructor : Func&lt;seq&lt;System.Reflection.ConstructorInfo&gt;, System.Reflection.ConstructorInfo&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.SelectConstructor constructorSelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructorSelector" Type="System.Func&lt;System.Collections.Generic.IEnumerable&lt;System.Reflection.ConstructorInfo&gt;,System.Reflection.ConstructorInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="constructorSelector"><span data-ttu-id="723ef-167">傳回單一建構函式的函式。</span><span class="sxs-lookup"><span data-stu-id="723ef-167">A function that returns a single constructor.</span></span></param>
        <summary><span data-ttu-id="723ef-168">使用指定的函式，選取用來初始化組件的建構函式。</span><span class="sxs-lookup"><span data-stu-id="723ef-168">Selects the constructor used to initialize the part by using the specified function.</span></span></summary>
        <returns><span data-ttu-id="723ef-169">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-169">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectConstructor">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder SelectConstructor (Func&lt;System.Collections.Generic.IEnumerable&lt;System.Reflection.ConstructorInfo&gt;,System.Reflection.ConstructorInfo&gt; constructorSelector, Action&lt;System.Reflection.ParameterInfo,System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder SelectConstructor(class System.Func`2&lt;class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.ConstructorInfo&gt;, class System.Reflection.ConstructorInfo&gt; constructorSelector, class System.Action`2&lt;class System.Reflection.ParameterInfo, class System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.SelectConstructor(System.Func{System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo},System.Reflection.ConstructorInfo},System.Action{System.Reflection.ParameterInfo,System.Composition.Convention.ImportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectConstructor (constructorSelector As Func(Of IEnumerable(Of ConstructorInfo), ConstructorInfo), importConfiguration As Action(Of ParameterInfo, ImportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ SelectConstructor(Func&lt;System::Collections::Generic::IEnumerable&lt;System::Reflection::ConstructorInfo ^&gt; ^, System::Reflection::ConstructorInfo ^&gt; ^ constructorSelector, Action&lt;System::Reflection::ParameterInfo ^, System::Composition::Convention::ImportConventionBuilder ^&gt; ^ importConfiguration);" />
      <MemberSignature Language="F#" Value="member this.SelectConstructor : Func&lt;seq&lt;System.Reflection.ConstructorInfo&gt;, System.Reflection.ConstructorInfo&gt; * Action&lt;System.Reflection.ParameterInfo, System.Composition.Convention.ImportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.SelectConstructor (constructorSelector, importConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructorSelector" Type="System.Func&lt;System.Collections.Generic.IEnumerable&lt;System.Reflection.ConstructorInfo&gt;,System.Reflection.ConstructorInfo&gt;" />
        <Parameter Name="importConfiguration" Type="System.Action&lt;System.Reflection.ParameterInfo,System.Composition.Convention.ImportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="constructorSelector"><span data-ttu-id="723ef-170">傳回單一建構函式的函式。</span><span class="sxs-lookup"><span data-stu-id="723ef-170">A function that returns a single constructor.</span></span></param>
        <param name="importConfiguration"><span data-ttu-id="723ef-171">設定建構函式匯入的方法。</span><span class="sxs-lookup"><span data-stu-id="723ef-171">A method that configures the constructor's imports.</span></span></param>
        <summary><span data-ttu-id="723ef-172">使用指定的函式和匯入組態，選取用來初始化組件的建構函式。</span><span class="sxs-lookup"><span data-stu-id="723ef-172">Selects the constructor used to initialize the part by using the specified function and import configuration.</span></span></summary>
        <returns><span data-ttu-id="723ef-173">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-173">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Shared">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder Shared ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder Shared() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.Shared" />
      <MemberSignature Language="VB.NET" Value="Public Function Shared () As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ Shared();" />
      <MemberSignature Language="F#" Value="member this.Shared : unit -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.Shared " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="723ef-174">將這個組件標記為要在整個組合中共用。</span><span class="sxs-lookup"><span data-stu-id="723ef-174">Marks the part as being shared throughout the entire composition.</span></span></summary>
        <returns><span data-ttu-id="723ef-175">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-175">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Shared">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder Shared (string sharingBoundary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder Shared(string sharingBoundary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.Shared(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Shared (sharingBoundary As String) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ Shared(System::String ^ sharingBoundary);" />
      <MemberSignature Language="F#" Value="member this.Shared : string -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.Shared sharingBoundary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharingBoundary" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sharingBoundary"><span data-ttu-id="723ef-176">界限。</span><span class="sxs-lookup"><span data-stu-id="723ef-176">The boundary.</span></span></param>
        <summary><span data-ttu-id="723ef-177">將這個組件標記為要在指定的界限內共用。</span><span class="sxs-lookup"><span data-stu-id="723ef-177">Marks the part as being shared within the specified boundary.</span></span></summary>
        <returns><span data-ttu-id="723ef-178">可用於進一步設定組件的組件產生器。</span><span class="sxs-lookup"><span data-stu-id="723ef-178">A part builder that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>