<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Timer.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5618b69c9a4d91151391fe5e2c79054e0441f4aec.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">618b69c9a4d91151391fe5e2c79054e0441f4aec</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Timers.Timer">
          <source>Generates an event after a set interval, with an option to generate recurring events.</source>
          <target state="translated">使用產生週期性事件的選項，在設定的間隔後產生事件。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> component is a server-based timer that raises an <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event in your application after the number of milliseconds in the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property has elapsed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>元件是伺服器為基礎的計時器引發<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>個的毫秒數之後，應用程式中的事件<ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>經過屬性。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You can configure the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object to raise the event just once or repeatedly using the <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> property.</source>
          <target state="translated">您可以設定<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>物件，以引發此事件一次或重複使用<ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Typically, a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object is declared at the class level so that it stays in scope as long as it is needed.</source>
          <target state="translated">一般而言， <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> ，讓它會保持在範圍內，只要在需要物件宣告類別層級。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You can then handle its <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to provide regular processing.</source>
          <target state="translated">然後您可以處理其<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件以提供正常處理。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</source>
          <target state="translated">例如，假設您有重要的伺服器，必須保持在 24 小時一天、 一週 7 天。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You could create a service that uses a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object to periodically check the server and ensure that the system is up and running.</source>
          <target state="translated">您可以建立使用服務<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>定期檢查的伺服器，並確保系統已啟動並執行的物件。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If the system is not responding, the service could attempt to restart the server or notify an administrator.</source>
          <target state="translated">如果系統沒有回應，服務可能嘗試重新啟動伺服器，或通知系統管理員。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> class is not available for all .NET implementations and versions, such as .NET Standard 1.6 and lower versions.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>類別不是適用於所有.NET 實作和版本，例如.NET 標準 1.6 版和較低版本。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>In these cases, you can use the <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> class instead.</source>
          <target state="translated">在這些情況下，您可以使用<ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">此類型會實作<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">當您完成使用類型時，您應該會處置它直接或間接。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">若要直接處置的類型，呼叫其<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>方法中的<ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>區塊。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">若要為其配置間接，使用語言建構例如<ph id="ph1">`using`</ph>（C# 中） 或<ph id="ph2">`Using`</ph>（在 Visual Basic)。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>介面 &gt; 主題。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The server-based <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class is designed for use with worker threads in a multithreaded environment.</source>
          <target state="translated">以伺服器為基礎<ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>類別設計用於與多執行緒環境中的背景工作執行緒。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Server timers can move among threads to handle the raised <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, resulting in more accuracy than Windows timers in raising the event on time.</source>
          <target state="translated">伺服器計時器可以在執行緒之間移動處理所引發<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件，導致更多的精確度，比在時間上引發事件的 Windows 計時器。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> component raises the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, based on the value (in milliseconds) of the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>元件引發<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件，根據的值 （以毫秒為單位） 的<ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You can handle this event to perform the processing you need.</source>
          <target state="translated">您可以處理這個事件來執行您所需要的處理。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For example, suppose that you have an online sales application that continuously posts sales orders to a database.</source>
          <target state="translated">例如，假設您有連續張貼至資料庫的銷售訂單的線上銷售應用程式。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</source>
          <target state="translated">服務傳送的指示進行編譯的訂單，而非個別處理每筆訂單的批次作業。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You could use a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> to start the batch processing every 30 minutes.</source>
          <target state="translated">您可以使用<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>啟動的批次處理序每隔 30 分鐘。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The System.Timers.Timer class has the same resolution as the system clock.</source>
          <target state="translated">System.Timers.Timer 類別有系統時鐘為相同的解析度。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This means that the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event will fire at an interval defined by the resolution of the system clock if the <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property is less than the resolution of the system clock.</source>
          <target state="translated">這表示<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件就會引發，如果系統時鐘的解析度所定義的間隔<ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>屬性小於系統時鐘的解析度。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property.</source>
          <target state="translated">如需詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 屬性 (Property)。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>When <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph2">`false`</ph>, a <ph id="ph3">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> object raises the <ph id="ph4">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, after the first <ph id="ph5">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> has elapsed.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>設<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>物件引發<ph id="ph4">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件只能出現一次，第一個之後<ph id="ph5">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>經過。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>To keep raising the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event regularly at the interval defined by the <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, set <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> to <ph id="ph4">`true`</ph>, which is the default value.</source>
          <target state="translated">保留提高<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件會定期在所定義的間隔<ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>，將<ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>至<ph id="ph4">`true`</ph>，這是預設值。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> component catches and suppresses all exceptions thrown by event handlers for the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>元件會攔截，且會抑制所有事件處理常式擲回的例外狀況<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This behavior is subject to change in future releases of the .NET Framework.</source>
          <target state="translated">此行為是未來的.NET Framework 版本中可能會變更。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Note, however, that this is not true of event handlers that execute asynchronously and include the <ph id="ph1">`await`</ph> operator (in C#)  or the <ph id="ph2">`Await`</ph> operator (in Visual Basic).</source>
          <target state="translated">不過請注意，這是不一樣的事件處理常式以非同步方式執行，且包含<ph id="ph1">`await`</ph>運算子 （C# 中） 或<ph id="ph2">`Await`</ph>運算子 （在 Visual Basic)。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</source>
          <target state="translated">這些事件處理常式中擲回的例外狀況傳播回到呼叫的執行緒，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For more information on exceptions thrown in asynchronous methods, see   <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">如需非同步方法中擲回的例外狀況的詳細資訊，請參閱<bpt id="p1">[</bpt>例外狀況處理<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised on a <ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>屬性是<ph id="ph2">`null`</ph>、<ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件會在引發<ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph>執行緒。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If processing of the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event lasts longer than <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, the event might be raised again on another <ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">如果處理<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件持續時間超過<ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>，可能會再次引發事件，在另一台<ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph>執行緒。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>In this situation, the event handler should be reentrant.</source>
          <target state="translated">在此情況下，事件處理常式應該是可重新進入。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The event-handling method might run on one thread at the same time that another thread calls the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method or sets the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">事件處理方法可能會在一個執行緒上同時執行的另一個執行緒呼叫<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>方法或設定<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the timer is stopped.</source>
          <target state="translated">這可能會導致<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>之後停止計時器所引發的事件。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The example code for the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to avoid this race condition.</source>
          <target state="translated">範例程式碼<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>方法示範一種避免競爭情形的方式。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Even if <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is not <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id="ph7">`false`</ph>, because the signal to raise the <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.</source>
          <target state="translated">即使<ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>不<ph id="ph2">`null`</ph>，<ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>之後就可能發生的事件<ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph>或<ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>呼叫方法之後或<ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性已設定為<ph id="ph7">`false`</ph>，因為引發訊號<ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件一律排入佇列以便在執行緒集區執行緒上執行。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.</source>
          <target state="translated">其中一種方式來解決這種競爭情形是設定的旗標的事件處理常式來<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>忽略後續事件的事件。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If you use the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph> to the <ph id="ph3">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property, so that the event is marshaled to the user interface thread.</source>
          <target state="translated">如果您使用<ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>與使用者介面項目，例如表單或控制項，而不會在該使用者介面項目，讓計時器的類別指派給表單或控制項，其中包含<ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph>至<ph id="ph3">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>屬性，使事件封送處理至使用者介面執行緒。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For a list of default property values for an instance of <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>, see the <ph id="ph2">&lt;xref:System.Timers.Timer.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">如需預設執行個體的屬性值的清單<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>，請參閱<ph id="ph2">&lt;xref:System.Timers.Timer.%23ctor%2A&gt;</ph>建構函式。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Be aware that .NET includes four classes named <ph id="ph1">`Timer`</ph>, each of which offers different functionality:</source>
          <target state="translated">請注意，.NET 包含四個類別，名為<ph id="ph1">`Timer`</ph>，每個提供不同功能的：</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> (this topic): fires an event at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> （本主題）： 固定間隔引發事件。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</source>
          <target state="translated">類別僅供做為伺服器為基礎或在多執行緒環境; 中的服務元件它沒有使用者介面，並在執行階段看不到。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>: executes a single callback method on a thread pool thread at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>： 在執行緒集區執行緒上定期執行的單一回呼方法。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The callback method is defined when the timer is instantiated and cannot be changed.</source>
          <target state="translated">計時器會具現化，且無法變更時，會定義回呼方法。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Like the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</source>
          <target state="translated">像<ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>類別，這個類別僅供做為伺服器或服務的元件，多執行緒環境中使用，不過它沒有使用者介面，並在執行階段看不到。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Timer?displayProperty=nameWithType&gt;</ph> (.NET Framework only): a Windows Forms component that fires an event at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Timer?displayProperty=nameWithType&gt;</ph> (.NET framework): Windows Form 元件的固定間隔引發事件。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The component has no user interface and is designed for use in a single-threaded environment.</source>
          <target state="translated">元件沒有使用者介面，設計在單一執行緒的環境中使用。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Web.UI.Timer?displayProperty=nameWithType&gt;</ph> (.NET Framework only): an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.Timer?displayProperty=nameWithType&gt;</ph> (.NET framework): 以固定間隔執行非同步或同步網頁回傳的 ASP.NET 元件。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The following example instantiates a <ph id="ph1">`System.Timers.Timer`</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</source>
          <target state="translated">下列範例會具現化<ph id="ph1">`System.Timers.Timer`</ph>物件，就會引發其<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph>事件每隔兩秒鐘 （2000 毫秒為單位），設定事件的事件處理常式，並啟動計時器。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">此事件處理常式的值顯示<ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph>屬性會引發此事件每次。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Any public <ph id="ph1">&lt;see langword="static" /&gt;</ph> members of this type are thread safe.</source>
          <target state="translated">任何 public<ph id="ph1">&lt;see langword="static" /&gt;</ph>此類型的成員是安全執行緒。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">不保證任何執行個體成員是安全執行緒。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="T:System.Timers.Timer">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> class, and sets all the properties to their initial values.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 類別的新執行個體，並將所有屬性設為其初始值。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>The following table shows initial property values for an instance of <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>.</source>
          <target state="translated">下表顯示的執行個體的初始屬性值<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>Property</source>
          <target state="translated">屬性</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>Initial value</source>
          <target state="translated">Initial value</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>100 milliseconds</source>
          <target state="translated">100 毫秒</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">null 參考 (在 Visual Basic 中為 <ph id="ph1">`Nothing`</ph>)。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">下列範例會具現化<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>物件，就會引發其<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph>事件每隔兩秒鐘 （2000年毫秒為單位），設定事件的事件處理常式，並啟動計時器。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">此事件處理常式的值顯示<ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph>屬性會引發此事件每次。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The time, in milliseconds, between events.</source>
          <target state="translated">事件與事件之間的時間間隔 (單位為毫秒)。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The value must be greater than zero and less than or equal to <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">這個值必須大於零，並且小於或等於 <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> class, and sets the <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> property to the specified number of milliseconds.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 類別的新執行個體，並將 <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> 屬性設定為指定的毫秒數。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>This constructor sets the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property of the new timer instance, but does not enable the timer.</source>
          <target state="translated">這個建構函式設定<ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>屬性，將新的計時器執行個體，但不會啟用計時器。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">下列範例會具現化<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>物件，就會引發其<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph>事件每隔兩秒鐘 （2000年毫秒為單位），設定事件的事件處理常式，並啟動計時器。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">此事件處理常式的值顯示<ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph>屬性會引發此事件每次。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The value of the <ph id="ph1">&lt;paramref name="interval" /&gt;</ph> parameter is less than or equal to zero, or greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="interval" /&gt;</ph> 參數值會小於或等於零，或者大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.AutoReset">
          <source>Gets or sets a Boolean indicating whether the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event only once (<ph id="ph3">&lt;see langword="false" /&gt;</ph>) or repeatedly (<ph id="ph4">&lt;see langword="true" /&gt;</ph>).</source>
          <target state="translated">取得或設定布林值，表示 <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 是否應該只引發 <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 事件一次 (<ph id="ph3">&lt;see langword="false" /&gt;</ph>) 或重複 (<ph id="ph4">&lt;see langword="true" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event each time the interval elapses; <ph id="ph4">&lt;see langword="false" /&gt;</ph> if it should raise the <ph id="ph5">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event only once, after the first time the interval elapses.</source>
          <target state="translated">如果 <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 應於每次間隔耗盡時引發 <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 事件，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；如果應該在第一次間隔耗盡後只引發 <ph id="ph5">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 事件一次，則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> is already enabled when the <ph id="ph2">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method is called, the interval is reset.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>時已啟用<ph id="ph2">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>呼叫方法時，會重設間隔。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method must be called in order to start the count again.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>是<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>必須呼叫方法，才能再次開始計數。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>Resetting the interval affects when the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised.</source>
          <target state="translated">重設間隔會影響當<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>就會引發事件。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>For example, if you set the interval to 5 seconds and then set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">例如，如果您設定為 5 秒的間隔，然後再設定<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性<ph id="ph2">`true`</ph>，計數開始時間<ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>設定。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>If you reset the interval to 10 seconds when the count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">如果您 10 秒時此計數是 3 秒，重設間隔<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>第一次 13 秒之後，就會引發事件<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性設定為<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> whose <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event fires after 1.5 seconds.</source>
          <target state="translated">下列範例會建立<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>其<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>1.5 秒之後的事件引發。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>Its event handler then displays "Hello World!"</source>
          <target state="translated">其事件處理常式接著會顯示"Hello World ！"</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>on the console.</source>
          <target state="translated">在主控台中。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.BeginInit">
          <source>Begins the run-time initialization of a <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> that is used on a form or by another component.</source>
          <target state="translated">開始用於表單或為另一個元件所使用之 <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 的執行階段初始化。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.BeginInit">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to start the initialization of a component that is used on a form or by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>設計環境會使用這個方法來開始初始化用於表單或另一個元件所使用的元件。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.BeginInit">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> method ends the initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph>方法結束初始化。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.BeginInit">
          <source>Using the <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph>方法可防止控制項完全初始化之前使用。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Close">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>.</source>
          <target state="translated">釋放 <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 使用的資源。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Close">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.Close%2A&gt;</ph> method in turn calls the <ph id="ph2">`Dispose`</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.Close%2A&gt;</ph>方法會呼叫<ph id="ph2">`Dispose`</ph>方法。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示釋放 Managed 和 Unmanaged 資源，<ph id="ph2">&lt;see langword="false" /&gt;</ph> 則表示只釋放 Unmanaged 資源。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Dispose(System.Boolean)">
          <source>Releases all resources used by the current <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>.</source>
          <target state="translated">釋放目前 <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 所使用的所有資源。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="E:System.Timers.Timer.Elapsed">
          <source>Occurs when the interval elapses.</source>
          <target state="translated">發生於間隔耗盡時。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised if the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property is <ph id="ph3">`true`</ph> and the time interval (in milliseconds) defined by the <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property elapses.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>就會引發事件，如果<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性是<ph id="ph3">`true`</ph>所定義的時間間隔 （以毫秒為單位） 和<ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>屬性超過。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the event is raised repeatedly at an interval defined by the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property; otherwise, the event is raised only once, the first time the <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> value elapses.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>屬性是<ph id="ph2">`true`</ph>，在所定義的間隔內重複引發此事件<ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>屬性; 否則就會引發此事件一次，第一次<ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>值超過。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> is set after the <ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>後會設定<ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph>已啟動，計數重設。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>For example, if you set the interval to 5 seconds and then set <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">例如，如果您設定為 5 秒的間隔，然後再設定<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>至<ph id="ph2">`true`</ph>，計數開始時間<ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>設定。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">如果您 10 秒時計數是 3 秒，重設間隔<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>第一次 13 秒之後，就會引發事件<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>設<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is <ph id="ph2">`null`</ph>,the <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised on a <ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>屬性是<ph id="ph2">`null`</ph>、<ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件會在引發<ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph>執行緒。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If the processing of the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event lasts longer than <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, the event might be raised again on another <ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">如果處理<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件持續時間超過<ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>，可能會再次引發事件，在另一台<ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph>執行緒。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>In this situation, the event handler should be reentrant.</source>
          <target state="translated">在此情況下，事件處理常式應該是可重新進入。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The event-handling method might run on one thread at the same time that another thread calls the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method or sets the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">事件處理方法可能會在一個執行緒上同時執行的另一個執行緒呼叫<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>方法或設定<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the timer is stopped.</source>
          <target state="translated">這可能會導致<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>之後停止計時器所引發的事件。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The example code for the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to avoid this race condition.</source>
          <target state="translated">範例程式碼<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>方法示範一種避免競爭情形的方式。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>Even if <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is not <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id="ph7">`false`</ph>, because the signal to raise the <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.</source>
          <target state="translated">即使<ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>不<ph id="ph2">`null`</ph>，<ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>之後就可能發生的事件<ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph>或<ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>呼叫方法之後或<ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性已設定為<ph id="ph7">`false`</ph>，因為引發訊號<ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件一律排入佇列以便在執行緒集區執行緒上執行。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.</source>
          <target state="translated">其中一種方式來解決這種競爭情形是設定的旗標的事件處理常式來<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>忽略後續事件的事件。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> component catches and suppresses all exceptions thrown by event handlers for the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>元件會攔截，且會抑制所有事件處理常式擲回的例外狀況<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>This behavior is subject to change in future releases of the .NET Framework.</source>
          <target state="translated">此行為是未來的.NET Framework 版本中可能會變更。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">下列範例會具現化<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>物件，就會引發其<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph>事件每隔兩秒鐘 （2000年毫秒為單位），設定事件的事件處理常式，並啟動計時器。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">此事件處理常式的值顯示<ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph>屬性會引發此事件每次。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Enabled">
          <source>Gets or sets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event.</source>
          <target state="translated">取得或設定值，表示 <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 是否應引發 <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 應該引發 <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 事件，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>Setting <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`true`</ph> is the same as calling <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>, while setting <ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph5">`false`</ph> is the same as calling <ph id="ph6">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>至<ph id="ph2">`true`</ph>等同於呼叫<ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>，而設定<ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>至<ph id="ph5">`false`</ph>等同於呼叫<ph id="ph6">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The signal to raise the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">要引發的訊號<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件一定在佇列執行<ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph>執行緒。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property is set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">這可能會導致<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>之後所引發事件<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性設定為<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The code example for the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to work around this race condition.</source>
          <target state="translated">程式碼範例<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>方法顯示其中一種方式解決這種競爭情形。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set to <ph id="ph2">`true`</ph> and <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph4">`false`</ph>, the <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>設<ph id="ph2">`true`</ph>和<ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>設為<ph id="ph4">`false`</ph>、<ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph>引發<ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>經過事件一次，第一個時間間隔。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>If the interval is set after the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.</source>
          <target state="translated">如果間隔的設定之後<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>已啟動，計數重設。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>For example, if you set the interval to 5 seconds and then set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">例如，如果您設定為 5 秒的間隔，然後再設定<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性<ph id="ph2">`true`</ph>，計數開始時間<ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>設定。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">如果您 10 秒時計數是 3 秒，重設間隔<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>第一次 13 秒之後，就會引發事件<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>設<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>Some visual designers, such as those in Microsoft Visual Studio, set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph> when inserting a new <ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>.</source>
          <target state="translated">視覺化的設計工具，例如在 Microsoft Visual Studio 中，設定<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性<ph id="ph2">`true`</ph>時插入新<ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</source>
          <target state="translated">下列範例會具現化<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>物件，就會引發其<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph>事件每隔兩秒鐘 （2000年毫秒為單位），設定事件的事件處理常式，並啟動計時器。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">此事件處理常式的值顯示<ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph>屬性會引發此事件每次。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Enabled">
          <source>This property cannot be set because the timer has been disposed.</source>
          <target state="translated">無法設定這個屬性，因為計時器已處置。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Enabled">
          <source>The <ph id="ph1">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> property was set to a value greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> before the timer was enabled.</source>
          <target state="translated">啟用計時器之前，<ph id="ph1">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> 屬性已設定為大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 的值。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.EndInit">
          <source>Ends the run-time initialization of a <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> that is used on a form or by another component.</source>
          <target state="translated">結束用於表單或為另一個元件所使用之 <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 的執行階段初始化。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.EndInit">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to end the initialization of a component that is used on a form or by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>設計環境會使用這個方法來結束初始化用於表單或另一個元件所使用的元件。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.EndInit">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> method starts the initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph>方法初始化開始。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.EndInit">
          <source>Using the <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph>方法可防止控制項完全初始化之前使用。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>Gets or sets the interval, expressed in milliseconds, at which to raise the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event.</source>
          <target state="translated">取得或設定引發 <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 事件的間隔 (以毫秒為單位)。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The time, in milliseconds, between <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> events.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 事件之間的時間間隔 (以毫秒為單位)。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The value must be greater than zero, and less than or equal to <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">這個值必須大於零，並且小於或等於 <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The default is 100 milliseconds.</source>
          <target state="translated">預設為 100 毫秒。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>You use the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to determine the frequency at which the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is fired.</source>
          <target state="translated">您使用<ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>屬性來判斷的頻率<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>引發事件。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>Because the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> class depends on the system clock, it has the same resolution as the system clock.</source>
          <target state="translated">因為<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>類別取決於系統時鐘，其具有的系統時鐘為相同的解析度。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>This means that the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event will fire at an interval defined by the resolution of the system clock if the <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property is less than the resolution of the system clock.</source>
          <target state="translated">這表示<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件就會引發，如果系統時鐘的解析度所定義的間隔<ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>屬性小於系統時鐘的解析度。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The following example sets the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to 5 milliseconds.</source>
          <target state="translated">下列範例會設定<ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>5 毫秒的屬性。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>When run on a <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</source>
          <target state="translated">在上執行時<ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph>系統的系統時鐘已的解析度大約 15 毫秒，事件引發，大約每隔 15 毫秒，而不是每隔 5 毫秒。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>You can use the following code to determine the resolution of the system clock on the current system:</source>
          <target state="translated">若要判斷目前系統上的系統時鐘的解析度，您可以使用下列程式碼：</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If your app requires greater resolution than that offered by the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> class or the system clock, use the high-resolution multimedia timers; see <bpt id="p1">[</bpt>How to: Use the High-Resolution Timer<ept id="p1">](http://msdn.microsoft.com/library/aa964692.aspx)</ept>.</source>
          <target state="translated">如果您的應用程式需要比所提供更高的解析度<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>類別或系統時鐘，使用高解析度的多媒體計時器，請參閱 &lt; <bpt id="p1">[</bpt>How to： 使用 High-Resolution 計時器<ept id="p1">](http://msdn.microsoft.com/library/aa964692.aspx)</ept>。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If the interval is set after the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.</source>
          <target state="translated">如果間隔的設定之後<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>已啟動，計數重設。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>For example, if you set the interval to 5 seconds and then set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">例如，如果您設定為 5 秒的間隔，然後再設定<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性<ph id="ph2">`true`</ph>，計數開始時間<ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>設定。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">如果您 10 秒時計數是 3 秒，重設間隔<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>第一次 13 秒之後，就會引發事件<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>設<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set to <ph id="ph2">`true`</ph> and <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph4">`false`</ph>, the <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>設<ph id="ph2">`true`</ph>和<ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>設為<ph id="ph4">`false`</ph>、<ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph>引發<ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>經過事件一次，第一個時間間隔。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source><ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is then set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 然後將設定為<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> are both set to <ph id="ph3">`false`</ph>, and the timer has previously been enabled, setting the <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property causes the <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to be raised once, as if the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property had been set to <ph id="ph7">`true`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>都設定為<ph id="ph3">`false`</ph>，以及計時器先前已啟用，設定<ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>屬性原因<ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>一次，引發的事件，如同<ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性已設定為<ph id="ph7">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>To set the interval without raising the event, you can temporarily set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, set the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to the desired time interval, and then immediately set the <ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property back to <ph id="ph5">`false`</ph>.</source>
          <target state="translated">若要設定的間隔，而不會引發事件，您可以暫時設定<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性<ph id="ph2">`true`</ph>，將<ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>屬性所需的時間間隔，然後立即設定<ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性設回<ph id="ph5">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">下列範例會具現化<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>物件，就會引發其<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph>事件每隔兩秒鐘 （2000年毫秒為單位），設定事件的事件處理常式，並啟動計時器。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">此事件處理常式的值顯示<ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph>屬性會引發此事件每次。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>The interval is less than or equal to zero.</source>
          <target state="translated">間隔是小於或等於零。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>The interval is greater than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>, and the timer is currently enabled.</source>
          <target state="translated">間隔大於 <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>，且計時器目前已啟用。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</source>
          <target state="translated">(如果目前沒有啟用計數器，則在計數器變成啟用狀態之前，不會擲回例外狀況)。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Site">
          <source>Gets or sets the site that binds the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> to its container in design mode.</source>
          <target state="translated">取得或設定在設計模式中繫結 <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 到其容器的站台。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Site">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> interface representing the site that binds the <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> object to its container.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> 介面，代表繫結 <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 物件到其容器的站台。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Site">
          <source>Sites bind a <ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph> to a <ph id="ph2">&lt;xref:System.ComponentModel.Container&gt;</ph> and enable communication between them, as well as providing a way for the container to manage its components.</source>
          <target state="translated">站台繫結<ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph>至<ph id="ph2">&lt;xref:System.ComponentModel.Container&gt;</ph>和啟用它們之間的通訊，以及提供一種方式管理其元件容器。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Start">
          <source>Starts raising the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event by setting <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph> to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">將 <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph> 設定為 <ph id="ph3">&lt;see langword="true" /&gt;</ph>，開始引發 <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> is called and <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph3">`false`</ph>, the <ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>稱為和<ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>設<ph id="ph3">`false`</ph>、<ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph>引發<ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>經過事件一次，第一個時間間隔。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> is called and <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id="ph3">`true`</ph>, the <ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event the first time the interval elapses and continues to raise the event on the specified interval.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>稱為和<ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>是<ph id="ph3">`true`</ph>、<ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph>引發<ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件第一個時間間隔經過，而且會持續引發的事件上指定的時間間隔。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>You can also start timing by setting <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">您也可以藉由設定啟動計時<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>至<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method must be called in order to start the count again.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>是<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>必須呼叫方法，才能再次開始計數。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>A call to the <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method when the timer is enabled has no effect.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>方法計時器被啟用時沒有任何作用。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Start">
          <source>The <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> is created with an interval equal to or greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> + 1, or set to an interval less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 是使用等於或大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> + 1 的間隔所設定，或是設定為小於零的間隔。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Stop">
          <source>Stops raising the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event by setting <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph> to <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">將 <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph> 設定為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>，停止引發 <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>You can also stop timing by setting <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">您也可以藉由設定停止時間<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>至<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The signal to raise the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread, so the event-handling method might run on one thread at the same time that a call to the <ph id="ph3">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method runs on another thread.</source>
          <target state="translated">要引發的訊號<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件一定在佇列執行<ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph>執行緒，因此事件處理方法可能會在相同執行緒上執行的時間，呼叫<ph id="ph3">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>另一個執行緒上執行的方法。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the <ph id="ph2">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method is called.</source>
          <target state="translated">這可能會導致<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>之後所引發事件<ph id="ph2">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>方法呼叫。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The code example in the next section shows one way to work around this race condition.</source>
          <target state="translated">下一節的程式碼範例會示範一種方法解決這種競爭情形。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The following example instantiates a <ph id="ph1">`System.Timers.Timer`</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</source>
          <target state="translated">下列範例會具現化<ph id="ph1">`System.Timers.Timer`</ph>物件，就會引發其<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph>事件每隔兩秒鐘 （2000 毫秒為單位），設定事件的事件處理常式，並啟動計時器。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">此事件處理常式的值顯示<ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph>屬性會引發此事件每次。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>When the user presses the Enter key, the application calls the  <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method before terminating the application.</source>
          <target state="translated">當使用者按下 Enter 鍵時，在應用程式呼叫<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>方法，然後再結束應用程式。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The following code example shows one way to prevent the thread that calls the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method from continuing until a currently executing <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event ends, and also to prevent two <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events from executing the event handler at the same time (often referred to as reentrancy).</source>
          <target state="translated">下列程式碼範例示範一個方法，可以讓呼叫的執行緒<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>方法無法繼續，直到目前執行<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件就會結束，並同時避免兩個<ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>執行事件處理常式在相同的事件（通常稱為重新進入） 的時間。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The example executes 100 test runs.</source>
          <target state="translated">此範例會執行 100 的測試回合。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>Each time the test is run, the timer is started with an interval of 150 milliseconds.</source>
          <target state="translated">每次執行測試，而間隔為 150 毫秒啟動計時器。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The event handler uses the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method to simulate a task that randomly varies in length from 50 to 200 milliseconds.</source>
          <target state="translated">事件處理常式使用<ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph>方法，以模擬隨機而變動長度為 50 到 200 毫秒中的工作。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The test method also starts a control thread that waits for a second and then stops the timer.</source>
          <target state="translated">測試方法也會啟動控制執行緒，等待第二個和停止計時器。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.</source>
          <target state="translated">如果在處理事件時控制執行緒停止計時器，控制執行緒必須等到完成事件，然後再繼續。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph>方法多載用來避免重新進入，並防止控制執行緒正在執行的事件結束為止。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The event handler uses the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to set a control variable to 1, but only if the value is currently zero.</source>
          <target state="translated">事件處理常式使用<ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>方法，以將控制項設定變數設為 1，但前提是此值目前為零。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>This is an atomic operation.</source>
          <target state="translated">這是不可部分完成的作業。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If the return value is zero, the control variable has been set to 1 and the event handler proceeds.</source>
          <target state="translated">如果傳回的值為零，控制變數已設定為 1，事件處理常式會繼續。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If the return value is non-zero, the event is simply discarded to avoid reentrancy.</source>
          <target state="translated">如果傳回的值為非零，會忽略事件以避免重新進入。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>(If it were necessary to execute every event, the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero.</source>
          <target state="translated">(如果它是要執行每個事件，<ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph>類別會是更好的方式同步處理的事件。)事件處理常式結束時，會將控制變數回設為零。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method was called.</source>
          <target state="translated">範例記錄的執行，因為重新進入，已捨棄的而且之後所發生的事件總數<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>呼叫方法。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The control thread uses the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to set the control variable to -1 (minus one), but only if the value is currently zero.</source>
          <target state="translated">控制執行緒使用<ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>方法，以將控制項設定變數設為-1 （減一），但前提是此值目前為零。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If the atomic operation returns non-zero, an event is currently executing.</source>
          <target state="translated">不可部分完成的作業會傳回非零，如果目前正在執行一個事件。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The control thread waits and tries again.</source>
          <target state="translated">控制執行緒等候，而且會嘗試一次。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The example records the number of times the control thread had to wait for an event to finish.</source>
          <target state="translated">範例記錄控制執行緒必須等待事件結束的次數。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</source>
          <target state="translated">取得或設定物件，用來封送處理事件處理常式的呼叫 (當間隔已經耗盡時所發出)。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph>，表示用來封送處理事件處理常式呼叫 (當間隔已經耗盡時所發出) 的物件。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>When <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the method that handles the <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is called on a thread from the system-thread pool.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>是<ph id="ph2">`null`</ph>，處理的方法<ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>系統執行緒集區執行緒上呼叫事件。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>For more information on system-thread pools, see <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>.</source>
          <target state="translated">如需有關系統執行緒集區的詳細資訊，請參閱<ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>When the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件由 visual 的 Windows Form 元件，例如按鈕，存取元件透過系統執行緒集區可能結果的例外狀況，或只是可能會無法運作。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>Avoid this effect by setting <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> to a Windows Forms component, which causes the method that handles the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to be called on the same thread that the component was created on.</source>
          <target state="translated">藉由設定避免這種效果<ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>給 Windows Form 元件時，這會導致處理的方法<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件建立元件的相同執行緒上呼叫。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>Even if the <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id="ph7">`false`</ph>, because the signal to raise the <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.</source>
          <target state="translated">即使<ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>屬性不是<ph id="ph2">`null`</ph>，<ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>之後就可能發生的事件<ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph>或<ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>呼叫方法之後或<ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>屬性已設定為<ph id="ph7">`false`</ph>，因為要引發的訊號<ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>事件一律排入佇列以便在執行緒集區執行緒上執行。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.</source>
          <target state="translated">其中一種方式來解決這種競爭情形是設定的旗標的事件處理常式來<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>忽略後續事件的事件。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> is used inside Visual Studio in a Windows Forms designer, <ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is automatically set to the control that contains the <ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>在 Windows Form 設計工具中，Visual Studio 內使用<ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>會自動設定為包含的控制項<ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>For example, if you place a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> on a designer for <ph id="ph2">`Form1`</ph> (which inherits from <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>), the <ph id="ph4">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property of <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> is set to the instance of <ph id="ph6">`Form1`</ph>.</source>
          <target state="translated">例如，如果您將<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>的設計工具上<ph id="ph2">`Form1`</ph>(繼承自<ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>)、<ph id="ph4">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>屬性<ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph>設為執行個體<ph id="ph6">`Form1`</ph>。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The following example is a Windows Forms app that serves as a very simple text file editor.</source>
          <target state="translated">下列範例是非常簡單的文字檔案編輯器所做的 Windows Form 應用程式。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.</source>
          <target state="translated">當尚未儲存的文字，在文字方塊中時，應用程式會要求使用者在一分鐘的時間間隔是否要儲存文字方塊的內容。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>To do this, the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property is set to one minute (60,000 milliseconds), and the <ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is set to the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> object.</source>
          <target state="translated">若要這樣做，<ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>屬性設定為 1 分鐘 （60000 毫秒為單位），而<ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>屬性設定為<ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The example requires that you add the following controls to the form:</source>
          <target state="translated">這個範例需要下列控制項加入表單：</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control named <ph id="ph2">`TextBox1`</ph> (its default name).</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>控制項，名為<ph id="ph2">`TextBox1`</ph>（其預設名稱）。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control named <ph id="ph2">`Button1`</ph> (its default name).</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph>控制項，名為<ph id="ph2">`Button1`</ph>（其預設名稱）。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.SaveFileDialog&gt;</ph> control named <ph id="ph2">`SaveSaveFileDialog1`</ph> (its default name) .</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Forms.SaveFileDialog&gt;</ph>控制項，名為<ph id="ph2">`SaveSaveFileDialog1`</ph>（其預設名稱）。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>