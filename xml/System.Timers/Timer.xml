<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fcc0e5e5a3656054b36a6ed93ec6732ed26646c9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36406576" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Generates an event after a set interval, with an option to generate recurring events.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer>元件是伺服器為基礎的計時器引發<xref:System.Timers.Timer.Elapsed>個的毫秒數之後，應用程式中的事件<xref:System.Timers.Timer.Interval%2A>經過屬性。 您可以設定<xref:System.Timers.Timer>物件，以引發此事件一次或重複使用<xref:System.Timers.Timer.AutoReset%2A>屬性。 一般而言， <xref:System.Timers.Timer> ，讓它會保持在範圍內，只要在需要物件宣告類別層級。 然後您可以處理其<xref:System.Timers.Timer.Elapsed>事件以提供正常處理。 例如，假設您有重要的伺服器，必須保持在 24 小時一天、 一週 7 天。 您可以建立使用服務<xref:System.Timers.Timer>定期檢查的伺服器，並確保系統已啟動並執行的物件。 如果系統沒有回應，服務可能嘗試重新啟動伺服器，或通知系統管理員。  
  
> [!IMPORTANT]
> <xref:System.Timers.Timer>類別不是適用於所有.NET 實作和版本，例如.NET 標準 1.6 版和較低版本。
> 在這些情況下，您可以使用<xref:System.Threading.Timer?displayProperty=nameWithType>類別。
  
 此類型會實作<xref:System.IDisposable>介面。 當您完成使用類型時，您應該會處置它直接或間接。 若要直接處置的類型，呼叫其<xref:System.IDisposable.Dispose%2A>方法中的`try` / `catch`區塊。 若要為其配置間接，使用語言建構例如`using`（C# 中） 或`Using`（在 Visual Basic)。 如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。  
  
 以伺服器為基礎<xref:System.Timers.Timer?displayProperty=nameWithType>類別設計用於與多執行緒環境中的背景工作執行緒。 伺服器計時器可以在執行緒之間移動處理所引發<xref:System.Timers.Timer.Elapsed>事件，導致更多的精確度，比在時間上引發事件的 Windows 計時器。  
  
 <xref:System.Timers.Timer?displayProperty=nameWithType>元件引發<xref:System.Timers.Timer.Elapsed>事件，根據的值 （以毫秒為單位） 的<xref:System.Timers.Timer.Interval%2A>屬性。 您可以處理這個事件來執行您所需要的處理。 例如，假設您有連續張貼至資料庫的銷售訂單的線上銷售應用程式。 服務傳送的指示進行編譯的訂單，而非個別處理每筆訂單的批次作業。 您可以使用<xref:System.Timers.Timer>啟動的批次處理序每隔 30 分鐘。  
  
> [!IMPORTANT]
>  System.Timers.Timer 類別有系統時鐘為相同的解析度。 這表示<xref:System.Timers.Timer.Elapsed>事件就會引發，如果系統時鐘的解析度所定義的間隔<xref:System.Timers.Timer.Interval%2A>屬性小於系統時鐘的解析度。 如需詳細資訊，請參閱 <xref:System.Timers.Timer.Interval%2A> 屬性 (Property)。  
  
 當<xref:System.Timers.Timer.AutoReset%2A>設`false`、<xref:System.Timers.Timer?displayProperty=nameWithType>物件引發<xref:System.Timers.Timer.Elapsed>事件只能出現一次，第一個之後<xref:System.Timers.Timer.Interval%2A>經過。 保留提高<xref:System.Timers.Timer.Elapsed>事件會定期在所定義的間隔<xref:System.Timers.Timer.Interval%2A>，將<xref:System.Timers.Timer.AutoReset%2A>至`true`，這是預設值。  
  
 <xref:System.Timers.Timer>元件會攔截，且會抑制所有事件處理常式擲回的例外狀況<xref:System.Timers.Timer.Elapsed>事件。 此行為是未來的.NET Framework 版本中可能會變更。 不過請注意，這是不一樣的事件處理常式以非同步方式執行，且包含`await`運算子 （C# 中） 或`Await`運算子 （在 Visual Basic)。 這些事件處理常式中擲回的例外狀況傳播回到呼叫的執行緒，如下列範例所示。 如需非同步方法中擲回的例外狀況的詳細資訊，請參閱[例外狀況處理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 如果<xref:System.Timers.Timer.SynchronizingObject%2A>屬性是`null`、<xref:System.Timers.Timer.Elapsed>事件會在引發<xref:System.Threading.ThreadPool>執行緒。 如果處理<xref:System.Timers.Timer.Elapsed>事件持續時間超過<xref:System.Timers.Timer.Interval%2A>，可能會再次引發事件，在另一台<xref:System.Threading.ThreadPool>執行緒。 在此情況下，事件處理常式應該是可重新進入。  
  
> [!NOTE]
>  事件處理方法可能會在一個執行緒上同時執行的另一個執行緒呼叫<xref:System.Timers.Timer.Stop%2A>方法或設定<xref:System.Timers.Timer.Enabled%2A>屬性`false`。 這可能會導致<xref:System.Timers.Timer.Elapsed>之後停止計時器所引發的事件。 範例程式碼<xref:System.Timers.Timer.Stop%2A>方法示範一種避免競爭情形的方式。  
  
 即使<xref:System.Timers.Timer.SynchronizingObject%2A>不`null`，<xref:System.Timers.Timer.Elapsed>之後就可能發生的事件<xref:System.Timers.Timer.Dispose%2A>或<xref:System.Timers.Timer.Stop%2A>呼叫方法之後或<xref:System.Timers.Timer.Enabled%2A>屬性已設定為`false`，因為引發訊號<xref:System.Timers.Timer.Elapsed>事件一律排入佇列以便在執行緒集區執行緒上執行。 其中一種方式來解決這種競爭情形是設定的旗標的事件處理常式來<xref:System.Timers.Timer.Elapsed>忽略後續事件的事件。  
  
 如果您使用<xref:System.Timers.Timer?displayProperty=nameWithType>與使用者介面項目，例如表單或控制項，而不會在該使用者介面項目，讓計時器的類別指派給表單或控制項，其中包含<xref:System.Timers.Timer>至<xref:System.Timers.Timer.SynchronizingObject%2A>屬性，使事件封送處理至使用者介面執行緒。  
  
 如需預設執行個體的屬性值的清單<xref:System.Timers.Timer>，請參閱<xref:System.Timers.Timer.%23ctor%2A>建構函式。  
  
> [!TIP]
>  請注意，.NET 包含四個類別，名為`Timer`，每個提供不同功能的：  
>   
> - <xref:System.Timers.Timer?displayProperty=nameWithType> （本主題）： 固定間隔引發事件。 類別僅供做為伺服器為基礎或在多執行緒環境; 中的服務元件它沒有使用者介面，並在執行階段看不到。  
> - <xref:System.Threading.Timer?displayProperty=nameWithType>： 在執行緒集區執行緒上定期執行的單一回呼方法。 計時器會具現化，且無法變更時，會定義回呼方法。 像<xref:System.Timers.Timer?displayProperty=nameWithType>類別，這個類別僅供做為伺服器或服務的元件，多執行緒環境中使用，不過它沒有使用者介面，並在執行階段看不到。  
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET framework): Windows Form 元件的固定間隔引發事件。 元件沒有使用者介面，設計在單一執行緒的環境中使用。  
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET framework): 以固定間隔執行非同步或同步網頁回傳的 ASP.NET 元件。  

## Examples  
 下列範例會具現化`System.Timers.Timer`物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000 毫秒為單位），設定事件的事件處理常式，並啟動計時器。 此事件處理常式的值顯示<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每次。  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>任何 public<see langword="static" />此類型的成員是安全執行緒。 不保證任何執行個體成員是安全執行緒。</threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets all the properties to their initial values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表顯示的執行個體的初始屬性值<xref:System.Timers.Timer>。  
  
|屬性|Initial value|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|100 毫秒|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|null 參考 (在 Visual Basic 中為 `Nothing`)。|  
  
   
  
## Examples  
 下列範例會具現化<xref:System.Timers.Timer>物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000年毫秒為單位），設定事件的事件處理常式，並啟動計時器。 此事件處理常式的值顯示<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每次。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberSignature Language="F#" Value="new System.Timers.Timer : double -&gt; System.Timers.Timer" Usage="new System.Timers.Timer interval" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval">The time, in milliseconds, between events. The value must be greater than zero and less than or equal to <see cref="F:System.Int32.MaxValue" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets the <see cref="P:System.Timers.Timer.Interval" /> property to the specified number of milliseconds.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式設定<xref:System.Timers.Timer.Interval%2A>屬性，將新的計時器執行個體，但不會啟用計時器。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.Timers.Timer>物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000年毫秒為單位），設定事件的事件處理常式，並啟動計時器。 此事件處理常式的值顯示<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每次。  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The value of the <paramref name="interval" /> parameter is less than or equal to zero, or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoReset : bool with get, set" Usage="System.Timers.Timer.AutoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once (<see langword="false" />) or repeatedly (<see langword="true" />).</summary>
        <value>如果 <see cref="T:System.Timers.Timer" /> 應於每次間隔耗盡時引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，則為 <see langword="true" />；如果應該在第一次間隔耗盡後只引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件一次，則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Timers.Timer>時已啟用<xref:System.Timers.Timer.Start%2A>呼叫方法時，會重設間隔。 如果<xref:System.Timers.Timer.AutoReset%2A>是`false`、<xref:System.Timers.Timer.Start%2A>必須呼叫方法，才能再次開始計數。  
  
 重設間隔會影響當<xref:System.Timers.Timer.Elapsed>就會引發事件。 例如，如果您設定為 5 秒的間隔，然後再設定<xref:System.Timers.Timer.Enabled%2A>屬性`true`，計數開始時間<xref:System.Timers.Timer.Enabled%2A>設定。 如果您 10 秒時此計數是 3 秒，重設間隔<xref:System.Timers.Timer.Elapsed>第一次 13 秒之後，就會引發事件<xref:System.Timers.Timer.Enabled%2A>屬性設定為`true`。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Timers.Timer>其<xref:System.Timers.Timer.Elapsed>1.5 秒之後的事件引發。 其事件處理常式接著會顯示"Hello World ！" 在主控台中。  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="timer.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Begins the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]設計環境會使用這個方法來開始初始化用於表單或另一個元件所使用的元件。 <xref:System.Timers.Timer.EndInit%2A>方法結束初始化。 使用<xref:System.Timers.Timer.BeginInit%2A>和<xref:System.Timers.Timer.EndInit%2A>方法可防止控制項完全初始化之前使用。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="timer.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the <see cref="T:System.Timers.Timer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Close%2A>方法會呼叫`Dispose`方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases all resources used by the current <see cref="T:System.Timers.Timer" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberSignature Language="F#" Value="member this.Elapsed : System.Timers.ElapsedEventHandler " Usage="member this.Elapsed : System.Timers.ElapsedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the interval elapses.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Elapsed>就會引發事件，如果<xref:System.Timers.Timer.Enabled%2A>屬性是`true`所定義的時間間隔 （以毫秒為單位） 和<xref:System.Timers.Timer.Interval%2A>屬性超過。 如果<xref:System.Timers.Timer.AutoReset%2A>屬性是`true`，在所定義的間隔內重複引發此事件<xref:System.Timers.Timer.Interval%2A>屬性; 否則就會引發此事件一次，第一次<xref:System.Timers.Timer.Interval%2A>值超過。  
  
 如果<xref:System.Timers.Timer.Interval%2A>後會設定<xref:System.Timers.Timer>已啟動，計數重設。 例如，如果您設定為 5 秒的間隔，然後再設定<xref:System.Timers.Timer.Enabled%2A>至`true`，計數開始時間<xref:System.Timers.Timer.Enabled%2A>設定。 如果您 10 秒時計數是 3 秒，重設間隔<xref:System.Timers.Timer.Elapsed>第一次 13 秒之後，就會引發事件<xref:System.Timers.Timer.Enabled%2A>設`true`。  
  
 如果<xref:System.Timers.Timer.SynchronizingObject%2A>屬性是`null`、<xref:System.Timers.Timer.Elapsed>事件會在引發<xref:System.Threading.ThreadPool>執行緒。 如果處理<xref:System.Timers.Timer.Elapsed>事件持續時間超過<xref:System.Timers.Timer.Interval%2A>，可能會再次引發事件，在另一台<xref:System.Threading.ThreadPool>執行緒。 在此情況下，事件處理常式應該是可重新進入。  
  
> [!NOTE]
>  事件處理方法可能會在一個執行緒上同時執行的另一個執行緒呼叫<xref:System.Timers.Timer.Stop%2A>方法或設定<xref:System.Timers.Timer.Enabled%2A>屬性`false`。 這可能會導致<xref:System.Timers.Timer.Elapsed>之後停止計時器所引發的事件。 範例程式碼<xref:System.Timers.Timer.Stop%2A>方法示範一種避免競爭情形的方式。  
  
 即使<xref:System.Timers.Timer.SynchronizingObject%2A>不`null`，<xref:System.Timers.Timer.Elapsed>之後就可能發生的事件<xref:System.Timers.Timer.Dispose%2A>或<xref:System.Timers.Timer.Stop%2A>呼叫方法之後或<xref:System.Timers.Timer.Enabled%2A>屬性已設定為`false`，因為引發訊號<xref:System.Timers.Timer.Elapsed>事件一律排入佇列以便在執行緒集區執行緒上執行。 其中一種方式來解決這種競爭情形是設定的旗標的事件處理常式來<xref:System.Timers.Timer.Elapsed>忽略後續事件的事件。  
  
 <xref:System.Timers.Timer>元件會攔截，且會抑制所有事件處理常式擲回的例外狀況<xref:System.Timers.Timer.Elapsed>事件。 此行為是未來的.NET Framework 版本中可能會變更。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.Timers.Timer>物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000年毫秒為單位），設定事件的事件處理常式，並啟動計時器。 此事件處理常式的值顯示<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每次。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Timers.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</summary>
        <value>如果 <see cref="T:System.Timers.Timer" /> 應該引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定<xref:System.Timers.Timer.Enabled%2A>至`true`等同於呼叫<xref:System.Timers.Timer.Start%2A>，而設定<xref:System.Timers.Timer.Enabled%2A>至`false`等同於呼叫<xref:System.Timers.Timer.Stop%2A>。  
  
> [!NOTE]
>  要引發的訊號<xref:System.Timers.Timer.Elapsed>事件一定在佇列執行<xref:System.Threading.ThreadPool>執行緒。 這可能會導致<xref:System.Timers.Timer.Elapsed>之後所引發事件<xref:System.Timers.Timer.Enabled%2A>屬性設定為`false`。 程式碼範例<xref:System.Timers.Timer.Stop%2A>方法顯示其中一種方式解決這種競爭情形。  
  
 如果<xref:System.Timers.Timer.Enabled%2A>設`true`和<xref:System.Timers.Timer.AutoReset%2A>設為`false`、<xref:System.Timers.Timer>引發<xref:System.Timers.Timer.Elapsed>經過事件一次，第一個時間間隔。  
  
 如果間隔的設定之後<xref:System.Timers.Timer>已啟動，計數重設。 例如，如果您設定為 5 秒的間隔，然後再設定<xref:System.Timers.Timer.Enabled%2A>屬性`true`，計數開始時間<xref:System.Timers.Timer.Enabled%2A>設定。 如果您 10 秒時計數是 3 秒，重設間隔<xref:System.Timers.Timer.Elapsed>第一次 13 秒之後，就會引發事件<xref:System.Timers.Timer.Enabled%2A>設`true`。  
  
> [!NOTE]
>  視覺化的設計工具，例如在 Microsoft Visual Studio 中，設定<xref:System.Timers.Timer.Enabled%2A>屬性`true`時插入新<xref:System.Timers.Timer>。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.Timers.Timer>物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000年毫秒為單位），設定事件的事件處理常式，並啟動計時器。 此事件處理常式的值顯示<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每次。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">This property cannot be set because the timer has been disposed.</exception>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.Timers.Timer.Interval" /> property was set to a value greater than <see cref="F:System.Int32.MaxValue" /> before the timer was enabled.</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="timer.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ends the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]設計環境會使用這個方法來結束初始化用於表單或另一個元件所使用的元件。 <xref:System.Timers.Timer.BeginInit%2A>方法初始化開始。 使用<xref:System.Timers.Timer.BeginInit%2A>和<xref:System.Timers.Timer.EndInit%2A>方法可防止控制項完全初始化之前使用。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Timers.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the interval, expressed in milliseconds, at which to raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</summary>
        <value>
          <see cref="E:System.Timers.Timer.Elapsed" /> 事件之間的時間間隔 (以毫秒為單位)。 這個值必須大於零，並且小於或等於 <see cref="F:System.Int32.MaxValue" />。 預設為 100 毫秒。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您使用<xref:System.Timers.Timer.Interval%2A>屬性來判斷的頻率<xref:System.Timers.Timer.Elapsed>引發事件。 因為<xref:System.Timers.Timer>類別取決於系統時鐘，其具有的系統時鐘為相同的解析度。 這表示<xref:System.Timers.Timer.Elapsed>事件就會引發，如果系統時鐘的解析度所定義的間隔<xref:System.Timers.Timer.Interval%2A>屬性小於系統時鐘的解析度。 下列範例會設定<xref:System.Timers.Timer.Interval%2A>5 毫秒的屬性。 在上執行時[!INCLUDE[win7](~/includes/win7-md.md)]系統的系統時鐘已的解析度大約 15 毫秒，事件引發，大約每隔 15 毫秒，而不是每隔 5 毫秒。  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 若要判斷目前系統上的系統時鐘的解析度，您可以使用下列程式碼：  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 如果您的應用程式需要比所提供更高的解析度<xref:System.Timers.Timer>類別或系統時鐘，使用高解析度的多媒體計時器，請參閱 < [How to： 使用 High-Resolution 計時器](http://msdn.microsoft.com/library/aa964692.aspx)。  
  
 如果間隔的設定之後<xref:System.Timers.Timer>已啟動，計數重設。 例如，如果您設定為 5 秒的間隔，然後再設定<xref:System.Timers.Timer.Enabled%2A>屬性`true`，計數開始時間<xref:System.Timers.Timer.Enabled%2A>設定。 如果您 10 秒時計數是 3 秒，重設間隔<xref:System.Timers.Timer.Elapsed>第一次 13 秒之後，就會引發事件<xref:System.Timers.Timer.Enabled%2A>設`true`。  
  
 如果<xref:System.Timers.Timer.Enabled%2A>設`true`和<xref:System.Timers.Timer.AutoReset%2A>設為`false`、<xref:System.Timers.Timer>引發<xref:System.Timers.Timer.Elapsed>經過事件一次，第一個時間間隔。 <xref:System.Timers.Timer.Enabled%2A> 然後將設定為`false`。  
  
> [!NOTE]
>  如果<xref:System.Timers.Timer.Enabled%2A>和<xref:System.Timers.Timer.AutoReset%2A>都設定為`false`，以及計時器先前已啟用，設定<xref:System.Timers.Timer.Interval%2A>屬性原因<xref:System.Timers.Timer.Elapsed>一次，引發的事件，如同<xref:System.Timers.Timer.Enabled%2A>屬性已設定為`true`. 若要設定的間隔，而不會引發事件，您可以暫時設定<xref:System.Timers.Timer.Enabled%2A>屬性`true`，將<xref:System.Timers.Timer.Interval%2A>屬性所需的時間間隔，然後立即設定<xref:System.Timers.Timer.Enabled%2A>屬性設回`false`。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.Timers.Timer>物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000年毫秒為單位），設定事件的事件處理常式，並啟動計時器。 此事件處理常式的值顯示<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每次。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The interval is less than or equal to zero.  -or-  The interval is greater than <see cref="F:System.Int32.MaxValue" />, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Timers.Timer.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the site that binds the <see cref="T:System.Timers.Timer" /> to its container in design mode.</summary>
        <value>
          <see cref="T:System.ComponentModel.ISite" /> 介面，代表繫結 <see cref="T:System.Timers.Timer" /> 物件到其容器的站台。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 站台繫結<xref:System.ComponentModel.Component>至<xref:System.ComponentModel.Container>和啟用它們之間的通訊，以及提供一種方式管理其元件容器。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Timers.Timer.Start%2A>稱為和<xref:System.Timers.Timer.AutoReset%2A>設`false`、<xref:System.Timers.Timer>引發<xref:System.Timers.Timer.Elapsed>經過事件一次，第一個時間間隔。 如果<xref:System.Timers.Timer.Start%2A>稱為和<xref:System.Timers.Timer.AutoReset%2A>是`true`、<xref:System.Timers.Timer>引發<xref:System.Timers.Timer.Elapsed>事件第一個時間間隔經過，而且會持續引發的事件上指定的時間間隔。  
  
 您也可以藉由設定啟動計時<xref:System.Timers.Timer.Enabled%2A>至`true`。  
  
> [!NOTE]
>  如果<xref:System.Timers.Timer.AutoReset%2A>是`false`、<xref:System.Timers.Timer.Start%2A>必須呼叫方法，才能再次開始計數。  
  
 呼叫<xref:System.Timers.Timer.Start%2A>方法計時器被啟用時沒有任何作用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="T:System.Timers.Timer" /> is created with an interval equal to or greater than <see cref="F:System.Int32.MaxValue" /> + 1, or set to an interval less than zero.</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="false" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您也可以藉由設定停止時間<xref:System.Timers.Timer.Enabled%2A>至`false`。  
  
> [!NOTE]
>  要引發的訊號<xref:System.Timers.Timer.Elapsed>事件一定在佇列執行<xref:System.Threading.ThreadPool>執行緒，因此事件處理方法可能會在相同執行緒上執行的時間，呼叫<xref:System.Timers.Timer.Stop%2A>另一個執行緒上執行的方法。 這可能會導致<xref:System.Timers.Timer.Elapsed>之後所引發事件<xref:System.Timers.Timer.Stop%2A>方法呼叫。 下一節的程式碼範例會示範一種方法解決這種競爭情形。  
  
   
  
## Examples  
 下列範例會具現化`System.Timers.Timer`物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000 毫秒為單位），設定事件的事件處理常式，並啟動計時器。 此事件處理常式的值顯示<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每次。 當使用者按下 Enter 鍵時，在應用程式呼叫<xref:System.Timers.Timer.Stop%2A>方法，然後再結束應用程式。  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 下列程式碼範例示範一個方法，可以讓呼叫的執行緒<xref:System.Timers.Timer.Stop%2A>方法無法繼續，直到目前執行<xref:System.Timers.Timer.Elapsed>事件就會結束，並同時避免兩個<xref:System.Timers.Timer.Elapsed>執行事件處理常式在相同的事件（通常稱為重新進入） 的時間。  
  
 此範例會執行 100 的測試回合。 每次執行測試，而間隔為 150 毫秒啟動計時器。 事件處理常式使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法，以模擬隨機而變動長度為 50 到 200 毫秒中的工作。 測試方法也會啟動控制執行緒，等待第二個和停止計時器。 如果在處理事件時控制執行緒停止計時器，控制執行緒必須等到完成事件，然後再繼續。  
  
 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法多載用來避免重新進入，並防止控制執行緒正在執行的事件結束為止。 事件處理常式使用<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29>方法，以將控制項設定變數設為 1，但前提是此值目前為零。 這是不可部分完成的作業。 如果傳回的值為零，控制變數已設定為 1，事件處理常式會繼續。 如果傳回的值為非零，會忽略事件以避免重新進入。 (如果它是要執行每個事件，<xref:System.Threading.Monitor>類別會是更好的方式同步處理的事件。)事件處理常式結束時，會將控制變數回設為零。 範例記錄的執行，因為重新進入，已捨棄的而且之後所發生的事件總數<xref:System.Timers.Timer.Stop%2A>呼叫方法。  
  
 控制執行緒使用<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29>方法，以將控制項設定變數設為-1 （減一），但前提是此值目前為零。 不可部分完成的作業會傳回非零，如果目前正在執行一個事件。 控制執行緒等候，而且會嘗試一次。 範例記錄控制執行緒必須等待事件結束的次數。  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Timers.Timer.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</summary>
        <value>
          <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，表示用來封送處理事件處理常式呼叫 (當間隔已經耗盡時所發出) 的物件。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Timers.Timer.SynchronizingObject%2A>是`null`，處理的方法<xref:System.Timers.Timer.Elapsed>系統執行緒集區執行緒上呼叫事件。 如需有關系統執行緒集區的詳細資訊，請參閱<xref:System.Threading.ThreadPool>。  
  
 當<xref:System.Timers.Timer.Elapsed>事件由 visual 的 Windows Form 元件，例如按鈕，存取元件透過系統執行緒集區可能結果的例外狀況，或只是可能會無法運作。 藉由設定避免這種效果<xref:System.Timers.Timer.SynchronizingObject%2A>給 Windows Form 元件時，這會導致處理的方法<xref:System.Timers.Timer.Elapsed>事件建立元件的相同執行緒上呼叫。  
  
> [!NOTE]
>  即使<xref:System.Timers.Timer.SynchronizingObject%2A>屬性不是`null`，<xref:System.Timers.Timer.Elapsed>之後就可能發生的事件<xref:System.Timers.Timer.Dispose%2A>或<xref:System.Timers.Timer.Stop%2A>呼叫方法之後或<xref:System.Timers.Timer.Enabled%2A>屬性已設定為`false`，因為要引發的訊號<xref:System.Timers.Timer.Elapsed>事件一律排入佇列以便在執行緒集區執行緒上執行。 其中一種方式來解決這種競爭情形是設定的旗標的事件處理常式來<xref:System.Timers.Timer.Elapsed>忽略後續事件的事件。  
  
 如果<xref:System.Timers.Timer>在 Windows Form 設計工具中，Visual Studio 內使用<xref:System.Timers.Timer.SynchronizingObject%2A>會自動設定為包含的控制項<xref:System.Timers.Timer>。 例如，如果您將<xref:System.Timers.Timer>的設計工具上`Form1`(繼承自<xref:System.Windows.Forms.Form>)、<xref:System.Timers.Timer.SynchronizingObject%2A>屬性<xref:System.Timers.Timer>設為執行個體`Form1`。  
  
   
  
## Examples  
 下列範例是非常簡單的文字檔案編輯器所做的 Windows Form 應用程式。 當尚未儲存的文字，在文字方塊中時，應用程式會要求使用者在一分鐘的時間間隔是否要儲存文字方塊的內容。  若要這樣做，<xref:System.Timers.Timer.Interval%2A>屬性設定為 1 分鐘 （60000 毫秒為單位），而<xref:System.Timers.Timer.SynchronizingObject%2A>屬性設定為<xref:System.Windows.Forms.Form>物件。  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 這個範例需要下列控制項加入表單：  
  
-   A<xref:System.Windows.Forms.TextBox>控制項，名為`TextBox1`（其預設名稱）。  
  
-   A<xref:System.Windows.Forms.Button>控制項，名為`Button1`（其預設名稱）。  
  
-   A<xref:System.Windows.Forms.SaveFileDialog>控制項，名為`SaveSaveFileDialog1`（其預設名稱）。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>