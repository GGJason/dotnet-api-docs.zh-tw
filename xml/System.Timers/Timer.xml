<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d9b8ff2e88998ea911ef3de2729af2df406ec0ee" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58702533" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1">
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1">
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ba101-101">使用產生週期性事件的選項，在設定的間隔後產生事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-101">Generates an event after a set interval, with an option to generate recurring events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba101-102"><xref:System.Timers.Timer>元件是一個伺服器為基礎的計時器，會引發<xref:System.Timers.Timer.Elapsed>中的毫秒數之後，應用程式中的事件<xref:System.Timers.Timer.Interval%2A>屬性已經過。</span><span class="sxs-lookup"><span data-stu-id="ba101-102">The <xref:System.Timers.Timer> component is a server-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed.</span></span> <span data-ttu-id="ba101-103">您可以設定<xref:System.Timers.Timer>物件以引發此事件一次或重複使用<xref:System.Timers.Timer.AutoReset%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="ba101-103">You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property.</span></span> <span data-ttu-id="ba101-104">一般而言， <xref:System.Timers.Timer> ，讓它保持在範圍，只要有需要物件在類別層級宣告。</span><span class="sxs-lookup"><span data-stu-id="ba101-104">Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed.</span></span> <span data-ttu-id="ba101-105">然後您可以處理其<xref:System.Timers.Timer.Elapsed>提供正常處理的事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-105">You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing.</span></span> <span data-ttu-id="ba101-106">例如，假設您有重要的伺服器，必須保持在執行每週 7 天，每天 24 小時。</span><span class="sxs-lookup"><span data-stu-id="ba101-106">For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</span></span> <span data-ttu-id="ba101-107">您可以建立使用的服務<xref:System.Timers.Timer>來定期檢查伺服器，並確認系統已啟動並執行的物件。</span><span class="sxs-lookup"><span data-stu-id="ba101-107">You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running.</span></span> <span data-ttu-id="ba101-108">如果系統沒有回應，服務可能嘗試重新啟動伺服器，或通知系統管理員。</span><span class="sxs-lookup"><span data-stu-id="ba101-108">If the system is not responding, the service could attempt to restart the server or notify an administrator.</span></span>  
  
> [!IMPORTANT]
> <span data-ttu-id="ba101-109"><xref:System.Timers.Timer>類別不是適用於所有.NET 實作和版本，例如.NET Standard 1.6 和較低版本。</span><span class="sxs-lookup"><span data-stu-id="ba101-109">The <xref:System.Timers.Timer> class is not available for all .NET implementations and versions, such as .NET Standard 1.6 and lower versions.</span></span>
> <span data-ttu-id="ba101-110">在這些情況下，您可以使用<xref:System.Threading.Timer?displayProperty=nameWithType>類別。</span><span class="sxs-lookup"><span data-stu-id="ba101-110">In these cases, you can use the <xref:System.Threading.Timer?displayProperty=nameWithType> class instead.</span></span>
  
 <span data-ttu-id="ba101-111">此類型會實作<xref:System.IDisposable>介面。</span><span class="sxs-lookup"><span data-stu-id="ba101-111">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="ba101-112">當您完成使用型別時，您應該處置它直接或間接。</span><span class="sxs-lookup"><span data-stu-id="ba101-112">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="ba101-113">若要直接處置型別，呼叫其<xref:System.IDisposable.Dispose%2A>方法中的`try` / `catch`區塊。</span><span class="sxs-lookup"><span data-stu-id="ba101-113">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="ba101-114">若要處置它間接，使用的語言建構這類`using`（在 C# 中) 或`Using`（在 Visual Basic)。</span><span class="sxs-lookup"><span data-stu-id="ba101-114">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="ba101-115">如需詳細資訊，請參閱 「 使用物件，實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。</span><span class="sxs-lookup"><span data-stu-id="ba101-115">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="ba101-116">以伺服器為基礎<xref:System.Timers.Timer?displayProperty=nameWithType>類別設計用於與多執行緒環境中的背景工作執行緒。</span><span class="sxs-lookup"><span data-stu-id="ba101-116">The server-based <xref:System.Timers.Timer?displayProperty=nameWithType> class is designed for use with worker threads in a multithreaded environment.</span></span> <span data-ttu-id="ba101-117">伺服器計時器可以在執行緒之間移動處理引發<xref:System.Timers.Timer.Elapsed>事件，導致更精確比中引發事件，在時間上的 Windows 計時器。</span><span class="sxs-lookup"><span data-stu-id="ba101-117">Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.</span></span>  
  
 <span data-ttu-id="ba101-118"><xref:System.Timers.Timer?displayProperty=nameWithType>元件會引發<xref:System.Timers.Timer.Elapsed>的值 （以毫秒為單位） 為依據的事件<xref:System.Timers.Timer.Interval%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="ba101-118">The <xref:System.Timers.Timer?displayProperty=nameWithType> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value (in milliseconds) of the <xref:System.Timers.Timer.Interval%2A> property.</span></span> <span data-ttu-id="ba101-119">您可以處理這個事件來執行您所需要的處理。</span><span class="sxs-lookup"><span data-stu-id="ba101-119">You can handle this event to perform the processing you need.</span></span> <span data-ttu-id="ba101-120">例如，假設您有連續張貼至資料庫的銷售訂單的線上銷售應用程式。</span><span class="sxs-lookup"><span data-stu-id="ba101-120">For example, suppose that you have an online sales application that continuously posts sales orders to a database.</span></span> <span data-ttu-id="ba101-121">訂單，而不是個別處理每筆訂單的批次作業之服務的編譯進行傳送的指示。</span><span class="sxs-lookup"><span data-stu-id="ba101-121">The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</span></span> <span data-ttu-id="ba101-122">您可以使用<xref:System.Timers.Timer>啟動的批次處理序每隔 30 分鐘。</span><span class="sxs-lookup"><span data-stu-id="ba101-122">You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ba101-123">System.Timers.Timer 類別具有相同的解析度，以系統時鐘。</span><span class="sxs-lookup"><span data-stu-id="ba101-123">The System.Timers.Timer class has the same resolution as the system clock.</span></span> <span data-ttu-id="ba101-124">這表示<xref:System.Timers.Timer.Elapsed>將會引發事件，如果系統時鐘的解析度所定義的時間間隔<xref:System.Timers.Timer.Interval%2A>屬性小於系統時鐘的解析度。</span><span class="sxs-lookup"><span data-stu-id="ba101-124">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="ba101-125">如需詳細資訊，請參閱 <xref:System.Timers.Timer.Interval%2A> 屬性 (Property)。</span><span class="sxs-lookup"><span data-stu-id="ba101-125">For more information, see the <xref:System.Timers.Timer.Interval%2A> property.</span></span>  
  
 <span data-ttu-id="ba101-126">當<xref:System.Timers.Timer.AutoReset%2A>設為`false`，則<xref:System.Timers.Timer?displayProperty=nameWithType>物件引發<xref:System.Timers.Timer.Elapsed>事件一次，在第一個之後<xref:System.Timers.Timer.Interval%2A>經過。</span><span class="sxs-lookup"><span data-stu-id="ba101-126">When <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, a <xref:System.Timers.Timer?displayProperty=nameWithType> object raises the <xref:System.Timers.Timer.Elapsed> event only once, after the first <xref:System.Timers.Timer.Interval%2A> has elapsed.</span></span> <span data-ttu-id="ba101-127">若要讓引發<xref:System.Timers.Timer.Elapsed>定期在所定義的間隔事件<xref:System.Timers.Timer.Interval%2A>，將<xref:System.Timers.Timer.AutoReset%2A>到`true`，這是預設值。</span><span class="sxs-lookup"><span data-stu-id="ba101-127">To keep raising the <xref:System.Timers.Timer.Elapsed> event regularly at the interval defined by the <xref:System.Timers.Timer.Interval%2A>, set <xref:System.Timers.Timer.AutoReset%2A> to `true`, which is the default value.</span></span>  
  
 <span data-ttu-id="ba101-128"><xref:System.Timers.Timer>元件會攔截，且會抑制所有的事件處理常式所擲回的例外狀況<xref:System.Timers.Timer.Elapsed>事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-128">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="ba101-129">此行為是在.NET Framework 的未來版本中有所變更。</span><span class="sxs-lookup"><span data-stu-id="ba101-129">This behavior is subject to change in future releases of the .NET Framework.</span></span> <span data-ttu-id="ba101-130">不過請注意，這不是 true，以非同步方式執行，並包含事件處理常式`await`（在 C# 中) 的運算子或`Await`運算子 （Visual Basic 中）。</span><span class="sxs-lookup"><span data-stu-id="ba101-130">Note, however, that this is not true of event handlers that execute asynchronously and include the `await` operator (in C#)  or the `Await` operator (in Visual Basic).</span></span> <span data-ttu-id="ba101-131">在這些事件處理常式中擲回的例外狀況會傳播回呼叫執行緒，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="ba101-131">Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</span></span> <span data-ttu-id="ba101-132">如需有關非同步方法中擲回的例外狀況的詳細資訊，請參閱[例外狀況處理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)。</span><span class="sxs-lookup"><span data-stu-id="ba101-132">For more information on exceptions thrown in asynchronous methods, see   [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 <span data-ttu-id="ba101-133">如果<xref:System.Timers.Timer.SynchronizingObject%2A>屬性是`null`，則<xref:System.Timers.Timer.Elapsed>都會引發事件<xref:System.Threading.ThreadPool>執行緒。</span><span class="sxs-lookup"><span data-stu-id="ba101-133">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`, the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="ba101-134">如果處理<xref:System.Timers.Timer.Elapsed>事件會持續超過<xref:System.Timers.Timer.Interval%2A>，可能會再次引發事件，另一個<xref:System.Threading.ThreadPool>執行緒。</span><span class="sxs-lookup"><span data-stu-id="ba101-134">If processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="ba101-135">在此情況下，事件處理常式應該是可重新進入。</span><span class="sxs-lookup"><span data-stu-id="ba101-135">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ba101-136">事件處理方法可能會在一個執行緒上執行另一個執行緒呼叫的同時<xref:System.Timers.Timer.Stop%2A>方法或設定<xref:System.Timers.Timer.Enabled%2A>屬性設`false`。</span><span class="sxs-lookup"><span data-stu-id="ba101-136">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="ba101-137">這可能會導致<xref:System.Timers.Timer.Elapsed>之後停止計時器引發的事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-137">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="ba101-138">範例程式碼<xref:System.Timers.Timer.Stop%2A>方法顯示若要避免這種競爭情形的方式。</span><span class="sxs-lookup"><span data-stu-id="ba101-138">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="ba101-139">即使<xref:System.Timers.Timer.SynchronizingObject%2A>不是`null`，<xref:System.Timers.Timer.Elapsed>之後就可能發生的事件<xref:System.Timers.Timer.Dispose%2A>或是<xref:System.Timers.Timer.Stop%2A>已呼叫方法之後或<xref:System.Timers.Timer.Enabled%2A>屬性已設定為`false`，因為引發訊號<xref:System.Timers.Timer.Elapsed>事件一律排入佇列以便在執行緒集區執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="ba101-139">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="ba101-140">其中一種方式解決此競爭情形是設定的旗標的事件處理常式來<xref:System.Timers.Timer.Elapsed>忽略後續事件的事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-140">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="ba101-141">如果您使用<xref:System.Timers.Timer?displayProperty=nameWithType>使用者介面項目，例如表單或控制項，而不會在該使用者介面項目，讓計時器類別指派的表單或控制項，其中包含<xref:System.Timers.Timer>到<xref:System.Timers.Timer.SynchronizingObject%2A>屬性，使事件封送處理至使用者介面執行緒。</span><span class="sxs-lookup"><span data-stu-id="ba101-141">If you use the <xref:System.Timers.Timer?displayProperty=nameWithType> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <xref:System.Timers.Timer> to the <xref:System.Timers.Timer.SynchronizingObject%2A> property, so that the event is marshaled to the user interface thread.</span></span>  
  
 <span data-ttu-id="ba101-142">如需執行個體的預設屬性值的清單<xref:System.Timers.Timer>，請參閱<xref:System.Timers.Timer.%23ctor%2A>建構函式。</span><span class="sxs-lookup"><span data-stu-id="ba101-142">For a list of default property values for an instance of <xref:System.Timers.Timer>, see the <xref:System.Timers.Timer.%23ctor%2A> constructor.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="ba101-143">請注意，.NET 包含四個類別，名為`Timer`，每個的提供不同的功能：</span><span class="sxs-lookup"><span data-stu-id="ba101-143">Be aware that .NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>   
> - <span data-ttu-id="ba101-144"><xref:System.Timers.Timer?displayProperty=nameWithType> （本主題）： 定期引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (this topic): fires an event at regular intervals.</span></span> <span data-ttu-id="ba101-145">此類別被為了做為以伺服器為基礎，或在多執行緒環境; 中的服務元件它沒有使用者介面，並在執行階段看不到。</span><span class="sxs-lookup"><span data-stu-id="ba101-145">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="ba101-146"><xref:System.Threading.Timer?displayProperty=nameWithType>： 固定間隔在執行緒集區執行緒上執行單一的回呼方法。</span><span class="sxs-lookup"><span data-stu-id="ba101-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="ba101-147">計時器會具現化，而且無法加以變更，被定義回呼方法。</span><span class="sxs-lookup"><span data-stu-id="ba101-147">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="ba101-148">例如<xref:System.Timers.Timer?displayProperty=nameWithType>類別，這個類別是做為伺服器或服務的元件，在多執行緒環境中用於; 它沒有使用者介面，並在執行階段看不到。</span><span class="sxs-lookup"><span data-stu-id="ba101-148">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="ba101-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (僅限.NET framework): 定期引發事件的 Windows Form 元件。</span><span class="sxs-lookup"><span data-stu-id="ba101-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only): a Windows Forms component that fires an event at regular intervals.</span></span> <span data-ttu-id="ba101-150">該元件沒有使用者介面，是專為用於單一執行緒環境所設計。</span><span class="sxs-lookup"><span data-stu-id="ba101-150">The component has no user interface and is designed for use in a single-threaded environment.</span></span>  
> - <span data-ttu-id="ba101-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (僅限.NET framework): 定期執行非同步或同步網頁回傳的 ASP.NET 元件。</span><span class="sxs-lookup"><span data-stu-id="ba101-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only): an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>  

## Examples  
 <span data-ttu-id="ba101-152">下列範例會具現化`System.Timers.Timer`物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000 毫秒），會設定事件的事件處理常式，並啟動計時器。</span><span class="sxs-lookup"><span data-stu-id="ba101-152">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="ba101-153">事件處理常式顯示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每一次。</span><span class="sxs-lookup"><span data-stu-id="ba101-153">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="ba101-154">任何公用<see langword="static" />這個類型的成員都是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="ba101-154">Any public <see langword="static" /> members of this type are thread safe.</span></span> <span data-ttu-id="ba101-155">不保證任何執行個體成員是安全執行緒。</span><span class="sxs-lookup"><span data-stu-id="ba101-155">Any instance members are not guaranteed to be thread safe.</span></span></threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ba101-156">初始化 <see cref="T:System.Timers.Timer" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba101-156">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba101-157">初始化 <see cref="T:System.Timers.Timer" /> 類別的新執行個體，並將所有屬性設為其初始值。</span><span class="sxs-lookup"><span data-stu-id="ba101-157">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets all the properties to their initial values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba101-158">下表顯示的執行個體的初始屬性值<xref:System.Timers.Timer>。</span><span class="sxs-lookup"><span data-stu-id="ba101-158">The following table shows initial property values for an instance of <xref:System.Timers.Timer>.</span></span>  
  
|<span data-ttu-id="ba101-159">屬性</span><span class="sxs-lookup"><span data-stu-id="ba101-159">Property</span></span>|<span data-ttu-id="ba101-160">Initial value</span><span class="sxs-lookup"><span data-stu-id="ba101-160">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|<span data-ttu-id="ba101-161">100 毫秒</span><span class="sxs-lookup"><span data-stu-id="ba101-161">100 milliseconds</span></span>|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|<span data-ttu-id="ba101-162">null 參考 (在 Visual Basic 中為 `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="ba101-162">A null reference (`Nothing` in Visual Basic).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ba101-163">下列範例會具現化<xref:System.Timers.Timer>物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000年毫秒），會設定事件的事件處理常式，並啟動計時器。</span><span class="sxs-lookup"><span data-stu-id="ba101-163">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="ba101-164">事件處理常式顯示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每一次。</span><span class="sxs-lookup"><span data-stu-id="ba101-164">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberSignature Language="F#" Value="new System.Timers.Timer : double -&gt; System.Timers.Timer" Usage="new System.Timers.Timer interval" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval"><span data-ttu-id="ba101-165">事件與事件之間的時間間隔 (單位為毫秒)。</span><span class="sxs-lookup"><span data-stu-id="ba101-165">The time, in milliseconds, between events.</span></span> <span data-ttu-id="ba101-166">這個值必須大於零，並且小於或等於 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="ba101-166">The value must be greater than zero and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="ba101-167">初始化 <see cref="T:System.Timers.Timer" /> 類別的新執行個體，並將 <see cref="P:System.Timers.Timer.Interval" /> 屬性設定為指定的毫秒數。</span><span class="sxs-lookup"><span data-stu-id="ba101-167">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets the <see cref="P:System.Timers.Timer.Interval" /> property to the specified number of milliseconds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba101-168">這個建構函式設定<xref:System.Timers.Timer.Interval%2A>屬性，將新的計時器執行個體，但不會啟用計時器。</span><span class="sxs-lookup"><span data-stu-id="ba101-168">This constructor sets the <xref:System.Timers.Timer.Interval%2A> property of the new timer instance, but does not enable the timer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba101-169">下列範例會具現化<xref:System.Timers.Timer>物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000年毫秒），會設定事件的事件處理常式，並啟動計時器。</span><span class="sxs-lookup"><span data-stu-id="ba101-169">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="ba101-170">事件處理常式顯示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每一次。</span><span class="sxs-lookup"><span data-stu-id="ba101-170">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ba101-171"><paramref name="interval" /> 參數值會小於或等於零，或者大於 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="ba101-171">The value of the <paramref name="interval" /> parameter is less than or equal to zero, or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoReset : bool with get, set" Usage="System.Timers.Timer.AutoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerAutoReset")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba101-172">取得或設定布林值，表示 <see cref="T:System.Timers.Timer" /> 是否應該只引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件一次 (<see langword="false" />) 或重複 (<see langword="true" />)。</span><span class="sxs-lookup"><span data-stu-id="ba101-172">Gets or sets a Boolean indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once (<see langword="false" />) or repeatedly (<see langword="true" />).</span></span></summary>
        <value><span data-ttu-id="ba101-173">如果 <see cref="T:System.Timers.Timer" /> 應於每次間隔耗盡時引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，則為 <see langword="true" />；如果應該在第一次間隔耗盡後只引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件一次，則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba101-173"><see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event each time the interval elapses; <see langword="false" /> if it should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once, after the first time the interval elapses.</span></span> <span data-ttu-id="ba101-174">預設為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="ba101-174">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba101-175">如果<xref:System.Timers.Timer>已啟用時<xref:System.Timers.Timer.Start%2A>呼叫方法，會重設間隔。</span><span class="sxs-lookup"><span data-stu-id="ba101-175">If the <xref:System.Timers.Timer> is already enabled when the <xref:System.Timers.Timer.Start%2A> method is called, the interval is reset.</span></span> <span data-ttu-id="ba101-176">如果<xref:System.Timers.Timer.AutoReset%2A>已`false`，則<xref:System.Timers.Timer.Start%2A>必須呼叫方法，才能再次開始計數。</span><span class="sxs-lookup"><span data-stu-id="ba101-176">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="ba101-177">重設間隔會影響當<xref:System.Timers.Timer.Elapsed>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-177">Resetting the interval affects when the <xref:System.Timers.Timer.Elapsed> event is raised.</span></span> <span data-ttu-id="ba101-178">例如，如果您設定的間隔為 5 秒，並將<xref:System.Timers.Timer.Enabled%2A>屬性，以`true`，開始時間的計數<xref:System.Timers.Timer.Enabled%2A>設定。</span><span class="sxs-lookup"><span data-stu-id="ba101-178">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="ba101-179">如果您為 10 秒時此計數會是 3 秒，重設間隔<xref:System.Timers.Timer.Elapsed>會引發事件，第一次之後的 13 秒<xref:System.Timers.Timer.Enabled%2A>屬性設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="ba101-179">If you reset the interval to 10 seconds when the count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after the <xref:System.Timers.Timer.Enabled%2A> property was set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba101-180">下列範例會建立<xref:System.Timers.Timer>其<xref:System.Timers.Timer.Elapsed>1.5 秒之後引發的事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-180">The following example creates a <xref:System.Timers.Timer> whose <xref:System.Timers.Timer.Elapsed> event fires after 1.5 seconds.</span></span> <span data-ttu-id="ba101-181">其事件處理常式接著會顯示"Hello World ！"</span><span class="sxs-lookup"><span data-stu-id="ba101-181">Its event handler then displays "Hello World!"</span></span> <span data-ttu-id="ba101-182">在主控台中。</span><span class="sxs-lookup"><span data-stu-id="ba101-182">on the console.</span></span>  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="timer.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba101-183">開始用於表單或為另一個元件所使用之 <see cref="T:System.Timers.Timer" /> 的執行階段初始化。</span><span class="sxs-lookup"><span data-stu-id="ba101-183">Begins the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba101-184">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]設計環境會使用這個方法來開始初始化用於表單或另一個元件所使用的元件。</span><span class="sxs-lookup"><span data-stu-id="ba101-184">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="ba101-185"><xref:System.Timers.Timer.EndInit%2A>方法結束初始化。</span><span class="sxs-lookup"><span data-stu-id="ba101-185">The <xref:System.Timers.Timer.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="ba101-186">使用<xref:System.Timers.Timer.BeginInit%2A>和<xref:System.Timers.Timer.EndInit%2A>方法，防止控制項被完全初始化之前使用。</span><span class="sxs-lookup"><span data-stu-id="ba101-186">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="timer.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba101-187">釋放 <see cref="T:System.Timers.Timer" /> 使用的資源。</span><span class="sxs-lookup"><span data-stu-id="ba101-187">Releases the resources used by the <see cref="T:System.Timers.Timer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba101-188"><xref:System.Timers.Timer.Close%2A>方法會呼叫`Dispose`方法。</span><span class="sxs-lookup"><span data-stu-id="ba101-188">The <xref:System.Timers.Timer.Close%2A> method in turn calls the `Dispose` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="ba101-189"><see langword="true" /> 表示會同時釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</span><span class="sxs-lookup"><span data-stu-id="ba101-189"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="ba101-190">釋放目前 <see cref="T:System.Timers.Timer" /> 所使用的所有資源。</span><span class="sxs-lookup"><span data-stu-id="ba101-190">Releases all resources used by the current <see cref="T:System.Timers.Timer" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberSignature Language="F#" Value="member this.Elapsed : System.Timers.ElapsedEventHandler " Usage="member this.Elapsed : System.Timers.ElapsedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerIntervalElapsed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba101-191">發生於間隔耗盡時。</span><span class="sxs-lookup"><span data-stu-id="ba101-191">Occurs when the interval elapses.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba101-192"><xref:System.Timers.Timer.Elapsed>就會引發事件，如果<xref:System.Timers.Timer.Enabled%2A>屬性是`true`所定義的時間間隔 （以毫秒為單位） 和<xref:System.Timers.Timer.Interval%2A>屬性過了。</span><span class="sxs-lookup"><span data-stu-id="ba101-192">The <xref:System.Timers.Timer.Elapsed> event is raised if the <xref:System.Timers.Timer.Enabled%2A> property is `true` and the time interval (in milliseconds) defined by the <xref:System.Timers.Timer.Interval%2A> property elapses.</span></span> <span data-ttu-id="ba101-193">如果<xref:System.Timers.Timer.AutoReset%2A>屬性是`true`，在所定義的間隔內重複地引發事件<xref:System.Timers.Timer.Interval%2A>屬性; 否則會引發此事件一次，第一次<xref:System.Timers.Timer.Interval%2A>值超過。</span><span class="sxs-lookup"><span data-stu-id="ba101-193">If the <xref:System.Timers.Timer.AutoReset%2A> property is `true`, the event is raised repeatedly at an interval defined by the <xref:System.Timers.Timer.Interval%2A> property; otherwise, the event is raised only once, the first time the <xref:System.Timers.Timer.Interval%2A> value elapses.</span></span>  
  
 <span data-ttu-id="ba101-194">如果<xref:System.Timers.Timer.Interval%2A>之後，會設定<xref:System.Timers.Timer>已啟動，計數會重設。</span><span class="sxs-lookup"><span data-stu-id="ba101-194">If <xref:System.Timers.Timer.Interval%2A> is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="ba101-195">比方說，如果您設定的間隔為 5 秒，並將<xref:System.Timers.Timer.Enabled%2A>要`true`，開始時間的計數<xref:System.Timers.Timer.Enabled%2A>設定。</span><span class="sxs-lookup"><span data-stu-id="ba101-195">For example, if you set the interval to 5 seconds and then set <xref:System.Timers.Timer.Enabled%2A> to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="ba101-196">如果您為 10 秒，當計數為 3 秒，重設間隔<xref:System.Timers.Timer.Elapsed>會引發事件，第一次之後的 13 秒<xref:System.Timers.Timer.Enabled%2A>已設為`true`。</span><span class="sxs-lookup"><span data-stu-id="ba101-196">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="ba101-197">如果<xref:System.Timers.Timer.SynchronizingObject%2A>屬性是`null`，則<xref:System.Timers.Timer.Elapsed>都會引發事件<xref:System.Threading.ThreadPool>執行緒。</span><span class="sxs-lookup"><span data-stu-id="ba101-197">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`,the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="ba101-198">如果在處理<xref:System.Timers.Timer.Elapsed>事件會持續超過<xref:System.Timers.Timer.Interval%2A>，可能會再次引發事件，另一個<xref:System.Threading.ThreadPool>執行緒。</span><span class="sxs-lookup"><span data-stu-id="ba101-198">If the processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="ba101-199">在此情況下，事件處理常式應該是可重新進入。</span><span class="sxs-lookup"><span data-stu-id="ba101-199">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ba101-200">事件處理方法可能會在一個執行緒上執行另一個執行緒呼叫的同時<xref:System.Timers.Timer.Stop%2A>方法或設定<xref:System.Timers.Timer.Enabled%2A>屬性設`false`。</span><span class="sxs-lookup"><span data-stu-id="ba101-200">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="ba101-201">這可能會導致<xref:System.Timers.Timer.Elapsed>之後停止計時器引發的事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-201">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="ba101-202">範例程式碼<xref:System.Timers.Timer.Stop%2A>方法顯示若要避免這種競爭情形的方式。</span><span class="sxs-lookup"><span data-stu-id="ba101-202">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="ba101-203">即使<xref:System.Timers.Timer.SynchronizingObject%2A>不是`null`，<xref:System.Timers.Timer.Elapsed>之後就可能發生的事件<xref:System.Timers.Timer.Dispose%2A>或是<xref:System.Timers.Timer.Stop%2A>已呼叫方法之後或<xref:System.Timers.Timer.Enabled%2A>屬性已設定為`false`，因為引發訊號<xref:System.Timers.Timer.Elapsed>事件一律排入佇列以便在執行緒集區執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="ba101-203">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="ba101-204">其中一種方式解決此競爭情形是設定的旗標的事件處理常式來<xref:System.Timers.Timer.Elapsed>忽略後續事件的事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-204">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="ba101-205"><xref:System.Timers.Timer>元件會攔截，且會抑制所有的事件處理常式所擲回的例外狀況<xref:System.Timers.Timer.Elapsed>事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-205">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="ba101-206">此行為是在.NET Framework 的未來版本中有所變更。</span><span class="sxs-lookup"><span data-stu-id="ba101-206">This behavior is subject to change in future releases of the .NET Framework.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba101-207">下列範例會具現化<xref:System.Timers.Timer>物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000年毫秒），會設定事件的事件處理常式，並啟動計時器。</span><span class="sxs-lookup"><span data-stu-id="ba101-207">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="ba101-208">事件處理常式顯示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每一次。</span><span class="sxs-lookup"><span data-stu-id="ba101-208">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Timers.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerEnabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba101-209">取得或設定值，表示 <see cref="T:System.Timers.Timer" /> 是否應引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-209">Gets or sets a value indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span></span></summary>
        <value><span data-ttu-id="ba101-210">如果 <see cref="T:System.Timers.Timer" /> 應該引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba101-210"><see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ba101-211">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba101-211">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba101-212">設定<xref:System.Timers.Timer.Enabled%2A>要`true`等同於呼叫<xref:System.Timers.Timer.Start%2A>，而設定<xref:System.Timers.Timer.Enabled%2A>來`false`等同於呼叫<xref:System.Timers.Timer.Stop%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba101-212">Setting <xref:System.Timers.Timer.Enabled%2A> to `true` is the same as calling <xref:System.Timers.Timer.Start%2A>, while setting <xref:System.Timers.Timer.Enabled%2A> to `false` is the same as calling <xref:System.Timers.Timer.Stop%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ba101-213">要引發的訊號<xref:System.Timers.Timer.Elapsed>事件永遠執行排入佇列<xref:System.Threading.ThreadPool>執行緒。</span><span class="sxs-lookup"><span data-stu-id="ba101-213">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="ba101-214">這可能會導致<xref:System.Timers.Timer.Elapsed>事件引發之後<xref:System.Timers.Timer.Enabled%2A>屬性設定為`false`。</span><span class="sxs-lookup"><span data-stu-id="ba101-214">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Enabled%2A> property is set to `false`.</span></span> <span data-ttu-id="ba101-215">程式碼範例<xref:System.Timers.Timer.Stop%2A>方法顯示若要解決此競爭情形的方式。</span><span class="sxs-lookup"><span data-stu-id="ba101-215">The code example for the <xref:System.Timers.Timer.Stop%2A> method shows one way to work around this race condition.</span></span>  
  
 <span data-ttu-id="ba101-216">如果<xref:System.Timers.Timer.Enabled%2A>設為`true`並<xref:System.Timers.Timer.AutoReset%2A>設為`false`，則<xref:System.Timers.Timer>引發<xref:System.Timers.Timer.Elapsed>事件一次，第一次間隔耗盡。</span><span class="sxs-lookup"><span data-stu-id="ba101-216">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span>  
  
 <span data-ttu-id="ba101-217">如果之後設定的間隔時間<xref:System.Timers.Timer>已啟動，計數會重設。</span><span class="sxs-lookup"><span data-stu-id="ba101-217">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="ba101-218">例如，如果您設定的間隔為 5 秒，並將<xref:System.Timers.Timer.Enabled%2A>屬性，以`true`，開始時間的計數<xref:System.Timers.Timer.Enabled%2A>設定。</span><span class="sxs-lookup"><span data-stu-id="ba101-218">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="ba101-219">如果您為 10 秒，當計數為 3 秒，重設間隔<xref:System.Timers.Timer.Elapsed>會引發事件，第一次之後的 13 秒<xref:System.Timers.Timer.Enabled%2A>已設為`true`。</span><span class="sxs-lookup"><span data-stu-id="ba101-219">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ba101-220">視覺化的設計工具，例如 Microsoft Visual Studio 中設定<xref:System.Timers.Timer.Enabled%2A>屬性，以`true`時插入新<xref:System.Timers.Timer>。</span><span class="sxs-lookup"><span data-stu-id="ba101-220">Some visual designers, such as those in Microsoft Visual Studio, set the <xref:System.Timers.Timer.Enabled%2A> property to `true` when inserting a new <xref:System.Timers.Timer>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba101-221">下列範例會具現化<xref:System.Timers.Timer>物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000年毫秒），會設定事件的事件處理常式，並啟動計時器。</span><span class="sxs-lookup"><span data-stu-id="ba101-221">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="ba101-222">事件處理常式顯示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每一次。</span><span class="sxs-lookup"><span data-stu-id="ba101-222">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="ba101-223">無法設定這個屬性，因為計時器已處置。</span><span class="sxs-lookup"><span data-stu-id="ba101-223">This property cannot be set because the timer has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ba101-224">啟用計時器之前，<see cref="P:System.Timers.Timer.Interval" /> 屬性已設定為大於 <see cref="F:System.Int32.MaxValue" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="ba101-224">The <see cref="P:System.Timers.Timer.Interval" /> property was set to a value greater than <see cref="F:System.Int32.MaxValue" /> before the timer was enabled.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="timer.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba101-225">結束用於表單或為另一個元件所使用之 <see cref="T:System.Timers.Timer" /> 的執行階段初始化。</span><span class="sxs-lookup"><span data-stu-id="ba101-225">Ends the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba101-226">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]設計環境會使用這個方法來結束初始化用於表單或另一個元件所使用的元件。</span><span class="sxs-lookup"><span data-stu-id="ba101-226">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="ba101-227"><xref:System.Timers.Timer.BeginInit%2A>方法會啟動初始化。</span><span class="sxs-lookup"><span data-stu-id="ba101-227">The <xref:System.Timers.Timer.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="ba101-228">使用<xref:System.Timers.Timer.BeginInit%2A>和<xref:System.Timers.Timer.EndInit%2A>方法，防止控制項被完全初始化之前使用。</span><span class="sxs-lookup"><span data-stu-id="ba101-228">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Timers.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerInterval")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba101-229">取得或設定引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的間隔 (以毫秒為單位)。</span><span class="sxs-lookup"><span data-stu-id="ba101-229">Gets or sets the interval, expressed in milliseconds, at which to raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span></span></summary>
        <value><span data-ttu-id="ba101-230"><see cref="E:System.Timers.Timer.Elapsed" /> 事件之間的時間間隔 (以毫秒為單位)。</span><span class="sxs-lookup"><span data-stu-id="ba101-230">The time, in milliseconds, between <see cref="E:System.Timers.Timer.Elapsed" /> events.</span></span> <span data-ttu-id="ba101-231">這個值必須大於零，並且小於或等於 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="ba101-231">The value must be greater than zero, and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span> <span data-ttu-id="ba101-232">預設為 100 毫秒。</span><span class="sxs-lookup"><span data-stu-id="ba101-232">The default is 100 milliseconds.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba101-233">您使用<xref:System.Timers.Timer.Interval%2A>屬性來判斷的頻率<xref:System.Timers.Timer.Elapsed>引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-233">You use the <xref:System.Timers.Timer.Interval%2A> property to determine the frequency at which the <xref:System.Timers.Timer.Elapsed> event is fired.</span></span> <span data-ttu-id="ba101-234">因為<xref:System.Timers.Timer>類別取決於系統時鐘，它具有相同的解析度，以系統時鐘。</span><span class="sxs-lookup"><span data-stu-id="ba101-234">Because the <xref:System.Timers.Timer> class depends on the system clock, it has the same resolution as the system clock.</span></span> <span data-ttu-id="ba101-235">這表示<xref:System.Timers.Timer.Elapsed>將會引發事件，如果系統時鐘的解析度所定義的時間間隔<xref:System.Timers.Timer.Interval%2A>屬性小於系統時鐘的解析度。</span><span class="sxs-lookup"><span data-stu-id="ba101-235">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="ba101-236">下列範例會設定<xref:System.Timers.Timer.Interval%2A>5 毫秒的屬性。</span><span class="sxs-lookup"><span data-stu-id="ba101-236">The following example sets the <xref:System.Timers.Timer.Interval%2A> property to 5 milliseconds.</span></span> <span data-ttu-id="ba101-237">在上執行時[!INCLUDE[win7](~/includes/win7-md.md)]其系統時鐘的解析度大約 15 毫秒，引發事件的大約每隔 15 毫秒，而不是每隔 5 毫秒的系統。</span><span class="sxs-lookup"><span data-stu-id="ba101-237">When run on a [!INCLUDE[win7](~/includes/win7-md.md)] system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 <span data-ttu-id="ba101-238">若要判斷目前的系統上的系統時鐘的解析度，您可以使用下列程式碼：</span><span class="sxs-lookup"><span data-stu-id="ba101-238">You can use the following code to determine the resolution of the system clock on the current system:</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 <span data-ttu-id="ba101-239">如果您的應用程式需要比所提供更高的解析度<xref:System.Timers.Timer>類別或系統時鐘，使用高解析度的多媒體計時器，請參閱[How to:使用高解析度計時器](https://msdn.microsoft.com/library/aa964692.aspx)。</span><span class="sxs-lookup"><span data-stu-id="ba101-239">If your app requires greater resolution than that offered by the <xref:System.Timers.Timer> class or the system clock, use the high-resolution multimedia timers; see [How to: Use the High-Resolution Timer](https://msdn.microsoft.com/library/aa964692.aspx).</span></span>  
  
 <span data-ttu-id="ba101-240">如果之後設定的間隔時間<xref:System.Timers.Timer>已啟動，計數會重設。</span><span class="sxs-lookup"><span data-stu-id="ba101-240">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="ba101-241">例如，如果您設定的間隔為 5 秒，並將<xref:System.Timers.Timer.Enabled%2A>屬性，以`true`，開始時間的計數<xref:System.Timers.Timer.Enabled%2A>設定。</span><span class="sxs-lookup"><span data-stu-id="ba101-241">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="ba101-242">如果您為 10 秒，當計數為 3 秒，重設間隔<xref:System.Timers.Timer.Elapsed>會引發事件，第一次之後的 13 秒<xref:System.Timers.Timer.Enabled%2A>已設為`true`。</span><span class="sxs-lookup"><span data-stu-id="ba101-242">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="ba101-243">如果<xref:System.Timers.Timer.Enabled%2A>設為`true`並<xref:System.Timers.Timer.AutoReset%2A>設為`false`，則<xref:System.Timers.Timer>引發<xref:System.Timers.Timer.Elapsed>事件一次，第一次間隔耗盡。</span><span class="sxs-lookup"><span data-stu-id="ba101-243">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="ba101-244"><xref:System.Timers.Timer.Enabled%2A> 然後將設定為`false`。</span><span class="sxs-lookup"><span data-stu-id="ba101-244"><xref:System.Timers.Timer.Enabled%2A> is then set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ba101-245">如果<xref:System.Timers.Timer.Enabled%2A>並<xref:System.Timers.Timer.AutoReset%2A>都設為`false`，和計時器先前已啟用，設定<xref:System.Timers.Timer.Interval%2A>屬性會導致<xref:System.Timers.Timer.Elapsed>事件引發一次，如同<xref:System.Timers.Timer.Enabled%2A>屬性已設定為`true`.</span><span class="sxs-lookup"><span data-stu-id="ba101-245">If <xref:System.Timers.Timer.Enabled%2A> and <xref:System.Timers.Timer.AutoReset%2A> are both set to `false`, and the timer has previously been enabled, setting the <xref:System.Timers.Timer.Interval%2A> property causes the <xref:System.Timers.Timer.Elapsed> event to be raised once, as if the <xref:System.Timers.Timer.Enabled%2A> property had been set to `true`.</span></span> <span data-ttu-id="ba101-246">若要設定的間隔，而不會引發事件，您可以暫時設定<xref:System.Timers.Timer.Enabled%2A>屬性，以`true`，將<xref:System.Timers.Timer.Interval%2A>屬性所需的時間間隔，然後立即將<xref:System.Timers.Timer.Enabled%2A>屬性回`false`。</span><span class="sxs-lookup"><span data-stu-id="ba101-246">To set the interval without raising the event, you can temporarily set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, set the <xref:System.Timers.Timer.Interval%2A> property to the desired time interval, and then immediately set the <xref:System.Timers.Timer.Enabled%2A> property back to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba101-247">下列範例會具現化<xref:System.Timers.Timer>物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000年毫秒），會設定事件的事件處理常式，並啟動計時器。</span><span class="sxs-lookup"><span data-stu-id="ba101-247">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="ba101-248">事件處理常式顯示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每一次。</span><span class="sxs-lookup"><span data-stu-id="ba101-248">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ba101-249">間隔是小於或等於零。</span><span class="sxs-lookup"><span data-stu-id="ba101-249">The interval is less than or equal to zero.</span></span>  
  
<span data-ttu-id="ba101-250">-或-</span><span class="sxs-lookup"><span data-stu-id="ba101-250">-or-</span></span> 
<span data-ttu-id="ba101-251">間隔大於 <see cref="F:System.Int32.MaxValue" />，且計時器目前已啟用。</span><span class="sxs-lookup"><span data-stu-id="ba101-251">The interval is greater than <see cref="F:System.Int32.MaxValue" />, and the timer is currently enabled.</span></span> <span data-ttu-id="ba101-252">(如果目前沒有啟用計數器，則在計數器變成啟用狀態之前，不會擲回例外狀況)。</span><span class="sxs-lookup"><span data-stu-id="ba101-252">(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</span></span></exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Timers.Timer.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba101-253">取得或設定在設計模式中繫結 <see cref="T:System.Timers.Timer" /> 到其容器的站台。</span><span class="sxs-lookup"><span data-stu-id="ba101-253">Gets or sets the site that binds the <see cref="T:System.Timers.Timer" /> to its container in design mode.</span></span></summary>
        <value><span data-ttu-id="ba101-254"><see cref="T:System.ComponentModel.ISite" /> 介面，代表繫結 <see cref="T:System.Timers.Timer" /> 物件到其容器的站台。</span><span class="sxs-lookup"><span data-stu-id="ba101-254">An <see cref="T:System.ComponentModel.ISite" /> interface representing the site that binds the <see cref="T:System.Timers.Timer" /> object to its container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba101-255">站台繫結<xref:System.ComponentModel.Component>至<xref:System.ComponentModel.Container>和啟用它們，之間的通訊，以及提供容器以管理其元件的方式。</span><span class="sxs-lookup"><span data-stu-id="ba101-255">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as providing a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba101-256">將 <see cref="P:System.Timers.Timer.Enabled" /> 設定為 <see langword="true" />，開始引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-256">Starts raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba101-257">如果<xref:System.Timers.Timer.Start%2A>稱為並<xref:System.Timers.Timer.AutoReset%2A>設為`false`，則<xref:System.Timers.Timer>引發<xref:System.Timers.Timer.Elapsed>事件一次，第一次間隔耗盡。</span><span class="sxs-lookup"><span data-stu-id="ba101-257">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="ba101-258">如果<xref:System.Timers.Timer.Start%2A>稱為並<xref:System.Timers.Timer.AutoReset%2A>是`true`，則<xref:System.Timers.Timer>引發<xref:System.Timers.Timer.Elapsed>事件第一個時間間隔結束，並繼續依照指定的時間間隔引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-258">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is `true`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event the first time the interval elapses and continues to raise the event on the specified interval.</span></span>  
  
 <span data-ttu-id="ba101-259">您也可以藉由設定開始計時<xref:System.Timers.Timer.Enabled%2A>至`true`。</span><span class="sxs-lookup"><span data-stu-id="ba101-259">You can also start timing by setting <xref:System.Timers.Timer.Enabled%2A> to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ba101-260">如果<xref:System.Timers.Timer.AutoReset%2A>已`false`，則<xref:System.Timers.Timer.Start%2A>必須呼叫方法，才能再次開始計數。</span><span class="sxs-lookup"><span data-stu-id="ba101-260">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="ba101-261">呼叫<xref:System.Timers.Timer.Start%2A>方法啟用計時器時沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="ba101-261">A call to the <xref:System.Timers.Timer.Start%2A> method when the timer is enabled has no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ba101-262"><see cref="T:System.Timers.Timer" /> 是使用等於或大於 <see cref="F:System.Int32.MaxValue" /> + 1 的間隔所建立，或設為小於零的間隔。</span><span class="sxs-lookup"><span data-stu-id="ba101-262">The <see cref="T:System.Timers.Timer" /> is created with an interval equal to or greater than <see cref="F:System.Int32.MaxValue" /> + 1, or set to an interval less than zero.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba101-263">將 <see cref="P:System.Timers.Timer.Enabled" /> 設定為 <see langword="false" />，停止引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-263">Stops raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="false" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba101-264">您也可以藉由設定停止計時<xref:System.Timers.Timer.Enabled%2A>至`false`。</span><span class="sxs-lookup"><span data-stu-id="ba101-264">You can also stop timing by setting <xref:System.Timers.Timer.Enabled%2A> to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ba101-265">要引發的訊號<xref:System.Timers.Timer.Elapsed>事件永遠執行排入佇列<xref:System.Threading.ThreadPool>執行緒，因此事件處理方法可能會在相同的一個執行緒上執行的時間呼叫<xref:System.Timers.Timer.Stop%2A>另一個執行緒上執行的方法。</span><span class="sxs-lookup"><span data-stu-id="ba101-265">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A> method runs on another thread.</span></span> <span data-ttu-id="ba101-266">這可能會導致<xref:System.Timers.Timer.Elapsed>事件引發之後<xref:System.Timers.Timer.Stop%2A>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="ba101-266">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called.</span></span> <span data-ttu-id="ba101-267">在下一節中的程式碼範例示範一種方法解決這種競爭狀況。</span><span class="sxs-lookup"><span data-stu-id="ba101-267">The code example in the next section shows one way to work around this race condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba101-268">下列範例會具現化`System.Timers.Timer`物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000 毫秒），會設定事件的事件處理常式，並啟動計時器。</span><span class="sxs-lookup"><span data-stu-id="ba101-268">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="ba101-269">事件處理常式顯示的值<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每一次。</span><span class="sxs-lookup"><span data-stu-id="ba101-269">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span> <span data-ttu-id="ba101-270">當使用者按下 Enter 鍵時，應用程式會呼叫<xref:System.Timers.Timer.Stop%2A>方法，然後再結束應用程式。</span><span class="sxs-lookup"><span data-stu-id="ba101-270">When the user presses the Enter key, the application calls the  <xref:System.Timers.Timer.Stop%2A> method before terminating the application.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 <span data-ttu-id="ba101-271">下列程式碼範例示範一個辦法避免呼叫的執行緒<xref:System.Timers.Timer.Stop%2A>方法，從繼續直到目前執行<xref:System.Timers.Timer.Elapsed>事件才會結束，並也避免兩個<xref:System.Timers.Timer.Elapsed>從執行於相同的事件處理常式的事件（通常稱為 「 重新進入 」） 的時間。</span><span class="sxs-lookup"><span data-stu-id="ba101-271">The following code example shows one way to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from continuing until a currently executing <xref:System.Timers.Timer.Elapsed> event ends, and also to prevent two <xref:System.Timers.Timer.Elapsed> events from executing the event handler at the same time (often referred to as reentrancy).</span></span>  
  
 <span data-ttu-id="ba101-272">此範例會執行 100 的測試回合。</span><span class="sxs-lookup"><span data-stu-id="ba101-272">The example executes 100 test runs.</span></span> <span data-ttu-id="ba101-273">每次執行測試時，計時器會開始使用間隔 150 的毫秒數。</span><span class="sxs-lookup"><span data-stu-id="ba101-273">Each time the test is run, the timer is started with an interval of 150 milliseconds.</span></span> <span data-ttu-id="ba101-274">事件處理常式使用<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法以模擬隨機不同長度 50 到 200 毫秒中的工作。</span><span class="sxs-lookup"><span data-stu-id="ba101-274">The event handler uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to simulate a task that randomly varies in length from 50 to 200 milliseconds.</span></span> <span data-ttu-id="ba101-275">測試方法也會啟動控制執行緒等待一秒，則會停止計時器。</span><span class="sxs-lookup"><span data-stu-id="ba101-275">The test method also starts a control thread that waits for a second and then stops the timer.</span></span> <span data-ttu-id="ba101-276">如果控制執行緒停止計時器時正在處理的事件，控制執行緒必須等待，直到事件完成時，再繼續進行。</span><span class="sxs-lookup"><span data-stu-id="ba101-276">If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.</span></span>  
  
 <span data-ttu-id="ba101-277"><xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>以避免重新進入，並阻止控制執行緒繼續執行之前執行的活動結束，則會使用方法多載。</span><span class="sxs-lookup"><span data-stu-id="ba101-277">The <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends.</span></span> <span data-ttu-id="ba101-278">事件處理常式使用<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29>方法，以將控制項設定變數設為 1，但前提是目前的值為零。</span><span class="sxs-lookup"><span data-stu-id="ba101-278">The event handler uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set a control variable to 1, but only if the value is currently zero.</span></span> <span data-ttu-id="ba101-279">這是不可部分完成的作業。</span><span class="sxs-lookup"><span data-stu-id="ba101-279">This is an atomic operation.</span></span> <span data-ttu-id="ba101-280">如果傳回的值為零，控制變數已設為 1，事件處理常式會繼續。</span><span class="sxs-lookup"><span data-stu-id="ba101-280">If the return value is zero, the control variable has been set to 1 and the event handler proceeds.</span></span> <span data-ttu-id="ba101-281">如果傳回的值為非零，會忽略事件以避免重新進入。</span><span class="sxs-lookup"><span data-stu-id="ba101-281">If the return value is non-zero, the event is simply discarded to avoid reentrancy.</span></span> <span data-ttu-id="ba101-282">(所需執行每一個事件，就好像<xref:System.Threading.Monitor>類別會是更好的方式同步處理的事件。)事件處理常式結束時，會將控制變數回設為零。</span><span class="sxs-lookup"><span data-stu-id="ba101-282">(If it were necessary to execute every event, the <xref:System.Threading.Monitor> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero.</span></span> <span data-ttu-id="ba101-283">範例記錄的執行，因為重新進入，已捨棄的而且之後所發生的事件總數<xref:System.Timers.Timer.Stop%2A>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="ba101-283">The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the <xref:System.Timers.Timer.Stop%2A> method was called.</span></span>  
  
 <span data-ttu-id="ba101-284">控制執行緒會使用<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29>方法，以將控制項設定變數設為-1 （減一），但前提是目前的值為零。</span><span class="sxs-lookup"><span data-stu-id="ba101-284">The control thread uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set the control variable to -1 (minus one), but only if the value is currently zero.</span></span> <span data-ttu-id="ba101-285">如果不可部分完成的作業會傳回非零，正在執行的事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-285">If the atomic operation returns non-zero, an event is currently executing.</span></span> <span data-ttu-id="ba101-286">控制執行緒會等候，然後重試。</span><span class="sxs-lookup"><span data-stu-id="ba101-286">The control thread waits and tries again.</span></span> <span data-ttu-id="ba101-287">此範例會記錄控制執行緒必須等待事件結束的次數。</span><span class="sxs-lookup"><span data-stu-id="ba101-287">The example records the number of times the control thread had to wait for an event to finish.</span></span>  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Timers.Timer.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerSynchronizingObject")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba101-288">取得或設定物件，用來封送處理事件處理常式的呼叫 (當間隔已經耗盡時所發出)。</span><span class="sxs-lookup"><span data-stu-id="ba101-288">Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</span></span></summary>
        <value><span data-ttu-id="ba101-289"><see cref="T:System.ComponentModel.ISynchronizeInvoke" />，表示用來封送處理事件處理常式呼叫 (當間隔已經耗盡時所發出) 的物件。</span><span class="sxs-lookup"><span data-stu-id="ba101-289">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</span></span> <span data-ttu-id="ba101-290">預設為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ba101-290">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba101-291">當<xref:System.Timers.Timer.SynchronizingObject%2A>已`null`，處理的方法<xref:System.Timers.Timer.Elapsed>系統執行緒集區的執行緒上呼叫事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-291">When <xref:System.Timers.Timer.SynchronizingObject%2A> is `null`, the method that handles the <xref:System.Timers.Timer.Elapsed> event is called on a thread from the system-thread pool.</span></span> <span data-ttu-id="ba101-292">如需有關系統執行緒集區的詳細資訊，請參閱<xref:System.Threading.ThreadPool>。</span><span class="sxs-lookup"><span data-stu-id="ba101-292">For more information on system-thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="ba101-293">當<xref:System.Timers.Timer.Elapsed>事件由 visual 的 Windows Form 元件，例如按鈕，存取元件透過系統執行緒集區可能結果的例外狀況，或只是可能會無法運作。</span><span class="sxs-lookup"><span data-stu-id="ba101-293">When the <xref:System.Timers.Timer.Elapsed> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</span></span> <span data-ttu-id="ba101-294">設定，以避免這種效果<xref:System.Timers.Timer.SynchronizingObject%2A>至 Windows Form 元件，這會導致方法處理<xref:System.Timers.Timer.Elapsed>元件建立的相同執行緒上呼叫的事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-294">Avoid this effect by setting <xref:System.Timers.Timer.SynchronizingObject%2A> to a Windows Forms component, which causes the method that handles the <xref:System.Timers.Timer.Elapsed> event to be called on the same thread that the component was created on.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ba101-295">即使<xref:System.Timers.Timer.SynchronizingObject%2A>屬性不是`null`，<xref:System.Timers.Timer.Elapsed>之後就可能發生的事件<xref:System.Timers.Timer.Dispose%2A>或是<xref:System.Timers.Timer.Stop%2A>已呼叫方法之後或<xref:System.Timers.Timer.Enabled%2A>屬性設`false`，因為要引發的訊號<xref:System.Timers.Timer.Elapsed>事件一律排入佇列以便在執行緒集區執行緒上執行。</span><span class="sxs-lookup"><span data-stu-id="ba101-295">Even if the <xref:System.Timers.Timer.SynchronizingObject%2A> property is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="ba101-296">其中一種方式解決此競爭情形是設定的旗標的事件處理常式來<xref:System.Timers.Timer.Elapsed>忽略後續事件的事件。</span><span class="sxs-lookup"><span data-stu-id="ba101-296">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="ba101-297">如果<xref:System.Timers.Timer>在 Windows Form 設計工具中，Visual Studio 內使用<xref:System.Timers.Timer.SynchronizingObject%2A>會自動設為包含的控制項<xref:System.Timers.Timer>。</span><span class="sxs-lookup"><span data-stu-id="ba101-297">If the <xref:System.Timers.Timer> is used inside Visual Studio in a Windows Forms designer, <xref:System.Timers.Timer.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Timers.Timer>.</span></span> <span data-ttu-id="ba101-298">比方說，如果您將放<xref:System.Timers.Timer>設計工具上`Form1`(繼承自<xref:System.Windows.Forms.Form>)，則<xref:System.Timers.Timer.SynchronizingObject%2A>屬性<xref:System.Timers.Timer>設定為執行個體`Form1`。</span><span class="sxs-lookup"><span data-stu-id="ba101-298">For example, if you place a <xref:System.Timers.Timer> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>), the <xref:System.Timers.Timer.SynchronizingObject%2A> property of <xref:System.Timers.Timer> is set to the instance of `Form1`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba101-299">下列範例是非常簡單的文字檔案編輯器所做的 Windows Forms 應用程式。</span><span class="sxs-lookup"><span data-stu-id="ba101-299">The following example is a Windows Forms app that serves as a very simple text file editor.</span></span> <span data-ttu-id="ba101-300">當尚未儲存的文字在文字方塊中時，應用程式會要求使用者在一分鐘的時間間隔是否要儲存文字方塊的內容。</span><span class="sxs-lookup"><span data-stu-id="ba101-300">When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.</span></span>  <span data-ttu-id="ba101-301">若要這樣做，請<xref:System.Timers.Timer.Interval%2A>屬性設定為一分鐘 （60000 毫秒），而<xref:System.Timers.Timer.SynchronizingObject%2A>屬性設定為<xref:System.Windows.Forms.Form>物件。</span><span class="sxs-lookup"><span data-stu-id="ba101-301">To do this, the <xref:System.Timers.Timer.Interval%2A> property is set to one minute (60,000 milliseconds), and the <xref:System.Timers.Timer.SynchronizingObject%2A> property is set to the <xref:System.Windows.Forms.Form> object.</span></span>  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 <span data-ttu-id="ba101-302">這個範例需要將下列控制項新增至表單：</span><span class="sxs-lookup"><span data-stu-id="ba101-302">The example requires that you add the following controls to the form:</span></span>  
  
-   <span data-ttu-id="ba101-303">A<xref:System.Windows.Forms.TextBox>控制項，名為`TextBox1`（其預設名稱）。</span><span class="sxs-lookup"><span data-stu-id="ba101-303">A <xref:System.Windows.Forms.TextBox> control named `TextBox1` (its default name).</span></span>  
  
-   <span data-ttu-id="ba101-304">A<xref:System.Windows.Forms.Button>控制項，名為`Button1`（其預設名稱）。</span><span class="sxs-lookup"><span data-stu-id="ba101-304">A <xref:System.Windows.Forms.Button> control named `Button1` (its default name).</span></span>  
  
-   <span data-ttu-id="ba101-305">A<xref:System.Windows.Forms.SaveFileDialog>控制項，名為`SaveSaveFileDialog1`（其預設名稱）。</span><span class="sxs-lookup"><span data-stu-id="ba101-305">A <xref:System.Windows.Forms.SaveFileDialog> control named `SaveSaveFileDialog1` (its default name) .</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>