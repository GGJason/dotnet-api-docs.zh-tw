<Type Name="ElapsedEventArgs" FullName="System.Timers.ElapsedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="72a34db2282a94779876af67262c3fe6f5b4dcb3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36406134" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ElapsedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ElapsedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Timers.ElapsedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ElapsedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ElapsedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ElapsedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的資料。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會具現化<xref:System.Timers.Timer>物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000年毫秒為單位），設定事件的事件處理常式，並啟動計時器。 此事件處理常式的值顯示<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每次。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SignalTime">
      <MemberSignature Language="C#" Value="public DateTime SignalTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime SignalTime" />
      <MemberSignature Language="DocId" Value="P:System.Timers.ElapsedEventArgs.SignalTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignalTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime SignalTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.SignalTime : DateTime" Usage="System.Timers.ElapsedEventArgs.SignalTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當 <see cref="E:System.Timers.Timer.Elapsed" /> 事件引發時，取得日期/時間。</summary>
        <value>
          <see cref="E:System.Timers.Timer.Elapsed" /> 事件所引發的時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件會在引發<xref:System.Threading.ThreadPool>執行緒，因此事件處理方法可能會在相同執行緒上執行的時間，呼叫<xref:System.Timers.Timer.Stop%2A?displayProperty=nameWithType>另一個執行緒上執行的方法。 這可能會導致<xref:System.Timers.Timer.Elapsed>之後所引發事件<xref:System.Timers.Timer.Stop%2A>方法呼叫。 無法防止這種競爭情形，只是藉由比較<xref:System.Timers.ElapsedEventArgs.SignalTime%2A>屬性的時間時<xref:System.Timers.Timer.Stop%2A>呼叫方法，因為事件處理方法可能已經被執行時<xref:System.Timers.Timer.Stop%2A>方法呼叫時，或可能會開始執行之間時<xref:System.Timers.Timer.Stop%2A>方法呼叫和停止時間儲存時的時間。 它是很重要，以避免呼叫的執行緒<xref:System.Timers.Timer.Stop%2A>方法繼續時仍在執行事件處理方法，使用更強固的同步處理機制，例如<xref:System.Threading.Monitor>類別或<xref:System.Threading.Interlocked.CompareExchange%2A>方法。 使用程式碼<xref:System.Threading.Interlocked.CompareExchange%2A>方法可以在範例中找到<xref:System.Timers.Timer.Stop%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列範例會具現化<xref:System.Timers.Timer>物件，就會引發其<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>事件每隔兩秒鐘 （2000年毫秒為單位），設定事件的事件處理常式，並啟動計時器。 此事件處理常式的值顯示<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>屬性會引發此事件每次。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.Stop" />
      </Docs>
    </Member>
  </Members>
</Type>