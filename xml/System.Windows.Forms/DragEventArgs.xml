<Type Name="DragEventArgs" FullName="System.Windows.Forms.DragEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="36617700af2104e254aac0c99fbca2f634f0d425" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30640252" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DragEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DragEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DragEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DragEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DragEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供 <see cref="E:System.Windows.Forms.Control.DragDrop" />、<see cref="E:System.Windows.Forms.Control.DragEnter" /> 或 <see cref="E:System.Windows.Forms.Control.DragOver" /> 事件的資料。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.DragDrop>使用者完成拖曳至控制項的物件，然後拖曳至其控制項透過放開滑鼠按鈕拖放作業時，就會發生事件。 <xref:System.Windows.Forms.Control.DragEnter>使用者移動滑鼠指標拖曳至控制項的物件，使用滑鼠拖曳指標時，就會發生事件。 <xref:System.Windows.Forms.Control.DragOver>事件發生於使用者拖曳的物件，使用滑鼠時將滑鼠指標移到控制項。  
  
 A<xref:System.Windows.Forms.DragEventArgs>物件會指定與此事件相關聯的任何資料; SHIFT、 CTRL 和 ALT 鍵的目前狀態的位置，滑鼠指標; 以及來源和目標的拖曳事件所允許的拖放效果。  
  
 事件模型的相關資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列範例會示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。 範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>時拖曳動作開始的方法。 如果已移動滑鼠拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來決定要在拖曳的項目索引`MouseDown`事件。  
  
 此範例也示範如何使用自訂游標拖放作業。 這個範例假設有兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`、 自訂拖放到的應用程式目錄，存在於和不置放資料指標，分別。 如果使用自訂游標`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。 自訂的資料指標中所設定<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。  
  
 鍵盤的狀態會在評估<xref:System.Windows.Forms.Control.DragOver>右邊的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵的狀態。 中的位置`ListBox`期間也決定會卸除`DragOver`事件。 如果要卸除的資料不是`String`，然後在<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要提供的權限卸除資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`中適當的位置加入值`ListBox`。 如果在拖曳作業移動超出界限的表單，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。  
  
 此程式碼摘錄示範如何使用<xref:System.Windows.Forms.DragEventArgs>類別。 請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整程式碼範例的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 下列範例說明如何<xref:System.Windows.Forms.DragEventArgs>拖放作業的目標與來源之間傳遞。 在此範例中，<xref:System.Windows.Forms.ListBox>控制項做為來源的資料，而<xref:System.Windows.Forms.RichTextBox>控制項做為目標。 此範例假設<xref:System.Windows.Forms.ListBox>控制項已填入有效的檔案名稱的清單。 當使用者拖曳其中一個顯示的檔名從<xref:System.Windows.Forms.ListBox>控制項拖曳至<xref:System.Windows.Forms.RichTextBox>控制項，檔名中參照的檔案會開啟。  
  
 在起始操作<xref:System.Windows.Forms.ListBox>控制項的 MouseDown 事件。 在<xref:System.Windows.Forms.RichTextBox.DragEnter>事件處理常式，此範例會使用<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>方法以驗證資料的格式，<xref:System.Windows.Forms.RichTextBox>控制項可以顯示，然後設定<xref:System.Windows.Forms.DragDropEffects>屬性來指定資料應該複製從原始檔控制目標控制項。 最後，<xref:System.Windows.Forms.RichTextBox>控制項的拖放事件處理常式使用<xref:System.Windows.Forms.IDataObject.GetData%2A>方法來擷取要開啟的檔案名稱。  
  
 [!code-cpp[RichTextDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextDragDrop/CS/form1.cs#1)]
 [!code-vb[RichTextDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextDragDrop/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DragDropEffects" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragOver" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.IDataObject data, int32 keyState, int32 x, int32 y, valuetype System.Windows.Forms.DragDropEffects allowedEffect, valuetype System.Windows.Forms.DragDropEffects effect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (data As IDataObject, keyState As Integer, x As Integer, y As Integer, allowedEffect As DragDropEffects, effect As DragDropEffects)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DragEventArgs(System::Windows::Forms::IDataObject ^ data, int keyState, int x, int y, System::Windows::Forms::DragDropEffects allowedEffect, System::Windows::Forms::DragDropEffects effect);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="System.Windows.Forms.IDataObject" />
        <Parameter Name="keyState" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="allowedEffect" Type="System.Windows.Forms.DragDropEffects" />
        <Parameter Name="effect" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data">與這個事件關聯的資料。</param>
        <param name="keyState">SHIFT、CTRL 和 ALT 鍵的目前狀態。</param>
        <param name="x">滑鼠指標的 X 座標 (以像素為單位)。</param>
        <param name="y">滑鼠指標的 Y 座標 (以像素為單位)。</param>
        <param name="allowedEffect">其中一個 <see cref="T:System.Windows.Forms.DragDropEffects" /> 值。</param>
        <param name="effect">其中一個 <see cref="T:System.Windows.Forms.DragDropEffects" /> 值。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.DragEventArgs" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="AllowedEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects AllowedEffect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects AllowedEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowedEffect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects AllowedEffect { System::Windows::Forms::DragDropEffects get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得原始 (或來源) 拖曳事件所允許的拖放作業。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.DragDropEffects" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當控制項的拖放作業會呼叫以起始<xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType>方法，它會指定允許的作業的效果。 比方說，當您將檔案從來源，如果檔案是唯讀的 （或從唯讀的儲存媒體例如 CD），則來源會指示檔案可以複製，但未傳送到目標。  
  
 嘗試拖曳的資料上執行作業，您應該檢查此屬性可確保在允許的作業。  
  
   
  
## Examples  
 下列範例會示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。 範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>時拖曳動作開始的方法。 如果已移動滑鼠拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來決定要在拖曳的項目索引`MouseDown`事件。  
  
 此範例也示範如何使用自訂游標拖放作業。 這個範例假設有兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`、 自訂拖放到的應用程式目錄，存在於和不置放資料指標，分別。 如果使用自訂游標`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。 自訂的資料指標中所設定<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。  
  
 鍵盤的狀態會在評估<xref:System.Windows.Forms.Control.DragOver>右邊的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵的狀態。 中的位置`ListBox`期間也決定會卸除`DragOver`事件。 如果要卸除的資料不是`String`，然後在<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要提供的權限卸除資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`中適當的位置加入值`ListBox`。 如果在拖曳作業移動超出界限的表單，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。  
  
 此程式碼摘錄示範如何使用<xref:System.Windows.Forms.DragEventArgs>類別。 請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整程式碼範例的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IDataObject Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IDataObject Data" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As IDataObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IDataObject ^ Data { System::Windows::Forms::IDataObject ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IDataObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得包含與這個事件相關聯的 <see cref="T:System.Windows.Forms.IDataObject" /> 資料。</summary>
        <value>與這個事件關聯的資料。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在您的事件處理常式的主體中，您可以使用<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>方法來判斷資料是否符合的控制項被拖曳的資料格式的需求。 您也可以指定是否要嘗試將資料轉換成符合您的格式需求。 如果拖曳的資料符合您的格式需求，使用<xref:System.Windows.Forms.IDataObject.GetData%2A>方法來擷取資料。  
  
   
  
## Examples  
 下列範例會示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。 範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>時拖曳動作開始的方法。 如果已移動滑鼠拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來決定要在拖曳的項目索引`MouseDown`事件。  
  
 此範例也示範如何使用自訂游標拖放作業。 這個範例假設有兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`、 自訂拖放到的應用程式目錄，存在於和不置放資料指標，分別。 如果使用自訂游標`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。 自訂的資料指標中所設定<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。  
  
 鍵盤的狀態會在評估<xref:System.Windows.Forms.Control.DragOver>右邊的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵的狀態。 中的位置`ListBox`期間也決定會卸除`DragOver`事件。 如果要卸除的資料不是`String`，然後在<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要提供的權限卸除資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`中適當的位置加入值`ListBox`。 如果在拖曳作業移動超出界限的表單，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。  
  
 此程式碼摘錄示範如何使用<xref:System.Windows.Forms.DragEventArgs>類別。 請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整程式碼範例的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects Effect { System::Windows::Forms::DragDropEffects get(); void set(System::Windows::Forms::DragDropEffects value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定拖放作業中的目標置放效果。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.DragDropEffects" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，套用的效果會判斷滑鼠游標拖放作業的目標。 這非常有用意見反應提供給使用者，就會發生的作業。 例如，如果您按下 CTRL 鍵，當您拖曳檔案從來源時，指定<xref:System.Windows.Forms.DragDropEffects.Copy?displayProperty=nameWithType>表示目標將會嘗試執行複製作業。  
  
 若要使用自訂的資料指標的拖曳操作，請參閱<xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例會示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。 範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>時拖曳動作開始的方法。 如果已移動滑鼠拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來決定要在拖曳的項目索引`MouseDown`事件。  
  
 此範例也示範如何使用自訂游標拖放作業。 這個範例假設有兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`、 自訂拖放到的應用程式目錄，存在於和不置放資料指標，分別。 如果使用自訂游標`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。 自訂的資料指標中所設定<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。  
  
 鍵盤的狀態會在評估<xref:System.Windows.Forms.Control.DragOver>右邊的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵的狀態。 中的位置`ListBox`期間也決定會卸除`DragOver`事件。 如果要卸除的資料不是`String`，然後在<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要提供的權限卸除資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`中適當的位置加入值`ListBox`。 如果在拖曳作業移動超出界限的表單，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。  
  
 此程式碼摘錄示範如何使用<xref:System.Windows.Forms.DragEventArgs>類別。 請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整程式碼範例的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="KeyState">
      <MemberSignature Language="C#" Value="public int KeyState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyState As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyState { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 SHIFT、CTRL 和 ALT 鍵的目前狀態，以及滑鼠按鍵的狀態。</summary>
        <value>SHIFT、CTRL 和 ALT 鍵和滑鼠按鍵的目前狀態。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以進行特定的索引鍵的狀態而定的拖放作業的效果。 例如，您可能決定要複製或移動的資料取決拖放作業期間是否按下 CTRL 或 SHIFT 鍵。  
  
 中所設定的位元<xref:System.Windows.Forms.DragEventArgs.KeyState%2A>屬性的識別索引鍵或在作業期間已按下滑鼠按鈕。 例如，如果按下滑鼠左的按鈕時，第一個位元<xref:System.Windows.Forms.DragEventArgs.KeyState%2A>屬性設定。 您可以使用位元 AND 運算子來測試指定的按鍵狀態。  
  
 下表列出可用來指定事件的值。  
  
|值|Key|  
|-----------|---------|  
|1 （0 位元）|滑鼠左鍵。|  
|2 （1 位元）|滑鼠右鍵。|  
|4 （2 位元）|SHIFT 鍵。|  
|8 （位元 3）|CTRL 鍵。|  
|16 （位元 4）|滑鼠中鍵。|  
|32 （位元 5）|ALT 鍵。|  
  
   
  
## Examples  
 下列範例會示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。 範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>時拖曳動作開始的方法。 如果已移動滑鼠拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來決定要在拖曳的項目索引`MouseDown`事件。  
  
 此範例也示範如何使用自訂游標拖放作業。 這個範例假設有兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`、 自訂拖放到的應用程式目錄，存在於和不置放資料指標，分別。 如果使用自訂游標`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。 自訂的資料指標中所設定<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。  
  
 鍵盤的狀態會在評估<xref:System.Windows.Forms.Control.DragOver>右邊的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵的狀態。 中的位置`ListBox`期間也決定會卸除`DragOver`事件。 如果要卸除的資料不是`String`，然後在<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要提供的權限卸除資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`中適當的位置加入值`ListBox`。 如果在拖曳作業移動超出界限的表單，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。  
  
 此程式碼摘錄示範如何使用<xref:System.Windows.Forms.DragEventArgs>類別。 請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整程式碼範例的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public int X { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.X" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property X As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int X { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得滑鼠指標的 X 座標 (在螢幕座標中)。</summary>
        <value>滑鼠指標的 X 座標 (單位為像素)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。 範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>時拖曳動作開始的方法。 如果已移動滑鼠拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來決定要在拖曳的項目索引`MouseDown`事件。  
  
 此範例也示範如何使用自訂游標拖放作業。 這個範例假設有兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`、 自訂拖放到的應用程式目錄，存在於和不置放資料指標，分別。 如果使用自訂游標`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。 自訂的資料指標中所設定<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。  
  
 鍵盤的狀態會在評估<xref:System.Windows.Forms.Control.DragOver>右邊的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵的狀態。 中的位置`ListBox`期間也決定會卸除`DragOver`事件。 如果要卸除的資料不是`String`，然後在<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要提供的權限卸除資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`中適當的位置加入值`ListBox`。 如果在拖曳作業移動超出界限的表單，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。  
  
 此程式碼摘錄示範如何使用<xref:System.Windows.Forms.DragEventArgs>類別。 請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整程式碼範例的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public int Y { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Y" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Y As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Y { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得滑鼠指標的 Y 座標 (在螢幕座標中)。</summary>
        <value>滑鼠指標的 Y 座標 (單位為像素)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。 範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>時拖曳動作開始的方法。 如果已移動滑鼠拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來決定要在拖曳的項目索引`MouseDown`事件。  
  
 此範例也示範如何使用自訂游標拖放作業。 這個範例假設有兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`、 自訂拖放到的應用程式目錄，存在於和不置放資料指標，分別。 如果使用自訂游標`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。 自訂的資料指標中所設定<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。  
  
 鍵盤的狀態會在評估<xref:System.Windows.Forms.Control.DragOver>右邊的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵的狀態。 中的位置`ListBox`期間也決定會卸除`DragOver`事件。 如果要卸除的資料不是`String`，然後在<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要提供的權限卸除資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`中適當的位置加入值`ListBox`。 如果在拖曳作業移動超出界限的表單，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。  
  
 此程式碼摘錄示範如何使用<xref:System.Windows.Forms.DragEventArgs>類別。 請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整程式碼範例的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.X" />
      </Docs>
    </Member>
  </Members>
</Type>