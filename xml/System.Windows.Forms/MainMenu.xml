<Type Name="MainMenu" FullName="System.Windows.Forms.MainMenu">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="223d004886d0115f7d435b6bd28a85998b094b17" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30649492" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MainMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MainMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MainMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class MainMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class MainMenu : System::Windows::Forms::Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms.MainMenu")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示表單的功能表結構。 雖然 <see cref="T:System.Windows.Forms.MenuStrip" /> 會取代並且將功能加入至之前版本的 <see cref="T:System.Windows.Forms.MainMenu" /> 控制項；不過，也可以選擇保留 <see cref="T:System.Windows.Forms.MainMenu" />，以提供回溯相容性 (Backward Compatibility) 以及供未來使用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MainMenu>控制項代表表單功能表結構的容器。 功能表組成<xref:System.Windows.Forms.MenuItem>代表個別的功能表命令，功能表結構中的物件。 每個<xref:System.Windows.Forms.MenuItem>可以是您的應用程式的命令或其他子功能表項目的父功能表。 繫結<xref:System.Windows.Forms.MainMenu>至<xref:System.Windows.Forms.Form>，會顯示它，請指派<xref:System.Windows.Forms.MainMenu>至<xref:System.Windows.Forms.Form.Menu%2A>屬性<xref:System.Windows.Forms.Form>。  
  
 對於應用程式將會有多個語言的支援，您可以使用<xref:System.Windows.Forms.MainMenu.RightToLeft%2A>屬性顯示的功能表由右至左支援阿拉伯文等語言的文字。  
  
 您可以建立不同<xref:System.Windows.Forms.MainMenu>物件來代表不同的功能表結構，為您的表單。 如果您想要重複使用包含在特定的功能表結構<xref:System.Windows.Forms.MainMenu>，您可以使用其<xref:System.Windows.Forms.MainMenu.CloneMenu%2A>方法來建立複本。 功能表結構的複本之後，您可以針對新的功能表結構中進行適當的修改。  
  
> [!NOTE]
>  剪下並貼到另一個設計工具中的項目從一個形式可能無法如預期沒有定義的功能表項目是否包含您要貼到表單的功能表。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.MainMenu>，會指派兩個<xref:System.Windows.Forms.MenuItem>物件加入至<xref:System.Windows.Forms.MainMenu>並將它連結至表單。 這個範例需要您有<xref:System.Windows.Forms.Form>建立名為`Form1`。  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
    <altmember cref="P:System.Windows.Forms.Form.Menu" />
    <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
    <altmember cref="T:System.Windows.Forms.MenuStrip" />
    <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.MainMenu" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>不使用任何指定功能表項目來初始化 <see cref="T:System.Windows.Forms.MainMenu" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個版本的建構函式會建立<xref:System.Windows.Forms.MainMenu>不含任何指定<xref:System.Windows.Forms.MenuItem>物件。 若要加入至控制項的功能表項目會使用這個建構函式可接受的陣列中的其他版本<xref:System.Windows.Forms.MenuItem>物件做為其參數或使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法<xref:System.Windows.Forms.Menu.MenuItems%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.MainMenu>，會指派兩個<xref:System.Windows.Forms.MenuItem>物件加入至<xref:System.Windows.Forms.MainMenu>並將它連結至表單。 這個範例需要您有<xref:System.Windows.Forms.Form>建立名為`Form1`。  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
        <altmember cref="P:System.Windows.Forms.Form.Menu" />
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(System::ComponentModel::IContainer ^ container);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">
          <see cref="T:System.ComponentModel.IContainer" />，表示 <see cref="T:System.Windows.Forms.MainMenu" /> 的容器。</param>
        <summary>使用指定的容器 (Container) 來初始化 <see cref="T:System.Windows.Forms.MainMenu" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">
          <see cref="T:System.Windows.Forms.MenuItem" /> 物件的陣列，將加入至 <see cref="T:System.Windows.Forms.MainMenu" />。</param>
        <summary>使用一組指定 <see cref="T:System.Windows.Forms.MainMenu" /> 物件來初始化 <see cref="T:System.Windows.Forms.MenuItem" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個建構函式來指派陣列<xref:System.Windows.Forms.MenuItem>物件加入至<xref:System.Windows.Forms.MainMenu>在其建立時間。 之後<xref:System.Windows.Forms.MainMenu>已建立您可以加入其他<xref:System.Windows.Forms.MenuItem>物件加入至<xref:System.Windows.Forms.MainMenu>使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法<xref:System.Windows.Forms.Menu.MenuItems%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.MainMenu>，並將兩個指派<xref:System.Windows.Forms.MenuItem>物件加入至<xref:System.Windows.Forms.MainMenu>使用這個版本的建構函式。 此範例會接著繫結<xref:System.Windows.Forms.MainMenu>至<xref:System.Windows.Forms.Form>。 這個範例需要您有<xref:System.Windows.Forms.Form>建立名為`Form1`。  
  
 [!code-cpp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MainMenu CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MainMenu CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CloneMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneMenu () As MainMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MainMenu ^ CloneMenu();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立新的 <see cref="T:System.Windows.Forms.MainMenu" />，它是目前 <see cref="T:System.Windows.Forms.MainMenu" /> 的複本。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.MainMenu" />，表示複製的功能表。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個方法來建立一份儲存中的功能表結構<xref:System.Windows.Forms.MainMenu>。 您可以使用這個方法重複使用儲存中的功能表結構<xref:System.Windows.Forms.MainMenu>為基礎的新<xref:System.Windows.Forms.MainMenu>。 例如，如果您想要建立功能表結構有相同的功能表項目，與現有<xref:System.Windows.Forms.MainMenu>但也會有其他<xref:System.Windows.Forms.MenuItem>物件加入至其中，您可以使用<xref:System.Windows.Forms.MainMenu.CloneMenu%2A>方法來建立一份原始<xref:System.Windows.Forms.MainMenu>和將新<xref:System.Windows.Forms.MenuItem>物件來複製<xref:System.Windows.Forms.MainMenu>。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Windows.Forms.MainMenu.GetForm%2A>方法來判斷<xref:System.Windows.Forms.MainMenu>目前父代到表單。 如果在範例中呼叫的程式碼<xref:System.Windows.Forms.MainMenu.GetForm%2A>不會傳回`null`，程式碼，然後複製的功能表結構<xref:System.Windows.Forms.MainMenu>使用<xref:System.Windows.Forms.MainMenu.CloneMenu%2A>方法。 程式碼會設定<xref:System.Windows.Forms.MainMenu.RightToLeft%2A>屬性設定為 true，新的複本上<xref:System.Windows.Forms.MainMenu>建立<xref:System.Windows.Forms.MainMenu>可用的語言支援 右到左的文字。 這個範例需要您有<xref:System.Windows.Forms.MainMenu>建立名為`mainMenu1`。  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MainMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於主功能表摺疊時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.MainMenu.Collapse>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.MainMenu>名為`MainMenu1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.MainMenu.Collapse>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#483](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#483)]
 [!code-vb[System.Windows.Forms.EventExamples#483](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#483)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected override IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int CreateMenuHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CreateMenuHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateMenuHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr CreateMenuHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>為功能表建立新的控制代碼。</summary>
        <returns>如果該方法成功則為功能表的控制代碼；否則為 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Menu.CreateMenuHandle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
        <summary>處置 <see cref="T:System.Windows.Forms.MainMenu" /> 所使用的資源 (除了記憶體之外)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MainMenu.Dispose%2A> 使用完畢時，請呼叫 <xref:System.Windows.Forms.MainMenu>。 <xref:System.Windows.Forms.MainMenu.Dispose%2A> 方法會將 <xref:System.Windows.Forms.MainMenu> 保留在無法使用的狀態。 在呼叫<xref:System.Windows.Forms.MainMenu.Dispose%2A>，您必須釋放所有參考<xref:System.Windows.Forms.MainMenu>讓它所佔用的記憶體可由記憶體回收收回。  
  
> [!NOTE]
>  在您釋放最後一個 <xref:System.Windows.Forms.MainMenu.Dispose%2A> 參考之前，請務必呼叫 <xref:System.Windows.Forms.MainMenu>。 否則，資源<xref:System.Windows.Forms.MainMenu>是使用之前，將不會釋放記憶體回收集合呼叫<xref:System.Windows.Forms.MainMenu>物件的解構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form GetForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form GetForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.GetForm" />
      <MemberSignature Language="VB.NET" Value="Public Function GetForm () As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Form ^ GetForm();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得含有這個控制項的 <see cref="T:System.Windows.Forms.Form" />。</summary>
        <returns>是這個控制項容器的 <see cref="T:System.Windows.Forms.Form" />。 如果 <see cref="T:System.Windows.Forms.MainMenu" /> 目前不是裝載 (Host) 在表單上，則傳回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此屬性可讓您判斷特定<xref:System.Windows.Forms.MainMenu>為其子系至表單。 通常是屬性時使用多個<xref:System.Windows.Forms.MainMenu>物件使用表單上，您需要判斷哪一個目前正由表單。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Windows.Forms.MainMenu.GetForm%2A>方法來判斷<xref:System.Windows.Forms.MainMenu>目前父代到表單。 如果在範例中呼叫的程式碼<xref:System.Windows.Forms.MainMenu.GetForm%2A>不會傳回`null`，程式碼，然後複製的功能表結構<xref:System.Windows.Forms.MainMenu>使用<xref:System.Windows.Forms.MainMenu.CloneMenu%2A>方法。 程式碼會設定<xref:System.Windows.Forms.MainMenu.RightToLeft%2A>屬性設定為 true，新的複本上<xref:System.Windows.Forms.MainMenu>建立<xref:System.Windows.Forms.MainMenu>可用的語言支援 右到左的文字。 這個範例需要您有<xref:System.Windows.Forms.MainMenu>建立名為`mainMenu1`。  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.MainMenu.Collapse" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.MainMenu.OnCollapse%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定控制項所顯示的文字是否從右到左。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.RightToLeft" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此屬性可讓您的功能表，以支援由右至左書寫的語言。 當這個屬性設定為`RightToLeft.Yes`，功能表項目文字會顯示由右至左，而不是預設從左到右的方法。  
  
> [!NOTE]
>  如需有關如何啟用由右至左對齊會影響 Windows Form 控制項的詳細資訊，請參閱<xref:System.Windows.Forms.Control.RightToLeft%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Windows.Forms.MainMenu.GetForm%2A>方法來判斷<xref:System.Windows.Forms.MainMenu>目前父代到表單。 如果在範例中呼叫的程式碼<xref:System.Windows.Forms.MainMenu.GetForm%2A>不會傳回`null`，程式碼，然後複製的功能表結構<xref:System.Windows.Forms.MainMenu>使用<xref:System.Windows.Forms.MainMenu.CloneMenu%2A>方法。 範例程式碼會設定<xref:System.Windows.Forms.MainMenu.RightToLeft%2A>屬性`RightToLeft.Yes`上的新複本<xref:System.Windows.Forms.MainMenu>建立<xref:System.Windows.Forms.MainMenu>可用的語言支援 右到左的文字。 這個範例需要您有<xref:System.Windows.Forms.MainMenu>建立名為`mainMenu1`。  
  
 [!code-cpp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指派給屬性的值不是 <see cref="T:System.Windows.Forms.RightToLeft" /> 列舉型別的有效成員。</exception>
        <altmember cref="T:System.Windows.Forms.RightToLeft" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回表示 <see cref="T:System.Windows.Forms.MainMenu" /> 的字串。</summary>
        <returns>字串，代表目前的 <see cref="T:System.Windows.Forms.MainMenu" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回字串包含的類型和所傳回的字串<xref:System.Windows.Forms.Form.ToString%2A>方法如果<xref:System.Windows.Forms.MainMenu>指派給表單。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>