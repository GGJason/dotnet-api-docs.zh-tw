<Type Name="MenuItem" FullName="System.Windows.Forms.MenuItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8e96b9a562587ce1b84c0314819619ffe1f760d2" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55340281" /></Metadata><TypeSignature Language="C#" Value="public class MenuItem : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MenuItem extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MenuItem" />
  <TypeSignature Language="VB.NET" Value="Public Class MenuItem&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class MenuItem : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type MenuItem = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示 <see cref="T:System.Windows.Forms.MainMenu" /> 或 <see cref="T:System.Windows.Forms.ContextMenu" /> 中顯示的個別項目。 雖然 <see cref="T:System.Windows.Forms.ToolStripMenuItem" /> 會取代並且將功能加入至之前版本的 <see cref="T:System.Windows.Forms.MenuItem" /> 控制項；不過，也可以選擇保留 <see cref="T:System.Windows.Forms.MenuItem" />，以提供回溯相容性 (Backward Compatibility) 以及供未來使用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 為了讓<xref:System.Windows.Forms.MenuItem>若要顯示，您必須將它加入<xref:System.Windows.Forms.MainMenu>或<xref:System.Windows.Forms.ContextMenu>。 若要建立子功能表，您可以新增<xref:System.Windows.Forms.MenuItem>物件至<xref:System.Windows.Forms.Menu.MenuItems%2A>屬性之父代<xref:System.Windows.Forms.MenuItem>。  
  
 <xref:System.Windows.Forms.MenuItem>類別提供屬性，可讓您設定的外觀和功能的功能表項目。 若要顯示的功能表項目旁邊的核取記號，請使用<xref:System.Windows.Forms.MenuItem.Checked%2A>屬性。 您可以使用這項功能，來識別在互斥的功能表項目清單中選取的功能表項目。 例如，如果您有一組功能表項目設定的文字色彩<xref:System.Windows.Forms.TextBox>控制項，您可以使用<xref:System.Windows.Forms.MenuItem.Checked%2A>屬性來識別目前選取的色彩。 <xref:System.Windows.Forms.MenuItem.Shortcut%2A>屬性可用來定義選取的功能表項目是可以按下鍵盤組合。  
  
 針對<xref:System.Windows.Forms.MenuItem>多重文件介面 (MDI) 應用程式中顯示的物件，您可以使用<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>方法來合併的 MDI 功能表的父代與它的子表單，以建立合併的功能表結構。 因為<xref:System.Windows.Forms.MenuItem>無法重複使用多個位置中相同的時間，例如在<xref:System.Windows.Forms.MainMenu>並<xref:System.Windows.Forms.ContextMenu>，您可以使用<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>方法來建立一份<xref:System.Windows.Forms.MenuItem>用於另一個位置。  
  
 <xref:System.Windows.Forms.MenuItem.Popup>事件可讓您執行工作，才會顯示功能表。 例如，您可以建立這個事件，以顯示或隱藏功能表項目，根據您的程式碼狀態的事件處理常式。 <xref:System.Windows.Forms.MenuItem.Select>事件可讓您執行工作，例如當使用者將滑鼠指標置於上方的功能表項目時，為您的應用程式的功能表項目提供詳細的說明。  
  
   
  
## Examples  
 下列程式碼範例會建立表單功能表結構。 範例程式碼加入<xref:System.Windows.Forms.MenuItem>來代表最上層功能表項目中，選取字型的大小，會將子功能表項目新增到它，然後將兩個功能表項目新增至該功能表項目，表示應用程式中的大型和小型的字型選項。 這個範例需要有<xref:System.Windows.Forms.MainMenu>名為物件`mainMenu1`和第四個<xref:System.Windows.Forms.MenuItem>命名的物件`menuItem1`， `menuItem2`， `menuItem3`，和`menuItem4`。  
  
 [!code-cpp[Classic Menu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu Example/CS/source.cs#1)]
 [!code-vb[Classic Menu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MainMenu" />
    <altmember cref="T:System.Windows.Forms.Menu" />
    <altmember cref="T:System.Windows.Forms.MenuMerge" />
    <altmember cref="T:System.Windows.Forms.ContextMenu" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.MenuItem" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>使用空白標題來初始化 <see cref="T:System.Windows.Forms.MenuItem" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一旦您已建立空白<xref:System.Windows.Forms.MenuItem>使用這個建構函式，您可以使用的屬性和方法<xref:System.Windows.Forms.MenuItem>類別，以指定的外觀和行為您<xref:System.Windows.Forms.MenuItem>。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.MenuItem>使用這個版本的建構函式。  
  
 [!code-cpp[Classic MenuItem.MenuItem Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : string -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">功能表項目的標題。</param>
        <summary>使用功能表項目的指定標題來初始化 <see cref="T:System.Windows.Forms.MenuItem" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您使用功能表項目的指定標題`text`參數，您也可以指定便捷鍵加上 '&' 字元，用於為便捷鍵字元之前。 比方說，若要指定"F"中 「 檔案 」 做為便捷鍵，您會指定功能表項目的標題 」 及檔案 」。 您可以使用這項功能可提供您功能表的鍵盤巡覽。  
  
 設定`text`參數，以 「`-`"會導致您的功能表項目，以顯示做為分隔符號 （水平列），而不是標準的功能表項目。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.MenuItem>，它是的建構在指定功能表項目的標題。  
  
 [!code-cpp[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, EventHandler onClick);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.EventHandler onClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, onClick As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, EventHandler ^ onClick);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : string * EventHandler -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem (text, onClick)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="text">功能表項目的標題。</param>
        <param name="onClick"><see cref="T:System.EventHandler" />，處理這個功能表項目的 <see cref="E:System.Windows.Forms.MenuItem.Click" /> 事件。</param>
        <summary>使用指定的標題和功能表項目的 <see cref="E:System.Windows.Forms.MenuItem.Click" /> 事件的事件處理常式，初始化類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您使用功能表項目的指定標題`text`參數，您也可以指定便捷鍵加上 '&' 的存取金鑰做該字元前面。 比方說，若要指定"F"中 「 檔案 」 做為便捷鍵，您會指定功能表項目的標題 」 及檔案 」。 您可以使用這項功能可提供您功能表的鍵盤巡覽。  
  
 設定`text`參數，以 「`-`"會導致您的功能表項目，以顯示做為分隔符號 （水平列），而不是標準的功能表項目。  
  
 此外，您可以使用這個建構函式來指定要處理的委派<xref:System.Windows.Forms.MenuItem.Click>功能表項目所建立的事件。 <xref:System.EventHandler>必須設定您將傳遞給這個建構函式呼叫事件處理常式可以處理<xref:System.Windows.Forms.MenuItem.Click>事件。 如需有關如何處理事件的詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.MenuItem>物件使用指定的標題和<xref:System.EventHandler>連接到將處理的事件處理常式的委派<xref:System.Windows.Forms.MenuItem.Click>功能表項目的事件。  
  
 [!code-cpp[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : string * System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem (text, items)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="text">功能表項目的標題。</param>
        <param name="items"><see cref="T:System.Windows.Forms.MenuItem" /> 物件陣列，含有這個功能表項目的子功能表項目。</param>
        <summary>使用指定標題和為功能表項目定義的子功能表項目陣列，來初始化類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您使用功能表項目的指定標題`text`參數，您也可以指定便捷鍵加上 '&' 的存取金鑰做該字元前面。 比方說，若要指定"F"中 「 檔案 」 做為便捷鍵，您會指定功能表項目的標題 」 及檔案 」。 您可以使用這項功能可提供您功能表的鍵盤巡覽。  
  
 設定`text`參數，以 「`-`"會導致您的功能表項目，以顯示做為分隔符號 （水平列），而不是標準的功能表項目。  
  
 `items`參數可讓您指派來定義這個功能表項目的子功能表的功能表項目的陣列。 陣列中的每個項目也可以指派給它的功能表項目的陣列。 這可讓您建立完整的功能表結構，並將它們指派給功能表項目的建構函式。  
  
 如需有關如何處理事件的詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例會建立物件使用指定的標題，連線至的方法，將處理之事件的事件處理常式每個功能表項目在子功能表項目的陣列。  
  
 [!code-cpp[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, EventHandler onClick, System.Windows.Forms.Shortcut shortcut);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.EventHandler onClick, valuetype System.Windows.Forms.Shortcut shortcut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler,System.Windows.Forms.Shortcut)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, EventHandler ^ onClick, System::Windows::Forms::Shortcut shortcut);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : string * EventHandler * System.Windows.Forms.Shortcut -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem (text, onClick, shortcut)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
        <Parameter Name="shortcut" Type="System.Windows.Forms.Shortcut" />
      </Parameters>
      <Docs>
        <param name="text">功能表項目的標題。</param>
        <param name="onClick"><see cref="T:System.EventHandler" />，處理這個功能表項目的 <see cref="E:System.Windows.Forms.MenuItem.Click" /> 事件。</param>
        <param name="shortcut">其中一個 <see cref="T:System.Windows.Forms.Shortcut" /> 值。</param>
        <summary>使用指定的標題、事件處理常式，和功能表項目的相關快速鍵，來初始化類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您使用功能表項目的指定標題`text`參數，您也可以指定便捷鍵加上 '&' 的存取金鑰做該字元前面。 比方說，若要指定"F"中 「 檔案 」 做為便捷鍵，您會指定功能表項目的標題 」 及檔案 」。 您可以使用這項功能可提供您功能表的鍵盤巡覽。 這個建構函式也可讓您指定除了便捷鍵，以提供鍵盤導覽的快速鍵。 快速鍵可讓您指定的機碼，可用來啟用功能表項目組合。  
  
 設定`text`參數，以 「`-`"會導致您的功能表項目，以顯示做為分隔符號 （水平列），而不是標準的功能表項目。  
  
 此外，您可以使用這個建構函式來指定要處理的委派<xref:System.Windows.Forms.MenuItem.Click>功能表項目所建立的事件。 <xref:System.EventHandler>必須設定您將傳遞給這個建構函式呼叫事件處理常式可以處理<xref:System.Windows.Forms.MenuItem.Click>事件。 如需有關如何處理事件的詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例會建立物件，指定的標題、 攠摝坫與事件處理常式連接到將會處理功能表項目的事件的方法。  
  
 [!code-cpp[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (System.Windows.Forms.MenuMerge mergeType, int mergeOrder, System.Windows.Forms.Shortcut shortcut, string text, EventHandler onClick, EventHandler onPopup, EventHandler onSelect, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.MenuMerge mergeType, int32 mergeOrder, valuetype System.Windows.Forms.Shortcut shortcut, string text, class System.EventHandler onClick, class System.EventHandler onPopup, class System.EventHandler onSelect, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.Windows.Forms.MenuMerge,System.Int32,System.Windows.Forms.Shortcut,System.String,System.EventHandler,System.EventHandler,System.EventHandler,System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::Windows::Forms::MenuMerge mergeType, int mergeOrder, System::Windows::Forms::Shortcut shortcut, System::String ^ text, EventHandler ^ onClick, EventHandler ^ onPopup, EventHandler ^ onSelect, cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : System.Windows.Forms.MenuMerge * int * System.Windows.Forms.Shortcut * string * EventHandler * EventHandler * EventHandler * System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem (mergeType, mergeOrder, shortcut, text, onClick, onPopup, onSelect, items)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mergeType" Type="System.Windows.Forms.MenuMerge" />
        <Parameter Name="mergeOrder" Type="System.Int32" />
        <Parameter Name="shortcut" Type="System.Windows.Forms.Shortcut" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
        <Parameter Name="onPopup" Type="System.EventHandler" />
        <Parameter Name="onSelect" Type="System.EventHandler" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="mergeType">其中一個 <see cref="T:System.Windows.Forms.MenuMerge" /> 值。</param>
        <param name="mergeOrder">此功能表項目在合併的功能表中採用的相對位置。</param>
        <param name="shortcut">其中一個 <see cref="T:System.Windows.Forms.Shortcut" /> 值。</param>
        <param name="text">功能表項目的標題。</param>
        <param name="onClick"><see cref="T:System.EventHandler" />，處理這個功能表項目的 <see cref="E:System.Windows.Forms.MenuItem.Click" /> 事件。</param>
        <param name="onPopup"><see cref="T:System.EventHandler" />，處理這個功能表項目的 <see cref="E:System.Windows.Forms.MenuItem.Popup" /> 事件。</param>
        <param name="onSelect"><see cref="T:System.EventHandler" />，處理這個功能表項目的 <see cref="E:System.Windows.Forms.MenuItem.Select" /> 事件。</param>
        <param name="items"><see cref="T:System.Windows.Forms.MenuItem" /> 物件陣列，含有這個功能表項目的子功能表項目。</param>
        <summary>使用指定的標題；為 <see cref="T:System.Windows.Forms.MenuItem" />、<see cref="E:System.Windows.Forms.MenuItem.Click" /> 和 <see cref="E:System.Windows.Forms.MenuItem.Select" /> 事件定義的事件處理常式；快速鍵；合併型別；和為功能表項目指定的順序，來初始化 <see cref="E:System.Windows.Forms.MenuItem.Popup" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您使用功能表項目的指定標題`text`參數，您也可以指定便捷鍵加上 '&' 的存取金鑰做該字元前面。 比方說，若要指定"F"中 「 檔案 」 做為便捷鍵，您會指定功能表項目的標題 」 及檔案 」。 您可以使用這項功能可提供您功能表的鍵盤巡覽。  
  
 設定`text`參數，以 「`-`"會導致您的功能表項目，以顯示做為分隔符號 （水平列），而不是標準的功能表項目。  
  
 `items`參數可讓您指派來定義這個功能表項目的子功能表的功能表項目的陣列。 陣列中的每個項目也可以指派給它的功能表項目的陣列。 這可讓您建立完整的功能表結構，並將它們指派給功能表項目的建構函式。  
  
 `mergeType`和`mergeOrder`參數可讓您判斷此功能表項目與另一個功能表合併的功能表項目之後的行為。 您指定的值而定`mergeType`參數，您可以新增、 移除、 取代或合併的功能表項目並將與合併的功能表及其子功能表項目。 `mergeOrder`參數可讓您決定其中所建立的功能表項目時，會定位在合併功能表。  
  
 此外，您可以使用這個建構函式來建立<xref:System.Windows.Forms.MenuItem>，並將它連線到事件處理常式會處理功能表項目按一下程式碼中。 <xref:System.EventHandler>傳入這個建構函式應該設定為呼叫事件處理常式可以處理<xref:System.Windows.Forms.MenuItem.Click>事件。 藉由使用這個建構函式版本，您也可以連接<xref:System.Windows.Forms.MenuItem.Popup>和<xref:System.Windows.Forms.MenuItem.Select>事件，以判斷當選取此功能表項目。 您可以使用這些事件的工作，例如判斷要顯示子功能表項目旁的核取記號，或要啟用或停用應用程式的狀態為基礎的功能表項目。 <xref:System.Windows.Forms.MenuItem.Select>並<xref:System.Windows.Forms.MenuItem.Click>只會引發事件<xref:System.Windows.Forms.MenuItem>物件沒有父功能表項目。 如需有關如何處理事件的詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例會建立功能表項目具有標題和快顯的索引鍵。 功能表項目也有定義的事件處理常式<xref:System.Windows.Forms.MenuItem.Popup>， <xref:System.Windows.Forms.MenuItem.Click>，和<xref:System.Windows.Forms.MenuItem.Select>事件。 如果合併這個功能表項目，它將功能表項目加入至具有零的合併順序的功能表。  
  
 [!code-cpp[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MenuItem.Popup" />
        <altmember cref="E:System.Windows.Forms.MenuItem.Select" />
        <altmember cref="E:System.Windows.Forms.MenuItem.Click" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="BarBreak">
      <MemberSignature Language="C#" Value="public bool BarBreak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BarBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.BarBreak" />
      <MemberSignature Language="VB.NET" Value="Public Property BarBreak As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BarBreak { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BarBreak : bool with get, set" Usage="System.Windows.Forms.MenuItem.BarBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Windows.Forms.MenuItem" /> 是放在新的一行 (對加入至 <see cref="T:System.Windows.Forms.MainMenu" /> 物件的功能表項目而言) 還是新的一欄 (對 <see cref="T:System.Windows.Forms.ContextMenu" /> 中顯示的子功能表項目或功能表項目而言)。</summary>
        <value>如果功能表項目放置在新的一行或一欄中，則為 <see langword="true" />；如果功能表項目留在預設位置中，則為 <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Windows.Forms.MenuItem.BarBreak%2A>建立每個功能表項目放置於彼此相鄰水平方式而不是以垂直清單功能表的屬性。 您也可以使用這個屬性來建立功能表列，其中包含多個資料列的最上層的功能表項目。  
  
 此屬性與不同<xref:System.Windows.Forms.MenuItem.Break%2A>具有屬性中的會顯示一個橫條，在每個功能表項目左邊緣<xref:System.Windows.Forms.MenuItem.Break%2A>屬性設定為`true`。 當功能表項目不是最上層的功能表項目時，才會顯示的列。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.MenuItem>與兩個功能表項目。 兩個的子功能表項目會以水平方式顯示，而非使用垂直<xref:System.Windows.Forms.MenuItem.BarBreak%2A>屬性。  
  
 [!code-cpp[Classic MenuItem.BarBreak Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.BarBreak Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.BarBreak Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Break" />
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public bool Break { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Break" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Break" />
      <MemberSignature Language="VB.NET" Value="Public Property Break As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Break { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Break : bool with get, set" Usage="System.Windows.Forms.MenuItem.Break" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出項目是放在新的一行 (對加入至 <see cref="T:System.Windows.Forms.MainMenu" /> 物件的功能表項目而言) 或新的一欄 (對 <see cref="T:System.Windows.Forms.ContextMenu" /> 中顯示的功能表項目或子功能表項目而言)。</summary>
        <value>如果功能表項目放置在新的一行或一欄中，則為 <see langword="true" />；如果功能表項目留在預設位置中，則為 <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Windows.Forms.MenuItem.Break%2A>建立每個功能表放置彼此相鄰水平方式而不是以垂直清單功能表的屬性。 您也可以使用這個屬性來建立功能表列，其中包含多個資料列的最上層的功能表項目。  
  
   
  
## Examples  
 下列程式碼範例會建立功能表與上方資料列和一個功能表項目上的底端列上的兩個最上層功能表項目。  
  
 [!code-cpp[Classic MenuItem.Break Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Break Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Break Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Break Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Break Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Break Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.BarBreak" />
      </Docs>
    </Member>
    <Member MemberName="Checked">
      <MemberSignature Language="C#" Value="public bool Checked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Checked" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Checked" />
      <MemberSignature Language="VB.NET" Value="Public Property Checked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Checked { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Checked : bool with get, set" Usage="System.Windows.Forms.MenuItem.Checked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出功能表項目的文字旁邊要不要顯示核取記號。</summary>
        <value>如果功能表項目旁邊有核取記號，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Windows.Forms.MenuItem.Checked%2A>組合中的其他功能表項目，以提供應用程式狀態的功能表中的屬性。 比方說，您可以將核取記號置於功能表項目群組中的項目，以識別要顯示的應用程式中的文字字型的大小。 您也可以使用<xref:System.Windows.Forms.MenuItem.Checked%2A>屬性，以識別一組互斥的功能表項目中選取的功能表項目。  
  
> [!NOTE]
>  這個屬性不能設定為`true`最上層的功能表項目。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Windows.Forms.MenuItem.Checked%2A>屬性以提供應用程式中的狀態。 在此範例中，一組功能表項目用來指定文字的色彩<xref:System.Windows.Forms.TextBox>控制項。 提供事件處理常式會由<xref:System.Windows.Forms.MenuItem.Click>事件的三個功能表項目。 每個功能表項目指定的文字色彩`menuItemRed`（紅色）， `menuItemGreen` （綠色），或`menuItemBlue`（藍色）。 事件處理常式判斷已按下的功能表項目、 將選取的功能表項目中，核取記號和變更表單的文字色彩<xref:System.Windows.Forms.TextBox>控制項。 這個範例需要<xref:System.Drawing>已加入此程式碼置於表單的命名空間。 這個範例也需要<xref:System.Windows.Forms.TextBox>已新增至表單，此範例程式碼位於名為`textBox1`。  
  
 [!code-cpp[Classic MenuItem.Checked Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Checked Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Checked Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Checked Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Checked Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Checked Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="T:System.Windows.Forms.MenuItem" /> 為最上層功能表或是具有子系。</exception>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於按一下功能表項目，或使用為功能表項目定義的快速鍵或便捷鍵選取時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MenuItem.Click>就會發生事件時這<xref:System.Windows.Forms.MenuItem>使用者按下。 此事件也會發生如果使用者選取功能表項目，使用鍵盤，並按下 Enter 鍵。 它也會發生如果按下便捷鍵或攠摝坫相關聯<xref:System.Windows.Forms.MenuItem>。 如需有關如何處理事件的詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
> [!NOTE]
>  如果<xref:System.Windows.Forms.Menu.MenuItems%2A>屬性<xref:System.Windows.Forms.MenuItem>包含任何項目，就不會引發此事件。 針對父功能表項目不會引發這個事件。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.MenuItem.Click>事件來執行工作時<xref:System.Windows.Forms.MenuItem>按下。 此範例會建立<xref:System.Windows.Forms.MainMenu>稱為`mainMenu1`並加入兩個<xref:System.Windows.Forms.MenuItem>物件`topMenuItem`(`File`) 及`menuItem1`(`Open`)。 接著連接`Click`事件，以`menuItem1_Click`事件處理常式。 當使用者按一下`Open`功能表項目，<xref:System.Windows.Forms.OpenFileDialog>會初始化並顯示。 這個範例需要您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[MenuItemClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItemClick/CPP/form1.cpp#1)]
 [!code-csharp[MenuItemClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItemClick/CS/form1.cs#1)]
 [!code-vb[MenuItemClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItemClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CloneMenu">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>建立 <see cref="T:System.Windows.Forms.MenuItem" /> 的複本。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.CloneMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneMenu () As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ CloneMenu();" />
      <MemberSignature Language="F#" Value="override this.CloneMenu : unit -&gt; System.Windows.Forms.MenuItem" Usage="menuItem.CloneMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立目前的 <see cref="T:System.Windows.Forms.MenuItem" /> 複本。</summary>
        <returns><see cref="T:System.Windows.Forms.MenuItem" />，表示重複的功能表項目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MenuItem> 物件不能用在多個位置，除非您取得一份<xref:System.Windows.Forms.MenuItem>。 您可以呼叫這個方法，以建立一份以用於這個功能表項目<xref:System.Windows.Forms.ContextMenu>， <xref:System.Windows.Forms.MainMenu>，或其他<xref:System.Windows.Forms.MenuItem>內您的應用程式。 功能表項目會複製時，原始的功能表項目中指定任何事件處理常式會繼續運作中複製的功能表項目版本。 比方說，如果您建立<xref:System.Windows.Forms.MenuItem>並連接它<xref:System.Windows.Forms.MenuItem.Click>事件之事件處理常式。 會複製功能表項目，複製的功能表項目會呼叫相同的事件處理常式。  
  
   
  
## Examples  
 下列程式碼範例複製人全面進攻<xref:System.Windows.Forms.MenuItem>，並顯示在<xref:System.Windows.Forms.ContextMenu>。 這個範例需要<xref:System.Windows.Forms.MenuItem>存在於<xref:System.Windows.Forms.MainMenu>的名稱在表單上`menuItem1`且<xref:System.Windows.Forms.ContextMenu>名為物件`contextMenu1`也存在表單上。  
  
 [!code-cpp[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="protected void CloneMenu (System.Windows.Forms.MenuItem itemSrc);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CloneMenu(class System.Windows.Forms.MenuItem itemSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.CloneMenu(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CloneMenu (itemSrc As MenuItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CloneMenu(System::Windows::Forms::MenuItem ^ itemSrc);" />
      <MemberSignature Language="F#" Value="override this.CloneMenu : System.Windows.Forms.MenuItem -&gt; unit" Usage="menuItem.CloneMenu itemSrc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemSrc" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="itemSrc"><see cref="T:System.Windows.Forms.MenuItem" />，表示要複製的功能表項目。</param>
        <summary>建立目前 <see cref="T:System.Windows.Forms.MenuItem" /> 的複本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法來建立您已建立的捷徑功能表或其他功能表結構中使用您的應用程式內的功能表項目的複本。 本版<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>可讓您指定特定<xref:System.Windows.Forms.MenuItem>複製而不是呼叫方法的功能表項目。 您可以使用這個方法來初始化新<xref:System.Windows.Forms.MenuItem>物件的另一個複本<xref:System.Windows.Forms.MenuItem>。 功能表項目會複製時，原始的功能表項目中指定任何事件處理常式會繼續運作中複製的功能表項目版本。 比方說，如果您建立<xref:System.Windows.Forms.MenuItem>並連接它<xref:System.Windows.Forms.MenuItem.Click>事件之事件處理常式。 會複製功能表項目，複製的功能表項目會呼叫相同的事件處理常式。  
  
   
  
## Examples  
 下列程式碼範例會初始化新<xref:System.Windows.Forms.MenuItem>的現有複本<xref:System.Windows.Forms.MenuItem>中所用<xref:System.Windows.Forms.MainMenu>表單上。 然後程式碼新增複製<xref:System.Windows.Forms.MenuItem>到<xref:System.Windows.Forms.ContextMenu>表單上。 這個範例需要<xref:System.Windows.Forms.MenuItem>已建立並命名為`menuItem1`而且<xref:System.Windows.Forms.ContextMenu>控制已建立並命名為`contextMenu1`。  
  
 [!code-cpp[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultItem">
      <MemberSignature Language="C#" Value="public bool DefaultItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DefaultItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.DefaultItem" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultItem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DefaultItem { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultItem : bool with get, set" Usage="System.Windows.Forms.MenuItem.DefaultItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出功能表項目是不是預設的功能表項目。</summary>
        <value>如果功能表項目是功能表中的預設項目，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 功能表的預設功能表項目為粗體。 當使用者按兩下子功能表，包含預設項目、 預設項目已選取，然後子功能表已關閉。 您可以使用<xref:System.Windows.Forms.MenuItem.DefaultItem%2A>屬性來表示，在功能表或快顯功能表中預期的預設動作。  
  
   
  
## Examples  
 下列程式碼範例會建立與兩個項目的子功能表項目。 範例會設定`menuItem2`做為預設功能表項目使用<xref:System.Windows.Forms.MenuItem.DefaultItem%2A>屬性。  
  
 [!code-cpp[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="menuItem.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> 表示會同時釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
        <summary>處置 (Dispose) <see cref="T:System.Windows.Forms.MenuItem" /> 所使用的資源 (除了記憶體之外)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MenuItem.Dispose%2A> 使用完畢時，請呼叫 <xref:System.Windows.Forms.MenuItem>。 <xref:System.Windows.Forms.MenuItem.Dispose%2A> 方法會將 <xref:System.Windows.Forms.MenuItem> 保留在無法使用的狀態。 之後呼叫<xref:System.Windows.Forms.MenuItem.Dispose%2A>，您必須釋放所有參考<xref:System.Windows.Forms.MenuItem>讓它所佔用的記憶體可以回收記憶體回收。  
  
> [!NOTE]
>  在您釋放最後一個 <xref:System.Windows.Forms.MenuItem.Dispose%2A> 參考之前，請務必呼叫 <xref:System.Windows.Forms.MenuItem>。 否則，資源<xref:System.Windows.Forms.MenuItem>會使用之前，將不會釋放記憶體回收集合呼叫<xref:System.Windows.Forms.MenuItem>物件的解構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawItemEventHandler ^ DrawItem;" />
      <MemberSignature Language="F#" Value="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " Usage="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當功能表項目的 <see cref="P:System.Windows.Forms.MenuItem.OwnerDraw" /> 屬性設定為 <see langword="true" /> 並且有繪製功能表項目的要求時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DrawItemEventArgs>引數傳遞給<xref:System.Windows.Forms.MenuItem.DrawItem>事件處理常式提供<xref:System.Drawing.Graphics>可讓您執行繪圖和功能表項目介面上的其他圖形化作業的物件。 您可以使用這個事件處理常式來建立您的應用程式的需求的自訂功能表。 如需有關如何處理事件的詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何處理<xref:System.Windows.Forms.MenuItem.DrawItem>事件。 這個範例會繪製功能表項目使用<xref:System.Drawing.Brush>並<xref:System.Drawing.Font>，，然後繪製<xref:System.Drawing.Rectangle>功能表項目周圍。 透過執行繪圖<xref:System.Drawing.Graphics>物件，傳遞至事件處理常式中<xref:System.Windows.Forms.DrawItemEventArgs>參數。 這個範例需要已初始化<xref:System.Windows.Forms.MenuItem.OwnerDraw%2A>屬性的項目`true`。 C# 範例中，新增下列程式碼，在表單的建構函式之後, `InitializeComponent`，連結事件：  
  
 `this.menuItem1.DrawItem += new DrawItemEventHandler(menuItem1_DrawItem);`  
  
 [!code-cpp[OwnerDraw example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/OwnerDraw example/CPP/form1.cpp#1)]
 [!code-csharp[OwnerDraw example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/OwnerDraw example/CS/form1.cs#1)]
 [!code-vb[OwnerDraw example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/OwnerDraw example/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.OwnerDraw" />
        <altmember cref="E:System.Windows.Forms.MenuItem.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.MenuItem.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否啟用功能表項目。</summary>
        <value>如果啟用功能表項目，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Forms.MenuItem>也就是已停用會顯示在灰色的顏色，以指出其狀態。 停用父功能表項目時，不會顯示所有的子功能表項目。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.MenuItem.Popup>事件，以判斷是否<xref:System.Windows.Forms.MenuItem>中所顯示的功能表顯示之前，已啟用支援剪下、 複製，並刪除作業的物件。 此範例會判斷如果`textBox1`，則<xref:System.Windows.Forms.TextBox>控制項在表單上、 已啟用、 具有輸入焦點，而且有之前啟用選取的文字<xref:System.Windows.Forms.MenuItem>物件。 這個範例需要該三<xref:System.Windows.Forms.MenuItem>物件會建立名為`menuCut`， `menuCopy`，和`menuDelete`已建立。  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Index" />
      <MemberSignature Language="VB.NET" Value="Public Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Index : int with get, set" Usage="System.Windows.Forms.MenuItem.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出功能表項目在父功能表中的位置。</summary>
        <value>以零為起始的索引，表示功能表項目在父功能表中的位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會提供功能表項目的父功能表的功能表項目集合中的索引的位置。 您可以使用這個屬性重新定位到其功能表中的不同位置的功能表項目。 您也可以使用這個屬性，當建立<xref:System.Windows.Forms.MenuItem>在建立時指定其功能表結構中的位置。  
  
   
  
## Examples  
 下列程式碼範例會切換功能表中的兩個功能表項目位置。 下列程式碼範例需要兩個<xref:System.Windows.Forms.MenuItem>物件會建立名為`menuItem1`和`menuItem2`。 `menuItem1`功能表項目移向下移動一個位置，在功能表中，而`menuItem2`將向上移動一個位置。  
  
 [!code-cpp[Classic MenuItem.Index Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Index Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Index Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Index Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Index Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Index Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指派的值小於零或大於項目計數。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsParent">
      <MemberSignature Language="C#" Value="public override bool IsParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.IsParent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsParent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsParent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsParent : bool" Usage="System.Windows.Forms.MenuItem.IsParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出功能表項目是否含有子功能表項目。</summary>
        <value>功能表項目含有子功能表項目，為 <see langword="true" />；功能表是獨立的功能表項目，則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此屬性與<xref:System.Windows.Forms.MenuItem.Parent%2A>來瀏覽整個功能表結構的程式碼中的屬性。  
  
   
  
## Examples  
 下列程式碼範例可讓您判斷是否有任何相關聯的子功能表<xref:System.Windows.Forms.MenuItem>名為`menuItem1`。 如果任何子功能表存在，它會停用它們藉由設定<xref:System.Windows.Forms.MenuItem.Enabled%2A>屬性設`false`。 這個範例需要有<xref:System.Windows.Forms.MenuItem>建立名為`menuItem1`。  
  
 [!code-cpp[Classic MenuItem.IsParent Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.IsParent Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.IsParent Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MdiList">
      <MemberSignature Language="C#" Value="public bool MdiList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MdiList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MdiList" />
      <MemberSignature Language="VB.NET" Value="Public Property MdiList As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MdiList { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MdiList : bool with get, set" Usage="System.Windows.Forms.MenuItem.MdiList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出功能表項目中會不會填入相關表單內顯示的多重文件介面 (MDI) 的子視窗清單。</summary>
        <value>如果此功能表項目中有顯示 MDI 子視窗的清單，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 選取功能表項目時要顯示 MDI 子視窗清單，清單會顯示為子功能表的功能表項目中。 會定義為 MDI 子表單的表單會顯示在 [視窗] 清單中。 只有九個子視窗可以顯示一次。 如果有顯示九個以上的子視窗，[更多 Windows...] 功能表項目會顯示 [視窗] 清單的結尾。 按一下這個功能表項目會顯示目前作用中的子視窗使用完整的清單對話方塊。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.MenuItem>用來在 MDI 表單中顯示目前開啟的 MDI 子表單清單。  
  
 [!code-cpp[Classic MenuItem.MdiList Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MdiList Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MdiList Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.MeasureItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MeasureItem As MeasureItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MeasureItemEventHandler ^ MeasureItem;" />
      <MemberSignature Language="F#" Value="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " Usage="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於功能表繪製前需要先知道功能表項目的大小時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 為了讓會引發此事件，您必須擁有<xref:System.Windows.Forms.MenuItem.OwnerDraw%2A>功能表項目的屬性設定為`true`。 繪製主控描繪功能表允許指定要繪製功能表項目的大小之前，會引發這個事件。 如需有關如何處理事件的詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.MenuItem.MeasureItem>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.MenuItem>名為`MenuItem1`。 請確定 與關聯的事件處理常式<xref:System.Windows.Forms.MenuItem.MeasureItem>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#499](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#499)]
 [!code-vb[System.Windows.Forms.EventExamples#499](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#499)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.OwnerDraw" />
        <altmember cref="E:System.Windows.Forms.MenuItem.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="MenuID">
      <MemberSignature Language="C#" Value="protected int MenuID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MenuID" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MenuID" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property MenuID As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int MenuID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MenuID : int" Usage="System.Windows.Forms.MenuItem.MenuID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出這個功能表項目的 Windows 識別項。</summary>
        <value>這個功能表項目的 Windows 識別項。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MergeMenu">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>合併這個 <see cref="T:System.Windows.Forms.MenuItem" /> 和另一 <see cref="T:System.Windows.Forms.MenuItem" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem MergeMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem MergeMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.MergeMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MergeMenu () As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ MergeMenu();" />
      <MemberSignature Language="F#" Value="override this.MergeMenu : unit -&gt; System.Windows.Forms.MenuItem" Usage="menuItem.MergeMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>這個 <see cref="T:System.Windows.Forms.MenuItem" /> 和另一 <see cref="T:System.Windows.Forms.MenuItem" /> 合併後傳回合併產生的 <see cref="T:System.Windows.Forms.MenuItem" />。</summary>
        <returns><see cref="T:System.Windows.Forms.MenuItem" />，表示合併的功能表項目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您呼叫本版<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>，則<xref:System.Windows.Forms.MenuItem>傳回是一份目前功能表項目可以合併與另一個功能表項目，而不會影響目前項目的功能。 本版<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>方法就類似於呼叫<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>不含任何參數的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public void MergeMenu (System.Windows.Forms.MenuItem itemSrc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MergeMenu(class System.Windows.Forms.MenuItem itemSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.MergeMenu(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MergeMenu (itemSrc As MenuItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MergeMenu(System::Windows::Forms::MenuItem ^ itemSrc);" />
      <MemberSignature Language="F#" Value="override this.MergeMenu : System.Windows.Forms.MenuItem -&gt; unit" Usage="menuItem.MergeMenu itemSrc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemSrc" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="itemSrc"><see cref="T:System.Windows.Forms.MenuItem" />，指定和這個功能表項目合併的功能表項目。</param>
        <summary>合併這個功能表項目與另一功能表項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 功能表項目會合併的功能表項目的值根據<xref:System.Windows.Forms.MenuItem.MergeType%2A>和<xref:System.Windows.Forms.MenuItem.MergeOrder%2A>屬性。 本版<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>方法可讓您合併兩個<xref:System.Windows.Forms.MenuItem>物件 （和其子功能表） 成單一的功能表。 當多個文件介面 (MDI) 父表單和子系都有功能表時，會自動處理合併的功能表。 您可以使用這個版本的方法來合併兩個<xref:System.Windows.Forms.MenuItem>物件 （和其子功能表項目） 位於<xref:System.Windows.Forms.MainMenu>內的單一功能表控制項<xref:System.Windows.Forms.ContextMenu>。 例如，您可以呼叫這個版本的<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>方法來合併成單一的檔案，並編輯功能表的功能表項目<xref:System.Windows.Forms.MenuItem>，可以再加入及顯示<xref:System.Windows.Forms.ContextMenu>。  
  
   
  
## Examples  
 下列程式碼範例會使用這個版本<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>方法用來建立一份<xref:System.Windows.Forms.MenuItem>及合併與另一個。 合併<xref:System.Windows.Forms.MenuItem>接著會新增至<xref:System.Windows.Forms.ContextMenu>控制項。 這個範例需要有兩個功能表項目稱為`menuItem1`並`menuItem2`包含子功能表項目，其中，<xref:System.Windows.Forms.ContextMenu>名為`contextMenu1`顯示功能表項目。 `menuItem1` 和`menuItem2`其內所含的另一個功能表項目。 若要在呼叫之後<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>進行時，合併功能表的建立。  
  
 [!code-cpp[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeOrder">
      <MemberSignature Language="C#" Value="public int MergeOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MergeOrder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MergeOrder" />
      <MemberSignature Language="VB.NET" Value="Public Property MergeOrder As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MergeOrder { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MergeOrder : int with get, set" Usage="System.Windows.Forms.MenuItem.MergeOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出功能表項目與其他項目合併時的相對位置。</summary>
        <value>以零為起始的索引，表示這個功能表項目的合併順序位置。 預設值為 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 功能表項目的合併順序指定的相對位置，如果功能表結構，這個功能表項目會採取<xref:System.Windows.Forms.MenuItem>包含在合併與另一個。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.MenuItem.MergeOrder%2A>屬性，來控制合併的功能表顯示的方式。 這是完整範例，可以開始執行之後將它新增至您的專案。  
  
 [!code-cpp[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="M:System.Windows.Forms.MenuItem.MergeMenu" />
      </Docs>
    </Member>
    <Member MemberName="MergeType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuMerge MergeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MenuMerge MergeType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MergeType" />
      <MemberSignature Language="VB.NET" Value="Public Property MergeType As MenuMerge" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MenuMerge MergeType { System::Windows::Forms::MenuMerge get(); void set(System::Windows::Forms::MenuMerge value); };" />
      <MemberSignature Language="F#" Value="member this.MergeType : System.Windows.Forms.MenuMerge with get, set" Usage="System.Windows.Forms.MenuItem.MergeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuMerge</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出這個功能表項目的功能表和其他功能表合併時，這個功能表項目的行為。</summary>
        <value><see cref="T:System.Windows.Forms.MenuMerge" /> 的值，表示功能表項目的合併型別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 合併的功能表項目型別，表示功能表項目具有相同的合併順序為另一個要合併的功能表項目時的行為。 您可以使用合併的功能表，建立根據兩個或多個現有的功能表合併的功能表。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.MenuItem>具有<xref:System.Windows.Forms.MenuItem.MergeType%2A>和<xref:System.Windows.Forms.MenuItem.MergeOrder%2A>指定功能表項目會加入至合併的功能表，在第一個位置。  
  
 [!code-cpp[Classic MenuItem.MergeType Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MergeType Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MergeType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指派的值不是其中一個 <see cref="T:System.Windows.Forms.MenuMerge" /> 值。</exception>
        <altmember cref="T:System.Windows.Forms.MenuMerge" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="Mnemonic">
      <MemberSignature Language="C#" Value="public char Mnemonic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Mnemonic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Mnemonic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Mnemonic As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Mnemonic { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Mnemonic : char" Usage="System.Windows.Forms.MenuItem.Mnemonic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出與這個功能表項目相關的助憶鍵字元。</summary>
        <value>字元，表示與這個功能表項目相關的助憶鍵字元。 如果 <see cref="T:System.Windows.Forms.MenuItem" /> 的文字中沒有指定助憶鍵字元，則會傳回 NUL 字元 (ASCII 值 0)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 助憶鍵字元為第一個字元之後的連字號字元 (&) 文字中的<xref:System.Windows.Forms.MenuItem>。 如果兩個連字號字元會放在一起，連字號用來顯示的文字中的連字號，這個屬性不會傳回助憶鍵<xref:System.Windows.Forms.MenuItem>而不是定義助憶鍵字元。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Text" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClick : EventArgs -&gt; unit&#xA;override this.OnClick : EventArgs -&gt; unit" Usage="menuItem.OnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.MenuItem.Click" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.MenuItem.Click>事件來執行工作時<xref:System.Windows.Forms.MenuItem>按下。 此範例會建立<xref:System.Windows.Forms.MainMenu>稱為`mainMenu1`並加入兩個<xref:System.Windows.Forms.MenuItem>物件`topMenuItem`(`File`) 及`menuItem1`(`Open`)。 接著連接`Click`事件，以`menuItem1_Click`事件處理常式。 當使用者按一下`Open`功能表項目，<xref:System.Windows.Forms.OpenFileDialog>會初始化並顯示。 這個範例需要您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[MenuItemClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItemClick/CPP/form1.cpp#1)]
 [!code-csharp[MenuItemClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItemClick/CS/form1.cs#1)]
 [!code-vb[MenuItemClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItemClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當覆寫<see cref="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" />衍生類別時，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" />方法。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit&#xA;override this.OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit" Usage="menuItem.OnDrawItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.DrawItemEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.MenuItem.DrawItem" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當覆寫<see cref="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />衍生類別時，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />方法。</para></block>
        <altmember cref="T:System.Windows.Forms.DrawItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnInitMenuPopup">
      <MemberSignature Language="C#" Value="protected virtual void OnInitMenuPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitMenuPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnInitMenuPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitMenuPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitMenuPopup(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitMenuPopup : EventArgs -&gt; unit&#xA;override this.OnInitMenuPopup : EventArgs -&gt; unit" Usage="menuItem.OnInitMenuPopup e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.MenuItem.Popup" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected virtual void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMeasureItem (e As MeasureItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMeasureItem(System::Windows::Forms::MeasureItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit&#xA;override this.OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit" Usage="menuItem.OnMeasureItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.MeasureItemEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.MenuItem.MeasureItem" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當覆寫<see cref="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />衍生類別時，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />方法。</para></block>
        <altmember cref="T:System.Windows.Forms.MeasureItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnPopup">
      <MemberSignature Language="C#" Value="protected virtual void OnPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPopup(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPopup : EventArgs -&gt; unit&#xA;override this.OnPopup : EventArgs -&gt; unit" Usage="menuItem.OnPopup e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.MenuItem.Popup" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.MenuItem.Popup>事件，以判斷是否<xref:System.Windows.Forms.MenuItem>中所顯示的功能表顯示之前，已啟用支援剪下、 複製，並刪除作業的物件。 此範例會判斷如果`textBox1`，則<xref:System.Windows.Forms.TextBox>控制項在表單上、 已啟用、 具有輸入焦點，而且有之前啟用選取的文字<xref:System.Windows.Forms.MenuItem>物件。 這個範例需要該三<xref:System.Windows.Forms.MenuItem>物件會建立名為`menuCut`， `menuCopy`，和`menuDelete`已建立。  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當覆寫<see cref="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" />衍生類別時，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" />方法。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnSelect">
      <MemberSignature Language="C#" Value="protected virtual void OnSelect (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelect(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelect (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelect(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelect : EventArgs -&gt; unit&#xA;override this.OnSelect : EventArgs -&gt; unit" Usage="menuItem.OnSelect e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.MenuItem.Select" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.MenuItem.Select>事件的<xref:System.Windows.Forms.MenuItem>類別，以指派的說明文字<xref:System.Windows.Forms.StatusBarPanel>的<xref:System.Windows.Forms.StatusBar>控制項。 這個範例需要<xref:System.Windows.Forms.MenuItem>命名的物件`menuOpen`， `menuSave`，和`menuExit`新增至<xref:System.Windows.Forms.MainMenu>表單上的控制項。 這個範例也需要<xref:System.Windows.Forms.StatusBar>控制項，名為`statusBar1`已新增至表單。 <xref:System.Windows.Forms.StatusBar>控制項應該包含<xref:System.Windows.Forms.StatusBarPanel>。  
  
 [!code-cpp[MenuItem.Select#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Select/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Select#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Select/CS/form1.cs#1)]
 [!code-vb[MenuItem.Select#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Select/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當覆寫<see cref="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" />衍生類別時，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" />方法。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OwnerDraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.OwnerDraw" />
      <MemberSignature Language="VB.NET" Value="Public Property OwnerDraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OwnerDraw { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OwnerDraw : bool with get, set" Usage="System.Windows.Forms.MenuItem.OwnerDraw" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是您所提供的程式碼繪製功能表項目，還是由 Windows 來繪製功能表項目。</summary>
        <value>如果功能表項目用程式碼繪製，則為 <see langword="true" />；功能表項目由 Windows 繪製，則為 <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Windows.Forms.MenuItem.OwnerDraw%2A>屬性設定為`true`，您需要處理所有繪製功能表項目。 您可以使用這項功能來建立您自己的特殊功能表顯示。  
  
   
  
## Examples  
 下列程式碼範例示範如何為主控描繪功能表項目包含的功能表。 這個範例組<xref:System.Windows.Forms.MenuItem.OwnerDraw%2A>屬性，並使用`AddHandler`陳述式並`AddressOf`運算子來指定委派，以便處理<xref:System.Windows.Forms.MenuItem.DrawItem>事件。 若要執行範例時，將它匯入的形式<xref:System>， <xref:System.Windows.Forms>，和<xref:System.Drawing>命名空間。 呼叫`InitializeMenu`從表單的建構函式或`Load`方法。  
  
 [!code-cpp[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Windows.Forms.Menu" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Menu Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Menu Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Menu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Menu ^ Parent { System::Windows::Forms::Menu ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.Menu" Usage="System.Windows.Forms.MenuItem.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Menu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出含有這個功能表項目的功能表。</summary>
        <value><see cref="T:System.Windows.Forms.Menu" />，表示含有這個功能表項目的功能表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性來取得<xref:System.Windows.Forms.Menu>子功能表的物件。 您可以轉型<xref:System.Windows.Forms.Menu>這個屬性所傳回的物件<xref:System.Windows.Forms.MenuItem>物件來管理它。  
  
   
  
## Examples  
 在此範例中，您建立主功能表和最上層功能表項目`menuItem1`(`File`)。 您也可以建立兩個功能表項目， `menuItem2` (`New`) 和`menuItem3`(`Open`)，並將其加入的功能表項目清單`menuItem1`。 然後檢查看看`menuItem3`有父功能表上，也就是，則為 true，並顯示此父功能表中的資訊在訊息方塊中。 這個範例需要您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[ParentMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ParentMenu/CPP/form1.cpp#1)]
 [!code-csharp[ParentMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ParentMenu/CS/form1.cs#1)]
 [!code-vb[ParentMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ParentMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformClick">
      <MemberSignature Language="C#" Value="public void PerformClick ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.PerformClick" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformClick ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformClick();" />
      <MemberSignature Language="F#" Value="member this.PerformClick : unit -&gt; unit" Usage="menuItem.PerformClick " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>產生 <see cref="E:System.Windows.Forms.Control.Click" /> 的 <see cref="T:System.Windows.Forms.MenuItem" /> 事件，模擬使用者按下的動作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個功能表來啟用透過程式碼的功能表項目，而不傳遞任何事件資訊。 例如，如果您想要啟用功能表項目為基礎，就會發生在您的應用程式中，您可以呼叫的動作<xref:System.Windows.Forms.MenuItem.PerformClick%2A>方法， <xref:System.Windows.Forms.MenuItem>。  
  
   
  
## Examples  
 在此範例中以程式設計方式按一下功能表項目使用`PerformClick`方法。 首先，您會建立主功能表 (`mainMenu1`) 並將它加入兩個功能表項目， `menuItem1` (`File`) 及`menuItem2`(`Edit`)。 您也使用<xref:System.Windows.Forms.MenuItem.Click>事件，以將資料傳送至事件處理常式中，按一下功能表項目時。 接著，您使用`PerformClick`方法來按一下`File`功能表項目。 當您啟動應用程式，`File`啟用功能表項目之後，且訊息方塊包含文字"File 功能表按一下"。 會出現在螢幕上。 這個範例需要您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[PerformClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PerformClick/CPP/form1.cpp#1)]
 [!code-csharp[PerformClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PerformClick/CS/form1.cs#1)]
 [!code-vb[PerformClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PerformClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSelect">
      <MemberSignature Language="C#" Value="public virtual void PerformSelect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformSelect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.PerformSelect" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PerformSelect ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PerformSelect();" />
      <MemberSignature Language="F#" Value="abstract member PerformSelect : unit -&gt; unit&#xA;override this.PerformSelect : unit -&gt; unit" Usage="menuItem.PerformSelect " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>引發這個功能表項目的 <see cref="E:System.Windows.Forms.MenuItem.Select" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可讓您將升級<xref:System.Windows.Forms.MenuItem.Select>事件，而沒有傳送任何事件資訊至事件處理常式。  
  
   
  
## Examples  
 在此範例中以程式設計方式選取功能表項目使用`PerformSelect`方法。 首先，您會建立主功能表 (`mainMenu1`) 並將它加入兩個功能表項目， `menuItem1` (`File`) 及`menuItem2`(`Edit`)。 您也使用<xref:System.Windows.Forms.MenuItem.Select>事件，以將資料傳送至事件處理常式中，選取功能表項目時。 接著，您使用`PerformSelect`方法來選取`File`功能表項目。 當您啟動應用程式，`File`選取功能表項目，且訊息方塊，其中包含文字"的功能表選取的檔案。 」 會出現在螢幕上。 這個範例需要您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[PerformSelect#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PerformSelect/CPP/form1.cpp#1)]
 [!code-csharp[PerformSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PerformSelect/CS/form1.cs#1)]
 [!code-vb[PerformSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PerformSelect/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.MenuItem.PerformClick" />
      </Docs>
    </Member>
    <Member MemberName="Popup">
      <MemberSignature Language="C#" Value="public event EventHandler Popup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Popup" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Popup" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Popup As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Popup;" />
      <MemberSignature Language="F#" Value="member this.Popup : EventHandler " Usage="member this.Popup : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於功能表項目的功能表項目清單顯示前。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個事件只會在功能表項目具有子功能表項目可以顯示時發生。 您可以使用這個事件處理常式來新增、 移除、 啟用、 停用，請選取此項目，或取消選取 根據您的應用程式的狀態，才能讓它們顯示的功能表項目。 如需有關如何處理事件的詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.MenuItem.Popup>事件，以判斷是否<xref:System.Windows.Forms.MenuItem>中所顯示的功能表顯示之前，已啟用支援剪下、 複製，並刪除作業的物件。 此範例會判斷如果`textBox1`，則<xref:System.Windows.Forms.TextBox>控制項在表單上、 已啟用、 具有輸入焦點，而且有之前啟用選取的文字<xref:System.Windows.Forms.MenuItem>物件。 這個範例需要該三<xref:System.Windows.Forms.MenuItem>物件會建立名為`menuCut`， `menuCopy`，和`menuDelete`已建立。  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RadioCheck">
      <MemberSignature Language="C#" Value="public bool RadioCheck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RadioCheck" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.RadioCheck" />
      <MemberSignature Language="VB.NET" Value="Public Property RadioCheck As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RadioCheck { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RadioCheck : bool with get, set" Usage="System.Windows.Forms.MenuItem.RadioCheck" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出如果選取 <see cref="T:System.Windows.Forms.MenuItem" />，是否顯示選項按鈕，而不顯示核取記號。</summary>
        <value>如果使用選項按鈕，而不用核取記號，則為 <see langword="true" />；功能表項目核取時顯示出標準的核取記號，則為 <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 核取記號不一定表示一組功能表項目是互斥的狀態。 若要向使用者表示功能表項目的核取記號會互斥，您可以使用這個屬性。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Windows.Forms.MenuItem.Checked%2A>屬性來變更應用程式的狀態。 在範例中，一組功能表項目會所提供的用來指定文字的色彩<xref:System.Windows.Forms.TextBox>控制項。 在範例中，提供事件處理常式會由<xref:System.Windows.Forms.MenuItem.Click>三個功能表項目的事件。 每個功能表項目指定的色彩`menuItemRed`， `menuItemGreen`，或`menuItemBlue`。 判斷哪一個功能表項目已按下、 會放置一個核取記號來選取的功能表項目和變更表單的文字色彩的事件處理常式<xref:System.Windows.Forms.TextBox>控制項，名為`textBox1`。 此範例也會使用<xref:System.Windows.Forms.MenuItem.RadioCheck%2A>屬性來示範如何使用選項按鈕核取來顯示互斥的功能表項目。 這個範例需要<xref:System.Drawing?displayProperty=nameWithType>已新增至表單，其中包含這個程式碼的命名空間。  
  
 [!code-cpp[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Checked" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public event EventHandler Select;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Select" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Select" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Select As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Select;" />
      <MemberSignature Language="F#" Value="member this.Select : EventHandler " Usage="member this.Select : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者將指標放在功能表項目上方時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當使用者將滑鼠指標置於上方的功能表項目時，通常會引發這個事件。 使用者會反白顯示功能表項目，使用鍵盤，使用方向鍵捲動至功能表項目時，也可能會引發此事件。 您可以使用這個事件，以顯示應用程式的 [狀態] 列中的這個功能表項目相關的詳細的說明字串。 如需有關如何處理事件的詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
> [!NOTE]
>  如果<xref:System.Windows.Forms.Menu.MenuItems%2A>屬性<xref:System.Windows.Forms.MenuItem>包含任何項目，就不會引發此事件。 針對父功能表項目不會引發這個事件。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.MenuItem.Select>事件的<xref:System.Windows.Forms.MenuItem>類別，以指派的說明文字<xref:System.Windows.Forms.StatusBarPanel>的<xref:System.Windows.Forms.StatusBar>控制項。 這個範例需要<xref:System.Windows.Forms.MenuItem>命名的物件`menuOpen`， `menuSave`，和`menuExit`新增至<xref:System.Windows.Forms.MainMenu>表單上的控制項。 這個範例也需要<xref:System.Windows.Forms.StatusBar>控制項，名為`statusBar1`已新增至表單。 <xref:System.Windows.Forms.StatusBar>控制項應該包含<xref:System.Windows.Forms.StatusBarPanel>。  
  
 [!code-cpp[MenuItem.Select#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Select/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Select#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Select/CS/form1.cs#1)]
 [!code-vb[MenuItem.Select#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Select/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MenuItem.Click" />
      </Docs>
    </Member>
    <Member MemberName="Shortcut">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Shortcut Shortcut { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Shortcut Shortcut" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Shortcut" />
      <MemberSignature Language="VB.NET" Value="Public Property Shortcut As Shortcut" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Shortcut Shortcut { System::Windows::Forms::Shortcut get(); void set(System::Windows::Forms::Shortcut value); };" />
      <MemberSignature Language="F#" Value="member this.Shortcut : System.Windows.Forms.Shortcut with get, set" Usage="System.Windows.Forms.MenuItem.Shortcut" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Shortcut</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出與功能表項目相關的快速鍵。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.Shortcut" /> 值。 預設為 <see langword="Shortcut.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 快速鍵提供方法必須經常啟動的使用者使用的功能表項目，在您的功能表系統，並提供您的應用程式的 「 鍵盤 」 存取權，並沒有滑鼠或其他指標裝置的存取權的使用者。  
  
   
  
## Examples  
 下列程式碼範例會建立功能表項目、 設定的標題、 指派攠摝坫、 讓功能表項目可見，並顯示快顯功能表項目的索引鍵顯示。 這個範例需要<xref:System.Windows.Forms.MenuItem>也就是已建立名為`menuItem1`。  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指派的值不是其中一個 <see cref="T:System.Windows.Forms.Shortcut" /> 值。</exception>
        <altmember cref="T:System.Windows.Forms.Shortcut" />
      </Docs>
    </Member>
    <Member MemberName="ShowShortcut">
      <MemberSignature Language="C#" Value="public bool ShowShortcut { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowShortcut" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.ShowShortcut" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowShortcut As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowShortcut { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowShortcut : bool with get, set" Usage="System.Windows.Forms.MenuItem.ShowShortcut" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出功能表項目標題的旁邊是否顯示出與功能表項目相關的快速鍵。</summary>
        <value>如果功能表項目標題的旁邊顯示快速組合鍵，則為 <see langword="true" />；不顯示快速組合鍵，則為 <see langword="false" />。 預設為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性需要提供的使用者隱藏的捷徑功能表選項，節省功能表的空間，或隱藏顯示的快速鍵。  
  
   
  
## Examples  
 下列程式碼範例會建立功能表項目、 設定的標題、 指派攠摝坫、 讓功能表項目可見，並顯示快顯功能表項目的索引鍵顯示。 這個範例需要<xref:System.Windows.Forms.MenuItem>也就是已建立名為`menuItem1`。  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Shortcut" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.MenuItem.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出功能表項目的標題。</summary>
        <value>功能表項目的文字標題。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您指定標題為您的功能表項目時，您也可以指定便捷鍵加上 '&' 的存取金鑰做該字元前面。 比方說，若要指定"F"中 「 檔案 」 做為便捷鍵，您會指定功能表項目的標題 」 及檔案 」。 您可以使用這項功能可提供您功能表的鍵盤巡覽。  
  
 將此屬性設定為"`-`」 讓您的功能表項目顯示為分隔符號 （水平列），而不是標準的功能表項目。  
  
   
  
## Examples  
 下列程式碼範例會建立功能表項目、 設定的標題、 指派攠摝坫、 讓功能表項目可見，並顯示快顯功能表項目的索引鍵顯示。 這個範例需要<xref:System.Windows.Forms.MenuItem>也就是已建立名為`menuItem1`。  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Mnemonic" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="menuItem.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回表示 <see cref="T:System.Windows.Forms.MenuItem" /> 的字串。</summary>
        <returns>字串，代表目前的 <see cref="T:System.Windows.Forms.MenuItem" />。 這個字串包括了控制項的類型與 <see cref="P:System.Windows.Forms.MenuItem.Text" /> 屬性。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Windows.Forms.MenuItem.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出功能表項目是否為可見。</summary>
        <value>功能表項目在功能表上可見，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性來修改而不需要合併功能表] 或 [停用功能表的功能表結構。 比方說，如果您想要隱藏完整的一段您的應用程式的功能表中的功能，您可以隱藏起來使用者藉由將此屬性設定為`false`。  
  
   
  
## Examples  
 下列程式碼範例會建立功能表項目、 設定的標題、 指派攠摝坫、 讓功能表項目可見，並顯示快顯功能表項目的索引鍵顯示。 這個範例需要<xref:System.Windows.Forms.MenuItem>也就是已建立名為`menuItem1`。  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>