<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dd78769c002ec6164dd33b8ddba8cc01deb5a7b9" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48704552" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供不受格式影響的資料傳送機制。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IDataObject`介面由<xref:System.Windows.Forms.Clipboard>類別和拖放作業中。  
  
 在類別內實作時<xref:System.Windows.Forms.IDataObject>方法可讓使用者將資料儲存在多個類別的執行個體中的格式。 將資料儲存在多個格式增加目標應用程式，您可能不知道，其格式需求，可以擷取儲存的資料的機會。 若要將資料儲存在執行個體<xref:System.Windows.Forms.IDataObject>，呼叫<xref:System.Windows.Forms.IDataObject.SetData%2A>方法和指定的資料格式`format`參數。 設定`autoConvert`參數來`false`如果您不想儲存的資料，並在擷取時轉換成另一種格式。 叫用<xref:System.Windows.Forms.IDataObject.SetData%2A>上的一個執行個體多次<xref:System.Windows.Forms.IDataObject>將資料儲存在多個格式。  
  
 擷取儲存的資料，從<xref:System.Windows.Forms.IDataObject>藉由呼叫<xref:System.Windows.Forms.IDataObject.GetData%2A>方法並指定資料格式中`format`參數。 設定`autoConvert`參數來`false`來擷取指定的格式儲存的資料。 若要將儲存的資料轉換成指定的格式，將`autoConvert`要`true`，或請勿使用`autoConvert`。  
  
 若要判斷儲存的資料格式<xref:System.Windows.Forms.IDataObject>，使用下列項目<xref:System.Windows.Forms.IDataObject>方法。  
  
-   呼叫<xref:System.Windows.Forms.IDataObject.GetFormats%2A>方法來擷取的陣列中的所有格式的資料可供使用。 設定`autoConvert`參數來`false`取得只在其中儲存資料的格式。 若要取得有可用資料的所有格式，請設定`autoConvert`至`true`，或不使用這個參數。  
  
-   呼叫<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>方法，以判斷是否有特定格式儲存的資料。 如果您不想要轉換成指定的格式儲存的資料，設定`autoConvert`參數來`false`。  
  
 請參閱<xref:System.Windows.Forms.DataObject>實作此介面的類別。 請參閱<xref:System.Windows.Forms.DataFormats>預先定義的類別<xref:System.Windows.Forms.Clipboard>資料格式。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>擷取與指定資料格式產生關聯的資料。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">要擷取的資料格式。 如需預先定義的格式，請參閱 <see cref="T:System.Windows.Forms.DataFormats" />。</param>
        <summary>擷取與指定資料格式產生關聯的資料。</summary>
        <returns>與指定之格式或 <see langword="null" /> 產生關聯的資料。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個方法在指定的格式中找不到資料，它會嘗試將資料轉換成格式。 如果資料無法轉換成指定的格式，則這個方法會傳回`null`。  
  
 若要判斷資料是否相關，或可以轉換成該格式，請呼叫<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>再呼叫<xref:System.Windows.Forms.IDataObject.GetData%2A>。 呼叫<xref:System.Windows.Forms.IDataObject.GetFormats%2A>取得一份有效的格式，這個執行個體中儲存的資料。  
  
> [!NOTE]
>  資料可以轉換成其他格式，如果儲存時指定，允許的轉換，而且如果所要求的格式與預存格式相容。 例如，資料儲存為 Unicode 可以轉換成文字。  
  
 這個方法的實作，請參閱<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 這個範例會使用<xref:System.Windows.Forms.DataObject>類別，它會實作`IDataObject,`若要示範如何使用`GetData`方法。 方法用來擷取資料儲存在`myDataObject`，這與相關聯`Text`格式。 此範例假設您已經建立<xref:System.Windows.Forms.Form>名為`Form1`並<xref:System.Windows.Forms.TextBox>名為`textBox1`。  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">
          <see cref="T:System.Type" />，表示要擷取的資料的格式。 如需預先定義的格式，請參閱 <see cref="T:System.Windows.Forms.DataFormats" />。</param>
        <summary>擷取與指定的類別型別格式相關的資料。</summary>
        <returns>與指定之格式或 <see langword="null" /> 產生關聯的資料。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個方法在指定的格式中找不到資料，它會嘗試將資料轉換成格式。 如果資料無法轉換成指定的格式，則這個方法會傳回`null`。  
  
 若要判斷資料是否相關，或可以轉換成該格式，請呼叫<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>再呼叫<xref:System.Windows.Forms.IDataObject.GetData%2A>。 呼叫<xref:System.Windows.Forms.IDataObject.GetFormats%2A>取得一份有效的格式，這個執行個體中儲存的資料。  
  
> [!NOTE]
>  資料可以轉換成其他格式，如果儲存時指定，允許的轉換，而且如果所要求的格式與預存格式相容。 例如，資料儲存為 Unicode 可以轉換成文字。  
  
 這個方法的實作，請參閱<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 這個範例會使用<xref:System.Windows.Forms.DataObject>類別，它會實作`IDataObject`，以示範如何使用`GetData`方法。 方法用來擷取資料儲存在`myObject`，這是特定的類型，與相關聯`myType`。 擷取的資料類型會顯示在訊息方塊。 此範例假設您已經建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">要擷取的資料格式。 如需預先定義的格式，請參閱 <see cref="T:System.Windows.Forms.DataFormats" />。</param>
        <param name="autoConvert">若要將資料轉換成指定的格式則為 <see langword="true" />，否則為 <see langword="false" />。</param>
        <summary>擷取與指定的資料格式相關的資料，使用布林值來決定是否要將資料轉換成格式。</summary>
        <returns>與指定之格式或 <see langword="null" /> 產生關聯的資料。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`autoConvert`參數是`true`和這個方法在指定的格式中找不到資料，它會嘗試將資料轉換成格式。 如果資料無法轉換成指定的格式，或是儲存資料時`autoConvert`參數設定為`false`，這個方法會傳回`null`。  
  
 如果`autoConvert`參數是`false`，這個方法會傳回資料中指定的格式，或`null`如果找不到任何資料格式如下。  
  
 若要判斷資料是否相關，或可以轉換成該格式，請呼叫<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>再呼叫<xref:System.Windows.Forms.IDataObject.GetData%2A>。 呼叫<xref:System.Windows.Forms.IDataObject.GetFormats%2A>取得一份有效的格式，這個執行個體中儲存的資料。  
  
> [!NOTE]
>  資料可以轉換成其他格式，如果儲存時指定，允許的轉換，而且如果所要求的格式與預存格式相容。 例如，資料儲存為 Unicode 可以轉換成文字。  
  
 這個方法的實作，請參閱<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 這個範例會使用<xref:System.Windows.Forms.DataObject>類別，它會實作`IDataObject`，以示範如何使用`GetData`方法。 此範例將擷取儲存的資料`DataObject`，並使用`autoConvert`參數來指定是否要轉換的資料格式。 首先，`myDataObject`建立文字資料。 然後此範例會嘗試兩次來擷取資料。 在第一次的試用版，其會指定其格式的字串，並設定`autoConvert`參數來`false`。 這個試用版失敗，，而且結果會顯示在訊息方塊標示為 「 訊息 #1 」。 在第二個的試用版，範例會擷取相同的資料`autoConvert`參數設定為`true`。 這個試用版成功轉換，且結果會顯示在訊息方塊標示為 「 訊息 #2 」。 此範例假設您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>決定儲存於這個執行個體中的資料是否與指定的格式相關。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">要檢查的格式。 如需預先定義的格式，請參閱 <see cref="T:System.Windows.Forms.DataFormats" />。</param>
        <summary>決定儲存於這個執行個體中的資料是否與指定的格式相關，或是可以轉換成指定的格式。</summary>
        <returns>如果儲存在這個執行個體中的資料與指定的格式相關，或是可以轉換成指定的格式則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法來判斷是否格式會存在於這<xref:System.Windows.Forms.DataObject>再呼叫<xref:System.Windows.Forms.IDataObject.GetData%2A>。 呼叫<xref:System.Windows.Forms.IDataObject.GetFormats%2A>的格式，可用於此執行個體。  
  
> [!NOTE]
>  資料可以轉換成其他格式，如果儲存時指定，允許的轉換，而且如果所要求的格式與預存格式相容。 例如，資料儲存為 Unicode 可以轉換成文字。  
  
 這個方法的實作，請參閱<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 這個範例會使用<xref:System.Windows.Forms.DataObject>類別，它會實作`IDataObject`，以示範如何使用`GetDataPresent`方法。 首先，它會建立使用字串的資料物件和`Text`格式。 然後它會確認資料已存在於`Text`格式化，並將結果顯示在訊息方塊。 此範例假設您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">
          <see cref="T:System.Type" />，表示要檢查的格式。 如需預先定義的格式，請參閱 <see cref="T:System.Windows.Forms.DataFormats" />。</param>
        <summary>決定儲存於這個執行個體中的資料是否與指定的格式相關，或是可以轉換成指定的格式。</summary>
        <returns>如果儲存在這個執行個體中的資料與指定的格式相關，或是可以轉換成指定的格式則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法來判斷是否格式會存在於這<xref:System.Windows.Forms.DataObject>再呼叫<xref:System.Windows.Forms.IDataObject.GetData%2A>。 呼叫<xref:System.Windows.Forms.IDataObject.GetFormats%2A>的格式，可用於此執行個體。  
  
> [!NOTE]
>  資料可以轉換成其他格式，如果儲存時指定，允許的轉換，而且如果所要求的格式與預存格式相容。 例如，資料儲存為 Unicode 可以轉換成文字。  
  
 這個方法的實作，請參閱<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 這個範例會使用<xref:System.Windows.Forms.DataObject>類別，它會實作`IDataObject`，以示範如何使用`GetDataPresent`方法。 首先，它會建立元件 (`myComponent`) 並將它儲存在資料物件 (`myDataObject`)。 然後它會檢查指定的資料是否儲存在`myDataObject`。 測試是否評估`true`，它會顯示在訊息方塊的結果，並在文字方塊中顯示的資料類型。 這個範例假設您已經建立<xref:System.Windows.Forms.Form>名為`Form1`並<xref:System.Windows.Forms.TextBox>名為`textBox1`。  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">要檢查的格式。 如需預先定義的格式，請參閱 <see cref="T:System.Windows.Forms.DataFormats" />。</param>
        <param name="autoConvert">若要決定是否要將儲存於這個執行個體的資料轉換成指定的格式則為 <see langword="true" />；若要檢查資料是否是指定的格式則為 <see langword="false" />。</param>
        <summary>決定儲存於這個執行個體中的資料是否與指定的格式相關，使用布林值來決定是否要將資料轉換成格式。</summary>
        <returns>如果資料在指定的格式中，或是可以轉換成指定的格式則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法來判斷是否格式會存在於這<xref:System.Windows.Forms.DataObject>再呼叫<xref:System.Windows.Forms.IDataObject.GetData%2A>。 呼叫<xref:System.Windows.Forms.IDataObject.GetFormats%2A>的格式，可用於此執行個體。  
  
 這個方法會傳回`true`時：  
  
-   `autoConvert`參數是`true`和資料的格式，可以轉換成適當的格式。  
  
-   `autoConvert`參數是`false`且資料在適當的格式。  
  
 這個方法會傳回`false`時：  
  
-   `autoConvert`參數是`true`，這個方法中指定的格式中，找不到資料和它無法將資料轉換成指定的格式，或儲存資料時`autoConvert`設定為`false`。  
  
-   `autoConvert`參數是`false`，和資料不存在於此執行個體中指定的格式。  
  
> [!NOTE]
>  資料可以轉換成其他格式，如果儲存時指定，允許的轉換，而且如果所要求的格式與預存格式相容。 例如，資料儲存為 Unicode 可以轉換成文字。  
  
 這個方法的實作，請參閱<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 這個範例會使用<xref:System.Windows.Forms.DataObject>類別，它會實作`IDataObject`，以示範如何使用`GetDataPresent`方法。 首先，它會建立資料物件 (`myDataObject`) 使用字串和`Text`格式。 然後它會查詢相關聯的資料物件`Text`格式，與`autoConvert`參數設為`false`。 這個試用版失敗，，而且結果會顯示在訊息方塊標示為 「 訊息 #1 」。 在第二個的試用版，它會設定`autoConvert`參數來`true`。 這個試用版成功轉換，且結果會顯示在訊息方塊標示為 「 訊息 #2 」。 此範例假設您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回與儲存於這個執行個體中的資料相關的，或者可以轉換的所有格式的清單。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回與儲存於這個執行個體中的資料相關的，或者可以轉換的所有格式的清單。</summary>
        <returns>名稱陣列，表示這個物件中儲存的資料所支援的所有格式的清單。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫此方法，以取得支援的資料格式，然後再呼叫<xref:System.Windows.Forms.IDataObject.GetData%2A>方法。 請參閱<xref:System.Windows.Forms.DataFormats>類別預先定義的格式。  
  
> [!NOTE]
>  資料可以轉換成其他格式，如果儲存時指定，允許的轉換，而且如果所要求的格式與預存格式相容。 例如，資料儲存為 Unicode 可以轉換成文字。  
  
 這個方法的實作，請參閱<xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 這個範例會使用<xref:System.Windows.Forms.DataObject>類別，它會實作`IDataObject`，以示範如何使用`GetFormats`方法。 首先，它會建立資料物件 (`myDataObject`) 使用字串和`Text`格式。 然後它會擷取所有的資料格式和資料物件中的資料轉換格式，並在訊息方塊中顯示結果清單。 這個範例假設您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert">若要擷取與儲存於這個執行個體中的資料相關的、或是可以轉換的所有格式則為 <see langword="true" />；若只要擷取原生的資料格式則為 <see langword="false" />。</param>
        <summary>取得與儲存於這個執行個體中的資料相關的，或者可以轉換的所有格式清單，使用布林值來決定要擷取資料可以轉換的所有格式，還是只要擷取原生的資料格式。</summary>
        <returns>名稱陣列，表示這個物件中儲存的資料所支援的所有格式的清單。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫此方法，以取得支援的資料格式，然後再呼叫<xref:System.Windows.Forms.IDataObject.GetData%2A>方法。 請參閱<xref:System.Windows.Forms.DataFormats>類別預先定義的格式。  
  
> [!NOTE]
>  資料可以轉換成其他格式，如果儲存時指定，允許的轉換，而且如果所要求的格式與預存格式相容。 例如，資料儲存為 Unicode 可以轉換成文字。  
  
 這個方法的實作，請參閱<xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 這個範例會使用<xref:System.Windows.Forms.DataObject>類別，它會實作`IDataObject`，以示範如何使用`GetFormats`方法。 首先，它會建立資料物件 (`myDataObject`) 使用字串和`UnicodeText`格式。 接著它會將兩個查詢，以取得與資料相關聯的格式。 在第一個查詢中，它會設定`autoConvert`參數來`false`： 在此情況下，傳回資料的原生格式。 在第二個查詢中，它會設定`autoConvert`參數來`true`，好讓它取得的格式，包括資料可以轉換成的格式清單。 在每個案例中，產生的清單會顯示在訊息方塊。 這個範例假設您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定的資料和其相關的格式儲存於這個執行個體中。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">要儲存的資料。</param>
        <summary>使用格式的資料類別，將指定的資料儲存於這個執行個體中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 格式被衍生自資料類別。  
  
 使用這個方法儲存的資料可以轉換成相容的格式，並在擷取時。  
  
 這個方法的實作，請參閱<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 這個範例會使用<xref:System.Windows.Forms.DataObject>類別，它會實作`IDataObject`，以示範如何使用`SetData`方法。 首先，它會建立元件 (`myComponent`) 並將它儲存在資料物件 (`myDataObject`)。 然後它會檢查指定的資料是否會儲存在資料物件，並在訊息方塊中顯示結果。 此範例假設您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">與資料關聯的格式。 如需預先定義的格式，請參閱 <see cref="T:System.Windows.Forms.DataFormats" />。</param>
        <param name="data">要儲存的資料。</param>
        <summary>將指定的資料和其相關的格式儲存於這個執行個體中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您不知道目標應用程式的格式，您可以使用此方法的多個格式來儲存資料。  
  
 使用這個方法儲存的資料可以轉換成相容的格式，並在擷取時。  
  
 這個方法的實作，請參閱<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 這個範例會使用<xref:System.Windows.Forms.DataObject>類別，它會實作`IDataObject`，以示範如何使用`SetData`方法。 首先，它會建立資料物件 (`myDataObject`)，並將字串儲存在物件指定`UnicodeText`格式。 然後它會擷取該物件指定儲存的資料`Text`格式，以便將資料轉換為`Text`格式。 結果會顯示在訊息方塊。 這個範例假設您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">
          <see cref="T:System.Type" />，表示與資料相關的格式。 如需預先定義的格式，請參閱 <see cref="T:System.Windows.Forms.DataFormats" />。</param>
        <param name="data">要儲存的資料。</param>
        <summary>將指定的資料和其相關的類別型別儲存在這個執行個體中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您不知道目標應用程式的格式，您可以使用此方法的多個格式來儲存資料。  
  
 使用這個方法儲存的資料可以轉換成相容的格式，並在擷取時。  
  
 這個方法的實作，請參閱<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 這個範例會使用<xref:System.Windows.Forms.DataObject>類別，它會實作`IDataObject`，以示範如何使用`SetData`方法。 首先，它會建立元件 (`myComponent`) 並將它儲存在資料物件 (`myDataObject`)，並使用`myType`指定資料格式。 然後它會檢查指定之型別的資料是否會儲存在物件中，並在訊息方塊中顯示結果。 此範例假設您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">與資料關聯的格式。 如需預先定義的格式，請參閱 <see cref="T:System.Windows.Forms.DataFormats" />。</param>
        <param name="autoConvert">若資料可以被轉換成另一種格式則為 <see langword="true" />，否則為 <see langword="false" />。</param>
        <param name="data">要儲存的資料。</param>
        <summary>將指定的資料和其相關的格式儲存於這個執行個體中，使用布林值指定是否可以將資料轉換成另一種格式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您不知道目標應用程式的格式，您可以使用此方法的多個格式來儲存資料。  
  
 這個方法的實作，請參閱<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 這個範例會使用<xref:System.Windows.Forms.DataObject>類別，它會實作`IDataObject`，以示範如何使用`SetData`方法。 首先，它會建立資料物件 (`myDataObject`)，並將`UnicodeText`中，字串與`autoConvert`參數設定為`false`。 然後它會擷取與儲存在物件中的資料相關聯的格式，並在訊息方塊中顯示結果。 與資料相關聯的唯一格式是`UnicodeText`格式。 這個範例假設您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>