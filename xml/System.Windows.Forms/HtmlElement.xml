<Type Name="HtmlElement" FullName="System.Windows.Forms.HtmlElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a86d3c0b0580ad13ab92f6f2399771049ddd054c" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34452381" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HtmlElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlElement extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlElement sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>代表網頁內的 HTML 項目。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement> 代表 HTML 文件中的項目之任何可能的類型，例如`BODY`， `TABLE`，和`FORM`，和其他項目。 這個類別會公開最常見的屬性，您可以預期所有項目上找不到。  
  
 大部分的項目可以有*子項目*： 位於其下方的其他 HTML 項目。 使用<xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>屬性來測試是否為指定項目具有子系，而<xref:System.Windows.Forms.HtmlElement.Children%2A>来逐一查看這些集合。 <xref:System.Windows.Forms.HtmlElement.Parent%2A>屬性會傳回<xref:System.Windows.Forms.HtmlElement>中目前的項目巢狀。  
  
 您通常需要存取的屬性、 屬性和方法不會直接公開所對應的項目上<xref:System.Windows.Forms.HtmlElement>，例如`SRC`屬性`IMG`項目或`Submit`方法`FORM`。 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>和<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>方法可讓您擷取及修改任何屬性或屬性上的特定項目，雖然<xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>提供存取任何未公開在受管理文件物件模型 (DOM) 的方法。 如果您的應用程式具有 unmanaged 程式碼權限，您也可以存取未公開的屬性和方法的<xref:System.Windows.Forms.HtmlElement.DomElement%2A>屬性。  
  
 使用<xref:System.Windows.Forms.HtmlElement.TagName%2A>来測試的項目是否屬於特定型別的屬性。  
  
 在執行階段可以修改任何 HTML 文件。 您可以建立新<xref:System.Windows.Forms.HtmlElement>物件與<xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>方法<xref:System.Windows.Forms.HtmlDocument>，並將其新增到另一個項目使用<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>或<xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>方法。 您也可以建立為 HTML 標記的項目，並將它們指派給現有項目<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何檢查任意的 HTML 文件，並衍生描述 HTML 元素，包含縮排的字串，以及用來指示如何深度的層級編號巢狀項目文件中。 這個程式碼範例需要您的應用程式主機<xref:System.Windows.Forms.WebBrowser>控制項，名為`WebBrowser1`。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlElement#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection All { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection All" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.All" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property All As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ All { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前項目下之所有項目的 <see cref="T:System.Windows.Forms.HtmlElementCollection" />。</summary>
        <value>目前項目的直接或間接子系之所有項目的集合。 如果目前的項目是<c>資料表</c>，例如<see cref="P:System.Windows.Forms.HtmlElement.All" />會傳回每個<c>TH</c>， <c>TR</c>，和<c>TD</c>在資料表中，項目以及任何其他項目，例如<c>DIV</c>和<c>範圍</c>中儲存格所包含的元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要存取僅將目前的項目，當做其直接父這些項目，請使用<xref:System.Windows.Forms.HtmlElement.Children%2A>集合改為。  
  
 在此集合中的項目不一定會傳回來源順序。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.Children" />
      </Docs>
    </Member>
    <Member MemberName="AppendChild">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement AppendChild (System.Windows.Forms.HtmlElement newElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement AppendChild(class System.Windows.Forms.HtmlElement newElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendChild (newElement As HtmlElement) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ AppendChild(System::Windows::Forms::HtmlElement ^ newElement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newElement" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="newElement">要附加至樹狀目錄中這個位置的 <see cref="T:System.Windows.Forms.HtmlElement" />。</param>
        <summary>為另一個項目的樹狀子目錄加入項目。</summary>
        <returns>其後的項目已加入樹狀目錄中。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 文件物件模型 (DOM) 可讓您修改 HTML 中的檔案數種方式的執行階段內容。 使用<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>現有文件，加入新項目或移動項目頁面上。  
  
 如果父代的項目，將項目附加至另一個項目會自動移除該元素從先前父代。  
  
 在執行階段使用的文件進行任何新增項目<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>並不會保存在呼叫時<xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A>方法<xref:System.Windows.Forms.WebBrowser>控制項。  
  
   
  
## Examples  
 下列程式碼範例會建立新的超連結使用<xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>方法並將它加入結尾的頁面上，使用`AppendChild`上`BODY`項目。 這個範例需要您的應用程式包含<xref:System.Windows.Forms.WebBrowser>控制項，名為`WebBrowser1`。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlElement#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.CreateElement(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">要處理的事件名稱。</param>
        <param name="eventHandler">處理此事件的 Managed 程式碼。</param>
        <summary>將具名事件的事件處理常式加入 HTML 文件物件模型 (DOM)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 管理文件物件模型 (DOM) 會公開只有選取的事件數目。 針對特定類型的項目; 只定義的大多數未公開的事件例如`submit`事件，這是只有在有效`FORM`項目。 使用<xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A>這些未公開的事件加入事件處理常式。  
  
 您不應該附加至文件或其物件事件，直到文件已完成載入。 您應該呼叫這個方法最舊的處於<xref:System.Windows.Forms.WebBrowser.DocumentCompleted>事件<xref:System.Windows.Forms.WebBrowser>控制項。  
  
 如需可用的 unmanaged 事件的詳細資訊，請參閱[存取 Managed HTML 文件物件模型上的未公開成員](~/docs/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model.md)與樣式有關介面：[樣式](http://go.microsoft.com/fwlink/?LinkId=104876)， [IHTMLElement2](http://go.microsoft.com/fwlink/?LinkId=104877)， [IHTMLElement3](http://go.microsoft.com/fwlink/?LinkId=104878)， [IHTMLElement4](http://go.microsoft.com/fwlink/?LinkId=104879)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHaveChildren">
      <MemberSignature Language="C#" Value="public bool CanHaveChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHaveChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.CanHaveChildren" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanHaveChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHaveChildren { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出此項目是否可以有子項目。</summary>
        <value>如果項目可以有子項目，則為 <see langword="true" />；否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 某些項目，例如`IMG`和`SCRIPT`，不能有任何子系。 使用這個屬性，才能呼叫<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>或<xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>任意項目上。  
  
   
  
## Examples  
 下列程式碼範例會處理<xref:System.Windows.Forms.HtmlElement.Click>事件<xref:System.Windows.Forms.HtmlDocument>。 如果項目不是先前使用滑鼠點按選取，程式碼會將項目指派給名為私用類別變數`MoveElement`。 如果選取項目，則程式碼會嘗試將它附加至剛剛所選取的項目。 這個程式碼範例需要您的應用程式主機<xref:System.Windows.Forms.WebBrowser>控制項，名為`WebBrowser1`，和您已經加入的事件處理常式<xref:System.Windows.Forms.HtmlElement.Click>事件<xref:System.Windows.Forms.HtmlDocument>。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlElement#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Children" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Children" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Children As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Children { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前項目之所有子系的 <see cref="T:System.Windows.Forms.HtmlElementCollection" />。</summary>
        <value>將目前項目當做父代的所有 <see cref="T:System.Windows.Forms.HtmlElement" /> 物件之集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 許多 HTML 檔案內的項目可以有其下方的其他 HTML 項目。 <xref:System.Windows.Forms.HtmlElement.Children%2A>集合提供簡單的機制，用來瀏覽文件的樹狀結構。  
  
 <xref:System.Windows.Forms.HtmlElement.Children%2A> 只會公開其直接父代為目前的項目項目。 如果您有<xref:System.Windows.Forms.HtmlElement>如`TABLE`項目，<xref:System.Windows.Forms.HtmlElement.Children%2A>可讓您的所有`TR`（資料列） 內的項目`TABLE`。 擷取`TD`（儲存格） 內所包含的項目`TR`項目，您必須使用<xref:System.Windows.Forms.HtmlElement.Children%2A>上每個個別的收集`TR`項目或使用<xref:System.Windows.Forms.HtmlElement.All%2A>集合<xref:System.Windows.Forms.HtmlElement>。  
  
 來源順序不保證此集合中的項目。  
  
 如果<xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>是`false`，`Children`永遠為空白。  
  
   
  
## Examples  
 下列程式碼範例會檢查任意的 HTML 文件，並衍生可描述項目，包含縮排字串以及用來指示如何深度的層級編號巢狀項目文件中。 其做法是搜尋`Children`集合的所有項目以遞迴方式在文件的最上方的 HTML 元素開始。 這個程式碼範例會要求您的應用程式具有<xref:System.Windows.Forms.WebBrowser>控制項，名為`WebBrowser1`。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlElement#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.All" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Click;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者使用滑鼠左鍵按一下此項目時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以取消的預設動作<xref:System.Windows.Forms.HtmlElement.Click>藉由設定項目上的事件<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
 A<xref:System.Windows.Forms.HtmlElement.Click>項目上的事件也會發生在該元素的父項目，然後在<xref:System.Windows.Forms.HtmlDocument>類別本身，除非您設定<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
 如果使用者不會不目前具有輸入焦點的項目上按一下<xref:System.Windows.Forms.HtmlElement.Click>之後就會發生的事件<xref:System.Windows.Forms.HtmlElement.Focusing>事件前,<xref:System.Windows.Forms.HtmlElement.LostFocus>該元素的事件。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.Click>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.Click>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#432](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#432)]
 [!code-vb[System.Windows.Forms.EventExamples#432](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#432)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ClientRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ClientRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ClientRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ClientRectangle { System::Drawing::Rectangle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 HTML 文件中項目的工作區 (Client Area) 之界限。</summary>
        <value>此項目佔據的工作區，要減掉框線和捲軸所用的所有區域。 若要取得這個項目的位置和維度 (包括其裝飾)，請改用 <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.ClientRectangle%2A> 會傳回位置資料，只對項目已指派明確的高度和寬度或使用絕對位置的項目。 文件絕對定位的位置樣式設定為如果`absolute`之後的它可以位於任何座標上的 HTML 網頁。  
  
   
  
## Examples  
 假設您已載入下列 HTML 網頁至託管的執行個體<xref:System.Windows.Forms.WebBrowser>控制項。  
  
```  
<HTML>  
  
    <BODY>  
  
        <DIV id="div1" style="position:absolute;top:100px;left:100px;border-      style:solid;border-width:1px;">  
            Edit this text.  
        </DIV>  
  
    </BODY>  
  
</HTML>  
```  
  
 下列程式碼範例示範如何擷取此項目，並擴充其維度，如果用戶端區域不超過 400 像素寬 x 50 像素高，而且也會設定`DIV`至`contentEditable`狀態，讓使用者可以輸入文字。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlElement#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">要處理的事件名稱。</param>
        <param name="eventHandler">處理此事件的 Managed 程式碼。</param>
        <summary>從 HTML 文件物件模型 (DOM) 上的具名事件移除事件處理常式。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個項目所屬的 <see cref="T:System.Windows.Forms.HtmlDocument" />。</summary>
        <value>此項目的父代文件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 某些 HTML 頁面可以裝載框架使用`FRAMESET`標記。 在此情況下，每個個別`FRAME`元素會包含自己的執行個體<xref:System.Windows.Forms.HtmlDocument>。 當您從事件處理常式中收到的項目參考，這個屬性便最有用<xref:System.Windows.Forms.HtmlElementEventArgs>，而且需要執行一些動作項目所在的文件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.HtmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="DomElement">
      <MemberSignature Language="C#" Value="public object DomElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.DomElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomElement As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomElement { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>為此項目取得 Unmanaged 介面指標。</summary>
        <value>COM <c>IUnknown</c>指標的項目，您可以轉換成 HTML 元素的其中一個介面，例如<c>樣式</c>。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement> 是包裝函式的 Internet Explorer 文件物件模型 (DOM)，以撰寫使用元件物件模型 (COM)。 如果您需要存取未公開的屬性或方法的基礎 COM 介面，例如`IHTMLElement`，您可以使用此物件來查詢它們。  
  
 若要使用的 unmanaged 的介面，您必須將 MSHTML 程式庫 (mshtml.dll) 匯入您的應用程式。 不過，您也可以執行未公開的屬性和方法使用`Invoke`方法。  
  
   
  
## Examples  
 下列程式碼範例會使用目前所選取的文字並將它轉換成超連結，使用者選擇的 url 未受管理的介面。 此程式碼假設您的表單具有寫入<xref:System.Windows.Forms.WebBrowser>控制項，名為`WebBrowser1`，且您已經為您的專案參考加入將 unmanaged 的 MSHTML 程式庫。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.HtmlElement#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.DomDocument" />
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoubleClick As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DoubleClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者快速而連續地使用滑鼠左鍵按下某項目兩次時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 按兩下是由使用者的作業系統的滑鼠設定決定。 使用者可以設定滑鼠按鍵的按一下之間應間隔多少時間才視為按兩下，而不是兩次按一下。  
  
 您可以取消的預設動作<xref:System.Windows.Forms.HtmlElement.DoubleClick>藉由設定項目上的事件<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
 A<xref:System.Windows.Forms.HtmlElement.DoubleClick>項目上的事件也會發生在該元素的父項目，然後在<xref:System.Windows.Forms.HtmlDocument>類別本身，除非您設定<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.DoubleClick>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.DoubleClick>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#433](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#433)]
 [!code-vb[System.Windows.Forms.EventExamples#433](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#433)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Drag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Drag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Drag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drag As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Drag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者拖曳文字到各種位置時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 拖曳文字到下列位置時，就會發生此事件：  
  
-   內或之間 HTML 網頁中裝載<xref:System.Windows.Forms.WebBrowser>控制項或 Internet Explorer  
  
-   另一個應用程式  
  
-   Windows 桌面  
  
 您可以取消的預設動作<xref:System.Windows.Forms.HtmlElement.Drag>藉由設定項目上的事件<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
 A<xref:System.Windows.Forms.HtmlElement.Drag>項目上的事件也會發生在該元素的父項目，然後在<xref:System.Windows.Forms.HtmlDocument>類別本身，除非您設定<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.Drag>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.Drag>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#434](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#434)]
 [!code-vb[System.Windows.Forms.EventExamples#434](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#434)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragEnd">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragEnd;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragEnd" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragEnd" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnd As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragEnd;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者完成拖曳作業時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以取消的預設動作<xref:System.Windows.Forms.HtmlElement.DragEnd>藉由設定項目上的事件<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
 A<xref:System.Windows.Forms.HtmlElement.DragEnd>項目上的事件也會發生在該元素的父項目，然後在<xref:System.Windows.Forms.HtmlDocument>類別本身，除非您設定<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.DragEnd>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.DragEnd>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#435](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#435)]
 [!code-vb[System.Windows.Forms.EventExamples#435](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#435)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當使用者不再拖曳項目到這個項目上時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.DragLeave>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.DragLeave>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#436](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#436)]
 [!code-vb[System.Windows.Forms.EventExamples#436](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#436)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者拖曳文字到某項目上時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以取消的預設動作<xref:System.Windows.Forms.HtmlElement.DragOver>藉由設定項目上的事件<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
 A<xref:System.Windows.Forms.HtmlElement.DragOver>項目上的事件也會發生在該元素的父項目，然後在<xref:System.Windows.Forms.HtmlDocument>類別本身，除非您設定<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.DragOver>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.DragOver>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#437](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#437)]
 [!code-vb[System.Windows.Forms.EventExamples#437](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#437)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定使用者是否可以將資料輸入此項目中。</summary>
        <value>如果這個項目允許使用者輸入，則為 <see langword="true" />；否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如`FORM`元素，例如文字方塊和選項按鈕，設定<xref:System.Windows.Forms.HtmlElement.Enabled%2A>至`false`會防止使用者使用這些表單欄位。 對於其他項目，例如`DIV`或`SPAN`，設定<xref:System.Windows.Forms.HtmlElement.Enabled%2A>至`false`會導致出現陰影的項目內的所有文字; 不過，文字會仍可選取。 若要取消選取，將 未公開的事件處理常式`onselectstart`事件使用<xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要測試是否相等的物件。</param>
        <summary>測試提供的物件是否等於目前的項目。</summary>
        <returns>如果 <paramref name="obj" /> 為 <see cref="T:System.Windows.Forms.HtmlElement" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstChild">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement FirstChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement FirstChild" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.FirstChild" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstChild As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ FirstChild { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得文件樹狀目錄中這個項目底下的下一個項目。</summary>
        <value>
          <see cref="T:System.Windows.Forms.HtmlElement" />，代表目前項目之下所包含的第一個項目 (依據來源順序)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.HtmlElement.FirstChild%2A>搭配<xref:System.Windows.Forms.HtmlElement.NextSibling%2A>查核 HTML 文件的文件樹狀結構。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將使用者輸入焦點放在目前的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定焦點的項目上同時該元素的焦點轉移並使它的作用中的項目;例如，具有焦點的項目會傳回<xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A>屬性<xref:System.Windows.Forms.HtmlDocument>。  
  
 之後使用者輸入的任何按鍵<xref:System.Windows.Forms.HtmlElement.Focus%2A>已呼叫會傳送至該元素。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Focusing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Focusing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Focusing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Focusing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Focusing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於此項目第一次收到使用者輸入焦點時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 先切換到另一個應用程式使用工作列或 ALT + TAB 鍵使用者會收到焦點的項目<xref:System.Windows.Forms.HtmlElement.Focusing>和<xref:System.Windows.Forms.HtmlElement.GotFocus>事件一次當使用者切換回您的應用程式。  
  
 您無法取消此事件的預設行為。 若要移除焦點的項目，呼叫<xref:System.Windows.Forms.HtmlElement.Focus%2A>內的不同項目上<xref:System.Windows.Forms.HtmlElement.GotFocus>事件。  
  
 A<xref:System.Windows.Forms.HtmlElement.Focusing>項目上的事件也會發生該元素的父代，然後在<xref:System.Windows.Forms.HtmlDocument>類別本身，除非您設定<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.Focusing>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.Focusing>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#438](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#438)]
 [!code-vb[System.Windows.Forms.EventExamples#438](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#438)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public string GetAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttribute (attributeName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAttribute(System::String ^ attributeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">屬性的名稱。 這個引數不區分大小寫。</param>
        <summary>擷取此項目上具名屬性的值。</summary>
        <returns>項目上這個屬性的值，為 <see cref="T:System.String" /> 值。 如果指定的屬性不存在這個項目上，則會傳回空字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以 HTML 屬性，則該元素的任何有效的名稱/值組。 <xref:System.Windows.Forms.HtmlElement> 公開 （expose) 只會留下任何這些僅適用於特定類型的項目; 的所有項目的通用的屬性`SRC`是預先定義的屬性`IMG`標記，例如，但不適用於`DIV`標記。 使用<xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>和<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>操作不會公開在受管理文件物件模型 (DOM) 的屬性。  
  
 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 和<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>不區分大小寫。  
  
   
  
## Examples  
 下列程式碼範例會擷取所有`META`內 HTML 標記的文件，使用<xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>來尋找`META`標記名稱`Description`。 這個範例需要您的應用程式具有<xref:System.Windows.Forms.WebBrowser>控制項，名為`WebBrowser1`。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElementCollection GetElementsByTagName(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementsByTagName (tagName As String) As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElementCollection ^ GetElementsByTagName(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">您想擷取其 <see cref="T:System.Windows.Forms.HtmlElement" /> 物件的標記名稱。</param>
        <summary>擷取 HTML 中由指定 <c>HTML</c> 標記所表示的項目集合。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.HtmlElementCollection" />，包含其 <c>HTML</c> 標記名稱為 <paramref name="tagName" /> 的所有項目。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>做為特定型別的雜湊函式。</summary>
        <returns>目前 <see cref="T:System.Object" /> 的雜湊碼。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於此項目已經收到使用者輸入焦點時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您無法取消此事件的預設行為，也無法防止反昇。 若要移除焦點的項目，呼叫<xref:System.Windows.Forms.HtmlElement.Focus%2A>內的不同項目上<xref:System.Windows.Forms.HtmlElement.GotFocus>事件。  
  
   
  
## Examples  
 將下列 HTML 程式碼儲存至檔案，並載入檔案貼入<xref:System.Windows.Forms.WebBrowser>Windows Form 專案中的控制項。  
  
```  
<HTML>  
    <BODY>  
        <FORM name="form1">  
            <INPUT type="text" size=20 name="text1">  
            <INPUT type="text" size=20 name="text2">  
            <INPUT type="text" size=20 name="text3">  
        </FORM>  
    </BODY>  
</HTML>  
```  
  
 下列程式碼範例可避免在下一個`INPUT`無法接收使用者輸入的焦點，如果上一個項目包含不超過五個字元的定位順序中的項目。 這個範例需要先前所述的 HTML 檔案載入的執行個體<xref:System.Windows.Forms.WebBrowser>控制項，名為`WebBrowser1`。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlElement#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Id" />
      <MemberSignature Language="VB.NET" Value="Public Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來識別項目的標籤。</summary>
        <value>項目的唯一識別項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.Id%2A> 必須是唯一的。您不能有具有相同的兩個項目<xref:System.Windows.Forms.HtmlElement.Id%2A>內相同的文件。 使用<xref:System.Windows.Forms.HtmlElement.Name%2A>屬性來提供一組邏輯相關的項目相同的識別項。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="InnerHtml">
      <MemberSignature Language="C#" Value="public string InnerHtml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerHtml" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.InnerHtml" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerHtml As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InnerHtml { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定此項目之下的 HTML 標記。</summary>
        <value>定義目前項目的子項目之 HTML 標記。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有幾種方式可以將新項目新增至現有的 HTML 頁面上，例如<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>和<xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>方法。 使用<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>通常是最快的方法，您必須在您的新項目上設定多屬性或樣式時，將新的內容。  
  
 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 不同於<xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>在於<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>將不會包含代表您要呼叫的物件的 HTML。 請參閱<xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>如需有關這兩個屬性之間的差異。  
  
 設定<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>終結先前附加至項目的任何子系。 如果您從 DOM 中擷取的項目，然後將新的 HTML 指派給其父代<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>屬性，您可將項目的參考會變成無法，和其屬性和方法呼叫時，其行為未定義。  
  
 對於某些項目，設定<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>不是有效的作業。 某些 HTML 標記中有沒有結結尾標記，例如`IMG`標記，並因此不能包含巢狀項目。 某些標記，例如`SCRIPT`標記中，僅可包含文字內容; 設定<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>會導致錯誤。 這兩種類型的標記<xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>屬性會傳回`false`。 不過，您也無法設定<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>上`TABLE`和`TR`項目，做為將指派給這些元素的格式不正確的 HTML 可能會損毀文件的呈現。 使用<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>或`insertRow`和`insertCell`上未受管理的方法`IHTMLTable`介面来加入的資料列和儲存格`TABLE`。  
  
 如果您只需要將文字指派給項目和沒有 HTML 標記，使用<xref:System.Windows.Forms.HtmlElement.InnerText%2A>屬性改為。  
  
 指派值給<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>會破壞先前指派 使用任何文字值<xref:System.Windows.Forms.HtmlElement.InnerText%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">不允許建立這個項目的子項目。</exception>
        <altmember cref="M:System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)" />
        <altmember cref="M:System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)" />
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerText" />
      </Docs>
    </Member>
    <Member MemberName="InnerText">
      <MemberSignature Language="C#" Value="public string InnerText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.InnerText" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InnerText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定指派給此項目的文字。</summary>
        <value>此項目的文字，未存在任何 HTML 標記。 如果此項目包含子項目，將只會保留那些子項目中的文字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您嘗試將 HTML 指派給具有的項目<xref:System.Windows.Forms.HtmlElement.InnerText%2A>，就如同您檢視 HTML 文字檔案中，將會顯示為常值，在文件中的 HTML 程式碼。 如果您指派給項目使用的 HTML<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>屬性，<xref:System.Windows.Forms.HtmlElement.InnerText%2A>將傳回的所有文字，以標記的 HTML 中移除。  
  
 指派值給<xref:System.Windows.Forms.HtmlElement.InnerText%2A>將摧毀任何屬於元素的子項目。  
  
   
  
## Examples  
 下列程式碼會建立新的超連結使用<xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>，並將文字指派給連結使用<xref:System.Windows.Forms.HtmlElement.InnerText%2A>屬性。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlElement#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">指定的項目不能包含文字 (例如 <c>IMG</c> 項目)。</exception>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerHtml" />
      </Docs>
    </Member>
    <Member MemberName="InsertAdjacentElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement InsertAdjacentElement (System.Windows.Forms.HtmlElementInsertionOrientation orient, System.Windows.Forms.HtmlElement newElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement InsertAdjacentElement(valuetype System.Windows.Forms.HtmlElementInsertionOrientation orient, class System.Windows.Forms.HtmlElement newElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertAdjacentElement (orient As HtmlElementInsertionOrientation, newElement As HtmlElement) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ InsertAdjacentElement(System::Windows::Forms::HtmlElementInsertionOrientation orient, System::Windows::Forms::HtmlElement ^ newElement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orient" Type="System.Windows.Forms.HtmlElementInsertionOrientation" />
        <Parameter Name="newElement" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="orient">要插入此項目的位置與目前的項目有關。</param>
        <param name="newElement">要插入的新項目。</param>
        <summary>將新的項目插入文件物件模型 (DOM)。</summary>
        <returns>剛剛插入的 <see cref="T:System.Windows.Forms.HtmlElement" />。 如果插入失敗，這會傳回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 請勿呼叫這個方法之前之後<xref:System.Windows.Forms.WebBrowser.DocumentCompleted>事件<xref:System.Windows.Forms.WebBrowser>控制項已發生。 之前呼叫這個方法可能會導致例外狀況，如文件未完成載入。  
  
 值是否<xref:System.Windows.Forms.HtmlElementInsertionOrientation>無效，將取決於項目的類型。 例如，<xref:System.Windows.Forms.HtmlElementInsertionOrientation.AfterBegin>有效項目，則如果`DIV`，但不是它是否`SCRIPT`或`IMG`項目，這兩者可以包含子項目。  
  
   
  
## Examples  
 下列程式碼範例插入`DIV`ADatum.com server 外部的使用者檢視每個頁面頂端的項目。 這個範例需要您的表單包含<xref:System.Windows.Forms.WebBrowser>控制項，名為`WebBrowser1`。 您的範例也必須匯入命名空間<xref:System.Text.RegularExpressions>。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlElement#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>執行對目前項目唯一的方法。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeMember(string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InvokeMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeMember (methodName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ methodName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="methodName">要叫用的屬性或方法的名稱。</param>
        <summary>在此項目的基礎 DOM 項目上執行未公開的方法。</summary>
        <returns>這個方法所傳回的項目，以 <see cref="T:System.Object" /> 表示。 如果這個 <see cref="T:System.Object" /> 是另一個 HTML 項目，而且您已將 Unmanaged MSHTML 程式庫的參考加入專案中，則您可以將它轉換成其適當的 Unmanaged 介面。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可以用來呼叫方法的文件物件模型 (DOM)，在 managed 程式碼中沒有對等項目。 使用這個版本的<xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>執行未公開的方法會採用任何引數。 如需範例，請參閱 <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string methodName, params object[] parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeMember(string methodName, object[] parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeMember (methodName As String, ParamArray parameter As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ methodName, ... cli::array &lt;System::Object ^&gt; ^ parameter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameter" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="methodName">要叫用的屬性或方法的名稱。</param>
        <param name="parameter">要傳遞的參數清單。</param>
        <summary>執行目前 HTML 網頁中使用指令碼語言定義的函式。</summary>
        <returns>函式所傳回的項目，以 <see cref="T:System.Object" /> 表示。 如果這個 <see cref="T:System.Object" /> 是另一個 HTML 項目，而且您已將 Unmanaged MSHTML 程式庫的參考加入專案中，則您可以將它轉換成其適當的 Unmanaged 介面。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可以用來呼叫方法的文件物件模型 (DOM)，在 managed 程式碼中沒有對等項目。 所有引數提供給<xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>會轉換成 Win32`VARIANT`資料類型才能傳遞至具名的指令碼函式。  
  
   
  
## Examples  
 下列程式碼範例取得`TABLE`呼叫`dataTable`，並使用未公開`moveRow`方法，將一個資料列從資料表結尾移到開頭。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlElement#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者按下鍵盤上的按鍵時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyDown> 發生於之前<xref:System.Windows.Forms.HtmlElement.KeyPress>，進而之前發生<xref:System.Windows.Forms.HtmlElement.KeyUp>。  
  
 您可以取消的預設動作<xref:System.Windows.Forms.HtmlElement.KeyDown>藉由設定項目上的事件<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
 A<xref:System.Windows.Forms.HtmlElement.KeyDown>項目上的事件也會發生在該元素的父項目，然後在<xref:System.Windows.Forms.HtmlDocument>類別本身，除非您設定<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.KeyDown>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.KeyDown>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#442](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#442)]
 [!code-vb[System.Windows.Forms.EventExamples#442](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#442)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyPress">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyPress As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyPress;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者按下鍵盤上的按鍵然後鬆開時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyPress> 之後，就會發生<xref:System.Windows.Forms.HtmlElement.KeyDown>之前<xref:System.Windows.Forms.HtmlElement.KeyUp>。  
  
 您可以取消的預設動作<xref:System.Windows.Forms.HtmlElement.KeyPress>藉由設定項目上的事件<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
 A<xref:System.Windows.Forms.HtmlElement.KeyPress>項目上的事件也會發生在該元素的父項目，然後在<xref:System.Windows.Forms.HtmlDocument>類別本身，除非您設定<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.KeyPress>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.KeyPress>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#443](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#443)]
 [!code-vb[System.Windows.Forms.EventExamples#443](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#443)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者鬆開鍵盤上的按鍵時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyUp> 之後，就會發生<xref:System.Windows.Forms.HtmlElement.KeyPress>之後, 發生<xref:System.Windows.Forms.HtmlElement.KeyDown>。  
  
 您無法取消此事件。  
  
 A<xref:System.Windows.Forms.HtmlElement.KeyUp>項目上的事件也會發生在該元素的父項目，然後在<xref:System.Windows.Forms.HtmlDocument>類別本身，除非您設定<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.KeyUp>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.KeyUp>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#444](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#444)]
 [!code-vb[System.Windows.Forms.EventExamples#444](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#444)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LosingFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LosingFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.LosingFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LosingFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LosingFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當這個項目正失去使用者輸入焦點時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.LosingFocus>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.LosingFocus>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#440](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#440)]
 [!code-vb[System.Windows.Forms.EventExamples#440](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#440)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當這個項目已失去使用者輸入焦點時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 項目不會再接收按鍵事件之後<xref:System.Windows.Forms.HtmlElement.LostFocus>等到會給予焦點同樣地，由使用者選取 頁面上，或是藉由應用程式呼叫才會進行<xref:System.Windows.Forms.HtmlElement.Focus%2A>該項目上的方法。  
  
 您無法取消此事件。  
  
 <xref:System.Windows.Forms.HtmlElement.LostFocus>項目上的事件也會發生該元素的父代，然後在<xref:System.Windows.Forms.HtmlDocument>類別本身，除非您設定<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.LostFocus>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.LostFocus>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#441](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#441)]
 [!code-vb[System.Windows.Forms.EventExamples#441](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#441)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者按下滑鼠按鈕時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以取消的預設動作<xref:System.Windows.Forms.HtmlElement.MouseDown>藉由設定項目上的事件<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
 A<xref:System.Windows.Forms.HtmlElement.MouseDown>項目上的事件也會發生在該元素的父項目，然後在<xref:System.Windows.Forms.HtmlDocument>類別本身，除非您設定<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.MouseDown>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.MouseDown>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#446](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#446)]
 [!code-vb[System.Windows.Forms.EventExamples#446](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#446)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當使用者第一次將滑鼠指標移到目前項目上方時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.MouseEnter>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.MouseEnter>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#449](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#449)]
 [!code-vb[System.Windows.Forms.EventExamples#449](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#449)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者將滑鼠指標移開目前項目時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.MouseLeave>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.MouseLeave>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#450](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#450)]
 [!code-vb[System.Windows.Forms.EventExamples#450](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#450)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者將滑鼠指標移過項目時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您無法取消此事件。  
  
 A<xref:System.Windows.Forms.HtmlElement.MouseMove>項目上的事件也會發生在該元素的父項目，然後在<xref:System.Windows.Forms.HtmlDocument>類別本身，除非您設定<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.MouseMove>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.MouseMove>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#445](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#445)]
 [!code-vb[System.Windows.Forms.EventExamples#445](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#445)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於滑鼠指標進入項目的範圍時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以取消的預設動作<xref:System.Windows.Forms.HtmlElement.MouseOver>藉由設定項目上的事件<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
 A<xref:System.Windows.Forms.HtmlElement.MouseOver>項目上的事件也會發生在該元素的父項目，然後在<xref:System.Windows.Forms.HtmlDocument>類別本身，除非您設定<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.MouseOver>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.MouseOver>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#447](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#447)]
 [!code-vb[System.Windows.Forms.EventExamples#447](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#447)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者鬆開滑鼠按鈕時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以取消的預設動作<xref:System.Windows.Forms.HtmlElement.MouseUp>藉由設定項目上的事件<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
 A<xref:System.Windows.Forms.HtmlElement.MouseUp>項目上的事件也會發生在該元素的父項目，然後在<xref:System.Windows.Forms.HtmlDocument>類別本身，除非您設定<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>屬性<xref:System.Windows.Forms.HtmlElementEventArgs>類別`true`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.HtmlElement.MouseUp>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.HtmlElement>名為`HtmlElement1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.HtmlElement.MouseUp>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#448](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#448)]
 [!code-vb[System.Windows.Forms.EventExamples#448](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#448)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定項目的名稱。</summary>
        <value>
          <see cref="T:System.String" />，代表項目的名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.HtmlElement.Name%2A>屬性來擷取項目的文件使用<xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A>方法<xref:System.Windows.Forms.HtmlElement.All%2A>屬性<xref:System.Windows.Forms.HtmlDocument>。  
  
 當套用至`INPUT`項目，<xref:System.Windows.Forms.HtmlElement.Name%2A>定義項目資料的變數名稱，其形式提交給伺服器時。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSibling">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement NextSibling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement NextSibling" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.NextSibling" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSibling As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ NextSibling { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得文件樹狀目錄中與這個項目相同層級的下一個項目。</summary>
        <value>
          <see cref="T:System.Windows.Forms.HtmlElement" />，代表目前項目右邊的項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.HtmlElement.NextSibling%2A>搭配<xref:System.Windows.Forms.HtmlElement.FirstChild%2A>查核 HTML 項目的文件樹狀結構。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetParent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement OffsetParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement OffsetParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OffsetParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OffsetParent As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ OffsetParent { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得會從其中計算 <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" /> 的項目。</summary>
        <value>從其中計算位移的項目。  如果某個項目的父代或這個項目階層架構中的另一個項目使用相對或絕對位置，則 <see langword="OffsetParent" /> 將會是目前項目以巢狀方式存在其中的第一個相對或絕對位置的項目。 如果沒有任何目前的項目上方的項目會具有絕對或相對位置，<see langword="OffsetParent" />將<c>主體</c>文件的標記。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以在其中一種方式在 HTML 網頁上放置項目： 預設流動位置;相對定位在項目位移的固定數量相對於其父代。和絕對定位中的項目提供固定協調文件的左上角相對的位置。  
  
 當文件的項目使用相對或絕對位置時，您可以使用`OffsetParent`計算項目的工作區中的座標位置。  
  
 如需有關項目定位在 HTML 中，請參閱[相關項目定位](http://msdn.microsoft.com/library/ms533005.aspx)。  
  
   
  
## Examples  
 下列程式碼範例示範如何<xref:System.Windows.Forms.HtmlElement.OffsetParent%2A>和<xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A>不同`span1`，`span2`和`span3`:  
  
```  
<HTML>  
    <BODY id="documentBody">  
  
        <DIV id="div1">  
            <SPAN id="span1">Placeholder text 1.</SPAN>  
        </DIV>  
  
        <DIV id="div2" style="position:relative;top:100px;left:100px;">  
            <SPAN id="span2">Placeholder text 2.</SPAN>  
        </DIV>  
  
        <DIV id="div3" style="position:absolute;top:200px;left:200px;">  
            <DIV id="div4" style="position:relative;top:100px;left:100px;">  
                <SPAN id="span3">Placeholder text 3.</SPAN>  
            </DIV>  
        </DIV>  
  
    </BODY>  
</HTML>  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlElement#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle OffsetRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle OffsetRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OffsetRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle OffsetRectangle { System::Drawing::Rectangle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得某項目相對於其父代的位置。</summary>
        <value>這個項目的 X 和 Y 座標位置，以及相對於其父代的寬度和高度。  如果某項目的父代具有相對或絕對位置，<see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" /> 會傳回父項目的位移。 如果該項目本身相對於其父代而言具有相對位置，則 <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" /> 會傳回來自其父代的位移。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以在其中一種方式在 HTML 網頁上放置項目：  
  
-   預設流程定位。  
  
-   相對定位在項目位移的固定數量相對於其父代。  
  
-   絕對位置，在這項目提供固定協調文件的左上角相對的位置。  
  
 如需有關項目定位在 HTML 中，請參閱[相關項目定位](http://msdn.microsoft.com/library/ms533005.aspx)。  
  
   
  
## Examples  
 下列程式碼範例示範如何<xref:System.Windows.Forms.HtmlElement.OffsetParent%2A>和<xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A>不同`span1`，`span2`和`span3`:  
  
```  
<HTML>  
    <BODY id="documentBody">  
  
        <DIV id="div1">  
            <SPAN id="span1">Placeholder text 1.</SPAN>  
        </DIV>  
  
        <DIV id="div2" style="position:relative;top:100px;left:100px;">  
            <SPAN id="span2">Placeholder text 2.</SPAN>  
        </DIV>  
  
        <DIV id="div3" style="position:absolute;top:200px;left:200px;">  
            <DIV id="div4" style="position:relative;top:100px;left:100px;">  
                <SPAN id="span3">Placeholder text 3.</SPAN>  
            </DIV>  
        </DIV>  
  
    </BODY>  
</HTML>  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlElement#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.OffsetParent" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlElement left, class System.Windows.Forms.HtmlElement right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlElement, right As HtmlElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlElement ^ left, System::Windows::Forms::HtmlElement ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlElement" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="left">第一個 <see cref="T:System.Windows.Forms.HtmlElement" />。</param>
        <param name="right">第二個 <see cref="T:System.Windows.Forms.HtmlElement" />。</param>
        <summary>比較兩個項目是否相等。</summary>
        <returns>如果兩個參數都是 <see langword="null" />，則為 <see langword="true" />；如果兩個項目都擁有相同的基礎 COM 介面，則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 等號比較運算子測試`IUnknown`包裝由所提供的基礎 COM 物件的指標<xref:System.Windows.Forms.HtmlElement>類別。  
  
 這個運算子的對等方法是 <xref:System.Windows.Forms.HtmlElement.Equals%2A?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlElement left, class System.Windows.Forms.HtmlElement right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlElement, right As HtmlElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlElement ^ left, System::Windows::Forms::HtmlElement ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlElement" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="left">第一個 <see cref="T:System.Windows.Forms.HtmlElement" />。</param>
        <param name="right">第二個 <see cref="T:System.Windows.Forms.HtmlElement" />。</param>
        <summary>比較兩個 <see cref="T:System.Windows.Forms.HtmlElement" /> 物件是否不相等。</summary>
        <returns>如果只要有一個項目為 <see langword="null" />，則為 <see langword="true" />；如果兩個物件不相等，則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[這個運算子的對等方法是否定 <xref:System.Windows.Forms.HtmlElement.Equals%2A?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OuterHtml">
      <MemberSignature Language="C#" Value="public string OuterHtml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OuterHtml" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OuterHtml" />
      <MemberSignature Language="VB.NET" Value="Public Property OuterHtml As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OuterHtml { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前項目的 HTML 程式碼。</summary>
        <value>目前項目和其子系的 HTML 程式碼。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 而<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>會傳回目前的項目周圍的標記，但不包括目前的項目中包含的所有 HTML<xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>包含目前的項目標記，以及 HTML 標記包含，例如：  
  
 `<HTML>`  
  
 `<BODY>`  
  
 `<DIV id="div1">`  
  
 `Hello`  
  
 `<DIV id="div2">`  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 `</BODY>`  
  
 `</HTML>`  
  
 在此範例中，呼叫<xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>上`div2`會傳回：  
  
 `<DIV id="div2">`  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 呼叫<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>會傳回：  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 如果您指派新值以<xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>、 目前的項目參考將會變成無效; 它不會反映名稱、 屬性和子系的 html 內容您剛指派。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerHtml" />
      </Docs>
    </Member>
    <Member MemberName="OuterText">
      <MemberSignature Language="C#" Value="public string OuterText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OuterText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OuterText" />
      <MemberSignature Language="VB.NET" Value="Public Property OuterText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OuterText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前項目的文字。</summary>
        <value>位在目前項目內以及此項目的子系中的文字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您嘗試將 HTML 指派給具有的項目<xref:System.Windows.Forms.HtmlElement.OuterText%2A>，就如同您檢視 HTML 文字檔案中，將會顯示為常值，在文件中的 HTML 程式碼。 如果您指派給項目使用的 HTML<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>屬性，<xref:System.Windows.Forms.HtmlElement.OuterText%2A>將傳回的所有文字，以標記的 HTML 中移除。  
  
 指派值給<xref:System.Windows.Forms.HtmlElement.OuterText%2A>將摧毀任何屬於元素的子項目。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">您無法設定在此項目之外的文字。</exception>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerText" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ Parent { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前項目的父項目。</summary>
        <value>在 HTML 文件的階層架構內位於目前項目上方的項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.Parent%2A>屬性可讓項目內容的探索。 它是最有用的事件處理常式內例如<xref:System.Windows.Forms.HtmlElement.Click>，它可以引發的任何文件的物件階層架構中的任何位置的項目。  
  
 <xref:System.Windows.Forms.HtmlElement.Parent%2A>屬性的 HTML 項目 （HTML 文件頂端） 指回。 如果您呼叫<xref:System.Windows.Forms.HtmlElement.Parent%2A>在迴圈中，確認 迴圈的中斷條件比較目前的項目類型和類型`Parent`或是您的程式碼的屬性，可能會執行一個無限迴圈。  
  
   
  
## Examples  
 下列程式碼範例會尋找所有`IMG`文件標記，並使用<xref:System.Windows.Forms.HtmlElement.Parent%2A>屬性來測試是否`IMG`是超連結至其他頁面; 如果是，程式碼指派的 URL`ALT`屬性`IMG`標記，以便使用者可以將滑鼠移以查看將它需要的映像。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlElement#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (string eventName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RaiseEvent(string eventName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.RaiseEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (eventName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseEvent(System::String ^ eventName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventName">要引發的事件名稱。</param>
        <summary>讓具名事件呼叫所有已註冊的事件處理常式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法用來存取 HTML 文件物件模型 (DOM) 事件。 直接呼叫[IHTMLElement3::fireEvent](http://go.microsoft.com/fwlink/?LinkId=103189)方法。 如需有關如何使用透過 DOM<xref:System.Windows.Forms.HtmlElement>類別，請參閱[存取 Managed HTML 文件物件模型上的未公開成員](~/docs/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果目前的項目有焦點，則移除它的焦點。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法會引發<xref:System.Windows.Forms.HtmlElement.LostFocus>項目的事件。  
  
 從使用此方法的項目清除焦點時，它可以包含項目，而不定位順序中的下一個元素的文件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignWithTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollIntoView(bool alignWithTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignWithTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignWithTop);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignWithTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignWithTop">如果為 <see langword="true" />，表示物件的最上方將會顯示在視窗的最上方。 如果為 <see langword="false" />，表示物件的最下方將會顯示在視窗的最下方。</param>
        <summary>在包含這個項目的文件中捲動，直到這個項目的上邊緣或下邊緣與文件視窗對齊為止。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例會依名稱尋找的項目，並捲動頁面，讓項目上方可見的頁面頂端對齊。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#12)]
 [!code-vb[System.Windows.Forms.HtmlElement#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollLeft">
      <MemberSignature Language="C#" Value="public int ScrollLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScrollLeft { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定在項目的邊緣和其內容的左邊緣之間的距離。</summary>
        <value>在項目的左邊緣和其內容的左邊緣之間的距離 (單位為像素)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 捲動區域的完整維度是可以透過<xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>;`ScrollLeft`和<xref:System.Windows.Forms.HtmlElement.ScrollTop%2A>因為這些是開發人員可以設定捲軸區域只有兩個屬性個別公開。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ScrollRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ScrollRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScrollRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ScrollRectangle { System::Drawing::Rectangle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得某項目的可捲動區域的維度。</summary>
        <value>某項目可捲動區域的大小和座標位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 項目會有可捲動區域若內容超過維度的大小除非項目上的溢位樣式禁止轉譯捲軸。  
  
 您無法直接修改捲動區域的大小，但您可以修改捲動區域的邊緣和項目的邊緣之間的距離。 使用<xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A>和<xref:System.Windows.Forms.HtmlElement.ScrollTop%2A>屬性，以達到這個目的。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollTop">
      <MemberSignature Language="C#" Value="public int ScrollTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollTop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollTop" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScrollTop { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定在項目的邊緣和其內容的上邊緣之間的距離。</summary>
        <value>在項目的上邊緣和其內容的上邊緣之間的距離 (單位為像素)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 捲動區域的完整維度是可以透過<xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>;<xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A>和`ScrollTop`因為這些是開發人員可以設定捲軸區域只有兩個屬性個別公開。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public void SetAttribute (string attributeName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAttribute(string attributeName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttribute (attributeName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAttribute(System::String ^ attributeName, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">要設定的屬性名稱。</param>
        <param name="value">這個屬性的新值。</param>
        <summary>設定此項目上具名屬性的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 中的屬性是任何有效的名稱 / 值組，該元素。 <xref:System.Windows.Forms.HtmlElement> 公開 （expose) 只會留下任何這些僅適用於特定類型的項目; 的所有項目的通用的屬性`SRC`是預先定義的屬性`IMG`標記，例如，但不適用於`DIV`標記。 使用<xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>和<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>操作不會公開在受管理文件物件模型 (DOM) 的屬性。  
  
 如果`attributeName`不是在某個元素定義的屬性<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>會定義做為新屬性項目上。  
  
 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 和<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>不區分大小寫。  
  
 若要設定`class`屬性<xref:System.Windows.Forms.HtmlElement>，您必須參考屬性做為`className`時指定的第一個引數 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>  
  
   
  
## Examples  
 下列程式碼範例會將新`IMG`元素要與目前文件，使用<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>設定`SRC`映像的屬性。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlElement#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public string Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Style { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>為目前項目取得或設定以分號分隔的樣式清單。</summary>
        <value>由所有項目樣式所組成的字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 文件物件模型 (DOM) 會使用樣式全球資訊網協會階層式樣式表規格中所定義來控制顯示的項目。 在 樣式<xref:System.Windows.Forms.HtmlElement.Style%2A>屬性形式的分號分隔名稱 / 值組，與每個成對分號分隔的如下所示：  
  
 `style-name1:value1;...;[style-nameN:valueN;]`  
  
 若要設定的字型`DIV`要 14 點 Times New Roman 粗體的項目，例如，您會指派下列字串：  
  
 `font-face:Times New Roman;font-size:14px;font-weight:bold;`  
  
 完整的 HTML DOM 中的所有可用樣式清單，請參閱[樣式屬性](http://msdn.microsoft.com/library/ms534651.aspx)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public short TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 TabIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.TabIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TabIndex As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short TabIndex { short get(); void set(short value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定此項目在定位順序中的位置。</summary>
        <value>定位順序中的項目之數字索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.TabIndex%2A> 決定當使用者按下 TAB 鍵，HTML 文件中的哪個項目接下來會接收焦點。 根據預設，會在定位順序中所包含的唯一元素`INPUT`項目，`SELECT`控制項，以及任何項目其`contentEditable`屬性設定為`true`。 您可以包含任何 HTML 項目定位順序，例如`DIV`，藉由指派明確<xref:System.Windows.Forms.HtmlElement.TabIndex%2A>。  
  
 有效值<xref:System.Windows.Forms.HtmlElement.TabIndex%2A>的-32767 到 32767 之間的範圍內。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="public string TagName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.TagName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TagName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 HTML 標記的名稱。</summary>
        <value>用來以 HTML 標記建立此項目的名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 文件物件模型中的許多項目有屬性、 屬性和對這些項目，都是唯一的方法例如`HREF`屬性`A`項目，或`Submit`方法`FORM`。 使用<xref:System.Windows.Forms.HtmlElement.TagName%2A>當您有可能任意類型的項目，並需要執行的特定類型的作業。  
  
   
  
## Examples  
 下列程式碼範例會尋找所有`IMG`文件標記，並使用`TagName`屬性來測試是否`IMG`是超連結至其他頁面; 如果是，程式碼指派的 URL`ALT`屬性`IMG`標記，以便使用者可以將滑鼠移以查看將它需要的映像。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlElement#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>