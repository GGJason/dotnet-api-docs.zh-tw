<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f798670405d97d29d6e135b97f2adb39d702dfd5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30649752" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供傳送按鍵至應用程式的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.SendKeys>傳送按鍵和按鍵組合，作用中的應用程式。 無法執行個體化這個類別。 按鍵動作傳送至類別，並且立即繼續您的程式流程，請使用<xref:System.Windows.Forms.SendKeys.Send%2A>。 若要等待按鍵動作來啟動任何處理序，請使用<xref:System.Windows.Forms.SendKeys.SendWait%2A>。  
  
 每個索引鍵是由一個或多個字元表示。 若要指定鍵盤字元，請使用字元本身。 例如，代表字母 A，傳遞字串"A"中方法。 若要顯示多個字元，將附加至先前的每個字元。 若要表示字母 A、 B 和 C，指定為"ABC"的參數。  
  
 加號 （+）、 插入號 (^)、 百分比符號 （%）、 波狀符號 （~） 和括號 （） 有特殊意義<xref:System.Windows.Forms.SendKeys>。 若要指定其中一個字元，請將它括在括號 （{}）。 例如，若要指定加號，使用"{+}"。 指定的大括號字元，使用"{{}"和"{}}"。 括號 ([]) 有沒有特殊意義<xref:System.Windows.Forms.SendKeys>，但您必須將其括在括號中。 其他應用程式，在方括號沒有特殊意義，特別是當動態資料交換 (DDE)，就會發生。  
  
> [!CAUTION]
>  如果您的應用程式是設計成可搭配國際上現有的各種鍵盤來使用，則使用 <xref:System.Windows.Forms.SendKeys.Send%2A> 可能會產生無法預期的結果，應該予以避免。  
  
 若要指定不會顯示當您按下 ENTER 或索引標籤上，等動作，而不是字元，代表索引鍵的索引鍵的字元使用下表中的代碼。  
  
|Key|程式碼|  
|---------|----------|  
|退格鍵|{退格鍵}，{BS，} 或 {BKSP}|  
|中斷|{BREAK}|  
|CAPS LOCK|{CAPSLOCK}|  
|DEL 或刪除|{刪除} 或 {刪除}|  
|向下鍵|{DOWN}|  
|END|{END}|  
|ENTER|{輸入} 或 ~|  
|ESC|{ESC}|  
|說明|{HELP}|  
|首頁|{HOME}|  
|單元或插入|{插入} 或 {單元}|  
|向左鍵|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|PRINT SCREEN 鍵|{PRTSC}（保留供日後使用）|  
|向右鍵|{RIGHT}|  
|捲動鎖定|{SCROLLLOCK}|  
|TAB|{TAB}|  
|向上鍵|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|將數字鍵台|{ADD}|  
|減去數字鍵台|{SUBTRACT}|  
|相乘的數字鍵台|{乘}|  
|數字鍵台除以|{DIVIDE}|  
  
 若要指定索引鍵結合的 SHIFT、 CTRL 和 ALT 鍵的任何組合，在之前的按鍵碼和一或多個下列的程式碼。  
  
|Key|程式碼|  
|---------|----------|  
|SHIFT 鍵|+|  
|CTRL|^|  
|ALT|%|  
  
 若要指定的任何組合的 SHIFT、 CTRL 和 alt 鍵應該按住時按下其他幾個索引鍵，將這些機碼的程式碼括在括號中。 例如，若要指定按住 shift 鍵，E 和 C 按下時，使用"+ (EC)"。 若要指定按住 shift 鍵，E 按下，後面接著不 shift 鍵，C 時使用"+ EC"。  
  
 若要指定重複的索引鍵，使用表單 {索引鍵的數目}。 您必須將索引鍵和數字之間的空格。 例如，{左 42} 表示 42 倍; 按向左鍵{h 10} 表示按下 H 10 倍。  
  
> [!NOTE]
>  因為沒有可啟動另一個應用程式的 managed 的方法，您可以使用這個類別，在目前應用程式或使用原生 Windows 方法，例如`FindWindow`和`SetForegroundWindow`，強制將焦點放在其他應用程式。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> 類別已針對 .NET Framework 3.0 進行更新，以便能夠在 Windows Vista 上執行的應用程式中使用。 Windows Vista 的增強式安全性 (稱為使用者帳戶控制或 UAC) 會讓之前的實作無法如預期般運作。  
>   
>  <xref:System.Windows.Forms.SendKeys> 類別容易受到時間問題的影響，某些開發人員必須解決這些問題。 更新的實作仍然容易受到時間問題的影響，但是速度會稍微快一些，而且可能需要對解決方法進行變更。 <xref:System.Windows.Forms.SendKeys> 類別會先嘗試使用之前的實作；如果失敗，則使用新的實作。 因此， <xref:System.Windows.Forms.SendKeys> 類別在不同的作業系統上可能會有不同的運作方式。 此外，當 <xref:System.Windows.Forms.SendKeys> 類別使用新的實作時， <xref:System.Windows.Forms.SendKeys.SendWait%2A> 方法不會在將訊息傳送至另一個處理序時，等候處理這些訊息。  
>   
>  如果不論作業系統為何，應用程式都需要一致的行為，您可以強制 <xref:System.Windows.Forms.SendKeys> 類別使用新的實作，方式是將下列應用程式設定加入 app.config 檔中。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  若要強制 <xref:System.Windows.Forms.SendKeys> 類別使用之前的實作，請改用 `"JournalHook"` 值。  
  
   
  
## Examples  
 下列程式碼範例會示範如何使用 <xref:System.Windows.Forms.SendKeys.Send%2A> 方法。 要執行此範例中，貼上下列程式碼呼叫 Form1 表單中包含按鈕呼叫 Button1。 確定按一下事件與事件處理方法在此範例中相關聯。 按鈕控制項的<xref:System.Windows.Forms.Control.TabIndex%2A>屬性應該設定為 0。 當執行範例時，按兩下表單，以觸發按鈕的 click 事件。  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>處理目前在訊息佇列中的所有 Windows 訊息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.SendKeys.Flush%2A>等候應用程式處理的按鍵和其他訊息佇列中的作業系統訊息。 這就相當於呼叫<xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType>之前有未處理的更多索引鍵。  
  
> [!NOTE]
>  因為沒有可啟動另一個應用程式的 managed 的方法，您可以使用這個類別，在目前應用程式或使用原生 Windows 方法，例如`FindWindow`和`SetForegroundWindow`，強制將焦點放在其他應用程式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">要傳送的按鍵字串。</param>
        <summary>傳送按鍵至使用中的應用程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個索引鍵是由一個或多個字元表示。 若要指定鍵盤字元，請使用字元本身。 例如，代表字母 A，傳遞字串"A"中方法。 若要顯示多個字元，將附加至先前的每個字元。 若要表示字母 A、 B 和 C，指定為"ABC"的參數。  
  
 加號 （+）、 插入號 (^)、 百分比符號 （%）、 波狀符號 （~） 和括號 （） 有特殊意義<xref:System.Windows.Forms.SendKeys>。 若要指定其中一個字元，請將它括在括號 （{}）。 例如，若要指定加號，使用"{+}"。 指定的大括號字元，使用"{{}"和"{}}"。 括號 ([]) 有沒有特殊意義<xref:System.Windows.Forms.SendKeys>，但您必須將其括在括號中。 其他應用程式，在方括號沒有特殊意義，特別是當動態資料交換 (DDE)，就會發生。  
  
> [!CAUTION]
>  如果您的應用程式是設計成可搭配國際上現有的各種鍵盤來使用，則使用 <xref:System.Windows.Forms.SendKeys.Send%2A> 可能會產生無法預期的結果，應該予以避免。  
  
 若要指定不會顯示當您按下 ENTER 或索引標籤上，等動作，而不是字元，代表索引鍵的索引鍵的字元使用下表中的代碼。  
  
|Key|程式碼|  
|---------|----------|  
|退格鍵|{退格鍵}，{BS，} 或 {BKSP}|  
|中斷|{BREAK}|  
|CAPS LOCK|{CAPSLOCK}|  
|DEL 或刪除|{刪除} 或 {刪除}|  
|向下鍵|{DOWN}|  
|END|{END}|  
|ENTER|{輸入} 或 ~|  
|ESC|{ESC}|  
|說明|{HELP}|  
|首頁|{HOME}|  
|單元或插入|{插入} 或 {單元}|  
|向左鍵|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|PRINT SCREEN 鍵|{PRTSC}（保留供日後使用）|  
|向右鍵|{RIGHT}|  
|捲動鎖定|{SCROLLLOCK}|  
|TAB|{TAB}|  
|向上鍵|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|將數字鍵台|{ADD}|  
|減去數字鍵台|{SUBTRACT}|  
|相乘的數字鍵台|{乘}|  
|數字鍵台除以|{DIVIDE}|  
  
 若要指定索引鍵結合的 SHIFT、 CTRL 和 ALT 鍵的任何組合，在之前的按鍵碼和一或多個下列的程式碼。  
  
|Key|程式碼|  
|---------|----------|  
|SHIFT 鍵|+|  
|CTRL|^|  
|ALT|%|  
  
 若要指定的任何組合的 SHIFT、 CTRL 和 alt 鍵應該按住時按下其他幾個索引鍵，將這些機碼的程式碼括在括號中。 例如，若要指定按住 shift 鍵，E 和 C 按下時，使用"+ (EC)"。 若要指定按住 shift 鍵，E 按下，後面接著不 shift 鍵，C 時使用"+ EC"。  
  
 若要指定重複的索引鍵，使用表單 {索引鍵的數目}。 您必須將索引鍵和數字之間的空格。 例如，{左 42} 表示 42 倍; 按向左鍵{h 10} 表示按下 H 10 倍。  
  
> [!NOTE]
>  因為沒有可啟動另一個應用程式的 managed 的方法，您可以使用這個類別，在目前應用程式或使用原生 Windows 方法，例如`FindWindow`和`SetForegroundWindow`，強制將焦點放在其他應用程式。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> 類別已針對 .NET Framework 3.0 進行更新，以便能夠在 Windows Vista 上執行的應用程式中使用。 Windows Vista 的增強式安全性 (稱為使用者帳戶控制或 UAC) 會讓之前的實作無法如預期般運作。  
>   
>  <xref:System.Windows.Forms.SendKeys> 類別容易受到時間問題的影響，某些開發人員必須解決這些問題。 更新的實作仍然容易受到時間問題的影響，但是速度會稍微快一些，而且可能需要對解決方法進行變更。 <xref:System.Windows.Forms.SendKeys> 類別會先嘗試使用之前的實作；如果失敗，則使用新的實作。 因此， <xref:System.Windows.Forms.SendKeys> 類別在不同的作業系統上可能會有不同的運作方式。 此外，當 <xref:System.Windows.Forms.SendKeys> 類別使用新的實作時， <xref:System.Windows.Forms.SendKeys.SendWait%2A> 方法不會在將訊息傳送至另一個處理序時，等候處理這些訊息。  
>   
>  如果不論作業系統為何，應用程式都需要一致的行為，您可以強制 <xref:System.Windows.Forms.SendKeys> 類別使用新的實作，方式是將下列應用程式設定加入 app.config 檔中。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  若要強制 <xref:System.Windows.Forms.SendKeys> 類別使用之前的實作，請改用 `"JournalHook"` 值。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.SendKeys.Send%2A>方法。要執行此範例中，貼上下列程式碼呼叫 Form1 表單中包含按鈕呼叫 Button1。 確定按一下事件與事件處理方法在此範例中相關聯。 按鈕控制項的<xref:System.Windows.Forms.Control.TabIndex%2A>屬性應該設定為 0。 當執行範例時，按兩下表單，以觸發按鈕的 click 事件。  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">沒有可傳送按鍵的目標使用中應用程式。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keys" /> 不表示有效按鍵。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫這個方法的 unmanaged 程式碼。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">要傳送的按鍵字串。</param>
        <summary>傳送指定的按鍵至使用中的應用程式，然後等待訊息的處理。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.SendKeys.SendWait%2A>將按鍵組合傳送至作用中的應用程式，並等待要處理的按鍵輸入訊息。 您可以使用這個方法來傳送按鍵至應用程式，並等候完成的按鍵啟動任何處理程序。 這可以是很重要，如果其他應用程式必須完成才能繼續執行您的應用程式。  
  
> [!NOTE]
>  因為沒有可啟動另一個應用程式的 managed 的方法，您可以使用這個類別，在目前應用程式或使用原生 Windows 方法，例如`FindWindow`和`SetForegroundWindow`，強制將焦點放在其他應用程式。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> 類別已針對 .NET Framework 3.0 進行更新，以便能夠在 Windows Vista 上執行的應用程式中使用。 Windows Vista 的增強式安全性 (稱為使用者帳戶控制或 UAC) 會讓之前的實作無法如預期般運作。  
>   
>  <xref:System.Windows.Forms.SendKeys> 類別容易受到時間問題的影響，某些開發人員必須解決這些問題。 更新的實作仍然容易受到時間問題的影響，但是速度會稍微快一些，而且可能需要對解決方法進行變更。 <xref:System.Windows.Forms.SendKeys> 類別會先嘗試使用之前的實作；如果失敗，則使用新的實作。 因此， <xref:System.Windows.Forms.SendKeys> 類別在不同的作業系統上可能會有不同的運作方式。 此外，當 <xref:System.Windows.Forms.SendKeys> 類別使用新的實作時， <xref:System.Windows.Forms.SendKeys.SendWait%2A> 方法不會在將訊息傳送至另一個處理序時，等候處理這些訊息。  
>   
>  如果不論作業系統為何，應用程式都需要一致的行為，您可以強制 <xref:System.Windows.Forms.SendKeys> 類別使用新的實作，方式是將下列應用程式設定加入 app.config 檔中。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  若要強制 <xref:System.Windows.Forms.SendKeys> 類別使用之前的實作，請改用 `"JournalHook"` 值。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">呼叫這個方法的 unmanaged 程式碼。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>