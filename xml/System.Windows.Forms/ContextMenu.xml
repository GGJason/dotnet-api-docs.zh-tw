<Type Name="ContextMenu" FullName="System.Windows.Forms.ContextMenu">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7c50cd637ddc9a6ce43be5b8780adb2c1ac026b6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36347055" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ContextMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContextMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ContextMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class ContextMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContextMenu : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type ContextMenu = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Popup")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>代表捷徑功能表。 雖然 <see cref="T:System.Windows.Forms.ContextMenuStrip" /> 會取代並且將功能加入至之前版本的 <see cref="T:System.Windows.Forms.ContextMenu" /> 控制項；不過，也可以選擇保留 <see cref="T:System.Windows.Forms.ContextMenu" />，以提供回溯相容性 (Backward Compatibility) 以及供未來使用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ContextMenu>類別表示可以在使用者控制項或表單區域上按一下滑鼠右鍵時顯示的捷徑功能表。 快顯功能表通常用來從不同的功能表項目結合<xref:System.Windows.Forms.MainMenu>提供內容給此應用程式的使用者很有用的格式。 例如，您可以使用捷徑功能表，指派給<xref:System.Windows.Forms.TextBox>控制項變更字型的文字，尋找文字內的控制項或複製並貼上文字的剪貼簿功能提供功能表項目。 您也可以新增顯示<xref:System.Windows.Forms.MenuItem>快顯功能表中的物件不位於<xref:System.Windows.Forms.MainMenu>提供情況不適合的特定命令<xref:System.Windows.Forms.MainMenu>顯示。  
  
 一般而言，當使用者在控制項或表單本身上方按一下滑鼠右鍵時，會顯示快顯功能表。 可見的控制項和<xref:System.Windows.Forms.Form>有<xref:System.Windows.Forms.Control.ContextMenu%2A>繫結的屬性<xref:System.Windows.Forms.ContextMenu>類別，以顯示快顯功能表的控制項。 可以使用多個控制項<xref:System.Windows.Forms.ContextMenu>。 您可以使用<xref:System.Windows.Forms.ContextMenu.SourceControl%2A>屬性來判斷哪一個控制項最後顯示的捷徑功能表，才能執行控制項特定的工作，或修改顯示控制項的捷徑功能表。  
  
 您可能想要知道才能設定核取記號，停用項目，並向使用者顯示功能表之前執行其他功能表工作顯示快顯功能表時。 您可以處理<xref:System.Windows.Forms.ContextMenu.Popup>事件，以判斷顯示快顯功能表時。  
  
> [!NOTE]
>  若要重複使用<xref:System.Windows.Forms.MenuItem>物件中所顯示的<xref:System.Windows.Forms.MainMenu>用於<xref:System.Windows.Forms.ContextMenu>，您必須建立一份功能表使用<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>方法<xref:System.Windows.Forms.MenuItem>類別。 您也可以在單一合併功能表項目和其子功能表項目<xref:System.Windows.Forms.MenuItem>物件使用<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>方法<xref:System.Windows.Forms.MenuItem>類別。  
  
   
  
## Examples  
 下列程式碼範例會建立事件處理常式<xref:System.Windows.Forms.ContextMenu.Popup>事件<xref:System.Windows.Forms.ContextMenu>。 事件處理常式中的程式碼會判斷這兩個控制項<xref:System.Windows.Forms.PictureBox>名為`pictureBox1`和<xref:System.Windows.Forms.TextBox>名為`textBox1`是顯示快顯功能表的控制項。 根據造成哪些控制項<xref:System.Windows.Forms.ContextMenu>若要顯示其捷徑功能表，加入適當的控制項<xref:System.Windows.Forms.MenuItem>物件加入至<xref:System.Windows.Forms.ContextMenu>。 這個範例需要您具有執行個體<xref:System.Windows.Forms.ContextMenu>類別，名為`contextMenu1`，表單中之已定義。 此範例也會要求您擁有<xref:System.Windows.Forms.TextBox>和<xref:System.Windows.Forms.PictureBox>加入至表單，以及<xref:System.Windows.Forms.Control.ContextMenu%2A>這些控制項的屬性設定為`contextMenu1`。  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Menu" />
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="T:System.Windows.Forms.MainMenu" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.ContextMenu" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContextMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>不使用任何指定的功能表項目，初始化 <see cref="T:System.Windows.Forms.ContextMenu" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一旦您已使用這個建構函式版本，您可以加入功能表項目<xref:System.Windows.Forms.ContextMenu>使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法<xref:System.Windows.Forms.Menu.MenuItemCollection>類別。 您可以存取<xref:System.Windows.Forms.Menu.MenuItemCollection>透過<xref:System.Windows.Forms.Menu.MenuItems%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Menu.MenuItemCollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContextMenu (System.Windows.Forms.MenuItem[] menuItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] menuItems) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (menuItems As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContextMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ menuItems);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ContextMenu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.ContextMenu" Usage="new System.Windows.Forms.ContextMenu menuItems" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="menuItems" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="menuItems">
          <see cref="T:System.Windows.Forms.MenuItem" /> 物件的陣列，表示要加入捷徑功能表的功能表項目。</param>
        <summary>使用一組指定 <see cref="T:System.Windows.Forms.ContextMenu" /> 物件，初始化 <see cref="T:System.Windows.Forms.MenuItem" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個版本的建構函式來建立<xref:System.Windows.Forms.ContextMenu>包含在建立時指定其功能表項目。 一旦您已使用這個建構函式版本，您可以加入更多的功能表項目<xref:System.Windows.Forms.ContextMenu>使用<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>方法<xref:System.Windows.Forms.Menu.MenuItemCollection>類別。 您可以存取<xref:System.Windows.Forms.Menu.MenuItemCollection>透過<xref:System.Windows.Forms.Menu.MenuItems%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何建構捷徑功能表，並使用<xref:System.Windows.Forms.ContextMenu.Show%2A>方法。 要執行此範例，貼上下列程式碼中包含名為 Button1 的按鈕的表單。 確定所有事件與事件處理方法相關聯。  
  
 [!code-cpp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContextMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberSignature Language="F#" Value="member this.Collapse : EventHandler " Usage="member this.Collapse : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於捷徑功能表摺疊時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.ContextMenu.Collapse>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.ContextMenu>名為`ContextMenu1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.ContextMenu.Collapse>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#170](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#170)]
 [!code-vb[System.Windows.Forms.EventExamples#170](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCollapse : EventArgs -&gt; unit&#xA;override this.OnCollapse : EventArgs -&gt; unit" Usage="contextMenu.OnCollapse e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ContextMenu.Collapse" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPopup">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.OnPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPopup(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPopup : EventArgs -&gt; unit&#xA;override this.OnPopup : EventArgs -&gt; unit" Usage="contextMenu.OnPopup e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ContextMenu.Popup" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Popup">
      <MemberSignature Language="C#" Value="public event EventHandler Popup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Popup" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContextMenu.Popup" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Popup As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Popup;" />
      <MemberSignature Language="F#" Value="member this.Popup : EventHandler " Usage="member this.Popup : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於顯示捷徑功能表之前。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個事件來初始化<xref:System.Windows.Forms.MenuItem>才能顯示這些物件。 例如，如果您使用<xref:System.Windows.Forms.ContextMenu>三個<xref:System.Windows.Forms.TextBox>控制項，而且您想要停用特定的功能表項目在<xref:System.Windows.Forms.ContextMenu>依據<xref:System.Windows.Forms.TextBox>會顯示捷徑功能表，您可以建立此事件的事件處理常式。 您可以使用<xref:System.Windows.Forms.ContextMenu.SourceControl%2A>屬性來判斷哪一個<xref:System.Windows.Forms.TextBox>即將顯示<xref:System.Windows.Forms.ContextMenu>和停用適當<xref:System.Windows.Forms.MenuItem>物件。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例會建立事件處理常式<xref:System.Windows.Forms.ContextMenu.Popup>事件<xref:System.Windows.Forms.ContextMenu>。 事件處理常式中的程式碼會判斷這兩個控制項<xref:System.Windows.Forms.PictureBox>名為`pictureBox1`和<xref:System.Windows.Forms.TextBox>名為`textBox1`是顯示快顯功能表的控制項。 根據造成哪些控制項<xref:System.Windows.Forms.ContextMenu>若要顯示其捷徑功能表，加入適當的控制項<xref:System.Windows.Forms.MenuItem>物件加入至<xref:System.Windows.Forms.ContextMenu>。 這個範例需要您具有執行個體<xref:System.Windows.Forms.ContextMenu>類別，名為`contextMenu1`，表單中之已定義。 此範例也會要求您擁有<xref:System.Windows.Forms.TextBox>和<xref:System.Windows.Forms.PictureBox>加入至表單，以及<xref:System.Windows.Forms.Control.ContextMenu%2A>這些控制項的屬性設定為`contextMenu1`。  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData, System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData, class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys,System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData, System::Windows::Forms::Control ^ control);" />
      <MemberSignature Language="F#" Value="override this.ProcessCmdKey :  * System.Windows.Forms.Keys * System.Windows.Forms.Control -&gt; bool" Usage="contextMenu.ProcessCmdKey (msg, keyData, control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="msg">由參考所傳遞的 <see cref="T:System.Windows.Forms.Message" />，代表要處理的視窗訊息。</param>
        <param name="keyData">其中一個 <see cref="T:System.Windows.Forms.Keys" /> 值，表示要處理的按鍵。</param>
        <param name="control">要套用此命令鍵的控制項。</param>
        <summary>處理命令按鍵。</summary>
        <returns>如果字元已由控制項處理，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法是在處理命令的索引鍵前置處理的訊息。 命令索引鍵是一律優先於一般輸入索引鍵的索引鍵。 命令索引鍵的範例包括加速器及功能表快速鍵。 此方法必須傳回`true`指出它已處理命令按鍵，或`false`表示索引鍵不命令按鍵。 當控制項裝載在 Windows Forms 應用程式，或為 ActiveX 控制項時，只會呼叫這個方法。  
  
 <xref:System.Windows.Forms.ContextMenu.ProcessCmdKey%2A>方法會先判斷控制項是否有<xref:System.Windows.Forms.ContextMenu>，若是如此，可讓和<xref:System.Windows.Forms.ContextMenu>處理命令按鍵。 如果命令按鍵不功能表快顯控制項具有父代，金鑰會傳遞給父<xref:System.Windows.Forms.ContextMenu.ProcessCmdKey%2A>方法。 最後的結果會是索引鍵 「 昇 」 在控制項階層架構該命令。 除了使用者按下索引鍵，索引鍵的資料也會指出它，如果有的話，在按下輔助按鍵做為索引鍵相同的時間。 輔助按鍵包含 SHIFT、 CTRL 和 ALT 鍵。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">立即呼叫者呼叫 unmanaged 程式碼。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />方法在衍生類別中的，控制項應該傳回<see langword="true" />以表示它具有處理金鑰。針對該控制項，呼叫基底類別的結果不會處理識別碼<see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />方法應該傳回。控制項很少，如果有的話，必須覆寫這個方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContextMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.ContextMenu.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出控制項所顯示的文字是否從右到左。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.RightToLeft" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此屬性可讓您的功能表，以支援由右至左書寫的語言。 當這個屬性設定為`RightToLeft.Yes`，功能表項目文字會顯示由右至左，而不是預設從左到右的方法。  
  
> [!NOTE]
>  如需有關如何啟用由右至左對齊會影響 Windows Form 控制項的詳細資訊，請參閱<xref:System.Windows.Forms.Control.RightToLeft%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指派給屬性的值不是 <see cref="T:System.Windows.Forms.RightToLeft" /> 列舉型別的有效成員。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Show">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>顯示指定位置的捷徑功能表。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (System.Windows.Forms.Control control, System.Drawing.Point pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class System.Windows.Forms.Control control, valuetype System.Drawing.Point pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show(System::Windows::Forms::Control ^ control, System::Drawing::Point pos);" />
      <MemberSignature Language="F#" Value="member this.Show : System.Windows.Forms.Control * System.Drawing.Point -&gt; unit" Usage="contextMenu.Show (control, pos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="pos" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="control">
          <see cref="T:System.Windows.Forms.Control" />，指定與這個捷徑功能表相關的控制項。</param>
        <param name="pos">
          <see cref="T:System.Drawing.Point" />，指定顯示功能表的座標。 這些座標的指定方式相對於 <c>control</c> 參數中所指定控制項的用戶端座標。</param>
        <summary>顯示指定位置的捷徑功能表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，<xref:System.Windows.Forms.ContextMenu>時使用者按下滑鼠右按鈕上的控制項或表單區域會顯示，<xref:System.Windows.Forms.ContextMenu>繫結至。 若要手動顯示快顯功能表中的指定位置，並將它繫結與特定的控制項，您可以使用這個方法。 在功能表關閉之前，不會傳回這個方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何建構捷徑功能表，並使用<xref:System.Windows.Forms.ContextMenu.Show%2A>方法。 要執行此範例，貼上下列程式碼中包含名為 Button1 的按鈕的表單。 確定所有事件與事件處理方法相關聯。  
  
 [!code-cpp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">控制項的控制代碼不存在，或是看不到控制項。</exception>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (System.Windows.Forms.Control control, System.Drawing.Point pos, System.Windows.Forms.LeftRightAlignment alignment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class System.Windows.Forms.Control control, valuetype System.Drawing.Point pos, valuetype System.Windows.Forms.LeftRightAlignment alignment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show(System::Windows::Forms::Control ^ control, System::Drawing::Point pos, System::Windows::Forms::LeftRightAlignment alignment);" />
      <MemberSignature Language="F#" Value="member this.Show : System.Windows.Forms.Control * System.Drawing.Point * System.Windows.Forms.LeftRightAlignment -&gt; unit" Usage="contextMenu.Show (control, pos, alignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="pos" Type="System.Drawing.Point" />
        <Parameter Name="alignment" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="control">
          <see cref="T:System.Windows.Forms.Control" />，指定與這個捷徑功能表相關的控制項。</param>
        <param name="pos">
          <see cref="T:System.Drawing.Point" />，指定顯示功能表的座標。 這些座標的指定方式相對於 <c>control</c> 參數中所指定控制項的用戶端座標。</param>
        <param name="alignment">
          <see cref="T:System.Windows.Forms.LeftRightAlignment" />，指定相對於 <c>pos</c> 參數的控制項之對齊方式。</param>
        <summary>在指定的位置上顯示捷徑功能表，而且具有指定的對齊方式。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control SourceControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control SourceControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContextMenu.SourceControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ SourceControl { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SourceControl : System.Windows.Forms.Control" Usage="System.Windows.Forms.ContextMenu.SourceControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得顯示捷徑功能表的控制項。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Control" />，表示顯示捷徑功能表的控制項。 如果沒有任何控制項顯示捷徑功能表，屬性將傳回 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性可讓您判斷哪一個控制項目前顯示中所定義的捷徑功能表<xref:System.Windows.Forms.ContextMenu>。 如果目前沒有顯示的捷徑功能表，您可以使用這個屬性來判斷哪一個控制項最後顯示的捷徑功能表。 您可以使用這個屬性在<xref:System.Windows.Forms.ContextMenu.Popup>事件以確保控制項顯示適當的功能表項目。 您也可以使用這個屬性，以將控制項的參考傳遞給方法，用於執行快顯功能表中顯示的功能表命令相關聯的工作。 因為<xref:System.Windows.Forms.Form>類別繼承自<xref:System.Windows.Forms.Control>，您也可以使用這個屬性，如果<xref:System.Windows.Forms.ContextMenu>與表單相關聯。  
  
   
  
## Examples  
 下列程式碼範例會建立事件處理常式<xref:System.Windows.Forms.ContextMenu.Popup>事件<xref:System.Windows.Forms.ContextMenu>。 事件處理常式中的程式碼會判斷這兩個控制項<xref:System.Windows.Forms.PictureBox>名為`pictureBox1`和<xref:System.Windows.Forms.TextBox>名為`textBox1`是顯示快顯功能表的控制項。 根據造成哪些控制項<xref:System.Windows.Forms.ContextMenu>若要顯示其捷徑功能表，加入適當的控制項<xref:System.Windows.Forms.MenuItem>物件加入至<xref:System.Windows.Forms.ContextMenu>。 這個範例需要您具有執行個體<xref:System.Windows.Forms.ContextMenu>類別，名為`contextMenu1`，表單中之已定義。 此範例也會要求您擁有<xref:System.Windows.Forms.TextBox>和<xref:System.Windows.Forms.PictureBox>加入至表單，以及<xref:System.Windows.Forms.Control.ContextMenu%2A>這些控制項的屬性設定為`contextMenu1`。  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>