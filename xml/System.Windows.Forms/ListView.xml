<Type Name="ListView" FullName="System.Windows.Forms.ListView">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="48abdad84545b1f08adb5ce8c31cae031c876452" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659191" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ListView : System.Windows.Forms.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListView extends System.Windows.Forms.Control" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListView" />
  <TypeSignature Language="VB.NET" Value="Public Class ListView&#xA;Inherits Control" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListView : System::Windows::Forms::Control" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>代表 Windows 清單檢視控制項，顯示出使用四種不同檢視的其中一個就可以顯示出來的項目集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Forms.ListView>控制項可讓您顯示的項目文字和 （選擇性） 圖示來識別的項目類型的項目清單。 例如，Windows 檔案總管中的檔案清單是在外觀類似<xref:System.Windows.Forms.ListView>控制項。 它會顯示檔案和資料夾樹狀目錄中目前選取的清單。 每個檔案和資料夾會顯示以協助識別的檔案或資料夾類型相關聯的圖示。 <xref:System.Windows.Forms.ListViewItem>類別代表內的項目<xref:System.Windows.Forms.ListView>控制項。 會顯示在清單中的項目會顯示五種不同檢視的其中一個。 可大圖示、 小圖示，或垂直清單中的小圖示顯示項目。 項目也可以有子項目，其中包含與父項目相關的資訊。 詳細資料檢視，可讓您具有識別子項目中顯示的資訊的資料行標頭的方格中顯示項目及其子項目。 並排顯示檢視中，具有有限的可用性，如下所述，可讓您為圖格包含大型圖示旁邊的文字資訊顯示項目及其子項目。 <xref:System.Windows.Forms.ListView> 支援單一或多個選取項目。 多重選取功能可讓使用者從項目中的方式類似於清單中選取<xref:System.Windows.Forms.ListBox>控制項。 此外，使用者可以啟動選取的項目執行的工作。 例如，您可以使用<xref:System.Windows.Forms.ListView>控制項來顯示檔案，然後開啟再利用應用程式的清單。 使用者可以選取要開啟，然後按兩下啟動項目，並且在應用程式中開啟檔案的檔案。 <xref:System.Windows.Forms.ListView>可能也會顯示核取方塊，使用<xref:System.Windows.Forms.ListView.CheckBoxes%2A>屬性，可讓使用者檢查他們想要執行動作的項目。 您可以使用<xref:System.Windows.Forms.ListView>控制項中以各種方式。 控制項可以用來顯示應用程式、 資料庫或文字檔中的資訊。 <xref:System.Windows.Forms.ListView>也可用來取得使用者，例如，選取要處理的檔案集的資訊。  
  
 <xref:System.Windows.Forms.ListView> 提供大量的更有彈性的外觀和行為的屬性。 <xref:System.Windows.Forms.ListView.View%2A>屬性可讓您變更項目會顯示的方式。 <xref:System.Windows.Forms.ListView.LargeImageList%2A>， <xref:System.Windows.Forms.ListView.SmallImageList%2A>，和<xref:System.Windows.Forms.ListView.StateImageList%2A>屬性可讓您指定<xref:System.Windows.Forms.ImageList>物件，其中包含的項目和中的情況下顯示的映像<xref:System.Windows.Forms.ListView.StateImageList%2A>，核取方塊會顯示當<xref:System.Windows.Forms.ListView.CheckBoxes%2A>屬性設定為`true`。 若要判斷哪些項目會檢查，您可以使用<xref:System.Windows.Forms.ListView.CheckedItems%2A>屬性來存取<xref:System.Windows.Forms.ListView.CheckedListViewItemCollection>集合。 <xref:System.Windows.Forms.ListView.Columns%2A>屬性允許存取<xref:System.Windows.Forms.ListView.ColumnHeaderCollection>，它會儲存為資料行標頭時<xref:System.Windows.Forms.ListView.View%2A>控制項的屬性設定為<xref:System.Windows.Forms.View.Details>。 項目加入和移除從<xref:System.Windows.Forms.ListView>透過<xref:System.Windows.Forms.ListView.Items%2A>屬性。 <xref:System.Windows.Forms.ListView.Items%2A>屬性可讓您存取<xref:System.Windows.Forms.ListView.ListViewItemCollection>的控制項，提供方法來操作控制項中的項目。 如果您想要允許使用者編輯項目的文字，您可以使用<xref:System.Windows.Forms.ListView.LabelEdit%2A>屬性。 當控制項包含項目數量龐大時，通常很方便使用者在已排序的清單中看到它們。 您可以使用<xref:System.Windows.Forms.ListView.Sorting%2A>屬性依字母順序排序的項目。 您可以也完全自訂的外觀<xref:System.Windows.Forms.ListView>控制項。 若要這樣做，請設定<xref:System.Windows.Forms.ListView.OwnerDraw%2A>屬性`true`並處理一個或多個下列事件： <xref:System.Windows.Forms.ListView.DrawItem>， <xref:System.Windows.Forms.ListView.DrawSubItem>， <xref:System.Windows.Forms.ListView.DrawColumnHeader>。  
  
 許多屬性的<xref:System.Windows.Forms.ListView>的項目時使用<xref:System.Windows.Forms.ListView.View%2A>控制項的屬性設定為<xref:System.Windows.Forms.View.Details>。 <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>屬性可讓使用者的您<xref:System.Windows.Forms.ListView>控制項在執行階段重新設定資料行的順序。 <xref:System.Windows.Forms.ListView.FullRowSelect%2A>屬性可以讓項目和選取而非項目及其子項目。 若要顯示在詳細資料檢視，來識別的項目和子項目界限格線<xref:System.Windows.Forms.ListView>，您可以使用<xref:System.Windows.Forms.ListView.GridLines%2A>屬性。 <xref:System.Windows.Forms.ListView.HeaderStyle%2A>屬性可讓您指定的資料行標頭，以顯示類型。  
  
 A<xref:System.Windows.Forms.ListView>控制項可以運作的虛擬模式，其中<xref:System.Windows.Forms.ListViewItem>物件而不是儲存在動態產生<xref:System.Windows.Forms.ListView.Items%2A>集合。 這可用於處理極大型清單或其內容經常變更的清單。 若要啟用虛擬模式，<xref:System.Windows.Forms.ListView.VirtualMode%2A>屬性`true`及處理<xref:System.Windows.Forms.ListView.RetrieveVirtualItem>， <xref:System.Windows.Forms.ListView.CacheVirtualItems>，和<xref:System.Windows.Forms.ListView.SearchForVirtualItem>事件。  
  
 除了可用於許多內容<xref:System.Windows.Forms.ListView>控制項，有方法和事件，您的應用程式可以用來提供額外的功能<xref:System.Windows.Forms.ListView>。 <xref:System.Windows.Forms.ListView.BeginUpdate%2A>和<xref:System.Windows.Forms.ListView.EndUpdate%2A>方法可讓您以改善效能，當您新增至多個項目<xref:System.Windows.Forms.ListView>藉由防止在加入項目每次重新繪製控制項。 如果您<xref:System.Windows.Forms.ListView>控制項顯示的項目和子項目，您可能想要提供的功能，當使用者按一下滑鼠右鍵的子項目。 若要判斷其子項目會在按下的項目，您可以使用<xref:System.Windows.Forms.ListView.GetItemAt%2A>方法。 當使用者已經編輯過它們之後執行驗證的項目，您可以變更對使用者顯示的特定項目。 <xref:System.Windows.Forms.ListView.EnsureVisible%2A>可以呼叫方法，以確保特定項目控制項的可見區域。  
  
 如果<xref:System.Windows.Forms.ListView.LabelEdit%2A>屬性設定為`true`，您可以執行工作，例如先驗證之前和之後的文字變更所建立的事件處理常式正在編輯的文字<xref:System.Windows.Forms.ListView.BeforeLabelEdit>和<xref:System.Windows.Forms.ListView.AfterLabelEdit>事件。 若要執行工作，例如開啟檔案，或顯示對話方塊，以編輯項目顯示在<xref:System.Windows.Forms.ListView>，您可以建立事件處理常式<xref:System.Windows.Forms.ListView.ItemActivate>事件。 如果您允許使用者排序中的項目<xref:System.Windows.Forms.ListView>當使用者按一下資料行標頭，您可以建立事件處理常式<xref:System.Windows.Forms.ListView.ColumnClick>事件來執行排序。 當<xref:System.Windows.Forms.ListView.CheckBoxes%2A>屬性設定為`true`，您可以決定當項目的核取狀態變更已發生處理<xref:System.Windows.Forms.ListView.ItemCheck>事件。  
  
 您也可以設定的背景影像<xref:System.Windows.Forms.ListView>與<xref:System.Windows.Forms.Control.BackgroundImage%2A>屬性。 應用程式必須具有<xref:System.STAThreadAttribute>上其`Main`方法，以正確顯示的背景影像<xref:System.Windows.Forms.ListView>控制項。 此外，如果<xref:System.Windows.Forms.ListView>具有背景影像的控制項裝載於 Internet Explorer 中，指定為應用程式資訊清單檔中以確保背景影像會顯示屬性的相依組件的 comctl32.dll 版本 6.0。  
  
> [!NOTE]
>  設定<xref:System.Windows.Forms.Control.Cursor%2A>屬性<xref:System.Windows.Forms.ListView>控制項中的資料指標的外觀會有任何作用[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]1.1 及更早版本的版本。  
  
 Windows XP 和 Windows Server 2003 提供增強的三個功能<xref:System.Windows.Forms.ListView>控制當您的應用程式呼叫<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法： 並排顯示檢視、 群組和插入標記。  
  
 並排顯示檢視可讓您藉由顯示項目和子項目大圖示旁邊的文字，圖形和文字資訊之間取得平衡。 設定<xref:System.Windows.Forms.ListView.View%2A>屬性<xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>若要啟用這項行為。  
  
 群組功能可讓您以視覺化方式分組到相關的分類的項目。 使用<xref:System.Windows.Forms.ListView.Groups%2A>屬性將<xref:System.Windows.Forms.ListViewGroup>物件加入至<xref:System.Windows.Forms.ListView>控制當您想要啟用這項功能。 若要暫時停用此功能，設定<xref:System.Windows.Forms.ListView.ShowGroups%2A>屬性`false`。  
  
 插入標記功能可讓您提供拖放項目重新調整位置，以指出置放位置的視覺回應。 使用<xref:System.Windows.Forms.ListViewInsertionMark>物件透過擷取<xref:System.Windows.Forms.ListView.InsertionMark%2A>屬性來顯示插入標記。  
  
 這些功能都僅適用於 Windows XP 和 Windows Server 2003。 在舊版的作業系統，與這些功能相關聯的程式碼沒有任何作用，並排顯示檢視會顯示為大圖示檢視中，且插入標記和群組不會顯示。 在某些情況下，您可能會想要包含決定是否可用，這些功能的程式碼，並在無法使用時，提供替代功能。 提供作業系統主題功能的相同程式庫會提供這些功能。 若要檢查此程式庫的可用性，請呼叫<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType>方法多載，並傳入<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType>值。  
  
 下表顯示一些<xref:System.Windows.Forms.ListView>成員以及中是有效的檢視。  
  
|ListView 成員|檢視|  
|---------------------|----------|  
|<xref:System.Windows.Forms.ListView.Alignment%2A> 屬性|<xref:System.Windows.Forms.View.SmallIcon> 或 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoArrange%2A> 屬性|<xref:System.Windows.Forms.View.SmallIcon> 或 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> 方法|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.Columns%2A> 屬性|<xref:System.Windows.Forms.View.Details> 或 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.DrawSubItem> 事件|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.FindItemWithText%2A> 方法|<xref:System.Windows.Forms.View.Details>、 <xref:System.Windows.Forms.View.List>或 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.FindNearestItem%2A> 方法|<xref:System.Windows.Forms.View.SmallIcon> 或 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.GetItemAt%2A> 方法|<xref:System.Windows.Forms.View.Details> 或 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Groups%2A> 屬性|以外的所有模式 <xref:System.Windows.Forms.View.List>|  
|<xref:System.Windows.Forms.ListView.HeaderStyle%2A> 屬性|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.InsertionMark%2A> 屬性|<xref:System.Windows.Forms.View.LargeIcon>、 <xref:System.Windows.Forms.View.SmallIcon>或 <xref:System.Windows.Forms.View.Tile>|  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.ListView>控制項具有三個<xref:System.Windows.Forms.ListViewItem>所指定的物件和三個<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>針對每個項目指定的物件。 此範例也會建立<xref:System.Windows.Forms.ColumnHeader>物件詳細資料檢視中顯示子項目。 兩個<xref:System.Windows.Forms.ImageList>物件也會建立在程式碼範例中提供的映像<xref:System.Windows.Forms.ListViewItem>物件。 這些<xref:System.Windows.Forms.ImageList>物件加入至<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。 此範例會使用下列屬性建立<xref:System.Windows.Forms.ListView>控制項：  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 這個範例需要您已加入的程式碼<xref:System.Windows.Forms.Form>並呼叫從建構函式或在表單上的另一個方法範例中所建立的方法。 這個範例也會需要映像命名為`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位於 c 磁碟機的根目錄  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListViewItem" />
    <altmember cref="T:System.Windows.Forms.ImageList" />
    <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListView();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.ListView" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.ListView>控制項具有三個<xref:System.Windows.Forms.ListViewItem>所指定的物件和三個<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>針對每個項目指定的物件。 此範例也會建立<xref:System.Windows.Forms.ColumnHeader>物件詳細資料檢視中顯示子項目。 兩個<xref:System.Windows.Forms.ImageList>物件也會建立在程式碼範例中提供的映像<xref:System.Windows.Forms.ListViewItem>物件。 這些<xref:System.Windows.Forms.ImageList>物件加入至<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。 此範例會使用下列屬性建立<xref:System.Windows.Forms.ListView>控制項：  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 這個範例需要您已加入的程式碼<xref:System.Windows.Forms.Form>並呼叫從建構函式或在表單上的另一個方法範例中所建立的方法。 這個範例也會需要映像命名為`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位於 c 磁碟機的根目錄  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activation">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ItemActivation Activation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ItemActivation Activation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Activation" />
      <MemberSignature Language="VB.NET" Value="Public Property Activation As ItemActivation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ItemActivation Activation { System::Windows::Forms::ItemActivation get(); void set(System::Windows::Forms::ItemActivation value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemActivation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定使用者必須採取才能夠啟動項目的動作類型。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.ItemActivation" /> 值。 預設值為 <see cref="F:System.Windows.Forms.ItemActivation.Standard" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Activation%2A>屬性可讓您指定使用者將如何啟動中的項目<xref:System.Windows.Forms.ListView>控制項。 啟用中的項目<xref:System.Windows.Forms.ListView>不同只選取項目。 中的事件處理常式啟動項目時，通常執行某個動作<xref:System.Windows.Forms.ListView.ItemActivate>事件。 例如，啟動項目時可能會開啟檔案，或顯示對話方塊，可讓要編輯的項目。 一般而言，按兩下項目時，使用者啟動它。 如果<xref:System.Windows.Forms.ListView.Activation%2A>屬性設定為<xref:System.Windows.Forms.ItemActivation.OneClick>，按一下項目一次會啟動它。 設定<xref:System.Windows.Forms.ListView.Activation%2A>屬性<xref:System.Windows.Forms.ItemActivation.TwoClick>不同於標準的按兩下，因為它們之間的時間長度可能會有兩次按一下。  
  
> [!NOTE]
>  如果<xref:System.Windows.Forms.ListView.Activation%2A>屬性設定為<xref:System.Windows.Forms.ItemActivation.OneClick>或<xref:System.Windows.Forms.ItemActivation.TwoClick>，編輯標籤不允許的值為何<xref:System.Windows.Forms.ListView.LabelEdit%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的值不是其中一個 <see cref="T:System.Windows.Forms.ItemActivation" /> 成員。</exception>
        <altmember cref="T:System.Windows.Forms.ItemActivation" />
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
      </Docs>
    </Member>
    <Member MemberName="AfterLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler AfterLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler AfterLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AfterLabelEdit As LabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LabelEditEventHandler ^ AfterLabelEdit;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者編輯項目的標籤時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.AfterLabelEdit>事件發生於使用者可讓您完成修改項目的文字。 使用者輸入項目的新字串會傳遞至事件和事件處理常式可以拒絕變更。 如果事件處理常式會拒絕變更，文字會在使用者開始編輯項目之前時，還原成文字。  
  
> [!NOTE]
>  因為<xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType>事件會在標籤編輯認可，呼叫之前<xref:System.Windows.Forms.ListView.Sort%2A?displayProperty=nameWithType>這個事件處理常式方法會使用原始值的項目進行排序。  
  
 為了讓<xref:System.Windows.Forms.ListView.AfterLabelEdit>會引發事件<xref:System.Windows.Forms.ListView.LabelEdit%2A>屬性<xref:System.Windows.Forms.ListView>控制項必須設為`true`。  
  
 您可以建立事件處理常式<xref:System.Windows.Forms.ListView.BeforeLabelEdit>事件，以執行工作，才能在使用者編輯項目的文字。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView.AfterLabelEdit>事件，以將新的編輯標籤限制為字母中的字元。 此範例會使用<xref:System.Text.ASCIIEncoding>類別來取得新的標籤的每個字元的 ASCII 字元碼。 如果字元落表示數字的 ASCII 碼，新的標籤無法套用至項目。 這個範例需要您已建立<xref:System.Windows.Forms.ListView>控制項在表單和它所加入的項目。 這個範例也會需要您已連接<xref:System.Windows.Forms.ListView.AfterLabelEdit>範例程式碼中定義的事件處理常式的事件。 若要使用<xref:System.Text.ASCIIEncoding>類別，您的檔案必須包含<xref:System.Text>命名空間。  
  
 [!code-cpp[ListView.AfterLabelEdit#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ListViewAlignment Alignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Alignment" />
      <MemberSignature Language="VB.NET" Value="Public Property Alignment As ListViewAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewAlignment Alignment { System::Windows::Forms::ListViewAlignment get(); void set(System::Windows::Forms::ListViewAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定控制項中項目的對齊。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.ListViewAlignment" /> 值。 預設值為 <see cref="F:System.Windows.Forms.ListViewAlignment.Top" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Alignment%2A>屬性只會影響對齊時<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.LargeIcon>或<xref:System.Windows.Forms.View.SmallIcon>。  
  
> [!NOTE]
>  此屬性沒有任何作用，與<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.List>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的值不是其中一個 <see cref="T:System.Windows.Forms.ListViewAlignment" /> 值。</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
      </Docs>
    </Member>
    <Member MemberName="AllowColumnReorder">
      <MemberSignature Language="C#" Value="public bool AllowColumnReorder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowColumnReorder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AllowColumnReorder" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowColumnReorder As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowColumnReorder { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出使用者是否可以拖曳資料行標頭，將控制項中的資料行重新排列。</summary>
        <value>
          如果允許資料行以拖放的方式重新排列，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值設定<xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>屬性沒有任何作用，除非<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.Details>。 您可以使用這個屬性可讓使用者在執行階段調整控制項中的資料行。 當<xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>屬性設定為`true`，使用者可以放置控制項，以符合其需求，您的應用程式內的方式來顯示項目與它的子項目中的資料行。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.ListView>控制項具有三個<xref:System.Windows.Forms.ListViewItem>所指定的物件和三個<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>針對每個項目指定的物件。 此範例也會建立<xref:System.Windows.Forms.ColumnHeader>物件詳細資料檢視中顯示子項目。 兩個<xref:System.Windows.Forms.ImageList>物件也會建立在程式碼範例中提供的映像<xref:System.Windows.Forms.ListViewItem>物件。 這些<xref:System.Windows.Forms.ImageList>物件加入至<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。 此範例會使用下列屬性建立<xref:System.Windows.Forms.ListView>控制項：  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 這個範例需要您已加入的程式碼<xref:System.Windows.Forms.Form>並呼叫從建構函式或在表單上的另一個方法範例中所建立的方法。 這個範例也會需要映像命名為`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位於 c 磁碟機的根目錄  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrangeIcons">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>控制項中的項目顯示為圖示時加以排列。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons" />
      <MemberSignature Language="VB.NET" Value="Public Sub ArrangeIcons ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ArrangeIcons();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>控制項中的項目按照 <see cref="P:System.Windows.Forms.ListView.Alignment" /> 屬性的值顯示成為圖示時，可加以排列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A>方法時，才有用<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.LargeIcon>或<xref:System.Windows.Forms.View.SmallIcon>。 呼叫此版本的<xref:System.Windows.Forms.ListView.ArrangeIcons%2A>方法排列的值為基礎的項目<xref:System.Windows.Forms.ListView.Alignment%2A>屬性。 若要將導致對齊項目為主的值，不同於<xref:System.Windows.Forms.ListView.Alignment%2A>屬性，使用其他版本的<xref:System.Windows.Forms.ListView.ArrangeIcons%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons (System.Windows.Forms.ListViewAlignment value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons(valuetype System.Windows.Forms.ListViewAlignment value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ArrangeIcons (value As ListViewAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ArrangeIcons(System::Windows::Forms::ListViewAlignment value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.ListViewAlignment" />
      </Parameters>
      <Docs>
        <param name="value">其中一個 <see cref="T:System.Windows.Forms.ListViewAlignment" /> 值。</param>
        <summary>控制項中的項目顯示為圖示時，用特定的對齊設定加以排列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A>方法時，才有用<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.LargeIcon>或<xref:System.Windows.Forms.View.SmallIcon>。 這個版本的<xref:System.Windows.Forms.ListView.ArrangeIcons%2A>方法中排列圖示<xref:System.Windows.Forms.ListView>根據<xref:System.Windows.Forms.ListViewAlignment>中指定的值`value`參數。 呼叫這個方法不會變更的值<xref:System.Windows.Forms.ListView.Alignment%2A>控制項的屬性。 這個方法用來將圖示排列在使用不同的值以外的控制項上<xref:System.Windows.Forms.ListView.Alignment%2A>屬性。 若要導致要對齊的項目為基礎的值<xref:System.Windows.Forms.ListView.Alignment%2A>屬性，使用其他版本的<xref:System.Windows.Forms.ListView.ArrangeIcons%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> 參數中指定的數值並非 <see cref="T:System.Windows.Forms.ListViewAlignment" /> 列舉型別 (Enumeration) 的成員。</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoArrange">
      <MemberSignature Language="C#" Value="public bool AutoArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AutoArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoArrange { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定是否自動將圖示保持為已管理。</summary>
        <value>
          如果自動將圖示保持為已管理並且貼齊格線，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.AutoArrange%2A>屬性只會排列中的項目<xref:System.Windows.Forms.ListView>負責控制何時<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.LargeIcon>或<xref:System.Windows.Forms.View.SmallIcon>。 若要變更的項目中的對齊方式<xref:System.Windows.Forms.ListView>控制，請使用<xref:System.Windows.Forms.ListView.Alignment%2A>屬性。 您可以使用<xref:System.Windows.Forms.ListView.AutoArrange%2A>以確保所有項目中您<xref:System.Windows.Forms.ListView>避免重疊，在執行階段自動排列控制項。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumn(int32 columnIndex, valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumn (columnIndex As Integer, headerAutoResize As ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumn(int columnIndex, System::Windows::Forms::ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="columnIndex">要調整大小的資料行之以零為起始的索引。</param>
        <param name="headerAutoResize">其中一個 <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> 值。</param>
        <summary>根據調整大小樣式的指示，重新調整指定之資料行的寬度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法才有效一次<xref:System.Windows.Forms.ListView>和包含<xref:System.Windows.Forms.Form>已建構和<xref:System.Windows.Forms.ListView>資料行標頭和資料行填入項目。 如果加入新項目<xref:System.Windows.Forms.ListView>，資料行不會調整大小除非<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A>會再次呼叫。  
  
   
  
## Examples  
 下列範例會初始化<xref:System.Windows.Forms.ListView>詳細資料檢視中，並自動調整大小的資料行使用<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A>方法。 若要執行此範例中，將此程式碼貼到 Windows Form 並呼叫`InitializeResizingListView`從表單的建構函式的方法或<xref:System.Windows.Forms.Form.Load>事件處理常式。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          當 <see cref="P:System.Windows.Forms.ListView.Columns" /> 為 <see langword="null" /> 時，<paramref name="columnIndex" /> 大於 0   
  
 -或-  
  
 <paramref name="columnIndex" /> 小於 0 或大於資料行設定的數目。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="headerAutoResize" /> 不是 <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> 列舉型別的成員。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns (System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumns(valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumns(System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumns (headerAutoResize As ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumns(System::Windows::Forms::ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="headerAutoResize">其中一個 <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> 值。</param>
        <summary>根據調整大小樣式的指示，調整資料行的寬度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法才有效一次<xref:System.Windows.Forms.ListView>和包含<xref:System.Windows.Forms.Form>已建構和<xref:System.Windows.Forms.ListView>資料行標頭和資料行填入項目。 如果加入新項目<xref:System.Windows.Forms.ListView>，資料行不會調整大小除非<xref:System.Windows.Forms.ListView.AutoResizeColumns%2A>會再次呼叫。  
  
   
  
## Examples  
 下列程式碼範例示範如何初始化<xref:System.Windows.Forms.ListView>在詳細資料檢視] 和 [自動調整大小的資料行使用<xref:System.Windows.Forms.ListView.AutoResizeColumns%2A>方法。 若要執行此範例中，將此程式碼貼到 Windows Form 並呼叫`InitializeResizingListView2`從表單的建構函式的方法或<xref:System.Windows.Forms.Form.Load>事件處理常式。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#9)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          當 <see cref="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" /> 未設定為 <see cref="F:System.Windows.Forms.ColumnHeaderAutoResizeStyle.None" /> 時，是用 <see cref="P:System.Windows.Forms.ListView.View" /> 以外的值呼叫 <see cref="F:System.Windows.Forms.View.Details" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定背景色彩。</summary>
        <value>背景的 <see cref="T:System.Drawing.Color" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.ImageLayout" /> 值。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.ImageLayout" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性就沒有作用的背景影像的配置<xref:System.Windows.Forms.ListView>控制項，因此它不會顯示在設計工具或 intellisense。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的值不是其中一個 <see cref="T:System.Windows.Forms.ImageLayout" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="P:System.Windows.Forms.ListView.BackgroundImageLayout" /> 屬性變更時。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageTiled">
      <MemberSignature Language="C#" Value="public bool BackgroundImageTiled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BackgroundImageTiled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageTiled" />
      <MemberSignature Language="VB.NET" Value="Public Property BackgroundImageTiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BackgroundImageTiled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Windows.Forms.ListView" /> 的背景影像是否應該並排顯示。</summary>
        <value>
          如果 <see cref="T:System.Windows.Forms.ListView" /> 的背景影像應該並排顯示，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.BackgroundImageTiled%2A>屬性會傳回`false`如果未設定映像。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BeforeLabelEdit As LabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LabelEditEventHandler ^ BeforeLabelEdit;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者開始編輯項目的標籤時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.BeforeLabelEdit>當使用者開始修改項目的文字，就會發生事件。 如果事件處理常式取消這個事件，使用者無法編輯文字。 您可以使用此事件，若要防止使用者編輯中的特定項目的<xref:System.Windows.Forms.ListView>控制項。 如果<xref:System.Windows.Forms.ListView.LabelEdit%2A>屬性<xref:System.Windows.Forms.ListView>控制設為  `false`、<xref:System.Windows.Forms.ListView.BeforeLabelEdit>不會引發事件; 若要編輯的項目標籤的所有使用者嘗試都會自動都遭拒。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範處理<xref:System.Windows.Forms.ListView.BeforeLabelEdit>事件並使用<xref:System.Windows.Forms.LabelEditEventArgs.Item%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A?displayProperty=nameWithType>屬性。 若要執行此範例，將下列程式碼貼到表單，其中包含<xref:System.Windows.Forms.ListView>控制項，名為`ListView1`並填入至少三個項目。 請在範例中的事件處理常式相關聯的事件。  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.BeginUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>直到 <see cref="M:System.Windows.Forms.ListView.EndUpdate" /> 方法呼叫前，防止控制項被繪製。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新增多個項目，最好<xref:System.Windows.Forms.ListView>是使用<xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A>方法<xref:System.Windows.Forms.ListView.ListViewItemCollection>(透過存取<xref:System.Windows.Forms.ListView.Items%2A>屬性<xref:System.Windows.Forms.ListView>)。 這可讓您將項目陣列加入至單一作業中的清單。 不過，如果您想要加入的項目一於使用<xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A>方法<xref:System.Windows.Forms.ListView.ListViewItemCollection>類別，您可以使用<xref:System.Windows.Forms.ListView.BeginUpdate%2A>方法，以防止重繪控制項<xref:System.Windows.Forms.ListView>每個項目加入的時間。 當您已完成的工作項目加入控制項時，呼叫<xref:System.Windows.Forms.ListView.EndUpdate%2A>方法，以啟用<xref:System.Windows.Forms.ListView>來重新繪製。 加入項目可以防止這種 flickered 繪圖的<xref:System.Windows.Forms.ListView>當正在許多項目加入至控制項。  
  
 如果<xref:System.Windows.Forms.ListView.BeginUpdate%2A>呼叫一次以上，<xref:System.Windows.Forms.ListView.EndUpdate%2A>必須呼叫的對等的次數。 最後一個呼叫<xref:System.Windows.Forms.ListView.EndUpdate%2A><xref:System.Windows.Forms.ListView>將不會重新繪製。 此外，多個呼叫<xref:System.Windows.Forms.ListView.BeginUpdate%2A>沒有作用。  
  
   
  
## Examples  
 下列程式碼範例示範如何初始化<xref:System.Windows.Forms.ListView>控制項包含核取方塊。 它也會示範如何使用<xref:System.Windows.Forms.ListView.BeginUpdate%2A>和<xref:System.Windows.Forms.ListView.EndUpdate%2A>方法。 若要執行此範例中，將下列程式碼貼到表單，其中包含<xref:System.Windows.Forms.ListView>名為`ListView1`。 呼叫`InititalizeListView`從表單的建構函式的方法或`Load`方法。  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.EndUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定控制項的框線樣式。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.BorderStyle" /> 值。 預設值為 <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Windows.Forms.ListView.BorderStyle%2A>要變更的框線樣式屬性<xref:System.Windows.Forms.ListView>控制要比對表單上其他控制項的框線樣式設定。 例如，如果沒有任何其他控制項在表單上顯示框線，您可以設定<xref:System.Windows.Forms.ListView.BorderStyle%2A>屬性<xref:System.Windows.Forms.ListView>控制權傳輸至<xref:System.Windows.Forms.BorderStyle.None>以符合其他的控制項。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的值不是其中一個 <see cref="T:System.Windows.Forms.BorderStyle" /> 值。</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="CacheVirtualItems">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.CacheVirtualItems" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CacheVirtualItems As CacheVirtualItemsEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::CacheVirtualItemsEventHandler ^ CacheVirtualItems;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CacheVirtualItemsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當已變更虛擬模式中 <see cref="T:System.Windows.Forms.ListView" /> 的顯示區域內容，而且 <see cref="T:System.Windows.Forms.ListView" /> 判斷需要新的項目範圍時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只會發生此事件時<xref:System.Windows.Forms.ListView.VirtualMode%2A>是`true`。 處理此事件可讓<xref:System.Windows.Forms.ListView>更新項目資訊保留在快取，讓它隨時可用。 這可以改善大型清單或清單，其中的項目是相當費時計算的效能。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會檢查以確定快取重新整理真有必要，然後再重建快取。 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Windows.Forms.ListView.VirtualMode%2A>屬性。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckBoxes">
      <MemberSignature Language="C#" Value="public bool CheckBoxes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckBoxes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckBoxes" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckBoxes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckBoxes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出控制項中每個項目的旁邊是否要出現核取方塊。</summary>
        <value>
          如果 <see cref="T:System.Windows.Forms.ListView" /> 控制項中每個項目的旁邊都要出現核取方塊，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.CheckBoxes%2A>屬性可讓您顯示清單中的每個項目旁的核取方塊。 這可讓您的應用程式，以顯示項目清單 (如果 subitems 和<xref:System.Windows.Forms.ListView.View%2A>屬性設定為`View.Details`)，使用者可以選取核取方塊，即可。 <xref:System.Windows.Forms.ListView.CheckBoxes%2A>屬性提供一種方式選取多個項目<xref:System.Windows.Forms.ListView>控制項，而不需要使用 CTRL 鍵。 根據您的應用程式使用核取方塊選取項目，而不是標準的多個選取的方法可能會讓使用者更容易。 即使<xref:System.Windows.Forms.ListView.MultiSelect%2A>屬性<xref:System.Windows.Forms.ListView>控制設為  `false`，您仍可以顯示核取方塊並提供給使用者的多個選取的功能。 如果您不想要選取多個項目但仍想要允許使用者執行您的應用程式內的作業清單中選擇多個項目，這項功能十分有用。  
  
 若要判斷時已檢查的項目，建立事件處理常式<xref:System.Windows.Forms.ListView.ItemCheck>事件。 若要取得已簽入的所有項目<xref:System.Windows.Forms.ListView>，使用<xref:System.Windows.Forms.ListView.CheckedItems%2A>屬性來存取<xref:System.Windows.Forms.ListView.CheckedIndexCollection>控制項。 若要取得已簽入的所有項目的索引<xref:System.Windows.Forms.ListView>，使用<xref:System.Windows.Forms.ListView.CheckedIndices%2A>屬性。  
  
 如果<xref:System.Windows.Forms.ImageList>中指定<xref:System.Windows.Forms.ListView.StateImageList%2A>屬性，在 0 和 1 中的索引位置的映像<xref:System.Windows.Forms.ImageList>而不是核取方塊會顯示。 而不是未檢查的核取方塊，顯示的影像的索引位置 0，而不是已核取核取方塊會顯示的索引位置 1 的影像。  
  
> [!NOTE]
>  當您將此屬性設定為`true`、<xref:System.Windows.Forms.ListView.ItemCheck>就會發生事件。  
>   
>  核取方塊不會顯示當<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.Tile>。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.ListView>控制項具有三個<xref:System.Windows.Forms.ListViewItem>所指定的物件和三個<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>針對每個項目指定的物件。 此範例也會建立<xref:System.Windows.Forms.ColumnHeader>物件詳細資料檢視中顯示子項目。 兩個<xref:System.Windows.Forms.ImageList>物件也會建立在程式碼範例中提供的映像<xref:System.Windows.Forms.ListViewItem>物件。 這些<xref:System.Windows.Forms.ImageList>物件加入至<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。 此範例會使用下列屬性建立<xref:System.Windows.Forms.ListView>控制項。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 這個範例需要您已加入的程式碼<xref:System.Windows.Forms.Form>並呼叫從建構函式或在表單上的另一個方法範例中所建立的方法。 這個範例也會需要映像命名為`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位於 c 磁碟機的根目錄  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="P:System.Windows.Forms.ListView.MultiSelect" />
      </Docs>
    </Member>
    <Member MemberName="CheckedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedIndexCollection CheckedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedIndexCollection CheckedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedIndices As ListView.CheckedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::CheckedIndexCollection ^ CheckedIndices { System::Windows::Forms::ListView::CheckedIndexCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得控制項中目前選取項目的索引。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />，包含目前所選取項目的索引。 如果目前並未選取項目，則傳回空白的 <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性時，才有用<xref:System.Windows.Forms.ListView.CheckBoxes%2A>屬性<xref:System.Windows.Forms.ListView>控制設為  `true`。 <xref:System.Windows.Forms.ListView.CheckedIndices%2A>屬性會傳回集合，其中包含的索引位置<xref:System.Windows.Forms.ListView.ListViewItemCollection>會檢查在控制項中的所有項目。 如需如何管理集合中的項目，請參閱<xref:System.Windows.Forms.ListView.CheckedIndexCollection>。  
  
 如果您想要取得的簽入的項目集合<xref:System.Windows.Forms.ListView>控制項，而不是索引位置的項目會檢查使用<xref:System.Windows.Forms.ListView.CheckedItems%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedItems" />
      </Docs>
    </Member>
    <Member MemberName="CheckedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedListViewItemCollection CheckedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedListViewItemCollection CheckedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedItems As ListView.CheckedListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::CheckedListViewItemCollection ^ CheckedItems { System::Windows::Forms::ListView::CheckedListViewItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得控制項中目前選取的項目。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" />，包含目前選取的項目。 如果目前並未選取項目，則傳回空白的 <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性時，才有用<xref:System.Windows.Forms.ListView.CheckBoxes%2A>屬性<xref:System.Windows.Forms.ListView>控制設為  `true`。 <xref:System.Windows.Forms.ListView.CheckedItems%2A>屬性會傳回集合，其中包含已在控制項中的所有項目。 如需如何管理集合中的項目，請參閱<xref:System.Windows.Forms.ListView.CheckedListViewItemCollection>。  
  
 如果您想要取得集合中的索引位置的<xref:System.Windows.Forms.ListView.ListViewItemCollection>簽入的項目<xref:System.Windows.Forms.ListView>控制項，而不是項目會檢查使用<xref:System.Windows.Forms.ListView.CheckedIndices%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何檢查<xref:System.Windows.Forms.ListView>可處理<xref:System.Windows.Forms.ListView.ItemChecked>事件。 此範例會使用<xref:System.Windows.Forms.ListView.CheckedItems%2A>屬性来記錄項目是 checked 或 unchecked 每次新的價格。 若要執行此範例中，將下列程式碼貼到表單，其中包含<xref:System.Windows.Forms.ListView>名為`ListView1`和<xref:System.Windows.Forms.TextBox>名為`Textbox1`。 呼叫`InititalizeListView`從表單的建構函式的方法或`Load`方法。  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedIndices" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將控制項中所有的項目和資料行全部移除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個方法來移除所有項目和資料行從<xref:System.Windows.Forms.ListView>控制項，而不必呼叫個別`Clear`方法<xref:System.Windows.Forms.ListView.ColumnHeaderCollection>和<xref:System.Windows.Forms.ListView.ListViewItemCollection>類別。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListView.Clear%2A>方法不會清除<xref:System.Windows.Forms.ListView.Groups%2A>指定<xref:System.Windows.Forms.ListView>控制項。 若要清除<xref:System.Windows.Forms.ListView.Groups%2A>呼叫<xref:System.Windows.Forms.ListViewGroupCollection.Clear%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView.Clear%2A>和<xref:System.Windows.Forms.ListViewItem.Selected%2A?displayProperty=nameWithType>成員。 若要執行此範例中，將下列程式碼貼到表單，其中包含<xref:System.Windows.Forms.ListView>名為`ListView1`和按鈕，位於名為表單底部`Button1`。 呼叫`InitializeListView`從表單的建構函式的方法或`Load`方法。  
  
 [!code-cpp[System.Windows.Forms.ListView4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.ColumnHeaderCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Clear" />
      </Docs>
    </Member>
    <Member MemberName="ColumnClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnClickEventHandler ColumnClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnClickEventHandler ColumnClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnClick As ColumnClickEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnClickEventHandler ^ ColumnClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者按一下清單檢視控制項中的資料行標頭時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ColumnClick>使用者按一下其中一個資料行中的標頭的詳細資料檢視中的項目時，就會發生事件<xref:System.Windows.Forms.ListView>控制項 (當<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.Details>)。 <xref:System.Windows.Forms.ListView.ColumnClick>事件通常用於排序的項目<xref:System.Windows.Forms.ListView>使用按資料行的資料行，來排序。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例會建立包含表單的<xref:System.Windows.Forms.ListView>手動排序項目中的資料行時的控制項<xref:System.Windows.Forms.ListView>按一下控制項時。 此範例會定義一種類別稱為`ListViewItemComparer`實作<xref:System.Collections.IComparer?displayProperty=nameWithType>介面執行<xref:System.Windows.Forms.ListViewItem>比較。 此範例會建立的執行個體`ListViewItemComparer`並使用它來設定<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>屬性<xref:System.Windows.Forms.ListView>控制項。 <xref:System.Windows.Forms.ListView.Sort%2A>方法呼叫中<xref:System.Windows.Forms.ListView.ColumnClick>事件處理常式的使用中定義的方法`ListViewItemComparer`來執行的項目，根據按下的資料行排序。  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ColumnReordered">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnReordered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnReordered As ColumnReorderedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnReorderedEventHandler ^ ColumnReordered;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnReorderedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於資料行標頭順序已變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ColumnReordered>事件可取消事件，且可以處理事件和設定取消<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>屬性`true`。 不過，如果事件已取消，<xref:System.Windows.Forms.ColumnReorderedEventArgs.NewDisplayIndex%2A>的<xref:System.Windows.Forms.ColumnReorderedEventArgs>不會變更為<xref:System.Windows.Forms.ColumnReorderedEventArgs.OldDisplayIndex%2A>值。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.ListView.ColumnReordered>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.ListView>名為`ListView1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.ListView.ColumnReordered>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#467](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#467)]
 [!code-vb[System.Windows.Forms.EventExamples#467](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#467)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ColumnHeaderCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ColumnHeaderCollection Columns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Columns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Columns As ListView.ColumnHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::ColumnHeaderCollection ^ Columns { System::Windows::Forms::ListView::ColumnHeaderCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ColumnHeaderCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ColumnHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得控制項中顯示的所有資料行標頭的集合。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" />，表示當 <see cref="P:System.Windows.Forms.ListView.View" /> 屬性設定為 <see cref="F:System.Windows.Forms.View.Details" /> 時顯示的資料行行首。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Columns%2A>屬性會傳回集合，其中包含<xref:System.Windows.Forms.ColumnHeader>物件中所顯示的<xref:System.Windows.Forms.ListView>控制項。 <xref:System.Windows.Forms.ColumnHeader> 物件定義的資料行中所顯示的<xref:System.Windows.Forms.ListView>負責控制何時<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.Details>。 每個資料行用來顯示每個項目中的子項目資訊<xref:System.Windows.Forms.ListView>。 如需如何管理集合中的項目，請參閱<xref:System.Windows.Forms.ListView.ColumnHeaderCollection>。  
  
> [!NOTE]
>  如果您<xref:System.Windows.Forms.ListView>控制項沒有指定任何資料行標頭，而且您設定<xref:System.Windows.Forms.ListView.View%2A>屬性<xref:System.Windows.Forms.View.Details>、<xref:System.Windows.Forms.ListView>控制項不會顯示任何項目。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.ListView>控制項具有三個<xref:System.Windows.Forms.ListViewItem>所指定的物件和三個<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>針對每個項目指定的物件。 此範例也會建立<xref:System.Windows.Forms.ColumnHeader>物件詳細資料檢視中顯示子項目。 兩個<xref:System.Windows.Forms.ImageList>物件也會建立在程式碼範例中提供的映像<xref:System.Windows.Forms.ListViewItem>物件。 這些<xref:System.Windows.Forms.ImageList>物件加入至<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。 此範例會使用下列屬性建立<xref:System.Windows.Forms.ListView>控制項。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 這個範例需要您已加入的程式碼<xref:System.Windows.Forms.Form>並呼叫從建構函式或在表單上的另一個方法範例中所建立的方法。 這個範例也會需要映像命名為`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位於 c 磁碟機的根目錄  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" />
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanged As ColumnWidthChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnWidthChangedEventHandler ^ ColumnWidthChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於成功變更資料行寬度後。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果變更資料行寬度以取消不會發生此事件<xref:System.Windows.Forms.ListView.ColumnWidthChanging>事件  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.ListView.ColumnWidthChanged>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.ListView>名為`ListView1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.ListView.ColumnWidthChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#468](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#468)]
 [!code-vb[System.Windows.Forms.EventExamples#468](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#468)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanging">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanging As ColumnWidthChangingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnWidthChangingEventHandler ^ ColumnWidthChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於資料行的寬度變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件可讓您檢查與新的資料行寬度<xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=nameWithType>屬性，並取消事件，如果您選擇藉由設定<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>屬性`true`。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範處理<xref:System.Windows.Forms.ListView.ColumnWidthChanging>事件。 它也會示範<xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=nameWithType>和<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>成員。 若要執行此範例中，貼在 Windows Form 中的程式碼。 呼叫`InitializeListView1`從表單的建構函式或<xref:System.Windows.Forms.Form.Load>事件處理常式。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立控制項的控制代碼。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>這個屬性與這個類別無關。</summary>
        <value>
          所有情況下都是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性與這個類別無關。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得控制項的預設大小。</summary>
        <value>控制項的預設 <see cref="T:System.Drawing.Size" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
        <summary>釋放 <see cref="T:System.Windows.Forms.ListView" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Windows.Forms.ListView.Dispose%2A>方法不再需要的元件時。 這個方法會移除該元件從其容器 （如果元件有站台） 並處置事件觸發程序。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected override bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DoubleBuffered" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DoubleBuffered As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool DoubleBuffered { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出這個控制項是否應使用次要緩衝區重繪其介面，以減少或防止重繪閃動 (Flicker)。</summary>
        <value>
          如果應該使用雙重緩衝繪製控制項的介面，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawColumnHeader">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawColumnHeader" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawColumnHeader As DrawListViewColumnHeaderEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewColumnHeaderEventHandler ^ DrawColumnHeader;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewColumnHeaderEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當已繪製 <see cref="T:System.Windows.Forms.ListView" /> 的詳細資料檢視而且 <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> 屬性設定為 <see langword="true" /> 時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件可讓您自訂的外觀<xref:System.Windows.Forms.ListView>使用主控描繪控制項。 會引發此事件時，才<xref:System.Windows.Forms.ListView.OwnerDraw%2A>屬性設定為`true`和<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>。 在控制項中的每個資料行標頭，可能會發生此事件。 如需有關主控描繪的詳細資訊，請參閱<xref:System.Windows.Forms.ListView.OwnerDraw%2A>屬性參考主題。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例提供的實作<xref:System.Windows.Forms.ListView.DrawColumnHeader>事件處理常式。 完整的範例，包括實作<xref:System.Windows.Forms.ListView.DrawSubItem>事件處理常式，請參閱<xref:System.Windows.Forms.ListView.OwnerDraw%2A>參考主題。  
  
 [!code-csharp[ListViewOwnerDraw#5](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#5)]
 [!code-vb[ListViewOwnerDraw#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawListViewItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewItemEventHandler ^ DrawItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當已繪製 <see cref="T:System.Windows.Forms.ListView" /> 而且 <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> 屬性設定為 <see langword="true" /> 時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件可讓您自訂的外觀<xref:System.Windows.Forms.ListView>使用主控描繪控制項。 會引發此事件時，才<xref:System.Windows.Forms.ListView.OwnerDraw%2A>屬性設定為`true`。 如需主控描繪的詳細資訊，請參閱<xref:System.Windows.Forms.ListView.OwnerDraw%2A>屬性參考主題。  
  
 <xref:System.Windows.Forms.ListView.DrawItem>每個可能會發生事件<xref:System.Windows.Forms.ListView>項目。 當<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>、<xref:System.Windows.Forms.ListView.DrawSubItem>和<xref:System.Windows.Forms.ListView.DrawColumnHeader>也會發生的事件。 在此情況下，您可以處理<xref:System.Windows.Forms.ListView.DrawItem>來繪製所有項目，例如背景通用的項目，以及處理事件<xref:System.Windows.Forms.ListView.DrawSubItem>事件，以繪製為個別的子項目，例如文字值的項目。 您也可以繪製所有項目<xref:System.Windows.Forms.ListView>雖然這可能是較不方便使用的兩個事件，其中之一的控制。 若要繪製詳細資料檢視中的資料行標頭，您必須處理<xref:System.Windows.Forms.ListView.DrawColumnHeader>事件。  
  
> [!NOTE]
>  因為在基礎 Win32 控制項中，錯誤<xref:System.Windows.Forms.ListView.DrawItem>發生事件時，建議您同時<xref:System.Windows.Forms.ListView.DrawSubItem>事件一次每個資料列詳細資料檢視，當滑鼠指標移到資料列時，造成任何項目中繪製<xref:System.Windows.Forms.ListView.DrawSubItem>是事件處理常式移轉中繪製自訂背景繪製<xref:System.Windows.Forms.ListView.DrawItem>事件處理常式。 請參閱中的範例<xref:System.Windows.Forms.ListView.OwnerDraw%2A>使每個資料列，就會發生額外的事件時的因應措施的參考主題。 一種解決方法是將所有自訂繪圖程式碼置於<xref:System.Windows.Forms.ListView.DrawSubItem>事件處理常式和繪製整個項目 （包括子項目） 的背景時，才<xref:System.Windows.Forms.DrawListViewSubItemEventArgs.ColumnIndex%2A?displayProperty=nameWithType>值為 0。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例提供的實作<xref:System.Windows.Forms.ListView.DrawItem>事件處理常式。 完整的範例，請參閱<xref:System.Windows.Forms.ListView.OwnerDraw%2A>參考主題。  
  
 [!code-csharp[ListViewOwnerDraw#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#3)]
 [!code-vb[ListViewOwnerDraw#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawSubItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawSubItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawSubItem As DrawListViewSubItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewSubItemEventHandler ^ DrawSubItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewSubItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當已繪製 <see cref="T:System.Windows.Forms.ListView" /> 的詳細資料檢視而且 <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> 屬性設定為 <see langword="true" /> 時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件可讓您自訂的外觀<xref:System.Windows.Forms.ListView>使用主控描繪控制項。 會引發此事件時，才<xref:System.Windows.Forms.ListView.OwnerDraw%2A>屬性設定為`true`和<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>。 如需有關主控描繪的詳細資訊，請參閱<xref:System.Windows.Forms.ListView.OwnerDraw%2A>屬性參考主題。  
  
> [!NOTE]
>  子項目資訊通常會出現在並排顯示檢視，以及詳細資料檢視，但在並排顯示檢視，它必須繪製的處理常式<xref:System.Windows.Forms.ListView.DrawItem>事件。  
  
 <xref:System.Windows.Forms.ListView.DrawSubItem>每個可能會發生事件<xref:System.Windows.Forms.ListView>子項目。 您可以處理<xref:System.Windows.Forms.ListView.DrawItem>事件的所有子項目，例如背景繪製通用的項目，並處理<xref:System.Windows.Forms.ListView.DrawSubItem>事件，以繪製為個別的子項目，例如文字值的項目。 您也可以繪製所有項目<xref:System.Windows.Forms.ListView>雖然這可能是較不方便使用的兩個事件，其中之一的控制。 若要繪製詳細資料檢視中的資料行標頭，您必須處理<xref:System.Windows.Forms.ListView.DrawColumnHeader>事件。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListView.DrawSubItem>事件不會發生任何子項目，且未<xref:System.Windows.Forms.ColumnHeader>物件已加入至<xref:System.Windows.Forms.ListView.Columns%2A>集合。 也請注意，第一個子項目，每個<xref:System.Windows.Forms.ListViewItem>物件表示父項目本身，而且會顯示在第一個資料行。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例提供的實作<xref:System.Windows.Forms.ListView.DrawSubItem>事件處理常式。 完整的範例，請參閱<xref:System.Windows.Forms.ListView.OwnerDraw%2A>參考主題。  
  
 [!code-csharp[ListViewOwnerDraw#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#4)]
 [!code-vb[ListViewOwnerDraw#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EndUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>繪製被 <see cref="M:System.Windows.Forms.ListView.BeginUpdate" /> 方法暫止之後，恢復執行清單檢視控制項的繪製。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新增多個項目，最好<xref:System.Windows.Forms.ListView>是使用<xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A>方法<xref:System.Windows.Forms.ListView.ListViewItemCollection>(透過存取<xref:System.Windows.Forms.ListView.Items%2A>屬性<xref:System.Windows.Forms.ListView>)。 這可讓您將項目陣列加入至單一作業中的清單。 不過，如果您想要加入的項目一於使用<xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A>方法<xref:System.Windows.Forms.ListView.ListViewItemCollection>類別，您可以使用<xref:System.Windows.Forms.ListView.BeginUpdate%2A>方法，以防止重繪控制項<xref:System.Windows.Forms.ListView>每次在加入項目。 一旦您已完成的工作項目加入控制項，呼叫<xref:System.Windows.Forms.ListView.EndUpdate%2A>方法，以啟用<xref:System.Windows.Forms.ListView>來重新繪製。 加入項目可以防止這種 flickered 繪圖的<xref:System.Windows.Forms.ListView>當正在大量項目加入至控制項。  
  
 如果<xref:System.Windows.Forms.ListView.BeginUpdate%2A>呼叫一次以上，<xref:System.Windows.Forms.ListView.EndUpdate%2A>必須呼叫的對等的次數。 最後一個呼叫<xref:System.Windows.Forms.ListView.EndUpdate%2A><xref:System.Windows.Forms.ListView>將不會重新繪製。 此外，多個呼叫<xref:System.Windows.Forms.ListView.BeginUpdate%2A>沒有作用。  
  
   
  
## Examples  
 下列程式碼範例示範如何初始化<xref:System.Windows.Forms.ListView>控制項包含核取方塊。 它也示範如何使用<xref:System.Windows.Forms.ListView.BeginUpdate%2A>和<xref:System.Windows.Forms.ListView.EndUpdate%2A>方法。 若要執行此範例中，將下列程式碼貼到表單，其中包含<xref:System.Windows.Forms.ListView>名為`ListView1`。 呼叫`InititalizeListView`從表單的建構函式的方法或`Load`方法。  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.BeginUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EnsureVisible">
      <MemberSignature Language="C#" Value="public void EnsureVisible (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureVisible(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnsureVisible (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnsureVisible(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要捲動進入檢視之項目的以零為起始的索引。</param>
        <summary>確保特定項目在控制項中可見，必要時捲動控制項的內容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個方法，以確保特定項目中可以看見<xref:System.Windows.Forms.ListView>控制項。 中的項目上執行驗證時<xref:System.Windows.Forms.ListView>，您可以呼叫<xref:System.Windows.Forms.ListView.EnsureVisible%2A>方法，以確保驗證失敗的項目會顯示在<xref:System.Windows.Forms.ListView>控制項即可允許使用者執行的項目上的變更。 如果您想要確保的項目會顯示位於可檢視區域的上方<xref:System.Windows.Forms.ListView>控制，請呼叫<xref:System.Windows.Forms.ListView.EnsureVisible%2A>方法會捲動控制項的內容，直到控制項可檢視區域中的第一個項目。 如果項目可檢視區域的以下<xref:System.Windows.Forms.ListView>控制，請呼叫<xref:System.Windows.Forms.ListView.EnsureVisible%2A>方法會捲動內容的<xref:System.Windows.Forms.ListView>控制直到項目控制項可檢視區域中的最後一個項目。  
  
 若要判斷項目是否位於頂端的顯示區域的<xref:System.Windows.Forms.ListView>控制，請使用<xref:System.Windows.Forms.ListView.TopItem%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.TopItem" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindItemWithText">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>找尋第一個以指定之文字值開始的 <see cref="T:System.Windows.Forms.ListViewItem" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要搜尋的文字。</param>
        <summary>找尋第一個以指定之文字值開始的 <see cref="T:System.Windows.Forms.ListViewItem" />。</summary>
        <returns>第一個以指定之文字值開始的 <see cref="T:System.Windows.Forms.ListViewItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 搜尋不區分大小寫。  
  
 `text`參數可以指定想要的相符文字的子字串。 此外，這個方法會傳回以指定的文字為開頭的第一個項目。 例如，如果<xref:System.Windows.Forms.ListView>包含兩個清單項目-設定為"角括號 」 與第二個項目文字的第一個項目文字設定為"bracket"— 呼叫<xref:System.Windows.Forms.ListView.FindItemWithText%2A>傳遞`brack`作為參數傳回的文字是"bracket"的項目。  
  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A>方法會傳回`null`如果清單是空的或沒有相符的項目。  
  
   
  
## Examples  
 下列程式碼範例示範<xref:System.Windows.Forms.ListView.FindItemWithText%2A>方法。 若要執行此範例中，將下列程式碼貼到 Windows Form 並呼叫`InitializeFindListView`從表單的建構函式的方法或<xref:System.Windows.Forms.Form.Load>事件處理常式。 按一下按鈕即可查看方法呼叫的結果。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String, includeSubItemsInSearch As Boolean, startIndex As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">要搜尋的文字。</param>
        <param name="includeSubItemsInSearch">
          <see langword="true" /> 表示要將子項目包含於搜尋之中，否則為 <see langword="false" />。</param>
        <param name="startIndex">要開始進行搜尋的項目索引。</param>
        <summary>如果有指示，則找尋第一個以指定之文字值開始的 <see cref="T:System.Windows.Forms.ListViewItem" /> 或 <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />。 搜尋會從指定的索引開始。</summary>
        <returns>第一個以指定之文字值開始的 <see cref="T:System.Windows.Forms.ListViewItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 搜尋不區分大小寫。  
  
 `text`參數可以指定想要的相符文字的子字串。 此外，這個方法會傳回以指定的文字為開頭的第一個項目。 例如，如果<xref:System.Windows.Forms.ListView>包含兩個清單項目-設定為"角括號 」 與第二個項目文字的第一個項目文字設定為"bracket"— 呼叫<xref:System.Windows.Forms.ListView.FindItemWithText%2A>傳遞"brack 」 參數會傳回項目文字是"bracket"。  
  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A>方法會傳回`null`如果清單是空的或沒有相符的項目。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> 小於 0 或大於 <see cref="T:System.Windows.Forms.ListView" /> 中的項目數目。</exception>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex, bool isPrefixSearch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String, includeSubItemsInSearch As Boolean, startIndex As Integer, isPrefixSearch As Boolean) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="isPrefixSearch" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">要搜尋的文字。</param>
        <param name="includeSubItemsInSearch">
          <see langword="true" /> 表示要將子項目包含於搜尋之中，否則為 <see langword="false" />。</param>
        <param name="startIndex">要開始進行搜尋的項目索引。</param>
        <param name="isPrefixSearch">
          <see langword="true" /> 表示允許部分符合的項目，否則為 <see langword="false" />。</param>
        <summary>如果有指示，則找尋第一個以指定之文字值開始的 <see cref="T:System.Windows.Forms.ListViewItem" /> 或 <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />。 搜尋會從指定的索引開始。</summary>
        <returns>第一個以指定之文字值開始的 <see cref="T:System.Windows.Forms.ListViewItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A>方法會傳回`null`如果清單是空的或沒有相符的項目。  
  
 搜尋不區分大小寫。  
  
 `text`參數可以指定想要的相符文字的子字串。 這個方法會傳回與指定的文字，開始的第一個項目，除非`false`傳入`isPrefixSearch`。 例如，如果<xref:System.Windows.Forms.ListView>包含兩個清單項目-設定為"角括號 」 與第二個項目文字的第一個項目文字設定為"bracket"— 呼叫<xref:System.Windows.Forms.ListView.FindItemWithText%2A>傳遞"brack"作為搜尋文字傳回項目文字是"bracket"。 如果`isPrefixSearch`設`false`，此呼叫會傳回`null`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> 小於 0 或大於 <see cref="T:System.Windows.Forms.ListView" /> 中的項目數目。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindNearestItem">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從指定的點尋找下一個項目，朝指定的方向搜尋。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint dir, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint dir, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindNearestItem(System::Windows::Forms::SearchDirectionHint dir, System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="dir">其中一個 <see cref="T:System.Windows.Forms.SearchDirectionHint" /> 值。</param>
        <param name="point">要開始搜尋的點。</param>
        <summary>從指定的點尋找下一個項目，朝指定的方向搜尋。</summary>
        <returns>最接近指定點的 <see cref="T:System.Windows.Forms.ListViewItem" />，朝指定的方向搜尋。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FindNearestItem%2A>方法會傳回`null`如果不找到任何項目以指定的方向。 找出最接近的項目應用程式執行所在的作業系統而有所不同，並會影響結果的<xref:System.Windows.Forms.ListView.FindNearestItem%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.View" /> 設定為 <see cref="F:System.Windows.Forms.View.SmallIcon" /> 或 <see cref="F:System.Windows.Forms.View.LargeIcon" /> 以外的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint searchDirection, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint searchDirection, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindNearestItem (searchDirection As SearchDirectionHint, x As Integer, y As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindNearestItem(System::Windows::Forms::SearchDirectionHint searchDirection, int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchDirection" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="searchDirection">其中一個 <see cref="T:System.Windows.Forms.SearchDirectionHint" /> 值。</param>
        <param name="x">開始搜尋之起點的 x 座標。</param>
        <param name="y">開始搜尋之起點的 y 座標。</param>
        <summary>從指定的 x 和 y 座標開始尋找下一個項目，朝指定的方向搜尋。</summary>
        <returns>最接近指定座標的 <see cref="T:System.Windows.Forms.ListViewItem" /> (朝指定的方向搜尋)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FindNearestItem%2A>方法會傳回`null`如果不找到任何項目以指定的方向。 找出最接近的項目應用程式執行所在的作業系統而有所不同，並會影響結果的<xref:System.Windows.Forms.ListView.FindNearestItem%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.View" /> 設定為 <see cref="F:System.Windows.Forms.View.SmallIcon" /> 或 <see cref="F:System.Windows.Forms.View.LargeIcon" /> 以外的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="FocusedItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FocusedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem FocusedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FocusedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusedItem As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewItem ^ FocusedItem { System::Windows::Forms::ListViewItem ^ get(); void set(System::Windows::Forms::ListViewItem ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前焦點所在控制項中的項目。</summary>
        <value>代表具有焦點之項目的 <see cref="T:System.Windows.Forms.ListViewItem" />，或是，如果在 <see cref="T:System.Windows.Forms.ListView" /> 中沒有任何項目具有焦點，則為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FocusedItem%2A>屬性會傳回<xref:System.Windows.Forms.ListViewItem>表示目前顯示的焦點矩形的項目<xref:System.Windows.Forms.ListView>控制項。 因為<xref:System.Windows.Forms.ListView>控制項有沒有直接編輯區域以外的項目，它會顯示當<xref:System.Windows.Forms.ListView>控制項有焦點中的項目<xref:System.Windows.Forms.ListView>顯示焦點 reticle，其項目文字周圍。 通常，最後選取項目中的<xref:System.Windows.Forms.ListView>控制項是具有焦點的項目。 雖然項目可能是一個顯示焦點 reticle，但它實際上可能不是在選取的項目<xref:System.Windows.Forms.ListView>。 使用<xref:System.Windows.Forms.ListView.SelectedItems%2A>或<xref:System.Windows.Forms.ListView.SelectedIndices%2A>屬性，以取得選取的項目中<xref:System.Windows.Forms.ListView>控制項，<xref:System.Windows.Forms.ListView.FocusedItem%2A>一定未選取屬性。 您可以使用<xref:System.Windows.Forms.ListView.FocusedItem%2A>中按下的屬性來判斷哪一個項目上次<xref:System.Windows.Forms.ListView>控制項，不論選取狀態。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定前景色彩。</summary>
        <value>
          <see cref="T:System.Drawing.Color" />，為前景色彩。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullRowSelect">
      <MemberSignature Language="C#" Value="public bool FullRowSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullRowSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FullRowSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property FullRowSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FullRowSelect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出按一下項目是否會選取它的所有子項目。</summary>
        <value>
          如果按一下項目便選取項目和它的所有子項目，為 <see langword="true" />；如果按一下項目只選取項目本身，則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FullRowSelect%2A>屬性沒有任何作用，除非<xref:System.Windows.Forms.ListView.View%2A>屬性<xref:System.Windows.Forms.ListView>控制設為  <xref:System.Windows.Forms.View.Details>。 <xref:System.Windows.Forms.ListView.FullRowSelect%2A>屬性通常是使用當<xref:System.Windows.Forms.ListView>具有許多的子項目和顯示項目是重要可以看到選取的項目，因為水平捲軸控制項的內容看不到 項目文字時。  
  
> [!NOTE]
>  當<xref:System.Windows.Forms.ListView.FullRowSelect%2A>設為`true`的工具提示<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>不會顯示; 的父代工具提示<xref:System.Windows.Forms.ListViewItem>隨即出現。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.ListView>控制項具有三個<xref:System.Windows.Forms.ListViewItem>所指定的物件和三個<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>針對每個項目指定的物件。 此範例也會建立<xref:System.Windows.Forms.ColumnHeader>物件詳細資料檢視中顯示子項目。 兩個<xref:System.Windows.Forms.ImageList>物件也會建立在程式碼範例中提供的映像<xref:System.Windows.Forms.ListViewItem>物件。 這些<xref:System.Windows.Forms.ImageList>物件加入至<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。 此範例會使用下列屬性建立<xref:System.Windows.Forms.ListView>控制項。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 這個範例需要您已加入的程式碼<xref:System.Windows.Forms.Form>並呼叫從建構函式或在表單上的另一個方法範例中所建立的方法。 這個範例也會需要映像命名為`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位於 c 磁碟機的根目錄  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="F:System.Windows.Forms.View.Details" />
      </Docs>
    </Member>
    <Member MemberName="GetItemAt">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem GetItemAt (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem GetItemAt(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemAt (x As Integer, y As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ GetItemAt(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">搜尋項目用之位置的 X 座標 (以工作區座標表示)。</param>
        <param name="y">搜尋項目用之位置的 Y 座標 (以工作區座標表示)。</param>
        <summary>擷取位於指定位置的項目。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.ListViewItem" />，表示位於指定位置的項目。 如果指定位置並沒有項目，此方法會傳回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.GetItemAt%2A>方法可讓您判斷哪一個項目內的用戶端區域的特定位置位於<xref:System.Windows.Forms.ListView>控制項。 您可以使用這個方法，當使用者按一下或子項目上按一下滑鼠右鍵 (當<xref:System.Windows.Forms.ListView.View%2A>屬性設定為`View.Details`) 和您想要判斷哪一個項目擁有的已按下滑鼠座標基礎使用者已按下滑鼠時的子項目.  
  
> [!NOTE]
>  當<xref:System.Windows.Forms.ListView.FullRowSelect%2A>屬性值是`false`，這個方法會傳回項目時，才指定的位置的父項目 （這會顯示在第一個資料行，當控制項處於詳細資料模式） 的範圍內。 您必須設定<xref:System.Windows.Forms.ListView.FullRowSelect%2A>屬性`true`來擷取與這個方法指定的範圍內的子項目位置的項目。 您也可以使用<xref:System.Windows.Forms.ListView.HitTest%2A>方法來擷取有關的特定位置的項目詳細的資訊。  
  
 若要執行拖放重新調整位置內的項目<xref:System.Windows.Forms.ListView>，您可能想要使用<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=nameWithType>方法而非<xref:System.Windows.Forms.ListView.GetItemAt%2A>方法。 <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=nameWithType>方法會尋找最接近的項目，不論滑鼠指標所在位置。 <xref:System.Windows.Forms.ListView.GetItemAt%2A>方法，相反地，傳回`null`如果在指定的位置沒有任何項目。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListViewInsertionMark>類別支援只能在 Windows XP 和 Windows Server 2003 上您的應用程式進行呼叫時<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.PictureBox>和<xref:System.Windows.Forms.ListView>控制項。 <xref:System.Windows.Forms.PictureBox>會藉由設定初始化<xref:System.Windows.Forms.PictureBox.BorderStyle%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.PictureBox.SizeMode%2A?displayProperty=nameWithType>屬性使用<xref:System.Windows.Forms.BorderStyle>和<xref:System.Windows.Forms.PictureBoxSizeMode>列舉型別，分別。 <xref:System.Windows.Forms.ListView>填入的 Samples 目錄中的圖片。 <xref:System.Windows.Forms.ListView.GetItemAt%2A>處理時，方法在用<xref:System.Windows.Forms.ListView>控制項的<xref:System.Windows.Forms.Control.MouseDown>事件，以判斷是否已選取項目。 如果選取項目，則事件處理常式就會顯示選取的檔案設定<xref:System.Windows.Forms.PictureBox.Image%2A?displayProperty=nameWithType>屬性。 這個範例需要 JPG 檔案位於 C:\documents and Settings\All Users\Documents\My 圖片 \ 範例圖片目錄存在。 若要執行此範例中，將程式碼貼到表單，並呼叫`InitializePictureBox`和`PopulateListView`表單的建構函式中的方法或`Load`方法。 請確定所有事件都都具有其事件處理常式相關聯。  
  
 [!code-cpp[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
        <altmember cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetItemRect">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>擷取控制項中項目的週框 (Bounding Rectangle)。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRect (index As Integer) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRect(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> 內的項目之以零起始的索引，您將要傳回該項目的周框。</param>
        <summary>擷取清單檢視控制項內特定項目的週框。</summary>
        <returns>
          <see cref="T:System.Drawing.Rectangle" />，表示特定 <see cref="T:System.Windows.Forms.ListViewItem" /> 的周框。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個版本的傳回，這個周框<xref:System.Windows.Forms.ListView.GetItemRect%2A>方法代表整個項目，包括圖示、 項目文字和子項目的文字。 若要指定特定部分的項目之周框，使用其他版本<xref:System.Windows.Forms.ListView.GetItemRect%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index, System.Windows.Forms.ItemBoundsPortion portion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index, valuetype System.Windows.Forms.ItemBoundsPortion portion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32,System.Windows.Forms.ItemBoundsPortion)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRect (index As Integer, portion As ItemBoundsPortion) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRect(int index, System::Windows::Forms::ItemBoundsPortion portion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="portion" Type="System.Windows.Forms.ItemBoundsPortion" />
      </Parameters>
      <Docs>
        <param name="index">
          <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> 內的項目之以零起始的索引，您將要傳回該項目的周框。</param>
        <param name="portion">其中一個 <see cref="T:System.Windows.Forms.ItemBoundsPortion" /> 值，表示要擷取周框的一部分 <see cref="T:System.Windows.Forms.ListViewItem" />。</param>
        <summary>擷取清單檢視控制項中，特定項目之週框的特定部分。</summary>
        <returns>
          <see cref="T:System.Drawing.Rectangle" />，表示特定 <see cref="T:System.Windows.Forms.ListViewItem" /> 之特定部分的周框。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個版本的傳回，這個周框<xref:System.Windows.Forms.ListView.GetItemRect%2A>方法表示只有 > 一節中所指定的項目`portion`參數。 若要傳回的週框的整個項目，使用其他版本<xref:System.Windows.Forms.ListView.GetItemRect%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ItemBoundsPortion" />
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public bool GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GridLines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.GridLines" />
      <MemberSignature Language="VB.NET" Value="Public Property GridLines As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GridLines { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出包含控制項中項目和子項目的資料列和資料行之間是否會顯示格線。</summary>
        <value>
          如果項目和子項目周圍要繪製格線，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.GridLines%2A>屬性沒有任何作用，除非<xref:System.Windows.Forms.ListView.View%2A>屬性<xref:System.Windows.Forms.ListView>控制設為  <xref:System.Windows.Forms.View.Details>。 <xref:System.Windows.Forms.ListView.GridLines%2A>屬性可讓您顯示識別資料列和資料行中所顯示的行<xref:System.Windows.Forms.ListView>控制當顯示項目和其子項目。 顯示的格線不會提供能夠調整資料列和資料行大小做為應用程式，例如 Microsoft Excel 一樣。 只有資料行，可以調整大小，如果資料行標頭會顯示，將滑鼠指標移到右側的調整大小的資料行，然後再按一下並拖曳，直到資料行是您想要的大小。 格線功能用來提供控制項的使用者可見的項目和子項目周圍的界限。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.ListView>控制項具有三個<xref:System.Windows.Forms.ListViewItem>所指定的物件和三個<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>針對每個項目指定的物件。 此範例也會建立<xref:System.Windows.Forms.ColumnHeader>物件詳細資料檢視中顯示子項目。 兩個<xref:System.Windows.Forms.ImageList>物件也會建立在程式碼範例中提供的映像<xref:System.Windows.Forms.ListViewItem>物件。 這些<xref:System.Windows.Forms.ImageList>物件加入至<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。 此範例會使用下列屬性建立<xref:System.Windows.Forms.ListView>控制項。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 這個範例需要您已加入的程式碼<xref:System.Windows.Forms.Form>並呼叫從建構函式或在表單上的另一個方法範例中所建立的方法。 這個範例也會需要映像命名為`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位於 c 磁碟機的根目錄  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewGroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewGroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Groups" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Groups As ListViewGroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewGroupCollection ^ Groups { System::Windows::Forms::ListViewGroupCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewGroupCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewGroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得指派給控制項的 <see cref="T:System.Windows.Forms.ListViewGroup" /> 物件集合。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListViewGroupCollection" />，其中包含 <see cref="T:System.Windows.Forms.ListView" /> 控制項中的所有群組。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView>群組功能可讓您建立的邏輯相關的視覺化群組<xref:System.Windows.Forms.ListView>項目。 每個群組包含文字標頭以及其後的水平線和指派給該群組的項目。 您可以將 left、 right 或控制項的中央標頭文字的對齊。 指派給任何群組<xref:System.Windows.Forms.ListView>控制項時出現<xref:System.Windows.Forms.ListView.View%2A>以外屬性設定為值<xref:System.Windows.Forms.View.List?displayProperty=nameWithType>。  
  
 <xref:System.Windows.Forms.ListView> 群組可協助使用者尋找分隔成有用的分類的項目尋找的項目。 您可以建立您需要的任何分類。 典型的其中一個方法是群組的排序清單的方式為基礎的項目。 比方說，您可以群組項目項目名稱的初始字母時，依字母順序或子項目，例如型別或詳細資料檢視中的資料行標頭即可排序清單時的日期排序清單。 Windows 檔案總管 中，會使用這種類型的群組。  
  
 若要使用群組功能，新增一或多個<xref:System.Windows.Forms.ListViewGroup>物件加入至<xref:System.Windows.Forms.ListView.Groups%2A>集合<xref:System.Windows.Forms.ListView>控制項。 在中設定的群組標頭文字和標頭對齊<xref:System.Windows.Forms.ListViewGroup.%23ctor%2A>建構函式，或將它們設定使用<xref:System.Windows.Forms.ListViewGroup.Header%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.ListViewGroup.HeaderAlignment%2A?displayProperty=nameWithType>屬性。  
  
 若要暫時停用的群組功能，請設定<xref:System.Windows.Forms.ListView.ShowGroups%2A>屬性`false`。  
  
 您可以藉由指定中的群組項目將指派給群組<xref:System.Windows.Forms.ListViewItem.%23ctor%2A>建構函式，藉由設定<xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=nameWithType>屬性，或直接將加入的項目<xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=nameWithType>群組的集合。 應該將所有項目指派給群組，才能顯示。 不會指派給群組的任何項目會出現在預設群組中，有標頭標籤"DefaultGroup{0}"。 預設群組未包含在<xref:System.Windows.Forms.ListView.Groups%2A>集合，且無法變更。 它主要是用於偵錯，以確保所有項目有已正確新增至群組。  
  
 項目只能有一個群組中一次。 您可以變更設定項目所屬的群組<xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=nameWithType>屬性在執行階段或將它加入至<xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=nameWithType>另一個群組，會自動移除先前群組的集合。  
  
 使用群組時，插入標記功能已停用。 這是因為群組功能的訂單項目群組的成員資格，而插入標記功能會使用與拖放重新定位在<xref:System.Windows.Forms.ListView>不排序其項目控制項。  
  
 <xref:System.Windows.Forms.ListView> 群組是僅可在 Windows XP 和 Windows Server 2003，當您的應用程式呼叫<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法。 在舊版作業系統，與群組相關的任何程式碼都無效，不會出現群組。 如此一來，取決於群組功能的任何程式碼可能無法正確運作。  
  
 您可能會想要包含程式碼會判斷群組功能是否可用，並提供無法使用時的替代功能。 例如，您可以提供替代的排序時不支援依群組排序的作業系統上執行。  
  
 群組功能是由相同的文件庫提供作業系統主題功能提供。 若要檢查此程式庫的可用性，請呼叫<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType>方法多載，並傳入<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType>值。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView>群組來組織項目詳細資料檢視中的子項目值的功能。 這種形式是群組的類似於 Windows 檔案總管 中使用的群組。 在範例中，會動態建立的群組。 每一個子項目資料行中，針對每個唯一的子項目值建立一個群組。 父項目資料行，建立一個群組的每個唯一的首字母。 按一下資料行標頭到建立該資料行的群組排序項目。 再次按一下相同的資料行標頭復原群組的順序。  
  
 [!code-cpp[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CPP/listviewgroupsexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CS/listviewgroupsexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/VB/listviewgroupsexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.ShowGroups" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ColumnHeaderStyle HeaderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ColumnHeaderStyle HeaderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HeaderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property HeaderStyle As ColumnHeaderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ColumnHeaderStyle HeaderStyle { System::Windows::Forms::ColumnHeaderStyle get(); void set(System::Windows::Forms::ColumnHeaderStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnHeaderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料行標頭的樣式。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.ColumnHeaderStyle" /> 值。 預設值為 <see cref="F:System.Windows.Forms.ColumnHeaderStyle.Clickable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.HeaderStyle%2A>屬性可讓您指定的資料行標頭，以顯示當類型<xref:System.Windows.Forms.ListView.View%2A>屬性<xref:System.Windows.Forms.ListView>控制設為 <xref:System.Windows.Forms.View.Details>和<xref:System.Windows.Forms.ListView>控制項有<xref:System.Windows.Forms.ColumnHeader>中指定的物件<xref:System.Windows.Forms.ListView.ColumnHeaderCollection>. <xref:System.Windows.Forms.ColumnHeader> 物件定義的資料行中所顯示的<xref:System.Windows.Forms.ListView>控制項。 每個資料行用來顯示每個項目中的子項目資訊<xref:System.Windows.Forms.ListView>。  
  
 <xref:System.Windows.Forms.ListView.HeaderStyle%2A>屬性可讓您指定是否為可見的資料行標頭或才看得見，如果是否正常運作，以可點按的按鈕。 如果<xref:System.Windows.Forms.ListView.HeaderStyle%2A>屬性設定為<xref:System.Windows.Forms.ColumnHeaderStyle.None?displayProperty=nameWithType>，未顯示資料行標頭，雖然項目和子項目<xref:System.Windows.Forms.ListView>控制項仍然會排列在資料行。 如果<xref:System.Windows.Forms.ListView.HeaderStyle%2A>屬性設定為<xref:System.Windows.Forms.ColumnHeaderStyle.Clickable?displayProperty=nameWithType>，使用者可以按一下來執行某個動作，例如排序的項目中的按鈕做為資料行標頭<xref:System.Windows.Forms.ListView>控制按資料行中使用的項目，做為索引鍵。 您可以在處理常式中實作這種行為<xref:System.Windows.Forms.ListView.ColumnClick>事件。 如果<xref:System.Windows.Forms.ListView.HeaderStyle%2A>屬性設定為<xref:System.Windows.Forms.ColumnHeaderStyle.Nonclickable?displayProperty=nameWithType>，資料行標頭會出現，但是無法按下。  
  
   
  
## Examples  
 下列程式碼範例示範<xref:System.Windows.Forms.ListView>，可讓多個選取的項目。 此範例示範設定<xref:System.Windows.Forms.ListView.HideSelection%2A>和<xref:System.Windows.Forms.ListView.HeaderStyle%2A>屬性。 它也會示範<xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=nameWithType>，<xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=nameWithType>屬性。 若要執行此範例中，將下列程式碼貼到表單，其中包含<xref:System.Windows.Forms.ListView>名為物件`ListView1`和<xref:System.Windows.Forms.TextBox>名為`TextBox1`。 呼叫`InitializeListView`從表單的建構函式的方法或<xref:System.Windows.Forms.Form.Load>事件處理常式。  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的值不是其中一個 <see cref="T:System.Windows.Forms.ColumnHeaderStyle" /> 值。</exception>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnHeaderStyle" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="HideSelection">
      <MemberSignature Language="C#" Value="public bool HideSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HideSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HideSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HideSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HideSelection { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出當控制項遺失焦點時，控制項中已選取的項目是否還以反白顯示。</summary>
        <value>
          如果控制項遺失焦點時選取的項目不反白顯示，為 <see langword="true" />；如果控制項遺失焦點時選取的項目還是反白顯示，則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當這個屬性設定為`false`，選取的項目中的<xref:System.Windows.Forms.ListView>控制項維持在不同於目前的選取範圍色彩作業系統所指定的色彩反白顯示時<xref:System.Windows.Forms.ListView>控制項遺失駐點。 您可以使用這個屬性，讓使用者按一下表單上不同的控制項，或移到不同的視窗時，顯示使用者已選取項目。  
  
> [!NOTE]
>  如果您不在意您應用程式的存取範圍，則建議您設定<xref:System.Windows.Forms.ListView.HideSelection%2A>屬性`false`。  
  
   
  
## Examples  
 下列程式碼範例示範<xref:System.Windows.Forms.ListView>，可讓多個選取的項目。 此範例示範設定<xref:System.Windows.Forms.ListView.HideSelection%2A>和<xref:System.Windows.Forms.ListView.HeaderStyle%2A>屬性。 它也會示範<xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=nameWithType>， <xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=nameWithType>，和<xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=nameWithType>屬性。 若要執行此範例中，將下列程式碼貼到表單，其中包含<xref:System.Windows.Forms.ListView>名為物件`ListView1`和<xref:System.Windows.Forms.TextBox>名為`TextBox1`。 呼叫`InitializeListView`從表單的建構函式的方法或<xref:System.Windows.Forms.Form.Load>事件處理常式。  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTest">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>提供指定之 x 和 y 座標的項目資訊。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewHitTestInfo ^ HitTest(System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">要擷取項目資訊的 <see cref="T:System.Drawing.Point" />。 座標相對於控制項的左上角。</param>
        <summary>提供指定之點的項目資訊。</summary>
        <returns>指定之點的項目資訊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個方法來決定一個點是否在項目或子項目和項目中的點所在位置，例如標籤或影像區域上。 如果位於外部的控制項，傳回座標<xref:System.Windows.Forms.ListViewHitTestInfo>物件具有<xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A>屬性是"None"; 而<xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A>和<xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A>屬性會設為`null`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">包含小於 0 之座標的點。</exception>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function HitTest (x As Integer, y As Integer) As ListViewHitTestInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewHitTestInfo ^ HitTest(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">要擷取項目資訊的 x 座標。 座標相對於控制項的左上角。</param>
        <param name="y">要擷取項目資訊的 y 座標。 座標相對於控制項的左上角。</param>
        <summary>提供指定之 x 和 y 座標的項目資訊。</summary>
        <returns>指定之 x 和 y 座標的項目資訊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要判斷點是否在項目或子項目，以及項目中點的位置，例如標籤或映像區域中使用這個方法。 如果位於外部的控制項，傳回座標<xref:System.Windows.Forms.ListViewHitTestInfo>物件具有<xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A>屬性是"None"; 而<xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A>和<xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A>屬性會設為`null`。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView.HitTest%2A>方法，以判斷中的滑鼠事件的位置<xref:System.Windows.Forms.ListView>。 若要執行此範例中，將它貼到包含在 Windows Form<xref:System.Windows.Forms.ListView>名為`listView1`填入項目。 關聯<xref:System.Windows.Forms.Control.MouseDown>事件`listView1`與`listView1_MouseDown`在此範例中的方法。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">小於 0 的 x 或 y 座標。</exception>
      </Docs>
    </Member>
    <Member MemberName="HotTracking">
      <MemberSignature Language="C#" Value="public bool HotTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HotTracking" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HotTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property HotTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HotTracking { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指示當滑鼠指標移過項目或子項目上方時，其文字是否具有超連結外觀。</summary>
        <value>
          如果當滑鼠指標移過項目上方時，項目文字具有超連結外觀，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 啟用熱追蹤 willcause<xref:System.Windows.Forms.ListView.Activation%2A>屬性設定為<xref:System.Windows.Forms.ItemActivation.OneClick>和<xref:System.Windows.Forms.ListView.HoverSelection%2A>屬性設定為`true`。 此外，執行時間標籤不允許編輯時已啟用熱追蹤。  
  
   
  
## Examples  
 下列程式碼範例示範<xref:System.Windows.Forms.ListView>啟用熱追蹤。 若要執行此範例中，將下列程式碼貼到 Windows Form 並呼叫`InitializeHotTrackingListView`從表單的建構函式的方法或<xref:System.Windows.Forms.Form.Load>事件處理常式。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HoverSelection">
      <MemberSignature Language="C#" Value="public bool HoverSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HoverSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HoverSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HoverSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HoverSelection { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出當滑鼠指標在項目上方停留數秒時，是否要自動選取項目。</summary>
        <value>
          如果當滑鼠指標在項目上方停留時要自動選取項目，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當這個屬性設定為`true`，使用者可以指向中的項目<xref:System.Windows.Forms.ListView>控制項選取的項目。 可以選取多個項目 (當<xref:System.Windows.Forms.ListView.MultiSelect%2A>屬性設定為 true) 指向每個項目時按住 CTRL 鍵。 您可以使用這項功能選取項目中的應用程式的使用者提供更容易方法<xref:System.Windows.Forms.ListView>控制項。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertionMark">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewInsertionMark InsertionMark { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewInsertionMark InsertionMark" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.InsertionMark" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertionMark As ListViewInsertionMark" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewInsertionMark ^ InsertionMark { System::Windows::Forms::ListViewInsertionMark ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewInsertionMark</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得在 <see cref="T:System.Windows.Forms.ListView" /> 控制項之內拖曳項目時，用來指出應該置放位置的物件。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListViewInsertionMark" /> 物件，表示插入標記。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView>插入標記功能可讓您以視覺化方式表示在拖放作業的預期的置放位置的項目拖曳至新位置時。 此功能的運作時，才<xref:System.Windows.Forms.ListView.AutoArrange%2A>屬性設定為`true`及何時<xref:System.Windows.Forms.ListView>控制項不會自動排序項目。 若要避免自動排序，<xref:System.Windows.Forms.ListView.Sorting%2A>屬性必須設定為<xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType>和<xref:System.Windows.Forms.ListView.View%2A>屬性必須設定為<xref:System.Windows.Forms.View.LargeIcon?displayProperty=nameWithType>， <xref:System.Windows.Forms.View.SmallIcon?displayProperty=nameWithType>，或<xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>。 此外，插入標記功能可能無法看到與<xref:System.Windows.Forms.ListView>群組功能，因為群組功能的訂單將項目依群組成員資格。  
  
 <xref:System.Windows.Forms.ListViewInsertionMark>類別通常用於處理常式<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>或<xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType>事件項目拖曳時更新插入標記的位置。 它也使用的處理常式<xref:System.Windows.Forms.Control.DragDrop?displayProperty=nameWithType>或<xref:System.Windows.Forms.Control.MouseUp?displayProperty=nameWithType>事件將拖曳的項目插入於正確的位置。 如需詳細資訊，請參閱<xref:System.Windows.Forms.ListViewInsertionMark>和[How to： 在 Windows Form ListView 控制項中顯示插入標記](~/docs/framework/winforms/controls/how-to-display-an-insertion-mark-in-a-windows-forms-listview-control.md)。  
  
> [!NOTE]
>  當您的應用程式呼叫時，會僅可在 Windows XP 和 Windows Server 2003 插入標記功能<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法。 在舊版作業系統上，與插入標記相關的任何程式碼都沒有任何作用，而且不會出現插入標記。 如此一來，插入標記功能所依賴的任何程式碼可能無法正確運作。 您可能會想要加入程式碼，判斷是否可以使用，這項功能，並提供無法使用時的替代功能。 例如，您可以略過所有實作拖放項目重新放置時不支援插入標記的作業系統上執行的程式碼。  
>   
>  插入標記功能會提供相同的文件庫提供作業系統主題功能。 若要檢查此程式庫的可用性，請呼叫<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType>方法多載，並傳入<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType>值。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView>插入標記功能。 這個範例實作拖放項目重新排列 using 標準拖曳事件。 插入標記的位置中的處理常式更新<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>事件。 在這個處理常式，滑鼠指標位置會與最近的項目 的中間點，結果用來判斷是否到左邊或右邊的項目會出現插入標記。  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">其中一個 <see cref="T:System.Windows.Forms.Keys" /> 值。</param>
        <summary>判斷指定的按鍵是標準輸入按鍵或需要前置處理的特殊按鍵。</summary>
        <returns>
          如果指定的按鍵是標準輸入按鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemActivate">
      <MemberSignature Language="C#" Value="public event EventHandler ItemActivate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ItemActivate" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemActivate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemActivate As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ItemActivate;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於啟動項目時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ItemActivate>在使用者啟動中的一個或多個項目時，就會發生事件<xref:System.Windows.Forms.ListView>控制項。 使用者可以啟用以按一下或按兩下，根據的值的項目<xref:System.Windows.Forms.ListView.Activation%2A>屬性，或使用鍵盤。 從事件處理常式內<xref:System.Windows.Forms.ListView.ItemActivate>事件，您可以參考<xref:System.Windows.Forms.ListView.SelectedItems%2A>或<xref:System.Windows.Forms.ListView.SelectedIndices%2A>屬性來存取集合的項目中選取<xref:System.Windows.Forms.ListView>來判斷哪些項目會使其無法啟動。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.ListView.ItemActivate>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.ListView>名為`ListView1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.ListView.ItemActivate>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#473](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#473)]
 [!code-vb[System.Windows.Forms.EventExamples#473](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#473)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ItemCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckEventHandler ItemCheck;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckEventHandler ItemCheck" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemCheck" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemCheck As ItemCheckEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckEventHandler ^ ItemCheck;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於項目的勾選狀態變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.CheckBoxes%2A>屬性必須設定為順序中的每個項目旁顯示核取方塊，則為 true<xref:System.Windows.Forms.ListView>控制項。 <xref:System.Windows.Forms.ListView.ItemCheck>或項目的核取狀態變更時，就會發生事件<xref:System.Windows.Forms.ListView.CheckBoxes%2A>屬性設定為`true`。 您可以建立事件處理常式<xref:System.Windows.Forms.ListView.ItemCheck>事件以執行工作，例如變更狀態的項目 圖示或另一個應用程式特定的工作項目已簽入每次<xref:System.Windows.Forms.ListView>控制項。  
  
> [!NOTE]
>  如果視窗控制代碼尚未建立時<xref:System.Windows.Forms.ListView.ItemCheck>引發事件之後，請將延遲事件。 一旦建立視窗控制代碼 （顯示表單） 時，任何延遲<xref:System.Windows.Forms.ListView.ItemCheck>會引發事件。 如需詳細資訊，請參閱<xref:System.Windows.Forms.Control.HandleCreated>。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何檢查<xref:System.Windows.Forms.ListView>處理控制項<xref:System.Windows.Forms.ListView.ItemCheck>事件。 此方法會使用<xref:System.Windows.Forms.ItemCheckEventArgs.CurrentValue%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.ItemCheckEventArgs.Index%2A?displayProperty=nameWithType>屬性，以擷取和清點選取的功能表項目價格。 若要執行此範例中，將下列程式碼貼到表單，其中包含`ListView`名為`ListView1`和`TextBox`名為`Textbox1`。 呼叫`InititalizeListView`從表單的建構函式的方法或`Load`方法。 請確認<xref:System.Windows.Forms.ListView.ItemCheck>事件是在此範例中的事件處理常式相關聯。  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemChecked">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckedEventHandler ItemChecked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckedEventHandler ItemChecked" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemChecked" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemChecked As ItemCheckedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckedEventHandler ^ ItemChecked;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於項目的已勾選狀態變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個事件是類似於<xref:System.Windows.Forms.ListView.ItemCheck>事件，但已檢查的項目之後引發。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.ListView.ItemChecked>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 如需其他範例，請參閱<xref:System.Windows.Forms.ListView.ItemCheck>事件。 如果事件處理常式附加至程式碼那里運作效果都一樣<xref:System.Windows.Forms.ListView.ItemChecked>事件。  
  
 若要執行此程式碼範例，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.ListView>名為`ListView1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.ListView.ItemChecked>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#475](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#475)]
 [!code-vb[System.Windows.Forms.EventExamples#475](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#475)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemDragEventHandler ItemDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemDragEventHandler ItemDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemDrag As ItemDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemDragEventHandler ^ ItemDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者開始拖曳項目時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ItemDrag>當使用者開始拖曳項目時，就會發生事件。 通常的事件處理常式<xref:System.Windows.Forms.ListView.ItemDrag>事件執行的拖曳藉由呼叫工作<xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType>方法。 您可以使用這個事件來執行拖曳項目，執行和跳離您的應用程式所需的工作<xref:System.Windows.Forms.ListView>控制項。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.ListView.ItemDrag>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.ListView>名為`ListView1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.ListView.ItemDrag>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#476](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#476)]
 [!code-vb[System.Windows.Forms.EventExamples#476](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#476)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemMouseHover">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemMouseHover" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemMouseHover As ListViewItemMouseHoverEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewItemMouseHoverEventHandler ^ ItemMouseHover;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemMouseHoverEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於滑鼠停留在項目上時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.ListView.ItemMouseHover>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.ListView>名為`ListView1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.ListView.ItemMouseHover>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#477](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#477)]
 [!code-vb[System.Windows.Forms.EventExamples#477](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#477)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ListViewItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ListViewItemCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As ListView.ListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::ListViewItemCollection ^ Items { System::Windows::Forms::ListView::ListViewItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewItemCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得包含控制項中所有項目的集合。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />，包含 <see cref="T:System.Windows.Forms.ListView" /> 控制項中所有的項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.ListView.ListViewItemCollection>傳回這個屬性，您可以將項目加入、 移除項目，並取得項目計數。 如需有關可以在集合中的項目執行的工作的詳細資訊，請參閱<xref:System.Windows.Forms.ListView.ListViewItemCollection>類別參考主題。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.ListView>控制項具有三個<xref:System.Windows.Forms.ListViewItem>所指定的物件和三個<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>針對每個項目指定的物件。 此範例也會建立<xref:System.Windows.Forms.ColumnHeader>物件詳細資料檢視中顯示子項目。 兩個<xref:System.Windows.Forms.ImageList>物件也會建立在程式碼範例中提供的映像<xref:System.Windows.Forms.ListViewItem>物件。 這些<xref:System.Windows.Forms.ImageList>物件加入至<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。 此範例會使用下列屬性建立<xref:System.Windows.Forms.ListView>控制項。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 這個範例需要您已加入的程式碼<xref:System.Windows.Forms.Form>並呼叫從建構函式或在表單上的另一個方法範例中所建立的方法。 這個範例也會需要映像命名為`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位於 c 磁碟機的根目錄  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="ItemSelectionChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemSelectionChanged As ListViewItemSelectionChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewItemSelectionChangedEventHandler ^ ItemSelectionChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemSelectionChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於項目的選取狀態變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在虛擬模式中，<xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged>多個項目的選取狀態變更時，就會發生事件。  
  
 <xref:System.Windows.Forms.ListView.ItemSelectionChanged>發生的事件是否從選取取消選取或取消選取變更的項目狀態。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.ListView.ItemSelectionChanged>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.ListView>名為`ListView1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.ListView.ItemSelectionChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#478](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#478)]
 [!code-vb[System.Windows.Forms.EventExamples#478](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#478)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      </Docs>
    </Member>
    <Member MemberName="LabelEdit">
      <MemberSignature Language="C#" Value="public bool LabelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelEdit { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出使用者是否能編輯控制項中項目的標籤。</summary>
        <value>
          如果使用者在執行階段能編輯項目的標籤，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Windows.Forms.ListView.LabelEdit%2A>屬性設定為`true`，使用者可以按一下來選取它的項目文字來修改項目的文字，然後按一下 項目文字放入的標籤文字編輯模式。 然後，使用者就可以修改或取代項目的文字標籤。 您可以使用<xref:System.Windows.Forms.ListView.BeforeLabelEdit>和<xref:System.Windows.Forms.ListView.AfterLabelEdit>來執行工作，使用者編輯項目的文字前後的事件。 無法修改子項目的文字，如果這個屬性設定為`true`。 若要變更子項目的文字，您可以使用者顯示對話方塊中，當它們按兩下控制項中的子項目。  
  
> [!NOTE]
>  如果<xref:System.Windows.Forms.ListView.Activation%2A>屬性設定為<xref:System.Windows.Forms.ItemActivation.OneClick>或<xref:System.Windows.Forms.ItemActivation.TwoClick>，編輯標籤不允許的值為何<xref:System.Windows.Forms.ListView.LabelEdit%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.ListView>控制項具有三個<xref:System.Windows.Forms.ListViewItem>所指定的物件和三個<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>針對每個項目指定的物件。 此範例也會建立<xref:System.Windows.Forms.ColumnHeader>物件詳細資料檢視中顯示子項目。 兩個<xref:System.Windows.Forms.ImageList>物件也會建立在程式碼範例中提供的映像<xref:System.Windows.Forms.ListViewItem>物件。 這些<xref:System.Windows.Forms.ImageList>物件加入至<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。 此範例會使用下列屬性建立<xref:System.Windows.Forms.ListView>控制項。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 這個範例需要您已加入的程式碼<xref:System.Windows.Forms.Form>並呼叫從建構函式或在表單上的另一個方法範例中所建立的方法。 這個範例也會需要映像命名為`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位於 c 磁碟機的根目錄  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="LabelWrap">
      <MemberSignature Language="C#" Value="public bool LabelWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelWrap { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出項目在控制項中顯示為圖示時，項目標籤是否要換行。</summary>
        <value>
          如果項目顯示為圖示時項目標籤換行，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Windows.Forms.ListView.LabelWrap%2A>屬性設定為`true`，如有需要的項目文字包裝至下一行的文字。 如果文字長度超過兩行文字，文字會縮短。 如果使用者選取的項目，則會顯示所有項目文字。 如果<xref:System.Windows.Forms.ListView.LabelWrap%2A>屬性設定為`false`，所有的項目文字會顯示在同一行。 會顯示整個項目文字時<xref:System.Windows.Forms.ListView.LabelWrap%2A>設`false`。 這個屬性是時，才使用<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.LargeIcon>或<xref:System.Windows.Forms.View.SmallIcon>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="LargeImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList LargeImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList LargeImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LargeImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property LargeImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ LargeImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.ImageList" />，當項目在控制項中顯示為大圖示時使用。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" />，其中包含將 <see cref="P:System.Windows.Forms.ListView.View" /> 屬性設定為 <see cref="F:System.Windows.Forms.View.LargeIcon" /> 時所用的圖示。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.LargeImageList%2A>屬性可讓您指定<xref:System.Windows.Forms.ImageList>物件，其中包含顯示大圖示的項目時所要使用的圖示 (當<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.LargeIcon>)。 <xref:System.Windows.Forms.ListView>控制項可以接受的任何圖形格式<xref:System.Windows.Forms.ImageList>控制項支援時顯示圖示。 <xref:System.Windows.Forms.ListView>控制項不限於.ico 檔案。 一次<xref:System.Windows.Forms.ImageList>指派給<xref:System.Windows.Forms.ListView.LargeImageList%2A>屬性，您可以將<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A>每個屬性<xref:System.Windows.Forms.ListViewItem>中<xref:System.Windows.Forms.ListView>中適當的映像的索引位置的控制項<xref:System.Windows.Forms.ImageList>。 圖示的大小<xref:System.Windows.Forms.ListView.LargeImageList%2A>所指定<xref:System.Windows.Forms.ImageList.ImageSize%2A>。  
  
 因為可以指定只能有一個索引<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=nameWithType>屬性，<xref:System.Windows.Forms.ImageList>物件中指定<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性應該有相同的索引位置，如顯示的影像。 例如，如果<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A>屬性<xref:System.Windows.Forms.ListViewItem>設為 0 時，要用於小型和大型圖示影像應該會在相同的索引位置<xref:System.Windows.Forms.ImageList>中指定的物件<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。  
  
> [!NOTE]
>  當索引鍵指定映像時，您仍然需要放置在其各自的影像清單中，相同的索引位置的小型和大型影像的版本。 檢視之間切換時，一份清單中的映像的索引位置用來找出影像中的其他清單中，不論所指定的金鑰值。  
  
 若要設定<xref:System.Windows.Forms.ImageList>顯示小圖示的項目時所要使用 (所有檢視模式以外<xref:System.Windows.Forms.View.LargeIcon>)，使用<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。 如果您想要使用影像來顯示項目狀態，請使用<xref:System.Windows.Forms.ListView.StateImageList%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.ListView>控制項具有三個<xref:System.Windows.Forms.ListViewItem>所指定的物件和三個<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>針對每個項目指定的物件。 此範例也會建立<xref:System.Windows.Forms.ColumnHeader>物件詳細資料檢視中顯示子項目。 兩個<xref:System.Windows.Forms.ImageList>物件也會建立在程式碼範例中提供的映像<xref:System.Windows.Forms.ListViewItem>物件。 這些<xref:System.Windows.Forms.ImageList>物件加入至<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。 此範例會使用下列屬性建立<xref:System.Windows.Forms.ListView>控制項。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 這個範例需要您已加入的程式碼<xref:System.Windows.Forms.Form>並呼叫從建構函式或在表單上的另一個方法範例中所建立的方法。 這個範例也會需要映像命名為`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位於 c 磁碟機的根目錄  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="ListViewItemSorter">
      <MemberSignature Language="C#" Value="public System.Collections.IComparer ListViewItemSorter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IComparer ListViewItemSorter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      <MemberSignature Language="VB.NET" Value="Public Property ListViewItemSorter As IComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IComparer ^ ListViewItemSorter { System::Collections::IComparer ^ get(); void set(System::Collections::IComparer ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定控制項的排序比較子。</summary>
        <value>
          <see cref="T:System.Collections.IComparer" />，表示控制項的排序比較子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>屬性可讓您指定的物件，執行中的項目排序<xref:System.Windows.Forms.ListView>負責控制何時<xref:System.Windows.Forms.ListView.Sort%2A>方法呼叫，或當項目加入至清單。 請注意，項目不會自動排序標籤文字變更時。  
  
 指定的物件必須實作類別的執行個體<xref:System.Collections.IComparer>介面具有單一方法呼叫<xref:System.Collections.Comparer.Compare%2A?displayProperty=nameWithType>。  
  
 若要提供自訂排序，例如，在詳細資料檢視中按一下資料行標頭時，您可以使用這個屬性。 若要這樣做，請建立可實作<xref:System.Collections.IComparer>介面，並提供建構函式可接受排序所依據的資料行的索引。 然後，您可以實作的處理常式<xref:System.Windows.Forms.ListView.ColumnClick>建立使用按資料行的索引這個類別的執行個體的事件。 當您將<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>屬性為新的執行個體，<xref:System.Windows.Forms.ListView>使用指定的物件會自動排序控制項。 後續呼叫<xref:System.Windows.Forms.ListView.Sort%2A>方法使用相同的物件。  
  
> [!NOTE]
>  當您設定的值<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>屬性，<xref:System.Windows.Forms.ListView.Sort%2A>自動呼叫方法。  
  
   
  
## Examples  
 下列程式碼範例會建立包含表單的<xref:System.Windows.Forms.ListView>手動排序項目中的資料行時的控制項<xref:System.Windows.Forms.ListView>按一下控制項時。 此範例會定義一種類別稱為`ListViewItemComparer`實作<xref:System.Collections.IComparer?displayProperty=nameWithType>介面執行<xref:System.Windows.Forms.ListViewItem>比較。 此範例會建立的執行個體`ListViewItemComparer`並使用它來設定<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>屬性<xref:System.Windows.Forms.ListView>控制項。 <xref:System.Windows.Forms.ListView.Sort%2A>方法呼叫中<xref:System.Windows.Forms.ListView.ColumnClick>事件處理常式的使用中定義的方法`ListViewItemComparer`來執行的項目，根據按下的資料行排序。  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
      </Docs>
    </Member>
    <Member MemberName="MultiSelect">
      <MemberSignature Language="C#" Value="public bool MultiSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.MultiSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property MultiSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MultiSelect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否可選取多個項目。</summary>
        <value>
          如果可以同時選取控制項中的多個項目，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Windows.Forms.ListView.MultiSelect%2A>屬性設定為`true`中, 可選取多個項目<xref:System.Windows.Forms.ListView>控制項。 若要選取多個項目，使用者必須按住 CTRL 鍵同時按一下要選取的項目。 按一下要選取的第一個項目，然後按住 SHIFT 鍵，按一下要選取的最後一個項目時，可以選取連續的項目。 您可以選取多個項目中的使用多重選取功能<xref:System.Windows.Forms.ListView>控制和選取的項目上執行作業。 例如，使用者可以選取多個項目，然後以滑鼠右鍵按一下選取的項目，顯示快顯功能表會顯示一組可選取的項目執行的工作。  
  
 若要判斷哪些項目中所選<xref:System.Windows.Forms.ListView>控制，請使用<xref:System.Windows.Forms.ListView.SelectedItems%2A>屬性。 <xref:System.Windows.Forms.ListView.SelectedItems%2A>屬性可讓您存取<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>包含選取的項目清單。 如果您希望索引位置<xref:System.Windows.Forms.ListView.ListViewItemCollection>而不是項目，您可以使用<xref:System.Windows.Forms.ListView.SelectedIndices%2A>屬性來存取<xref:System.Windows.Forms.ListView.SelectedIndexCollection>。  
  
 如果您不想允許多重選取中的<xref:System.Windows.Forms.ListView>，但仍想要提供使用者的方式將所選，您可以藉由設定顯示核取方塊的多個項目<xref:System.Windows.Forms.ListView.CheckBoxes%2A>屬性`true`。  
  
   
  
## Examples  
 下列程式碼範例示範<xref:System.Windows.Forms.ListView>，可讓多個選取的項目。 此範例示範設定<xref:System.Windows.Forms.ListView.HideSelection%2A>和<xref:System.Windows.Forms.ListView.HeaderStyle%2A>屬性。 若要執行此範例中，將下列程式碼貼到表單，其中包含<xref:System.Windows.Forms.ListView>名為物件`ListView1`和<xref:System.Windows.Forms.TextBox>名為`TextBox1`。 呼叫`InitializeListView`從表單的建構函式的方法或`Load`方法。  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="OnAfterLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterLabelEdit (e As LabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterLabelEdit(System::Windows::Forms::LabelEditEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.LabelEditEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnAfterLabelEdit%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView.AfterLabelEdit>事件，以將新的編輯標籤限制為字母中的字元。 此範例會使用<xref:System.Text.ASCIIEncoding>類別來取得新的標籤的每個字元的 ASCII 字元碼。 如果字元落表示數字的 ASCII 碼，新的標籤無法套用至項目。 這個範例需要您已建立<xref:System.Windows.Forms.ListView>控制項在表單和它所加入的項目。 這個範例也會需要您已連接<xref:System.Windows.Forms.ListView.AfterLabelEdit>範例程式碼中定義的事件處理常式的事件。 若要使用<xref:System.Text.ASCIIEncoding>類別，您的檔案必須包含<xref:System.Text>命名空間。  
  
 [!code-cpp[ListView.AfterLabelEdit#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackgroundImageChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnBackgroundImageChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeLabelEdit (e As LabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeLabelEdit(System::Windows::Forms::LabelEditEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.LabelEditEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnBeforeLabelEdit%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnCacheVirtualItems">
      <MemberSignature Language="C#" Value="protected virtual void OnCacheVirtualItems (System.Windows.Forms.CacheVirtualItemsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCacheVirtualItems(class System.Windows.Forms.CacheVirtualItemsEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCacheVirtualItems (e As CacheVirtualItemsEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCacheVirtualItems(System::Windows::Forms::CacheVirtualItemsEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.CacheVirtualItemsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.CacheVirtualItemsEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.CacheVirtualItems" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnCacheVirtualItems%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnClick (System.Windows.Forms.ColumnClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnClick(class System.Windows.Forms.ColumnClickEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnClick (e As ColumnClickEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnClick(System::Windows::Forms::ColumnClickEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ColumnClickEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.ColumnClick" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnColumnClick%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例會建立包含表單的<xref:System.Windows.Forms.ListView>手動排序項目中的資料行時的控制項<xref:System.Windows.Forms.ListView>按一下控制項時。 此範例會定義一種類別稱為`ListViewItemComparer`實作<xref:System.Collections.IComparer?displayProperty=nameWithType>介面執行<xref:System.Windows.Forms.ListViewItem>比較。 此範例會建立的執行個體`ListViewItemComparer`並使用它來設定<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>屬性<xref:System.Windows.Forms.ListView>控制項。 <xref:System.Windows.Forms.ListView.Sort%2A>方法呼叫中<xref:System.Windows.Forms.ListView.ColumnClick>事件處理常式的使用中定義的方法`ListViewItemComparer`來執行的項目，根據按下的資料行排序。  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnClickEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnColumnReordered">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnReordered (System.Windows.Forms.ColumnReorderedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnReordered(class System.Windows.Forms.ColumnReorderedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnReordered (e As ColumnReorderedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnReordered(System::Windows::Forms::ColumnReorderedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnReorderedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.Windows.Forms.ColumnReorderedEventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.ColumnReordered" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnColumnReordered%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanged (System.Windows.Forms.ColumnWidthChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanged(class System.Windows.Forms.ColumnWidthChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanged (e As ColumnWidthChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanged(System::Windows::Forms::ColumnWidthChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ColumnWidthChangedEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnColumnWidthChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanging (System.Windows.Forms.ColumnWidthChangingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanging(class System.Windows.Forms.ColumnWidthChangingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanging (e As ColumnWidthChangingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanging(System::Windows::Forms::ColumnWidthChangingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ColumnWidthChangingEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanging" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ColumnWidthChanging>事件不會發生拖放到功能，「 顯示視窗拖放時內容 」 選項，如果視窗的完整已停用。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnColumnWidthChanging%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawColumnHeader">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawColumnHeader (System.Windows.Forms.DrawListViewColumnHeaderEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawColumnHeader(class System.Windows.Forms.DrawListViewColumnHeaderEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawColumnHeader (e As DrawListViewColumnHeaderEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawColumnHeader(System::Windows::Forms::DrawListViewColumnHeaderEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnDrawColumnHeader%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawListViewItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawListViewItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawListViewItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawListViewItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.DrawItem" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnDrawItem%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnDrawSubItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawSubItem (System.Windows.Forms.DrawListViewSubItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawSubItem(class System.Windows.Forms.DrawListViewSubItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawSubItem (e As DrawListViewSubItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawSubItem(System::Windows::Forms::DrawListViewSubItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewSubItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnDrawSubItem%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see langword="FontChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.HandleCreated" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnItemActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnItemActivate (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemActivate(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemActivate (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemActivate(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.ItemActivate" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnItemActivate%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCheck (System.Windows.Forms.ItemCheckEventArgs ice);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCheck(class System.Windows.Forms.ItemCheckEventArgs ice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemCheck (ice As ItemCheckEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemCheck(System::Windows::Forms::ItemCheckEventArgs ^ ice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ice" Type="System.Windows.Forms.ItemCheckEventArgs" />
      </Parameters>
      <Docs>
        <param name="ice">包含事件資料的 <see cref="T:System.Windows.Forms.ItemCheckEventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.ItemCheck" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnItemCheck%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemCheck" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemChecked">
      <MemberSignature Language="C#" Value="protected virtual void OnItemChecked (System.Windows.Forms.ItemCheckedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemChecked(class System.Windows.Forms.ItemCheckedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemChecked (e As ItemCheckedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemChecked(System::Windows::Forms::ItemCheckedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemCheckedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.Windows.Forms.ItemCheckedEventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.ItemChecked" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnItemChecked%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDrag (System.Windows.Forms.ItemDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDrag(class System.Windows.Forms.ItemDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemDrag (e As ItemDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemDrag(System::Windows::Forms::ItemDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.Windows.Forms.ItemDragEventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.ItemDrag" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnItemDrag%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemDrag" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnItemMouseHover (System.Windows.Forms.ListViewItemMouseHoverEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemMouseHover(class System.Windows.Forms.ListViewItemMouseHoverEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemMouseHover (e As ListViewItemMouseHoverEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemMouseHover(System::Windows::Forms::ListViewItemMouseHoverEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemMouseHoverEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ListViewItemMouseHoverEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.ItemMouseHover" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnItemMouseHover%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnItemSelectionChanged (System.Windows.Forms.ListViewItemSelectionChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemSelectionChanged(class System.Windows.Forms.ListViewItemSelectionChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemSelectionChanged (e As ListViewItemSelectionChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemSelectionChanged(System::Windows::Forms::ListViewItemSelectionChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemSelectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ListViewItemSelectionChangedEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnItemSelectionChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected override void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseHover (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseHover(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.MouseHover" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.ListView.OnMouseHover%2A>呼叫方法時，滑鼠指標停留在<xref:System.Windows.Forms.ListViewItem>，方法就會引發<xref:System.Windows.Forms.ListView.ItemMouseHover>事件。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnMouseHover%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.MouseLeave" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnParentChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.ParentChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnResize(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.Resize" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRetrieveVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnRetrieveVirtualItem (System.Windows.Forms.RetrieveVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRetrieveVirtualItem(class System.Windows.Forms.RetrieveVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRetrieveVirtualItem (e As RetrieveVirtualItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRetrieveVirtualItem(System::Windows::Forms::RetrieveVirtualItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.RetrieveVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.RetrieveVirtualItemEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnRetrieveVirtualItem%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRightToLeftLayoutChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRightToLeftLayoutChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSearchForVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnSearchForVirtualItem (System.Windows.Forms.SearchForVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSearchForVirtualItem(class System.Windows.Forms.SearchForVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSearchForVirtualItem (e As SearchForVirtualItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSearchForVirtualItem(System::Windows::Forms::SearchForVirtualItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.SearchForVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.SearchForVirtualItemEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.SearchForVirtualItem" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnSearchForVirtualItem%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnSelectedIndexChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected override void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSystemColorsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSystemColorsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSystemColorsChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVirtualItemsSelectionRangeChanged (System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVirtualItemsSelectionRangeChanged(class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnVirtualItemsSelectionRangeChanged (e As ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnVirtualItemsSelectionRangeChanged(System::Windows::Forms::ListViewVirtualItemsSelectionRangeChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OwnerDraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.OwnerDraw" />
      <MemberSignature Language="VB.NET" Value="Public Property OwnerDraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OwnerDraw { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Windows.Forms.ListView" /> 控制項是由作業系統或您提供的程式碼所描繪。</summary>
        <value>
          如果要由您提供的程式碼描繪 <see cref="T:System.Windows.Forms.ListView" /> 控制項，則為 <see langword="true" />，如果要由作業系統描繪 <see cref="T:System.Windows.Forms.ListView" /> 控制項，則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Forms.ListView>通常由作業系統繪製控制項。 若要自訂的外觀<xref:System.Windows.Forms.ListView>項目、 子項目和資料行標頭，設定<xref:System.Windows.Forms.ListView.OwnerDraw%2A>屬性`true`並提供一個或多個下列事件處理常式： <xref:System.Windows.Forms.ListView.DrawItem>， <xref:System.Windows.Forms.ListView.DrawSubItem>， <xref:System.Windows.Forms.ListView.DrawColumnHeader>。 這稱為主控描繪。 當<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>，所有三個事件發生的事件; 否則只<xref:System.Windows.Forms.ListView.DrawItem>就會發生事件。  
  
> [!NOTE]
>  子項目資訊通常會出現在並排顯示檢視，以及詳細資料檢視，但在並排顯示檢視，它必須繪製的處理常式<xref:System.Windows.Forms.ListView.DrawItem>事件。 <xref:System.Windows.Forms.ListView.DrawSubItem>事件不會發生任何子項目，且未<xref:System.Windows.Forms.ColumnHeader>物件已加入至<xref:System.Windows.Forms.ListView.Columns%2A>集合。 也請注意，第一個子項目，每個<xref:System.Windows.Forms.ListViewItem>物件表示父項目本身，而且會顯示在第一個資料行。  
  
 在詳細資料檢視中，您可以處理<xref:System.Windows.Forms.ListView.DrawItem>事件的所有子項目，例如背景繪製通用的項目，並處理<xref:System.Windows.Forms.ListView.DrawSubItem>事件，以繪製為個別的子項目，例如文字值的項目。 您也可以繪製所有項目<xref:System.Windows.Forms.ListView>雖然這可能是較不方便使用的兩個事件，其中之一的控制。 若要繪製詳細資料檢視中的資料行標頭，您必須處理<xref:System.Windows.Forms.ListView.DrawColumnHeader>事件。  
  
> [!NOTE]
>  若要避免問題的圖形閃爍當主控描繪，覆寫<xref:System.Windows.Forms.ListView>控制以及設定<xref:System.Windows.Forms.ListView.DoubleBuffered%2A>屬性`true`。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何提供自訂繪圖的<xref:System.Windows.Forms.ListView>控制項。 <xref:System.Windows.Forms.ListView>在範例中的控制項有漸層的背景。 使用負數值的子項目有紅色前景和黑色背景。  
  
 處理常式<xref:System.Windows.Forms.ListView.DrawItem>事件繪製整個項目背景。 處理常式<xref:System.Windows.Forms.ListView.DrawSubItem>事件繪製的文字值和文字與背景有負數值的子項目。 處理常式<xref:System.Windows.Forms.ListView.DrawColumnHeader>事件繪製的各個資料行標頭。  
  
 A<xref:System.Windows.Forms.ContextMenu>元件提供詳細資料檢視和 [清單] 檢視之間切換的方式。 在清單檢視中，只有<xref:System.Windows.Forms.ListView.DrawItem>就會引發事件。 在此情況下，文字和背景同時繪製<xref:System.Windows.Forms.ListView.DrawItem>事件處理常式。  
  
 [!code-csharp[ListViewOwnerDraw#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#1)]
 [!code-vb[ListViewOwnerDraw#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.ListView" /> 控制項及其內容之間的間距。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Padding" />，指定 <see cref="T:System.Windows.Forms.ListView" /> 控制項及其內容之間的間距。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性與這個類別無關。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="P:System.Windows.Forms.ListView.Padding" /> 屬性的值變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於繪製 <see cref="T:System.Windows.Forms.ListView" /> 控制項時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView>由作業系統繪製控制項，或擁有者繪製，所以<xref:System.Windows.Forms.ListView.Paint>永遠不會引發事件。 如需主控描繪的詳細資訊，請參閱<xref:System.Windows.Forms.ListView.OwnerDraw%2A>屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RealizeProperties">
      <MemberSignature Language="C#" Value="protected void RealizeProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RealizeProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RealizeProperties" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RealizeProperties ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RealizeProperties();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初始化管理控制項外觀之 <see cref="T:System.Windows.Forms.ListView" /> 控制項的屬性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedrawItems">
      <MemberSignature Language="C#" Value="public void RedrawItems (int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RedrawItems(int32 startIndex, int32 endIndex, bool invalidateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RedrawItems(System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RedrawItems (startIndex As Integer, endIndex As Integer, invalidateOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RedrawItems(int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
        <Parameter Name="invalidateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startIndex">範圍中要重新描繪的第一個項目索引。</param>
        <param name="endIndex">範圍中要重新描繪的最後一個項目索引。</param>
        <param name="invalidateOnly">
          <see langword="true" /> 表示使項目的範圍失效，<see langword="false" /> 則表示使項目失效並重新繪製項目。</param>
        <summary>強制重新描繪一系列 <see cref="T:System.Windows.Forms.ListViewItem" /> 物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.RedrawItems%2A>方法可以是使用是否<xref:System.Windows.Forms.ListView>處於虛擬模式或標準模式。  
  
 如果<xref:System.Windows.Forms.ListView.BeginUpdate%2A>方法呼叫之前已呼叫<xref:System.Windows.Forms.ListView.RedrawItems%2A>，不會重新繪製。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> 或 <paramref name="endIndex" /> 小於 0、大於或等於 <see cref="T:System.Windows.Forms.ListView" /> 中的項目數目，或是如果在虛擬模式下，大於 <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> 的值。  
  
 -或-  
  
 指定的 <paramref name="startIndex" /> 大於 <paramref name="endIndex." /></exception>
      </Docs>
    </Member>
    <Member MemberName="RetrieveVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RetrieveVirtualItem As RetrieveVirtualItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::RetrieveVirtualItemEventHandler ^ RetrieveVirtualItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RetrieveVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生在 <see cref="T:System.Windows.Forms.ListView" /> 處於虛擬模式，而且需要 <see cref="T:System.Windows.Forms.ListViewItem" /> 時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Windows.Forms.ListView>物件處於虛擬模式，它會建立<xref:System.Windows.Forms.ListViewItem>物件，以動態方式而不要使用<xref:System.Windows.Forms.ListView.Items%2A>集合。 必須在建立物件時，會引發這個事件<xref:System.Windows.Forms.ListViewItem>物件。 這個事件處理常式應建立適當<xref:System.Windows.Forms.ListViewItem>或擷取快取，並將它傳回的方式的傳遞<xref:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item%2A>屬性。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範此事件處理常式。 在此範例中，listView1 需要每個<xref:System.Windows.Forms.ListViewItem>以顯示其索引的平方。 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Windows.Forms.ListView.VirtualMode%2A>屬性。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#2)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在處理 <see cref="P:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item" /> 事件時，<see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> 屬性並未設定為任何項目。</exception>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayout">
      <MemberSignature Language="C#" Value="public virtual bool RightToLeftLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeftLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.RightToLeftLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeftLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RightToLeftLayout { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出控制項是否由右至左配置。</summary>
        <value>
          如果 <see cref="T:System.Windows.Forms.ListView" /> 控制項由右至左配置，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView>屬性是國際應用程式搭配使用的語言由右至左的讀取位置。 如果您設定<xref:System.Windows.Forms.ListView>和<xref:System.Windows.Forms.RightToLeft>設為 true 的控制項的內容和文字配置由右至左。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RightToLeftLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RightToLeftLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="P:System.Windows.Forms.ListView.RightToLeftLayout" /> 屬性的值變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.ListView>名為`ListView1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#462](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#462)]
 [!code-vb[System.Windows.Forms.EventExamples#462](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#462)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scrollable">
      <MemberSignature Language="C#" Value="public bool Scrollable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Scrollable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Scrollable" />
      <MemberSignature Language="VB.NET" Value="Public Property Scrollable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Scrollable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出沒有足夠空間可顯示所有項目時，是否要將捲軸加入控制項。</summary>
        <value>
          必要時將捲軸加入控制項以允許使用者檢視所有的項目，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當這個屬性設定為`true`、<xref:System.Windows.Forms.ListView>顯示垂直捲軸使用時的項目數超過控制項的工作區的大小。 您可以使用這個屬性，以確保使用者可以存取所有項目中的可用<xref:System.Windows.Forms.ListView>控制項。  
  
> [!NOTE]
>  新版的[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]之前 2.0 版中，資料行標頭已不繪製正確時設定此屬性為`false`和調整大小的控制項設定更大。 若要解決此問題，請將此屬性設定為`true`中<xref:System.Windows.Forms.Form.ResizeBegin>事件處理常式並設回`false`中<xref:System.Windows.Forms.Form.ResizeEnd>事件處理常式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchForVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SearchForVirtualItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SearchForVirtualItem As SearchForVirtualItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::SearchForVirtualItemEventHandler ^ SearchForVirtualItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SearchForVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生在 <see cref="T:System.Windows.Forms.ListView" /> 處於虛擬模式，而且已經開始進行搜尋時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 就會發生此事件時<xref:System.Windows.Forms.ListView>處於虛擬模式和<xref:System.Windows.Forms.ListView.FindNearestItem%2A>或<xref:System.Windows.Forms.ListView.FindItemWithText%2A>方法呼叫。 當處理此事件，您應該計算的項目從清單中所提供的項目<xref:System.Windows.Forms.ListView.Items%2A>屬性符合搜尋準則和組<xref:System.Windows.Forms.SearchForVirtualItemEventArgs.Index%2A?displayProperty=nameWithType>屬性的索引<xref:System.Windows.Forms.ListViewItem>。 如果未提供項目，<xref:System.Windows.Forms.ListView.FindNearestItem%2A>和<xref:System.Windows.Forms.ListView.FindItemWithText%2A>會傳回`null`。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，搜尋會傳回最接近的相符項目與指定的整數清單中的第一次一萬個方塊。 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Windows.Forms.ListView.VirtualMode%2A>屬性。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#4)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedIndexChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="P:System.Windows.Forms.ListView.SelectedIndices" /> 集合變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SelectedIndices%2A>集合變更時<xref:System.Windows.Forms.ListViewItem.Selected%2A>屬性<xref:System.Windows.Forms.ListViewItem>變更。 屬性變更可能是以程式設計方式或當使用者選取的項目，或清除選取的項目。 當使用者選取未按下 ctrl 鍵，即可執行多個選取的項目時，控制項就會先清除先前選取的項目。 在此情況下，每個先前選取的項目一次，一次新選取項目，就會發生此事件。  
  
 若要判斷哪些項目中所選<xref:System.Windows.Forms.ListView>控制，請使用<xref:System.Windows.Forms.ListView.SelectedItems%2A>屬性來存取<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>。 您可以建立此事件，以在選取的項目變更時執行工作的事件處理常式<xref:System.Windows.Forms.ListView>控制項。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView.SelectedItems%2A>屬性，<xref:System.Windows.Forms.ListView.SelectedIndexChanged>事件，<xref:System.Windows.Forms.ListView.HeaderStyle%2A>成員，而<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>類別。 若要執行此範例中，將下列程式碼貼到表單，其中包含<xref:System.Windows.Forms.ListView>名為物件`ListView1`和<xref:System.Windows.Forms.TextBox>名為`TextBox1`。 呼叫`InitializeListView`從表單的建構函式的方法或`Load`方法。 這個範例需要的事件處理常式已正確地與相關聯<xref:System.Windows.Forms.ListView.SelectedIndexChanged>事件  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
        <altmember cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedIndices As ListView.SelectedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::SelectedIndexCollection ^ SelectedIndices { System::Windows::Forms::ListView::SelectedIndexCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得控制項中所選取項目的索引。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />，其中包含已選取項目的索引。 如果目前並未選取任何項目，將傳回空白的 <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SelectedIndices%2A>屬性不會包含任何索引，如果在屬性經過存取之前<xref:System.Windows.Forms.ListView>建立控制代碼，通常發生於當<xref:System.Windows.Forms.ListView>表單中顯示的資料一開始載入。 您可以檢查看看是否使用建立控制代碼<xref:System.Windows.Forms.Control.IsHandleCreated%2A>屬性。 當<xref:System.Windows.Forms.ListView.MultiSelect%2A>屬性設定為`true`，這個屬性會傳回集合，其中包含的所有項目中選取索引<xref:System.Windows.Forms.ListView>。 針對單一選取<xref:System.Windows.Forms.ListView>，這個屬性會傳回集合，其中包含單一項目包含只有在選取之項目的索引<xref:System.Windows.Forms.ListView>。 如需有關可以在集合中的項目執行的工作的詳細資訊，請參閱<xref:System.Windows.Forms.ListView.SelectedIndexCollection>。  
  
 如果您想要取得的項目中所選集合<xref:System.Windows.Forms.ListView>控制項，而不是已選取項目，使用的索引位置<xref:System.Windows.Forms.ListView.SelectedItems%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView.SelectedIndices%2A>， <xref:System.Windows.Forms.ListView.SelectedIndexChanged>，和<xref:System.Windows.Forms.ListView.HeaderStyle%2A>成員和<xref:System.Windows.Forms.ListView.SelectedIndexCollection>類別。 若要執行此範例中，將下列程式碼貼到表單，其中包含<xref:System.Windows.Forms.ListView>名為物件`ListView1`和<xref:System.Windows.Forms.TextBox>名為`TextBox1`。 呼叫`InitializeListView`從表單的建構函式的方法或`Load`方法。 這個範例需要的事件處理常式已正確地與相關聯<xref:System.Windows.Forms.ListView.SelectedIndexChanged>事件。  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView1#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView1#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedListViewItemCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedListViewItemCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedItems As ListView.SelectedListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::SelectedListViewItemCollection ^ SelectedItems { System::Windows::Forms::ListView::SelectedListViewItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得控制項中已選取的項目。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />，其中包含控制項中已選取的項目。 如果目前並未選取任何項目，將傳回空白的 <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SelectedItems%2A>屬性不會包含任何項目，如果在屬性經過存取之前<xref:System.Windows.Forms.ListView>建立控制代碼，通常發生於當<xref:System.Windows.Forms.ListView>表單中顯示的資料一開始載入。 您可以檢查看看是否使用建立控制代碼<xref:System.Windows.Forms.Control.IsHandleCreated%2A>屬性。 當<xref:System.Windows.Forms.ListView.MultiSelect%2A>屬性設定為`true`，這個屬性會傳回集合，其中包含的項目中所選<xref:System.Windows.Forms.ListView>。 針對單一選取<xref:System.Windows.Forms.ListView>，這個屬性會傳回集合，其中包含唯一選取的項目中<xref:System.Windows.Forms.ListView>。 如需有關可以在集合中的項目執行的工作的詳細資訊，請參閱<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>。  
  
 如果您想要取得集合中的索引位置的<xref:System.Windows.Forms.ListView.ListViewItemCollection>中選取的項目<xref:System.Windows.Forms.ListView>控制項，而不是已選取項目，使用<xref:System.Windows.Forms.ListView.SelectedIndices%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView.SelectedItems%2A>，<xref:System.Windows.Forms.ListView.SelectedIndexChanged>事件，以及<xref:System.Windows.Forms.ListView.HeaderStyle%2A>成員和<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>類別。 若要執行此範例中，將下列程式碼貼到表單，其中包含<xref:System.Windows.Forms.ListView>名為物件`ListView1`和<xref:System.Windows.Forms.TextBox>名為`TextBox1`。 呼叫`InitializeListView`從表單的建構函式的方法或`Load`方法。 這個範例需要的事件處理常式已正確地與相關聯<xref:System.Windows.Forms.ListView.SelectedIndexChanged>事件  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ShowGroups">
      <MemberSignature Language="C#" Value="public bool ShowGroups { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowGroups" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowGroups As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowGroups { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出項目是否顯示在群組中。</summary>
        <value>
          若要在群組中顯示項目，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指派給任何群組<xref:System.Windows.Forms.ListView>控制項時出現<xref:System.Windows.Forms.ListView.View%2A>以外屬性設定為值<xref:System.Windows.Forms.View.List>。 <xref:System.Windows.Forms.ListView>群組功能可讓您建立的邏輯相關的視覺化群組<xref:System.Windows.Forms.ListView>Windows XP 和 Windows Server 2003 上的項目。 若要啟用此功能，您的應用程式必須呼叫<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法。 如需詳細資訊，請參閱 <xref:System.Windows.Forms.ListView.Groups%2A> 屬性 (Property)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Groups" />
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="ShowItemToolTips">
      <MemberSignature Language="C#" Value="public bool ShowItemToolTips { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowItemToolTips" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowItemToolTips" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowItemToolTips As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowItemToolTips { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指示是否為包含於 <see cref="T:System.Windows.Forms.ListViewItem" /> 中的 <see cref="T:System.Windows.Forms.ListView" /> 物件顯示工具提示。</summary>
        <value>
          如果應該要顯示 <see cref="T:System.Windows.Forms.ListViewItem" /> 工具提示，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.ListView.ShowItemToolTips%2A>屬性設定為`true`，任何<xref:System.Windows.Forms.ListViewItem>工具提示會顯示; 否則將不會顯示。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView.ShowItemToolTips%2A>和<xref:System.Windows.Forms.ListViewItem.ToolTipText%2A?displayProperty=nameWithType>屬性。 若要執行此範例中，貼上程式碼的 Windows Form 和呼叫`InitializeItemsWithToolTips`從表單的建構函式或<xref:System.Windows.Forms.Form.Load>事件處理常式。  
  
 [!code-csharp[System.Windows.Forms.ListViewItemWhidbeyMembers#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.ListViewItemWhidbeyMembers#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmallImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList SmallImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList SmallImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SmallImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property SmallImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ SmallImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.ImageList" />，當控制項中的項目顯示為小圖示時使用。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" />，其中包含將 <see cref="P:System.Windows.Forms.ListView.View" /> 屬性設定為 <see cref="F:System.Windows.Forms.View.SmallIcon" /> 時所用的圖示。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性可讓您指定<xref:System.Windows.Forms.ImageList>物件，其中包含顯示小圖示的項目時所要使用的圖示 (當<xref:System.Windows.Forms.ListView.View%2A>以外屬性設定為任何值<xref:System.Windows.Forms.View.LargeIcon>)。 <xref:System.Windows.Forms.ListView>控制項可以接受的任何圖形格式<xref:System.Windows.Forms.ImageList>控制項支援時顯示圖示。 <xref:System.Windows.Forms.ListView>控制項不限於.ico 檔案。 一次<xref:System.Windows.Forms.ImageList>指派給<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性，您可以將<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A>每個屬性<xref:System.Windows.Forms.ListViewItem>中<xref:System.Windows.Forms.ListView>中適當的映像的索引位置的控制項<xref:System.Windows.Forms.ImageList>。 圖示的大小<xref:System.Windows.Forms.ListView.SmallImageList%2A>所指定<xref:System.Windows.Forms.ImageList.ImageSize%2A>屬性。  
  
 因為可以指定只能有一個索引<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=nameWithType>屬性，<xref:System.Windows.Forms.ImageList>物件中指定<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性應該有相同的索引位置，如顯示的影像。 例如，如果<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A>屬性<xref:System.Windows.Forms.ListViewItem>設為 0 時，要用於小型和大型圖示影像應該會在相同的索引位置<xref:System.Windows.Forms.ImageList>中指定的物件<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。  
  
> [!NOTE]
>  當索引鍵指定映像時，您仍然需要放置在其各自的影像清單中，相同的索引位置的小型和大型影像的版本。 檢視之間切換時，一份清單中的映像的索引位置用來找出影像中的其他清單中，不論所指定的金鑰值。  
  
 若要設定<xref:System.Windows.Forms.ImageList>顯示大圖示的項目時所要使用 (當<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.LargeIcon>)，使用<xref:System.Windows.Forms.ListView.LargeImageList%2A>屬性。 如果您想要使用影像來顯示項目狀態，請使用<xref:System.Windows.Forms.ListView.StateImageList%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.ListView>控制項具有三個<xref:System.Windows.Forms.ListViewItem>所指定的物件和三個<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>針對每個項目指定的物件。 此範例也會建立<xref:System.Windows.Forms.ColumnHeader>物件詳細資料檢視中顯示子項目。 兩個<xref:System.Windows.Forms.ImageList>物件也會建立在程式碼範例中提供的映像<xref:System.Windows.Forms.ListViewItem>物件。 這些<xref:System.Windows.Forms.ImageList>物件加入至<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。 此範例會使用下列屬性建立<xref:System.Windows.Forms.ListView>控制項。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 這個範例需要您已加入的程式碼<xref:System.Windows.Forms.Form>並呼叫從建構函式或在表單上的另一個方法範例中所建立的方法。 這個範例也會需要映像命名為`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位於 c 磁碟機的根目錄  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>為清單檢視中的項目排序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常使用排序的項目<xref:System.Windows.Forms.ListView.Sorting%2A>屬性排序的項目文字的項目。 若要自訂排序次序，您必須撰寫實作的類別<xref:System.Collections.IComparer>介面，並設定<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>該類別物件的屬性。 這非常有用，例如，當您想要排序文字子項目的項目。 如需執行的項目手動排序的詳細資訊，請參閱範例的<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>屬性。  
  
 如果<xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType>以外屬性設定為值<xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType>或<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>屬性設定，並加入項目時自動排序清單。 標籤文字變更時，不會自動排序項目。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      </Docs>
    </Member>
    <Member MemberName="Sorting">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.SortOrder Sorting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SortOrder Sorting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Sorting" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorting As SortOrder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::SortOrder Sorting { System::Windows::Forms::SortOrder get(); void set(System::Windows::Forms::SortOrder value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SortOrder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定控制項中項目的排序次序。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.SortOrder" /> 值。 預設值為 <see cref="F:System.Windows.Forms.SortOrder.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Sorting%2A>屬性可讓您指定是否有項目會按照<xref:System.Windows.Forms.ListView>控制項。 根據預設，不執行排序。 當<xref:System.Windows.Forms.ListView.Sorting%2A>屬性設定為<xref:System.Windows.Forms.SortOrder.Ascending>或<xref:System.Windows.Forms.SortOrder.Descending>中的項目<xref:System.Windows.Forms.ListView>會自動依字母順序遞增排序 (當此屬性設定為<xref:System.Windows.Forms.SortOrder.Ascending>) 或遞減字母順序 (時屬性設定為<xref:System.Windows.Forms.SortOrder.Descending>)。 您可以使用這個屬性，來自動排序項目會顯示在您<xref:System.Windows.Forms.ListView>控制項，讓使用者更輕鬆地尋找項目，可用的項目數量龐大時。  
  
 如果您想要執行排序，而不使用您自己的項目<xref:System.Windows.Forms.ListView.Sorting%2A>屬性，請使用<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>屬性結合<xref:System.Windows.Forms.ListView.Sort%2A>方法。  
  
 如果<xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType>以外屬性設定為值<xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType>或<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>屬性設定，則會自動排序清單項目加入時。 標籤文字變更時，不會自動排序項目。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.ListView>控制項具有三個<xref:System.Windows.Forms.ListViewItem>所指定的物件和三個<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>針對每個項目指定的物件。 此範例也會建立<xref:System.Windows.Forms.ColumnHeader>物件詳細資料檢視中顯示子項目。 兩個<xref:System.Windows.Forms.ImageList>物件也會建立在程式碼範例中提供的映像<xref:System.Windows.Forms.ListViewItem>物件。 這些<xref:System.Windows.Forms.ImageList>物件加入至<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。 此範例會使用下列屬性建立<xref:System.Windows.Forms.ListView>控制項。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 這個範例需要您已加入的程式碼<xref:System.Windows.Forms.Form>並呼叫從建構函式或在表單上的另一個方法範例中所建立的方法。 這個範例也會需要映像命名為`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位於 c 磁碟機的根目錄  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的值不是其中一個 <see cref="T:System.Windows.Forms.SortOrder" /> 值。</exception>
        <altmember cref="T:System.Windows.Forms.SortOrder" />
      </Docs>
    </Member>
    <Member MemberName="StateImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList StateImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList StateImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.StateImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property StateImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ StateImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與控制項中應用程式定義狀態相關的 <see cref="T:System.Windows.Forms.ImageList" />。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" />，其中包含一組狀態影像，可用來指示項目的應用程式定義的狀態。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.StateImageList%2A>屬性可讓您指定<xref:System.Windows.Forms.ImageList>，其中包含要用來表示應用程式專屬的狀態中的項目影像<xref:System.Windows.Forms.ListView>控制項。 狀態影像會顯示項目圖示的左邊。 您可以使用狀態的影像，例如已核對及未核取核取方塊，以指出應用程式定義的項目狀態。 狀態影像會顯示在所有檢視的<xref:System.Windows.Forms.ListView>控制項。  
  
 如果<xref:System.Windows.Forms.ImageList>中指定<xref:System.Windows.Forms.ListView.StateImageList%2A>屬性和<xref:System.Windows.Forms.ListView.CheckBoxes%2A>屬性設定為`true`，在 0 和 1 中的索引位置的映像<xref:System.Windows.Forms.ImageList>而不是核取方塊會顯示。 而不是未檢查的核取方塊，顯示的影像的索引位置 0，而不是已核取核取方塊會顯示的索引位置 1 的影像。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>這個屬性與這個類別無關。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView" /> 控制項中要顯示的文字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性與這個類別無關。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="P:System.Windows.Forms.ListView.Text" /> 屬性變更時。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size TileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size TileSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property TileSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size TileSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定在並排顯示中所顯示的磚大小。</summary>
        <value>
          <see cref="T:System.Drawing.Size" />，其中包含新的方磚大小。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會控制的大小，並排顯示時<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>。 設定這個屬性是可用來防止換太長，無法在同一行顯示子項目的文字時。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView>並排顯示功能。 在範例中，並排顯示檢視會顯示代表書籍項目。 每個項目會顯示為磚，其中包含書籍、 標題、 作者，以及發行年份的圖示。 工作的範例程式碼，您必須包含相同的目錄與範例中名為 Book.ico 的圖示檔案。 若要查看不含圖示檢視中，標記為註解的線條與相關的磚<xref:System.Windows.Forms.ImageList>物件。  
  
 [!code-cpp[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CPP/listviewtilingexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CS/listviewtilingexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/VB/listviewtilingexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="TopItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem TopItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem TopItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TopItem" />
      <MemberSignature Language="VB.NET" Value="Public Property TopItem As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewItem ^ TopItem { System::Windows::Forms::ListViewItem ^ get(); void set(System::Windows::Forms::ListViewItem ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定控制項中第一個可見的項目。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListViewItem" />，表示控制項中第一個可見的項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 具有零 (0) 的索引位置的項目一開始是在頂端<xref:System.Windows.Forms.ListView>控制項。 如果<xref:System.Windows.Forms.ListView>控制項內容捲動以外，另一個項目可能會在控制項的頂端。 您可以使用這個屬性來表示，或判斷哪一個項目會顯示在頂端<xref:System.Windows.Forms.ListView>控制項。 值<xref:System.Windows.Forms.ListView.TopItem%2A>屬性將不一定會保存，根據所需的最上層項目是清單檢視中的位置。  
  
 顯示在項目數目<xref:System.Windows.Forms.ListView>控制項在任何時間取決於 [清單] 檢視的高度和它所包含的項目大小。 如果項目數目超過 [清單] 檢視的高度，項目會繼續到多個頁面，使用者可以捲動。 如果您設定<xref:System.Windows.Forms.ListView.TopItem%2A>屬性中的最後一頁的項目<xref:System.Windows.Forms.ListView>，此項目會自動捲動到檢視; 不過，<xref:System.Windows.Forms.ListView.TopItem%2A>會設定為實際的最後一頁上方項目。  
  
 若要確保特定項目控制項的可見區域 （但不是一定在上方的位置） 中，使用<xref:System.Windows.Forms.ListView.EnsureVisible%2A>方法。  
  
> [!NOTE]
>  設定此屬性沒有任何作用<xref:System.Windows.Forms.ListView.Scrollable%2A>屬性值是`false`。  
>   
>  設定這個屬性的版本中不支援[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]2.0 以前版本。  
  
   
  
## Examples  
 下列程式碼範例示範如何重設的樣式<xref:System.Windows.Forms.ListViewItem>使用物件的子項目<xref:System.Windows.Forms.ListView.TopItem%2A>屬性和<xref:System.Windows.Forms.ListViewItem.ListViewSubItem.ResetStyle%2A?displayProperty=nameWithType>方法。 若要執行範例時，貼入下列程式碼包含名為按鈕的表單`Button1`呼叫`InitializeListView`表單的建構函式中的方法或<xref:System.Windows.Forms.Form.Load>事件處理常式。  
  
 [!code-cpp[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.View" /> 屬性是設定為 <see cref="F:System.Windows.Forms.View.LargeIcon" />、<see cref="F:System.Windows.Forms.View.SmallIcon" /> 或 <see cref="F:System.Windows.Forms.View.Tile" />。</exception>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回 <see cref="T:System.Windows.Forms.ListView" /> 控制項的字串表示。</summary>
        <returns>字串，表示控制項型別的狀態、<see cref="T:System.Windows.Forms.ListView" /> 控制項中的項目計數，以及 <see cref="T:System.Windows.Forms.ListView" /> 中第一個項目的型別 (如果計數不是 0 的話)。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateExtendedStyles">
      <MemberSignature Language="C#" Value="protected void UpdateExtendedStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateExtendedStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.UpdateExtendedStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateExtendedStyles ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateExtendedStyles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>更新套用在清單檢視控制項的延伸樣式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Windows.Forms.ListView.UpdateExtendedStyles%2A>方法在衍生類別覆寫所使用的擴充的樣式<xref:System.Windows.Forms.ListView>控制項。 如果您呼叫這個方法時，您應該確保透過屬性上設定的延伸的樣式<xref:System.Windows.Forms.ListView>衍生控制項的版本中的控制項並加以使用。  
  
 以下是套用至擴充的樣式屬性<xref:System.Windows.Forms.ListView>控制項。  
  
-   <xref:System.Windows.Forms.ListView.Activation%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.HoverSelection%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.AllowColumnReorder" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
        <altmember cref="P:System.Windows.Forms.ListView.FullRowSelect" />
        <altmember cref="P:System.Windows.Forms.ListView.GridLines" />
        <altmember cref="P:System.Windows.Forms.ListView.HoverSelection" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleStateImageBehavior">
      <MemberSignature Language="C#" Value="public bool UseCompatibleStateImageBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCompatibleStateImageBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCompatibleStateImageBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCompatibleStateImageBehavior { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Windows.Forms.ListView" /> 是否使用與 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 或 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 相容的狀態影像行為。</summary>
        <value>
          如果狀態影像行為與 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 相容則為 <see langword="true" />；如果行為與 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 相容則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要變更<xref:System.Windows.Forms.ListView>控制[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]2.0 啟用自訂的狀態設為指出項目是 checked 或 unchecked 或處於不定狀態的映像。 這項功能，加上[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]2.0 具有不同的行為與.NET Framework 1.1。 如果您已經建立的應用程式中的行為而定， [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 版中，確定<xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A>屬性設定為`true`，這是預設值。 若要充分利用自訂狀態映像，設定<xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A>至`false`。  
  
> [!NOTE]
>  如果您使用[!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)]設計工具中，<xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A>屬性將設定為`false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.View View { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.View View" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.View" />
      <MemberSignature Language="VB.NET" Value="Public Property View As View" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::View View { System::Windows::Forms::View get(); void set(System::Windows::Forms::View value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定控制項中項目的顯示方式。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.View" /> 值。 預設值為 <see cref="F:System.Windows.Forms.View.LargeIcon" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.View%2A>屬性可讓您指定的顯示類型<xref:System.Windows.Forms.ListView>控制項以顯示項目使用。 您可以設定<xref:System.Windows.Forms.ListView.View%2A>屬性來顯示每個項目與大型或小型圖示，或以垂直清單顯示項目。 豐富的選項是詳細資料檢視中，可讓您檢視項目，但不是只針對每個項目指定任何子項目。 每個項目在方格中，會顯示每個項目垂直列和資料行，具有資料行標頭中顯示每個項目的子項目。 詳細資料檢視會顯示資料庫資訊給使用者的絕佳方式。 Windows XP 和 Windows Server 2003，您也可以並排圖形和文字資訊平衡，以顯示您所選擇的子項目資訊以及大型圖示顯示項目。 若要啟用並排顯示檢視，您的應用程式必須呼叫<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法。 小型影像檢視會顯示圖示和文字資訊與每個項目右邊的圖示。 大型影像檢視會顯示圖示和文字資訊圖示下的每個項目。 所指定的影像清單圖示的大小<xref:System.Windows.Forms.ImageList.ImageSize%2A>屬性<xref:System.Windows.Forms.ImageList>如<xref:System.Windows.Forms.ListView.SmallImageList%2A>或<xref:System.Windows.Forms.ListView.LargeImageList%2A>屬性。  
  
> [!NOTE]
>  如果您使用多個映像清單，針對小型和大型圖示檢視中，與<xref:System.Windows.Forms.ListView>控制項，您應該將放置小型和大型版本在相同的影像索引中其各自的影像清單的位置。 檢視之間切換時，一份清單中的映像的索引位置用來找出影像中的其他清單中，不論所指定的金鑰值。  
  
 中的屬性，大部分<xref:System.Windows.Forms.ListView>控制會影響在不同的檢視行為或顯示的方式。 某些屬性會影響項目的檢視才會有用時<xref:System.Windows.Forms.ListView.View%2A>屬性設定為特定值，有些則是在所有檢視很有用。 比方說，這類屬性<xref:System.Windows.Forms.ListView.GridLines%2A>和<xref:System.Windows.Forms.ListView.FullRowSelect%2A>才有用時<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>，雖然<xref:System.Windows.Forms.ListView.MultiSelect%2A>和<xref:System.Windows.Forms.ListView.CheckBoxes%2A>屬性可用於所有檢視。  
  
 下表顯示一些<xref:System.Windows.Forms.ListView>成員以及中是有效的檢視。  
  
|ListView 成員|檢視|  
|---------------------|----------|  
|<xref:System.Windows.Forms.ListView.Alignment%2A> 屬性|<xref:System.Windows.Forms.View.SmallIcon> 或 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoArrange%2A> 屬性|<xref:System.Windows.Forms.View.SmallIcon> 或 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> 方法|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.CheckBoxes%2A>|以外的所有模式 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Columns%2A> 屬性|<xref:System.Windows.Forms.View.Details> 或 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.DrawSubItem> 事件|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.FindItemWithText%2A> 方法|<xref:System.Windows.Forms.View.Details>、 <xref:System.Windows.Forms.View.List>或 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.FindNearestItem%2A> 方法|<xref:System.Windows.Forms.View.SmallIcon> 或 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.GetItemAt%2A> 方法|<xref:System.Windows.Forms.View.Details> 或 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Groups%2A> 屬性|以外的所有模式 <xref:System.Windows.Forms.View.List>|  
|<xref:System.Windows.Forms.ListView.HeaderStyle%2A> 屬性|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.InsertionMark%2A> 屬性|<xref:System.Windows.Forms.View.LargeIcon>、 <xref:System.Windows.Forms.View.SmallIcon>或 <xref:System.Windows.Forms.View.Tile>|  
  
 您可以使用<xref:System.Windows.Forms.ListView.View%2A>屬性提供不同的應用程式中的資料檢視，或鎖定特定的檢視，以利用該檢視的優點。 例如，<xref:System.Windows.Forms.ListView.View%2A>屬性通常會設定為<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>因為詳細資料檢視提供的檢視選項無法使用其他檢視中的數字。  
  
> [!NOTE]
>  如果您<xref:System.Windows.Forms.ListView>控制項沒有指定任何資料行標頭，而且您設定<xref:System.Windows.Forms.ListView.View%2A>屬性<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>、<xref:System.Windows.Forms.ListView>控制項不會顯示任何項目。 如果您<xref:System.Windows.Forms.ListView>控制項沒有指定任何資料行標頭，而且您設定<xref:System.Windows.Forms.ListView.View%2A>屬性<xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>、<xref:System.Windows.Forms.ListView>控制項將不會顯示任何子項目。  
  
 並排顯示檢視會顯示每個項目大圖示右邊的向左和文字資訊。 文字資訊是由後面接著子項目的項目標籤所組成。 根據預設，會顯示第一個子項目，它會對應至項目標籤。 若要顯示其他子項目，您必須加入<xref:System.Windows.Forms.ColumnHeader>物件加入至<xref:System.Windows.Forms.ListView.Columns%2A>集合。 在磚中的每一個子項目會對應到資料行標頭。 若要控制顯示哪一個子項目和顯示它們的順序，您必須設定<xref:System.Windows.Forms.ListViewItem.ListViewSubItem.Name%2A?displayProperty=nameWithType>每個項目的屬性和<xref:System.Windows.Forms.ColumnHeader.Name%2A?displayProperty=nameWithType>每個標頭的屬性。 您可以再新增、 移除和重新排列中的標頭<xref:System.Windows.Forms.ListView.Columns%2A>來達成所需的結果的集合。  
  
 若要控制並排顯示檢視中的圖格的大小，請設定<xref:System.Windows.Forms.ListView.TileSize%2A>屬性。 這是可用來防止換子項目的文字同一行太長時。  
  
 如需並排顯示檢視的範例，請參閱<xref:System.Windows.Forms.ListView.TileSize%2A>屬性。  
  
> [!NOTE]
>  雖然資料行只會顯示在詳細資料檢視中，不含資料行的標頭的子項目不會顯示在 詳細資料檢視 或 並排顯示檢視中。  
  
 並排顯示檢視是僅可在 Windows XP 和 Windows Server 2003，當您的應用程式呼叫<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法。 在舊版作業系統中，任何與並排顯示檢視相關的程式碼都無效，而且 <xref:System.Windows.Forms.ListView> 控制項會顯示在大圖示檢視中。 如此一來，並排顯示檢視所依賴的任何程式碼可能無法正確運作。  
  
 您可能會想要加入程式碼，判斷是否可以使用，並排顯示檢視，並提供無法使用時的替代功能。 例如，當您使用主控描繪自訂外觀<xref:System.Windows.Forms.ListView>並排顯示檢視中的項目，您可能要使用繪圖程式碼適用於在大型圖示檢視時不支援並排顯示檢視的作業系統上執行。  
  
 並排顯示檢視功能是由相同的文件庫提供作業系統主題功能提供。 若要檢查此程式庫的可用性，請呼叫<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType>方法多載，並傳入<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType>值。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.ListView>控制項具有三個<xref:System.Windows.Forms.ListViewItem>所指定的物件和三個<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>針對每個項目指定的物件。 此範例也會建立<xref:System.Windows.Forms.ColumnHeader>物件詳細資料檢視中顯示子項目。 兩個<xref:System.Windows.Forms.ImageList>物件也會建立在程式碼範例中提供的映像<xref:System.Windows.Forms.ListViewItem>物件。 這些<xref:System.Windows.Forms.ImageList>物件加入至<xref:System.Windows.Forms.ListView.LargeImageList%2A>和<xref:System.Windows.Forms.ListView.SmallImageList%2A>屬性。 此範例會使用下列屬性建立<xref:System.Windows.Forms.ListView>控制項。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 這個範例需要您已加入的程式碼<xref:System.Windows.Forms.Form>並呼叫從建構函式或在表單上的另一個方法範例中所建立的方法。 這個範例也會需要映像命名為`MySmallImage1`， `MySmallImage2`， `MyLargeImage1`，和`MyLargeImage2`位於 c 磁碟機的根目錄  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的值不是其中一個 <see cref="T:System.Windows.Forms.View" /> 值。</exception>
        <altmember cref="T:System.Windows.Forms.View" />
        <altmember cref="P:System.Windows.Forms.ListView.TileSize" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="VirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VirtualItemsSelectionRangeChanged As ListViewVirtualItemsSelectionRangeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewVirtualItemsSelectionRangeChangedEventHandler ^ VirtualItemsSelectionRangeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生在 <see cref="T:System.Windows.Forms.ListView" /> 處於虛擬模式，而且某個範圍之項目的選取狀態變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.ListView>不是處於虛擬模式，<xref:System.Windows.Forms.ListView.ItemSelectionChanged>就會發生事件。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.ListView>名為`ListView1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#482](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#482)]
 [!code-vb[System.Windows.Forms.EventExamples#482](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#482)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      </Docs>
    </Member>
    <Member MemberName="VirtualListSize">
      <MemberSignature Language="C#" Value="public int VirtualListSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VirtualListSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualListSize" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualListSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int VirtualListSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定在虛擬模式下，包含於清單中的 <see cref="T:System.Windows.Forms.ListViewItem" /> 物件數目。</summary>
        <value>處於虛擬模式時，包含於 <see cref="T:System.Windows.Forms.ListViewItem" /> 中的 <see cref="T:System.Windows.Forms.ListView" /> 物件數目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 取得或設定<xref:System.Windows.Forms.ListView.VirtualListSize%2A>屬性時<xref:System.Windows.Forms.ListView.VirtualMode%2A>設`false`不會影響<xref:System.Windows.Forms.ListView>。  
  
 如果<xref:System.Windows.Forms.ListView.VirtualMode%2A>設`true`，而<xref:System.Windows.Forms.ListView.VirtualListSize%2A>屬性為大於 0，則您必須處理<xref:System.Windows.Forms.ListView.RetrieveVirtualItem>事件，提供有效<xref:System.Windows.Forms.ListViewItem>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> 設定為小於 0 的值。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> 設定為 <see langword="true" />，<see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> 為大於 0，而未處理 <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />。</exception>
        <altmember cref="P:System.Windows.Forms.ListView.VirtualMode" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMode">
      <MemberSignature Language="C#" Value="public bool VirtualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VirtualMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualMode" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool VirtualMode { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出您是否已經為 <see cref="T:System.Windows.Forms.ListView" /> 控制項提供您自己的資料管理作業。</summary>
        <value>
          如果 <see cref="T:System.Windows.Forms.ListView" /> 使用您所提供的資料管理作業，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定<xref:System.Windows.Forms.ListView.VirtualMode%2A>屬性`true`放<xref:System.Windows.Forms.ListView>進入虛擬模式。 在虛擬模式中，一般<xref:System.Windows.Forms.ListView.Items%2A>集合是未使用。 相反地，<xref:System.Windows.Forms.ListViewItem>物件會以動態方式建立為<xref:System.Windows.Forms.ListView>需要它們。  
  
 虛擬模式非常適合在許多情況下。 如果<xref:System.Windows.Forms.ListView>物件必須先填入非常大量的集合，已在記憶體中，從建立<xref:System.Windows.Forms.ListViewItem>每個項目可以是不必要的物件。 在虛擬模式中，會建立所需的項目。 在其他情況下，值<xref:System.Windows.Forms.ListViewItem>物件可能會需要經常重新計算，如此一來整個集合將會產生無法接受的效能。 在虛擬模式中，會計算的必要項目。  
  
 若要使用的虛擬模式，您必須處理<xref:System.Windows.Forms.ListView.RetrieveVirtualItem>事件，每次，就會引發<xref:System.Windows.Forms.ListView>需要項目。 這個事件處理常式應建立<xref:System.Windows.Forms.ListViewItem>所屬的指定索引處的物件。 此外，<xref:System.Windows.Forms.ListView.VirtualListSize%2A>屬性必須設定為虛擬清單的大小。  
  
 處理<xref:System.Windows.Forms.ListView.SearchForVirtualItem>事件可讓在虛擬模式中進行搜尋。 如果未處理此事件，<xref:System.Windows.Forms.ListView.FindItemWithText%2A>和<xref:System.Windows.Forms.ListView.FindNearestItem%2A>方法會傳回`null`。  
  
 您可以處理<xref:System.Windows.Forms.ListView.CacheVirtualItems>事件，以維護的快取<xref:System.Windows.Forms.ListViewItem>物件。 如果計算或查詢建立<xref:System.Windows.Forms.ListViewItem>物件是高度耗費資源，維護快取可改善效能。  
  
 如果<xref:System.Windows.Forms.ListView.View%2A>屬性設定為<xref:System.Windows.Forms.View.Tile>，值將會自動變更為<xref:System.Windows.Forms.View.LargeIcon>時<xref:System.Windows.Forms.ListView.VirtualMode%2A>設`true`。  
  
 在虛擬模式中，<xref:System.Windows.Forms.ListView.Items%2A>集合已停用。 嘗試存取它導致<xref:System.InvalidOperationException>。 也是如此的<xref:System.Windows.Forms.ListView.CheckedItems%2A>集合和<xref:System.Windows.Forms.ListView.SelectedItems%2A>集合。 如果您想要擷取的已選取或核取的項目，使用<xref:System.Windows.Forms.ListView.SelectedIndices%2A>和<xref:System.Windows.Forms.ListView.CheckedIndices%2A>集合改為。  
  
   
  
## Examples  
 這個範例將示範簡單<xref:System.Windows.Forms.ListView>內容的第一次一萬個方塊。 它會處理搜尋，並為了提高效能使用快取。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> 是設定為 <see langword="true" />，而且具備下列其中一個條件：  
  
-   <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> 大於 0，而未處理 <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />。  
  
     -或-  
  
-   <see cref="P:System.Windows.Forms.ListView.Items" />、<see cref="P:System.Windows.Forms.ListView.CheckedItems" /> 或 <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> 包含項目。  
  
     -或-  
  
-   已經編輯了 <see cref="P:System.Windows.Forms.ListView.Items" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">要處理的 Windows <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>覆寫 <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>