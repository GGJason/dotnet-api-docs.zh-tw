<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f08773771fb4a10a7de82ed774e9bbcb32dbf4e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39979283" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供視窗控制代碼 (Window Handle) 和視窗程序 (Window Procedure) 的低階封裝。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別會自動管理視窗類別建立和註冊。  
  
 與視窗控制代碼相關聯時，就無法進行記憶體回收回收的視窗。 若要確保適當的記憶體回收，控制代碼必須是摧毀使用手動<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>或釋出使用<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>控制訊息處理時，會呼叫方法。 這表示在當您不需要以手動方式呼叫的情況下<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>，但良好的作法是，若要這樣做。  
  
 <xref:System.Windows.Forms.NativeWindow>類別會提供下列屬性和方法來管理控制代碼： <xref:System.Windows.Forms.NativeWindow.Handle%2A>， <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>， <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>， <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>，和<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範攔截作業系統視窗訊息中的視窗程序，和建立視窗的特定作業系統的視窗類別名稱。 此範例會建立兩個類別繼承自<xref:System.Windows.Forms.NativeWindow>，達成此目的。  
  
 `MyNativeWindowListener`類別連結到傳入建構函式，在表單的視窗程序，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法，以攔截`WM_ACTIVATEAPP`視窗訊息。 類別會示範的使用方式<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>並<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法，以識別的視窗控制代碼<xref:System.Windows.Forms.NativeWindow>會使用。 控制代碼為根據的 assign<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。 當`WM_ACTIVATEAPP`接收視窗訊息時，此類別會呼叫`form1.ApplicationActivated`方法。  
  
 `MyNativeWindow`類別會建立新的視窗，內含<xref:System.Windows.Forms.CreateParams.ClassName%2A>設定為`BUTTON`。 類別會示範如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>攔截視窗訊息接收的方法。  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">立即呼叫端呼叫 unmanaged 程式碼。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.NativeWindow" /> 類別的執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是預設<xref:System.Windows.Forms.NativeWindow.%23ctor%2A>由編譯器提供的建構函式。 <xref:System.Windows.Forms.NativeWindow>類別也有靜態建構函式會初始化應用程式的全網域的訊息處理常式和雜湊表。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">控制代碼將指派至這個視窗。</param>
        <summary>將控制代碼指派到這個視窗。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 攔截視窗訊息傳送至`handle`參數。 使用<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>重設為預設視窗程序的控制代碼的視窗程序。  
  
 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>方法呼叫<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法來表示的值<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性已變更。  
  
> [!NOTE]
>  若要將指派的控制代碼不能在不同的應用程式處理程序。  
  
   
  
## Examples  
 下列程式碼範例示範攔截視窗程序中的作業系統視窗訊息。 此範例會建立繼承自類別<xref:System.Windows.Forms.NativeWindow>為了達成此目的。  
  
 `MyNativeWindowListener`類別連結到傳入建構函式，在表單的視窗程序，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法會攔截`WM_ACTIVATEAPP`視窗訊息。 類別會示範如何使用<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>並<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法，以識別哪一個視窗處理<xref:System.Windows.Forms.NativeWindow>會使用。 根據指派的控制代碼<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。 當`WM_ACTIVATEAPP`接收視窗訊息時，此類別會呼叫`form1.ApplicationActivated`方法。  
  
 此程式碼是摘錄自範例所示<xref:System.Windows.Forms.NativeWindow>類別概觀。 為了簡潔起見，不會顯示一些程式碼。 請參閱<xref:System.Windows.Forms.NativeWindow>針對整個程式碼清單。  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">這個視窗已有控制代碼。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">無法擷取相關原生視窗的視窗程序。</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">
          <see cref="T:System.Windows.Forms.CreateParams" />，指定這個視窗的建立參數。</param>
        <summary>使用指定的建立參數建立視窗和它的控制代碼。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `cp`參數指定的值，傳遞至原生 Win32`CreateWindowEx`方法用來建立視窗和其控制代碼。  
  
 當<xref:System.Windows.Forms.CreateParams.ClassName%2A>欄位不是`null`，繼承自指定類別的新建立的視窗控制代碼。 例如，如果<xref:System.Windows.Forms.CreateParams.ClassName%2A>設定為`BUTTON`，新建立的視窗以 Win32 為基礎`BUTTON`視窗類別。 <xref:System.Windows.Forms.CreateParams.Param%2A>的屬性<xref:System.Windows.Forms.CreateParams.ClassName%2A>物件必須是`null`或參考的已宣告為結構的類別執行個體。  
  
 此程式碼是摘錄自範例所示<xref:System.Windows.Forms.NativeWindow>類別概觀。 為了簡潔起見，不會顯示一些程式碼。 請參閱<xref:System.Windows.Forms.NativeWindow>針對整個程式碼清單。  
  
> [!NOTE]
>  提供的類別名稱被向作業系統註冊。  
  
   
  
## Examples  
 下列程式碼範例將示範如何建立使用特定作業系統視窗類別名稱的視窗。 此範例會建立繼承自類別<xref:System.Windows.Forms.NativeWindow>為了達成此目的。  
  
 `MyNativeWindow`類別會建立新的視窗，內含<xref:System.Windows.Forms.CreateParams.ClassName%2A>設定為`BUTTON`。 這會建立 [Win32] 按鈕的視窗。 按鈕的大小與位置已設定，以及指定額外的視窗樣式。 類別會示範如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>攔截視窗訊息接收的方法。 雖然此範例會尋找 WM_ACTIVATEAPP 訊息，這可以取代真正的程式中建立的型別特定的視窗訊息。  
  
> [!NOTE]
>  某些控制項類型會將它們的視窗訊息傳送至視窗父代，而不是視窗。 Windows 平台 SDK，如需詳細資訊，請參閱。  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">嘗試建立原生視窗時，作業系統耗盡資源。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">原生 Win32 API 無法建立指定的視窗。</exception>
        <exception cref="T:System.InvalidOperationException">已指派目前原生視窗的控制代碼。換言之，<see cref="P:System.Windows.Forms.NativeWindow.Handle" /> 屬性不等於 <see cref="F:System.IntPtr.Zero" />。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">若要建立最上層視窗。 如果視窗樣式不是子系，或視窗沒有父代，只要求此權限。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">目前正在處理的訊息。</param>
        <summary>叫用與這個視窗相關的預設視窗程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，您只呼叫<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>時您會攔截視窗訊息，而且想要預設視窗程序，以處理訊息的方法。 <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> 您不應該將視窗訊息傳送至視窗; 呼叫呼叫 Win32`SendMessage`函式。  
  
 它會呼叫錯誤<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>當<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性為 0。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>覆寫這個方法在衍生類別來實作通用的自訂訊息處理特定的原生視窗或.NET Windows Forms 中<see cref="T:System.Windows.Forms.Control" />。之前、 之後或而不呼叫此方法，可執行標準訊息處理的基底類別實作，可以執行自訂處理。相較之下，新增自訂的訊息處理的應用程式可透過下列方式<see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />方法的<see cref="T:System.Windows.Forms.Application" />類別。</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>終結視窗和它的控制代碼。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會終結視窗相關聯<xref:System.Windows.Forms.NativeWindow.Handle%2A>，設定<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性設為 0，並呼叫<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法，以反映變更。 一般而言，您只呼叫<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>當您完成使用原生的視窗。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow>類別會自動將終結相關聯的視窗並釋放其資源來回應 WM_DESTROY 訊息。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放與這個視窗關聯的資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.Finalize%2A>方法會移除目前與相關聯的衍生的 Win32 類別<xref:System.Windows.Forms.NativeWindow>執行個體，釋放控制代碼，並將 WM_CLOSE 訊息張貼至相關聯的視窗。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">視窗的控制代碼。</param>
        <summary>擷取與指定控制代碼關聯的視窗。</summary>
        <returns>與指定控制代碼相關的 <see cref="T:System.Windows.Forms.NativeWindow" />。 當控制代碼沒有相關的視窗時，這個方法會傳回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您接收的控制代碼的另一種方法時，使用這個方法來擷取與控制代碼關聯的視窗。 控制代碼必須已經由另一個擁有<xref:System.Windows.Forms.NativeWindow>在目前處理序，否則`null`會傳回。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個視窗的控制代碼。</summary>
        <value>如果成功的話，則為 <see cref="T:System.IntPtr" />，表示相關原生 (Native) Win32 視窗的控制代碼，但如果沒有任何控制代碼與視窗相關聯，則為 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫 Windows API 方法需要針對視窗或控制項的控制代碼時，請使用這個方法。  
  
   
  
## Examples  
 下列程式碼範例將示範如何建立使用特定作業系統視窗類別名稱的視窗。 此範例會建立繼承自類別<xref:System.Windows.Forms.NativeWindow>為了達成此目的。 此範例也示範如何覆寫<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法時收到通知<xref:System.Windows.Forms.NativeWindow.Handle%2A>變更。  
  
 `MyNativeWindow`類別會建立新的視窗，內含<xref:System.Windows.Forms.CreateParams.ClassName%2A>設 按鈕。 這會建立 [Win32] 按鈕的視窗。 按鈕的大小與位置已設定，以及指定額外的視窗樣式。 類別會示範如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>攔截視窗訊息接收的方法。 雖然此範例會尋找 WM_ACTIVATEAPP 訊息，這可取代為實際的程式中建立的型別特定的視窗訊息。  
  
> [!NOTE]
>  某些控制項類型會將它們的視窗訊息傳送至視窗父代，而不是視窗。 Windows 平台 SDK，如需詳細資訊，請參閱。  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指定告知方法，當視窗的控制代碼變更時便會呼叫該方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會叫用時的值<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性已變更。  
  
   
  
## Examples  
 下列程式碼範例將示範如何建立使用特定作業系統視窗類別名稱的視窗。 此範例會建立繼承自類別<xref:System.Windows.Forms.NativeWindow>為了達成此目的。 此範例也示範如何覆寫<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法時收到通知<xref:System.Windows.Forms.NativeWindow.Handle%2A>變更。  
  
 `MyNativeWindow`類別會建立新的視窗，內含<xref:System.Windows.Forms.CreateParams.ClassName%2A>設定為`BUTTON`。 這會建立 [Win32] 按鈕的視窗。 按鈕的大小與位置已設定，以及指定額外的視窗樣式。 類別會示範如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>攔截視窗訊息接收的方法。 雖然此範例會尋找 WM_ACTIVATEAPP 訊息，這可以取代真正的程式中建立的型別特定的視窗訊息。  
  
 此程式碼是摘錄自範例所示<xref:System.Windows.Forms.NativeWindow>類別概觀。 為了簡潔起見，不會顯示一些程式碼。 請參閱<xref:System.Windows.Forms.NativeWindow>針對整個程式碼清單。  
  
> [!NOTE]
>  某些控制項類型會將它們的視窗訊息傳送至視窗父代，而不是視窗。 Windows 平台 SDK，如需詳細資訊，請參閱。  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>覆寫這個方法，以追蹤的視窗控制代碼所做的變更。</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Exception" />，指定無法處理的執行緒例外狀況。</param>
        <summary>在衍生類別中覆寫時，管理無法處理的執行緒例外狀況。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，<xref:System.Windows.Forms.Application.OnThreadException%2A>處理執行緒例外狀況。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放與這個視窗相關的控制代碼。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會終結視窗控制代碼。 相反地，它會設定控制代碼的視窗程序至預設視窗程序。 它會設定<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性設為 0 並呼叫<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>以反映變更。  
  
 視窗會自動呼叫這個方法，如果收到指出 Windows 已終結的控制代碼的原生 Win32 控制訊息。  
  
   
  
## Examples  
 下列程式碼範例示範攔截視窗程序中的作業系統視窗訊息。 此範例會建立繼承自類別<xref:System.Windows.Forms.NativeWindow>為了達成此目的。  
  
 `MyNativeWindowListener`類別連結到傳入建構函式，在表單的視窗程序，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法會攔截`WM_ACTIVATEAPP`視窗訊息。 類別會示範如何使用<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>並<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法，以識別的視窗控制代碼<xref:System.Windows.Forms.NativeWindow>會使用。 控制代碼為根據的 assign<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。 當`WM_ACTIVATEAPP`接收視窗訊息時，此類別會呼叫`form1.ApplicationActivated`方法。  
  
 此程式碼是摘錄自範例所示<xref:System.Windows.Forms.NativeWindow>類別概觀。 為了簡潔起見，不會顯示一些程式碼。 請參閱<xref:System.Windows.Forms.NativeWindow>針對整個程式碼清單。  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <see cref="T:System.Windows.Forms.Message" />，與目前 Windows 訊息相關。</param>
        <summary>叫用與這個視窗相關的預設視窗程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 視窗訊息傳送至視窗的控制代碼時，會呼叫這個方法。  
  
   
  
## Examples  
 下列程式碼範例示範攔截視窗程序中的作業系統視窗訊息。 此範例會建立繼承自類別<xref:System.Windows.Forms.NativeWindow>為了達成此目的。  
  
 `MyNativeWindowListener`類別連結到傳入建構函式，在表單的視窗程序，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法，以攔截`WM_ACTIVATEAPP`視窗訊息。 類別會示範如何使用<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>並<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法，以識別的視窗控制代碼<xref:System.Windows.Forms.NativeWindow>會使用。 根據指派的控制代碼<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。 當`WM_ACTIVATEAPP`接收視窗訊息時，此類別會呼叫`form1.ApplicationActivated`方法。  
  
 此程式碼是摘錄自範例所示<xref:System.Windows.Forms.NativeWindow>類別概觀。 為了簡潔起見，不會顯示一些程式碼。 請參閱<xref:System.Windows.Forms.NativeWindow>針對整個程式碼清單。  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>覆寫這個方法，以實作特定的訊息處理。呼叫<c>基底。WndProc</c>未處理的訊息。</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>