<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1f08773771fb4a10a7de82ed774e9bbcb32dbf4e" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39979283" /></Metadata><TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="f136d-101">提供視窗控制代碼 (Window Handle) 和視窗程序 (Window Procedure) 的低階封裝。</span><span class="sxs-lookup"><span data-stu-id="f136d-101">Provides a low-level encapsulation of a window handle and a window procedure.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f136d-102">這個類別會自動管理視窗類別建立和註冊。</span><span class="sxs-lookup"><span data-stu-id="f136d-102">This class automatically manages window class creation and registration.</span></span>  
  
 <span data-ttu-id="f136d-103">與視窗控制代碼相關聯時，就無法進行記憶體回收回收的視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-103">A window is not eligible for garbage collection when it is associated with a window handle.</span></span> <span data-ttu-id="f136d-104">若要確保適當的記憶體回收，控制代碼必須是摧毀使用手動<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>或釋出使用<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>。</span><span class="sxs-lookup"><span data-stu-id="f136d-104">To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f136d-105"><xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>控制訊息處理時，會呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="f136d-105">The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed.</span></span> <span data-ttu-id="f136d-106">這表示在當您不需要以手動方式呼叫的情況下<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>，但良好的作法是，若要這樣做。</span><span class="sxs-lookup"><span data-stu-id="f136d-106">This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.</span></span>  
  
 <span data-ttu-id="f136d-107"><xref:System.Windows.Forms.NativeWindow>類別會提供下列屬性和方法來管理控制代碼： <xref:System.Windows.Forms.NativeWindow.Handle%2A>， <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>， <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>， <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>，和<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>。</span><span class="sxs-lookup"><span data-stu-id="f136d-107">The <xref:System.Windows.Forms.NativeWindow> class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f136d-108">下列程式碼範例示範攔截作業系統視窗訊息中的視窗程序，和建立視窗的特定作業系統的視窗類別名稱。</span><span class="sxs-lookup"><span data-stu-id="f136d-108">The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="f136d-109">此範例會建立兩個類別繼承自<xref:System.Windows.Forms.NativeWindow>，達成此目的。</span><span class="sxs-lookup"><span data-stu-id="f136d-109">The example creates two classes that inherit from <xref:System.Windows.Forms.NativeWindow> that accomplish this.</span></span>  
  
 <span data-ttu-id="f136d-110">`MyNativeWindowListener`類別連結到傳入建構函式，在表單的視窗程序，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法，以攔截`WM_ACTIVATEAPP`視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="f136d-110">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="f136d-111">類別會示範的使用方式<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>並<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法，以識別的視窗控制代碼<xref:System.Windows.Forms.NativeWindow>會使用。</span><span class="sxs-lookup"><span data-stu-id="f136d-111">The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="f136d-112">控制代碼為根據的 assign<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="f136d-112">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="f136d-113">當`WM_ACTIVATEAPP`接收視窗訊息時，此類別會呼叫`form1.ApplicationActivated`方法。</span><span class="sxs-lookup"><span data-stu-id="f136d-113">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="f136d-114">`MyNativeWindow`類別會建立新的視窗，內含<xref:System.Windows.Forms.CreateParams.ClassName%2A>設定為`BUTTON`。</span><span class="sxs-lookup"><span data-stu-id="f136d-114">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="f136d-115">類別會示範如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>攔截視窗訊息接收的方法。</span><span class="sxs-lookup"><span data-stu-id="f136d-115">The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span>  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="f136d-116">立即呼叫端呼叫 unmanaged 程式碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-116">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="f136d-117">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="f136d-117">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f136d-118">初始化 <see cref="T:System.Windows.Forms.NativeWindow" /> 類別的執行個體。</span><span class="sxs-lookup"><span data-stu-id="f136d-118">Initializes an instance of the <see cref="T:System.Windows.Forms.NativeWindow" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f136d-119">這是預設<xref:System.Windows.Forms.NativeWindow.%23ctor%2A>由編譯器提供的建構函式。</span><span class="sxs-lookup"><span data-stu-id="f136d-119">This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler.</span></span> <span data-ttu-id="f136d-120"><xref:System.Windows.Forms.NativeWindow>類別也有靜態建構函式會初始化應用程式的全網域的訊息處理常式和雜湊表。</span><span class="sxs-lookup"><span data-stu-id="f136d-120">The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="f136d-121">控制代碼將指派至這個視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-121">The handle to assign to this window.</span></span></param>
        <summary><span data-ttu-id="f136d-122">將控制代碼指派到這個視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-122">Assigns a handle to this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f136d-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> 攔截視窗訊息傳送至`handle`參數。</span><span class="sxs-lookup"><span data-stu-id="f136d-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter.</span></span> <span data-ttu-id="f136d-124">使用<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>重設為預設視窗程序的控制代碼的視窗程序。</span><span class="sxs-lookup"><span data-stu-id="f136d-124">Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.</span></span>  
  
 <span data-ttu-id="f136d-125"><xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>方法呼叫<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法來表示的值<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性已變更。</span><span class="sxs-lookup"><span data-stu-id="f136d-125">The <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f136d-126">若要將指派的控制代碼不能在不同的應用程式處理程序。</span><span class="sxs-lookup"><span data-stu-id="f136d-126">The handle to assign cannot be in a different application process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f136d-127">下列程式碼範例示範攔截視窗程序中的作業系統視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="f136d-127">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="f136d-128">此範例會建立繼承自類別<xref:System.Windows.Forms.NativeWindow>為了達成此目的。</span><span class="sxs-lookup"><span data-stu-id="f136d-128">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="f136d-129">`MyNativeWindowListener`類別連結到傳入建構函式，在表單的視窗程序，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法會攔截`WM_ACTIVATEAPP`視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="f136d-129">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="f136d-130">類別會示範如何使用<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>並<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法，以識別哪一個視窗處理<xref:System.Windows.Forms.NativeWindow>會使用。</span><span class="sxs-lookup"><span data-stu-id="f136d-130">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="f136d-131">根據指派的控制代碼<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="f136d-131">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="f136d-132">當`WM_ACTIVATEAPP`接收視窗訊息時，此類別會呼叫`form1.ApplicationActivated`方法。</span><span class="sxs-lookup"><span data-stu-id="f136d-132">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="f136d-133">此程式碼是摘錄自範例所示<xref:System.Windows.Forms.NativeWindow>類別概觀。</span><span class="sxs-lookup"><span data-stu-id="f136d-133">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="f136d-134">為了簡潔起見，不會顯示一些程式碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-134">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="f136d-135">請參閱<xref:System.Windows.Forms.NativeWindow>針對整個程式碼清單。</span><span class="sxs-lookup"><span data-stu-id="f136d-135">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><span data-ttu-id="f136d-136">這個視窗已有控制代碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-136">This window already has a handle.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="f136d-137">無法擷取相關原生視窗的視窗程序。</span><span class="sxs-lookup"><span data-stu-id="f136d-137">The windows procedure for the associated native window could not be retrieved.</span></span></exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp"><span data-ttu-id="f136d-138"><see cref="T:System.Windows.Forms.CreateParams" />，指定這個視窗的建立參數。</span><span class="sxs-lookup"><span data-stu-id="f136d-138">A <see cref="T:System.Windows.Forms.CreateParams" /> that specifies the creation parameters for this window.</span></span></param>
        <summary><span data-ttu-id="f136d-139">使用指定的建立參數建立視窗和它的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-139">Creates a window and its handle with the specified creation parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f136d-140">`cp`參數指定的值，傳遞至原生 Win32`CreateWindowEx`方法用來建立視窗和其控制代碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-140">The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle.</span></span>  
  
 <span data-ttu-id="f136d-141">當<xref:System.Windows.Forms.CreateParams.ClassName%2A>欄位不是`null`，繼承自指定類別的新建立的視窗控制代碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-141">When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class.</span></span> <span data-ttu-id="f136d-142">例如，如果<xref:System.Windows.Forms.CreateParams.ClassName%2A>設定為`BUTTON`，新建立的視窗以 Win32 為基礎`BUTTON`視窗類別。</span><span class="sxs-lookup"><span data-stu-id="f136d-142">For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class.</span></span> <span data-ttu-id="f136d-143"><xref:System.Windows.Forms.CreateParams.Param%2A>的屬性<xref:System.Windows.Forms.CreateParams.ClassName%2A>物件必須是`null`或參考的已宣告為結構的類別執行個體。</span><span class="sxs-lookup"><span data-stu-id="f136d-143">The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.</span></span>  
  
 <span data-ttu-id="f136d-144">此程式碼是摘錄自範例所示<xref:System.Windows.Forms.NativeWindow>類別概觀。</span><span class="sxs-lookup"><span data-stu-id="f136d-144">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="f136d-145">為了簡潔起見，不會顯示一些程式碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-145">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="f136d-146">請參閱<xref:System.Windows.Forms.NativeWindow>針對整個程式碼清單。</span><span class="sxs-lookup"><span data-stu-id="f136d-146">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f136d-147">提供的類別名稱被向作業系統註冊。</span><span class="sxs-lookup"><span data-stu-id="f136d-147">The class name provided is registered with the operating system.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f136d-148">下列程式碼範例將示範如何建立使用特定作業系統視窗類別名稱的視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-148">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="f136d-149">此範例會建立繼承自類別<xref:System.Windows.Forms.NativeWindow>為了達成此目的。</span><span class="sxs-lookup"><span data-stu-id="f136d-149">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="f136d-150">`MyNativeWindow`類別會建立新的視窗，內含<xref:System.Windows.Forms.CreateParams.ClassName%2A>設定為`BUTTON`。</span><span class="sxs-lookup"><span data-stu-id="f136d-150">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="f136d-151">這會建立 [Win32] 按鈕的視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-151">This creates a Win32 button window.</span></span> <span data-ttu-id="f136d-152">按鈕的大小與位置已設定，以及指定額外的視窗樣式。</span><span class="sxs-lookup"><span data-stu-id="f136d-152">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="f136d-153">類別會示範如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>攔截視窗訊息接收的方法。</span><span class="sxs-lookup"><span data-stu-id="f136d-153">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="f136d-154">雖然此範例會尋找 WM_ACTIVATEAPP 訊息，這可以取代真正的程式中建立的型別特定的視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="f136d-154">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f136d-155">某些控制項類型會將它們的視窗訊息傳送至視窗父代，而不是視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-155">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="f136d-156">Windows 平台 SDK，如需詳細資訊，請參閱。</span><span class="sxs-lookup"><span data-stu-id="f136d-156">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="f136d-157">嘗試建立原生視窗時，作業系統耗盡資源。</span><span class="sxs-lookup"><span data-stu-id="f136d-157">The operating system ran out of resources when trying to create the native window.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="f136d-158">原生 Win32 API 無法建立指定的視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-158">The native Win32 API could not create the specified window.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f136d-159">已指派目前原生視窗的控制代碼。換言之，<see cref="P:System.Windows.Forms.NativeWindow.Handle" /> 屬性不等於 <see cref="F:System.IntPtr.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="f136d-159">The handle of the current native window is already assigned; in explanation, the <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> property is not equal to <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="f136d-160">若要建立最上層視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-160">to create a top-level window.</span></span> <span data-ttu-id="f136d-161">如果視窗樣式不是子系，或視窗沒有父代，只要求此權限。</span><span class="sxs-lookup"><span data-stu-id="f136d-161">This permission is only demanded if the window style is not a child or if the window does not have a parent.</span></span> <span data-ttu-id="f136d-162">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span><span class="sxs-lookup"><span data-stu-id="f136d-162">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span></span></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="f136d-163">目前正在處理的訊息。</span><span class="sxs-lookup"><span data-stu-id="f136d-163">The message that is currently being processed.</span></span></param>
        <summary><span data-ttu-id="f136d-164">叫用與這個視窗相關的預設視窗程序。</span><span class="sxs-lookup"><span data-stu-id="f136d-164">Invokes the default window procedure associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f136d-165">一般而言，您只呼叫<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>時您會攔截視窗訊息，而且想要預設視窗程序，以處理訊息的方法。</span><span class="sxs-lookup"><span data-stu-id="f136d-165">Typically, you only call the <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> method when you are intercepting window messages and would like the default window procedure to handle the message.</span></span> <span data-ttu-id="f136d-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> 您不應該將視窗訊息傳送至視窗; 呼叫呼叫 Win32`SendMessage`函式。</span><span class="sxs-lookup"><span data-stu-id="f136d-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.</span></span>  
  
 <span data-ttu-id="f136d-167">它會呼叫錯誤<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>當<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性為 0。</span><span class="sxs-lookup"><span data-stu-id="f136d-167">It is an error to call <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="f136d-168"><para>覆寫這個方法在衍生類別來實作通用的自訂訊息處理特定的原生視窗或.NET Windows Forms 中<see cref="T:System.Windows.Forms.Control" />。之前、 之後或而不呼叫此方法，可執行標準訊息處理的基底類別實作，可以執行自訂處理。相較之下，新增自訂的訊息處理的應用程式可透過下列方式<see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />方法的<see cref="T:System.Windows.Forms.Application" />類別。</para></span><span class="sxs-lookup"><span data-stu-id="f136d-168"><para>Override this method in a derived class to implement generalized custom message handling for a specific native window or .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />. Custom processing can be performed before, after, or instead of a call to the base class implementation of this method, which performs standard message processing.  In contrast, adding customized message handling for an application can be accomplished through the <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> method of the <see cref="T:System.Windows.Forms.Application" /> class.</para></span></span></block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f136d-169">終結視窗和它的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-169">Destroys the window and its handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f136d-170">這個方法會終結視窗相關聯<xref:System.Windows.Forms.NativeWindow.Handle%2A>，設定<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性設為 0，並呼叫<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法，以反映變更。</span><span class="sxs-lookup"><span data-stu-id="f136d-170">This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change.</span></span> <span data-ttu-id="f136d-171">一般而言，您只呼叫<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>當您完成使用原生的視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-171">Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f136d-172"><xref:System.Windows.Forms.NativeWindow>類別會自動將終結相關聯的視窗並釋放其資源來回應 WM_DESTROY 訊息。</span><span class="sxs-lookup"><span data-stu-id="f136d-172">The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f136d-173">釋放與這個視窗關聯的資源。</span><span class="sxs-lookup"><span data-stu-id="f136d-173">Releases the resources associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f136d-174"><xref:System.Windows.Forms.NativeWindow.Finalize%2A>方法會移除目前與相關聯的衍生的 Win32 類別<xref:System.Windows.Forms.NativeWindow>執行個體，釋放控制代碼，並將 WM_CLOSE 訊息張貼至相關聯的視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-174">The <xref:System.Windows.Forms.NativeWindow.Finalize%2A> method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="f136d-175">視窗的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-175">A handle to a window.</span></span></param>
        <summary><span data-ttu-id="f136d-176">擷取與指定控制代碼關聯的視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-176">Retrieves the window associated with the specified handle.</span></span></summary>
        <returns><span data-ttu-id="f136d-177">與指定控制代碼相關的 <see cref="T:System.Windows.Forms.NativeWindow" />。</span><span class="sxs-lookup"><span data-stu-id="f136d-177">The <see cref="T:System.Windows.Forms.NativeWindow" /> associated with the specified handle.</span></span> <span data-ttu-id="f136d-178">當控制代碼沒有相關的視窗時，這個方法會傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f136d-178">This method returns <see langword="null" /> when the handle does not have an associated window.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f136d-179">如果您接收的控制代碼的另一種方法時，使用這個方法來擷取與控制代碼關聯的視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-179">If you receive a handle from another method, use this method to retrieve the window associated with the handle.</span></span> <span data-ttu-id="f136d-180">控制代碼必須已經由另一個擁有<xref:System.Windows.Forms.NativeWindow>在目前處理序，否則`null`會傳回。</span><span class="sxs-lookup"><span data-stu-id="f136d-180">The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f136d-181">取得這個視窗的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-181">Gets the handle for this window.</span></span></summary>
        <value><span data-ttu-id="f136d-182">如果成功的話，則為 <see cref="T:System.IntPtr" />，表示相關原生 (Native) Win32 視窗的控制代碼，但如果沒有任何控制代碼與視窗相關聯，則為 0。</span><span class="sxs-lookup"><span data-stu-id="f136d-182">If successful, an <see cref="T:System.IntPtr" /> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f136d-183">呼叫 Windows API 方法需要針對視窗或控制項的控制代碼時，請使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="f136d-183">Use this method when calling Windows API methods that require a handle for a window or control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f136d-184">下列程式碼範例將示範如何建立使用特定作業系統視窗類別名稱的視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-184">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="f136d-185">此範例會建立繼承自類別<xref:System.Windows.Forms.NativeWindow>為了達成此目的。</span><span class="sxs-lookup"><span data-stu-id="f136d-185">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="f136d-186">此範例也示範如何覆寫<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法時收到通知<xref:System.Windows.Forms.NativeWindow.Handle%2A>變更。</span><span class="sxs-lookup"><span data-stu-id="f136d-186">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="f136d-187">`MyNativeWindow`類別會建立新的視窗，內含<xref:System.Windows.Forms.CreateParams.ClassName%2A>設 按鈕。</span><span class="sxs-lookup"><span data-stu-id="f136d-187">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON.</span></span> <span data-ttu-id="f136d-188">這會建立 [Win32] 按鈕的視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-188">This creates a Win32 button window.</span></span> <span data-ttu-id="f136d-189">按鈕的大小與位置已設定，以及指定額外的視窗樣式。</span><span class="sxs-lookup"><span data-stu-id="f136d-189">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="f136d-190">類別會示範如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>攔截視窗訊息接收的方法。</span><span class="sxs-lookup"><span data-stu-id="f136d-190">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="f136d-191">雖然此範例會尋找 WM_ACTIVATEAPP 訊息，這可取代為實際的程式中建立的型別特定的視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="f136d-191">Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f136d-192">某些控制項類型會將它們的視窗訊息傳送至視窗父代，而不是視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-192">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="f136d-193">Windows 平台 SDK，如需詳細資訊，請參閱。</span><span class="sxs-lookup"><span data-stu-id="f136d-193">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f136d-194">指定告知方法，當視窗的控制代碼變更時便會呼叫該方法。</span><span class="sxs-lookup"><span data-stu-id="f136d-194">Specifies a notification method that is called when the handle for a window is changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f136d-195">這個方法會叫用時的值<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性已變更。</span><span class="sxs-lookup"><span data-stu-id="f136d-195">This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f136d-196">下列程式碼範例將示範如何建立使用特定作業系統視窗類別名稱的視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-196">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="f136d-197">此範例會建立繼承自類別<xref:System.Windows.Forms.NativeWindow>為了達成此目的。</span><span class="sxs-lookup"><span data-stu-id="f136d-197">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="f136d-198">此範例也示範如何覆寫<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法時收到通知<xref:System.Windows.Forms.NativeWindow.Handle%2A>變更。</span><span class="sxs-lookup"><span data-stu-id="f136d-198">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="f136d-199">`MyNativeWindow`類別會建立新的視窗，內含<xref:System.Windows.Forms.CreateParams.ClassName%2A>設定為`BUTTON`。</span><span class="sxs-lookup"><span data-stu-id="f136d-199">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="f136d-200">這會建立 [Win32] 按鈕的視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-200">This creates a Win32 button window.</span></span> <span data-ttu-id="f136d-201">按鈕的大小與位置已設定，以及指定額外的視窗樣式。</span><span class="sxs-lookup"><span data-stu-id="f136d-201">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="f136d-202">類別會示範如何使用<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>方法，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>攔截視窗訊息接收的方法。</span><span class="sxs-lookup"><span data-stu-id="f136d-202">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="f136d-203">雖然此範例會尋找 WM_ACTIVATEAPP 訊息，這可以取代真正的程式中建立的型別特定的視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="f136d-203">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
 <span data-ttu-id="f136d-204">此程式碼是摘錄自範例所示<xref:System.Windows.Forms.NativeWindow>類別概觀。</span><span class="sxs-lookup"><span data-stu-id="f136d-204">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="f136d-205">為了簡潔起見，不會顯示一些程式碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-205">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="f136d-206">請參閱<xref:System.Windows.Forms.NativeWindow>針對整個程式碼清單。</span><span class="sxs-lookup"><span data-stu-id="f136d-206">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f136d-207">某些控制項類型會將它們的視窗訊息傳送至視窗父代，而不是視窗。</span><span class="sxs-lookup"><span data-stu-id="f136d-207">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="f136d-208">Windows 平台 SDK，如需詳細資訊，請參閱。</span><span class="sxs-lookup"><span data-stu-id="f136d-208">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="f136d-209"><para>覆寫這個方法，以追蹤的視窗控制代碼所做的變更。</para></span><span class="sxs-lookup"><span data-stu-id="f136d-209"><para>Override this method to track changes that are made to the window handle.</para></span></span></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="f136d-210"><see cref="T:System.Exception" />，指定無法處理的執行緒例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f136d-210">An <see cref="T:System.Exception" /> that specifies the unhandled thread exception.</span></span></param>
        <summary><span data-ttu-id="f136d-211">在衍生類別中覆寫時，管理無法處理的執行緒例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f136d-211">When overridden in a derived class, manages an unhandled thread exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f136d-212">一般而言，<xref:System.Windows.Forms.Application.OnThreadException%2A>處理執行緒例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f136d-212">Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f136d-213">釋放與這個視窗相關的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-213">Releases the handle associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f136d-214">這個方法不會終結視窗控制代碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-214">This method does not destroy the window handle.</span></span> <span data-ttu-id="f136d-215">相反地，它會設定控制代碼的視窗程序至預設視窗程序。</span><span class="sxs-lookup"><span data-stu-id="f136d-215">Instead, it sets the handle's window procedure to the default window procedure.</span></span> <span data-ttu-id="f136d-216">它會設定<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性設為 0 並呼叫<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>以反映變更。</span><span class="sxs-lookup"><span data-stu-id="f136d-216">It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.</span></span>  
  
 <span data-ttu-id="f136d-217">視窗會自動呼叫這個方法，如果收到指出 Windows 已終結的控制代碼的原生 Win32 控制訊息。</span><span class="sxs-lookup"><span data-stu-id="f136d-217">A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f136d-218">下列程式碼範例示範攔截視窗程序中的作業系統視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="f136d-218">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="f136d-219">此範例會建立繼承自類別<xref:System.Windows.Forms.NativeWindow>為了達成此目的。</span><span class="sxs-lookup"><span data-stu-id="f136d-219">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="f136d-220">`MyNativeWindowListener`類別連結到傳入建構函式，在表單的視窗程序，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法會攔截`WM_ACTIVATEAPP`視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="f136d-220">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="f136d-221">類別會示範如何使用<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>並<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法，以識別的視窗控制代碼<xref:System.Windows.Forms.NativeWindow>會使用。</span><span class="sxs-lookup"><span data-stu-id="f136d-221">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="f136d-222">控制代碼為根據的 assign<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="f136d-222">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="f136d-223">當`WM_ACTIVATEAPP`接收視窗訊息時，此類別會呼叫`form1.ApplicationActivated`方法。</span><span class="sxs-lookup"><span data-stu-id="f136d-223">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="f136d-224">此程式碼是摘錄自範例所示<xref:System.Windows.Forms.NativeWindow>類別概觀。</span><span class="sxs-lookup"><span data-stu-id="f136d-224">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="f136d-225">為了簡潔起見，不會顯示一些程式碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-225">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="f136d-226">請參閱<xref:System.Windows.Forms.NativeWindow>針對整個程式碼清單。</span><span class="sxs-lookup"><span data-stu-id="f136d-226">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="f136d-227"><see cref="T:System.Windows.Forms.Message" />，與目前 Windows 訊息相關。</span><span class="sxs-lookup"><span data-stu-id="f136d-227">A <see cref="T:System.Windows.Forms.Message" /> that is associated with the current Windows message.</span></span></param>
        <summary><span data-ttu-id="f136d-228">叫用與這個視窗相關的預設視窗程序。</span><span class="sxs-lookup"><span data-stu-id="f136d-228">Invokes the default window procedure associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f136d-229">視窗訊息傳送至視窗的控制代碼時，會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="f136d-229">This method is called when a window message is sent to the handle of the window.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f136d-230">下列程式碼範例示範攔截視窗程序中的作業系統視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="f136d-230">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="f136d-231">此範例會建立繼承自類別<xref:System.Windows.Forms.NativeWindow>為了達成此目的。</span><span class="sxs-lookup"><span data-stu-id="f136d-231">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="f136d-232">`MyNativeWindowListener`類別連結到傳入建構函式，在表單的視窗程序，並覆寫<xref:System.Windows.Forms.NativeWindow.WndProc%2A>方法，以攔截`WM_ACTIVATEAPP`視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="f136d-232">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="f136d-233">類別會示範如何使用<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>並<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>方法，以識別的視窗控制代碼<xref:System.Windows.Forms.NativeWindow>會使用。</span><span class="sxs-lookup"><span data-stu-id="f136d-233">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="f136d-234">根據指派的控制代碼<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="f136d-234">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="f136d-235">當`WM_ACTIVATEAPP`接收視窗訊息時，此類別會呼叫`form1.ApplicationActivated`方法。</span><span class="sxs-lookup"><span data-stu-id="f136d-235">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="f136d-236">此程式碼是摘錄自範例所示<xref:System.Windows.Forms.NativeWindow>類別概觀。</span><span class="sxs-lookup"><span data-stu-id="f136d-236">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="f136d-237">為了簡潔起見，不會顯示一些程式碼。</span><span class="sxs-lookup"><span data-stu-id="f136d-237">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="f136d-238">請參閱<xref:System.Windows.Forms.NativeWindow>針對整個程式碼清單。</span><span class="sxs-lookup"><span data-stu-id="f136d-238">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="f136d-239"><para>覆寫這個方法，以實作特定的訊息處理。呼叫<c>基底。WndProc</c>未處理的訊息。</para></span><span class="sxs-lookup"><span data-stu-id="f136d-239"><para>Override this method to implement specific message processing. Call <c>base.WndProc</c> for unhandled messages.</para></span></span></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>