<Type Name="FileDialog" FullName="System.Windows.Forms.FileDialog">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9c11866522d5b374905429260e235312e2f904b1" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37511976" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class FileDialog : System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit FileDialog extends System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.FileDialog" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FileDialog&#xA;Inherits CommonDialog" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileDialog abstract : System::Windows::Forms::CommonDialog" />
  <TypeSignature Language="F#" Value="type FileDialog = class&#xA;    inherit CommonDialog" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.CommonDialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("FileOk")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("FileName")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>顯示對話方塊，讓使用者可以從中選取檔案。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog> 是抽象類別，其中包含的一般行為<xref:System.Windows.Forms.OpenFileDialog>和<xref:System.Windows.Forms.SaveFileDialog>類別。 它不是直接使用，但包含這兩個類別的一般行為。 您無法建立的執行個體<xref:System.Windows.Forms.FileDialog>。 雖然此類別已宣告為公用，您無法繼承自它，因為它包含內部的抽象方法。 若要建立對話方塊，以選取或儲存檔案，請使用<xref:System.Windows.Forms.OpenFileDialog>或<xref:System.Windows.Forms.SaveFileDialog>。  
  
 <xref:System.Windows.Forms.FileDialog> 為強制回應對話方塊，;因此，當顯示時，它會封鎖應用程式的其餘部分之前使用者已選擇的檔案。 當對話方塊會顯示強制回應視窗，沒有輸入 （鍵盤或滑鼠按一下） 在對話方塊中的物件時，可能除外。 程式必須隱藏或關閉 [] 對話方塊中 （通常是在某些使用者動作的回應） 之前呼叫程式的輸入可能會發生。  
  
> [!CAUTION]
>  當您使用衍生自類別<xref:System.Windows.Forms.FileDialog>，這類<xref:System.Windows.Forms.OpenFileDialog>和<xref:System.Windows.Forms.SaveFileDialog>，避免使用含有絕對路徑的字串常值。 相反地，動態取得使用一或多個下列表格中所述的技巧的路徑。  
  
 如果您想要讓使用者選取的資料夾，而不是檔案，請使用<xref:System.Windows.Forms.FolderBrowserDialog>。  
  
 類型的應用程式、 應用程式相關聯的資料儲存方式，及存取檔案系統的原因而定，有許多可能的方法，您可以在其中建立的目錄路徑。 下表會顯示動態建立路徑的技術。  
  
|路徑或程式類別目錄|類別和成員使用|  
|------------------------------|------------------------------|  
|標準的 Windows 路徑，例如 Program Files、 MyDocuments、 桌面等等|<xref:System.Environment?displayProperty=nameWithType>類別是最完整的來源，這些，透過它的靜態方法，例如<xref:System.Environment.SystemDirectory%2A>，或透過<xref:System.Environment.GetFolderPath%2A>方法，使用其中一種<xref:System.Environment.SpecialFolder>列舉值。|  
|目前的應用程式相關的路徑|<xref:System.Windows.Forms.Application>類別具有靜態成員，以取得特定的路徑，例如<xref:System.Windows.Forms.Application.StartupPath%2A>， <xref:System.Windows.Forms.Application.ExecutablePath%2A>， <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>，和<xref:System.Windows.Forms.Application.CommonAppDataPath%2A>。<br /><br /> <xref:System.IO.Path.GetTempPath%2A>方法的<xref:System.IO.Path?displayProperty=nameWithType>傳回暫存資料夾的路徑。<br /><br /> <xref:System.IO.Directory.GetCurrentDirectory%2A>方法的<xref:System.IO.Directory?displayProperty=nameWithType>類別會傳回應用程式的目前執行的目錄。<br /><br /> <xref:System.IO.DriveInfo.RootDirectory%2A>屬性<xref:System.IO.DriveInfo>類別代表指定磁碟機的根目錄。|  
|路徑儲存為應用程式設定|存取對應的應用程式設定屬性的包裝函式類別衍生自<xref:System.Configuration.ApplicationSettingsBase>。 如需詳細資訊，請參閱 <<c0> [ 適用於 Windows Form 應用程式設定](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md)。|  
|登錄儲存體|某些應用程式儲存在登錄中的目錄資訊。 <xref:System.Windows.Forms.Application>類別具有<xref:System.Windows.Forms.Application.CommonAppDataPath%2A>並<xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>解析的屬性<xref:Microsoft.Win32.RegistryKey>值。|  
|ClickOnce 應用程式|ClickOnce 應用程式，使用<xref:System.Windows.Forms.Application>這類類別成員<xref:System.Windows.Forms.Application.UserAppDataPath%2A>，這會傳回指標的 ClickOnce 資料目錄。 如需詳細資訊，請參閱 <<c0> [ 存取本機和 ClickOnce 應用程式中的遠端資料](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)。|  
|國際應用程式|為國際化應用程式，擷取的相對路徑部分字串資源，在您的應用程式中使用<xref:System.Resources.ResourceReader?displayProperty=nameWithType>類別。 如需有關全球化和當地語系化的詳細資訊，請參閱主題[全球化和當地語系化](~/docs/standard/globalization-localization/index.md)。|  
  
 請注意，您可以使用一或多個上述的技巧，建置完整的路徑。 比方說，<xref:System.Environment.GetFolderPath%2A>方法可能會用來取得 MyDocuments 資料夾路徑，則應用程式設定可用來新增相對子目錄部分。  
  
 <xref:System.IO.Path?displayProperty=nameWithType>類別包含靜態成員，以協助操作絕對和相對路徑的字串，而<xref:System.IO.File?displayProperty=nameWithType>和<xref:System.IO.Directory?displayProperty=nameWithType>類別有實際操作檔案和目錄，分別的靜態成員。  
  
> [!IMPORTANT]
>  如果您的應用程式的使用者變更中的資料夾<xref:System.Windows.Forms.FileDialog>，則在指定的位置會設定您的應用程式的目前工作目錄<xref:System.Windows.Forms.FileDialog>。 若要避免這個問題，將<xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A>屬性設`true`。  
  
   
  
## Examples  
 下列程式碼範例會使用<xref:System.Windows.Forms.OpenFileDialog>實作<xref:System.Windows.Forms.FileDialog>並說明如何建立、 設定屬性，以及顯示的對話方塊。 此範例會使用<xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>方法來顯示對話方塊，並傳回<xref:System.Windows.Forms.DialogResult>。 這個範例需要表單<xref:System.Windows.Forms.Button>置於其上和<xref:System.IO>加入其中的命名空間。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.CommonDialog" />
    <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
    <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
    <altmember cref="T:System.Windows.Forms.FolderBrowserDialog" />
    <altmember cref="T:System.IO.Path" />
    <altmember cref="T:System.IO.File" />
    <altmember cref="T:System.IO.Directory" />
    <altmember cref="T:System.Environment" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:Microsoft.Win32.Registry" />
    <altmember cref="T:System.Resources.ResourceReader" />
  </Docs>
  <Members>
    <Member MemberName="AddExtension">
      <MemberSignature Language="C#" Value="public bool AddExtension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AddExtension" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AddExtension" />
      <MemberSignature Language="VB.NET" Value="Public Property AddExtension As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AddExtension { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AddExtension : bool with get, set" Usage="System.Windows.Forms.FileDialog.AddExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出對話方塊是否在使用者遺漏副檔名時，自動加入檔案的副檔名。</summary>
        <value>如果對話方塊在使用者遺漏副檔名時會自動加入檔案的副檔名，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 擴充功能新增至檔案名稱取決於目前所選的檔案篩選器和值<xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>屬性。  
  
 如果<xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>屬性是`true`，對話方塊中新增第一個延伸模組從目前符合現有檔案的檔案篩選條件。 如果沒有檔案符合目前的檔案篩選器，對話方塊中加入中指定之副檔名<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>屬性。  
  
 如果<xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>屬性是`false`，對話方塊中將從目前的檔案篩選器加入的第一個有效的檔案名稱副檔名。 如果目前的檔案篩選器不包含任何有效的檔案名稱副檔名，對話方塊中將加入在指定的延伸模組<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>屬性。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">新增擴充功能，如果使用者也可以省略它。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="AutoUpgradeEnabled">
      <MemberSignature Language="C#" Value="public bool AutoUpgradeEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoUpgradeEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoUpgradeEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoUpgradeEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoUpgradeEnabled : bool with get, set" Usage="System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出此 <see cref="T:System.Windows.Forms.FileDialog" /> 執行個體在 [!INCLUDE[wiprlhext] (~/includes/wiprlhext-md.md)] 上執行時是否應該自動升級外觀和行為。</summary>
        <value>
          <see langword="true" /> 如果這個<see cref="T:System.Windows.Forms.FileDialog" />執行個體應該會自動升級外觀和行為上執行時 [！INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)];否則， <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個屬性是`false`，則<xref:System.Windows.Forms.FileDialog>類別會有[!INCLUDE[winxp](~/includes/winxp-md.md)]-樣式外觀和行為上[!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]。  
  
 在  [!INCLUDE[winxp](~/includes/winxp-md.md)]，這個屬性沒有任何作用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckFileExists">
      <MemberSignature Language="C#" Value="public virtual bool CheckFileExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckFileExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CheckFileExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CheckFileExists { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckFileExists : bool with get, set" Usage="System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出如果使用者指定不存在的檔名，對話方塊是否顯示警告訊息。</summary>
        <value>如果當使用者指定了不存在的副檔名時要顯示警告對話方塊，屬性值為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設值是`true`繼承<xref:System.Windows.Forms.OpenFileDialog>並`false`繼承<xref:System.Windows.Forms.SaveFileDialog>。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要顯示警告，如果檔案已經存在。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      </Docs>
    </Member>
    <Member MemberName="CheckPathExists">
      <MemberSignature Language="C#" Value="public bool CheckPathExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckPathExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckPathExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckPathExists { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckPathExists : bool with get, set" Usage="System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出如果使用者指定不存在的路徑，對話方塊是否顯示警告訊息。</summary>
        <value>如果當使用者指定了不存在的路徑時要顯示警告對話方塊，屬性值為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="true" />。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要顯示警告，如果使用者指定已經存在的路徑。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      </Docs>
    </Member>
    <Member MemberName="CustomPlaces">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomPlaces As FileDialogCustomPlacesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FileDialogCustomPlacesCollection ^ CustomPlaces { System::Windows::Forms::FileDialogCustomPlacesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomPlaces : System.Windows.Forms.FileDialogCustomPlacesCollection" Usage="System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FileDialogCustomPlacesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得此 <see cref="T:System.Windows.Forms.FileDialog" /> 執行個體的自訂位置集合。</summary>
        <value>此 <see cref="T:System.Windows.Forms.FileDialog" /> 執行個體的自訂位置集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在  [!INCLUDE[winxp](~/includes/winxp-md.md)]，這個屬性沒有任何作用。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.FileDialog.CustomPlaces%2A>集合。 若要執行此範例中，將下列程式碼貼到 Windows Form 並呼叫`InitializeDialogAndButton`從表單的建構函式或<xref:System.Windows.Forms.Form.Load>事件處理方法。  
  
 [!code-csharp[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultExt">
      <MemberSignature Language="C#" Value="public string DefaultExt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultExt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultExt As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultExt { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultExt : string with get, set" Usage="System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定預設的副檔名。</summary>
        <value>預設的副檔名。 傳回的字串不包含句號。 預設值為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您的應用程式的使用者指定的檔案名稱不含副檔名，<xref:System.Windows.Forms.FileDialog>附加至檔案名稱的擴充功能。 取決於所使用的延伸模組<xref:System.Windows.Forms.FileDialog.Filter%2A>和<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>屬性。 如果在選取篩選<xref:System.Windows.Forms.FileDialog>篩選指定的擴充功能，然後使用該擴充功能。 如果選取的篩選條件會使用萬用字元來取代擴充功能，則在指定的延伸<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>屬性使用。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType>與資料流的方法。 它也會示範使用<xref:System.Windows.Forms.FileDialog.FileName%2A>， <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>， <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>，和<xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType>成員。  
  
 這是完整的範例，準備好要執行時將它複製到您的專案。  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DereferenceLinks">
      <MemberSignature Language="C#" Value="public bool DereferenceLinks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DereferenceLinks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberSignature Language="VB.NET" Value="Public Property DereferenceLinks As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DereferenceLinks { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DereferenceLinks : bool with get, set" Usage="System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出對話方塊是傳回捷徑所參照的檔案位置，還是傳回捷徑 (.lnk) 的位置。</summary>
        <value>如果對話方塊傳回捷徑所參照的檔案位置，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="true" />。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要設定的屬性。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="EventFileOk">
      <MemberSignature Language="C#" Value="protected static readonly object EventFileOk;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly object EventFileOk" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly EventFileOk As Object " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly System::Object ^ EventFileOk;" />
      <MemberSignature Language="F#" Value=" staticval mutable EventFileOk : obj" Usage="System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>擁有 <see cref="E:System.Windows.Forms.FileDialog.FileOk" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileName" />
      <MemberSignature Language="VB.NET" Value="Public Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string with get, set" Usage="System.Windows.Forms.FileDialog.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定含有檔案對話方塊中所選取檔名的字串。</summary>
        <value>檔案對話方塊中所選取的檔名。 預設值為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 檔案名稱包含的檔案路徑和副檔名。 如果沒有選取任何檔案，這個方法會傳回空字串 ("")。  
  
 使用來自<xref:System.Windows.Forms.SaveFileDialog>類別，此屬性代表儲存; 從檔案<xref:System.Windows.Forms.OpenFileDialog>類別，它代表開啟檔案。  
  
 這個屬性只能是檔案的一個選取名稱。 如果您想要傳回陣列，包含所有選取的檔案，在多個選取項目對話方塊中，使用名稱<xref:System.Windows.Forms.FileDialog.FileNames%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType>與資料流的方法。 它也會示範使用<xref:System.Windows.Forms.FileDialog.FileName%2A>， <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>， <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>，和<xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType>成員。  
  
 這是完整的範例，準備好要執行時將它複製到您的專案。  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">取得或設定檔案名稱。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileNames" />
        <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
        <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
      </Docs>
    </Member>
    <Member MemberName="FileNames">
      <MemberSignature Language="C#" Value="public string[] FileNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] FileNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ FileNames { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileNames : string[]" Usage="System.Windows.Forms.FileDialog.FileNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得對話方塊中所有選取檔案的檔名。</summary>
        <value>
          <see cref="T:System.String" /> 型別的陣列，含有對話方塊中所有選取檔案的檔名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個檔案名稱包含的檔案路徑和副檔名。 如果沒有選取任何檔案，則這個方法會傳回空陣列。  
  
   
  
## Examples  
 下列程式碼範例可讓使用者選取的映像數目，以及它們顯示在<xref:System.Windows.Forms.PictureBox>表單上的控制項。 它示範如何初始化<xref:System.Windows.Forms.OpenFileDialog>，將<xref:System.Windows.Forms.FileDialog.Title%2A>並<xref:System.Windows.Forms.FileDialog.Filter%2A>屬性，以及讓使用者選取多個檔案，藉由設定<xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A>屬性設為 true。 此程式碼範例假設您的表單已有<xref:System.Windows.Forms.OpenFileDialog>控制項，名為`openFileDialog1`，則<xref:System.Windows.Forms.Button>名為`SelectFileButton`，和<xref:System.Windows.Forms.FlowLayoutPanel>名為`flowLayoutPanel1`。  
  
 [!code-csharp[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要取得檔案名稱。 關聯的列舉型別：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" />。</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileName" />
      </Docs>
    </Member>
    <Member MemberName="FileOk">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler FileOk;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler FileOk" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.FileDialog.FileOk" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FileOk As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ FileOk;" />
      <MemberSignature Language="F#" Value="member this.FileOk : System.ComponentModel.CancelEventHandler " Usage="member this.FileOk : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者按一下 [檔案] 對話方塊上的 **[開啟]** 或 **[儲存]** 按鈕時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需處理事件的資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.FileDialog.FileNames%2A>屬性，處理<xref:System.Windows.Forms.FileDialog.FileOk>事件，並使用<xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType>方法。 此範例執行時，使用者可以選取圖形檔從<xref:System.Windows.Forms.OpenFileDialog>物件。 選取的檔案會顯示在表單中。 <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType>方法會強制重新繪製的每個圖形檔案開啟表單。 若要在表單，其中包含執行此範例中貼上下列程式碼<xref:System.Windows.Forms.PictureBox>名為`PictureBox1`，則<xref:System.Windows.Forms.OpenFileDialog>名為`OpenFileDialog1`，和<xref:System.Windows.Forms.Button>名為`fileButton`。 呼叫`InitializePictureBox`並`InitializeOpenFileDialog`從表單的建構函式的方法或`Load`方法。 執行範例時，請按一下按鈕顯示的對話方塊。  
  
 [!code-cpp[System.Windows.Forms.FileDialog#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#1)]
 [!code-csharp[System.Windows.Forms.FileDialog#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialog#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Filter : string with get, set" Usage="System.Windows.Forms.FileDialog.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前的檔名篩選字串，以決定出現在對話方塊中 [另存檔案類型] 或 [檔案類型] 方塊的選項。</summary>
        <value>在對話方塊中可以使用檔案篩選選項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 針對每個篩選選項，篩選條件字串會包含描述的篩選，後面接著分隔號 (&#124;) 與篩選模式。 不同的篩選選項的字串是以分隔號分隔。  
  
 篩選字串的範例如下：  
  
 `Text files (*.txt)|*.txt|All files (*.*)|*.*`  
  
 您可以新增至篩選的數個篩選條件模式的檔案類型使用分號分隔，例如：  
  
 `Image Files(*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|All files (*.*)|*.*`  
  
 使用<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>屬性來設定的篩選選項對使用者顯示第一次。  
  
   
  
## Examples  
 下列程式碼範例會使用<xref:System.Windows.Forms.OpenFileDialog>實作<xref:System.Windows.Forms.FileDialog>並說明如何建立、 設定屬性，以及顯示的對話方塊。 此範例會使用<xref:System.Windows.Forms.FileDialog.Filter%2A>和<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>屬性來為使用者提供的篩選清單。 這個範例需要表單<xref:System.Windows.Forms.Button>置於其上和<xref:System.IO>加入其中的命名空間。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Filter" /> 格式是無效的。</exception>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="FilterIndex">
      <MemberSignature Language="C#" Value="public int FilterIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FilterIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FilterIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.FilterIndex : int with get, set" Usage="System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定檔案對話方塊中目前所選取之篩選條件的索引。</summary>
        <value>含有檔案對話方塊中目前所選取篩選條件之索引的值。 預設值為 1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>屬性來設定的篩選選項對使用者顯示第一次。 您也可以使用的值<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>之後顯示執行特殊的檔案作業，視選擇的篩選條件的 [檔案] 對話方塊。  
  
> [!NOTE]
>  第一個篩選項目的索引值為 1。  
  
   
  
## Examples  
 下列程式碼範例會使用<xref:System.Windows.Forms.OpenFileDialog>實作<xref:System.Windows.Forms.FileDialog>並說明如何建立、 設定屬性，以及顯示的對話方塊。 此範例會使用<xref:System.Windows.Forms.FileDialog.Filter%2A>和<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>屬性來為使用者提供的篩選清單。 這個範例需要表單<xref:System.Windows.Forms.Button>置於其上和<xref:System.IO>加入其中的命名空間。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="HookProc">
      <MemberSignature Language="C#" Value="protected override IntPtr HookProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int HookProc(native int hWnd, int32 msg, native int wparam, native int lparam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HookProc (hWnd As IntPtr, msg As Integer, wparam As IntPtr, lparam As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="F#" Value="override this.HookProc : nativeint * int * nativeint * nativeint -&gt; nativeint" Usage="fileDialog.HookProc (hWnd, msg, wparam, lparam)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wparam" Type="System.IntPtr" />
        <Parameter Name="lparam" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWnd">對話方塊視窗的控制代碼。</param>
        <param name="msg">對話方塊所收到的訊息。</param>
        <param name="wparam">有關訊息的其他資訊。</param>
        <param name="lparam">有關訊息的其他資訊。</param>
        <summary>定義為了將特定功能加入檔案對話方塊中而覆寫的通用對話方塊攔截程序 (Hook Procedure)。</summary>
        <returns>如果預設對話方塊程序處理訊息，就會傳回零，但如果預設對話方塊程序忽略訊息，就會傳回非零值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 攔截程序可讓使用者連接，或插入常式或應用程式，以便偵錯或增強功能的其他常式。  
  
 根據預設，攔截程序會將對話方塊中，以回應 WM_INITDIALOG 訊息在螢幕上置中。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當覆寫<see cref="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />衍生類別時，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="InitialDirectory">
      <MemberSignature Language="C#" Value="public string InitialDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InitialDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InitialDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InitialDirectory : string with get, set" Usage="System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定檔案對話方塊所顯示的初始目錄。</summary>
        <value>檔案對話方塊所顯示的初始目錄。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A>屬性通常設定使用下列來源的其中一個：  
  
-   在程式中，可能是保留上一個目錄或檔案作業先前使用的路徑。  
  
-   路徑讀取自持續性的來源，應用程式設定，例如<xref:Microsoft.Win32.Registry>或應用程式中的字串資源。  
  
-   標準 Windows 系統和使用者的路徑，例如 Program Files、 MyDocuments、 MyMusic，等等 (其中您可以使用取得<xref:System.Environment.GetFolderPath%2A>方法)  
  
-   目前的應用程式，例如其啟動目錄的相關路徑 (其中您可以使用屬性來取得<xref:System.Windows.Forms.Application>物件)。  
  
 如需建立動態路徑的詳細資訊，請參閱<xref:System.Windows.Forms.FileDialog>類別概觀。  
  
 在  [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]，如果<xref:System.Windows.Forms.FileDialog.InitialDirectory%2A>設定而非只是目錄路徑為完整檔案名稱，應用程式路徑，或從中使用者前次選取檔案的目錄，將預設的初始目錄。  
  
   
  
## Examples  
 下列程式碼範例會使用<xref:System.Windows.Forms.OpenFileDialog>實作<xref:System.Windows.Forms.FileDialog>並說明如何建立、 設定屬性，以及顯示的對話方塊。 此範例會使用<xref:System.Windows.Forms.FileDialog.InitialDirectory%2A>屬性來設定初始目錄為何時對話方塊顯示給使用者。 這個範例需要表單<xref:System.Windows.Forms.Button>置於其上和<xref:System.IO>加入其中的命名空間。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">必須設定的初始目錄。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
        <altmember cref="T:Microsoft.Win32.Registry" />
        <altmember cref="T:System.Windows.Forms.Application" />
        <altmember cref="T:System.Environment" />
        <altmember cref="T:System.IO.Path" />
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="protected virtual IntPtr Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Instance" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Instance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Instance As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr Instance { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Instance : nativeint" Usage="System.Windows.Forms.FileDialog.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得應用程式的 Win32 執行個體控制代碼 (Instance Handle)。</summary>
        <value>應用程式的 Win32 執行個體控制代碼。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFileOk">
      <MemberSignature Language="C#" Value="protected void OnFileOk (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnFileOk(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnFileOk (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnFileOk(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnFileOk : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="fileDialog.OnFileOk e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.ComponentModel.CancelEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.FileDialog.FileOk" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.FileDialog.FileOk" />
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="protected int Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Options" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Options" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Options As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int Options { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : int" Usage="System.Windows.Forms.FileDialog.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值來初始化 <see cref="T:System.Windows.Forms.FileDialog" />。</summary>
        <value>初始化 <see cref="T:System.Windows.Forms.FileDialog" /> 的內部值的位元 (Bitwise) 組合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog.Options%2A>屬性會對應至用來初始化 [檔案] 對話方塊中使用 Win32 的旗標。 使用的屬性<xref:System.Windows.Forms.FileDialog>類別來取得和設定選項。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberSignature Language="F#" Value="override this.Reset : unit -&gt; unit" Usage="fileDialog.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重設所有屬性為預設值。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>當覆寫<see cref="M:System.Windows.Forms.FileDialog.Reset" />衍生類別時，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.CommonDialog.Reset" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RestoreDirectory">
      <MemberSignature Language="C#" Value="public bool RestoreDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RestoreDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property RestoreDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RestoreDirectory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RestoreDirectory : bool with get, set" Usage="System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出對話方塊是否在關閉前將目錄還原至先前選取的目錄。</summary>
        <value>
          <see langword="true" /> 如果對話方塊中目前的目錄還原成先前選取的目錄使用者變更目錄時，搜尋檔案;否則， <see langword="false" />。 預設值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例會使用<xref:System.Windows.Forms.OpenFileDialog>實作<xref:System.Windows.Forms.FileDialog>並說明如何建立、 設定屬性，以及顯示的對話方塊。 此範例會使用<xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A>屬性，以確認在關閉對話方塊時，會還原先前選取的目錄。 這個範例需要表單<xref:System.Windows.Forms.Button>置於其上和<xref:System.IO>加入其中的命名空間。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要設定的屬性。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      </Docs>
    </Member>
    <Member MemberName="RunDialog">
      <MemberSignature Language="C#" Value="protected override bool RunDialog (IntPtr hWndOwner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool RunDialog(native int hWndOwner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RunDialog (hWndOwner As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool RunDialog(IntPtr hWndOwner);" />
      <MemberSignature Language="F#" Value="override this.RunDialog : nativeint -&gt; bool" Usage="fileDialog.RunDialog hWndOwner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWndOwner" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWndOwner">數值，表示通用對話方塊中主控視窗的視窗控制代碼。</param>
        <summary>指定通用對話方塊。</summary>
        <returns>如果檔案可以開啟，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法提供實作<xref:System.Windows.Forms.CommonDialog.RunDialog%2A>，並叫用檔案 對話方塊的使用者時叫用<xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>。  
  
 在衍生類別中<xref:System.Windows.Forms.OpenFileDialog>並<xref:System.Windows.Forms.SaveFileDialog>無效的檔名<xref:System.Exception>可能會引發。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowHelp">
      <MemberSignature Language="C#" Value="public bool ShowHelp { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHelp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowHelp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowHelp { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowHelp : bool with get, set" Usage="System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否在 [檔案] 對話方塊中顯示 **[說明]** 按鈕。</summary>
        <value>如果對話方塊含有 [說明] 按鈕，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Forms.Control.HelpRequested>使用者按一下時，會引發事件**協助** 按鈕。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportMultiDottedExtensions">
      <MemberSignature Language="C#" Value="public bool SupportMultiDottedExtensions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportMultiDottedExtensions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportMultiDottedExtensions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportMultiDottedExtensions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SupportMultiDottedExtensions : bool with get, set" Usage="System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定對話方塊是否支援顯示和儲存具有多個副檔名的檔案。</summary>
        <value>如果對話方塊支援多個副檔名則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有時候使用者必須開啟，並儲存使用多個副檔名的檔案。 例如，應用程式資訊清單所使用的檔案[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]複雜的副檔名的部署技術結束 「。 .exe.manifest"。 將此屬性設定為`true`可讓您設定<xref:System.Windows.Forms.FileDialog.Filter%2A>至多點延伸模組的屬性。  
  
 如果<xref:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions%2A>是`false`，並指派的多點延伸<xref:System.Windows.Forms.FileDialog.Filter%2A>，這類衍生控制項<xref:System.Windows.Forms.SaveFileDialog>將只能使用在字串中的最後一個延伸模組。 例如，將使用".manifest"而不是 「。 .exe.manifest"。  
  
   
  
## Examples  
 下列程式碼範例會將檔案儲存副檔名為"。 data.txt"。 這個程式碼範例需要您的應用程式主機<xref:System.Windows.Forms.SaveFileDialog>名為`saveFileDialog1`並<xref:System.Windows.Forms.Button>名為`button1`。  
  
 [!code-csharp[SupportMultiDottedExtensions#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SupportMultiDottedExtensions/CS/Form1.cs#1)]
 [!code-vb[SupportMultiDottedExtensions#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SupportMultiDottedExtensions/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Forms.FileDialog.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定檔案對話方塊的標題。</summary>
        <value>檔案對話方塊的標題。 預設值為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 該字串會放在對話方塊的標題列中。 如果標題是空字串，系統就會使用預設的標題，也就是 「 另存新檔 」 或 「 開啟 」。  
  
   
  
## Examples  
 下列程式碼範例示範如何初始化<xref:System.Windows.Forms.OpenFileDialog>，將<xref:System.Windows.Forms.FileDialog.Title%2A>並<xref:System.Windows.Forms.FileDialog.Filter%2A>屬性，以及讓使用者選取多個檔案，藉由設定<xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A?displayProperty=nameWithType>屬性設為 true。 若要執行此範例中，貼上下列程式碼中表單，其中包含<xref:System.Windows.Forms.OpenFileDialog>名為`OpenFileDialog1`並<xref:System.Windows.Forms.Button>名為`fileButton`。 呼叫`InitializeOpenFileDialog`表單的建構函式中的方法或`Load`方法。 這個範例也需要`Click`事件的`Button`控制項連接到範例中定義的事件處理常式。  
  
 [!code-cpp[System.Windows.Forms.FileDialog#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#6)]
 [!code-csharp[System.Windows.Forms.FileDialog#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#6)]
 [!code-vb[System.Windows.Forms.FileDialog#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#6)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要設定檔案對話方塊的標題。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="fileDialog.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>提供這個物件的字串版本。</summary>
        <returns>這個物件的字串版本。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateNames">
      <MemberSignature Language="C#" Value="public bool ValidateNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateNames As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateNames { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateNames : bool with get, set" Usage="System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出對話方塊是否只接受有效的 Win32 檔名。</summary>
        <value>如果對話方塊只接受有效的 Win32 檔名，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果編輯控制項包含任何項目，但是空間當使用者按一下**確定**，對話方塊會傳回檔案名稱，或不是有效。 沒有預設的延伸模組會新增至文字。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要設定的屬性。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
  </Members>
</Type>