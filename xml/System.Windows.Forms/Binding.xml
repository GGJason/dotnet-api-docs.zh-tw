<Type Name="Binding" FullName="System.Windows.Forms.Binding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9c80e3411c7c174c5488427dc9c324b735d49473" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48660714" /></Metadata><TypeSignature Language="C#" Value="public class Binding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Binding" />
  <TypeSignature Language="VB.NET" Value="Public Class Binding" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binding" />
  <TypeSignature Language="F#" Value="type Binding = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ListBindingConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示物件屬性值和控制項屬性值之間的簡單繫結 (Simple Binding)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.Binding>類別來建立和維護簡單繫結控制項的屬性與物件的屬性，或是物件的清單中的目前物件的屬性。  
  
 例如第一個案例中，您可以繫結<xref:System.Windows.Forms.Control.Text%2A>的屬性<xref:System.Windows.Forms.TextBox>若要控制`FirstName`屬性`Customer`物件。 例如第二個案例中，您可以繫結<xref:System.Windows.Forms.Control.Text%2A>的屬性<xref:System.Windows.Forms.TextBox>若要控制`FirstName`屬性<xref:System.Data.DataTable>，其中包含客戶。  
  
 <xref:System.Windows.Forms.Binding>類別也可讓您設定透過顯示值的格式<xref:System.Windows.Forms.Binding.Format>事件，以及擷取格式化的值，透過<xref:System.Windows.Forms.Binding.Parse>事件。  
  
 在建構時<xref:System.Windows.Forms.Binding>執行個體與<xref:System.Windows.Forms.Binding.%23ctor%2A>建構函式，您必須指定三個項目：  
  
-   繫結到控制項屬性的名稱。  
  
-   資料來源。  
  
-   瀏覽路徑解析為清單或資料來源中的屬性。 瀏覽路徑，也用來建立物件的<xref:System.Windows.Forms.Binding.BindingMemberInfo%2A>屬性。  
  
 首先，您必須指定您想要將資料繫結控制項屬性的名稱。 例如，若要顯示在中的資料<xref:System.Windows.Forms.TextBox>控制項，指定<xref:System.Windows.Forms.TextBoxBase.Text%2A>屬性。  
  
 第二，您可以指定下表中的任何一個類別的執行個體，做為資料來源。  
  
|描述|C# 範例|  
|-----------------|-----------------|  
|任何實作類別<xref:System.ComponentModel.IBindingList>或<xref:System.ComponentModel.ITypedList>。 其中包括下列： <xref:System.Data.DataSet>， <xref:System.Data.DataTable>， <xref:System.Data.DataView>，或<xref:System.Data.DataViewManager>。|`DataSet ds = new DataSet("myDataSet");`|  
|任何實作類別<xref:System.Collections.IList>若要建立之物件的索引的集合。 必須建立和填入建立集合<xref:System.Windows.Forms.Binding>。 在清單中的物件必須是相同的類型;否則，會擲回例外狀況。|`ArrayList ar1 = new ArrayList;  Customer1 cust1 = new Customer("Louis");  ar1.Add(cust1);`|  
|強型別<xref:System.Collections.IList>的強類型物件|`Customer [] custList = new Customer[3];`|  
  
 第三，您必須指定導覽路徑，它可以是空字串 ("")，單一屬性名稱或以句號分隔的名稱階層。 如果您設定的導覽路徑設為空字串，<xref:System.Object.ToString%2A>會在基礎資料來源物件上呼叫方法。  
  
 如果資料來源<xref:System.Data.DataTable>，其中可以包含多個<xref:System.Data.DataColumn>物件時，瀏覽路徑，必須用來解析為特定的資料行。  
  
> [!NOTE]
>  當資料來源時<xref:System.Data.DataSet>， <xref:System.Data.DataViewManager>，或<xref:System.Data.DataTable>，您實際上繫結至<xref:System.Data.DataView>。 因此，繫結的資料列的實際<xref:System.Data.DataRowView>物件。  
  
 以句點隔開的導覽路徑時，必須包含多個物件設定的資料來源<xref:System.Data.DataTable>物件 (例如<xref:System.Data.DataSet>或<xref:System.Data.DataViewManager>)。 當您繫結至其屬性會傳回其他物件 （例如具有屬性會傳回其他類別物件的類別） 的參考物件時，您也可以使用句號分隔的導覽路徑。 例如，下列所有的導覽路徑會描述有效的資料欄位：  
  
-   「 Size.Height"  
  
-   "Suppliers.CompanyName"  
  
-   "Regions.regionsToCustomers.CustomerFirstName"  
  
-   "Regions.regionsToCustomers.customersToOrders.ordersToDetails.Quantity"  
  
 此屬性，會解析成單一值 （例如整數），或是值 （例如字串陣列） 的清單，可傳回路徑的每個成員。 雖然清單或屬性，可以是在路徑中的每個成員，最後一個成員必須解析為屬性。 每個成員是根據前一個成員: 「 Size.Height"會解析成<xref:System.Drawing.Size.Height%2A>目前的屬性<xref:System.Drawing.Size>;「 Regions.regionsToCustomers.CustomerFirstName"會解析為第一個名稱為目前的客戶，是目前區域客戶的客戶。  
  
 A<xref:System.Data.DataRelation>藉由連結一個傳回值的清單<xref:System.Data.DataTable>第二個<xref:System.Data.DataTable>在<xref:System.Data.DataSet>。 如果<xref:System.Data.DataSet>包含<xref:System.Data.DataRelation>物件，您可以指定為資料成員<xref:System.Data.DataTable.TableName%2A>後面接著<xref:System.Data.DataRelation.RelationName%2A>，然後<xref:System.Data.DataColumn.ColumnName%2A>。 例如，如果<xref:System.Data.DataTable>名為 「 供應 」 包含<xref:System.Data.DataRelation>名為"suppliers2products"，資料成員可能是 「 Suppliers.suppliers2products.ProductName"。  
  
 資料來源可以包含一組相關的類別。 例如，假設一組太陽系的類別。 名為的類別`System`包含名為的屬性`Stars`傳回的集合`Star`物件。 每個`Star`物件具有`Name`並`Mass`屬性，以及`Planets`傳回的集合屬性`Planet`物件。 在此系統中，每個全球也有`Mass`和`Name`屬性。 每個`Planet`進一步物件具有`Moons`屬性，傳回的集合`Moon`物件，其中每一個還有`Name`和`Mass`屬性。 如果您指定`System`物件做為資料來源，您可以指定下列任一項為資料成員：  
  
-   "Stars.Name"  
  
-   "Stars.Mass"  
  
-   "Stars.Planets.Name"  
  
-   "Stars.Planets.Mass"  
  
-   "Stars.Planets.Moons.Name"  
  
-   "Stars.Planets.Moons.Mass"  
  
 可以是簡單繫結的控制項功能的集合<xref:System.Windows.Forms.Binding>中的物件<xref:System.Windows.Forms.ControlBindingsCollection>，您可以存取透過控制項的<xref:System.Windows.Forms.Control.DataBindings%2A>屬性。 您將新增<xref:System.Windows.Forms.Binding>藉由呼叫集合<xref:System.Windows.Forms.ControlBindingsCollection.Add%2A>方法，藉此在物件的屬性 （或清單中的目前物件的屬性） 繫結控制項的屬性。  
  
 您可以簡單繫結至任何物件都衍生自<xref:System.Windows.Forms.Control?displayProperty=nameWithType>類別，例如，下列的 Windows 控制項：  
  
-   <xref:System.Windows.Forms.Button>  
  
-   <xref:System.Windows.Forms.CheckBox>  
  
-   <xref:System.Windows.Forms.CheckedListBox>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.DomainUpDown>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.LinkLabel>  
  
-   <xref:System.Windows.Forms.ListBox>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.NumericUpDown>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.RadioButton>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.ScrollBar>  
  
-   <xref:System.Windows.Forms.StatusBar>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
> [!NOTE]
>  只有<xref:System.Windows.Forms.ListControl.SelectedValue%2A>的屬性<xref:System.Windows.Forms.ComboBox>， <xref:System.Windows.Forms.CheckedListBox>，和<xref:System.Windows.Forms.ListBox>控制項是簡單的繫結。  
  
 <xref:System.Windows.Forms.BindingManagerBase>類別是抽象類別，可管理所有<xref:System.Windows.Forms.Binding>特定資料來源和資料成員的物件。 衍生自類別<xref:System.Windows.Forms.BindingManagerBase>都<xref:System.Windows.Forms.CurrencyManager>而<xref:System.Windows.Forms.PropertyManager>類別。 如何<xref:System.Windows.Forms.Binding>管理取決於是否<xref:System.Windows.Forms.Binding>清單繫結或屬性繫結。 例如，如果它是清單繫結時，您可以使用<xref:System.Windows.Forms.BindingManagerBase>來指定<xref:System.Windows.Forms.BindingManagerBase.Position%2A>在清單中; <xref:System.Windows.Forms.BindingManagerBase.Position%2A>，因此，會決定哪一個項目 （不在清單中的所有項目） 實際繫結至控制項。 要傳回適當<xref:System.Windows.Forms.BindingManagerBase>，使用<xref:System.Windows.Forms.BindingContext>。  
  
 若要將新的資料列加入至一組繫結至相同的控制項<xref:System.Windows.Forms.Binding.DataSource%2A>，使用<xref:System.Windows.Forms.BindingManagerBase.AddNew%2A>方法<xref:System.Windows.Forms.BindingManagerBase>類別。 使用<xref:System.Windows.Forms.BindingContext.Item%2A>的屬性<xref:System.Windows.Forms.BindingContext>類別，以傳回適當<xref:System.Windows.Forms.CurrencyManager>。 若要逸出的新資料列，使用<xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例會建立 Windows 表單有幾個示範簡單資料繫結的控制項。 此範例會建立<xref:System.Data.DataSet>具有兩個資料表都叫做`Customers`並`Orders`，和<xref:System.Data.DataRelation>名為`custToOrders`。 四個控制項 (<xref:System.Windows.Forms.DateTimePicker>和三個<xref:System.Windows.Forms.TextBox>控制項) 的資料繫結至資料表中的資料行。 每個控制項，此範例會建立並新增<xref:System.Windows.Forms.Binding>透過<xref:System.Windows.Forms.Control.DataBindings%2A>屬性。 此範例會傳回<xref:System.Windows.Forms.BindingManagerBase>針對每個資料表透過表單<xref:System.Windows.Forms.BindingContext>。 四個<xref:System.Windows.Forms.Button>控制遞增或遞減<xref:System.Windows.Forms.BindingManagerBase.Position%2A>屬性上的<xref:System.Windows.Forms.BindingManagerBase>物件。  
  
 [!code-cpp[Classic Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding Example/VB/source.vb#1)]  
 
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.BindingContext" />
    <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
    <altmember cref="T:System.Windows.Forms.ComboBox" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.Binding" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">要繫結之控制項屬性的名稱。</param>
        <param name="dataSource"><see cref="T:System.Object" />，代表資料來源。</param>
        <param name="dataMember">要繫結的屬性或清單。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Binding" /> 類別的新執行個體，其可將所指的控制項屬性簡單繫結至資料來源的指定資料成員。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以指定任何資料來源的下列類別的執行個體：  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   任何實作類別<xref:System.Collections.IList>介面  
  
-   任何類別  
  
 請參閱<xref:System.Windows.Forms.Binding>類別，如需有關建立`dataMember`字串。  
  
 當您建立繫結控制項的屬性，以新<xref:System.Windows.Forms.Binding>會檢查繫結控制項所公開的事件，並將附加至兩個特定的事件：  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   名為事件*PropertyName* `Changed` (比方說， <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 如果您嘗試繫結至不存在，屬性<xref:System.ArgumentException>就會擲回的時機<xref:System.Windows.Forms.Binding>加入至控制項的<xref:System.Windows.Forms.Control.DataBindings%2A?displayProperty=nameWithType>集合。  
  
   
  
## Examples  
 下列程式碼範例繫結<xref:System.Windows.Forms.TextBox>控制項中的資料表資料行<xref:System.Data.DataSet>名為`myDataSet`。 這個範例會要求您已經宣告`myDataSet`模組的 「 宣告 」 區段中。  
  
 [!code-cpp[Classic Binding.Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Binding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><paramref name="propertyName" /> 既不是控制項的有效屬性，也不是空字串 ("")。</exception>
        <exception cref="T:System.ArgumentException">控制項上沒有 <paramref name="propertyName" /> 所指定的屬性。</exception>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
        <altmember cref="T:System.Windows.Forms.CurrencyManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String, formattingEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">要繫結之控制項屬性的名稱。</param>
        <param name="dataSource"><see cref="T:System.Object" />，代表資料來源。</param>
        <param name="dataMember">要繫結的屬性或清單。</param>
        <param name="formattingEnabled"><see langword="true" /> 表示要格式化顯示的資料，否則為 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Binding" /> 類別的新執行個體，其可將表示的控制項屬性繫結至資料來源的指定資料成員，並選擇性地啟用要套用的格式。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">控制項上沒有 <paramref name="propertyName" /> 所指定的屬性。  
  
-或- 
指定的屬性是唯讀屬性。</exception>
        <exception cref="T:System.Exception">已停用格式化，而且 <paramref name="propertyName" /> 既不是有效的控制項屬性，也不是空字串 ("")。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
      </Parameters>
      <Docs>
        <param name="propertyName">要繫結之控制項屬性的名稱。</param>
        <param name="dataSource"><see cref="T:System.Object" />，代表資料來源。</param>
        <param name="dataMember">要繫結的屬性或清單。</param>
        <param name="formattingEnabled"><see langword="true" /> 表示要格式化顯示的資料，否則為 <see langword="false" />。</param>
        <param name="dataSourceUpdateMode">其中一個 <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 值。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Binding" /> 類別的新執行個體，其可將指定的控制項屬性繫結至指定資料來源的指定資料成員。 選擇性地啟用格式，並根據指定的更新設定將值散佈至資料來源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以指定任何資料來源的下列類別的執行個體：  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   任何實作類別<xref:System.Collections.IList>介面  
  
-   任何類別  
  
 請參閱<xref:System.Windows.Forms.Binding>類別，如需有關建立`dataMember`字串。  
  
 當您建立繫結控制項的屬性，以新<xref:System.Windows.Forms.Binding>會檢查繫結控制項所公開的事件，並將附加至兩個特定的事件：  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>。  
  
-   名為事件*PropertyName* `Changed` (比方說， <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">控制項上沒有 <paramref name="propertyName" /> 所指定的屬性。  
  
-或- 
指定的資料來源或資料成員或控制項屬性是與集合中的另一個繫結相關聯。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">要繫結之控制項屬性的名稱。</param>
        <param name="dataSource"><see cref="T:System.Object" />，代表資料來源。</param>
        <param name="dataMember">要繫結的屬性或清單。</param>
        <param name="formattingEnabled"><see langword="true" /> 表示要格式化顯示的資料，否則為 <see langword="false" />。</param>
        <param name="dataSourceUpdateMode">其中一個 <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 值。</param>
        <param name="nullValue">如果資料來源值是 <see cref="T:System.Object" />，要套用至繫結控制項屬性的 <see cref="T:System.DBNull" />。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Binding" /> 類別的新執行個體，其可將指定的控制項屬性繫結至指定之資料來源的指定資料成員。 選擇性地啟用格式、根據指定的更新設定將值散佈至資料來源，並當從資料來源傳回 <see cref="T:System.DBNull" /> 時將屬性設為指定的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以指定任何資料來源的下列類別的執行個體：  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   任何實作類別<xref:System.Collections.IList>介面  
  
-   任何類別  
  
 請參閱<xref:System.Windows.Forms.Binding>類別，如需有關建立`dataMember`字串。  
  
 當您建立繫結控制項的屬性，以新<xref:System.Windows.Forms.Binding>會檢查繫結控制項所公開的事件，並將附加至兩個特定的事件：  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   名為事件*PropertyName* `Changed` (比方說， <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">控制項上沒有 <paramref name="propertyName" /> 所指定的屬性。  
  
-或- 
指定的資料來源或資料成員或控制項屬性是與集合中的另一個繫結相關聯。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj * string -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">要繫結之控制項屬性的名稱。</param>
        <param name="dataSource"><see cref="T:System.Object" />，代表資料來源。</param>
        <param name="dataMember">要繫結的屬性或清單。</param>
        <param name="formattingEnabled"><see langword="true" /> 表示要格式化顯示的資料，否則為 <see langword="false" />。</param>
        <param name="dataSourceUpdateMode">其中一個 <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 值。</param>
        <param name="nullValue">如果資料來源值是 <see cref="T:System.Object" />，要套用至繫結控制項屬性的 <see cref="T:System.DBNull" />。</param>
        <param name="formatString">指示如何顯示數值的一或多個格式規範字元。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Binding" /> 類別的新執行個體，其可將指定的控制項屬性繫結至指定資料來源的指定資料成員。 選擇性地啟用包含指定格式字串的格式、根據指定的更新設定將值散佈至資料來源，並且在從資料來源傳回 <see cref="T:System.DBNull" /> 時將屬性設定為指定的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以指定任何資料來源的下列類別的執行個體：  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   任何實作類別<xref:System.Collections.IList>介面  
  
-   任何類別  
  
 請參閱<xref:System.Windows.Forms.Binding>類別，如需有關建立`dataMember`字串。  
  
 當您建立繫結控制項的屬性，以新<xref:System.Windows.Forms.Binding>會檢查繫結控制項所公開的事件，並將附加至兩個特定的事件：  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   名為事件*PropertyName* `Changed` (比方說， <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">控制項上沒有 <paramref name="propertyName" /> 所指定的屬性。  
  
-或- 
指定的資料來源或資料成員或控制項屬性是與集合中的另一個繫結相關聯。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, class System.IFormatProvider formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString, IFormatProvider ^ formatInfo);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj * string * IFormatProvider -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString, formatInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="propertyName">要繫結之控制項屬性的名稱。</param>
        <param name="dataSource"><see cref="T:System.Object" />，代表資料來源。</param>
        <param name="dataMember">要繫結的屬性或清單。</param>
        <param name="formattingEnabled"><see langword="true" /> 表示要格式化顯示的資料，否則為 <see langword="false" />。</param>
        <param name="dataSourceUpdateMode">其中一個 <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 值。</param>
        <param name="nullValue">如果資料來源值是 <see cref="T:System.Object" />，要套用至繫結控制項屬性的 <see cref="T:System.DBNull" />。</param>
        <param name="formatString">指示如何顯示數值的一或多個格式規範字元。</param>
        <param name="formatInfo">要覆寫預設格式化行為之 <see cref="T:System.IFormatProvider" /> 的實作。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Binding" /> 類別的新執行個體，其可將指定的控制項屬性繫結至指定資料來源的指定資料成員。 使用指定的格式字串選擇性地啟用格式；根據指定的更新設定將值散佈至資料來源；使用指定的格式字串啟用格式；當從資料來源傳回 <see cref="T:System.DBNull" /> 時將屬性設為指定的值，並設定指定的格式提供者。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以指定任何資料來源的下列類別的執行個體：  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   任何實作類別<xref:System.Collections.IList>介面  
  
-   任何類別  
  
 請參閱<xref:System.Windows.Forms.Binding>類別，如需有關建立`dataMember`字串。  
  
 當您建立繫結控制項的屬性，以新<xref:System.Windows.Forms.Binding>會檢查繫結控制項所公開的事件，並將附加至兩個特定的事件：  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   名為事件*PropertyName* `Changed` (比方說， <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">控制項上沒有 <paramref name="propertyName" /> 所指定的屬性。  
  
-或- 
指定的資料來源或資料成員或控制項屬性是與集合中的另一個繫結相關聯。</exception>
      </Docs>
    </Member>
    <Member MemberName="BindableComponent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IBindableComponent BindableComponent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IBindableComponent BindableComponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindableComponent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindableComponent As IBindableComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IBindableComponent ^ BindableComponent { System::Windows::Forms::IBindableComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindableComponent : System.Windows.Forms.IBindableComponent" Usage="System.Windows.Forms.Binding.BindableComponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IBindableComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與 <see cref="T:System.Windows.Forms.Binding" /> 有關聯的控制項。</summary>
        <value>與 <see cref="T:System.Windows.Forms.IBindableComponent" /> 有關聯的 <see cref="T:System.Windows.Forms.Binding" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingCompleteEventHandler BindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.BindingCompleteEventHandler BindingComplete" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.BindingComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BindingComplete As BindingCompleteEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::BindingCompleteEventHandler ^ BindingComplete;" />
      <MemberSignature Language="F#" Value="member this.BindingComplete : System.Windows.Forms.BindingCompleteEventHandler " Usage="member this.BindingComplete : System.Windows.Forms.BindingCompleteEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="P:System.Windows.Forms.Binding.FormattingEnabled" /> 屬性設定為 <see langword="true" /> 並繫結作業完成時，例如資料從控制項推入資料來源時，反之亦然。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 會引發這個事件，在下列任一條件時<xref:System.Windows.Forms.Binding.FormattingEnabled%2A>是`true`:  
  
-   從資料來源的資料推入至的控制項屬性。  
  
-   從控制項屬性的資料推入至資料來源。  
  
 完成這些作業無關的完成狀態時，會引發這個事件。 例如，如果繫結作業繫結的 null 值<xref:System.Windows.Forms.DateTimePicker.Value%2A>屬性，會擲回例外狀況，但<xref:System.Windows.Forms.Binding.BindingComplete>事件還是會發生。 此事件處理常式可以採取適當的動作，藉由檢查根據成功、 錯誤或繫結程序中的例外狀況<xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A>屬性<xref:System.Windows.Forms.BindingCompleteEventArgs>參數。  
  
 如需有關如何處理事件的詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何處理<xref:System.Windows.Forms.Binding.BindingComplete>事件。  
  
 [!code-cpp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.FormattingEnabled" />
        <altmember cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BindingManagerBase">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingManagerBase BindingManagerBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingManagerBase BindingManagerBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingManagerBase As BindingManagerBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingManagerBase ^ BindingManagerBase { System::Windows::Forms::BindingManagerBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingManagerBase : System.Windows.Forms.BindingManagerBase" Usage="System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Windows.Forms.BindingManagerBase" /> 的 <see cref="T:System.Windows.Forms.Binding" />。</summary>
        <value>管理這個 <see cref="T:System.Windows.Forms.BindingManagerBase" /> 的 <see cref="T:System.Windows.Forms.Binding" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.BindingManagerBase>來逐一查看資料繫結清單依遞增或遞減<xref:System.Windows.Forms.BindingManagerBase.Position%2A>屬性。 <xref:System.Windows.Forms.BindingManagerBase>類別是抽象的。 <xref:System.Windows.Forms.CurrencyManager>類別，用來管理資料繫結清單，繼承自<xref:System.Windows.Forms.BindingManagerBase>類別。  
  
   
  
## Examples  
 下列程式碼範例中取得<xref:System.Windows.Forms.BindingManagerBase>的每個<xref:System.Windows.Forms.Binding>上的表單，並列印<xref:System.Windows.Forms.BindingManagerBase.Position%2A>每個屬性<xref:System.Windows.Forms.BindingManagerBase>。  
  
 [!code-cpp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingMemberInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingMemberInfo BindingMemberInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BindingMemberInfo BindingMemberInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingMemberInfo As BindingMemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingMemberInfo BindingMemberInfo { System::Windows::Forms::BindingMemberInfo get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingMemberInfo : System.Windows.Forms.BindingMemberInfo" Usage="System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingMemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>根據 <see cref="Overload:System.Windows.Forms.Binding.#ctor" /> 建構函式中的 <paramref name="dataMember" /> 參數，取得包含這個繫結之相關資訊的物件。</summary>
        <value><see cref="T:System.Windows.Forms.BindingMemberInfo" />，包含關於這個 <see cref="T:System.Windows.Forms.Binding" /> 的資訊。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingMemberInfo>從建立`dataMember`字串傳遞至<xref:System.Windows.Forms.Binding.%23ctor%2A>建構函式。  
  
   
  
## Examples  
 下列程式碼範例中取得<xref:System.Windows.Forms.BindingMemberInfo>每個<xref:System.Windows.Forms.Binding>上一份表單及列印<xref:System.Windows.Forms.BindingMemberInfo.BindingPath%2A>， <xref:System.Windows.Forms.BindingMemberInfo.BindingField%2A>，並<xref:System.Windows.Forms.BindingMemberInfo.BindingMember%2A>屬性值， <xref:System.Windows.Forms.Binding>。  
  
 [!code-cpp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Control { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Control : System.Windows.Forms.Control" Usage="System.Windows.Forms.Binding.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得繫結所屬的控制項。</summary>
        <value>繫結所屬的 <see cref="T:System.Windows.Forms.Control" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例中取得<xref:System.Windows.Forms.BindingManagerBase>特定的資料來源，和每個列印資訊<xref:System.Windows.Forms.Binding.Control%2A>繫結至資料來源的屬性。 此範例會使用<xref:System.Windows.Forms.BindingManagerBase.Bindings%2A>屬性<xref:System.Windows.Forms.BindingManagerBase>取得所有控制項。  
  
 [!code-cpp[Classic Binding.Control Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Control Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Control Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Control Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Control Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Control Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlUpdateMode ControlUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ControlUpdateMode ControlUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlUpdateMode As ControlUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ControlUpdateMode ControlUpdateMode { System::Windows::Forms::ControlUpdateMode get(); void set(System::Windows::Forms::ControlUpdateMode value); };" />
      <MemberSignature Language="F#" Value="member this.ControlUpdateMode : System.Windows.Forms.ControlUpdateMode with get, set" Usage="System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料來源的變更何時送到已繫結的控制項屬性的值。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.ControlUpdateMode" /> 值。 預設值為 <see cref="F:System.Windows.Forms.ControlUpdateMode.OnPropertyChanged" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSource { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : obj" Usage="System.Windows.Forms.Binding.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個繫結的資料來源。</summary>
        <value><see cref="T:System.Object" />，代表資料來源。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可能的資料來源包括：  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   實作的任何物件<xref:System.Collections.IList>介面  
  
-   任何物件  
  
   
  
## Examples  
 下列程式碼範例會使用<xref:System.Windows.Forms.Binding.DataSource%2A>屬性，以傳回<xref:System.Data.DataSet>。  
  
 [!code-cpp[Classic Binding.DataSource Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceNullValue">
      <MemberSignature Language="C#" Value="public object DataSourceNullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSourceNullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceNullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSourceNullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceNullValue : obj with get, set" Usage="System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如果控制項值為 <see langword="null" /> 或空白，則取得或設定要儲存在資料來源中的值。</summary>
        <value>控制項屬性為空白或 <see langword="null" /> 時，要儲存在資料來源中的 <see cref="T:System.Object" />。 實值型別 (Value Type) 預設為 <see cref="T:System.DBNull" />，而非實值型別則預設為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Windows.Forms.Binding.NullValue%2A>屬性來指定包含資料來源時，繫結控制項中顯示的值<xref:System.DBNull>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.NullValue" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceUpdateMode As DataSourceUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataSourceUpdateMode DataSourceUpdateMode { System::Windows::Forms::DataSourceUpdateMode get(); void set(System::Windows::Forms::DataSourceUpdateMode value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceUpdateMode : System.Windows.Forms.DataSourceUpdateMode with get, set" Usage="System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataSourceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，此值表示何時將繫結控制屬性填入到資料來源中。</summary>
        <value>表示何時會傳播變更的值。 預設值為 <see cref="F:System.Windows.Forms.DataSourceUpdateMode.OnValidation" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 請注意，即使這個屬性設定為<xref:System.Windows.Forms.DataSourceUpdateMode.Never>，繫結將會更新至少一次，第一次建立時。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Format;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Format" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Format" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Format As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Format;" />
      <MemberSignature Language="F#" Value="member this.Format : System.Windows.Forms.ConvertEventHandler " Usage="member this.Format : System.Windows.Forms.ConvertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於控制項屬性繫結至資料值時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Binding.Format>資料從資料來源推送至控制項時，會引發事件。 您可以處理<xref:System.Windows.Forms.Binding.Format>將未格式化的資料轉換成資料來源的事件格式化顯示資料。 從控制項到資料來源提取資料時<xref:System.Windows.Forms.Binding.Parse>引發事件來 unformat 所顯示的值，則<xref:System.Windows.Forms.Binding.Format>重新格式化顯示的資料就會發生事件。 這可確保繫結的控制項，會顯示正確格式化的資料，不論使用者是否在控制項中輸入格式化或未格式化的資料。  
  
 <xref:System.Windows.Forms.Binding.Format>和<xref:System.Windows.Forms.Binding.Parse>事件可讓您建立自訂的格式來顯示資料。 例如，如果資料表中的資料型別的<xref:System.Decimal>，您可以在當地貨幣格式顯示資料，藉由設定<xref:System.Windows.Forms.ConvertEventArgs.Value%2A>屬性<xref:System.Windows.Forms.ConvertEventArgs>中的格式化值<xref:System.Windows.Forms.Binding.Format>事件。 因此，您必須 unformat 中顯示的值<xref:System.Windows.Forms.Binding.Parse>事件。  
  
 <xref:System.Windows.Forms.Binding.Format>事件就會發生<xref:System.Windows.Forms.BindingManagerBase.Current%2A>的值<xref:System.Windows.Forms.BindingManagerBase>變更，其中包括：  
  
-   第一次屬性繫結。  
  
-   任何時候<xref:System.Windows.Forms.BindingManagerBase.Position%2A>變更。  
  
-   每當資料繫結清單的排序或篩選，也就是完成時<xref:System.Data.DataView>提供的清單。  
  
 <xref:System.Windows.Forms.Binding.Format>事件也會發生之後<xref:System.Windows.Forms.Binding.Parse>事件。 例如，當控制項失去焦點時，會剖析其內容。 立即之後，新的資料推送到控制項、<xref:System.Windows.Forms.Binding.Format>允許格式化新的內容，事件就會發生。  
  
 如需有關如何處理事件的詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.Binding>，加入<xref:System.Windows.Forms.ConvertEventHandler>兩者的委派<xref:System.Windows.Forms.Binding.Parse>和<xref:System.Windows.Forms.Binding.Format>事件，並將<xref:System.Windows.Forms.Binding>來<xref:System.Windows.Forms.BindingsCollection>的<xref:System.Windows.Forms.TextBox>透過控制<xref:System.Windows.Forms.Control.DataBindings%2A>屬性。 `DecimalToCurrencyString`加入的事件委派<xref:System.Windows.Forms.Binding.Format>事件，會將繫結的值格式化 (<xref:System.Decimal>類型) 做為貨幣使用<xref:System.Decimal.ToString%2A>方法。 `CurrencyStringToDecimal`加入的事件委派<xref:System.Windows.Forms.Binding.Parse>事件，將控制項所顯示的值轉換回<xref:System.Decimal>型別。  
  
 這個範例假設存在<xref:System.Data.DataSet>名為`ds`。  
  
 [!code-cpp[Classic Binding.Format Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Format Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Format Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Format Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Format Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Format Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FormatInfo">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatInfo As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatInfo { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatInfo : IFormatProvider with get, set" Usage="System.Windows.Forms.Binding.FormatInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定提供自訂格式化行為的 <see cref="T:System.IFormatProvider" />。</summary>
        <value>提供自訂格式化行為的 <see cref="T:System.IFormatProvider" /> 實作。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定這個屬性會覆寫預設格式化行為，會使用<xref:System.Windows.Forms.Application.CurrentCulture%2A?displayProperty=nameWithType>屬性設定。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatString">
      <MemberSignature Language="C#" Value="public string FormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FormatString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatString : string with get, set" Usage="System.Windows.Forms.Binding.FormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定格式規範字元，表示要如何顯示值。</summary>
        <value>表示要如何顯示值的格式規範字元的字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所使用的格式字串應該遵循標準的.NET Framework 格式規格。 如需詳細資訊，請參閱 <<c0> [ 在.NET Framework 中格式化類型](~/docs/standard/base-types/formatting-types.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormattingEnabled">
      <MemberSignature Language="C#" Value="public bool FormattingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FormattingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property FormattingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FormattingEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FormattingEnabled : bool with get, set" Usage="System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出控制項屬性資料是否會套用類型轉換和格式。</summary>
        <value>如果已啟用控制項屬性資料的型別轉換和格式化則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將此屬性設定為`true`也會啟用錯誤處理行為，並造成<xref:System.Windows.Forms.Binding.BindingComplete>會引發事件。 此事件處理常式可以採取適當的動作，藉由檢查根據成功、 錯誤或繫結程序中的例外狀況<xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A>屬性<xref:System.Windows.Forms.BindingCompleteEventArgs>參數。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.BindingComplete" />
        <altmember cref="T:System.Windows.Forms.BindingCompleteEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="IsBinding">
      <MemberSignature Language="C#" Value="public bool IsBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBinding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.IsBinding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBinding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBinding { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBinding : bool" Usage="System.Windows.Forms.Binding.IsBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出繫結是否在作用中。</summary>
        <value>如果繫結處於作用中，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 符合這些條件時，繫結是作用中：  
  
-   為其所有屬性。  
  
-   使用者沒有呼叫<xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A>或是<xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A>上<xref:System.Windows.Forms.BindingManagerBase>的<xref:System.Windows.Forms.Binding>所屬。  
  
-   要控制<xref:System.Windows.Forms.Binding>所屬已建立。  
  
   
  
## Examples  
 下列程式碼範例會列印<xref:System.Windows.Forms.Binding.PropertyName%2A>並<xref:System.Windows.Forms.Binding.IsBinding%2A>每個值<xref:System.Windows.Forms.Binding>表單上。  
  
 [!code-cpp[Classic Binding.IsBinding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.IsBinding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.IsBinding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.IsBinding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullValue">
      <MemberSignature Language="C#" Value="public object NullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.NullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property NullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NullValue : obj with get, set" Usage="System.Windows.Forms.Binding.NullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定當資料來源包含 <see cref="T:System.Object" /> 值時要設定成控制項屬性的 <see cref="T:System.DBNull" />。</summary>
        <value>當資料來源包含 <see cref="T:System.Object" /> 值時要設定成控制項屬性的 <see cref="T:System.DBNull" />。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 資料來源必須包含<xref:System.DBNull>針對<xref:System.Windows.Forms.Binding.NullValue%2A>屬性，來正確套用。 如果資料來源類型是例如字串或整數類型的值<xref:System.Windows.Forms.Binding.NullValue%2A>屬性將會被忽略。 此外，<xref:System.Windows.Forms.Binding.NullValue%2A>屬性會被忽略，如果設定為`null`。  
  
 Null 值會加入至資料來源，當控制項屬性設定為物件<xref:System.Windows.Forms.Binding.NullValue%2A>。 如果<xref:System.Windows.Forms.Binding.NullValue%2A>設成字串值，比較不區分大小寫。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBindingComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingComplete (System.Windows.Forms.BindingCompleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingComplete(class System.Windows.Forms.BindingCompleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBindingComplete (e As BindingCompleteEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBindingComplete(System::Windows::Forms::BindingCompleteEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBindingComplete : System.Windows.Forms.BindingCompleteEventArgs -&gt; unit&#xA;override this.OnBindingComplete : System.Windows.Forms.BindingCompleteEventArgs -&gt; unit" Usage="binding.OnBindingComplete e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.BindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.BindingCompleteEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Binding.BindingComplete" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.Binding.OnBindingComplete%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnFormat">
      <MemberSignature Language="C#" Value="protected virtual void OnFormat (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFormat(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFormat (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFormat(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberSignature Language="F#" Value="abstract member OnFormat : System.Windows.Forms.ConvertEventArgs -&gt; unit&#xA;override this.OnFormat : System.Windows.Forms.ConvertEventArgs -&gt; unit" Usage="binding.OnFormat cevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent"><see cref="T:System.Windows.Forms.ConvertEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Binding.Format" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.Binding.OnFormat%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para></block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="OnParse">
      <MemberSignature Language="C#" Value="protected virtual void OnParse (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParse(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParse (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParse(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberSignature Language="F#" Value="abstract member OnParse : System.Windows.Forms.ConvertEventArgs -&gt; unit&#xA;override this.OnParse : System.Windows.Forms.ConvertEventArgs -&gt; unit" Usage="binding.OnParse cevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent"><see cref="T:System.Windows.Forms.ConvertEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Binding.Parse" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.Binding.OnParse%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para></block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Parse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Parse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Parse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Parse As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Parse;" />
      <MemberSignature Language="F#" Value="member this.Parse : System.Windows.Forms.ConvertEventHandler " Usage="member this.Parse : System.Windows.Forms.ConvertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於資料繫結控制項的值變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Binding.Format>和<xref:System.Windows.Forms.Binding.Parse>事件可讓您建立自訂的格式來顯示資料。 例如，如果資料表中的資料型別的<xref:System.Decimal>，您可以在當地貨幣格式顯示資料，藉由設定<xref:System.Windows.Forms.ConvertEventArgs.Value%2A>屬性<xref:System.Windows.Forms.ConvertEventArgs>中的格式化值<xref:System.Windows.Forms.Binding.Format>事件。 因此，您必須 unformat 中顯示的值<xref:System.Windows.Forms.Binding.Parse>事件。  
  
 <xref:System.Windows.Forms.Binding.Parse>事件，就會發生下列情況下：  
  
-   在後<xref:System.Windows.Forms.Control.Validated>事件的<xref:System.Windows.Forms.Control>，就會發生。  
  
-   當<xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A>方法的<xref:System.Windows.Forms.BindingManagerBase>呼叫。  
  
-   當<xref:System.Windows.Forms.BindingManagerBase.Current%2A>的<xref:System.Windows.Forms.BindingManagerBase>變更 (亦即，當<xref:System.Windows.Forms.BindingManagerBase.Position%2A>變更)。  
  
 如需有關如何處理事件的詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.Binding>，加入<xref:System.Windows.Forms.ConvertEventHandler>兩者的委派<xref:System.Windows.Forms.Binding.Parse>和<xref:System.Windows.Forms.Binding.Format>事件，並將<xref:System.Windows.Forms.Binding>來<xref:System.Windows.Forms.BindingsCollection>的<xref:System.Windows.Forms.TextBox>透過控制<xref:System.Windows.Forms.Control.DataBindings%2A>屬性。 `DecimalToCurrencyString`加入的事件委派<xref:System.Windows.Forms.Binding.Format>事件，會將繫結的值格式化 (<xref:System.Decimal>類型) 做為貨幣使用<xref:System.Decimal.ToString%2A>方法。 `CurrencyStringToDecimal`加入的事件委派<xref:System.Windows.Forms.Binding.Parse>事件，將控制項所顯示的值轉換回<xref:System.Decimal>型別。  
  
 [!code-cpp[Classic Binding.Parse Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Parse Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Parse Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Parse Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Parse Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Parse Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
      </Docs>
    </Member>
    <Member MemberName="PropertyName">
      <MemberSignature Language="C#" Value="public string PropertyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PropertyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.PropertyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PropertyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyName : string" Usage="System.Windows.Forms.Binding.PropertyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定控制項的資料繫結屬性名稱。</summary>
        <value>所要繫結的控制項屬性名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.Binding.PropertyName%2A>來指定您想要繫結至資料來源中的清單控制項屬性。 大多數情況下，您將屬性繫結顯示這類<xref:System.Windows.Forms.Control.Text%2A>屬性<xref:System.Windows.Forms.TextBox>控制項。 不過，因為您可以繫結控制項的任何屬性，您可以在執行階段使用資料庫中的資料以程式設計方式建立控制項。  
  
   
  
## Examples  
 下列程式碼範例會列印<xref:System.Windows.Forms.Binding.PropertyName%2A>每個值<xref:System.Windows.Forms.Binding>每個控制項在表單上。  
  
 [!code-cpp[Classic Binding.PropertyName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.PropertyName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.PropertyName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.PropertyName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadValue">
      <MemberSignature Language="C#" Value="public void ReadValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.ReadValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadValue();" />
      <MemberSignature Language="F#" Value="member this.ReadValue : unit -&gt; unit" Usage="binding.ReadValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將控制項屬性設定為從資料來源讀取的值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public void WriteValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.WriteValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteValue();" />
      <MemberSignature Language="F#" Value="member this.WriteValue : unit -&gt; unit" Usage="binding.WriteValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從控制項屬性讀取目前的值，並將它寫入資料來源中。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>