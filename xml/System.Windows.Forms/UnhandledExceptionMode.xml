<Type Name="UnhandledExceptionMode" FullName="System.Windows.Forms.UnhandledExceptionMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0ed2668ead3e4942845527c302be6a2956760013" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30654382" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum UnhandledExceptionMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed UnhandledExceptionMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.UnhandledExceptionMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum UnhandledExceptionMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class UnhandledExceptionMode" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>定義 Windows Form 應用程式應將未處理之例外狀況 (Exception) 傳送至何處。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個列舉型別由<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>。  
  
> [!NOTE]
>  在.NET Framework 2.0 版中，通用語言執行階段行為會變更為允許在呼叫堆疊向上傳播的未處理例外狀況。 此行為可以透過應用程式組態檔停用。 如需詳細資訊，請參閱[受控執行緒中的例外狀況](~/docs/standard/threading/exceptions-in-managed-threads.md)。  
  
   
  
## Examples  
 下列程式碼範例會設定這兩個錯誤發生的事件處理常式 Windows Forms 執行緒和其他執行緒上發生的錯誤。 它會設定<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>，讓所有的錯誤會由應用程式，不論應用程式的使用者設定檔中的設定。 它會使用<xref:System.Windows.Forms.Application.ThreadException>事件前者，而<xref:System.AppDomain.UnhandledException>後者的事件。 因為<xref:System.AppDomain.UnhandledException>無法防止應用程式終止，範例只會記錄錯誤終止之前，系統事件記錄檔中。  
  
 此範例假設您已經定義了兩個<xref:System.Windows.Forms.Button>控制項`button1`和`button2`上您<xref:System.Windows.Forms.Form>類別。  
  
 [!code-cpp[Classic Application.ThreadException Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ThreadException Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ThreadException Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ThreadException Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Automatic">
      <MemberSignature Language="C#" Value="Automatic" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.UnhandledExceptionMode Automatic = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.UnhandledExceptionMode.Automatic" />
      <MemberSignature Language="VB.NET" Value="Automatic" />
      <MemberSignature Language="C++ CLI" Value="Automatic" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.UnhandledExceptionMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>除非應用程式的組態檔中另有指定，否則會將所有的例外狀況傳送至 <see cref="E:System.Windows.Forms.Application.ThreadException" /> 處理常式。</summary>
      </Docs>
    </Member>
    <Member MemberName="CatchException">
      <MemberSignature Language="C#" Value="CatchException" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.UnhandledExceptionMode CatchException = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.UnhandledExceptionMode.CatchException" />
      <MemberSignature Language="VB.NET" Value="CatchException" />
      <MemberSignature Language="C++ CLI" Value="CatchException" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.UnhandledExceptionMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>一直會將例外狀況傳送至 <see cref="E:System.Windows.Forms.Application.ThreadException" /> 處理常式。 忽略應用程式組態檔。</summary>
      </Docs>
    </Member>
    <Member MemberName="ThrowException">
      <MemberSignature Language="C#" Value="ThrowException" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.UnhandledExceptionMode ThrowException = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.UnhandledExceptionMode.ThrowException" />
      <MemberSignature Language="VB.NET" Value="ThrowException" />
      <MemberSignature Language="C++ CLI" Value="ThrowException" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.UnhandledExceptionMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>一定不要將例外狀況傳送至 <see cref="E:System.Windows.Forms.Application.ThreadException" /> 處理常式。 忽略應用程式組態檔。</summary>
      </Docs>
    </Member>
  </Members>
</Type>