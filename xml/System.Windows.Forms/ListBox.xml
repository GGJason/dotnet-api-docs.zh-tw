<Type Name="ListBox" FullName="System.Windows.Forms.ListBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc917b2a7f8b2af139eda389b53d4d2098c00aea" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36519101" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ListBox : System.Windows.Forms.ListControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListBox extends System.Windows.Forms.ListControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListBox" />
  <TypeSignature Language="VB.NET" Value="Public Class ListBox&#xA;Inherits ListControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListBox : System::Windows::Forms::ListControl" />
  <TypeSignature Language="F#" Value="type ListBox = class&#xA;    inherit ListControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ListControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("SelectedValue")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示要顯示項目清單的 Windows 控制項。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox>控制項可讓您顯示給使用者，使用者可以按一下選取的項目清單。 A<xref:System.Windows.Forms.ListBox>控制項可以提供單一或多個選取項目使用<xref:System.Windows.Forms.ListBox.SelectionMode%2A>屬性。 <xref:System.Windows.Forms.ListBox>也提供<xref:System.Windows.Forms.ListBox.MultiColumn%2A>，啟用項目的資料行，而不是直接垂直清單中的項目顯示的屬性。 與這個項目，此控制項可以顯示更明顯可見的項目，使用者不再需要捲動項目。  
  
 一般而言，Windows 控制代碼的繪圖中顯示的項目工作<xref:System.Windows.Forms.ListBox>。 您可以使用<xref:System.Windows.Forms.ListBox.DrawMode%2A>屬性，並控制代碼<xref:System.Windows.Forms.ListBox.MeasureItem>和<xref:System.Windows.Forms.ListBox.DrawItem>事件，因此您可以覆寫繪製 Windows 自動提供，並自行繪製項目。 您可以使用主控描繪<xref:System.Windows.Forms.ListBox>控制項以顯示在清單中的變動高度項目、 影像或不同的色彩或每個項目的文字字型。 <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>屬性， <xref:System.Windows.Forms.ListBox.GetItemHeight%2A>，和<xref:System.Windows.Forms.ListBox.GetItemRectangle%2A>也可協助您繪製您自己的項目。  
  
 除了顯示和選取的功能，<xref:System.Windows.Forms.ListBox>也提供功能，可讓您有效率地將項目加入<xref:System.Windows.Forms.ListBox>並找出清單的項目內的文字。 <xref:System.Windows.Forms.ListBox.BeginUpdate%2A>和<xref:System.Windows.Forms.ListBox.EndUpdate%2A>方法可讓您新增的項目大量<xref:System.Windows.Forms.ListBox>不用每次重繪控制項項目加入至清單。 <xref:System.Windows.Forms.ListBox.FindString%2A>和<xref:System.Windows.Forms.ListBox.FindStringExact%2A>方法可讓您搜尋包含特定的搜尋字串的清單中的項目。  
  
 <xref:System.Windows.Forms.ListBox.Items%2A>， <xref:System.Windows.Forms.ListBox.SelectedItems%2A>，和<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>屬性提供的存取權由三個集合<xref:System.Windows.Forms.ListBox>。 下表概述所使用的三個集合<xref:System.Windows.Forms.ListBox>和其控制項中的使用。  
  
|集合類別|使用中 <xref:System.Windows.Forms.ListBox>|  
|----------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|  
|<xref:System.Windows.Forms.ListBox.ObjectCollection>|包含所包含的所有項目<xref:System.Windows.Forms.ListBox>控制項。|  
|<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>|包含集合選取的項目，其中包含的項目子集在<xref:System.Windows.Forms.ListBox>控制項。|  
|<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>|包含一組選取的索引，這是索引的子集的<xref:System.Windows.Forms.ListBox.ObjectCollection>。 這些索引指定已選取項目。|  
  
 下列三個範例顯示三個索引的集合，<xref:System.Windows.Forms.ListBox>類別支援。  
  
 下表顯示如何的範例<xref:System.Windows.Forms.ListBox.ObjectCollection>儲存的項目<xref:System.Windows.Forms.ListBox>以及其中的選取狀態範例<xref:System.Windows.Forms.ListBox>。  
  
|索引|項目|在清單方塊中選取狀態|  
|-----------|----------|----------------------------------------|  
|0|object1|未選取|  
|1|object2|已選取|  
|2|object3|未選取|  
|3|object4|已選取|  
|4|object5|已選取|  
  
 根據<xref:System.Windows.Forms.ListBox.ObjectCollection>，如上表所示，此表格顯示如何<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>會出現。  
  
|索引|項目|  
|-----------|----------|  
|0|object2|  
|1|object4|  
|2|object5|  
  
 根據<xref:System.Windows.Forms.ListBox.ObjectCollection>，如上表所示，此表格顯示如何<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>會出現。  
  
|索引|項目的索引|  
|-----------|-------------------|  
|0|1|  
|1|3|  
|2|4|  
  
 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>類別可讓您將項目加入<xref:System.Windows.Forms.ListBox>。 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>加入成員時，方法可以接受任何物件<xref:System.Windows.Forms.ListBox>。 當物件新增至<xref:System.Windows.Forms.ListBox>，此控制項會使用中定義的文字<xref:System.Object.ToString%2A>物件的方法除非此物件內的成員名稱會指定於<xref:System.Windows.Forms.ListControl.DisplayMember%2A>屬性。 除了使用加入項目<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>類別，您也可以新增項目使用<xref:System.Windows.Forms.ListControl.DataSource%2A>屬性<xref:System.Windows.Forms.ListControl>類別。  
  
> [!NOTE]
>  如果您有<xref:System.Windows.Forms.ListBox>， <xref:System.Windows.Forms.ComboBox>，或<xref:System.Windows.Forms.CheckedListBox>基底 Windows form 並想来修改這些控制項衍生的 Windows form 中的字串集合，基底的 Windows form 中的這些控制項的字串集合必須是空白。 如果字串集合不是空的它們會變成唯讀時衍生另一個 Windows form。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立<xref:System.Windows.Forms.ListBox>控制項資料行中顯示多個項目，可以有多個控制項的清單中選取的項目。 如需範例程式碼會加入到 50 個項目<xref:System.Windows.Forms.ListBox>使用<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>類別，然後再選取三個項目從清單中使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法。 然後程式碼會顯示的值從<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>集合，到<xref:System.Windows.Forms.ListBox.SelectedItems%2A>屬性，而<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>，到<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>屬性。 這個範例需要是位於該程式碼，並從呼叫<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.ListBox" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何建立<xref:System.Windows.Forms.ListBox>控制項資料行中顯示多個項目，可以有多個控制項的清單中選取的項目。 如需範例程式碼會加入到 50 個項目<xref:System.Windows.Forms.ListBox>使用<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>類別，然後再選取三個項目從清單中使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法。 然後程式碼會顯示的值從<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>集合，到<xref:System.Windows.Forms.ListBox.SelectedItems%2A>屬性，而<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>，到<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>屬性。 這個範例需要是位於該程式碼，並從呼叫<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddItemsCore">
      <MemberSignature Language="C#" Value="protected virtual void AddItemsCore (object[] value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddItemsCore(object[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.AddItemsCore(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddItemsCore (value As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddItemsCore(cli::array &lt;System::Object ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddItemsCore : obj[] -&gt; unit&#xA;override this.AddItemsCore : obj[] -&gt; unit" Usage="listBox.AddItemsCore value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated.  There is no replacement.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="value">物件的陣列。</param>
        <summary>這個成員已過時，而且沒有任何取代成員。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowSelection">
      <MemberSignature Language="C#" Value="protected override bool AllowSelection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.AllowSelection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property AllowSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool AllowSelection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowSelection : bool" Usage="System.Windows.Forms.ListBox.AllowSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Windows.Forms.ListBox" /> 目前是否啟用清單項目的選取。</summary>
        <value>如果 <see cref="T:System.Windows.Forms.SelectionMode" /> 不是 <see cref="F:System.Windows.Forms.SelectionMode.None" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListBox.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定控制項的背景色彩。</summary>
        <value>
          <see cref="T:System.Drawing.Color" />，代表控制項的背景色彩。 預設值為 <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> 屬性的值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImage : System.Drawing.Image with get, set" Usage="System.Windows.Forms.ListBox.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>這個屬性與這個類別無關。</summary>
        <value>表單的背景影像。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性與這個類別無關。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageChanged : EventHandler " Usage="member this.BackgroundImageChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於標籤 (Label) 的 <see cref="P:System.Windows.Forms.ListBox.BackgroundImage" /> 屬性變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個事件與這個類別無關。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayout : System.Windows.Forms.ImageLayout with get, set" Usage="System.Windows.Forms.ListBox.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.ListBox" /> 列舉型別中所定義的 <see cref="T:System.Windows.Forms.ImageLayout" /> 背景影像配置。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageLayout" /> 的其中一個值。 這些值為 <see langword="Center" />、<see langword="None" />、<see langword="Stretch" />、<see langword="Tile" /> 或 <see langword="Zoom" />。 <see langword="Center" /> 為預設值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性與這個類別無關。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的列舉值不存在。</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayoutChanged : EventHandler " Usage="member this.BackgroundImageLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="P:System.Windows.Forms.ListBox.BackgroundImageLayout" /> 屬性變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個事件與這個類別無關。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.BeginUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginUpdate();" />
      <MemberSignature Language="F#" Value="member this.BeginUpdate : unit -&gt; unit" Usage="listBox.BeginUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>藉由在呼叫 <see cref="T:System.Windows.Forms.ListBox" /> 方法之前防止繪製控制項，便可在每次將項目加入至 <see cref="M:System.Windows.Forms.ListBox.EndUpdate" /> 的同時維持效能。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新增多個項目，最好<xref:System.Windows.Forms.ListBox>是使用<xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>類別 (透過<xref:System.Windows.Forms.ListBox.Items%2A>屬性<xref:System.Windows.Forms.ListBox>)。 這可讓您將項目陣列加入至單一作業中的清單。 不過，如果您想要加入的項目一於使用<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>類別，您可以使用<xref:System.Windows.Forms.ListBox.BeginUpdate%2A>方法，以防止重繪控制項<xref:System.Windows.Forms.ListBox>每個項目新增至清單的時間。 完成的工作項目加入清單後，請呼叫<xref:System.Windows.Forms.ListBox.EndUpdate%2A>方法，以啟用<xref:System.Windows.Forms.ListBox>來重新繪製。 加入項目可以防止這種 flickered 繪圖的<xref:System.Windows.Forms.ListBox>當正在大量項目加入至清單。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Windows.Forms.ListBox.BeginUpdate%2A>和<xref:System.Windows.Forms.ListBox.EndUpdate%2A>方法時加入五千項目至<xref:System.Windows.Forms.ListBox>。 這個範例需要<xref:System.Windows.Forms.ListBox>控制項，名為`listBox1`，已新增至<xref:System.Windows.Forms.Form>並放置在表單內和從它呼叫這個方法。  
  
 [!code-cpp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.EndUpdate" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BorderStyle : System.Windows.Forms.BorderStyle with get, set" Usage="System.Windows.Forms.ListBox.BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.ListBox" /> 周圍所繪製的框線類型。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.BorderStyle" /> 值。 預設值為 <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">該值不是其中一個 <see cref="T:System.Windows.Forms.BorderStyle" /> 值。</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="ClearSelected">
      <MemberSignature Language="C#" Value="public void ClearSelected ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearSelected() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ClearSelected" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearSelected ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearSelected();" />
      <MemberSignature Language="F#" Value="member this.ClearSelected : unit -&gt; unit" Usage="listBox.ClearSelected " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取消選取 <see cref="T:System.Windows.Forms.ListBox" /> 中的所有項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法相當於設定<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>為負一 (-1) 的屬性。 若要快速地取消選取清單中的所有項目，您可以使用這個方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>屬性<xref:System.Windows.Forms.ListBox.TopIndex%2A>屬性，以將目前選取的項目移至的顯示區域中的項目清單的頂端<xref:System.Windows.Forms.ListBox>。 進一步的範例將示範如何移除項目使用<xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType>類別，以及如何清除所有項目選取項目使用<xref:System.Windows.Forms.ListBox.ClearSelected%2A>方法。 程式碼第一次將目前選取的項目<xref:System.Windows.Forms.ListBox>到清單頂端。 此程式碼再移除目前選取的項目之前的所有項目，並清除所有選取項目中的<xref:System.Windows.Forms.ListBox>。 這個範例需要<xref:System.Windows.Forms.ListBox>包含的項目已加入至表單和中，項目目前已選取<xref:System.Windows.Forms.ListBox>。  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於按一下 <see cref="T:System.Windows.Forms.ListBox" /> 控制項時。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidth">
      <MemberSignature Language="C#" Value="public int ColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ColumnWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ColumnWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ColumnWidth : int with get, set" Usage="System.Windows.Forms.ListBox.ColumnWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定多資料行 <see cref="T:System.Windows.Forms.ListBox" /> 中的資料行寬度。</summary>
        <value>控制項中每個資料行的寬度 (單位為像素)。 預設值為 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您將值設定為零 (0) 時，預設寬度被指派給每個資料行。 如果<xref:System.Windows.Forms.ListBox>是多重資料行<xref:System.Windows.Forms.ListBox>，這個屬性傳回的清單中的每個資料行的目前寬度。 您可以使用這個屬性，以確保每個資料行中的多重資料行<xref:System.Windows.Forms.ListBox>可正確顯示其項目。  
  
   
  
## Examples  
 下列程式碼範例示範簡單兩欄<xref:System.Windows.Forms.ListBox>。  
  
 [!code-csharp[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">將小於零的值指派給屬性。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateItemCollection">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ListBox.ObjectCollection CreateItemCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.ListBox/ObjectCollection CreateItemCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.CreateItemCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateItemCollection () As ListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::ListBox::ObjectCollection ^ CreateItemCollection();" />
      <MemberSignature Language="F#" Value="abstract member CreateItemCollection : unit -&gt; System.Windows.Forms.ListBox.ObjectCollection&#xA;override this.CreateItemCollection : unit -&gt; System.Windows.Forms.ListBox.ObjectCollection" Usage="listBox.CreateItemCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立項目集合的新執行個體。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />，代表新的項目集合。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>您可以提供不同的集合，用來儲存您的項目衍生類別中覆寫此程式。</para>
        </block>
        <altmember cref="T:System.Windows.Forms.ListBox.ObjectCollection" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.ListBox.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>建立控制代碼時，取得必要的建立參數。</summary>
        <value>
          <see cref="T:System.Windows.Forms.CreateParams" />，包含建立控制項之控制代碼時所需的建立參數。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於與 unmanaged 程式碼的作業。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CustomTabOffsets">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.IntegerCollection CustomTabOffsets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/IntegerCollection CustomTabOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.CustomTabOffsets" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomTabOffsets As ListBox.IntegerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::IntegerCollection ^ CustomTabOffsets { System::Windows::Forms::ListBox::IntegerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomTabOffsets : System.Windows.Forms.ListBox.IntegerCollection" Usage="System.Windows.Forms.ListBox.CustomTabOffsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+IntegerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Windows.Forms.ListBox" /> 中各項目之間的定位點寬度。</summary>
        <value>整數的集合，表示定位點寬度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 整數陣列 索引標籤中含有空格遞增的順序。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultItemHeight">
      <MemberSignature Language="C#" Value="public const int DefaultItemHeight = 13;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 DefaultItemHeight = (13)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ListBox.DefaultItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultItemHeight As Integer  = 13" />
      <MemberSignature Language="C++ CLI" Value="public: int DefaultItemHeight = 13;" />
      <MemberSignature Language="F#" Value="val mutable DefaultItemHeight : int" Usage="System.Windows.Forms.ListBox.DefaultItemHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>13</MemberValue>
      <Docs>
        <summary>指定主控描繪 <see cref="T:System.Windows.Forms.ListBox" /> 的預設項目高度。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.ListBox.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得控制項的預設大小。</summary>
        <value>控制項的預設 <see cref="T:System.Drawing.Size" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawItemEventHandler ^ DrawItem;" />
      <MemberSignature Language="F#" Value="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " Usage="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於主控描繪 <see cref="T:System.Windows.Forms.ListBox" /> 的視覺外觀變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件由描繪<xref:System.Windows.Forms.ListBox>。 此事件，才引發的時機<xref:System.Windows.Forms.ListBox.DrawMode%2A>屬性設定為`DrawMode.OwnerDrawFixed`或`DrawMode.OwnerDrawVariable`。 您可以使用這個事件來執行繪製項目所需的工作<xref:System.Windows.Forms.ListBox>。 如果您有可變動大小的項目 (當<xref:System.Windows.Forms.ListBox.DrawMode%2A>屬性設定為`DrawMode.OwnerDrawVariable`)，繪製項目之前,<xref:System.Windows.Forms.ListBox.MeasureItem>就會引發事件。 您可以建立事件處理常式<xref:System.Windows.Forms.ListBox.MeasureItem>事件，以指定要繪製的事件處理常式中的項目大小<xref:System.Windows.Forms.ListBox.DrawItem>事件。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立主控描繪<xref:System.Windows.Forms.ListBox>項目。 程式碼會使用<xref:System.Windows.Forms.ListBox.DrawMode%2A>屬性，指定繪製的項目固定的大小和<xref:System.Windows.Forms.ListBox.DrawItem>事件以執行每個項目至繪圖<xref:System.Windows.Forms.ListBox>。 範例程式碼使用的屬性和方法的<xref:System.Windows.Forms.DrawItemEventArgs>類別當做參數傳遞至事件處理常式繪製項目。 這個範例需要<xref:System.Windows.Forms.ListBox>控制項稱為`listBox1`已新增至表單，而且<xref:System.Windows.Forms.ListBox.DrawItem>事件由範例程式碼中定義的事件處理常式。 這個範例也會需要的項目已加入至<xref:System.Windows.Forms.ListBox>以 「 Apple 」、 「 橙色 」，和"梅紅"文字的順序。  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DrawMode">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DrawMode DrawMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DrawMode DrawMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.DrawMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DrawMode As DrawMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::DrawMode DrawMode { System::Windows::Forms::DrawMode get(); void set(System::Windows::Forms::DrawMode value); };" />
      <MemberSignature Language="F#" Value="member this.DrawMode : System.Windows.Forms.DrawMode with get, set" Usage="System.Windows.Forms.ListBox.DrawMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定控制項的繪圖模式。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.DrawMode" /> 值，表示控制項項目的繪圖模式。 預設值為 <see langword="DrawMode.Normal" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何建立主控描繪<xref:System.Windows.Forms.ListBox>項目。 程式碼會使用<xref:System.Windows.Forms.ListBox.DrawMode%2A>屬性，指定繪製的項目固定的大小和<xref:System.Windows.Forms.ListBox.DrawItem>事件以執行每個項目至繪圖<xref:System.Windows.Forms.ListBox>。 範例程式碼使用的屬性和方法的<xref:System.Windows.Forms.DrawItemEventArgs>類別當做參數傳遞至事件處理常式繪製項目。 這個範例需要<xref:System.Windows.Forms.ListBox>控制項稱為`listBox1`已新增至表單，而且<xref:System.Windows.Forms.ListBox.DrawItem>事件由範例程式碼中定義的事件處理常式。 這個範例也會需要的項目已加入至<xref:System.Windows.Forms.ListBox>以 「 Apple 」、 「 橙色 」，和"梅紅"文字的順序。  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指派給屬性的值不是 <see cref="T:System.Windows.Forms.DrawMode" /> 列舉的成員。</exception>
        <exception cref="T:System.ArgumentException">多資料行 <see cref="T:System.Windows.Forms.ListBox" /> 的高度無法改變。</exception>
        <altmember cref="T:System.Windows.Forms.DrawMode" />
        <altmember cref="E:System.Windows.Forms.ListBox.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.EndUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUpdate();" />
      <MemberSignature Language="F#" Value="member this.EndUpdate : unit -&gt; unit" Usage="listBox.EndUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在 <see cref="M:System.Windows.Forms.ListBox.BeginUpdate" /> 方法暫停繪製之後，繼續繪製 <see cref="T:System.Windows.Forms.ListBox" /> 控制項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將項目加入，最好<xref:System.Windows.Forms.ListBox>是使用<xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>類別 (透過<xref:System.Windows.Forms.ListBox.Items%2A>屬性<xref:System.Windows.Forms.ListBox>)。 這可讓您一次加入清單的項目陣列。 不過，如果您想要加入的項目一於使用<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>類別，您可以使用<xref:System.Windows.Forms.ListBox.BeginUpdate%2A>方法，以防止重繪控制項<xref:System.Windows.Forms.ListBox>每個項目新增至清單的時間。 完成的工作項目加入清單後，請呼叫<xref:System.Windows.Forms.ListBox.EndUpdate%2A>方法，以啟用<xref:System.Windows.Forms.ListBox>來重新繪製。 加入項目可以防止這種 flickered 繪圖的<xref:System.Windows.Forms.ListBox>當正在大量項目加入至清單。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Windows.Forms.ListBox.BeginUpdate%2A>和<xref:System.Windows.Forms.ListBox.EndUpdate%2A>方法時加入五千項目至<xref:System.Windows.Forms.ListBox>。 這個範例需要<xref:System.Windows.Forms.ListBox>控制項，名為`listBox1`，已新增至<xref:System.Windows.Forms.Form>並放置在表單內和從它呼叫這個方法。  
  
 [!code-cpp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.BeginUpdate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindString">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>尋找 <see cref="T:System.Windows.Forms.ListBox" /> 中第一個以指定字串為開頭的項目。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindString">
      <MemberSignature Language="C#" Value="public int FindString (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindString(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindString (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindString(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.FindString : string -&gt; int" Usage="listBox.FindString s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要搜尋的文字。</param>
        <summary>尋找 <see cref="T:System.Windows.Forms.ListBox" /> 中第一個以指定字串為開頭的項目。</summary>
        <returns>第一個找到項目之以零起始的索引，如果沒有相符的項目則傳回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法所執行的搜尋不區分大小寫。 搜尋會尋找的文字部分符合指定的搜尋字串參數， `s`。 您可以使用這個方法來搜尋符合指定之字串的第一個項目。 然後，您可以執行工作，例如移除包含使用的搜尋文字的項目<xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A>方法或變更項目的文字。 一旦找到指定的文字，如果您想要搜尋的文字中的其他執行個體<xref:System.Windows.Forms.ListBox>，您可以使用的版本<xref:System.Windows.Forms.ListBox.FindString%2A>方法提供的參數指定內的起始索引<xref:System.Windows.Forms.ListBox>。 如果您想要執行精確的字詞相符而不是在部分符合的搜尋，使用<xref:System.Windows.Forms.ListBox.FindStringExact%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.FindString%2A>方法來搜尋字串中的第一個執行個體<xref:System.Windows.Forms.ListBox>。 如果沒有項目會找到符合的搜尋字串<xref:System.Windows.Forms.ListBox.FindString%2A>傳回-1 值和範例顯示<xref:System.Windows.Forms.MessageBox>。 如果找到符合搜尋文字項目，此範例會使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法，以選取的項目<xref:System.Windows.Forms.ListBox>。  
  
 [!code-cpp[ListBox.FindString2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString2/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString2/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="s" /> 參數的值小於 -1，或者大於等於項目計數。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindString">
      <MemberSignature Language="C#" Value="public int FindString (string s, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindString(string s, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindString(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindString (s As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindString(System::String ^ s, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.FindString : string * int -&gt; int" Usage="listBox.FindString (s, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">要搜尋的文字。</param>
        <param name="startIndex">搜尋第一個項目之前，項目以零為起始的索引。 設為負一 (-1) 便可從控制項的開頭開始搜尋。</param>
        <summary>尋找 <see cref="T:System.Windows.Forms.ListBox" /> 中第一個以指定字串為開頭的項目。 搜尋作業將於指定起始索引處開始進行。</summary>
        <returns>第一個找到項目之以零起始的索引，如果沒有相符的項目則傳回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法所執行的搜尋不區分大小寫。 搜尋會尋找的文字部分符合指定的搜尋字串參數， `s`。 您可以使用這個方法來搜尋符合指定之字串的項目清單中指定的起始索引處的第一個項目<xref:System.Windows.Forms.ListBox>。 然後，您可以執行工作，例如移除包含使用的搜尋文字的項目<xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A>方法或變更項目的文字。 呼叫使用這個方法不會指定起始索引版本之後，通常使用這個方法。 一旦在清單中找到的初始項目，這個方法通常用來進一步搜尋文字的執行個體指定尋找中的索引位置`startIndex`參數搜尋文字的第一個找到的執行個體後的項目。 如果您想要執行精確的字詞相符而不是在部分符合的搜尋，使用<xref:System.Windows.Forms.ListBox.FindStringExact%2A>方法。  
  
> [!NOTE]
>  當搜尋到了底部<xref:System.Windows.Forms.ListBox>，它會繼續從頂端搜尋<xref:System.Windows.Forms.ListBox>回所指定的項目`startIndex`參數。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.FindString%2A>方法來搜尋的項目中的搜尋文字的所有執行個體<xref:System.Windows.Forms.ListBox>。 此範例會使用新版<xref:System.Windows.Forms.ListBox.FindString%2A>方法可讓您指定要從中進行持續的所有項目中搜尋的開始搜尋索引<xref:System.Windows.Forms.ListBox>。 此範例也示範如何判斷何時<xref:System.Windows.Forms.ListBox.FindString%2A>方法開始之後的項目，以避免遞迴搜尋清單的底部，從清單的頂端搜尋。 一旦項目存在於<xref:System.Windows.Forms.ListBox>，它們會選取使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法。  
  
 [!code-cpp[ListBox.FindString#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> 參數小於零，或者大於等於 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> 類別的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> 屬性值。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindStringExact">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>尋找 <see cref="T:System.Windows.Forms.ListBox" /> 中第一個與指定字串完全相符的項目。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindStringExact">
      <MemberSignature Language="C#" Value="public int FindStringExact (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindStringExact(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindStringExact (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindStringExact(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.FindStringExact : string -&gt; int" Usage="listBox.FindStringExact s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要搜尋的文字。</param>
        <summary>尋找 <see cref="T:System.Windows.Forms.ListBox" /> 中第一個與指定字串完全相符的項目。</summary>
        <returns>第一個找到項目之以零起始的索引，如果沒有相符的項目則傳回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法所執行的搜尋不區分大小寫。 搜尋會尋找完全相符搜尋字串參數中指定的單字`s`。 您可以使用這個方法來搜尋符合指定之字串的第一個項目。 然後，您可以執行工作，例如移除包含使用的搜尋文字的項目<xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A>方法或變更項目的文字。 一旦找到指定的文字，如果您想要搜尋的文字中的其他執行個體<xref:System.Windows.Forms.ListBox>，您可以使用的版本<xref:System.Windows.Forms.ListBox.FindStringExact%2A>方法提供的參數指定內的起始索引<xref:System.Windows.Forms.ListBox>。 如果您想要執行部分文字搜尋，而不是正確的字相符項目，使用<xref:System.Windows.Forms.ListBox.FindString%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.FindStringExact%2A?displayProperty=nameWithType>方法來搜尋<xref:System.Windows.Forms.ListBox>完全符合指定的字串的項目控制項。 如果沒有項目找不到符合搜尋字串，<xref:System.Windows.Forms.ListBox.FindStringExact%2A>傳回-1 值和範例顯示<xref:System.Windows.Forms.MessageBox>。 如果找到符合搜尋文字項目，此範例會使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法，以選取的項目<xref:System.Windows.Forms.ListBox>。  
  
 [!code-cpp[ListBox.FindStringExact#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindStringExact/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindStringExact#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindStringExact/CS/form1.cs#1)]
 [!code-vb[ListBox.FindStringExact#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindStringExact/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindStringExact">
      <MemberSignature Language="C#" Value="public int FindStringExact (string s, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindStringExact(string s, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindStringExact(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindStringExact (s As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindStringExact(System::String ^ s, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.FindStringExact : string * int -&gt; int" Usage="listBox.FindStringExact (s, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">要搜尋的文字。</param>
        <param name="startIndex">搜尋第一個項目之前，項目以零為起始的索引。 設為負一 (-1) 便可從控制項的開頭開始搜尋。</param>
        <summary>尋找 <see cref="T:System.Windows.Forms.ListBox" /> 中第一個與指定字串完全相符的項目。 搜尋作業將於指定起始索引處開始進行。</summary>
        <returns>第一個找到項目之以零起始的索引，如果沒有相符的項目則傳回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法所執行的搜尋不區分大小寫。 搜尋會尋找完全符合指定的搜尋字串參數的文字`s`。 您可以使用這個方法來搜尋符合指定之字串的項目清單中指定的起始索引處的第一個項目<xref:System.Windows.Forms.ListBox>。 然後，您可以執行工作，例如刪除包含搜尋文字使用的項目<xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A>方法或變更項目的文字。 呼叫使用這個方法不會指定起始索引版本之後，通常使用這個方法。 一旦在清單中找到的初始項目，這個方法通常用來進一步搜尋文字的執行個體指定尋找中的索引位置`startIndex`參數搜尋文字的第一個找到的執行個體後的項目。 如果您想要執行部分文字搜尋，而不是正確的字相符項目，使用<xref:System.Windows.Forms.ListBox.FindString%2A>方法。  
  
> [!NOTE]
>  當搜尋到了底部<xref:System.Windows.Forms.ListBox>，它會繼續從頂端搜尋<xref:System.Windows.Forms.ListBox>回所指定的項目`startIndex`參數。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.FindStringExact%2A>方法來搜尋中的所有項目的<xref:System.Windows.Forms.ListBox>完全符合指定的搜尋文字。 此範例會使用新版<xref:System.Windows.Forms.ListBox.FindStringExact%2A>方法可讓您指定要從中進行持續的所有項目中搜尋的開始搜尋索引<xref:System.Windows.Forms.ListBox>。 此範例也示範如何判斷何時<xref:System.Windows.Forms.ListBox.FindStringExact%2A>方法開始之後的項目，以避免遞迴搜尋清單的底部，從清單的頂端搜尋。 一旦項目存在於<xref:System.Windows.Forms.ListBox>，它們會選取使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法。  
  
 [!code-cpp[ListBox.FindStringExact2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindStringExact2/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindStringExact2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindStringExact2/CS/form1.cs#1)]
 [!code-vb[ListBox.FindStringExact2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindStringExact2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> 參數小於零，或者大於等於 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> 類別的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> 屬性值。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public override System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Font" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Font : System.Drawing.Font with get, set" Usage="System.Windows.Forms.ListBox.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定控制項顯示之文字字型。</summary>
        <value>要套用至控制項顯示之文字的 <see cref="T:System.Drawing.Font" />。 預設值為 <see cref="P:System.Windows.Forms.Control.DefaultFont" /> 屬性的值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListBox.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定控制項的前景色彩。</summary>
        <value>控制項的前景 <see cref="T:System.Drawing.Color" />。 預設值為 <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> 屬性的值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemHeight">
      <MemberSignature Language="C#" Value="public int GetItemHeight (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetItemHeight(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemHeight (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetItemHeight(int index);" />
      <MemberSignature Language="F#" Value="member this.GetItemHeight : int -&gt; int" Usage="listBox.GetItemHeight index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要傳回其高度的項目之以零為起始的索引。</param>
        <summary>傳回 <see cref="T:System.Windows.Forms.ListBox" /> 中項目的高度。</summary>
        <returns>指定項目的高度 (單位為像素)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.ListBox.DrawMode%2A>屬性未設定為`DrawMode.OwnerDrawVariable`，因為在標準的所有項目，則會忽略索引參數的值<xref:System.Windows.Forms.ListBox>大小都一樣。 您可以使用這個屬性，當您使用描繪<xref:System.Windows.Forms.ListBox>來判斷任何項目內的大小<xref:System.Windows.Forms.ListBox>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 參數的指定值小於零或大於項目計數。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetItemRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRectangle (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRectangle(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetItemRectangle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRectangle (index As Integer) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRectangle(int index);" />
      <MemberSignature Language="F#" Value="member this.GetItemRectangle : int -&gt; System.Drawing.Rectangle" Usage="listBox.GetItemRectangle index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">項目之以零起始的索引，您將要傳回該項目的週框。</param>
        <summary>傳回 <see cref="T:System.Windows.Forms.ListBox" /> 中項目的週框 (Bounding Rectangle)。</summary>
        <returns>
          <see cref="T:System.Drawing.Rectangle" />，表示特定項目的週框。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在指定的項目`index`看不到參數，這個方法所傳回的矩形將控制項的可見部分之外。 您可以使用這個方法來決定的大小和位置的清單內的項目。 若要取得的項目高度，特別是可變高度擁有者繪製的清單項目，您可以使用<xref:System.Windows.Forms.ListBox.GetItemHeight%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 參數小於零，或者大於等於 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> 類別的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> 屬性值。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetScaledBounds">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Drawing.Rectangle GetScaledBounds(valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetScaledBounds (bounds As Rectangle, factor As SizeF, specified As BoundsSpecified) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Drawing::Rectangle GetScaledBounds(System::Drawing::Rectangle bounds, System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.GetScaledBounds : System.Drawing.Rectangle * System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; System.Drawing.Rectangle" Usage="listBox.GetScaledBounds (bounds, factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="bounds">
          <see cref="T:System.Drawing.Rectangle" />，指定要為其擷取顯示範圍的區域。</param>
        <param name="factor">控制項範圍的高度和寬度。</param>
        <param name="specified">其中一個 <see cref="T:System.Windows.Forms.BoundsSpecified" /> 值，指定在定義控制項的大小和位置時所用的控制項範圍。</param>
        <summary>擷取縮放 <see cref="T:System.Windows.Forms.ListBox" /> 的範圍。</summary>
        <returns>
          <see cref="T:System.Drawing.Rectangle" />，表示縮放控制項的範圍。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox>類別覆寫<xref:System.Windows.Forms.Control.GetScaledBounds%2A?displayProperty=nameWithType>方法，以確保要求的高度為隨著調整，而不是目前的高度。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelected">
      <MemberSignature Language="C#" Value="public bool GetSelected (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetSelected(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetSelected(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSelected (index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetSelected(int index);" />
      <MemberSignature Language="F#" Value="member this.GetSelected : int -&gt; bool" Usage="listBox.GetSelected index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">項目之以零起始的索引，可用來判斷該項目是否選取。</param>
        <summary>傳回值，指出是否選取指定的項目。</summary>
        <returns>如果目前在 <see cref="T:System.Windows.Forms.ListBox" /> 中選取指定的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個方法來快速判斷是否選取指定的項目。 需要多個選取項目中的特定項目時所要執行的特定作業時，此方法相當實用<xref:System.Windows.Forms.ListBox>已選取。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.GetSelected%2A>方法來判斷哪些項目中<xref:System.Windows.Forms.ListBox>都選取，才能選擇未選取的項目並取消選取 已選取的項目。 此範例也示範如何使用<xref:System.Windows.Forms.ListBox.SelectionMode%2A>屬性來啟用<xref:System.Windows.Forms.ListBox>有多個選取項目，並使用<xref:System.Windows.Forms.ListBox.Sorted%2A>屬性來示範如何排序的項目<xref:System.Windows.Forms.ListBox>自動。 這個範例需要<xref:System.Windows.Forms.ListBox>具名`listBox1`，已新增至表單，而且`InitializeMyListBox`範例中定義的方法從呼叫<xref:System.Windows.Forms.Form.Load>表單的事件。  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 參數小於零，或者大於等於 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> 類別的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> 屬性值。</exception>
      </Docs>
    </Member>
    <Member MemberName="HorizontalExtent">
      <MemberSignature Language="C#" Value="public int HorizontalExtent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HorizontalExtent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.HorizontalExtent" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalExtent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HorizontalExtent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalExtent : int with get, set" Usage="System.Windows.Forms.ListBox.HorizontalExtent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.ListBox" /> 之水平捲軸可以捲動的寬度。</summary>
        <value>水平捲軸可以捲動控制項的寬度 (單位為像素)。 預設值是零。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性只會報告有用的值如果<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>屬性設定為`true`。 如果寬度<xref:System.Windows.Forms.ListBox>小於這個屬性的值，水平捲軸中水平捲動項<xref:System.Windows.Forms.ListBox>。 如果寬度<xref:System.Windows.Forms.ListBox>等於或大於此值，在水平捲軸會隱藏。 這個屬性的值不會動態更新<xref:System.Windows.Forms.ListBox>。 這個屬性時，非常有用的項目<xref:System.Windows.Forms.ListBox>為主控描繪。 例如，如果的主控描繪項目<xref:System.Windows.Forms.ListBox>是 200 像素寬、 但<xref:System.Windows.Forms.ListBox>為 60 像素寬、<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>屬性必須設為 200，若要捲動控制項的可見區域中的項目右邊緣。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>和<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>屬性，以顯示顯示中的所有項目文字的水平捲軸<xref:System.Windows.Forms.ListBox>控制項。 此範例也會使用<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>屬性，以確認的項目不會部分顯示的大小因<xref:System.Windows.Forms.ListBox>控制項。 這個範例需要<xref:System.Windows.Forms.ListBox>控制項，名為`listBox1`，已新增至表單。  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollbar">
      <MemberSignature Language="C#" Value="public bool HorizontalScrollbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HorizontalScrollbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalScrollbar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HorizontalScrollbar { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalScrollbar : bool with get, set" Usage="System.Windows.Forms.ListBox.HorizontalScrollbar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出選取水平捲軸是否顯示於控制項中。</summary>
        <value>如果水平捲軸顯示於控制項中，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>屬性會決定是否<xref:System.Windows.Forms.ListBox>應該會顯示水平捲軸列時內的項目寬度<xref:System.Windows.Forms.ListBox>延伸超過控制項的右邊緣。 當這個屬性設定為`true`，捲軸會自動顯示根據中的項目寬度<xref:System.Windows.Forms.ListBox>。 如果<xref:System.Windows.Forms.ListBox>會描繪<xref:System.Windows.Forms.ListBox>，才能正確顯示水平捲軸，您必須設定<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>和<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>屬性，以顯示顯示中的所有項目文字的水平捲軸<xref:System.Windows.Forms.ListBox>控制項。 此範例也會使用<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>屬性，以確認的項目不會部分顯示的大小因<xref:System.Windows.Forms.ListBox>控制項。 這個範例需要<xref:System.Windows.Forms.ListBox>控制項，名為`listBox1`，已新增至表單。  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalExtent" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexFromPoint">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回位於指定座標處的項目之以零為起始的索引。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexFromPoint">
      <MemberSignature Language="C#" Value="public int IndexFromPoint (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexFromPoint(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexFromPoint (p As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexFromPoint(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="member this.IndexFromPoint : System.Drawing.Point -&gt; int" Usage="listBox.IndexFromPoint p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">
          <see cref="T:System.Drawing.Point" /> 物件，含有用來取得項目索引的座標。</param>
        <summary>傳回位於指定座標處的項目之以零為起始的索引。</summary>
        <returns>在指定座標處找到的項目之以零起始的索引，如果找不到相符的項目，則傳回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可讓您判斷哪一個項目位於控制項內特定位置。 您可以使用這個方法來決定哪一個項目清單中的選取使用者按一下滑鼠右鍵時<xref:System.Windows.Forms.ListBox>。 游標的位置可以決定，並傳遞至`p`參數<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法，以判斷其項目使用者以滑鼠右鍵按一下滑鼠上。 然後，您就可以顯示快顯功能表給使用者，以便提供工作和特定的項目為基礎的功能。  
  
   
  
## Examples  
 下列程式碼範例示範如何執行拖放作業使用<xref:System.Windows.Forms.ListBox>控制項，其中包含項目並放入<xref:System.Windows.Forms.RichTextBox>控制項。 將表單的建構函式<xref:System.Windows.Forms.RichTextBox.AllowDrop%2A>屬性`true`若要啟用拖放作業在發生<xref:System.Windows.Forms.RichTextBox>。 此範例會使用<xref:System.Windows.Forms.Control.MouseDown>事件<xref:System.Windows.Forms.ListBox>開始拖曳作業藉由呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>方法。 此範例會使用<xref:System.Windows.Forms.Control.DragEnter>事件，以判斷項目拖曳至<xref:System.Windows.Forms.RichTextBox>是有效的資料類型。 <xref:System.Windows.Forms.Control.DragDrop>事件執行的拖曳的項目到實際的卸除<xref:System.Windows.Forms.RichTextBox>控制項內的目前游標位置<xref:System.Windows.Forms.RichTextBox>。 這個範例需要<xref:System.Windows.Forms.Control.DragDrop>和<xref:System.Windows.Forms.Control.DragEnter>事件已連接至範例中定義的事件處理常式。  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexFromPoint">
      <MemberSignature Language="C#" Value="public int IndexFromPoint (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexFromPoint(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexFromPoint (x As Integer, y As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexFromPoint(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.IndexFromPoint : int * int -&gt; int" Usage="listBox.IndexFromPoint (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">要進行搜尋之目標位置的 X 座標。</param>
        <param name="y">要進行搜尋之目標位置的 Y 座標。</param>
        <summary>傳回位於指定座標處的項目之以零為起始的索引。</summary>
        <returns>在指定座標處找到的項目之以零起始的索引，如果找不到相符的項目，則傳回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可讓您判斷哪一個是在控制項內的特定位置的項目。 您可以使用這個方法來決定哪一個項目清單中的選取使用者按一下滑鼠右鍵時<xref:System.Windows.Forms.ListBox>。 游標的位置可以決定，並傳遞至`x`和`y`參數<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法，以判斷其項目使用者以滑鼠右鍵按一下滑鼠上。 然後，您就可以顯示快顯功能表給使用者，以便提供工作和特定的項目為基礎的功能。  
  
   
  
## Examples  
 下列程式碼範例示範如何執行拖放作業使用<xref:System.Windows.Forms.ListBox>控制項，其中包含項目並放入<xref:System.Windows.Forms.RichTextBox>控制項。 將表單的建構函式<xref:System.Windows.Forms.RichTextBox.AllowDrop%2A>屬性`true`若要啟用拖放作業在發生<xref:System.Windows.Forms.RichTextBox>。 此範例會使用<xref:System.Windows.Forms.Control.MouseDown>事件<xref:System.Windows.Forms.ListBox>開始拖曳作業藉由呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>方法。 此範例會使用<xref:System.Windows.Forms.Control.DragEnter>事件，以判斷項目拖曳至<xref:System.Windows.Forms.RichTextBox>是有效的資料類型。 <xref:System.Windows.Forms.Control.DragDrop>事件執行的拖曳的項目到實際的卸除<xref:System.Windows.Forms.RichTextBox>控制項內的目前游標位置<xref:System.Windows.Forms.RichTextBox>。 這個範例需要<xref:System.Windows.Forms.Control.DragDrop>和<xref:System.Windows.Forms.Control.DragEnter>事件已連接至範例中定義的事件處理常式。  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntegralHeight">
      <MemberSignature Language="C#" Value="public bool IntegralHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IntegralHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.IntegralHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property IntegralHeight As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IntegralHeight { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IntegralHeight : bool with get, set" Usage="System.Windows.Forms.ListBox.IntegralHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出控制項是否應該重新調整大小以避免僅顯示部分項目。</summary>
        <value>如果控制項重新調整大小以避免僅顯示部分項目，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當這個屬性設定為`true`，控制項會自動調整大小以確保不部分顯示項目。 如果您想要維護的原始大小<xref:System.Windows.Forms.ListBox>根據表單的空間需求，將此屬性設定為`false`。  
  
 根據預設，<xref:System.Windows.Forms.ListBox>和<xref:System.Windows.Forms.CheckedListBox>大小會使其只顯示整個項目。 如果您想<xref:System.Windows.Forms.ListBox>或<xref:System.Windows.Forms.CheckedListBox>完全填滿停駐的區域，設定<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>至`false`。 這會讓控制項完全填滿區域中，但沒有充分顯示最後一個項目。  
  
 如果<xref:System.Windows.Forms.ListBox>不包含任何項目，這個屬性沒有任何作用。  
  
> [!NOTE]
>  整數類資料的高度為基礎的高度<xref:System.Windows.Forms.ListBox>，而不是工作區高度。 如此一來，當<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>屬性設定`true`，項目仍可以部分顯示才顯示捲軸。  
  
> [!NOTE]
>  如果<xref:System.Windows.Forms.ListBox.DrawMode%2A>屬性設定為`DrawMode.OwnerDrawVariable`，此屬性沒有任何作用。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>和<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>屬性，以顯示顯示中的所有項目文字的水平捲軸<xref:System.Windows.Forms.ListBox>控制項。 此範例也會使用<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>屬性，以確認的項目不會部分顯示的大小因<xref:System.Windows.Forms.ListBox>控制項。 這個範例需要<xref:System.Windows.Forms.ListBox>控制項，名為`listBox1`，已新增至表單。  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ItemHeight">
      <MemberSignature Language="C#" Value="public virtual int ItemHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ItemHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ItemHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ItemHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ItemHeight : int with get, set" Usage="System.Windows.Forms.ListBox.ItemHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(13)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.ListBox" /> 中的項目高度。</summary>
        <value>控制項中的項目高度 (單位為像素)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Windows.Forms.ListBox.DrawMode%2A>屬性設定為`DrawMode.OwnerDrawFixed`，所有項目具有相同的高度。 當<xref:System.Windows.Forms.ListBox.DrawMode%2A>屬性設定為`DrawMode.OwnerDrawVariable`、<xref:System.Windows.Forms.ListBox.ItemHeight%2A>屬性會指定加入至每個項目高度<xref:System.Windows.Forms.ListBox>。 由於在主控描繪清單中的每個項目可以有不同的高度，您可以使用<xref:System.Windows.Forms.ListBox.GetItemHeight%2A>方法來取得中特定項目的高度<xref:System.Windows.Forms.ListBox>。 如果您使用<xref:System.Windows.Forms.ListBox.ItemHeight%2A>屬性<xref:System.Windows.Forms.ListBox>可變高度的項目，這個屬性會傳回第一個項目的高度控制項中。  
  
 最大高度<xref:System.Windows.Forms.ListBox>項目為 255 的像素。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Windows.Forms.ListBox.ItemHeight" /> 屬性設定為小於 0 或超過 255 個像素。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)" />
        <altmember cref="P:System.Windows.Forms.ListBox.DrawMode" />
        <altmember cref="E:System.Windows.Forms.ListBox.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.ObjectCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/ObjectCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As ListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::ObjectCollection ^ Items { System::Windows::Forms::ListBox::ObjectCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : System.Windows.Forms.ListBox.ObjectCollection" Usage="System.Windows.Forms.ListBox.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Windows.Forms.ListBox" /> 的項目。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />，表示 <see cref="T:System.Windows.Forms.ListBox" /> 中的項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此屬性可讓您取得的目前儲存在中的項目清單的參考<xref:System.Windows.Forms.ListBox>。 與這個參考中，您可以將項目加入、 移除項目，並取得集合中的項目計數。 如需可以執行與項目集合之工作的詳細資訊，請參閱<xref:System.Windows.Forms.ListBox.ObjectCollection>類別參考主題。  
  
 您也可以管理的項目<xref:System.Windows.Forms.ListBox>使用<xref:System.Windows.Forms.ListControl.DataSource%2A>屬性。 如果您使用<xref:System.Windows.Forms.ListControl.DataSource%2A>屬性加入項目到<xref:System.Windows.Forms.ListBox>，您可以檢視中的項目<xref:System.Windows.Forms.ListBox>使用<xref:System.Windows.Forms.ListBox.Items%2A>屬性，但是您無法加入或移除的方法清單中的項目<xref:System.Windows.Forms.ListBox.ObjectCollection>。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立<xref:System.Windows.Forms.ListBox>控制項資料行中顯示多個項目，可以有多個控制項的清單中選取的項目。 如需範例程式碼會加入到 50 個項目<xref:System.Windows.Forms.ListBox>使用<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>類別，然後再選取三個項目從清單中使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法。 然後程式碼會顯示的值從<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>集合 (透過<xref:System.Windows.Forms.ListBox.SelectedItems%2A>屬性) 和<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>(透過<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>屬性)。 這個範例需要是位於該程式碼，並從呼叫<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListBox.ObjectCollection" />
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.MeasureItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MeasureItem As MeasureItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MeasureItemEventHandler ^ MeasureItem;" />
      <MemberSignature Language="F#" Value="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " Usage="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於建立主控描繪 <see cref="T:System.Windows.Forms.ListBox" /> 和決定清單項目的大小時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以建立指定大小的項目都會繪製前的此事件的事件處理常式<xref:System.Windows.Forms.ListBox.DrawItem>事件。 此事件，才引發的時機<xref:System.Windows.Forms.ListBox.DrawMode%2A>屬性設定為<xref:System.Windows.Forms.DrawMode.OwnerDrawVariable>。  
  
 最大有效高度<xref:System.Windows.Forms.ListBox>項目為 255 的像素。 設定<xref:System.Windows.Forms.MeasureItemEventArgs.ItemHeight%2A>屬性<xref:System.Windows.Forms.MeasureItemEventArgs>大於 255 時處理這個事件可能會產生非預期的結果值。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範描繪<xref:System.Windows.Forms.ListBox>藉由設定<xref:System.Windows.Forms.ListBox.DrawMode%2A>屬性<xref:System.Windows.Forms.DrawMode.OwnerDrawVariable>和處理<xref:System.Windows.Forms.ListBox.DrawItem>和<xref:System.Windows.Forms.ListBox.MeasureItem>事件。 它也會示範設定<xref:System.Windows.Forms.ListBox.BorderStyle%2A>和<xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A>屬性，而且使用<xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A>方法。  
  
 若要執行此範例中，將它貼入中匯入的空白表單<xref:System.Drawing>命名空間和<xref:System.Windows.Forms>命名空間。 呼叫`InitializeOwnerDrawnListBox`從表單的建構函式或<xref:System.Windows.Forms.Form.Load>事件處理方法。  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.ItemHeight" />
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.MouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseClick;" />
      <MemberSignature Language="F#" Value="member this.MouseClick : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseClick : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當使用者用滑鼠指標按一下 <see cref="T:System.Windows.Forms.ListBox" /> 控制項時發生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiColumn">
      <MemberSignature Language="C#" Value="public bool MultiColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiColumn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.MultiColumn" />
      <MemberSignature Language="VB.NET" Value="Public Property MultiColumn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MultiColumn { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MultiColumn : bool with get, set" Usage="System.Windows.Forms.ListBox.MultiColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Windows.Forms.ListBox" /> 是否支援多個資料行。</summary>
        <value>如果 <see cref="T:System.Windows.Forms.ListBox" /> 支援多個資料行，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 多重資料行<xref:System.Windows.Forms.ListBox>項目放入才能讓垂直捲動不必要的行。 使用者可以使用鍵盤巡覽至目前看不到的資料行。 設定<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>屬性`true`顯示水平捲軸，可讓使用者捲動至目前未顯示的可見區域中的資料行<xref:System.Windows.Forms.ListBox>。 值<xref:System.Windows.Forms.ListBox.ColumnWidth%2A>屬性決定每個資料行的寬度。  
  
   
  
## Examples  
 下列程式碼範例示範簡單兩欄<xref:System.Windows.Forms.ListBox>。  
  
 [!code-csharp[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">多資料行 <see cref="T:System.Windows.Forms.ListBox" /> 的高度無法改變。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
        <altmember cref="P:System.Windows.Forms.ListBox.ColumnWidth" />
      </Docs>
    </Member>
    <Member MemberName="NoMatches">
      <MemberSignature Language="C#" Value="public const int NoMatches = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 NoMatches = (-1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ListBox.NoMatches" />
      <MemberSignature Language="VB.NET" Value="Public Const NoMatches As Integer  = -1" />
      <MemberSignature Language="C++ CLI" Value="public: int NoMatches = -1;" />
      <MemberSignature Language="F#" Value="val mutable NoMatches : int" Usage="System.Windows.Forms.ListBox.NoMatches" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>指定搜尋中並未找到相符的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個常數由<xref:System.Windows.Forms.ListBox.FindString%2A>， <xref:System.Windows.Forms.ListBox.FindStringExact%2A>，和<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法在搜尋中找到相符的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChangeUICues">
      <MemberSignature Language="C#" Value="protected override void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChangeUICues(class System.Windows.Forms.UICuesEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnChangeUICues (e As UICuesEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnChangeUICues(System::Windows::Forms::UICuesEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnChangeUICues : System.Windows.Forms.UICuesEventArgs -&gt; unit" Usage="listBox.OnChangeUICues e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.UICuesEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.UICuesEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.ChangeUICues" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceChanged">
      <MemberSignature Language="C#" Value="protected override void OnDataSourceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDataSourceChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDataSourceChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDataSourceChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDataSourceChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnDataSourceChanged : EventArgs -&gt; unit" Usage="listBox.OnDataSourceChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListControl.DataSourceChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisplayMemberChanged">
      <MemberSignature Language="C#" Value="protected override void OnDisplayMemberChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDisplayMemberChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDisplayMemberChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDisplayMemberChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDisplayMemberChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnDisplayMemberChanged : EventArgs -&gt; unit" Usage="listBox.OnDisplayMemberChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListControl.DisplayMemberChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit&#xA;override this.OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit" Usage="listBox.OnDrawItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.DrawItemEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListBox.DrawItem" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListBox.OnDrawItem%2A>方法也可讓衍生的類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立主控描繪<xref:System.Windows.Forms.ListBox>項目。 程式碼會使用<xref:System.Windows.Forms.ListBox.DrawMode%2A>屬性，指定繪製的項目固定的大小和<xref:System.Windows.Forms.ListBox.DrawItem>事件以執行每個項目至繪圖<xref:System.Windows.Forms.ListBox>。 範例程式碼使用的屬性和方法的<xref:System.Windows.Forms.DrawItemEventArgs>類別當做參數傳遞至事件處理常式繪製項目。 這個範例需要<xref:System.Windows.Forms.ListBox>控制項稱為`listBox1`已新增至表單，而且<xref:System.Windows.Forms.ListBox.DrawItem>事件由範例程式碼中定義的事件處理常式。 這個範例也會需要的項目已加入至<xref:System.Windows.Forms.ListBox>以 「 Apple 」、 「 橙色 」，和"梅紅"文字的順序。  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListBox.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnFontChanged : EventArgs -&gt; unit" Usage="listBox.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.FontChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="listBox.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>指定何時建立視窗控制代碼，以便設定資料行寬度和其他特性。 繼承類別應該呼叫 <see langword="base.OnHandleCreated" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="listBox.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>覆寫以確保項目會正確設定並清除。 繼承控制項應該呼叫 <see langword="base.OnHandleDestroyed" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected virtual void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMeasureItem (e As MeasureItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMeasureItem(System::Windows::Forms::MeasureItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit&#xA;override this.OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit" Usage="listBox.OnMeasureItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.MeasureItemEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListBox.MeasureItem" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.ListBox.OnMeasureItem%2A>方法也可讓衍生的類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListBox.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnParentChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnParentChanged : EventArgs -&gt; unit" Usage="listBox.OnParentChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.ParentChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnResize(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnResize : EventArgs -&gt; unit" Usage="listBox.OnResize e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.Resize" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnSelectedIndexChanged : EventArgs -&gt; unit" Usage="listBox.OnSelectedIndexChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListControl.SelectedValueChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedValueChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedValueChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedValueChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnSelectedValueChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectedValueChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectedValueChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnSelectedValueChanged : EventArgs -&gt; unit" Usage="listBox.OnSelectedValueChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.ListControl.SelectedValueChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.ListBox.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>這個屬性與這個類別無關。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Padding" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性與這個類別無關。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberSignature Language="F#" Value="member this.PaddingChanged : EventHandler " Usage="member this.PaddingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="P:System.Windows.Forms.ListBox.Padding" /> 屬性的值變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberSignature Language="F#" Value="member this.Paint : System.Windows.Forms.PaintEventHandler " Usage="member this.Paint : System.Windows.Forms.PaintEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於繪製 <see cref="T:System.Windows.Forms.ListBox" /> 控制項時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個事件與這個類別無關。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredHeight">
      <MemberSignature Language="C#" Value="public int PreferredHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PreferredHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.PreferredHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PreferredHeight { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredHeight : int" Usage="System.Windows.Forms.ListBox.PreferredHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Windows.Forms.ListBox" /> 中所有項目的結合高度。</summary>
        <value>控制項中所有項目的結合高度 (單位為像素)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性可讓您判斷高度，<xref:System.Windows.Forms.ListBox>必須調整成才能顯示在清單中的每個可用的項目，以避免顯示垂直捲軸。 如果中的項目數量<xref:System.Windows.Forms.ListBox>很大，使用值將控制項的大小<xref:System.Windows.Forms.ListBox.PreferredHeight%2A>屬性可能會導致<xref:System.Windows.Forms.ListBox>必須調整表單的用戶端區域之外或<xref:System.Windows.Forms.ListBox>容器。  
  
   
  
## Examples  
 下列程式碼範例示範如何設定<xref:System.Windows.Forms.Control.Size%2A>屬性<xref:System.Windows.Forms.ListBox>根據值<xref:System.Windows.Forms.ListBox.PreferredHeight%2A>屬性，就可以顯示中的所有項目<xref:System.Windows.Forms.ListBox>而不需使用捲軸。 這個範例需要<xref:System.Windows.Forms.ListBox>控制項，名為`listBox1`，已新增至表單。  
  
 [!code-cpp[ListBox.PreferredHeight#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.PreferredHeight/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.PreferredHeight#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.PreferredHeight/CS/form1.cs#1)]
 [!code-vb[ListBox.PreferredHeight#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.PreferredHeight/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Height" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberSignature Language="F#" Value="override this.Refresh : unit -&gt; unit" Usage="listBox.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>強制控制項使其工作區失效，並且立即重繪其本身和任何子控制項。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItem">
      <MemberSignature Language="C#" Value="protected override void RefreshItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RefreshItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RefreshItem : int -&gt; unit" Usage="listBox.RefreshItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要重新整理之項目的以零為起始的索引。</param>
        <summary>重新整理包含在指定之索引的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.ListControl.DisplayMember%2A>屬性會設而指派給資料來源中的屬性<xref:System.Windows.Forms.ListControl.DisplayMember%2A>變更，使用<xref:System.Windows.Forms.ListBox.RefreshItem%2A>方法，以更新中的值<xref:System.Windows.Forms.ListBox>控制項。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItems">
      <MemberSignature Language="C#" Value="protected override void RefreshItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RefreshItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshItems();" />
      <MemberSignature Language="F#" Value="override this.RefreshItems : unit -&gt; unit" Usage="listBox.RefreshItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重新整理所有 <see cref="T:System.Windows.Forms.ListBox" /> 項目並擷取這些項目的新字串。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RescaleConstantsForDpi">
      <MemberSignature Language="C#" Value="protected override void RescaleConstantsForDpi (int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RescaleConstantsForDpi(int32 deviceDpiOld, int32 deviceDpiNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RescaleConstantsForDpi(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RescaleConstantsForDpi (deviceDpiOld As Integer, deviceDpiNew As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="F#" Value="override this.RescaleConstantsForDpi : int * int -&gt; unit" Usage="listBox.RescaleConstantsForDpi (deviceDpiOld, deviceDpiNew)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceDpiOld" Type="System.Int32" />
        <Parameter Name="deviceDpiNew" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="deviceDpiOld">變更之前的 DPI 值。</param>
        <param name="deviceDpiNew">變更之後的 DPI 值。</param>
        <summary>提供在發生 DPI 變更時用來重新調整控制項的常數。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public override void ResetBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetBackColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ResetBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResetBackColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResetBackColor();" />
      <MemberSignature Language="F#" Value="override this.ResetBackColor : unit -&gt; unit" Usage="listBox.ResetBackColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重設 <see cref="P:System.Windows.Forms.Control.BackColor" /> 屬性為其預設值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public override void ResetForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetForeColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ResetForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResetForeColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResetForeColor();" />
      <MemberSignature Language="F#" Value="override this.ResetForeColor : unit -&gt; unit" Usage="listBox.ResetForeColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重設 <see cref="P:System.Windows.Forms.Control.ForeColor" /> 屬性為其預設值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.ListBox.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出控制項所顯示的文字是否從右到左。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.RightToLeft" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此屬性可讓您的功能表，以支援由右至左書寫的語言。 當這個屬性設定為`true`，會顯示項目文字由右至左，而不是預設從左到右的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleControl">
      <MemberSignature Language="C#" Value="protected override void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ScaleControl(valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ScaleControl (factor As SizeF, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ScaleControl(System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.ScaleControl : System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="listBox.ScaleControl (factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="factor">控制項高度與寬度的縮放比例。</param>
        <param name="specified">
          <see cref="T:System.Windows.Forms.BoundsSpecified" /> 值，指定在定義控制項的大小和位置時所用的控制項範圍。</param>
        <summary>縮放控制項的位置、大小、邊框間距和邊界。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollAlwaysVisible">
      <MemberSignature Language="C#" Value="public bool ScrollAlwaysVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollAlwaysVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ScrollAlwaysVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollAlwaysVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScrollAlwaysVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollAlwaysVisible : bool with get, set" Usage="System.Windows.Forms.ListBox.ScrollAlwaysVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否永遠顯示垂直捲軸。</summary>
        <value>如果應該永遠顯示垂直捲軸，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A>屬性會指出是否永遠顯示垂直捲軸，即使中的項目數<xref:System.Windows.Forms.ListBox>不需要顯示垂直捲軸。 根據預設，<xref:System.Windows.Forms.ListBox>只會有足夠的項目，來保證作業顯示時顯示垂直捲軸。 多重資料行的<xref:System.Windows.Forms.ListBox>、<xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A>屬性會指出水平捲軸會顯示。 垂直捲軸永遠不會顯示這個屬性的值為何的多重資料行<xref:System.Windows.Forms.ListBox>。  
  
   
  
## Examples  
 下列程式碼範例示範描繪<xref:System.Windows.Forms.ListBox>藉由設定<xref:System.Windows.Forms.ListBox.DrawMode%2A>屬性`OwnerDrawVariable`值和處理<xref:System.Windows.Forms.ListBox.DrawItem>和<xref:System.Windows.Forms.ListBox.MeasureItem>事件。 它也會示範設定<xref:System.Windows.Forms.ListBox.BorderStyle%2A>和<xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A>屬性，而且使用<xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A>方法。  
  
 若要執行此範例中，將它貼入中匯入的空白表單<xref:System.Drawing>命名空間和<xref:System.Windows.Forms>命名空間。 呼叫`InitializeOwnerDrawnListBox`從表單的建構函式或<xref:System.Windows.Forms.Form.Load>事件處理方法。  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public override int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedIndex" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int SelectedIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedIndex : int with get, set" Usage="System.Windows.Forms.ListBox.SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.ListBox" /> 中目前選取項目之以零起始的索引。</summary>
        <value>目前選取項目之以零為起始的索引。 如果未選取任何項目，將傳回負一 (-1)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 標準<xref:System.Windows.Forms.ListBox>，您可以使用這個屬性決定索引中選取的項目<xref:System.Windows.Forms.ListBox>。 如果<xref:System.Windows.Forms.ListBox.SelectionMode%2A>屬性<xref:System.Windows.Forms.ListBox>會設為`SelectionMode.MultiSimple`或`SelectionMode.MultiExtended`(表示多重選擇<xref:System.Windows.Forms.ListBox>) 並在清單中選取多個項目，這個屬性可以傳回任何選取的項目索引。  
  
 若要擷取集合，其中包含的所有索引選取的項目在多重選擇<xref:System.Windows.Forms.ListBox>，使用<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>屬性。 如果您想要取得中目前選取的項目<xref:System.Windows.Forms.ListBox>，使用<xref:System.Windows.Forms.ListBox.SelectedItem%2A>屬性。 此外，您可以使用<xref:System.Windows.Forms.ListBox.SelectedItems%2A>屬性，以取得多個選取範圍中所有選取的項目<xref:System.Windows.Forms.ListBox>。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>屬性<xref:System.Windows.Forms.ListBox.TopIndex%2A>屬性，以將目前選取的項目移至的顯示區域中的項目清單的頂端<xref:System.Windows.Forms.ListBox>。 進一步的範例將示範如何移除項目使用<xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType>類別，以及如何清除所有項目選取項目使用<xref:System.Windows.Forms.ListBox.ClearSelected%2A>方法。 程式碼第一次將目前選取的項目<xref:System.Windows.Forms.ListBox>到清單頂端。 此程式碼再移除目前選取的項目之前的所有項目，並清除所有選取項目中的<xref:System.Windows.Forms.ListBox>。 這個範例需要<xref:System.Windows.Forms.ListBox>包含的項目已加入至表單和中，項目目前已選取<xref:System.Windows.Forms.ListBox>。  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指派的值小於 -1 或大於等於項目計數。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Windows.Forms.ListBox.SelectionMode" /> 屬性設定為 <see langword="None" />。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItem" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.SelectedIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedIndexChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectedIndexChanged : EventHandler " Usage="member this.SelectedIndexChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當 <see cref="P:System.Windows.Forms.ListBox.SelectedIndex" /> 屬性或 <see cref="P:System.Windows.Forms.ListBox.SelectedIndices" /> 集合變更時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以建立此事件，以判斷何時的事件處理常式中選取的索引<xref:System.Windows.Forms.ListBox>已變更。 這有助於進行您需要根據目前的選取範圍中其他控制項中顯示資訊<xref:System.Windows.Forms.ListBox>。 您可以使用此事件的事件處理常式載入其他控制項中的資訊。  
  
 如果<xref:System.Windows.Forms.ListBox.SelectionMode%2A>屬性設定為<xref:System.Windows.Forms.SelectionMode.MultiSimple?displayProperty=nameWithType>或<xref:System.Windows.Forms.SelectionMode.MultiExtended?displayProperty=nameWithType>，對任何變更<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>集合，包括項目移除選取範圍，會引發這個事件。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>來搜尋和選取的項目以不同事件<xref:System.Windows.Forms.ListBox>控制項。 此範例會使用<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>事件，以判斷何時在選取的項目<xref:System.Windows.Forms.ListBox>變更。 範例程式碼接著會讀取項目使用的文字<xref:System.Windows.Forms.ListBox.SelectedItem%2A>屬性和呼叫<xref:System.Windows.Forms.ListBox.FindString%2A>方法的不同<xref:System.Windows.Forms.ListBox>使用傳回的文字<xref:System.Windows.Forms.ListBox.SelectedItem%2A>在第一個<xref:System.Windows.Forms.ListBox>。 如果項目位於另<xref:System.Windows.Forms.ListBox>，在選取的項目。 這個範例需要有兩個<xref:System.Windows.Forms.ListBox>控制項，名為`listBox1`和`listBox2`，已新增至表單，同時<xref:System.Windows.Forms.ListBox>控制項包含完全相同的項目。 這個範例也需要在此範例中定義的事件處理方法連接到<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>事件`listBox1`。  
  
 [!code-cpp[ListBox.SelectedIndexChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedIndices As ListBox.SelectedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::SelectedIndexCollection ^ SelectedIndices { System::Windows::Forms::ListBox::SelectedIndexCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedIndices : System.Windows.Forms.ListBox.SelectedIndexCollection" Usage="System.Windows.Forms.ListBox.SelectedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得集合，其中包含 <see cref="T:System.Windows.Forms.ListBox" /> 中所有目前選取項目之以零起始的索引。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" />，含有控制項中目前選取項目的索引。 如果目前並未選取任何項目，將傳回空白的 <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 多個選取項目的<xref:System.Windows.Forms.ListBox>，這個屬性會傳回集合，其中包含所有的項目中選取索引<xref:System.Windows.Forms.ListBox>。 針對單一選取<xref:System.Windows.Forms.ListBox>，這個屬性會傳回集合，其中包含單一項目包含只有在選取之項目的索引<xref:System.Windows.Forms.ListBox>。 如需如何管理集合的項目，請參閱<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>。  
  
 <xref:System.Windows.Forms.ListBox>類別提供數種方式來參考選取的項目。 而不是使用<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>屬性來取得目前選取之項目的索引位置，在單一選取<xref:System.Windows.Forms.ListBox>，您可以使用<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>屬性。 如果您想要取得中目前選取的項目<xref:System.Windows.Forms.ListBox>，而不是項目的索引位置，使用<xref:System.Windows.Forms.ListBox.SelectedItem%2A>屬性。 此外，您可以使用<xref:System.Windows.Forms.ListBox.SelectedItems%2A>屬性，如果您想要取得多個選取範圍中所有選取的項目<xref:System.Windows.Forms.ListBox>。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.FindString%2A>方法來搜尋的項目中的搜尋文字的所有執行個體<xref:System.Windows.Forms.ListBox>。 此範例會使用新版<xref:System.Windows.Forms.ListBox.FindString%2A>方法可讓您指定要從中進行持續的所有項目中搜尋的開始搜尋索引<xref:System.Windows.Forms.ListBox>。 此範例也示範如何判斷何時<xref:System.Windows.Forms.ListBox.FindString%2A>方法開始之後的項目，以避免遞迴搜尋清單的底部，從清單的頂端搜尋。 一旦項目存在於<xref:System.Windows.Forms.ListBox>，它們會選取使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法。  
  
 [!code-cpp[ListBox.FindString#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItem" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public object SelectedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SelectedItem { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedItem : obj with get, set" Usage="System.Windows.Forms.ListBox.SelectedItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.ListBox" /> 中目前選取的項目。</summary>
        <value>物件，表示控制項中的目前選擇項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 標準<xref:System.Windows.Forms.ListBox>，您可以使用這個屬性來判斷哪一個項目中選取<xref:System.Windows.Forms.ListBox>。 如果<xref:System.Windows.Forms.ListBox.SelectionMode%2A>屬性<xref:System.Windows.Forms.ListBox>會設為`SelectionMode.MultiSimple`或`SelectionMode.MultiExtended`(表示多重選擇<xref:System.Windows.Forms.ListBox>) 並在清單中選取多個項目，這個屬性可以傳回任何選取的項目。  
  
 若要擷取集合，其中包含多個選取範圍中所有選取的項目<xref:System.Windows.Forms.ListBox>，使用<xref:System.Windows.Forms.ListBox.SelectedItems%2A>屬性。 如果您想要取得目前選取的項目中的索引位置<xref:System.Windows.Forms.ListBox>，使用<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>屬性。 此外，您可以使用<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>屬性，以取得所有選取的索引，在多重選擇<xref:System.Windows.Forms.ListBox>。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>來搜尋和選取的項目以不同事件<xref:System.Windows.Forms.ListBox>控制項。 此範例會使用<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>事件，以判斷何時在選取的項目<xref:System.Windows.Forms.ListBox>變更。 範例程式碼接著會讀取項目使用的文字<xref:System.Windows.Forms.ListBox.SelectedItem%2A>屬性和呼叫<xref:System.Windows.Forms.ListBox.FindString%2A>方法的不同<xref:System.Windows.Forms.ListBox>使用傳回的文字<xref:System.Windows.Forms.ListBox.SelectedItem%2A>在第一個<xref:System.Windows.Forms.ListBox>。 如果項目位於另<xref:System.Windows.Forms.ListBox>，在選取的項目。 這個範例需要有兩個<xref:System.Windows.Forms.ListBox>控制項，名為`listBox1`和`listBox2`，已新增至表單，同時<xref:System.Windows.Forms.ListBox>控制項包含完全相同的項目。 這個範例也需要在此範例中定義的事件處理方法連接到<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>事件`listBox1`。  
  
 [!code-cpp[ListBox.SelectedIndexChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.SelectedObjectCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/SelectedObjectCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedItems As ListBox.SelectedObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::SelectedObjectCollection ^ SelectedItems { System::Windows::Forms::ListBox::SelectedObjectCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedItems : System.Windows.Forms.ListBox.SelectedObjectCollection" Usage="System.Windows.Forms.ListBox.SelectedItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+SelectedObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得集合，其中含有 <see cref="T:System.Windows.Forms.ListBox" /> 中目前選取的項目。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListBox.SelectedObjectCollection" />，含有控制項中目前選取的項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 多個選取項目的<xref:System.Windows.Forms.ListBox>，這個屬性會傳回集合，其中包含所有的項目中所選<xref:System.Windows.Forms.ListBox>。 針對單一選取<xref:System.Windows.Forms.ListBox>，這個屬性會傳回集合，其中包含單一項目包含在唯一選取的項目<xref:System.Windows.Forms.ListBox>。 如需如何管理集合的項目，請參閱<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>。  
  
 <xref:System.Windows.Forms.ListBox>類別提供數種方式來參考選取的項目。 而不是使用<xref:System.Windows.Forms.ListBox.SelectedItems%2A>屬性，以取得目前選取的項目在單一選取<xref:System.Windows.Forms.ListBox>，您可以使用<xref:System.Windows.Forms.ListBox.SelectedItem%2A>屬性。 如果您想要取得的項目中目前選取的索引位置<xref:System.Windows.Forms.ListBox>，而非本身的項目，使用<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>屬性。 此外，您可以使用<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>屬性，如果您想要取得多個選取項目中的所有選取項目的索引位置<xref:System.Windows.Forms.ListBox>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionMode">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.SelectionMode SelectionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SelectionMode SelectionMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectionMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SelectionMode As SelectionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::SelectionMode SelectionMode { System::Windows::Forms::SelectionMode get(); void set(System::Windows::Forms::SelectionMode value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionMode : System.Windows.Forms.SelectionMode with get, set" Usage="System.Windows.Forms.ListBox.SelectionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SelectionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.ListBox" /> 中，用來選取項目的方法。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.SelectionMode" /> 值。 預設值為 <see langword="SelectionMode.One" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.SelectionMode%2A>屬性可讓您判斷在項目數目<xref:System.Windows.Forms.ListBox>使用者可以選取一次，以及使用者如何進行多重選取。 當<xref:System.Windows.Forms.ListBox.SelectionMode%2A>屬性設定為`SelectionMode.MultiExtended`、 按住 shift 鍵並按一下滑鼠按鈕或按 SHIFT 和方向鍵 （向上、 向下鍵、 向左鍵和向右箭號） 的其中一個延伸選取範圍從先前選取的項目到目前的項目. 按住 CTRL 並按一下滑鼠選取，或取消選取清單中的項目。 當屬性設定為`SelectionMode.MultiSimple`、 按一下滑鼠或按下空格鍵選取或取消選取清單中的項目。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.GetSelected%2A>方法來判斷哪些項目中<xref:System.Windows.Forms.ListBox>都選取，才能選擇未選取的項目並取消選取 已選取的項目。 此範例也示範如何使用<xref:System.Windows.Forms.ListBox.SelectionMode%2A>屬性來啟用<xref:System.Windows.Forms.ListBox>有多個選取項目，並使用<xref:System.Windows.Forms.ListBox.Sorted%2A>屬性來示範如何排序的項目<xref:System.Windows.Forms.ListBox>自動。 這個範例需要<xref:System.Windows.Forms.ListBox>具名`listBox1`，已新增至表單，而且`InitializeMyListBox`範例中定義的方法從呼叫<xref:System.Windows.Forms.Form.Load>表單的事件。  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指派的值不是其中一個 <see cref="T:System.Windows.Forms.SelectionMode" /> 值。</exception>
        <altmember cref="T:System.Windows.Forms.SelectionMode" />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected override void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetBoundsCore (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetBoundsCore(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="listBox.SetBoundsCore (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">控制項的新 <see cref="P:System.Windows.Forms.Control.Left" /> 屬性值。</param>
        <param name="y">控制項的新 <see cref="P:System.Windows.Forms.Control.Top" /> 屬性值。</param>
        <param name="width">控制項的新 <see cref="P:System.Windows.Forms.Control.Width" /> 屬性值。</param>
        <param name="height">控制項的新 <see cref="P:System.Windows.Forms.Control.Height" /> 屬性值。</param>
        <param name="specified">
          <see cref="T:System.Windows.Forms.BoundsSpecified" /> 值的位元組合。</param>
        <summary>設定 <see cref="T:System.Windows.Forms.ListBox" /> 控制項的指定繫結。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 高度<xref:System.Windows.Forms.ListBox>控制項增加和減少的<xref:System.Windows.Forms.ListBox.ItemHeight%2A>屬性。 高度是否不是倍數的數字<xref:System.Windows.Forms.ListBox.ItemHeight%2A>，高度<xref:System.Windows.Forms.ListBox>會變更的最大的多個，小於高度。  
  
 一般而言，對應到不包含在指定的參數繫結的參數傳入其目前值。 例如， `height`， `width`，或`x`或`y`屬性<xref:System.Windows.Forms.Control.Location%2A>屬性可以傳入控制項的目前執行個體的參考。 不過，會接受所有傳入的值，而套用至控制項。  
  
 `specified`參數代表控制項的項目<xref:System.Windows.Forms.Control.Bounds%2A>變更您的應用程式。 例如，如果您變更<xref:System.Windows.Forms.Control.Size%2A>控制項的`specified`參數值是<xref:System.Windows.Forms.BoundsSpecified.Size>。 不過，如果<xref:System.Windows.Forms.Control.Size%2A>調整以回應<xref:System.Windows.Forms.Control.Dock%2A>屬性設定，`specified`參數值是<xref:System.Windows.Forms.BoundsSpecified.None>。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />方法，以強制變更控制項的範圍。在衍生的類別可以加入大小限制<see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetItemCore">
      <MemberSignature Language="C#" Value="protected override void SetItemCore (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItemCore(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetItemCore(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItemCore (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItemCore(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.SetItemCore : int * obj -&gt; unit" Usage="listBox.SetItemCore (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">物件的陣列索引。</param>
        <param name="value">物件。</param>
        <summary>設定衍生類別中具有指定之索引的物件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItemsCore">
      <MemberSignature Language="C#" Value="protected override void SetItemsCore (System.Collections.IList value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItemsCore(class System.Collections.IList value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetItemsCore(System.Collections.IList)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItemsCore (value As IList)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItemsCore(System::Collections::IList ^ value);" />
      <MemberSignature Language="F#" Value="override this.SetItemsCore : System.Collections.IList -&gt; unit" Usage="listBox.SetItemsCore value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="value">要插入至此控制項的物件陣列。</param>
        <summary>清除 <see cref="T:System.Windows.Forms.ListBox" /> 的內容並將指定的項目加入此控制項中。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSelected">
      <MemberSignature Language="C#" Value="public void SetSelected (int index, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelected(int32 index, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetSelected(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSelected (index As Integer, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSelected(int index, bool value);" />
      <MemberSignature Language="F#" Value="member this.SetSelected : int * bool -&gt; unit" Usage="listBox.SetSelected (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">
          <see cref="T:System.Windows.Forms.ListBox" /> 中項目之以零起始的索引，將在選取範圍中選擇或清除。</param>
        <param name="value">如果要選擇指定的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
        <summary>選擇或清除 <see cref="T:System.Windows.Forms.ListBox" /> 中指定項目的選取範圍。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性在多個選取項目中設定的項目<xref:System.Windows.Forms.ListBox>。 若要選取的項目在單一選取<xref:System.Windows.Forms.ListBox>，使用<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立<xref:System.Windows.Forms.ListBox>控制項資料行中顯示多個項目，可以有多個控制項的清單中選取的項目。 如需範例程式碼會加入到 50 個項目<xref:System.Windows.Forms.ListBox>使用<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection>類別，然後再選取三個項目從清單中使用<xref:System.Windows.Forms.ListBox.SetSelected%2A>方法。 然後程式碼會顯示的值從<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>集合 (透過<xref:System.Windows.Forms.ListBox.SelectedItems%2A>屬性) 和<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>(透過<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>屬性)。 這個範例需要是位於該程式碼，並從呼叫<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的索引超過有效值的範圍。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListBox.SelectionMode" /> 屬性被設定為 <see langword="None" />。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="protected virtual void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.Sort" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Sort();" />
      <MemberSignature Language="F#" Value="abstract member Sort : unit -&gt; unit&#xA;override this.Sort : unit -&gt; unit" Usage="listBox.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>排序 <see cref="T:System.Windows.Forms.ListBox" /> 中的項目。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.Sort%2A> 每個項目新增至本身，如果集合會強制<xref:System.Windows.Forms.ListBox.Sorted%2A>屬性是`true`。 每個項目會插入正確的位置。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.Sort%2A>方法。 此範例示範繼承自<xref:System.Windows.Forms.ListBox>類別而且覆寫<xref:System.Windows.Forms.ListBox.Sort%2A>來執行使用者定義的排序在衍生類別中的方法。 若要執行此範例中貼上下列程式碼中的空白表單。  
  
 [!code-cpp[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>您可以提供自己的排序常式衍生類別中覆寫這個方法。存取的覆寫結果<see cref="M:System.Windows.Forms.ListBox.Sort" />方法藉由設定<see cref="P:System.Windows.Forms.ListBox.Sorted" />屬性<see langword="true" />。當加入項目至<see cref="T:System.Windows.Forms.ListBox" />，它會先排序的項目，然後再加入新項目更有效率。</para>
        </block>
        <altmember cref="P:System.Windows.Forms.ListBox.Sorted" />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public bool Sorted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sorted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Sorted" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Sorted { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Sorted : bool with get, set" Usage="System.Windows.Forms.ListBox.Sorted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Windows.Forms.ListBox" /> 中的項目是否依照字母順序排序。</summary>
        <value>如果控制項中的項目已經排序，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.ListBox.Sorted%2A>來自動排序屬性依字母順序在字串<xref:System.Windows.Forms.ListBox>。 當項目新增至排序<xref:System.Windows.Forms.ListBox>，項目會移至已排序的清單中的適當位置。 當加入項目至<xref:System.Windows.Forms.ListBox>，它會先排序的項目，然後再加入新項目更有效率。  
  
 A<xref:System.Windows.Forms.ListBox>具有其<xref:System.Windows.Forms.ListBox.Sorted%2A>設`true`不會繫結至資料使用<xref:System.Windows.Forms.ListControl.DataSource%2A>屬性。 顯示已排序資料中繫結至<xref:System.Windows.Forms.ListBox>，您應該將繫結至支援排序的資料來源，並有提供排序的資料來源。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.GetSelected%2A>方法來判斷哪些項目中<xref:System.Windows.Forms.ListBox>都選取，才能選擇未選取的項目並取消選取 已選取的項目。 此範例也示範如何使用<xref:System.Windows.Forms.ListBox.SelectionMode%2A>屬性來啟用<xref:System.Windows.Forms.ListBox>有多個選取項目，並使用<xref:System.Windows.Forms.ListBox.Sorted%2A>屬性來示範如何排序的項目<xref:System.Windows.Forms.ListBox>自動。 這個範例需要<xref:System.Windows.Forms.ListBox>具名`listBox1`，已新增至表單，而且`InitializeMyListBox`範例中定義的方法從呼叫<xref:System.Windows.Forms.Form.Load>表單的事件。  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.ListBox.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或搜尋 <see cref="T:System.Windows.Forms.ListBox" /> 中目前選取項目的文字。</summary>
        <value>控制項中目前選取項目的文字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當這個屬性的值設定為字串值，<xref:System.Windows.Forms.ListBox>搜尋中的項目<xref:System.Windows.Forms.ListBox>，符合指定的文字和選取的項目。 您也可以使用這個屬性來判斷中目前所選取的項目<xref:System.Windows.Forms.ListBox>。 如果<xref:System.Windows.Forms.ListBox.SelectionMode%2A>屬性<xref:System.Windows.Forms.ListBox>設`SelectionMode.MultiExtended`，這個屬性會傳回第一個選取之項目的文字。 如果<xref:System.Windows.Forms.ListBox.SelectionMode%2A>屬性<xref:System.Windows.Forms.ListBox>未設定為`SelectionMode.None`，這個屬性會傳回第一個選取之項目的文字。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberSignature Language="F#" Value="member this.TextChanged : EventHandler " Usage="member this.TextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="P:System.Windows.Forms.ListBox.Text" /> 屬性變更時發生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopIndex">
      <MemberSignature Language="C#" Value="public int TopIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TopIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.TopIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TopIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TopIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TopIndex : int with get, set" Usage="System.Windows.Forms.ListBox.TopIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.ListBox" /> 中第一個可見項目的索引。</summary>
        <value>控制項中第一個可見項目之以零為起始的索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一開始，索引位置的項目為零 (0) 位於最上層的可見區域<xref:System.Windows.Forms.ListBox>。 如果內容<xref:System.Windows.Forms.ListBox>有捲動，另一個項目可能會在控制項的顯示區域的頂端。 您可以使用這個屬性來取得內的索引<xref:System.Windows.Forms.ListBox.ObjectCollection>如<xref:System.Windows.Forms.ListBox>目前位在控制項的可見區域頂端的項目。 您也可以使用這個屬性的項目放在清單頂端的控制項的可見區域。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>屬性<xref:System.Windows.Forms.ListBox.TopIndex%2A>屬性，以將目前選取的項目移至的顯示區域中的項目清單的頂端<xref:System.Windows.Forms.ListBox>。 進一步的範例將示範如何移除項目使用<xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A>方法<xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType>類別，以及如何清除所有項目選取項目使用<xref:System.Windows.Forms.ListBox.ClearSelected%2A>方法。 程式碼第一次將目前選取的項目<xref:System.Windows.Forms.ListBox>到清單頂端。 此程式碼再移除目前選取的項目之前的所有項目，並清除所有選取項目中的<xref:System.Windows.Forms.ListBox>。 這個範例需要<xref:System.Windows.Forms.ListBox>包含的項目已加入至表單和中，項目目前已選取<xref:System.Windows.Forms.ListBox>。  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="listBox.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回 <see cref="T:System.Windows.Forms.ListBox" /> 的字串表示法。</summary>
        <returns>字串，表示控制項型別的狀態、<see cref="T:System.Windows.Forms.ListBox" /> 控制項中的項目計數，以及 <see cref="T:System.Windows.Forms.ListBox" /> 中第一個項目的 Text 屬性 (如果計數不是 0 的話)。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCustomTabOffsets">
      <MemberSignature Language="C#" Value="public bool UseCustomTabOffsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCustomTabOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.UseCustomTabOffsets" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCustomTabOffsets As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCustomTabOffsets { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseCustomTabOffsets : bool with get, set" Usage="System.Windows.Forms.ListBox.UseCustomTabOffsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Windows.Forms.ListBox" /> 是否會在它繪製字串時，使用 <see cref="P:System.Windows.Forms.ListBox.CustomTabOffsets" /> 整數陣列辨認並展開定位字元。</summary>
        <value>如果 <see cref="T:System.Windows.Forms.ListBox" /> 會辨認並展開定位字元，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.CustomTabOffsets" />
      </Docs>
    </Member>
    <Member MemberName="UseTabStops">
      <MemberSignature Language="C#" Value="public bool UseTabStops { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseTabStops" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.UseTabStops" />
      <MemberSignature Language="VB.NET" Value="Public Property UseTabStops As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseTabStops { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseTabStops : bool with get, set" Usage="System.Windows.Forms.ListBox.UseTabStops" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Windows.Forms.ListBox" /> 是否可在繪製自己的字串時辨識和展開定位字元。</summary>
        <value>如果控制項可以展開定位字元，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何建立<xref:System.Windows.Forms.ListBox>tab 字元項目上的顯示。  
  
 [!code-cpp[ListBox.UseTabStops#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.UseTabStops/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.UseTabStops#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.UseTabStops/CS/form1.cs#1)]
 [!code-vb[ListBox.UseTabStops#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.UseTabStops/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於與 unmanaged 程式碼的作業。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WmReflectCommand">
      <MemberSignature Language="C#" Value="protected virtual void WmReflectCommand (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WmReflectCommand(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.WmReflectCommand(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WmReflectCommand (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WmReflectCommand(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WmReflectCommand :  -&gt; unit&#xA;override this.WmReflectCommand :  -&gt; unit" Usage="listBox.WmReflectCommand m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">最上層視窗傳送至 <see cref="T:System.Windows.Forms.Message" /> 控制項的 <see cref="T:System.Windows.Forms.ListBox" />。</param>
        <summary>處理 <see cref="T:System.Windows.Forms.ListView" /> 控制項從最上層視窗 (Top-Level Window) 所收到的命令訊息 (Command Message)。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc :  -&gt; unit" Usage="listBox.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Windows 訊息物件。</param>
        <summary>清單的視窗程序 (Procedure)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼承的類別可以覆寫這個檔案來新增額外的功能，但應該呼叫<xref:System.Windows.Forms.ListBox.WndProc%2A>基底類別，以確保清單會繼續正常運作的方法。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於與 unmanaged 程式碼的作業。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>