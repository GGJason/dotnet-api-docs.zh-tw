<Type Name="CheckBox" FullName="System.Windows.Forms.CheckBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d69e390d6ebc945161b864e9b56fcc163887f7e7" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33658924" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CheckBox : System.Windows.Forms.ButtonBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CheckBox extends System.Windows.Forms.ButtonBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.CheckBox" />
  <TypeSignature Language="VB.NET" Value="Public Class CheckBox&#xA;Inherits ButtonBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class CheckBox : System::Windows::Forms::ButtonBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ButtonBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("CheckState")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("CheckedChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Checked")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示 Windows <see cref="T:System.Windows.Forms.CheckBox" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.CheckBox>給使用者的選項，例如 true/false 或 yes/no。 <xref:System.Windows.Forms.CheckBox>控制項可以顯示的影像或文字或兩者。  
  
 <xref:System.Windows.Forms.CheckBox> 和<xref:System.Windows.Forms.RadioButton>控制項有類似的函式： 它們可讓使用者可從中選擇的選項清單。 <xref:System.Windows.Forms.CheckBox> 控制項可讓使用者選取的選項組合。 相反地，<xref:System.Windows.Forms.RadioButton>控制項可讓使用者可從中選擇互斥選項。  
  
 <xref:System.Windows.Forms.CheckBox.Appearance%2A>屬性會決定是否<xref:System.Windows.Forms.CheckBox>會顯示為一般<xref:System.Windows.Forms.CheckBox>或按鈕。  
  
 <xref:System.Windows.Forms.CheckBox.ThreeState%2A>屬性決定控制項是否支援兩個或三個狀態。 使用<xref:System.Windows.Forms.CheckBox.Checked%2A>屬性來取得或設定兩個狀態的值<xref:System.Windows.Forms.CheckBox>控制，並使用<xref:System.Windows.Forms.CheckBox.CheckState%2A>屬性來取得或設定值的三種狀態<xref:System.Windows.Forms.CheckBox>控制項。  
  
> [!NOTE]
>  如果<xref:System.Windows.Forms.CheckBox.ThreeState%2A>屬性設定為`true`、<xref:System.Windows.Forms.CheckBox.Checked%2A>屬性會傳回`true`已核取或是不定狀態。  
  
 <xref:System.Windows.Forms.ButtonBase.FlatStyle%2A>屬性決定的樣式和控制項的外觀。 如果<xref:System.Windows.Forms.ButtonBase.FlatStyle%2A>屬性設定為<xref:System.Windows.Forms.FlatStyle.System?displayProperty=nameWithType>，使用者的作業系統決定控制項的外觀。  
  
> [!NOTE]
>  當<xref:System.Windows.Forms.ButtonBase.FlatStyle%2A>屬性設定為<xref:System.Windows.Forms.FlatStyle.System?displayProperty=nameWithType>、<xref:System.Windows.Forms.CheckBox.CheckAlign%2A>屬性會被忽略，控制項會顯示使用<xref:System.Drawing.ContentAlignment.MiddleLeft?displayProperty=nameWithType>或<xref:System.Drawing.ContentAlignment.MiddleRight?displayProperty=nameWithType>對齊方式。 如果<xref:System.Windows.Forms.CheckBox.CheckAlign%2A>屬性設定為其中一個向右對齊、 使用顯示控制項<xref:System.Drawing.ContentAlignment.MiddleRight?displayProperty=nameWithType>對齊; 否則它就會顯示使用<xref:System.Drawing.ContentAlignment.MiddleLeft?displayProperty=nameWithType>對齊方式。  
  
 以下描述為未決狀態： 您尚未<xref:System.Windows.Forms.CheckBox>，決定如果中選取的文字<xref:System.Windows.Forms.RichTextBox>為粗體。 當您選取的文字，您可以按一下<xref:System.Windows.Forms.CheckBox>要以粗體顯示選取項目。 同樣地，當您選取一些文字，<xref:System.Windows.Forms.CheckBox>顯示選取的文字是粗體。 如果您選取的文字包含文字是粗體和一般，<xref:System.Windows.Forms.CheckBox>必須為未決狀態。  
  
   
  
## Examples  
 下列程式碼範例會建立並初始化<xref:System.Windows.Forms.CheckBox>，因而提供給它的切換按鈕的外觀，設定<xref:System.Windows.Forms.CheckBox.AutoCheck%2A>至`false`，並將它加入<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ButtonBase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CheckBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CheckBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.CheckBox" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，當新<xref:System.Windows.Forms.CheckBox>具現化<xref:System.Windows.Forms.CheckBox.AutoCheck%2A>設為`true`，<xref:System.Windows.Forms.CheckBox.Checked%2A>設為`false`，和<xref:System.Windows.Forms.CheckBox.Appearance%2A>設<xref:System.Windows.Forms.Appearance.Normal>。  
  
   
  
## Examples  
 下列程式碼範例會建立並初始化<xref:System.Windows.Forms.CheckBox>，因而提供給它的切換按鈕的外觀，設定<xref:System.Windows.Forms.CheckBox.AutoCheck%2A>至`false`，並將它加入<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.CheckBox" />
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Appearance Appearance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Appearance Appearance" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.Appearance" />
      <MemberSignature Language="VB.NET" Value="Public Property Appearance As Appearance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Appearance Appearance { System::Windows::Forms::Appearance get(); void set(System::Windows::Forms::Appearance value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Appearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值可決定 <see cref="T:System.Windows.Forms.CheckBox" /> 控制項的外觀。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.Appearance" /> 值。 預設值是 <see cref="F:System.Windows.Forms.Appearance.Normal" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.CheckBox.Appearance%2A>值設定為<xref:System.Windows.Forms.Appearance.Normal>、<xref:System.Windows.Forms.CheckBox>具有一般外觀。 如果值設定為`Button`、<xref:System.Windows.Forms.CheckBox>會像是切換按鈕，可以切換為開啟或關閉狀態。  
  
   
  
## Examples  
 下列程式碼範例會建立並初始化<xref:System.Windows.Forms.CheckBox>，因而提供給它的切換按鈕的外觀，設定<xref:System.Windows.Forms.CheckBox.AutoCheck%2A>至`false`，並將它加入<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">所指派的值不是其中一個 <see cref="T:System.Windows.Forms.Appearance" /> 值。</exception>
        <altmember cref="T:System.Windows.Forms.Appearance" />
      </Docs>
    </Member>
    <Member MemberName="AppearanceChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AppearanceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AppearanceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckBox.AppearanceChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AppearanceChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AppearanceChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="P:System.Windows.Forms.CheckBox.Appearance" /> 屬性的值變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.CheckBox.AppearanceChanged>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.CheckBox>名為`CheckBox1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.CheckBox.AppearanceChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#139](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#139)]
 [!code-vb[System.Windows.Forms.EventExamples#139](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#139)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CheckBox.Appearance" />
      </Docs>
    </Member>
    <Member MemberName="AutoCheck">
      <MemberSignature Language="C#" Value="public bool AutoCheck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoCheck" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.AutoCheck" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoCheck As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoCheck { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出當按下 <see cref="P:System.Windows.Forms.CheckBox.Checked" /> 時，<see cref="P:System.Windows.Forms.CheckBox.CheckState" /> 或 <see cref="T:System.Windows.Forms.CheckBox" /> 值和 <see cref="T:System.Windows.Forms.CheckBox" /> 的外觀是否會自動改變。</summary>
        <value>
          如果 <see cref="P:System.Windows.Forms.CheckBox.Checked" /> 值或 <see cref="P:System.Windows.Forms.CheckBox.CheckState" /> 值和控制項的外觀會在 <see cref="E:System.Windows.Forms.Control.Click" /> 事件上自動變更為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.CheckBox.AutoCheck%2A>設定為 false，您必須加入程式碼以更新<xref:System.Windows.Forms.CheckBox.Checked%2A>或<xref:System.Windows.Forms.CheckBox.CheckState%2A>值<xref:System.Windows.Forms.Control.Click>事件處理常式。  
  
   
  
## Examples  
 下列程式碼範例會建立並初始化<xref:System.Windows.Forms.CheckBox>，因而提供給它的切換按鈕的外觀，設定<xref:System.Windows.Forms.CheckBox.AutoCheck%2A>至`false`，並將它加入<xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAlign">
      <MemberSignature Language="C#" Value="public System.Drawing.ContentAlignment CheckAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.ContentAlignment CheckAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.CheckAlign" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckAlign As ContentAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::ContentAlignment CheckAlign { System::Drawing::ContentAlignment get(); void set(System::Drawing::ContentAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定核取記號在 <see cref="T:System.Windows.Forms.CheckBox" /> 控制項上的水平和垂直對齊情形。</summary>
        <value>其中一個 <see cref="T:System.Drawing.ContentAlignment" /> 值。 預設值是 <see langword="MiddleLeft" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例會在標籤中顯示三個屬性的值。 <xref:System.Windows.Forms.CheckBox.ThreeState%2A>屬性間切換`true`和`false`以不同的控制項和<xref:System.Windows.Forms.CheckBox.CheckAlign%2A>交替使用`MiddleRight`和`MiddleLeft`值<xref:System.Drawing.ContentAlignment>。 此範例示範如何將屬性值變更為<xref:System.Windows.Forms.CheckBox.ThreeState%2A>會檢查屬性變更和控制項。 這個範例需要<xref:System.Windows.Forms.CheckBox>，<xref:System.Windows.Forms.Label>和<xref:System.Windows.Forms.Button>具有所有已具現化表單上，標籤是大到足以顯示三行文字，以及參考<xref:System.Drawing?displayProperty=nameWithType>命名空間。 此程式碼中應該呼叫<xref:System.Windows.Forms.Control.Click>控制項的事件處理常式。  
  
 [!code-cpp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">所指派的值不是其中一個 <see cref="T:System.Drawing.ContentAlignment" /> 列舉值。</exception>
        <altmember cref="P:System.Windows.Forms.ButtonBase.TextAlign" />
        <altmember cref="T:System.Drawing.ContentAlignment" />
      </Docs>
    </Member>
    <Member MemberName="Checked">
      <MemberSignature Language="C#" Value="public bool Checked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Checked" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.Checked" />
      <MemberSignature Language="VB.NET" Value="Public Property Checked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Checked { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Windows.Forms.CheckBox" /> 是否在已核取狀態下。</summary>
        <value>
          如果 <see cref="T:System.Windows.Forms.CheckBox" /> 處於已核取狀態，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="false" />。  
  
 <block subset="none" type="note"><para>  
 如果<see cref="P:System.Windows.Forms.CheckBox.ThreeState" />屬性設定為<see langword="true" />、<see cref="P:System.Windows.Forms.CheckBox.Checked" />屬性會傳回<see langword="true" />針對<see langword="Checked" />或<see langword="Indeterminate" /><see cref="P:System.Windows.Forms.CheckBox.CheckState" />。  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當這個值是`true`、<xref:System.Windows.Forms.CheckBox>控制項部分會顯示核取記號。 如果<xref:System.Windows.Forms.CheckBox.Appearance%2A>屬性設定為`Button`，控制會顯示下凹<xref:System.Windows.Forms.CheckBox.Checked%2A>是`true`並引發當做標準按鈕時`false`。  
  
   
  
## Examples  
 下列程式碼範例會在標籤中顯示三個屬性的值。 <xref:System.Windows.Forms.CheckBox.ThreeState%2A>屬性間切換`true`和`false`以不同的控制項和<xref:System.Windows.Forms.CheckBox.CheckAlign%2A>交替使用<xref:System.Drawing.ContentAlignment>值`MiddleRight`和`MiddleLeft`。 此範例示範如何將屬性值變更為<xref:System.Windows.Forms.CheckBox.ThreeState%2A>會檢查屬性變更和控制項。 這個範例需要<xref:System.Windows.Forms.CheckBox>，<xref:System.Windows.Forms.Label>和<xref:System.Windows.Forms.Button>具有所有已具現化表單上，標籤是大到足以顯示三行文字，以及參考<xref:System.Drawing?displayProperty=nameWithType>命名空間。 此程式碼中應該呼叫<xref:System.Windows.Forms.Control.Click>控制項的事件處理常式。  
  
 [!code-cpp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CheckBox.ThreeState" />
        <altmember cref="P:System.Windows.Forms.CheckBox.CheckState" />
      </Docs>
    </Member>
    <Member MemberName="CheckedChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CheckedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CheckedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckBox.CheckedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CheckedChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CheckedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="P:System.Windows.Forms.CheckBox.Checked" /> 屬性的值變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.CheckBox.CheckedChanged>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.CheckBox>名為`CheckBox1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.CheckBox.CheckedChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#140](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#140)]
 [!code-vb[System.Windows.Forms.EventExamples#140](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#140)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CheckBox.Checked" />
      </Docs>
    </Member>
    <Member MemberName="CheckState">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.CheckState CheckState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.CheckState CheckState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.CheckState" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckState As CheckState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::CheckState CheckState { System::Windows::Forms::CheckState get(); void set(System::Windows::Forms::CheckState value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CheckState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.CheckBox" /> 的狀態。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.CheckState" /> 列舉值。 預設值是 <see langword="Unchecked" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.CheckBox.ThreeState%2A>屬性設定為`false`、<xref:System.Windows.Forms.CheckBox.CheckState%2A>屬性值只能設定為`CheckState.Indeterminate`程式碼中，而不是由使用者互動。  
  
 下表描述<xref:System.Windows.Forms.Appearance?displayProperty=nameWithType>的<xref:System.Windows.Forms.CheckBox>其不同狀態的控制項`Normal`和`Button`設定控制項的樣式<xref:System.Windows.Forms.CheckBox.Appearance%2A?displayProperty=nameWithType>。  
  
|已核取 CheckState|Appearance.Normal|Appearance.Button|  
|----------------|-----------------------|-----------------------|  
|`Checked`|<xref:System.Windows.Forms.CheckBox>顯示核取記號。|控制項下凹。|  
|`Unchecked`|<xref:System.Windows.Forms.CheckBox> 是空的。|該控制項會出現引發。|  
|`Indeterminate`|<xref:System.Windows.Forms.CheckBox>顯示核取記號，並會加上陰影。|控制項是平面的。|  
  
   
  
## Examples  
 下列程式碼範例會在標籤中顯示三個屬性的值。 <xref:System.Windows.Forms.CheckBox.ThreeState%2A>屬性間切換`true`和`false`以不同的控制項和<xref:System.Windows.Forms.CheckBox.CheckAlign%2A>交替使用`MiddleRight`和`MiddleLeft`值<xref:System.Drawing.ContentAlignment?displayProperty=nameWithType>。 此範例示範如何將屬性值變更為<xref:System.Windows.Forms.CheckBox.ThreeState%2A>會檢查屬性變更和控制項。 這個範例需要<xref:System.Windows.Forms.CheckBox>，<xref:System.Windows.Forms.Label>和<xref:System.Windows.Forms.Button>具有所有已具現化表單上，標籤是大到足以顯示三行文字，以及參考<xref:System.Drawing?displayProperty=nameWithType>命名空間。 此程式碼中應該呼叫<xref:System.Windows.Forms.Control.Click>控制項的事件處理常式。  
  
 [!code-cpp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">所指派的值不是其中一個 <see cref="T:System.Windows.Forms.CheckState" /> 列舉值。</exception>
        <altmember cref="P:System.Windows.Forms.CheckBox.Checked" />
        <altmember cref="P:System.Windows.Forms.CheckBox.ThreeState" />
      </Docs>
    </Member>
    <Member MemberName="CheckStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CheckStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CheckStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckBox.CheckStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CheckStateChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CheckStateChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="P:System.Windows.Forms.CheckBox.CheckState" /> 屬性的值變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.CheckBox.CheckStateChanged>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.CheckBox>名為`CheckBox1`。 請確定事件處理常式關聯<xref:System.Windows.Forms.CheckBox.CheckStateChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#141](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#141)]
 [!code-vb[System.Windows.Forms.EventExamples#141](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#141)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CheckBox.CheckState" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>為 <see cref="T:System.Windows.Forms.CheckBox" /> 控制項建立新的協助工具物件。</summary>
        <returns>控制項新的 <see cref="T:System.Windows.Forms.CheckBox.CheckBoxAccessibleObject" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果沒有明確呼叫 <xref:System.Windows.Forms.CheckBox.CreateAccessibilityInstance%2A> 方法，將會在參考 <xref:System.Windows.Forms.Control.AccessibilityObject%2A> 屬性時呼叫該方法。  
  
> [!NOTE]
>  取得或設定<xref:System.Windows.Forms.Control.AccessibilityObject%2A>屬性，您必須加入參考`Accessibility`安裝.NET framework 組件。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Windows.Forms.CheckBox.CreateAccessibilityInstance" />在衍生類別中，您不應該呼叫基底類別的<see cref="M:System.Windows.Forms.CheckBox.CreateAccessibilityInstance" />方法。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>建立控制代碼時，取得必要的建立參數。</summary>
        <value>
          <see cref="T:System.Windows.Forms.CreateParams" />，包含建立控制項之控制代碼時所需的建立參數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例將擴充<xref:System.Windows.Forms.Control.CreateParams%2A>屬性<xref:System.Windows.Forms.Button>衍生的類別。 <xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=nameWithType>屬性變更，因而導致按鈕以顯示<xref:System.Drawing.Icon>而不是<xref:System.Drawing.Image>。 這個範例需要您具有類別繼承自<xref:System.Windows.Forms.Button>類別。  
  
 [!code-cpp[CreateParams#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CreateParams/CPP/createparams.cpp#3)]
 [!code-csharp[CreateParams#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CreateParams/CS/createparams.cs#3)]
 [!code-vb[CreateParams#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CreateParams/VB/createparams.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於與 unmanaged 程式碼的作業。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得控制項的預設大小。</summary>
        <value>預設大小。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event EventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckBox.DoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoubleClick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DoubleClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者按兩下 <see cref="T:System.Windows.Forms.CheckBox" /> 控制項時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，<xref:System.Windows.Forms.ControlStyles.StandardClick>和<xref:System.Windows.Forms.ControlStyles.StandardDoubleClick>列舉型別會設為 false<xref:System.Windows.Forms.CheckBox>控制項，而<xref:System.Windows.Forms.CheckBox.DoubleClick>不會引發事件。  
  
 這個事件與這個類別無關。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckBox.MouseDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDoubleClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseDoubleClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者按兩下 <see cref="T:System.Windows.Forms.CheckBox" /> 控制項時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，<xref:System.Windows.Forms.ControlStyles.StandardClick?displayProperty=nameWithType>和<xref:System.Windows.Forms.ControlStyles.StandardDoubleClick?displayProperty=nameWithType>樣式位元會設為`false`如<xref:System.Windows.Forms.CheckBox>控制項，而<xref:System.Windows.Forms.CheckBox.MouseDoubleClick>不會引發事件。  
  
 這個事件與這個類別無關。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAppearanceChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAppearanceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAppearanceChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.OnAppearanceChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAppearanceChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAppearanceChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.CheckBox.AppearanceChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.CheckBox.OnAppearanceChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.CheckBox.OnAppearanceChanged(System.EventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.CheckBox.OnAppearanceChanged(System.EventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.CheckBox.AppearanceChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnCheckedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCheckedChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCheckedChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.OnCheckedChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCheckedChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCheckedChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.CheckBox.OnCheckedChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.CheckBox.OnCheckedChanged(System.EventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.CheckBox.OnCheckedChanged(System.EventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.CheckBox.CheckedChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnCheckStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCheckStateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCheckStateChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.OnCheckStateChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCheckStateChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCheckStateChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.CheckBox.CheckStateChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.CheckBox.OnCheckStateChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.CheckBox.OnCheckStateChanged(System.EventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.CheckBox.OnCheckStateChanged(System.EventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.CheckBox.CheckStateChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected override void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnClick(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.Click" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CheckBox.OnClick%2A>方法變更<xref:System.Windows.Forms.CheckBox.CheckState%2A>屬性。 如果<xref:System.Windows.Forms.CheckBox.ThreeState%2A>屬性設定為`true`，後續的按一下<xref:System.Windows.Forms.CheckBox>會導致<xref:System.Windows.Forms.CheckBox.OnClick%2A>進行的所有值循環<xref:System.Windows.Forms.CheckBox.CheckState%2A>列舉型別。 否則，<xref:System.Windows.Forms.CheckBox.OnClick%2A>間切換<xref:System.Windows.Forms.CheckState.Checked>和<xref:System.Windows.Forms.CheckState.Unchecked>。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.CheckBox.OnClick%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Windows.Forms.CheckBox.OnClick(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.CheckBox.OnClick(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.HandleCreated" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.KeyEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="M:System.Windows.Forms.ButtonBase.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.ButtonBase.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseUp (System.Windows.Forms.MouseEventArgs mevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs mevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseUp (mevent As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseUp(System::Windows::Forms::MouseEventArgs ^ mevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mevent" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="mevent">
          <see cref="T:System.Windows.Forms.MouseEventArgs" />，其中包含事件資料。</param>
        <summary>引發 OnMouseUp 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.ButtonBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessMnemonic">
      <MemberSignature Language="C#" Value="protected internal override bool ProcessMnemonic (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool ProcessMnemonic(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.ProcessMnemonic(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ProcessMnemonic (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool ProcessMnemonic(char charCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">要處理的字元。</param>
        <summary>處理助憶鍵字元。</summary>
        <returns>
          如果控制項已將字元當成助憶鍵處理，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法被呼叫要讓控制項有機會處理助憶鍵字元。 這個方法應判斷控制項是否處於處理助憶鍵的狀態，而且是否指定的字元是否表示助憶鍵。 如果因此，此方法應該執行的助憶鍵和傳回相關聯的動作`true`。 如果不是，這個方法應傳回`false`。 實作這個方法通常會使用<xref:System.Windows.Forms.Control.IsMnemonic%2A>方法來判斷指定的字元是否符合控制項的文字中的助憶鍵。  
  
 例如:   
  
```csharp  
if (CanSelect && IsMnemonic(charCode, MyControl.Text) {  
    // Perform action associated with mnemonic.  
    }  
```  
  
 預設實作<xref:System.Windows.Forms.Control.ProcessMnemonic%2A>方法只會傳回`false`來表示控制項具有沒有助憶鍵。  
  
   
  
## Examples  
 下列程式碼範例示範會覆寫 按鈕類別的延伸<xref:System.Windows.Forms.Control.ProcessMnemonic%2A>至展現自訂行為的方法。 此範例也示範如何使用<xref:System.Windows.Forms.Control.CanSelect%2A>和<xref:System.Windows.Forms.Control.IsMnemonic%2A>屬性。 若要執行此範例中，貼上下列程式碼的表單類別之後，在相同的檔案。 加入按鈕的型別`MnemonicButton`至表單。  
  
 [!code-cpp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public override System.Drawing.ContentAlignment TextAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.ContentAlignment TextAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.TextAlign" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property TextAlign As ContentAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::ContentAlignment TextAlign { System::Drawing::ContentAlignment get(); void set(System::Drawing::ContentAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.CheckBox" /> 控制項上文字的對齊方式。</summary>
        <value>其中一個 <see cref="T:System.Drawing.ContentAlignment" /> 值。 預設值為 <see cref="F:System.Drawing.ContentAlignment.MiddleLeft" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThreeState">
      <MemberSignature Language="C#" Value="public bool ThreeState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ThreeState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.ThreeState" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ThreeState { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Windows.Forms.CheckBox" /> 是否允許三種而非兩種核取狀態。</summary>
        <value>
          如果 <see cref="T:System.Windows.Forms.CheckBox" /> 能夠顯示三種核取狀態則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Forms.CheckBox.ThreeState%2A>屬性設定為`false`、<xref:System.Windows.Forms.CheckBox.CheckState%2A>屬性值只能設定為`Indeterminate`值<xref:System.Windows.Forms.CheckState?displayProperty=nameWithType>程式碼中，而不是由使用者互動。  
  
   
  
## Examples  
 下列程式碼範例會在標籤中顯示三個屬性的值。 <xref:System.Windows.Forms.CheckBox.ThreeState%2A>屬性間切換`true`和`false`以不同的控制項和<xref:System.Windows.Forms.CheckBox.CheckAlign%2A>交替使用`MiddleRight`和`MiddleLeft`值<xref:System.Drawing.ContentAlignment?displayProperty=nameWithType>。 此範例示範如何將屬性值變更為<xref:System.Windows.Forms.CheckBox.ThreeState%2A>會檢查屬性變更和控制項。 此程式碼需要<xref:System.Windows.Forms.CheckBox>，<xref:System.Windows.Forms.Label>和<xref:System.Windows.Forms.Button>具有所有已具現化表單上，標籤是大到足以顯示三行文字，以及參考<xref:System.Drawing?displayProperty=nameWithType>命名空間。 此程式碼中應該呼叫<xref:System.Windows.Forms.Control.Click>控制項的事件處理常式。  
  
 [!code-cpp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回代表目前 <see cref="T:System.Windows.Forms.CheckBox" /> 控制項的字串。</summary>
        <returns>陳述控制項型別和 <see cref="P:System.Windows.Forms.CheckBox.CheckState" /> 屬性狀態的字串。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>