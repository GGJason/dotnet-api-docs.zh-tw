<Type Name="Control" FullName="System.Windows.Forms.Control">
  <TypeSignature Language="C#" Value="public class Control : System.ComponentModel.Component, IDisposable, System.ComponentModel.ISynchronizeInvoke, System.Windows.Forms.IBindableComponent, System.Windows.Forms.IDropTarget, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Control extends System.ComponentModel.Component implements class System.ComponentModel.IComponent, class System.ComponentModel.ISynchronizeInvoke, class System.IDisposable, class System.Windows.Forms.IBindableComponent, class System.Windows.Forms.IDropTarget, class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Control" />
  <TypeSignature Language="VB.NET" Value="Public Class Control&#xA;Inherits Component&#xA;Implements IBindableComponent, IDisposable, IDropTarget, ISynchronizeInvoke, IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class Control : System::ComponentModel::Component, IDisposable, System::ComponentModel::ISynchronizeInvoke, System::Windows::Forms::IBindableComponent, System::Windows::Forms::IDropTarget, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type Control = class&#xA;    inherit Component&#xA;    interface IDropTarget&#xA;    interface ISynchronizeInvoke&#xA;    interface IWin32Window&#xA;    interface IComponent&#xA;    interface IDisposable&#xA;    interface IBindableComponent" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISynchronizeInvoke</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IDropTarget</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="31784-101">定義控制項的基底類別，它們屬於具視覺表示的元件。</span><span class="sxs-lookup"><span data-stu-id="31784-101">Defines the base class for controls, which are components with visual representation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-102">若要建立您自己的控制項類別，繼承自<xref:System.Windows.Forms.UserControl>，<xref:System.Windows.Forms.Control>類別，或從其他 Windows Form 提供控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-102">To create your own control class, inherit from the <xref:System.Windows.Forms.UserControl>, <xref:System.Windows.Forms.Control> classes, or from the other Windows Forms provided controls.</span></span> <span data-ttu-id="31784-103">如需有關如何撰寫自訂控制項的詳細資訊，請參閱[開發自訂 Windows Form 控制項和.NET Framework](~/docs/framework/winforms/controls/developing-custom-windows-forms-controls.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-103">For more information about authoring custom controls, see [Developing Custom Windows Forms Controls with the .NET Framework](~/docs/framework/winforms/controls/developing-custom-windows-forms-controls.md).</span></span>  
  
 <span data-ttu-id="31784-104"><xref:System.Windows.Forms.Control>類別實作向使用者顯示資訊的類別所需的基本功能。</span><span class="sxs-lookup"><span data-stu-id="31784-104">The <xref:System.Windows.Forms.Control> class implements very basic functionality required by classes that display information to the user.</span></span> <span data-ttu-id="31784-105">它會處理透過鍵盤和指標裝置的使用者輸入。</span><span class="sxs-lookup"><span data-stu-id="31784-105">It handles user input through the keyboard and pointing devices.</span></span> <span data-ttu-id="31784-106">它會處理訊息路由和安全性。</span><span class="sxs-lookup"><span data-stu-id="31784-106">It handles message routing and security.</span></span> <span data-ttu-id="31784-107">雖然它不實作繪製，它會定義控制項 （其位置和大小） 的範圍。</span><span class="sxs-lookup"><span data-stu-id="31784-107">It defines the bounds of a control (its position and size), although it does not implement painting.</span></span> <span data-ttu-id="31784-108">它提供的視窗控制代碼 (`hWnd`)。</span><span class="sxs-lookup"><span data-stu-id="31784-108">It provides a window handle (`hWnd`).</span></span>  
  
 <span data-ttu-id="31784-109">Windows Form 控制項使用的環境屬性，讓子控制項可以看起來像是其周圍的環境。</span><span class="sxs-lookup"><span data-stu-id="31784-109">Windows Forms controls use ambient properties so child controls can appear like their surrounding environment.</span></span> <span data-ttu-id="31784-110">*環境屬性*是控制項的屬性，如果未設定，將擷取從父控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-110">An *ambient property* is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="31784-111">如果控制項沒有<xref:System.Windows.Forms.Control.Parent%2A>，而且未設定的屬性，控制會嘗試判斷透過環境屬性的值<xref:System.Windows.Forms.Control.Site%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-111">If the control does not have a <xref:System.Windows.Forms.Control.Parent%2A>, and the property is not set, the control attempts to determine the value of the ambient property through the <xref:System.Windows.Forms.Control.Site%2A> property.</span></span> <span data-ttu-id="31784-112">如果未設置控制項，如果站台不支援環境的屬性，或是在未設定的屬性<xref:System.Windows.Forms.AmbientProperties>，控制項就會使用預設值。</span><span class="sxs-lookup"><span data-stu-id="31784-112">If the control is not sited, if the site does not support ambient properties, or if the property is not set on the <xref:System.Windows.Forms.AmbientProperties>, the control uses its own default values.</span></span> <span data-ttu-id="31784-113">通常，環境的屬性代表特性的控制項，例如<xref:System.Windows.Forms.Control.BackColor%2A>，也就是傳遞給子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-113">Typically, an ambient property represents a characteristic of a control, such as <xref:System.Windows.Forms.Control.BackColor%2A>, that is communicated to a child control.</span></span> <span data-ttu-id="31784-114">例如，<xref:System.Windows.Forms.Button>具有相同<xref:System.Windows.Forms.Control.BackColor%2A>做為其父系<xref:System.Windows.Forms.Form>預設。</span><span class="sxs-lookup"><span data-stu-id="31784-114">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="31784-115">所提供的環境屬性<xref:System.Windows.Forms.Control>類別包括： <xref:System.Windows.Forms.Control.Cursor%2A>， <xref:System.Windows.Forms.Control.Font%2A>， <xref:System.Windows.Forms.Control.BackColor%2A>， <xref:System.Windows.Forms.Control.ForeColor%2A>，和<xref:System.Windows.Forms.Control.RightToLeft%2A>。</span><span class="sxs-lookup"><span data-stu-id="31784-115">Ambient properties provided by the <xref:System.Windows.Forms.Control> class include: <xref:System.Windows.Forms.Control.Cursor%2A>, <xref:System.Windows.Forms.Control.Font%2A>, <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.ForeColor%2A>, and <xref:System.Windows.Forms.Control.RightToLeft%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-116">若要讓 Windows Form 應用程式支援視覺化樣式，請務必設定<xref:System.Windows.Forms.FlatStyle>屬性`System`並包含與您可執行檔的資訊清單。</span><span class="sxs-lookup"><span data-stu-id="31784-116">To make your Windows Forms application support visual styles, be sure to set the <xref:System.Windows.Forms.FlatStyle> property to `System` and include a manifest with your executable.</span></span> <span data-ttu-id="31784-117">資訊清單是 XML 檔案所包含應用程式可執行檔內的資源，或是為位於與可執行檔相同的目錄中的個別檔案。</span><span class="sxs-lookup"><span data-stu-id="31784-117">A manifest is an XML file that is included either as a resource within your application executable or as a separate file that resides in the same directory as the executable file.</span></span> <span data-ttu-id="31784-118">例如資訊清單中，請參閱 < 範例 > 一節的<xref:System.Windows.Forms.FlatStyle>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="31784-118">For an example of a manifest, see the Example section of the <xref:System.Windows.Forms.FlatStyle> enumeration.</span></span> <span data-ttu-id="31784-119">如需有關使用視覺化樣式的詳細資訊，請參閱[視覺化樣式](http://msdn.microsoft.com/library/windows/desktop/bb773187.aspx)。</span><span class="sxs-lookup"><span data-stu-id="31784-119">For more information about using visual styles, see [Visual Styles](http://msdn.microsoft.com/library/windows/desktop/bb773187.aspx).</span></span>  
  
 <span data-ttu-id="31784-120">Windows Form 有內建的協助工具支援，並提供可讓它使用協助工具用戶端應用程式，例如螢幕加大工具和公用程式時，螢幕小鍵盤，語音輸入公用程式，應用程式的相關資訊替代輸入的裝置，以及鍵盤加強公用程式。</span><span class="sxs-lookup"><span data-stu-id="31784-120">Windows Forms has accessibility support built in, and provides information about your application that enables it to work with accessibility client applications such as screen enlarger and reviewer utilities, voice input utilities, on-screen keyboards, alternative input devices, and keyboard enhancement utilities.</span></span> <span data-ttu-id="31784-121">有時候您會想要提供給協助工具用戶端應用程式的其他資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-121">Sometimes you will want to provide additional information to accessibility client applications.</span></span> <span data-ttu-id="31784-122">有兩種方式可以提供這項額外資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-122">There are two ways of providing this additional information.</span></span> <span data-ttu-id="31784-123">您可以設定<xref:System.Windows.Forms.Control.AccessibleName%2A>， <xref:System.Windows.Forms.Control.AccessibleDescription%2A>， <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A>，和<xref:System.Windows.Forms.Control.AccessibleRole%2A>會報告至協助工具用戶端應用程式的屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-123">You can set the <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleDescription%2A>, <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A>, and <xref:System.Windows.Forms.Control.AccessibleRole%2A> property values, which will be reported to accessibility client applications.</span></span> <span data-ttu-id="31784-124">這個方法通常用於提供有限的協助工具資訊的現有控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-124">This method is typically used to provide limited accessibility information for existing controls.</span></span> <span data-ttu-id="31784-125">或者，您可以撰寫您自己的類別衍生自<xref:System.Windows.Forms.AccessibleObject>或<xref:System.Windows.Forms.Control.ControlAccessibleObject>類別，提供依需要盡可能協助工具資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-125">Alternatively, you can write your own class deriving from the <xref:System.Windows.Forms.AccessibleObject> or <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes, providing as much accessibility information as needed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-126">若要維持較佳的效能，請勿在其建構函式中設定控制項的大小。</span><span class="sxs-lookup"><span data-stu-id="31784-126">To maintain better performance, do not set the size of a control in its constructor.</span></span> <span data-ttu-id="31784-127">慣用的方法是覆寫<xref:System.Windows.Forms.Control.DefaultSize%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-127">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-128">無法加入資料繫結<xref:System.Windows.Forms.Control>其建構函式中。</span><span class="sxs-lookup"><span data-stu-id="31784-128">Do not add data bindings for a <xref:System.Windows.Forms.Control> in its constructor.</span></span> <span data-ttu-id="31784-129">這樣會導致程式碼產生錯誤，而且可能會導致不想要的行為。</span><span class="sxs-lookup"><span data-stu-id="31784-129">Doing so will cause errors in code generation and can cause unwanted behavior.</span></span>  
  
 <span data-ttu-id="31784-130">中的控制項的大部分<xref:System.Windows.Forms>命名空間使用基礎的 Windows 通用控制項做為基礎建立。</span><span class="sxs-lookup"><span data-stu-id="31784-130">The majority of the controls in the <xref:System.Windows.Forms> namespace use the underlying Windows common control as a base to build on.</span></span> <span data-ttu-id="31784-131">如需 Windows 通用控制項的詳細資訊，請參閱[一般控制項參考](http://msdn.microsoft.com/library/windows/desktop/bb775497.aspx)。</span><span class="sxs-lookup"><span data-stu-id="31784-131">For more information about the Windows common controls, see [General Control Reference](http://msdn.microsoft.com/library/windows/desktop/bb775497.aspx).</span></span>  
  
 <span data-ttu-id="31784-132">若要識別從不同的處理序的 Windows Form 控制項，使用標準`SendMessage`呼叫傳遞 WM_GETCONTROLNAME 訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-132">To identify Windows Forms controls from a separate process, use a standard `SendMessage` call to pass the WM_GETCONTROLNAME message.</span></span> <span data-ttu-id="31784-133">WM_GETCONTROLNAME 無關的語言和 Windows 階層架構。</span><span class="sxs-lookup"><span data-stu-id="31784-133">WM_GETCONTROLNAME is independent of the language and Windows hierarchy.</span></span> <span data-ttu-id="31784-134">如需詳細資訊，請參閱中的 「 建議解決方案適用於 Windows Form 」 主題[自動化 Windows Form](http://msdn.microsoft.com/library/ms996405.aspx)。</span><span class="sxs-lookup"><span data-stu-id="31784-134">For more information, see the "Recommended Solution for Windows Forms" topic in[Automating Windows Forms](http://msdn.microsoft.com/library/ms996405.aspx).</span></span>  
  
 <span data-ttu-id="31784-135">使用<xref:System.Windows.Forms.Control.InvokeRequired%2A>來同步處理從多個執行緒存取控制項的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-135">Use the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property to synchronize access to the control from multiple threads.</span></span> <span data-ttu-id="31784-136">如需多執行緒 Windows Form 控制項的詳細資訊，請參閱[如何： 進行安全執行緒呼叫 Windows Form 控制項](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)</span><span class="sxs-lookup"><span data-stu-id="31784-136">For more information about multithreaded Windows Forms controls, see [How to: Make Thread-Safe Calls to Windows Forms Controls](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="31784-137">只有下列成員是安全執行緒： <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />， <see cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />， <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />， <see cref="P:System.Windows.Forms.Control.InvokeRequired" />，和<see cref="M:System.Windows.Forms.Control.CreateGraphics" />如果已經建立控制項的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-137">Only the following members are thread safe: <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />, <see cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />, <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />, <see cref="P:System.Windows.Forms.Control.InvokeRequired" />, and <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> if the handle for the control has already been created.</span></span> <span data-ttu-id="31784-138">呼叫<see cref="M:System.Windows.Forms.Control.CreateGraphics" />背景執行緒上建立控制項的控制代碼之前可能會導致不合法的跨執行緒呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-138">Calling <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span></threadsafe>
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.ScrollableControl" />
    <altmember cref="T:System.Windows.Forms.ContainerControl" />
    <altmember cref="T:System.ComponentModel.Component" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31784-139">初始化 <see cref="T:System.Windows.Forms.Control" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="31784-139">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-140">使用預設設定，初始化 <see cref="T:System.Windows.Forms.Control" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="31784-140">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with default settings.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-141"><xref:System.Windows.Forms.Control>類別是在 Windows Forms 應用程式中使用的所有控制項的基底類別。</span><span class="sxs-lookup"><span data-stu-id="31784-141">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="31784-142">通常不會使用這個類別建立類別的執行個體，因為通常不會直接呼叫這個建構函式，但而由衍生類別呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-142">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : string -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="31784-143">由控制項顯示的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-143">The text displayed by the control.</span></span></param>
        <summary><span data-ttu-id="31784-144">以特定文字初始化 <see cref="T:System.Windows.Forms.Control" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="31784-144">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with specific text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-145"><xref:System.Windows.Forms.Control>類別是在 Windows Forms 應用程式中使用的所有控制項的基底類別。</span><span class="sxs-lookup"><span data-stu-id="31784-145">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="31784-146">通常不會使用這個類別建立類別的執行個體，因為通常不會直接呼叫這個建構函式，但而由衍生類別呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-146">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="31784-147">這個版本的<xref:System.Windows.Forms.Control.%23ctor%2A>建構函式設定初始<xref:System.Windows.Forms.Control.Text%2A>屬性值設定為`text`參數值。</span><span class="sxs-lookup"><span data-stu-id="31784-147">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (System.Windows.Forms.Control parent, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control parent, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As Control, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::Windows::Forms::Control ^ parent, System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : System.Windows.Forms.Control * string -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control (parent, text)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Forms.Control" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="31784-148">做為控制項父代的 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="31784-148">The <see cref="T:System.Windows.Forms.Control" /> to be the parent of the control.</span></span></param>
        <param name="text"><span data-ttu-id="31784-149">由控制項顯示的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-149">The text displayed by the control.</span></span></param>
        <summary><span data-ttu-id="31784-150">以特定文字將 <see cref="T:System.Windows.Forms.Control" /> 類別的新執行個體初始化為子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-150">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class as a child control, with specific text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-151"><xref:System.Windows.Forms.Control>類別是在 Windows Forms 應用程式中使用的所有控制項的基底類別。</span><span class="sxs-lookup"><span data-stu-id="31784-151">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="31784-152">通常不會使用這個類別建立類別的執行個體，因為通常不會直接呼叫這個建構函式，但而由衍生類別呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-152">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="31784-153">這個版本的<xref:System.Windows.Forms.Control.%23ctor%2A>建構函式設定初始<xref:System.Windows.Forms.Control.Text%2A>屬性值設定為`text`參數值。</span><span class="sxs-lookup"><span data-stu-id="31784-153">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span> <span data-ttu-id="31784-154">建構函式也會將控制項加入至父控制項的<xref:System.Windows.Forms.Control.ControlCollection>。</span><span class="sxs-lookup"><span data-stu-id="31784-154">The constructor also adds the control to the parent control's <xref:System.Windows.Forms.Control.ControlCollection>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (string text, int left, int top, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, int32 left, int32 top, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, left As Integer, top As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::String ^ text, int left, int top, int width, int height);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : string * int * int * int * int -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control (text, left, top, width, height)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="31784-155">由控制項顯示的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-155">The text displayed by the control.</span></span></param>
        <param name="left"><span data-ttu-id="31784-156">控制項的 <see cref="P:System.Drawing.Point.X" /> 位置，從控制項容器的左邊緣開始，單位為像素。</span><span class="sxs-lookup"><span data-stu-id="31784-156">The <see cref="P:System.Drawing.Point.X" /> position of the control, in pixels, from the left edge of the control's container.</span></span> <span data-ttu-id="31784-157">這個值被指派給 <see cref="P:System.Windows.Forms.Control.Left" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-157">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Left" /> property.</span></span></param>
        <param name="top"><span data-ttu-id="31784-158">控制項的 <see cref="P:System.Drawing.Point.Y" /> 位置，從控制項容器的上邊緣開始，單位為像素。</span><span class="sxs-lookup"><span data-stu-id="31784-158">The <see cref="P:System.Drawing.Point.Y" /> position of the control, in pixels, from the top edge of the control's container.</span></span> <span data-ttu-id="31784-159">這個值被指派給 <see cref="P:System.Windows.Forms.Control.Top" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-159">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Top" /> property.</span></span></param>
        <param name="width"><span data-ttu-id="31784-160">控制項的寬度 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-160">The width of the control, in pixels.</span></span> <span data-ttu-id="31784-161">這個值被指派給 <see cref="P:System.Windows.Forms.Control.Width" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-161">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Width" /> property.</span></span></param>
        <param name="height"><span data-ttu-id="31784-162">控制項的高度 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-162">The height of the control, in pixels.</span></span> <span data-ttu-id="31784-163">這個值被指派給 <see cref="P:System.Windows.Forms.Control.Height" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-163">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Height" /> property.</span></span></param>
        <summary><span data-ttu-id="31784-164">以特定文字、大小和位置初始化 <see cref="T:System.Windows.Forms.Control" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="31784-164">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with specific text, size, and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-165"><xref:System.Windows.Forms.Control>類別是在 Windows Forms 應用程式中使用的所有控制項的基底類別。</span><span class="sxs-lookup"><span data-stu-id="31784-165">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="31784-166">通常不會使用這個類別建立類別的執行個體，因為通常不會直接呼叫這個建構函式，但而由衍生類別呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-166">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="31784-167">這個版本的<xref:System.Windows.Forms.Control.%23ctor%2A>建構函式設定初始<xref:System.Windows.Forms.Control.Text%2A>屬性值設定為`text`參數值。</span><span class="sxs-lookup"><span data-stu-id="31784-167">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span> <span data-ttu-id="31784-168">初始<xref:System.Windows.Forms.Control.Size%2A>和<xref:System.Windows.Forms.Control.Location%2A>的控制項由`left`， `top`，`width`和`height`參數值。</span><span class="sxs-lookup"><span data-stu-id="31784-168">The initial <xref:System.Windows.Forms.Control.Size%2A> and <xref:System.Windows.Forms.Control.Location%2A> of the control are determined by the `left`, `top`, `width` and `height` parameter values.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-169">若要維持較佳的效能，請勿在其建構函式中設定控制項的大小。</span><span class="sxs-lookup"><span data-stu-id="31784-169">To maintain better performance, do not set the size of a control in its constructor.</span></span> <span data-ttu-id="31784-170">慣用的方法是覆寫<xref:System.Windows.Forms.Control.DefaultSize%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-170">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (System.Windows.Forms.Control parent, string text, int left, int top, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control parent, string text, int32 left, int32 top, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As Control, text As String, left As Integer, top As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::Windows::Forms::Control ^ parent, System::String ^ text, int left, int top, int width, int height);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : System.Windows.Forms.Control * string * int * int * int * int -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control (parent, text, left, top, width, height)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Forms.Control" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="31784-171">做為控制項父代的 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="31784-171">The <see cref="T:System.Windows.Forms.Control" /> to be the parent of the control.</span></span></param>
        <param name="text"><span data-ttu-id="31784-172">由控制項顯示的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-172">The text displayed by the control.</span></span></param>
        <param name="left"><span data-ttu-id="31784-173">控制項的 <see cref="P:System.Drawing.Point.X" /> 位置，從控制項容器的左邊緣開始，單位為像素。</span><span class="sxs-lookup"><span data-stu-id="31784-173">The <see cref="P:System.Drawing.Point.X" /> position of the control, in pixels, from the left edge of the control's container.</span></span> <span data-ttu-id="31784-174">這個值被指派給 <see cref="P:System.Windows.Forms.Control.Left" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-174">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Left" /> property.</span></span></param>
        <param name="top"><span data-ttu-id="31784-175">控制項的 <see cref="P:System.Drawing.Point.Y" /> 位置，從控制項容器的上邊緣開始，單位為像素。</span><span class="sxs-lookup"><span data-stu-id="31784-175">The <see cref="P:System.Drawing.Point.Y" /> position of the control, in pixels, from the top edge of the control's container.</span></span> <span data-ttu-id="31784-176">這個值被指派給 <see cref="P:System.Windows.Forms.Control.Top" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-176">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Top" /> property.</span></span></param>
        <param name="width"><span data-ttu-id="31784-177">控制項的寬度 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-177">The width of the control, in pixels.</span></span> <span data-ttu-id="31784-178">這個值被指派給 <see cref="P:System.Windows.Forms.Control.Width" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-178">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Width" /> property.</span></span></param>
        <param name="height"><span data-ttu-id="31784-179">控制項的高度 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-179">The height of the control, in pixels.</span></span> <span data-ttu-id="31784-180">這個值被指派給 <see cref="P:System.Windows.Forms.Control.Height" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-180">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Height" /> property.</span></span></param>
        <summary><span data-ttu-id="31784-181">以特定文字、大小和位置，將 <see cref="T:System.Windows.Forms.Control" /> 類別的新執行個體初始化為子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-181">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class as a child control, with specific text, size, and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-182"><xref:System.Windows.Forms.Control>類別是在 Windows Forms 應用程式中使用的所有控制項的基底類別。</span><span class="sxs-lookup"><span data-stu-id="31784-182">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="31784-183">通常不會使用這個類別建立類別的執行個體，因為通常不會直接呼叫這個建構函式，但而由衍生類別呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-183">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="31784-184">這個版本的<xref:System.Windows.Forms.Control.%23ctor%2A>建構函式設定初始<xref:System.Windows.Forms.Control.Text%2A>屬性值設定為`text`參數值。</span><span class="sxs-lookup"><span data-stu-id="31784-184">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span> <span data-ttu-id="31784-185">建構函式也會將控制項加入至父控制項的<xref:System.Windows.Forms.Control.ControlCollection>。</span><span class="sxs-lookup"><span data-stu-id="31784-185">The constructor also adds the control to the parent control's <xref:System.Windows.Forms.Control.ControlCollection>.</span></span> <span data-ttu-id="31784-186">初始<xref:System.Windows.Forms.Control.Size%2A>和<xref:System.Windows.Forms.Control.Location%2A>的控制項由`left`， `top`，`width`和`height`參數值。</span><span class="sxs-lookup"><span data-stu-id="31784-186">The initial <xref:System.Windows.Forms.Control.Size%2A> and <xref:System.Windows.Forms.Control.Location%2A> of the control are determined by the `left`, `top`, `width` and `height` parameter values.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-187">若要維持較佳的效能，請勿在其建構函式中設定控制項的大小。</span><span class="sxs-lookup"><span data-stu-id="31784-187">To maintain better performance, do not set the size of a control in its constructor.</span></span> <span data-ttu-id="31784-188">慣用的方法是覆寫<xref:System.Windows.Forms.Control.DefaultSize%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-188">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AccessibilityNotifyClients">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31784-189">將 <see cref="T:System.Windows.Forms.AccessibleEvents" /> 告知協助工具用戶端應用程式。</span><span class="sxs-lookup"><span data-stu-id="31784-189">Notifies the accessibility client applications of <see cref="T:System.Windows.Forms.AccessibleEvents" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AccessibilityNotifyClients">
      <MemberSignature Language="C#" Value="protected internal void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int childID);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AccessibilityNotifyClients(valuetype System.Windows.Forms.AccessibleEvents accEvent, int32 childID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AccessibilityNotifyClients (accEvent As AccessibleEvents, childID As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AccessibilityNotifyClients(System::Windows::Forms::AccessibleEvents accEvent, int childID);" />
      <MemberSignature Language="F#" Value="member this.AccessibilityNotifyClients : System.Windows.Forms.AccessibleEvents * int -&gt; unit" Usage="control.AccessibilityNotifyClients (accEvent, childID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accEvent" Type="System.Windows.Forms.AccessibleEvents" />
        <Parameter Name="childID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="accEvent"><span data-ttu-id="31784-190">要通知協助工具用戶端應用程式的 <see cref="T:System.Windows.Forms.AccessibleEvents" />。</span><span class="sxs-lookup"><span data-stu-id="31784-190">The <see cref="T:System.Windows.Forms.AccessibleEvents" /> to notify the accessibility client applications of.</span></span></param>
        <param name="childID"><span data-ttu-id="31784-191">要通知協助工具事件的子 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="31784-191">The child <see cref="T:System.Windows.Forms.Control" /> to notify of the accessible event.</span></span></param>
        <summary><span data-ttu-id="31784-192">將指定子控制項的指定 <see cref="T:System.Windows.Forms.AccessibleEvents" /> 告知協助工具用戶端應用程式。</span><span class="sxs-lookup"><span data-stu-id="31784-192">Notifies the accessibility client applications of the specified <see cref="T:System.Windows.Forms.AccessibleEvents" /> for the specified child control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-193">您必須呼叫<xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A?displayProperty=nameWithType>每個方法<xref:System.Windows.Forms.AccessibleEvents>協助工具用戶端應用程式所收到的通知。</span><span class="sxs-lookup"><span data-stu-id="31784-193">You must call the <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A?displayProperty=nameWithType> method for each <xref:System.Windows.Forms.AccessibleEvents> the accessibility client applications are to be notified of.</span></span> <span data-ttu-id="31784-194"><xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A>屬性時設定，或是從通常呼叫方法的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-194">The <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> method is typically called when a property is set or from within an event handler.</span></span> <span data-ttu-id="31784-195">例如，您可能會呼叫<xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A>方法並傳入<xref:System.Windows.Forms.AccessibleEvents>值`Hide`從內的事件處理常式<xref:System.Windows.Forms.Control.VisibleChanged?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-195">For example, you might call the <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> method and pass in an <xref:System.Windows.Forms.AccessibleEvents> value of `Hide` from within the event handler for the <xref:System.Windows.Forms.Control.VisibleChanged?displayProperty=nameWithType> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-196">下列程式碼範例示範如何建立可存取性感知的圖表控制，請使用<xref:System.Windows.Forms.AccessibleObject>和<xref:System.Windows.Forms.Control.ControlAccessibleObject>類別會公開可存取的資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-196">The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information.</span></span> <span data-ttu-id="31784-197">控制項會繪製兩條曲線，以及一個圖例。</span><span class="sxs-lookup"><span data-stu-id="31784-197">The control plots two curves along with a legend.</span></span> <span data-ttu-id="31784-198">`ChartControlAccessibleObject`類別，衍生自`ControlAccessibleObject`，用於<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A>方法以提供圖表控制項的自訂存取資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-198">The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control.</span></span> <span data-ttu-id="31784-199">因為圖表圖例不是實際<xref:System.Windows.Forms.Control>-為基礎的控制，但改為繪製所 chart 控制項中，它不會不含任何內建的可存取資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-199">Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</span></span> <span data-ttu-id="31784-200">因為這個緣故，`ChartControlAccessibleObject`類別覆寫<xref:System.Windows.Forms.AccessibleObject.GetChild%2A>方法以傳回`CurveLegendAccessibleObject`，表示每個部分的圖例可存取的資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-200">Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend.</span></span> <span data-ttu-id="31784-201">當存取感知的應用程式使用這個控制項時，控制項可以提供必要的可存取資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-201">When an accessible-aware application uses this control, the control can provide the necessary accessible information.</span></span>  
  
 <span data-ttu-id="31784-202">此程式碼摘錄示範呼叫<xref:System.Windows.Forms.Control.AccessibilityNotifyClients%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-202">This code excerpt demonstrates calling the <xref:System.Windows.Forms.Control.AccessibilityNotifyClients%2A> method.</span></span> <span data-ttu-id="31784-203">請參閱<xref:System.Windows.Forms.AccessibleObject>類別概觀的完整程式碼範例。</span><span class="sxs-lookup"><span data-stu-id="31784-203">See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#5)]
 [!code-csharp[System.Windows.Forms.AccessibleObject#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#5)]
 [!code-vb[System.Windows.Forms.AccessibleObject#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleEvents" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="AccessibilityNotifyClients">
      <MemberSignature Language="C#" Value="protected void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int objectID, int childID);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AccessibilityNotifyClients(valuetype System.Windows.Forms.AccessibleEvents accEvent, int32 objectID, int32 childID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AccessibilityNotifyClients (accEvent As AccessibleEvents, objectID As Integer, childID As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AccessibilityNotifyClients(System::Windows::Forms::AccessibleEvents accEvent, int objectID, int childID);" />
      <MemberSignature Language="F#" Value="member this.AccessibilityNotifyClients : System.Windows.Forms.AccessibleEvents * int * int -&gt; unit" Usage="control.AccessibilityNotifyClients (accEvent, objectID, childID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accEvent" Type="System.Windows.Forms.AccessibleEvents" />
        <Parameter Name="objectID" Type="System.Int32" />
        <Parameter Name="childID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="accEvent"><span data-ttu-id="31784-204">要通知協助工具用戶端應用程式的 <see cref="T:System.Windows.Forms.AccessibleEvents" />。</span><span class="sxs-lookup"><span data-stu-id="31784-204">The <see cref="T:System.Windows.Forms.AccessibleEvents" /> to notify the accessibility client applications of.</span></span></param>
        <param name="objectID"><span data-ttu-id="31784-205">
          <see cref="T:System.Windows.Forms.AccessibleObject" /> 的識別項。</span><span class="sxs-lookup"><span data-stu-id="31784-205">The identifier of the <see cref="T:System.Windows.Forms.AccessibleObject" />.</span></span></param>
        <param name="childID"><span data-ttu-id="31784-206">要通知協助工具事件的子 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="31784-206">The child <see cref="T:System.Windows.Forms.Control" /> to notify of the accessible event.</span></span></param>
        <summary><span data-ttu-id="31784-207">將指定子控制項的指定 <see cref="T:System.Windows.Forms.AccessibleEvents" /> 告知協助工具用戶端應用程式。</span><span class="sxs-lookup"><span data-stu-id="31784-207">Notifies the accessibility client applications of the specified <see cref="T:System.Windows.Forms.AccessibleEvents" /> for the specified child control .</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityObject">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleObject AccessibilityObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.AccessibleObject AccessibilityObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibilityObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AccessibilityObject As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AccessibleObject ^ AccessibilityObject { System::Windows::Forms::AccessibleObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessibilityObject : System.Windows.Forms.AccessibleObject" Usage="System.Windows.Forms.Control.AccessibilityObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-208">取得指定給控制項的 <see cref="T:System.Windows.Forms.AccessibleObject" />。</span><span class="sxs-lookup"><span data-stu-id="31784-208">Gets the <see cref="T:System.Windows.Forms.AccessibleObject" /> assigned to the control.</span></span></summary>
        <value><span data-ttu-id="31784-209">指定給控制項的 <see cref="T:System.Windows.Forms.AccessibleObject" />。</span><span class="sxs-lookup"><span data-stu-id="31784-209">The <see cref="T:System.Windows.Forms.AccessibleObject" /> assigned to the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-210">若要控制從這個方法傳回的執行個體，請覆寫<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-210">To control the instance returned from this method, override the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method.</span></span>  
  
 <span data-ttu-id="31784-211">如果目前沒有為控制項指定 <xref:System.Windows.Forms.AccessibleObject>，則會建立其新的執行個體。</span><span class="sxs-lookup"><span data-stu-id="31784-211">If no <xref:System.Windows.Forms.AccessibleObject> is currently assigned to the control, a new instance of one is created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-212">取得或設定<xref:System.Windows.Forms.Control.AccessibilityObject%2A>屬性，您必須加入參考`Accessibility`隨安裝組件[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="31784-212">To get or set the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property, you must add a reference to the `Accessibility` assembly installed with the[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span>  
  
 <span data-ttu-id="31784-213">如需可存取物件的詳細資訊，請參閱[Active Accessibility](http://msdn.microsoft.com/library/windows/desktop/dd373592.aspx)。</span><span class="sxs-lookup"><span data-stu-id="31784-213">For more information about accessible objects, see [Active Accessibility](http://msdn.microsoft.com/library/windows/desktop/dd373592.aspx).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" />
        <altmember cref="T:System.Windows.Forms.Control.ControlAccessibleObject" />
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleDefaultActionDescription">
      <MemberSignature Language="C#" Value="public string AccessibleDefaultActionDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleDefaultActionDescription" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleDefaultActionDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessibleDefaultActionDescription { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleDefaultActionDescription : string with get, set" Usage="System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-214">取得或設定協助用戶端應用程式所使用的控制項的預設動作描述。</span><span class="sxs-lookup"><span data-stu-id="31784-214">Gets or sets the default action description of the control for use by accessibility client applications.</span></span></summary>
        <value><span data-ttu-id="31784-215">控制項的預設動作描述，供協助用戶端應用程式使用。</span><span class="sxs-lookup"><span data-stu-id="31784-215">The default action description of the control for use by accessibility client applications.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-216">物件的<xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A>屬性會描述從使用者的觀點來看操作物件的主要方法。</span><span class="sxs-lookup"><span data-stu-id="31784-216">An object's <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A> property describes the object's primary method of manipulation from the user's viewpoint.</span></span> <span data-ttu-id="31784-217">這個屬性應該是動詞或短動詞片語。</span><span class="sxs-lookup"><span data-stu-id="31784-217">This property should be a verb or a short verb phrase.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-218">並非所有的物件有預設動作，而且有些物件可能會有相關的預設動作其<xref:System.Windows.Forms.AccessibleObject.Value%2A?displayProperty=nameWithType>屬性，如下列範例所示：</span><span class="sxs-lookup"><span data-stu-id="31784-218">Not all objects have default actions, and some objects might have a default action that is related to its <xref:System.Windows.Forms.AccessibleObject.Value%2A?displayProperty=nameWithType> property, such as in the following examples:</span></span>  
  
-   <span data-ttu-id="31784-219">選取的核取方塊具有 「 取消核取 」 的預設動作而值為 「 已核取 」。</span><span class="sxs-lookup"><span data-stu-id="31784-219">A selected check box has a default action of "Uncheck" and a value of "Checked."</span></span>  
  
-   <span data-ttu-id="31784-220">已清除核取方塊具有 「 檢查 」 的預設動作，值是 「 未核取 」。</span><span class="sxs-lookup"><span data-stu-id="31784-220">A cleared check box has a default action of "Check" and a value of "Unchecked."</span></span>  
  
-   <span data-ttu-id="31784-221">標記為 「 列印 」 的按鈕不有任何值 」 按下 」 的預設動作。</span><span class="sxs-lookup"><span data-stu-id="31784-221">A button labeled "Print" has a default action of "Press," with no value.</span></span>  
  
-   <span data-ttu-id="31784-222">標籤或文字方塊控制項，顯示"Printer"沒有預設動作，不過會有值為"Printer"。</span><span class="sxs-lookup"><span data-stu-id="31784-222">A label or a text box control that shows "Printer" has no default action, but would have a value of "Printer."</span></span>  
  
 <span data-ttu-id="31784-223">如需可存取物件的屬性的詳細資訊，請參閱[內容的描述性屬性](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)。</span><span class="sxs-lookup"><span data-stu-id="31784-223">For more information about properties of accessible objects, see [Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.DefaultAction" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleDescription">
      <MemberSignature Language="C#" Value="public string AccessibleDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleDescription" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleDescription" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessibleDescription { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleDescription : string with get, set" Usage="System.Windows.Forms.Control.AccessibleDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-224">取得或設定協助工具用戶端應用程式使用之控制項的描述。</span><span class="sxs-lookup"><span data-stu-id="31784-224">Gets or sets the description of the control used by accessibility client applications.</span></span></summary>
        <value><span data-ttu-id="31784-225">協助工具用戶端應用程式使用之控制項的描述。</span><span class="sxs-lookup"><span data-stu-id="31784-225">The description of the control used by accessibility client applications.</span></span> <span data-ttu-id="31784-226">預設值為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="31784-226">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-227">物件的<xref:System.Windows.Forms.Control.AccessibleDescription%2A>屬性會提供有關物件的視覺外觀的文字描述。</span><span class="sxs-lookup"><span data-stu-id="31784-227">An object's <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property provides a textual description about an object's visual appearance.</span></span> <span data-ttu-id="31784-228">描述主要是用來針對視力或眼盲的使用者，提供更大的內容，但也可以使用內容搜尋或其他應用程式。</span><span class="sxs-lookup"><span data-stu-id="31784-228">The description is primarily used to provide greater context for low-vision or blind users, but can also be used for context searching or other applications.</span></span>  
  
 <span data-ttu-id="31784-229"><xref:System.Windows.Forms.Control.AccessibleDescription%2A>屬性描述不明顯，如果需要或者如果它是多餘根據物件的<xref:System.Windows.Forms.Control.AccessibleName%2A>， <xref:System.Windows.Forms.Control.AccessibleRole%2A>， <xref:System.Windows.Forms.AccessibleObject.State%2A>，和<xref:System.Windows.Forms.AccessibleObject.Value%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-229">The <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property is needed if the description is not obvious, or if it is redundant based on the object's <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleRole%2A>, <xref:System.Windows.Forms.AccessibleObject.State%2A>, and <xref:System.Windows.Forms.AccessibleObject.Value%2A> properties.</span></span> <span data-ttu-id="31784-230">比方說，「 確定 」 按鈕就不需要其他資訊，但是顯示圖片的仙人掌的按鈕。</span><span class="sxs-lookup"><span data-stu-id="31784-230">For example, a button with "OK" would not need additional information, but a button that shows a picture of a cactus would.</span></span> <span data-ttu-id="31784-231"><xref:System.Windows.Forms.Control.AccessibleName%2A>，和<xref:System.Windows.Forms.Control.AccessibleRole%2A>(也可能<xref:System.Windows.Forms.AccessibleObject.Help%2A>) 仙人掌按鈕屬性會描述其用途，但<xref:System.Windows.Forms.Control.AccessibleDescription%2A>屬性會傳達資訊是無形的例如"的按鈕顯示圖片的仙人掌。 」</span><span class="sxs-lookup"><span data-stu-id="31784-231">The <xref:System.Windows.Forms.Control.AccessibleName%2A>, and <xref:System.Windows.Forms.Control.AccessibleRole%2A> (and perhaps <xref:System.Windows.Forms.AccessibleObject.Help%2A>) properties for the cactus button would describe its purpose, but the <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property would convey information that is less tangible, such as "A button that shows a picture of a cactus."</span></span>  
  
 <span data-ttu-id="31784-232">如需可存取物件的屬性的詳細資訊，請參閱[內容的描述性屬性](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)。</span><span class="sxs-lookup"><span data-stu-id="31784-232">For more information about properties of accessible objects, see [Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-233">下列程式碼範例建立的執行個體<xref:System.Windows.Forms.CheckBox>衍生的類別， `MyCheckBox`，將其指派<xref:System.Drawing.Image>至其<xref:System.Windows.Forms.ButtonBase.Image%2A>屬性和集合<xref:System.Windows.Forms.Control.AccessibleName%2A>和<xref:System.Windows.Forms.Control.AccessibleDescription%2A>屬性，因為<xref:System.Windows.Forms.Control.Text%2A>屬性是`null`。</span><span class="sxs-lookup"><span data-stu-id="31784-233">The following code example creates an instance of a <xref:System.Windows.Forms.CheckBox> derived class, `MyCheckBox`, assigns it an <xref:System.Drawing.Image> to its <xref:System.Windows.Forms.ButtonBase.Image%2A> property and sets the <xref:System.Windows.Forms.Control.AccessibleName%2A> and <xref:System.Windows.Forms.Control.AccessibleDescription%2A> properties, because the <xref:System.Windows.Forms.Control.Text%2A> property is `null`.</span></span> <span data-ttu-id="31784-234">這個範例需要您有<xref:System.Windows.Forms.Form>名為`MyForm`。</span><span class="sxs-lookup"><span data-stu-id="31784-234">This example requires that you have a <xref:System.Windows.Forms.Form> named `MyForm`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CPP/controlaccessibility.cpp#2)]
 [!code-csharp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CS/controlaccessibility.cs#2)]
 [!code-vb[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/VB/controlaccessibility.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Description" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleName">
      <MemberSignature Language="C#" Value="public string AccessibleName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleName" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessibleName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleName : string with get, set" Usage="System.Windows.Forms.Control.AccessibleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-235">取得或設定協助工具用戶端應用程式使用的控制項名稱。</span><span class="sxs-lookup"><span data-stu-id="31784-235">Gets or sets the name of the control used by accessibility client applications.</span></span></summary>
        <value><span data-ttu-id="31784-236">協助工具用戶端應用程式使用的控制項名稱。</span><span class="sxs-lookup"><span data-stu-id="31784-236">The name of the control used by accessibility client applications.</span></span> <span data-ttu-id="31784-237">預設值為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="31784-237">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-238"><xref:System.Windows.Forms.Control.AccessibleName%2A>屬性是簡要說明，並識別此物件在其容器，例如中的文字中的標籤<xref:System.Windows.Forms.Button>、 名稱<xref:System.Windows.Forms.MenuItem>旁, 顯示的標籤或<xref:System.Windows.Forms.TextBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-238">The <xref:System.Windows.Forms.Control.AccessibleName%2A> property is a label that briefly describes and identifies the object within its container, such as the text in a <xref:System.Windows.Forms.Button>, the name of a <xref:System.Windows.Forms.MenuItem>, or a label displayed next to a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 <span data-ttu-id="31784-239">如需可存取物件的屬性的詳細資訊，請參閱 「[內容的描述性屬性](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)。</span><span class="sxs-lookup"><span data-stu-id="31784-239">For more information about properties of accessible objects, see the "[Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-240">下列程式碼範例建立的執行個體<xref:System.Windows.Forms.CheckBox>衍生的類別， `MyCheckBox`，將其指派<xref:System.Drawing.Image>至其<xref:System.Windows.Forms.ButtonBase.Image%2A>屬性和集合<xref:System.Windows.Forms.Control.AccessibleName%2A>和<xref:System.Windows.Forms.Control.AccessibleDescription%2A>屬性自<xref:System.Windows.Forms.Control.Text%2A>屬性是`null`。</span><span class="sxs-lookup"><span data-stu-id="31784-240">The following code example creates an instance of a <xref:System.Windows.Forms.CheckBox> derived class, `MyCheckBox`, assigns it an <xref:System.Drawing.Image> to its <xref:System.Windows.Forms.ButtonBase.Image%2A> property and sets the <xref:System.Windows.Forms.Control.AccessibleName%2A> and <xref:System.Windows.Forms.Control.AccessibleDescription%2A> properties since the <xref:System.Windows.Forms.Control.Text%2A> property is `null`.</span></span> <span data-ttu-id="31784-241">這個範例需要您有<xref:System.Windows.Forms.Form>名為`MyForm`。</span><span class="sxs-lookup"><span data-stu-id="31784-241">This example requires that you have a <xref:System.Windows.Forms.Form> named `MyForm`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CPP/controlaccessibility.cpp#2)]
 [!code-csharp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CS/controlaccessibility.cs#2)]
 [!code-vb[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/VB/controlaccessibility.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Name" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleRole">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleRole AccessibleRole { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AccessibleRole AccessibleRole" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleRole" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleRole As AccessibleRole" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AccessibleRole AccessibleRole { System::Windows::Forms::AccessibleRole get(); void set(System::Windows::Forms::AccessibleRole value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleRole : System.Windows.Forms.AccessibleRole with get, set" Usage="System.Windows.Forms.Control.AccessibleRole" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleRole</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-242">取得或設定控制項的可存取角色。</span><span class="sxs-lookup"><span data-stu-id="31784-242">Gets or sets the accessible role of the control</span></span></summary>
        <value><span data-ttu-id="31784-243"><see cref="T:System.Windows.Forms.AccessibleRole" /> 的其中一個值。</span><span class="sxs-lookup"><span data-stu-id="31784-243">One of the values of <see cref="T:System.Windows.Forms.AccessibleRole" />.</span></span> <span data-ttu-id="31784-244">預設值為 <see langword="Default" />。</span><span class="sxs-lookup"><span data-stu-id="31784-244">The default is <see langword="Default" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-245"><xref:System.Windows.Forms.Control.AccessibleRole%2A> 屬性會描述物件是何種使用者介面項目。</span><span class="sxs-lookup"><span data-stu-id="31784-245">The <xref:System.Windows.Forms.Control.AccessibleRole%2A> property describes what kind of user interface element an object is.</span></span> <span data-ttu-id="31784-246">如果無法判斷控制項的角色，<xref:System.Windows.Forms.Control.AccessibleRole%2A> 屬性會設定為 `Default`。</span><span class="sxs-lookup"><span data-stu-id="31784-246">If the control's role cannot be determined, the <xref:System.Windows.Forms.Control.AccessibleRole%2A> property is set to `Default`.</span></span>  
  
 <span data-ttu-id="31784-247">如需可存取物件的屬性的詳細資訊，請參閱[內容的描述性屬性](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)。</span><span class="sxs-lookup"><span data-stu-id="31784-247">For more information about properties of accessible objects, see [Content of Descriptive Properties](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="31784-248">所指派的值不是其中一個 <see cref="T:System.Windows.Forms.AccessibleRole" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-248">The value assigned is not one of the <see cref="T:System.Windows.Forms.AccessibleRole" /> values.</span></span></exception>
        <altmember cref="T:System.Windows.Forms.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Role" />
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public virtual bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.Forms.Control.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-249">取得或設定值，指出控制項是否能接受使用者拖放上來的資料。</span><span class="sxs-lookup"><span data-stu-id="31784-249">Gets or sets a value indicating whether the control can accept data that the user drags onto it.</span></span></summary>
        <value><span data-ttu-id="31784-250">如果控制項內允許拖放作業，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-250"><see langword="true" /> if drag-and-drop operations are allowed in the control; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="31784-251">預設值為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-251">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="31784-252">下列程式碼範例會啟用卸除使用者將是影像或影像檔案拖曳至表單，並將其顯示在其上的點。</span><span class="sxs-lookup"><span data-stu-id="31784-252">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</span></span> <span data-ttu-id="31784-253"><xref:System.Windows.Forms.Control.OnPaint%2A>表單繪製每次重新繪製影像會覆寫方法; 否則為映像就只會一直保存到下一步 重新繪製。</span><span class="sxs-lookup"><span data-stu-id="31784-253">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="31784-254"><xref:System.Windows.Forms.Control.DragEnter>事件處理方法判斷被拖曳至表單的資料類型，並提供適當的回應。</span><span class="sxs-lookup"><span data-stu-id="31784-254">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="31784-255"><xref:System.Windows.Forms.Control.DragDrop>事件處理方法會顯示在表單中，影像如果<xref:System.Drawing.Image>可以從資料建立。</span><span class="sxs-lookup"><span data-stu-id="31784-255">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="31784-256">因為<xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType>值螢幕座標，這個範例會使用<xref:System.Windows.Forms.Control.PointToClient%2A>方法，將它們轉換為用戶端座標。</span><span class="sxs-lookup"><span data-stu-id="31784-256">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-257">用於將此屬性設定為無限制的剪貼簿存取<see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="31784-257">for unrestricted Clipboard access to set this property to <see langword="true" />.</span></span> <span data-ttu-id="31784-258">列舉型別相關聯：<see langword="AllClipboard" />值 <see cref="T:System.Security.Permissions.UIPermissionClipboard" /></span><span class="sxs-lookup"><span data-stu-id="31784-258">Associated enumeration: the <see langword="AllClipboard" /> value of <see cref="T:System.Security.Permissions.UIPermissionClipboard" /></span></span></permission>
        <block subset="none" type="overrides"><span data-ttu-id="31784-259"><para>在覆寫<see cref="P:System.Windows.Forms.Control.AllowDrop" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.AllowDrop" />屬性擴充的基底實作。否則，您必須提供所有的實作。您不需要覆寫兩個<see langword="get" />和<see langword="set" />存取子<see cref="P:System.Windows.Forms.Control.AllowDrop" />屬性; 您可以覆寫只能有一個必要。</para></span><span class="sxs-lookup"><span data-stu-id="31784-259"><para>When overriding the <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property; you can override only one if needed.</para></span></span></block>
        <altmember cref="T:System.Windows.Forms.DragEventArgs" />
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
        <altmember cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
      </Docs>
    </Member>
    <Member MemberName="Anchor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.AnchorStyles Anchor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AnchorStyles Anchor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Anchor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Anchor As AnchorStyles" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::AnchorStyles Anchor { System::Windows::Forms::AnchorStyles get(); void set(System::Windows::Forms::AnchorStyles value); };" />
      <MemberSignature Language="F#" Value="member this.Anchor : System.Windows.Forms.AnchorStyles with get, set" Usage="System.Windows.Forms.Control.Anchor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AnchorStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-260">取得或設定控制項繫結至的容器邊緣，並決定控制項隨其父代重新調整大小的方式。</span><span class="sxs-lookup"><span data-stu-id="31784-260">Gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent.</span></span></summary>
        <value><span data-ttu-id="31784-261"><see cref="T:System.Windows.Forms.AnchorStyles" /> 值的位元組合。</span><span class="sxs-lookup"><span data-stu-id="31784-261">A bitwise combination of the <see cref="T:System.Windows.Forms.AnchorStyles" /> values.</span></span> <span data-ttu-id="31784-262">預設值為 <see langword="Top" /> 和 <see langword="Left" />。</span><span class="sxs-lookup"><span data-stu-id="31784-262">The default is <see langword="Top" /> and <see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-263">使用<xref:System.Windows.Forms.Control.Anchor%2A>屬性來定義如何調整控制項大小的自動調整其父控制項大小時。</span><span class="sxs-lookup"><span data-stu-id="31784-263">Use the <xref:System.Windows.Forms.Control.Anchor%2A> property to define how a control is automatically resized as its parent control is resized.</span></span> <span data-ttu-id="31784-264">錨定在其父控制項的控制項，可確保，錨定的邊緣仍保留在相同位置相對於邊緣父控制項的父控制項調整大小。</span><span class="sxs-lookup"><span data-stu-id="31784-264">Anchoring a control to its parent control ensures that the anchored edges remain in the same position relative to the edges of the parent control when the parent control is resized.</span></span>  
  
 <span data-ttu-id="31784-265">您可以錨定至一或多個邊緣與其容器控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-265">You can anchor a control to one or more edges of its container.</span></span> <span data-ttu-id="31784-266">比方說，如果您有<xref:System.Windows.Forms.Form>與<xref:System.Windows.Forms.Button>其<xref:System.Windows.Forms.Control.Anchor%2A>屬性值設定為`Top`和`Bottom`、<xref:System.Windows.Forms.Button>會延伸以維護的頂端和底端邊緣的錨定的距離<xref:System.Windows.Forms.Form>為<xref:System.Windows.Forms.Control.Height%2A>的<xref:System.Windows.Forms.Form>會增加。</span><span class="sxs-lookup"><span data-stu-id="31784-266">For example, if you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button> whose <xref:System.Windows.Forms.Control.Anchor%2A> property value is set to `Top` and `Bottom`, the <xref:System.Windows.Forms.Button> is stretched to maintain the anchored distance to the top and bottom edges of the <xref:System.Windows.Forms.Form> as the <xref:System.Windows.Forms.Control.Height%2A> of the <xref:System.Windows.Forms.Form> is increased.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-267"><xref:System.Windows.Forms.Control.Anchor%2A>和<xref:System.Windows.Forms.Control.Dock%2A>屬性互斥。</span><span class="sxs-lookup"><span data-stu-id="31784-267">The <xref:System.Windows.Forms.Control.Anchor%2A> and <xref:System.Windows.Forms.Control.Dock%2A> properties are mutually exclusive.</span></span> <span data-ttu-id="31784-268">只有一個可以設定一次，最後一個設定的優先順序。</span><span class="sxs-lookup"><span data-stu-id="31784-268">Only one can be set at a time, and the last one set takes precedence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-269">下列程式碼範例會將<xref:System.Windows.Forms.Button>至表單，並設定一些常見的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-269">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="31784-270">此範例錨定至表單的右下角的按鈕，以便調整表單大小時，則會保持其相對位置。</span><span class="sxs-lookup"><span data-stu-id="31784-270">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="31784-271">接下來設定<xref:System.Windows.Forms.Control.BackgroundImage%2A>並調整大小的按鈕，以做為相同大小<xref:System.Drawing.Image>。</span><span class="sxs-lookup"><span data-stu-id="31784-271">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="31784-272">範例接著會設定<xref:System.Windows.Forms.Control.TabStop%2A>至`true`並設定<xref:System.Windows.Forms.Control.TabIndex%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-272">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="31784-273">最後，它會加入事件處理常式來處理<xref:System.Windows.Forms.Control.Click>按鈕的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-273">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="31784-274">這個範例需要您有<xref:System.Windows.Forms.ImageList>名為`imageList1`。</span><span class="sxs-lookup"><span data-stu-id="31784-274">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-275"><para>在覆寫<see cref="P:System.Windows.Forms.Control.Anchor" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.Anchor" />屬性擴充的基底實作。否則，您必須提供所有的實作。您不需要覆寫兩個<see langword="get" />和<see langword="set" />存取子<see cref="P:System.Windows.Forms.Control.Anchor" />屬性; 您可以覆寫只能有一個必要。</para></span><span class="sxs-lookup"><span data-stu-id="31784-275"><para>When overriding the <see cref="P:System.Windows.Forms.Control.Anchor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Anchor" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Anchor" /> property; you can override only one if needed.</para></span></span></block>
        <altmember cref="T:System.Windows.Forms.AnchorStyles" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="AutoScrollOffset">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Point AutoScrollOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point AutoScrollOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AutoScrollOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AutoScrollOffset As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Point AutoScrollOffset { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.AutoScrollOffset : System.Drawing.Point with get, set" Usage="System.Windows.Forms.Control.AutoScrollOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Point), "0, 0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-276">取得或設定此控制項在 <see cref="M:System.Windows.Forms.ScrollableControl.ScrollControlIntoView(System.Windows.Forms.Control)" /> 中要捲動到哪一個位置。</span><span class="sxs-lookup"><span data-stu-id="31784-276">Gets or sets where this control is scrolled to in <see cref="M:System.Windows.Forms.ScrollableControl.ScrollControlIntoView(System.Windows.Forms.Control)" />.</span></span></summary>
        <value><span data-ttu-id="31784-277">指定捲動位置的 <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="31784-277">A <see cref="T:System.Drawing.Point" /> specifying the scroll location.</span></span> <span data-ttu-id="31784-278">預設為控制項的左上角。</span><span class="sxs-lookup"><span data-stu-id="31784-278">The default is the upper-left corner of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public virtual bool AutoSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AutoSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AutoSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AutoSize { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSize : bool with get, set" Usage="System.Windows.Forms.Control.AutoSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-279">這個屬性與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-279">This property is not relevant for this class.</span></span></summary>
        <value><span data-ttu-id="31784-280">如果已啟用，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-280"><see langword="true" /> if enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-281">這個屬性與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-281">This property is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AutoSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AutoSizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.AutoSizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AutoSizeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AutoSizeChanged;" />
      <MemberSignature Language="F#" Value="member this.AutoSizeChanged : EventHandler " Usage="member this.AutoSizeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-282">這個事件與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-282">This event is not relevant for this class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-283">這個事件與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-283">This event is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.Control.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-501)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-284">取得或設定控制項的背景色彩。</span><span class="sxs-lookup"><span data-stu-id="31784-284">Gets or sets the background color for the control.</span></span></summary>
        <value><span data-ttu-id="31784-285"><see cref="T:System.Drawing.Color" />，代表控制項的背景色彩。</span><span class="sxs-lookup"><span data-stu-id="31784-285">A <see cref="T:System.Drawing.Color" /> that represents the background color of the control.</span></span> <span data-ttu-id="31784-286">預設值為 <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> 屬性的值。</span><span class="sxs-lookup"><span data-stu-id="31784-286">The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-287"><xref:System.Windows.Forms.Control.BackColor%2A>屬性不支援透明的色彩，除非`SupportsTransparentBackColor`值<xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType>設`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-287">The <xref:System.Windows.Forms.Control.BackColor%2A> property does not support transparent colors unless the `SupportsTransparentBackColor` value of <xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType> is set to `true`.</span></span>  
  
 <span data-ttu-id="31784-288"><xref:System.Windows.Forms.Control.BackColor%2A>屬性是環境的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-288">The <xref:System.Windows.Forms.Control.BackColor%2A> property is an ambient property.</span></span> <span data-ttu-id="31784-289">環境屬性是控制項屬性，如果未設定，將擷取從父控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-289">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="31784-290">例如，<xref:System.Windows.Forms.Button>具有相同<xref:System.Windows.Forms.Control.BackColor%2A>做為其父系<xref:System.Windows.Forms.Form>預設。</span><span class="sxs-lookup"><span data-stu-id="31784-290">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="31784-291">如需環境屬性的詳細資訊，請參閱<xref:System.Windows.Forms.AmbientProperties>類別或<xref:System.Windows.Forms.Control>類別概觀。</span><span class="sxs-lookup"><span data-stu-id="31784-291">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-292">下列程式碼範例會設定<xref:System.Windows.Forms.Control.BackColor%2A>和<xref:System.Windows.Forms.Control.ForeColor%2A>預設系統色彩的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-292">The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors.</span></span> <span data-ttu-id="31784-293">如果控制項的任何子控制項，則程式碼以遞迴方式呼叫其本身。</span><span class="sxs-lookup"><span data-stu-id="31784-293">The code recursively calls itself if the control has any child controls.</span></span> <span data-ttu-id="31784-294">這個程式碼範例需要您具有<xref:System.Windows.Forms.Form>與至少一個子系控制項; 不過，子容器控制，例如<xref:System.Windows.Forms.Panel>或<xref:System.Windows.Forms.GroupBox>，使用自己的子系控制項會進一步示範遞迴。</span><span class="sxs-lookup"><span data-stu-id="31784-294">This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-295"><para>在覆寫<see cref="P:System.Windows.Forms.Control.BackColor" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.BackColor" />屬性擴充的基底實作。否則，您必須提供所有的實作。您不需要覆寫兩個<see langword="get" />和<see langword="set" />存取子<see cref="P:System.Windows.Forms.Control.BackColor" />屬性; 您可以覆寫只能有一個必要。</para></span><span class="sxs-lookup"><span data-stu-id="31784-295"><para>When overriding the <see cref="P:System.Windows.Forms.Control.BackColor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BackColor" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BackColor" /> property; you can override only one if needed.</para></span></span></block>
        <altmember cref="T:System.Windows.Forms.AmbientProperties" />
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="BackColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackColorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackColorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackColorChanged;" />
      <MemberSignature Language="F#" Value="member this.BackColorChanged : EventHandler " Usage="member this.BackColorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-296">發生於 <see cref="P:System.Windows.Forms.Control.BackColor" /> 屬性的值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-296">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.BackColor" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-297">如果會引發這個事件<xref:System.Windows.Forms.Control.BackColor%2A>以程式設計方式修改或使用者互動變更屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-297">This event is raised if the <xref:System.Windows.Forms.Control.BackColor%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-298">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-298">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-299">下列程式碼範例會為事件處理常式時執行<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-299">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-300"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式*PropertyName* `Changed`所引發的時機對應*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-300">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-301">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-301">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="31784-302">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-302">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-303">這個範例需要您有<xref:System.Windows.Forms.Form>包含<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-303">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImage : System.Drawing.Image with get, set" Usage="System.Windows.Forms.Control.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-304">取得或設定在控制項中顯示的背景影像。</span><span class="sxs-lookup"><span data-stu-id="31784-304">Gets or sets the background image displayed in the control.</span></span></summary>
        <value><span data-ttu-id="31784-305">表示要在控制項背景中顯示之影像的 <see cref="T:System.Drawing.Image" />。</span><span class="sxs-lookup"><span data-stu-id="31784-305">An <see cref="T:System.Drawing.Image" /> that represents the image to display in the background of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   <span data-ttu-id="31784-306">使用<xref:System.Windows.Forms.Control.BackgroundImage%2A>放置圖形影像拖曳至控制項的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-306">Use the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property to place a graphic image onto a control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-307">Windows Form 控制項不支援透明或安全性透明的色彩與影像做為背景影像。</span><span class="sxs-lookup"><span data-stu-id="31784-307">Images with translucent or transparent colors are not supported by Windows Forms controls as background images.</span></span>  
>   
>  <span data-ttu-id="31784-308">這個屬性不支援子控制項的<xref:System.Windows.Forms.Form.RightToLeftLayout%2A>屬性是`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-308">This property is not supported on child controls whose <xref:System.Windows.Forms.Form.RightToLeftLayout%2A> property is `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-309">下列程式碼範例會將<xref:System.Windows.Forms.Button>至表單，並設定一些常見的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-309">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="31784-310">此範例錨定至表單的右下角的按鈕，以便調整表單大小時，則會保持其相對位置。</span><span class="sxs-lookup"><span data-stu-id="31784-310">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="31784-311">接下來設定<xref:System.Windows.Forms.Control.BackgroundImage%2A>並調整大小的按鈕，以做為相同大小<xref:System.Drawing.Image>。</span><span class="sxs-lookup"><span data-stu-id="31784-311">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="31784-312">範例接著會設定<xref:System.Windows.Forms.Control.TabStop%2A>至`true`並設定<xref:System.Windows.Forms.Control.TabIndex%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-312">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="31784-313">最後，它會加入事件處理常式來處理<xref:System.Windows.Forms.Control.Click>按鈕的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-313">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="31784-314">這個範例需要您有<xref:System.Windows.Forms.ImageList>名為`imageList1`。</span><span class="sxs-lookup"><span data-stu-id="31784-314">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-315"><para>在覆寫<see cref="P:System.Windows.Forms.Control.BackgroundImage" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.BackgroundImage" />屬性擴充的基底實作。否則，您必須提供所有的實作。您不需要覆寫兩個<see langword="get" />和<see langword="set" />存取子<see cref="P:System.Windows.Forms.Control.BackgroundImage" />屬性; 您可以覆寫只能有一個必要。</para></span><span class="sxs-lookup"><span data-stu-id="31784-315"><para>When overriding the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property; you can override only one if needed.</para></span></span></block>
        <altmember cref="T:System.Drawing.Image" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageChanged : EventHandler " Usage="member this.BackgroundImageChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-316">發生於 <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> 屬性的值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-316">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-317">如果會引發這個事件<xref:System.Windows.Forms.Control.BackgroundImage%2A>以程式設計方式修改或使用者互動變更屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-317">This event is raised if the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-318">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-318">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-319">下列程式碼範例會為事件處理常式時執行<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-319">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-320"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式*PropertyName* `Changed`所引發的時機對應*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-320">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-321">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-321">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="31784-322">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-322">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-323">這個範例需要您有<xref:System.Windows.Forms.Form>包含<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-323">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Image" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayout : System.Windows.Forms.ImageLayout with get, set" Usage="System.Windows.Forms.Control.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-324">取得或設定在 <see cref="T:System.Windows.Forms.ImageLayout" /> 列舉類型中所定義的背景影像配置。</span><span class="sxs-lookup"><span data-stu-id="31784-324">Gets or sets the background image layout as defined in the <see cref="T:System.Windows.Forms.ImageLayout" /> enumeration.</span></span></summary>
        <value><span data-ttu-id="31784-325">其中一個 <see cref="T:System.Windows.Forms.ImageLayout" /> 值 (<see cref="F:System.Windows.Forms.ImageLayout.Center" />、<see cref="F:System.Windows.Forms.ImageLayout.None" />、<see cref="F:System.Windows.Forms.ImageLayout.Stretch" />、<see cref="F:System.Windows.Forms.ImageLayout.Tile" /> 或 <see cref="F:System.Windows.Forms.ImageLayout.Zoom" />)。</span><span class="sxs-lookup"><span data-stu-id="31784-325">One of the values of <see cref="T:System.Windows.Forms.ImageLayout" /> (<see cref="F:System.Windows.Forms.ImageLayout.Center" /> , <see cref="F:System.Windows.Forms.ImageLayout.None" />, <see cref="F:System.Windows.Forms.ImageLayout.Stretch" />, <see cref="F:System.Windows.Forms.ImageLayout.Tile" />, or <see cref="F:System.Windows.Forms.ImageLayout.Zoom" />).</span></span> <span data-ttu-id="31784-326"><see cref="F:System.Windows.Forms.ImageLayout.Tile" /> 為預設值。</span><span class="sxs-lookup"><span data-stu-id="31784-326"><see cref="F:System.Windows.Forms.ImageLayout.Tile" /> is the default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-327">使用<xref:System.Windows.Forms.Control.BackgroundImageLayout%2A>屬性，以指定的位置和您在放置拖曳至控制項之影像的行為。</span><span class="sxs-lookup"><span data-stu-id="31784-327">Use the <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> property to specify the position and behavior of an image you have placed onto a control.</span></span> <span data-ttu-id="31784-328"><xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> 才會生效<xref:System.Windows.Forms.Control.BackgroundImage%2A>屬性設定。</span><span class="sxs-lookup"><span data-stu-id="31784-328"><xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> takes effect only if the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property is set.</span></span>  
  
 <span data-ttu-id="31784-329">如果您設定，您可以增加效能，大型影像<xref:System.Windows.Forms.Control.BackgroundImageLayout%2A>為以外的其他項目<xref:System.Windows.Forms.ImageLayout.Tile>。</span><span class="sxs-lookup"><span data-stu-id="31784-329">You can increase performance for large images if you set <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> to something other than <xref:System.Windows.Forms.ImageLayout.Tile>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="31784-330">指定的列舉值不存在。</span><span class="sxs-lookup"><span data-stu-id="31784-330">The specified enumeration value does not exist.</span></span></exception>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayoutChanged : EventHandler " Usage="member this.BackgroundImageLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-331">發生於 <see cref="P:System.Windows.Forms.Control.BackgroundImageLayout" /> 屬性變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-331">Occurs when the <see cref="P:System.Windows.Forms.Control.BackgroundImageLayout" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-332">如果會引發這個事件<xref:System.Windows.Forms.Control.BackgroundImageLayout%2A>屬性變更，以程式設計方式或使用者互動。</span><span class="sxs-lookup"><span data-stu-id="31784-332">This event is raised if the <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> property changes either programmatically or by user interaction.</span></span>  
  
 <span data-ttu-id="31784-333">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-333">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-334">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-334">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-335">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-335">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged> event.</span></span> <span data-ttu-id="31784-336">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-336">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-337">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-337">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-338">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-338">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-339">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-339">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#9)]
 [!code-vb[System.Windows.Forms.EventExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31784-340">在建立控制項基礎控制代碼的執行緒上執行非同步委派。</span><span class="sxs-lookup"><span data-stu-id="31784-340">Executes a delegate asynchronously on the thread that the control's underlying handle was created on.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate -&gt; IAsyncResult" Usage="control.BeginInvoke method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="31784-341">沒有參數的方法委派。</span><span class="sxs-lookup"><span data-stu-id="31784-341">A delegate to a method that takes no parameters.</span></span></param>
        <summary><span data-ttu-id="31784-342">在建立控制項基礎控制代碼的執行緒上執行指定的非同步委派。</span><span class="sxs-lookup"><span data-stu-id="31784-342">Executes the specified delegate asynchronously on the thread that the control's underlying handle was created on.</span></span></summary>
        <returns><span data-ttu-id="31784-343"><see cref="T:System.IAsyncResult" />，表示 <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> 作業的結果。</span><span class="sxs-lookup"><span data-stu-id="31784-343">An <see cref="T:System.IAsyncResult" /> that represents the result of the <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-344">會以非同步方式呼叫的委派，這個方法會立即傳回。</span><span class="sxs-lookup"><span data-stu-id="31784-344">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="31784-345">您可以從任何執行緒，即使擁有控制項的控制代碼的執行緒呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="31784-345">You can call this method from any thread, even the thread that owns the control's handle.</span></span> <span data-ttu-id="31784-346">如果尚不存在的控制項控點，直到找到的控制項或表單沒有視窗控制代碼，這個方法會搜尋控制項的父鏈結。</span><span class="sxs-lookup"><span data-stu-id="31784-346">If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="31784-347">如果找不到適當的控制代碼，<xref:System.Windows.Forms.Control.BeginInvoke%2A>將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="31784-347">If no appropriate handle can be found, <xref:System.Windows.Forms.Control.BeginInvoke%2A> will throw an exception.</span></span> <span data-ttu-id="31784-348">委派方法內的例外狀況被視為未截獲，且將會傳送至應用程式的設陷例外狀況處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-348">Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.</span></span>  
  
 <span data-ttu-id="31784-349">您可以呼叫<xref:System.Windows.Forms.Control.EndInvoke%2A>來擷取從委派的傳回值，如果 referencesteps，但這不是必要。</span><span class="sxs-lookup"><span data-stu-id="31784-349">You can call <xref:System.Windows.Forms.Control.EndInvoke%2A> to retrieve the return value from the delegate, if neccesary, but this is not required.</span></span> <span data-ttu-id="31784-350"><xref:System.Windows.Forms.Control.EndInvoke%2A> 將會封鎖，直到可以擷取傳回值。</span><span class="sxs-lookup"><span data-stu-id="31784-350"><xref:System.Windows.Forms.Control.EndInvoke%2A> will block until the return value can be retrieved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-351">大部分控制項上的方法可以只會從呼叫執行緒建立控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-351">Most methods on a control can only be called from the thread where the control was created.</span></span> <span data-ttu-id="31784-352">除了<xref:System.Windows.Forms.Control.InvokeRequired%2A>屬性，在控制項上都是安全執行緒的四種方法： <xref:System.Windows.Forms.Control.Invoke%2A>， <xref:System.Windows.Forms.Control.BeginInvoke%2A>， <xref:System.Windows.Forms.Control.EndInvoke%2A>，和<xref:System.Windows.Forms.Control.CreateGraphics%2A>如果已經建立控制項的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-352">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="31784-353">呼叫<xref:System.Windows.Forms.Control.CreateGraphics%2A>背景執行緒上建立控制項的控制代碼之前可能會導致不合法的跨執行緒呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-353">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="31784-354">至於其他所有方法呼叫，您應該使用叫用方法的其中一個來封送處理控制項的執行緒的呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-354">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span> <span data-ttu-id="31784-355">叫用方法一定會叫用其控制項的執行緒上回呼。</span><span class="sxs-lookup"><span data-stu-id="31784-355">The invoke methods always invoke their callbacks on the control's thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-356">如果應該處理訊息的執行緒不再為作用中，可能會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="31784-356">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-357">下列程式碼範例示範使用<xref:System.Windows.Forms.Control.BeginInvoke%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-357">The following code example demonstrates a use of the <xref:System.Windows.Forms.Control.BeginInvoke%2A> method.</span></span>  
  
 [!code-cpp[Control_BeginInvoke#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_BeginInvoke/CPP/control_begininvoke.cpp#2)]
 [!code-csharp[Control_BeginInvoke#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_BeginInvoke/CS/control_begininvoke.cs#2)]
 [!code-vb[Control_BeginInvoke#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_BeginInvoke/VB/control_begininvoke.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="31784-358">找不到沒有適當的視窗控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-358">No appropriate window handle can be found.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="31784-359">立即呼叫者呼叫 unmanaged 程式碼。</span><span class="sxs-lookup"><span data-stu-id="31784-359">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="31784-360">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="31784-360">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.CreateGraphics" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member BeginInvoke : Delegate * obj[] -&gt; IAsyncResult&#xA;override this.BeginInvoke : Delegate * obj[] -&gt; IAsyncResult" Usage="control.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="31784-361">方法的委派，採用的參數數目和類型與 <c>args</c> 參數中包含的數目和類型相同。</span><span class="sxs-lookup"><span data-stu-id="31784-361">A delegate to a method that takes parameters of the same number and type that are contained in the <c>args</c> parameter.</span></span></param>
        <param name="args"><span data-ttu-id="31784-362">做為引數傳遞至指定方法的物件陣列。</span><span class="sxs-lookup"><span data-stu-id="31784-362">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="31784-363">如果不需要引數，則這個可為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="31784-363">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="31784-364">在建立控制項基礎控制代碼的執行緒上，以指定的引數非同步執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="31784-364">Executes the specified delegate asynchronously with the specified arguments, on the thread that the control's underlying handle was created on.</span></span></summary>
        <returns><span data-ttu-id="31784-365"><see cref="T:System.IAsyncResult" />，表示 <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> 作業的結果。</span><span class="sxs-lookup"><span data-stu-id="31784-365">An <see cref="T:System.IAsyncResult" /> that represents the result of the <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-366">會以非同步方式呼叫的委派，這個方法會立即傳回。</span><span class="sxs-lookup"><span data-stu-id="31784-366">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="31784-367">您可以從任何執行緒，即使擁有控制項的控制代碼的執行緒呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="31784-367">You can call this method from any thread, even the thread that owns the control's handle.</span></span> <span data-ttu-id="31784-368">如果尚不存在的控制項控點，直到找到的控制項或表單沒有視窗控制代碼，這個方法會搜尋控制項的父鏈結。</span><span class="sxs-lookup"><span data-stu-id="31784-368">If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="31784-369">如果找不到適當的控制代碼，<xref:System.Windows.Forms.Control.BeginInvoke%2A>將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="31784-369">If no appropriate handle can be found, <xref:System.Windows.Forms.Control.BeginInvoke%2A> will throw an exception.</span></span> <span data-ttu-id="31784-370">委派方法內的例外狀況被視為未截獲，且將會傳送至應用程式的設陷例外狀況處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-370">Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.</span></span>  
  
 <span data-ttu-id="31784-371">您可以呼叫<xref:System.Windows.Forms.Control.EndInvoke%2A>來擷取從委派的傳回值，如果 referencesteps，但這不是必要。</span><span class="sxs-lookup"><span data-stu-id="31784-371">You can call <xref:System.Windows.Forms.Control.EndInvoke%2A> to retrieve the return value from the delegate, if neccesary, but this is not required.</span></span> <span data-ttu-id="31784-372"><xref:System.Windows.Forms.Control.EndInvoke%2A> 將會封鎖，直到可以擷取傳回值。</span><span class="sxs-lookup"><span data-stu-id="31784-372"><xref:System.Windows.Forms.Control.EndInvoke%2A> will block until the return value can be retrieved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-373">大部分控制項上的方法可以只會從呼叫執行緒建立控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-373">Most methods on a control can only be called from the thread where the control was created.</span></span> <span data-ttu-id="31784-374">除了<xref:System.Windows.Forms.Control.InvokeRequired%2A>屬性，在控制項上都是安全執行緒的四種方法： <xref:System.Windows.Forms.Control.Invoke%2A>， <xref:System.Windows.Forms.Control.BeginInvoke%2A>， <xref:System.Windows.Forms.Control.EndInvoke%2A>，和<xref:System.Windows.Forms.Control.CreateGraphics%2A>如果已經建立控制項的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-374">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="31784-375">呼叫<xref:System.Windows.Forms.Control.CreateGraphics%2A>背景執行緒上建立控制項的控制代碼之前可能會導致不合法的跨執行緒呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-375">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="31784-376">至於其他所有方法呼叫，您應該使用叫用方法的其中一個來封送處理控制項的執行緒的呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-376">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span> <span data-ttu-id="31784-377">叫用方法一定會叫用其控制項的執行緒上回呼。</span><span class="sxs-lookup"><span data-stu-id="31784-377">The invoke methods always invoke their callbacks on the control's thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-378">如果應該處理訊息的執行緒不再為作用中，可能會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="31784-378">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-379">下列程式碼範例示範使用<xref:System.Windows.Forms.Control.BeginInvoke%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-379">The following code example demonstrates a use of the <xref:System.Windows.Forms.Control.BeginInvoke%2A> method.</span></span>  
  
 [!code-cpp[Control_BeginInvoke#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_BeginInvoke/CPP/control_begininvoke.cpp#1)]
 [!code-csharp[Control_BeginInvoke#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_BeginInvoke/CS/control_begininvoke.cs#1)]
 [!code-vb[Control_BeginInvoke#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_BeginInvoke/VB/control_begininvoke.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="31784-380">找不到沒有適當的視窗控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-380">No appropriate window handle can be found.</span></span></exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.CreateGraphics" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="BindingContext">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.BindingContext BindingContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingContext BindingContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BindingContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BindingContext As BindingContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::BindingContext ^ BindingContext { System::Windows::Forms::BindingContext ^ get(); void set(System::Windows::Forms::BindingContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingContext : System.Windows.Forms.BindingContext with get, set" Usage="System.Windows.Forms.Control.BindingContext" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IBindableComponent.BindingContext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-381">取得或設定控制項的 <see cref="T:System.Windows.Forms.BindingContext" />。</span><span class="sxs-lookup"><span data-stu-id="31784-381">Gets or sets the <see cref="T:System.Windows.Forms.BindingContext" /> for the control.</span></span></summary>
        <value><span data-ttu-id="31784-382">控制項的 <see cref="T:System.Windows.Forms.BindingContext" />。</span><span class="sxs-lookup"><span data-stu-id="31784-382">A <see cref="T:System.Windows.Forms.BindingContext" /> for the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-383"><xref:System.Windows.Forms.BindingContext>的<xref:System.Windows.Forms.Control>用來傳回單一<xref:System.Windows.Forms.BindingManagerBase>所包含的所有資料繫結控制項<xref:System.Windows.Forms.Control>。</span><span class="sxs-lookup"><span data-stu-id="31784-383">The <xref:System.Windows.Forms.BindingContext> of a <xref:System.Windows.Forms.Control> is used to return a single <xref:System.Windows.Forms.BindingManagerBase> for all data-bound controls contained by the <xref:System.Windows.Forms.Control>.</span></span> <span data-ttu-id="31784-384"><xref:System.Windows.Forms.BindingManagerBase>會保留所有的控制項繫結至相同的資料來源同步處理。</span><span class="sxs-lookup"><span data-stu-id="31784-384">The <xref:System.Windows.Forms.BindingManagerBase> keeps all controls that are bound to the same data source synchronized.</span></span> <span data-ttu-id="31784-385">例如，設定<xref:System.Windows.Forms.BindingManagerBase.Position%2A>屬性<xref:System.Windows.Forms.BindingManagerBase>所有資料繫結控制項所指向基礎清單中指定的項目。</span><span class="sxs-lookup"><span data-stu-id="31784-385">For example, setting the <xref:System.Windows.Forms.BindingManagerBase.Position%2A> property of the <xref:System.Windows.Forms.BindingManagerBase> specifies the item in the underlying list that all data-bound controls point to.</span></span>  
  
 <span data-ttu-id="31784-386">如需有關建立新<xref:System.Windows.Forms.BindingContext>並將它指派給<xref:System.Windows.Forms.Control.BindingContext%2A>屬性，請參閱<xref:System.Windows.Forms.BindingContext.%23ctor%2A>。</span><span class="sxs-lookup"><span data-stu-id="31784-386">For more information about creating a new <xref:System.Windows.Forms.BindingContext> and assigning it to the <xref:System.Windows.Forms.Control.BindingContext%2A> property, see the <xref:System.Windows.Forms.BindingContext.%23ctor%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-387">下列程式碼範例會建立四個<xref:System.Windows.Forms.Binding>以五個控制項，繫結物件<xref:System.Windows.Forms.DateTimePicker>和第四個<xref:System.Windows.Forms.TextBox>控制項，加入數個資料來源。</span><span class="sxs-lookup"><span data-stu-id="31784-387">The following code example creates four <xref:System.Windows.Forms.Binding> objects to bind five controls, a <xref:System.Windows.Forms.DateTimePicker> and four <xref:System.Windows.Forms.TextBox> controls, to several data sources.</span></span> <span data-ttu-id="31784-388"><xref:System.Windows.Forms.BindingContext>然後用來取得<xref:System.Windows.Forms.BindingManagerBase>每個資料來源。</span><span class="sxs-lookup"><span data-stu-id="31784-388">The <xref:System.Windows.Forms.BindingContext> is then used to get the <xref:System.Windows.Forms.BindingManagerBase> for each data source.</span></span>  
  
 [!code-cpp[Classic BindingContext Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingContext Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingContext Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingContext Example/CS/source.cs#1)]
 [!code-vb[Classic BindingContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-389"><para>在覆寫<see cref="P:System.Windows.Forms.Control.BindingContext" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.BindingContext" />屬性擴充的基底實作。否則，您必須提供所有的實作。您不需要覆寫兩個<see langword="get" />和<see langword="set" />存取子<see cref="P:System.Windows.Forms.Control.BindingContext" />屬性; 您可以覆寫只能有一個必要。</para></span><span class="sxs-lookup"><span data-stu-id="31784-389"><para>When overriding the <see cref="P:System.Windows.Forms.Control.BindingContext" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BindingContext" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BindingContext" /> property; you can override only one if needed.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BindingContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BindingContextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BindingContextChanged;" />
      <MemberSignature Language="F#" Value="member this.BindingContextChanged : EventHandler " Usage="member this.BindingContextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-390">發生於 <see cref="T:System.Windows.Forms.BindingContext" /> 屬性的值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-390">Occurs when the value of the <see cref="T:System.Windows.Forms.BindingContext" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-391">若要加入新<xref:System.Windows.Forms.BindingContext>至<xref:System.Windows.Forms.Control>透過<xref:System.Windows.Forms.Control.BindingContext%2A>屬性，請參閱<xref:System.Windows.Forms.BindingContext.%23ctor%2A>建構函式。</span><span class="sxs-lookup"><span data-stu-id="31784-391">To add a new <xref:System.Windows.Forms.BindingContext> to the <xref:System.Windows.Forms.Control> through the <xref:System.Windows.Forms.Control.BindingContext%2A> property, see the <xref:System.Windows.Forms.BindingContext.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="31784-392">如果會引發這個事件<xref:System.Windows.Forms.Control.BindingContext%2A>屬性變更來以程式設計方式修改或使用者互動變更。</span><span class="sxs-lookup"><span data-stu-id="31784-392">This event is raised if the <xref:System.Windows.Forms.Control.BindingContext%2A> property is changed is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-393">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-393">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-394">下列程式碼範例會將<xref:System.EventHandler>委派給<xref:System.Windows.Forms.Control.BindingContextChanged>事件<xref:System.Windows.Forms.TextBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-394">The following code example adds an <xref:System.EventHandler> delegate to the <xref:System.Windows.Forms.Control.BindingContextChanged> event of a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 [!code-cpp[Classic Control.BindingContextChanged Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.BindingContextChanged Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/CS/source.cs#1)]
 [!code-vb[Classic Control.BindingContextChanged Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingContext" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
        <altmember cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Bottom">
      <MemberSignature Language="C#" Value="public int Bottom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Bottom" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Bottom" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bottom As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Bottom { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Bottom : int" Usage="System.Windows.Forms.Control.Bottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-395">取得控制項下邊緣和其容器工作區 (Client Area) 上邊緣之間的距離 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-395">Gets the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="31784-396"><see cref="T:System.Int32" />，代表控制項下緣和其容器工作區上緣之間的距離 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-396">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-397">這個屬性的值的總和等於<xref:System.Windows.Forms.Control.Top%2A>屬性值和<xref:System.Windows.Forms.Control.Height%2A>屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-397">The value of this property is equal to the sum of the <xref:System.Windows.Forms.Control.Top%2A> property value, and the <xref:System.Windows.Forms.Control.Height%2A> property value.</span></span>  
  
 <span data-ttu-id="31784-398"><xref:System.Windows.Forms.Control.Bottom%2A>屬性是唯讀屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-398">The <xref:System.Windows.Forms.Control.Bottom%2A> property is a read-only property.</span></span> <span data-ttu-id="31784-399">您可以處理這個屬性值的值變更<xref:System.Windows.Forms.Control.Top%2A>或<xref:System.Windows.Forms.Control.Height%2A>屬性或呼叫<xref:System.Windows.Forms.Control.SetBounds%2A>， <xref:System.Windows.Forms.Control.SetBoundsCore%2A>， <xref:System.Windows.Forms.Control.UpdateBounds%2A>，或<xref:System.Windows.Forms.Control.SetClientSizeCore%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-399">You can manipulate this property value by changing the value of the <xref:System.Windows.Forms.Control.Top%2A> or <xref:System.Windows.Forms.Control.Height%2A> properties or calling the <xref:System.Windows.Forms.Control.SetBounds%2A>, <xref:System.Windows.Forms.Control.SetBoundsCore%2A>, <xref:System.Windows.Forms.Control.UpdateBounds%2A>, or <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-400">下列程式碼範例使用<xref:System.Windows.Forms.Control.Bottom%2A>屬性來定義的下限<xref:System.Windows.Forms.TextBox>相對於容器的用戶端區域的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-400">The following code example uses the <xref:System.Windows.Forms.Control.Bottom%2A> property to define the lower limit of a <xref:System.Windows.Forms.TextBox> control relative to the client area of the container.</span></span>  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Top" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Bounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Bounds" />
      <MemberSignature Language="VB.NET" Value="Public Property Bounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle Bounds { System::Drawing::Rectangle get(); void set(System::Drawing::Rectangle value); };" />
      <MemberSignature Language="F#" Value="member this.Bounds : System.Drawing.Rectangle with get, set" Usage="System.Windows.Forms.Control.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-401">取得或設定控制項 (包括其非工作區項目) 相對於父控制項之大小和位置 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-401">Gets or sets the size and location of the control including its nonclient elements, in pixels, relative to the parent control.</span></span></summary>
        <value><span data-ttu-id="31784-402">相對於父控制項之 <see cref="T:System.Drawing.Rectangle" /> (單位為像素)，表示控制項 (包括其非工作區項目) 之大小和位置。</span><span class="sxs-lookup"><span data-stu-id="31784-402">A <see cref="T:System.Drawing.Rectangle" /> in pixels relative to the parent control that represents the size and location of the control including its nonclient elements.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-403">控制項的範圍包括非工作項目，例如捲軸列、 框線、 標題列和功能表。</span><span class="sxs-lookup"><span data-stu-id="31784-403">The bounds of the control include the nonclient elements such as scroll bars, borders, title bars, and menus.</span></span> <span data-ttu-id="31784-404"><xref:System.Windows.Forms.Control.SetBoundsCore%2A>方法呼叫以設定<xref:System.Windows.Forms.Control.Bounds%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-404">The <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method is called to set the <xref:System.Windows.Forms.Control.Bounds%2A> property.</span></span> <span data-ttu-id="31784-405"><xref:System.Windows.Forms.Control.Bounds%2A>屬性永遠不會變更透過其`set`方法，使您應該覆寫<xref:System.Windows.Forms.Control.SetBoundsCore%2A>方法，以確保您的程式碼執行時<xref:System.Windows.Forms.Control.Bounds%2A>屬性設定。</span><span class="sxs-lookup"><span data-stu-id="31784-405">The <xref:System.Windows.Forms.Control.Bounds%2A> property is not always changed through its `set` method so you should override the <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method to ensure that your code is executed when the <xref:System.Windows.Forms.Control.Bounds%2A> property is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-406">下列程式碼範例會建立三個<xref:System.Windows.Forms.Button>表單上的控制項，並將其大小和位置設定使用的各種大小與和位置相關的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-406">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="31784-407">這個範例需要您有<xref:System.Windows.Forms.Form>有寬度和高度的最少 300 像素為單位。</span><span class="sxs-lookup"><span data-stu-id="31784-407">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Top" />
        <altmember cref="P:System.Windows.Forms.Control.Left" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
        <altmember cref="P:System.Windows.Forms.Control.Width" />
      </Docs>
    </Member>
    <Member MemberName="BringToFront">
      <MemberSignature Language="C#" Value="public void BringToFront ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringToFront() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BringToFront" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringToFront ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringToFront();" />
      <MemberSignature Language="F#" Value="member this.BringToFront : unit -&gt; unit" Usage="control.BringToFront " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-408">將控制項帶到疊置順序的前面。</span><span class="sxs-lookup"><span data-stu-id="31784-408">Brings the control to the front of the z-order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-409">將控制項移到最上層的疊置順序。</span><span class="sxs-lookup"><span data-stu-id="31784-409">The control is moved to the front of the z-order.</span></span> <span data-ttu-id="31784-410">如果控制項是其他控制項的子系，移動子控制項的疊置順序最上層。</span><span class="sxs-lookup"><span data-stu-id="31784-410">If the control is a child of another control, the child control is moved to the front of the z-order.</span></span> <span data-ttu-id="31784-411"><xref:System.Windows.Forms.Control.BringToFront%2A> 會讓控制項最上層控制項，而且不會引發<xref:System.Windows.Forms.Control.Paint>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-411"><xref:System.Windows.Forms.Control.BringToFront%2A> does not make a control a top-level control, and it does not raise the <xref:System.Windows.Forms.Control.Paint> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-412">下列程式碼範例可確保<xref:System.Windows.Forms.Label>由呼叫其<xref:System.Windows.Forms.Control.BringToFront%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-412">The following code example ensures that a <xref:System.Windows.Forms.Label> is visible by calling its <xref:System.Windows.Forms.Control.BringToFront%2A> method.</span></span> <span data-ttu-id="31784-413">這個範例需要您有<xref:System.Windows.Forms.Form>與<xref:System.Windows.Forms.Panel>名為`panel1`，和<xref:System.Windows.Forms.Label>名為`label1`。</span><span class="sxs-lookup"><span data-stu-id="31784-413">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Panel> named `panel1`, and a <xref:System.Windows.Forms.Label> named `label1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#1)]
 [!code-vb[Windows.Forms.Control Members4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SendToBack" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
      </Docs>
    </Member>
    <Member MemberName="CanEnableIme">
      <MemberSignature Language="C#" Value="protected virtual bool CanEnableIme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEnableIme" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanEnableIme" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property CanEnableIme As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool CanEnableIme { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanEnableIme : bool" Usage="System.Windows.Forms.Control.CanEnableIme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-414">取得值，這個值表示 <see cref="P:System.Windows.Forms.Control.ImeMode" /> 屬性是否可以設定為使用中的值，以啟用 IME 支援。</span><span class="sxs-lookup"><span data-stu-id="31784-414">Gets a value indicating whether the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property can be set to an active value, to enable IME support.</span></span></summary>
        <value><span data-ttu-id="31784-415">所有情況下都是 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="31784-415"><see langword="true" /> in all cases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-416">在衍生的類別可以覆寫此屬性以傳回`false`IME 不受支援。</span><span class="sxs-lookup"><span data-stu-id="31784-416">Derived classes can override this property to return `false` if IME is not supported.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanFocus">
      <MemberSignature Language="C#" Value="public bool CanFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanFocus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanFocus : bool" Usage="System.Windows.Forms.Control.CanFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-417">取得指示控制項是否能取得焦點的值。</span><span class="sxs-lookup"><span data-stu-id="31784-417">Gets a value indicating whether the control can receive focus.</span></span></summary>
        <value><span data-ttu-id="31784-418">如果控制項可以取得焦點，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-418"><see langword="true" /> if the control can receive focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-419">為了讓接收輸入的焦點的控制項，控制項必須有指派的控制代碼和<xref:System.Windows.Forms.Control.Visible%2A>和<xref:System.Windows.Forms.Control.Enabled%2A>屬性必須都設為`true`控制項和所有其父控制項和控制項必須是表單或控制項的最外層的父代必須是表單。</span><span class="sxs-lookup"><span data-stu-id="31784-419">In order for a control to receive input focus, the control must have a handle assigned to it, and the <xref:System.Windows.Forms.Control.Visible%2A> and <xref:System.Windows.Forms.Control.Enabled%2A> properties must both be set to `true` for both the control and all its parent controls, and the control must be a form or the control's outermost parent must be a form.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-420">下列程式碼範例將焦點設定為指定<xref:System.Windows.Forms.Control>，如果它能夠接收焦點。</span><span class="sxs-lookup"><span data-stu-id="31784-420">The following code example sets focus to the specified <xref:System.Windows.Forms.Control>, if it can receive focus.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#1)]
 [!code-csharp[Windows.Forms.ControlMembers6#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#1)]
 [!code-vb[Windows.Forms.ControlMembers6#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
      </Docs>
    </Member>
    <Member MemberName="CanRaiseEvents">
      <MemberSignature Language="C#" Value="protected override bool CanRaiseEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRaiseEvents" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanRaiseEvents" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CanRaiseEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool CanRaiseEvents { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRaiseEvents : bool" Usage="System.Windows.Forms.Control.CanRaiseEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-421">判斷是否可以在控制項上引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-421">Determines if events can be raised on the control.</span></span></summary>
        <value><span data-ttu-id="31784-422">如果控制項裝載為擁有未凍結事件的 ActiveX 控制項，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-422"><see langword="true" /> if the control is hosted as an ActiveX control whose events are not frozen; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-423">如果正在裝載此控制項為 ActiveX 控制項，此屬性會傳回`false`如果 ActiveX 控制項已凍結其事件。</span><span class="sxs-lookup"><span data-stu-id="31784-423">If this control is being hosted as an ActiveX control, this property will return `false` if the ActiveX control has its events frozen.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSelect">
      <MemberSignature Language="C#" Value="public bool CanSelect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanSelect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanSelect { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSelect : bool" Usage="System.Windows.Forms.Control.CanSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-424">取得指示能否選取控制項的值。</span><span class="sxs-lookup"><span data-stu-id="31784-424">Gets a value indicating whether the control can be selected.</span></span></summary>
        <value><span data-ttu-id="31784-425">如果可以選取控制項，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-425"><see langword="true" /> if the control can be selected; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-426">這個屬性會傳回`true`如果`Selectable`值<xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType>設`true`、 包含在另一個控制項，控制項本身可見並已啟用，而且所有其父控制項是否可見並已啟用。</span><span class="sxs-lookup"><span data-stu-id="31784-426">This property returns `true` if the `Selectable` value of <xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType> is set to `true`, is contained in another control, the control itself is visible and enabled, and all its parent controls are visible and enabled.</span></span>  
  
 <span data-ttu-id="31784-427">下列清單中的 Windows Form 控制項不能選取，並將傳回的值`false`如<xref:System.Windows.Forms.Control.CanSelect%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-427">The Windows Forms controls in the following list are not selectable and will return a value of `false` for the <xref:System.Windows.Forms.Control.CanSelect%2A> property.</span></span> <span data-ttu-id="31784-428">衍生自這些控制項的控制項不能也選取。</span><span class="sxs-lookup"><span data-stu-id="31784-428">Controls derived from these controls are also not selectable.</span></span>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <span data-ttu-id="31784-429"><xref:System.Windows.Forms.LinkLabel> （如果沒有在控制項中顯示連結）</span><span class="sxs-lookup"><span data-stu-id="31784-429"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-430">下列程式碼範例會選取指定<xref:System.Windows.Forms.Control>、 如果可供選取。</span><span class="sxs-lookup"><span data-stu-id="31784-430">The following code example selects the specified <xref:System.Windows.Forms.Control>, if it is selectable.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#2)]
 [!code-csharp[Windows.Forms.ControlMembers6#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#2)]
 [!code-vb[Windows.Forms.ControlMembers6#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
      </Docs>
    </Member>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public bool Capture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Capture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Capture" />
      <MemberSignature Language="VB.NET" Value="Public Property Capture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Capture { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Capture : bool with get, set" Usage="System.Windows.Forms.Control.Capture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-431">取得或設定值，指出控制項是否捕捉住滑鼠。</span><span class="sxs-lookup"><span data-stu-id="31784-431">Gets or sets a value indicating whether the control has captured the mouse.</span></span></summary>
        <value><span data-ttu-id="31784-432">如果控制項捕捉住滑鼠，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-432"><see langword="true" /> if the control has captured the mouse; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-433">當控制項捕捉住滑鼠時，在資料指標的框線內接收滑鼠輸入。</span><span class="sxs-lookup"><span data-stu-id="31784-433">When a control has captured the mouse, it receives mouse input whether or not the cursor is within its borders.</span></span> <span data-ttu-id="31784-434">通常只有在拖曳作業時才會捕捉滑鼠。</span><span class="sxs-lookup"><span data-stu-id="31784-434">The mouse is typically only captured during drag operations.</span></span>  
  
 <span data-ttu-id="31784-435">前景視窗可以捕捉滑鼠。</span><span class="sxs-lookup"><span data-stu-id="31784-435">Only the foreground window can capture the mouse.</span></span> <span data-ttu-id="31784-436">當背景視窗嘗試這樣做時，視窗會收到滑鼠游標位於視窗的可見部分時發生的滑鼠事件的訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-436">When a background window attempts to do so, the window receives messages only for mouse events that occur when the mouse cursor is within the visible portion of the window.</span></span> <span data-ttu-id="31784-437">此外，即使前景視窗已捕捉滑鼠，使用者仍然可以按一下另一個視窗中，將其帶至前景。</span><span class="sxs-lookup"><span data-stu-id="31784-437">Also, even if the foreground window has captured the mouse, the user can still click another window, bringing it to the foreground.</span></span>  
  
 <span data-ttu-id="31784-438">將滑鼠擷取，不應處理快速鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-438">When the mouse is captured, shortcut keys should not work.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-439">下列程式碼範例示範<xref:System.Windows.Forms.Control.Capture%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-439">The following code example demonstrates the <xref:System.Windows.Forms.Control.Capture%2A> property.</span></span> <span data-ttu-id="31784-440">在表單，其中包含執行此範例中貼上下列程式碼<xref:System.Windows.Forms.Label>label1 和兩個名為<xref:System.Windows.Forms.ListBox>listbox1 和 listbox2，名為控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-440">To run this example paste the following code in a form containing a <xref:System.Windows.Forms.Label> named label1 and two <xref:System.Windows.Forms.ListBox> controls named listbox1 and listbox2.</span></span> <span data-ttu-id="31784-441">確保表單和控制項的<xref:System.Windows.Forms.Control.MouseDown>事件是在此範例中方法相關聯。</span><span class="sxs-lookup"><span data-stu-id="31784-441">Ensure the form and controls' <xref:System.Windows.Forms.Control.MouseDown> event is associated with the method in this example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlCapture#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlCapture#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlCapture#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-442">若要設定這個屬性值的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-442">for all windows to set this property value.</span></span> <span data-ttu-id="31784-443">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="31784-443">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="T:System.Windows.Forms.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CausesValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property CausesValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CausesValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CausesValidation : bool with get, set" Usage="System.Windows.Forms.Control.CausesValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-444">取得或設定值，指出控制項取得焦點時，是否會在任何需要驗證的控制項上執行驗證。</span><span class="sxs-lookup"><span data-stu-id="31784-444">Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus.</span></span></summary>
        <value><span data-ttu-id="31784-445">如果控制項取得焦點時會在需要驗證的任何控制項上執行驗證，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-445"><see langword="true" /> if the control causes validation to be performed on any controls requiring validation when it receives focus; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="31784-446">預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="31784-446">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-447">如果<xref:System.Windows.Forms.Control.CausesValidation%2A>屬性設定為`false`、<xref:System.Windows.Forms.Control.Validating>和<xref:System.Windows.Forms.Control.Validated>事件都會被隱藏。</span><span class="sxs-lookup"><span data-stu-id="31784-447">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="31784-448"><xref:System.Windows.Forms.Control.CausesValidation%2A>屬性值通常設定為`false`的控制項，例如 [說明] 按鈕。</span><span class="sxs-lookup"><span data-stu-id="31784-448">The <xref:System.Windows.Forms.Control.CausesValidation%2A> property value is typically set to `false` for controls such as a Help button.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-449">下列程式碼範例會使用衍生的類別<xref:System.Windows.Forms.TextBox>並驗證使用者輸入電子郵件地址。</span><span class="sxs-lookup"><span data-stu-id="31784-449">The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an email address that the user enters.</span></span> <span data-ttu-id="31784-450">如果電子郵件地址不是標準格式 (包含"@" and "。")，驗證失敗，<xref:System.Windows.Forms.ErrorProvider>圖示會顯示，而且在取消事件。</span><span class="sxs-lookup"><span data-stu-id="31784-450">If the email address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled.</span></span> <span data-ttu-id="31784-451">在表單上按鈕的其中一個具有其<xref:System.Windows.Forms.Control.CausesValidation%2A>屬性設定為`false`。</span><span class="sxs-lookup"><span data-stu-id="31784-451">One of the buttons on the form has its <xref:System.Windows.Forms.Control.CausesValidation%2A> property set to `false`.</span></span> <span data-ttu-id="31784-452">按一下，或將焦點設定為這個按鈕不會觸發驗證。</span><span class="sxs-lookup"><span data-stu-id="31784-452">Clicking or setting focus to this button does not trigger validation.</span></span> <span data-ttu-id="31784-453">這個範例需要<xref:System.Windows.Forms.TextBox>、<xref:System.Windows.Forms.ErrorProvider>控制項和<xref:System.Windows.Forms.Button>在表單上建立。</span><span class="sxs-lookup"><span data-stu-id="31784-453">This example requires that a <xref:System.Windows.Forms.TextBox>, an <xref:System.Windows.Forms.ErrorProvider> control, and a <xref:System.Windows.Forms.Button> have been created on a form.</span></span>  
  
 [!code-cpp[Control.Validating#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#2)]
 [!code-csharp[Control.Validating#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#2)]
 [!code-vb[Control.Validating#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="CausesValidationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CausesValidationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CausesValidationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.CausesValidationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CausesValidationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CausesValidationChanged;" />
      <MemberSignature Language="F#" Value="member this.CausesValidationChanged : EventHandler " Usage="member this.CausesValidationChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-454">發生於 <see cref="P:System.Windows.Forms.Control.CausesValidation" /> 屬性的值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-454">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.CausesValidation" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-455">如果會引發這個事件<xref:System.Windows.Forms.Control.CausesValidation%2A>以程式設計方式修改或使用者互動變更屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-455">This event is raised if the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-456">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-456">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
      </Docs>
    </Member>
    <Member MemberName="ChangeUICues">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.UICuesEventHandler ChangeUICues;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.UICuesEventHandler ChangeUICues" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ChangeUICues" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ChangeUICues As UICuesEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::UICuesEventHandler ^ ChangeUICues;" />
      <MemberSignature Language="F#" Value="member this.ChangeUICues : System.Windows.Forms.UICuesEventHandler " Usage="member this.ChangeUICues : System.Windows.Forms.UICuesEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.UICuesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-457">發生於焦點或鍵盤使用者介面 (UI) 提示變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-457">Occurs when the focus or keyboard user interface (UI) cues change.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-458">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-458">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-459">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-459">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-460">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.ChangeUICues>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-460">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.ChangeUICues> event.</span></span> <span data-ttu-id="31784-461">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-461">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-462">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-462">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-463">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-463">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-464">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.ChangeUICues>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-464">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.ChangeUICues> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#67)]
 [!code-vb[System.Windows.Forms.EventExamples#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#67)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="CheckForIllegalCrossThreadCalls">
      <MemberSignature Language="C#" Value="public static bool CheckForIllegalCrossThreadCalls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CheckForIllegalCrossThreadCalls" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CheckForIllegalCrossThreadCalls As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CheckForIllegalCrossThreadCalls { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckForIllegalCrossThreadCalls : bool with get, set" Usage="System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-465">取得或設定值，指出應用程式正在偵錯時，是否要攔截不該存取卻存取控制項 <see cref="P:System.Windows.Forms.Control.Handle" /> 屬性之錯誤執行緒上的呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-465">Gets or sets a value indicating whether to catch calls on the wrong thread that access a control's <see cref="P:System.Windows.Forms.Control.Handle" /> property when an application is being debugged.</span></span></summary>
        <value><span data-ttu-id="31784-466">如果會攔截錯誤執行緒上的呼叫，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-466"><see langword="true" /> if calls on the wrong thread are caught; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-467">當建立控制項的執行緒以外的執行緒嘗試存取該控制項的方法或屬性的其中一個時，它通常會導致無法預期的結果。</span><span class="sxs-lookup"><span data-stu-id="31784-467">When a thread other than the creating thread of a control tries to access one of that control's methods or properties, it often leads to unpredictable results.</span></span> <span data-ttu-id="31784-468">常見的無效的執行緒活動是存取控制項之錯誤執行緒上的呼叫<xref:System.Windows.Forms.Control.Handle%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-468">A common invalid thread activity is a call on the wrong thread that accesses the control's <xref:System.Windows.Forms.Control.Handle%2A> property.</span></span> <span data-ttu-id="31784-469">設定<xref:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls%2A>至`true`來尋找和偵錯時更輕鬆地診斷這個執行緒的活動。</span><span class="sxs-lookup"><span data-stu-id="31784-469">Set <xref:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls%2A> to `true` to find and diagnose this thread activity more easily while debugging.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-470">發生於按下控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-470">Occurs when the control is clicked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-471"><xref:System.Windows.Forms.Control.Click>事件會傳遞<xref:System.EventArgs>至其事件處理常式，因此它只會顯示已發生按。</span><span class="sxs-lookup"><span data-stu-id="31784-471">The <xref:System.Windows.Forms.Control.Click> event passes an <xref:System.EventArgs> to its event handler, so it only indicates that a click has occurred.</span></span> <span data-ttu-id="31784-472">如果您需要更多滑鼠資訊 （按鈕點選、 滾輪旋轉或位置的數目），使用<xref:System.Windows.Forms.Control.MouseClick>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-472">If you need more specific mouse information (button, number of clicks, wheel rotation, or location), use the <xref:System.Windows.Forms.Control.MouseClick> event.</span></span> <span data-ttu-id="31784-473">不過，<xref:System.Windows.Forms.Control.MouseClick>如果按一下因滑鼠，例如按下 ENTER 鍵以外的其他動作，將不會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-473">However, the <xref:System.Windows.Forms.Control.MouseClick> event will not be raised if the click is caused by action other than that of the mouse, such as pressing the ENTER key.</span></span>  
  
 <span data-ttu-id="31784-474">按兩下是由使用者的作業系統的滑鼠設定決定。</span><span class="sxs-lookup"><span data-stu-id="31784-474">A double-click is determined by the mouse settings of the user's operating system.</span></span> <span data-ttu-id="31784-475">使用者可以設定滑鼠按鍵的按一下之間應間隔多少時間才視為按兩下，而不是兩次按一下。</span><span class="sxs-lookup"><span data-stu-id="31784-475">The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.</span></span> <span data-ttu-id="31784-476"><xref:System.Windows.Forms.Control.Click>每次按兩下控制項時，就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-476">The <xref:System.Windows.Forms.Control.Click> event is raised every time a control is double-clicked.</span></span> <span data-ttu-id="31784-477">比方說，如果您有事件處理常式<xref:System.Windows.Forms.Control.Click>和<xref:System.Windows.Forms.Control.DoubleClick>事件<xref:System.Windows.Forms.Form>、<xref:System.Windows.Forms.Control.Click>和<xref:System.Windows.Forms.Control.DoubleClick>按兩下表單時，會呼叫這兩種方法時，會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-477">For example, if you have event handlers for the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events of a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events are raised when the form is double-clicked and both methods are called.</span></span> <span data-ttu-id="31784-478">如果按兩下控制項時，以及控制項不支援<xref:System.Windows.Forms.Control.DoubleClick>事件，<xref:System.Windows.Forms.Control.Click>事件可能會引發兩次。</span><span class="sxs-lookup"><span data-stu-id="31784-478">If a control is double-clicked and that control does not support the <xref:System.Windows.Forms.Control.DoubleClick> event, the <xref:System.Windows.Forms.Control.Click> event might be raised twice.</span></span>  
  
 <span data-ttu-id="31784-479">您必須設定`StandardClick`值<xref:System.Windows.Forms.ControlStyles>至`true`會引發這個事件。</span><span class="sxs-lookup"><span data-stu-id="31784-479">You must set the `StandardClick` value of <xref:System.Windows.Forms.ControlStyles> to `true` for this event to be raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-480">無法針對引發下列事件<xref:System.Windows.Forms.TabControl>類別除非至少一個<xref:System.Windows.Forms.TabPage>中<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>集合： <xref:System.Windows.Forms.Control.Click>， <xref:System.Windows.Forms.Control.DoubleClick>， <xref:System.Windows.Forms.Control.MouseDown>， <xref:System.Windows.Forms.Control.MouseUp>， <xref:System.Windows.Forms.Control.MouseHover>， <xref:System.Windows.Forms.Control.MouseEnter>，<xref:System.Windows.Forms.Control.MouseLeave>和<xref:System.Windows.Forms.Control.MouseMove>。</span><span class="sxs-lookup"><span data-stu-id="31784-480">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="31784-481">如果沒有至少一個<xref:System.Windows.Forms.TabPage>在集合中，與使用者互動具有索引標籤控制項的標頭 (其中<xref:System.Windows.Forms.TabPage>名稱會出現)，則<xref:System.Windows.Forms.TabControl>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-481">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="31784-482">不過，如果使用者互動是索引標籤頁面上，工作區內<xref:System.Windows.Forms.TabPage>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-482">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="31784-483">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-483">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-484">下列程式碼範例示範<xref:System.Windows.Forms.Control.Click>事件處理常式中的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-484">The following code example shows the <xref:System.Windows.Forms.Control.Click> event in an event handler.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-485"><para>繼承自標準的 Windows Form 控制項，並變更<see langword="StandardClick" />或<see langword="StandardDoubleClick" />值<see cref="T:System.Windows.Forms.ControlStyles" />至<see langword="true" />可以造成未預期的行為，或完全沒有任何作用，如果控制項不支援<see cref="E:System.Windows.Forms.Control.Click" />或<see cref="E:System.Windows.Forms.Control.DoubleClick" />事件。下表列出 Windows Form 控制項和事件 (<see cref="E:System.Windows.Forms.Control.Click" />或<see cref="E:System.Windows.Forms.Control.DoubleClick" />) 會引發以回應指定的滑鼠動作。<list type="table"><listheader><term> 控制</term><description>剩餘滑鼠點按</description><description>按兩下滑鼠左鍵</description><description>按一下滑鼠右鍵</description><description>按兩下滑鼠右鍵</description> <description>中間滑鼠點按</description><description>按兩下滑鼠中間鍵</description><description>按一下滑鼠的 XButton1 </description> <description>按兩下滑鼠的 XButton1 </description> <description> XButton2滑鼠按一下</description> <description> XButton2 滑鼠按兩下</description> </listheader> <item> <term> <see cref="T:System.Windows.Forms.MonthCalendar" />， <see cref="T:System.Windows.Forms.DateTimePicker" />， <see cref="T:System.Windows.Forms.HScrollBar" />， <see cref="T:System.Windows.Forms.VScrollBar" /> </term><description>無</description><description>無</description><description>無</description><description>無</description><description>無</description><description>無</description><description>無</description><description>無</description><description>無</description><description>無</description> </item> <item> <term> <see cref="T:System.Windows.Forms.Button" />， <see cref="T:System.Windows.Forms.CheckBox" />， <see cref="T:System.Windows.Forms.RichTextBox" />， <see cref="T:System.Windows.Forms.RadioButton" /> </term> <description>按一下</description><description>按一下，按一下</description><description>無</description><description>無</description><description>無</description><description>無</description><description>無</description><description>無</description><description>無</description><description>無</description> </item> <item> <term> <see cref="T:System.Windows.Forms.ListBox" />， <see cref="T:System.Windows.Forms.CheckedListBox" />， <see cref="T:System.Windows.Forms.ComboBox" /> </term><description>按一下</description><description>按一下，DoubleClick </description> <description>無</description><description>無</description><description>無 </description> <description>無</description><description>無</description><description>無</description><description>無</description><description>無 </description> </item> <item> <term> <see cref="T:System.Windows.Forms.TextBox" />， <see cref="T:System.Windows.Forms.DomainUpDown" />， <see cref="T:System.Windows.Forms.NumericUpDown" /> </term> <description>按一下</description> <description> 按一下 DoubleClick </description> <description>無</description><description>無</description>&lt;s&gt;&lt;/s&gt;</para></span><span class="sxs-lookup"><span data-stu-id="31784-485"><para>Inheriting from a standard Windows Forms control and changing the <see langword="StandardClick" /> or <see langword="StandardDoubleClick" /> values of <see cref="T:System.Windows.Forms.ControlStyles" /> to <see langword="true" /> can cause unexpected behavior or have no effect at all if the control does not support the <see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" /> events.  The following table lists Windows Forms controls and which event (<see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" />) is raised in response to the mouse action specified.  <list type="table"><listheader><term> Control  </term><description> Left Mouse Click  </description><description> Left Mouse Double Click  </description><description> Right Mouse Click  </description><description> Right Mouse Double Click  </description><description> Middle Mouse Click  </description><description> Middle Mouse Double Click  </description><description> XButton1 Mouse Click  </description><description> XButton1 Mouse Double-Click  </description><description> XButton2 Mouse Click  </description><description> XButton2 Mouse Double-Click  </description></listheader><item><term><see cref="T:System.Windows.Forms.MonthCalendar" />,  <see cref="T:System.Windows.Forms.DateTimePicker" />,  <see cref="T:System.Windows.Forms.HScrollBar" />,  <see cref="T:System.Windows.Forms.VScrollBar" /></term><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description></item><item><term><see cref="T:System.Windows.Forms.Button" />,  <see cref="T:System.Windows.Forms.CheckBox" />,  <see cref="T:System.Windows.Forms.RichTextBox" />,  <see cref="T:System.Windows.Forms.RadioButton" /></term><description> Click  </description><description> Click, Click  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description></item><item><term><see cref="T:System.Windows.Forms.ListBox" />,  <see cref="T:System.Windows.Forms.CheckedListBox" />,  <see cref="T:System.Windows.Forms.ComboBox" /></term><description> Click  </description><description> Click, DoubleClick  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description></item><item><term><see cref="T:System.Windows.Forms.TextBox" />,  <see cref="T:System.Windows.Forms.DomainUpDown" />,  <see cref="T:System.Windows.Forms.NumericUpDown" /></term><description> Click  </description><description> Click, DoubleClick  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description></item><item><term> \* <see cref="T:System.Windows.Forms.TreeView" />,  \* <see cref="T:System.Windows.Forms.ListView" /></term><description> Click  </description><description> Click, DoubleClick  </description><description> Click  </description><description> Click, DoubleClick  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description></item><item><term><see cref="T:System.Windows.Forms.ProgressBar" />,  <see cref="T:System.Windows.Forms.TrackBar" /></term><description> Click  </description><description> Click, Click  </description><description> Click  </description><description> Click, Click  </description><description> Click  </description><description> Click, Click  </description><description> Click  </description><description> Click, Click  </description><description> Click  </description><description> Click, Click  </description></item><item><term><see cref="T:System.Windows.Forms.Form" />,  <see cref="T:System.Windows.Forms.DataGrid" />,  <see cref="T:System.Windows.Forms.Label" />,  <see cref="T:System.Windows.Forms.LinkLabel" />,  <see cref="T:System.Windows.Forms.Panel" />,  <see cref="T:System.Windows.Forms.GroupBox" />,  <see cref="T:System.Windows.Forms.PictureBox" />,  <see cref="T:System.Windows.Forms.Splitter" />,  <see cref="T:System.Windows.Forms.StatusBar" />,  <see cref="T:System.Windows.Forms.ToolBar" />,  <see cref="T:System.Windows.Forms.TabPage" />,  \*\* <see cref="T:System.Windows.Forms.TabControl" /></term><description> Click  </description><description> Click, DoubleClick  </description><description> Click  </description><description> Click, DoubleClick  </description><description> Click  </description><description> Click, DoubleClick  </description><description> Click  </description><description> Click, DoubleClick  </description><description> Click  </description><description> Click, DoubleClick  </description></item></list>  \* The mouse pointer must be over a child object (<see cref="T:System.Windows.Forms.TreeNode" /> or <see cref="T:System.Windows.Forms.ListViewItem" />).  \*\* The <see cref="T:System.Windows.Forms.TabControl" /> must have at least one <see cref="T:System.Windows.Forms.TabPage" /> in its <see cref="P:System.Windows.Forms.TabControl.TabPages" /> collection.</para></span></span></block>
        <altmember cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="ClientRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ClientRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ClientRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ClientRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ClientRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.Control.ClientRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-486">取得表示控制項工作區的矩形。</span><span class="sxs-lookup"><span data-stu-id="31784-486">Gets the rectangle that represents the client area of the control.</span></span></summary>
        <value><span data-ttu-id="31784-487">表示控制項工作區的 <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="31784-487">A <see cref="T:System.Drawing.Rectangle" /> that represents the client area of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-488">工作區是控制項的控制項，例如捲軸列、 框線、 標題列和功能表的非工作項目減去的範圍。</span><span class="sxs-lookup"><span data-stu-id="31784-488">The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.</span></span>  
  
 <span data-ttu-id="31784-489">因為工作區座標是相對於控制項的工作區的左上角，這個屬性所傳回的矩形左上角的座標為 (0，0)。</span><span class="sxs-lookup"><span data-stu-id="31784-489">Because client coordinates are relative to the upper-left corner of the client area of the control, the coordinates of the upper-left corner of the rectangle returned by this property are (0,0).</span></span> <span data-ttu-id="31784-490">您可以使用這個屬性取得的大小和工作，例如控制項的介面上繪製的控制項的用戶端區域的座標。</span><span class="sxs-lookup"><span data-stu-id="31784-490">You can use this property to obtain the size and coordinates of the client area of the control for tasks such as drawing on the surface of the control.</span></span>  
  
 <span data-ttu-id="31784-491">如需控制項繪製的相關資訊，請參閱[呈現 Windows Form 控制項](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-491">For more information about drawing on controls, see [Rendering a Windows Forms Control](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-492">下列程式碼範例會啟用自動捲動的表單、 調整表單，並確保後調整表單大小時，維持可見 按鈕。</span><span class="sxs-lookup"><span data-stu-id="31784-492">The following code example enables auto-scrolling for a form, resizes the form, and ensures that a button remains visible after the form is resized.</span></span> <span data-ttu-id="31784-493">這個範例需要您有<xref:System.Windows.Forms.Form>與<xref:System.Windows.Forms.Button>名為`button2`在其上。</span><span class="sxs-lookup"><span data-stu-id="31784-493">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button> named `button2` on it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Member5#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#2)]
 [!code-csharp[Windows.Forms.Control Member5#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#2)]
 [!code-vb[Windows.Forms.Control Member5#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
        <altmember cref="T:System.Windows.Forms.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ClientSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size ClientSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size ClientSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ClientSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size ClientSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.ClientSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.ClientSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-494">取得或設定控制項工作區的高度和寬度。</span><span class="sxs-lookup"><span data-stu-id="31784-494">Gets or sets the height and width of the client area of the control.</span></span></summary>
        <value><span data-ttu-id="31784-495">表示控制項工作區維度的 <see cref="T:System.Drawing.Size" />。</span><span class="sxs-lookup"><span data-stu-id="31784-495">A <see cref="T:System.Drawing.Size" /> that represents the dimensions of the client area of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-496">工作區是控制項的控制項，例如捲軸列、 框線、 標題列和功能表的非工作項目減去的範圍。</span><span class="sxs-lookup"><span data-stu-id="31784-496">The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.</span></span> <span data-ttu-id="31784-497"><xref:System.Windows.Forms.Control.SetClientSizeCore%2A>方法呼叫以設定<xref:System.Windows.Forms.Control.ClientSize%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-497">The <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method is called to set the <xref:System.Windows.Forms.Control.ClientSize%2A> property.</span></span> <span data-ttu-id="31784-498"><xref:System.Windows.Forms.Control.ClientSize%2A>屬性永遠不會變更透過其`set`方法，使您應該覆寫<xref:System.Windows.Forms.Control.SetClientSizeCore%2A>方法，以確保您的程式碼執行時<xref:System.Windows.Forms.Control.ClientSize%2A>屬性設定。</span><span class="sxs-lookup"><span data-stu-id="31784-498">The <xref:System.Windows.Forms.Control.ClientSize%2A> property is not always changed through its `set` method so you should override the <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method to ensure that your code is executed when the <xref:System.Windows.Forms.Control.ClientSize%2A> property is set.</span></span>  
  
 <span data-ttu-id="31784-499"><xref:System.Drawing.Size.Width%2A?displayProperty=nameWithType>和<xref:System.Drawing.Size.Height%2A?displayProperty=nameWithType>內容代表控制項的用戶端區域的高度與寬度。</span><span class="sxs-lookup"><span data-stu-id="31784-499">The <xref:System.Drawing.Size.Width%2A?displayProperty=nameWithType> and <xref:System.Drawing.Size.Height%2A?displayProperty=nameWithType> properties represent the width and height of the client area of the control.</span></span> <span data-ttu-id="31784-500">您可以使用這個屬性，以取得工作區的工作，例如控制項的介面上繪製控制項的大小。</span><span class="sxs-lookup"><span data-stu-id="31784-500">You can use this property to obtain the size of the client area of the control for tasks such as drawing on the surface of the control.</span></span>  
  
 <span data-ttu-id="31784-501">如需控制項繪製的相關資訊，請參閱[呈現 Windows Form 控制項](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-501">For more information about drawing on controls, see [Rendering a Windows Forms Control](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-502">您無法將應用程式設定這個屬性繫結。</span><span class="sxs-lookup"><span data-stu-id="31784-502">You cannot bind application settings to this property.</span></span> <span data-ttu-id="31784-503">如需有關應用程式設定的詳細資訊，請參閱[應用程式設定概觀](~/docs/framework/winforms/advanced/application-settings-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-503">For more information on application settings, see [Application Settings Overview](~/docs/framework/winforms/advanced/application-settings-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-504">下列程式碼範例會調整大小指定的控制項，讓控制項可以容納其格式化的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-504">The following code example resizes the specified control so the control will accommodate its formatted text.</span></span> <span data-ttu-id="31784-505">格式化的文字是<xref:System.Windows.Forms.Control.Text%2A>與控制項屬性的指派<xref:System.Windows.Forms.Control.Font%2A>套用至文字。</span><span class="sxs-lookup"><span data-stu-id="31784-505">The formatted text is the <xref:System.Windows.Forms.Control.Text%2A> property with the control's assigned <xref:System.Windows.Forms.Control.Font%2A> applied to the text.</span></span> <span data-ttu-id="31784-506">`AutoSizeControl`方法在此範例中也有`textPadding`參數，表示要套用至控制項的所有邊緣的填補量。</span><span class="sxs-lookup"><span data-stu-id="31784-506">The `AutoSizeControl` method in this example also has a `textPadding` parameter that represents the padding to apply to all edges of the control.</span></span> <span data-ttu-id="31784-507">若要讓出現相同的填補，以將文字的對齊<xref:System.Drawing.ContentAlignment.MiddleCenter?displayProperty=nameWithType>值，如果您的控制項支援它。</span><span class="sxs-lookup"><span data-stu-id="31784-507">To make the padding appear equal, align the text with the <xref:System.Drawing.ContentAlignment.MiddleCenter?displayProperty=nameWithType> value, if your control supports it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Member5#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#1)]
 [!code-csharp[Windows.Forms.Control Member5#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#1)]
 [!code-vb[Windows.Forms.Control Member5#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="T:System.Windows.Forms.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ClientSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ClientSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ClientSizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ClientSizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ClientSizeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ClientSizeChanged;" />
      <MemberSignature Language="F#" Value="member this.ClientSizeChanged : EventHandler " Usage="member this.ClientSizeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-508">發生於 <see cref="P:System.Windows.Forms.Control.ClientSize" /> 屬性的值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-508">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.ClientSize" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-509">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-509">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-510">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-510">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-511">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.ClientSizeChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-511">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.ClientSizeChanged> event.</span></span> <span data-ttu-id="31784-512">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-512">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-513">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-513">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-514">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-514">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-515">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.ClientSizeChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-515">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.ClientSizeChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#12)]
 [!code-vb[System.Windows.Forms.EventExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompanyName">
      <MemberSignature Language="C#" Value="public string CompanyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CompanyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CompanyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompanyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CompanyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompanyName : string" Usage="System.Windows.Forms.Control.CompanyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Description("ControlCompanyNameDescr")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-516">取得包含控制項之應用程式的公司名稱或建立者。</span><span class="sxs-lookup"><span data-stu-id="31784-516">Gets the name of the company or creator of the application containing the control.</span></span></summary>
        <value><span data-ttu-id="31784-517">包含控制項之應用程式的公司名稱或建立者。</span><span class="sxs-lookup"><span data-stu-id="31784-517">The company name or creator of the application containing the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-518"><xref:System.Windows.Forms.Control.CompanyName%2A>屬性是唯讀屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-518">The <xref:System.Windows.Forms.Control.CompanyName%2A> property is a read-only property.</span></span> <span data-ttu-id="31784-519">若要變更這個屬性的值，設定<xref:System.Reflection.AssemblyCompanyAttribute.Company%2A>屬性值為<xref:System.Reflection.AssemblyCompanyAttribute>。</span><span class="sxs-lookup"><span data-stu-id="31784-519">To change the value of this property, set the <xref:System.Reflection.AssemblyCompanyAttribute.Company%2A> property value of the <xref:System.Reflection.AssemblyCompanyAttribute>.</span></span> <span data-ttu-id="31784-520">下的面 C# 程式碼集<xref:System.Windows.Forms.Control.CompanyName%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-520">The following line of C# code sets the <xref:System.Windows.Forms.Control.CompanyName%2A> property.</span></span>  
  
```csharp  
[assembly: AssemblyCompany("Microsoft")]  
```  
  
> [!NOTE]
>  <span data-ttu-id="31784-521">強烈建議您先提供您的應用程式的公司名稱、 產品名稱和產品版本。</span><span class="sxs-lookup"><span data-stu-id="31784-521">It is strongly recommended that you provide the company name, product name, and product version for your app.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-522">下列程式碼範例會顯示在應用程式的資訊<xref:System.Windows.Forms.Label>所包含<xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="31784-522">The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="31784-523">這個範例需要<xref:System.Windows.Forms.Control.CompanyName%2A>，<xref:System.Windows.Forms.Control.ProductName%2A>和<xref:System.Windows.Forms.Control.ProductVersion%2A>尚未設定。</span><span class="sxs-lookup"><span data-stu-id="31784-523">This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyCompanyAttribute.Company" />
        <altmember cref="P:System.Diagnostics.FileVersionInfo.CompanyName" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.Control ctl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.Control ctl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (ctl As Control) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::Control ^ ctl);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.Control -&gt; bool" Usage="control.Contains ctl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="ctl"><span data-ttu-id="31784-524">要評估的 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="31784-524">The <see cref="T:System.Windows.Forms.Control" /> to evaluate.</span></span></param>
        <summary><span data-ttu-id="31784-525">擷取指示控制項是否為控制項的子控制項的值。</span><span class="sxs-lookup"><span data-stu-id="31784-525">Retrieves a value indicating whether the specified control is a child of the control.</span></span></summary>
        <returns><span data-ttu-id="31784-526">如果指定的控制項是控制項的子控制項，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-526"><see langword="true" /> if the specified control is a child of the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="31784-527">下列程式碼範例可確保<xref:System.Windows.Forms.Label>由呼叫其<xref:System.Windows.Forms.Control.BringToFront%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-527">The following code example ensures that a <xref:System.Windows.Forms.Label> is visible by calling its <xref:System.Windows.Forms.Control.BringToFront%2A> method.</span></span> <span data-ttu-id="31784-528">這個範例需要您有<xref:System.Windows.Forms.Form>與<xref:System.Windows.Forms.Panel>名為`panel1`，和<xref:System.Windows.Forms.Label>名為`label1`。</span><span class="sxs-lookup"><span data-stu-id="31784-528">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Panel> named `panel1`, and a <xref:System.Windows.Forms.Label> named `label1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#1)]
 [!code-vb[Windows.Forms.Control Members4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.Contains(System.Windows.Forms.Control)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="ContainsFocus">
      <MemberSignature Language="C#" Value="public bool ContainsFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContainsFocus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContainsFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContainsFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsFocus : bool" Usage="System.Windows.Forms.Control.ContainsFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-529">取得指示控制項 (或其子控制項之一) 目前是否擁有輸入焦點的值。</span><span class="sxs-lookup"><span data-stu-id="31784-529">Gets a value indicating whether the control, or one of its child controls, currently has the input focus.</span></span></summary>
        <value><span data-ttu-id="31784-530">如果控制項 (或其子控制項之一) 目前擁有輸入焦點，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-530"><see langword="true" /> if the control or one of its child controls currently has the input focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-531">您可以使用這個屬性來判斷控制項或任何包含在它的控制項是否擁有輸入的焦點。</span><span class="sxs-lookup"><span data-stu-id="31784-531">You can use this property to determine whether a control or any of the controls contained within it has the input focus.</span></span> <span data-ttu-id="31784-532">若要判斷控制項是否具有焦點，不論任何子控制項沒有焦點，是否使用<xref:System.Windows.Forms.Control.Focused%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-532">To determine whether the control has focus, regardless of whether any of its child controls have focus, use the <xref:System.Windows.Forms.Control.Focused%2A> property.</span></span> <span data-ttu-id="31784-533">若要讓輸入的焦點的控制項，使用<xref:System.Windows.Forms.Control.Focus%2A>或<xref:System.Windows.Forms.Control.Select%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-533">To give a control the input focus, use the <xref:System.Windows.Forms.Control.Focus%2A> or <xref:System.Windows.Forms.Control.Select%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ContextMenu ^ ContextMenu { System::Windows::Forms::ContextMenu ^ get(); void set(System::Windows::Forms::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Forms.ContextMenu with get, set" Usage="System.Windows.Forms.Control.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-534">取得或設定與控制項關聯的捷徑功能表。</span><span class="sxs-lookup"><span data-stu-id="31784-534">Gets or sets the shortcut menu associated with the control.</span></span></summary>
        <value><span data-ttu-id="31784-535"><see cref="T:System.Windows.Forms.ContextMenu" />，表示與控制項關聯之捷徑功能表。</span><span class="sxs-lookup"><span data-stu-id="31784-535">A <see cref="T:System.Windows.Forms.ContextMenu" /> that represents the shortcut menu associated with the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-536">使用快顯功能表来提供給使用者的特定內容功能表選項，當它們以滑鼠右鍵按一下控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-536">Use a shortcut menus to give context-specific menu options to users when they right-click on the control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-537">下列程式碼範例顯示<xref:System.Windows.Forms.ContextMenu>指派給<xref:System.Windows.Forms.TreeView>當按下並釋放滑鼠按鈕。</span><span class="sxs-lookup"><span data-stu-id="31784-537">The following code example displays the <xref:System.Windows.Forms.ContextMenu> assigned to a <xref:System.Windows.Forms.TreeView> when the right mouse button is clicked and released.</span></span> <span data-ttu-id="31784-538">此程式碼，您必須擁有<xref:System.Windows.Forms.Form>與<xref:System.Windows.Forms.TreeView>在其上。</span><span class="sxs-lookup"><span data-stu-id="31784-538">This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> on it.</span></span> <span data-ttu-id="31784-539">它也是必要的<xref:System.Windows.Forms.TreeView>具有<xref:System.Windows.Forms.ContextMenu>指派給其<xref:System.Windows.Forms.Control.ContextMenu%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-539">It is also required that the <xref:System.Windows.Forms.TreeView> has a <xref:System.Windows.Forms.ContextMenu> assigned to its <xref:System.Windows.Forms.Control.ContextMenu%2A> property.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#5](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#5)]
 [!code-csharp[Windows.Forms.Control Properties2#5](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#5)]
 [!code-vb[Windows.Forms.Control Properties2#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-540"><para>在覆寫<see cref="P:System.Windows.Forms.Control.ContextMenu" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.ContextMenu" />屬性擴充的基底實作。否則，您必須提供所有的實作。您不需要覆寫兩個<see langword="get" />和<see langword="set" />存取子<see cref="P:System.Windows.Forms.Control.ContextMenu" />屬性; 您可以覆寫只能有一個必要。</para></span><span class="sxs-lookup"><span data-stu-id="31784-540"><para>When overriding the <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property; you can override only one if needed.</para></span></span></block>
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ContextMenuChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContextMenuChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ContextMenuChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ContextMenuChanged;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuChanged : EventHandler " Usage="member this.ContextMenuChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-541">發生於 <see cref="P:System.Windows.Forms.Control.ContextMenu" /> 屬性的值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-541">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-542">如果會引發這個事件<xref:System.Windows.Forms.Control.ContextMenu%2A>以程式設計方式修改或使用者互動變更屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-542">This event is raised if the <xref:System.Windows.Forms.Control.ContextMenu%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-543">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-543">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-544">下列程式碼範例會顯示一則訊息的快顯功能表中發生變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-544">The following code example displays a message when a change occurs to the shortcut menu.</span></span>  
  
 [!code-cpp[Control_ContextMenu_CreateGraphics#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/CPP/control_contextmenu_creategraphics.cpp#2)]
 [!code-csharp[Control_ContextMenu_CreateGraphics#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/CS/control_contextmenu_creategraphics.cs#2)]
 [!code-vb[Control_ContextMenu_CreateGraphics#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/VB/control_contextmenu_creategraphics.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ContextMenu" />
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStrip">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenuStrip ContextMenuStrip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContextMenuStrip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ContextMenuStrip As ContextMenuStrip" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ContextMenuStrip ^ ContextMenuStrip { System::Windows::Forms::ContextMenuStrip ^ get(); void set(System::Windows::Forms::ContextMenuStrip ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenuStrip : System.Windows.Forms.ContextMenuStrip with get, set" Usage="System.Windows.Forms.Control.ContextMenuStrip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-545">取得或設定與這個控制項相關的 <see cref="T:System.Windows.Forms.ContextMenuStrip" />。</span><span class="sxs-lookup"><span data-stu-id="31784-545">Gets or sets the <see cref="T:System.Windows.Forms.ContextMenuStrip" /> associated with this control.</span></span></summary>
        <value><span data-ttu-id="31784-546">此控制項的 <see cref="T:System.Windows.Forms.ContextMenuStrip" />；如果沒有 <see langword="null" />，則為 <see cref="T:System.Windows.Forms.ContextMenuStrip" />。</span><span class="sxs-lookup"><span data-stu-id="31784-546">The <see cref="T:System.Windows.Forms.ContextMenuStrip" /> for this control, or <see langword="null" /> if there is no <see cref="T:System.Windows.Forms.ContextMenuStrip" />.</span></span> <span data-ttu-id="31784-547">預設值為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="31784-547">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-548">如果<xref:System.Windows.Forms.ContextMenu>也已指派給控制項，<xref:System.Windows.Forms.ContextMenu>優先於<xref:System.Windows.Forms.ContextMenuStrip>。</span><span class="sxs-lookup"><span data-stu-id="31784-548">If a <xref:System.Windows.Forms.ContextMenu> has also been assigned to the control, the <xref:System.Windows.Forms.ContextMenu> takes precedence over the <xref:System.Windows.Forms.ContextMenuStrip>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-549">下列程式碼範例示範如何將三個<xref:System.Windows.Forms.ToolStripMenuItem>物件加入至<xref:System.Windows.Forms.ContextMenuStrip>。</span><span class="sxs-lookup"><span data-stu-id="31784-549">The following code example demonstrates how to add three <xref:System.Windows.Forms.ToolStripMenuItem> objects to a <xref:System.Windows.Forms.ContextMenuStrip>.</span></span> <span data-ttu-id="31784-550">除了示範如何設定<xref:System.Windows.Forms.Control.ContextMenuStrip%2A>表單的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-550">In addition it demonstrates setting the <xref:System.Windows.Forms.Control.ContextMenuStrip%2A> property of the form.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.ContextMenuStrip#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.ContextMenuStrip/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.ContextMenuStrip#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.ContextMenuStrip/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContextMenuStripChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ContextMenuStripChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuStripChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ContextMenuStripChanged;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuStripChanged : EventHandler " Usage="member this.ContextMenuStripChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-551">發生於 <see cref="P:System.Windows.Forms.Control.ContextMenuStrip" /> 屬性的值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-551">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.ContextMenuStrip" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-552">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-552">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-553">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-553">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-554">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.ContextMenuStripChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-554">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.ContextMenuStripChanged> event.</span></span> <span data-ttu-id="31784-555">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-555">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-556">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-556">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-557">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-557">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-558">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.ContextMenuStripChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-558">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.ContextMenuStripChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#14)]
 [!code-vb[System.Windows.Forms.EventExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlAdded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ControlEventHandler ControlAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ControlEventHandler ControlAdded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ControlAdded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ControlAdded As ControlEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ControlEventHandler ^ ControlAdded;" />
      <MemberSignature Language="F#" Value="member this.ControlAdded : System.Windows.Forms.ControlEventHandler " Usage="member this.ControlAdded : System.Windows.Forms.ControlEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-559">發生於加入新控制項至 <see cref="T:System.Windows.Forms.Control.ControlCollection" /> 時。</span><span class="sxs-lookup"><span data-stu-id="31784-559">Occurs when a new control is added to the <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-560">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-560">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-561">下列程式碼範例使用<xref:System.Windows.Forms.Control.ControlAdded>將控制項加入至表單，並顯示在已加入之控制項的名稱<xref:System.Windows.Forms.MessageBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-561">The following code example uses <xref:System.Windows.Forms.Control.ControlAdded> to add a control to a form and displays the name of the added control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="ControlRemoved">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ControlEventHandler ControlRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ControlEventHandler ControlRemoved" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ControlRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ControlRemoved As ControlEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ControlEventHandler ^ ControlRemoved;" />
      <MemberSignature Language="F#" Value="member this.ControlRemoved : System.Windows.Forms.ControlEventHandler " Usage="member this.ControlRemoved : System.Windows.Forms.ControlEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-562">發生於從 <see cref="T:System.Windows.Forms.Control.ControlCollection" /> 移除控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-562">Occurs when a control is removed from the <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-563">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-563">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-564">下列程式碼範例使用<xref:System.Windows.Forms.Control.ControlRemoved>移除表單的控制項，並顯示中移除的控制項名稱<xref:System.Windows.Forms.MessageBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-564">The following code example uses <xref:System.Windows.Forms.Control.ControlRemoved> to remove a control from a form and displays the name of the removed control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control/ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Controls" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Controls As Control.ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control::ControlCollection ^ Controls { System::Windows::Forms::Control::ControlCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Controls : System.Windows.Forms.Control.ControlCollection" Usage="System.Windows.Forms.Control.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-565">取得控制項中包含的控制項集合。</span><span class="sxs-lookup"><span data-stu-id="31784-565">Gets the collection of controls contained within the control.</span></span></summary>
        <value><span data-ttu-id="31784-566"><see cref="T:System.Windows.Forms.Control.ControlCollection" />，表示控制項中包含之控制項集合。</span><span class="sxs-lookup"><span data-stu-id="31784-566">A <see cref="T:System.Windows.Forms.Control.ControlCollection" /> representing the collection of controls contained within the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-567">A<xref:System.Windows.Forms.Control>可以做為控制項的集合的父系。</span><span class="sxs-lookup"><span data-stu-id="31784-567">A <xref:System.Windows.Forms.Control> can act as a parent to a collection of controls.</span></span> <span data-ttu-id="31784-568">例如，當多個控制項加入至<xref:System.Windows.Forms.Form>，每個控制項所屬的<xref:System.Windows.Forms.Control.ControlCollection>指派給<xref:System.Windows.Forms.Control.Controls%2A>表單，衍生自屬性<xref:System.Windows.Forms.Control>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-568">For example, when several controls are added to a <xref:System.Windows.Forms.Form>, each of the controls is a member of the <xref:System.Windows.Forms.Control.ControlCollection> assigned to the <xref:System.Windows.Forms.Control.Controls%2A> property of the form, which is derived from the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 <span data-ttu-id="31784-569">您可以使用操作中的控制項<xref:System.Windows.Forms.Control.ControlCollection>指派給<xref:System.Windows.Forms.Control.Controls%2A>屬性，方法是使用中可用的方法<xref:System.Windows.Forms.Control.ControlCollection>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-569">You can manipulate the controls in the <xref:System.Windows.Forms.Control.ControlCollection> assigned to the <xref:System.Windows.Forms.Control.Controls%2A> property by using the methods available in the <xref:System.Windows.Forms.Control.ControlCollection> class.</span></span>  
  
 <span data-ttu-id="31784-570">將數個控制項加入至父控制項，建議您呼叫<xref:System.Windows.Forms.Control.SuspendLayout%2A>方法初始化加入的控制項之前。</span><span class="sxs-lookup"><span data-stu-id="31784-570">When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added.</span></span> <span data-ttu-id="31784-571">將控制項加入至父控制項之後, 呼叫<xref:System.Windows.Forms.Control.ResumeLayout%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-571">After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method.</span></span> <span data-ttu-id="31784-572">這樣會增加具有許多控制項的應用程式的效能。</span><span class="sxs-lookup"><span data-stu-id="31784-572">Doing so will increase the performance of applications with many controls.</span></span>  
  
 <span data-ttu-id="31784-573">使用<xref:System.Windows.Forms.Control.Controls%2A>來逐一查看所有控制項的表單，包括巢狀的控制項的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-573">Use the <xref:System.Windows.Forms.Control.Controls%2A> property to iterate through all controls of a form, including nested controls.</span></span> <span data-ttu-id="31784-574">使用<xref:System.Windows.Forms.Control.GetNextControl%2A>方法來擷取上一個或下一個子控制項定位順序中的。</span><span class="sxs-lookup"><span data-stu-id="31784-574">Use the <xref:System.Windows.Forms.Control.GetNextControl%2A> method to retrieve the previous or next child control in the tab order.</span></span> <span data-ttu-id="31784-575">使用<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A>屬性來取得或設定容器控制項的作用中的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-575">Use the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property to get or set the active control of a container control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-576">下列程式碼範例移除<xref:System.Windows.Forms.Control>從<xref:System.Windows.Forms.Control.ControlCollection>衍生類別的<xref:System.Windows.Forms.Panel>如果它是集合的成員。</span><span class="sxs-lookup"><span data-stu-id="31784-576">The following code example removes a <xref:System.Windows.Forms.Control> from the <xref:System.Windows.Forms.Control.ControlCollection> of the derived class <xref:System.Windows.Forms.Panel> if it is a member of the collection.</span></span> <span data-ttu-id="31784-577">這個範例需要您已建立<xref:System.Windows.Forms.Panel>、 <xref:System.Windows.Forms.Button>，以及至少一個<xref:System.Windows.Forms.RadioButton>上控制<xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="31784-577">The example requires that you have created a <xref:System.Windows.Forms.Panel>, a <xref:System.Windows.Forms.Button>, and at least one <xref:System.Windows.Forms.RadioButton> control on a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="31784-578"><xref:System.Windows.Forms.RadioButton>控制項加入至<xref:System.Windows.Forms.Panel>控制項，而<xref:System.Windows.Forms.Panel>控制項加入至<xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="31784-578">The <xref:System.Windows.Forms.RadioButton> control(s) are added to the <xref:System.Windows.Forms.Panel> control, and the <xref:System.Windows.Forms.Panel> control added to the <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="31784-579">當按一下按鈕時，選項按鈕命名為`removeButton`被移除了<xref:System.Windows.Forms.Control.ControlCollection>。</span><span class="sxs-lookup"><span data-stu-id="31784-579">When the button is clicked, the radio button named `removeButton` is removed from the <xref:System.Windows.Forms.Control.ControlCollection>.</span></span>  
  
 [!code-cpp[ControlCollection#4](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#4)]
 [!code-csharp[ControlCollection#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#4)]
 [!code-vb[ControlCollection#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControlsInstance" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject&#xA;override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="control.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-580">為控制項建立新的協助工具物件。</span><span class="sxs-lookup"><span data-stu-id="31784-580">Creates a new accessibility object for the control.</span></span></summary>
        <returns><span data-ttu-id="31784-581">控制項新的 <see cref="T:System.Windows.Forms.AccessibleObject" />。</span><span class="sxs-lookup"><span data-stu-id="31784-581">A new <see cref="T:System.Windows.Forms.AccessibleObject" /> for the control.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-582">如果沒有明確呼叫 <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> 方法，將會在參考 <xref:System.Windows.Forms.Control.AccessibilityObject%2A> 屬性時呼叫該方法。</span><span class="sxs-lookup"><span data-stu-id="31784-582">If you do not explicitly call the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method, it will be called when the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property is referenced.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-583">取得或設定<xref:System.Windows.Forms.Control.AccessibilityObject%2A>屬性，您必須加入參考`Accessibility`隨安裝組件[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="31784-583">To get or set the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property, you must add a reference to the `Accessibility` assembly installed with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-584">下列程式碼範例示範如何建立可存取性感知的圖表控制，請使用<xref:System.Windows.Forms.AccessibleObject>和<xref:System.Windows.Forms.Control.ControlAccessibleObject>類別會公開可存取的資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-584">The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information.</span></span> <span data-ttu-id="31784-585">控制項會繪製兩條曲線，以及一個圖例。</span><span class="sxs-lookup"><span data-stu-id="31784-585">The control plots two curves along with a legend.</span></span> <span data-ttu-id="31784-586">`ChartControlAccessibleObject`類別，衍生自`ControlAccessibleObject`，用於<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A>方法以提供圖表控制項的自訂存取資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-586">The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control.</span></span> <span data-ttu-id="31784-587">因為圖表圖例不是實際<xref:System.Windows.Forms.Control>-為基礎的控制，但改為繪製所 chart 控制項中，它不會不含任何內建的可存取資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-587">Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</span></span> <span data-ttu-id="31784-588">因為這個緣故，`ChartControlAccessibleObject`類別覆寫<xref:System.Windows.Forms.AccessibleObject.GetChild%2A>方法以傳回`CurveLegendAccessibleObject`，表示每個部分的圖例可存取的資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-588">Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend.</span></span> <span data-ttu-id="31784-589">當存取感知的應用程式使用這個控制項時，控制項可以提供必要的可存取資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-589">When an accessible-aware application uses this control, the control can provide the necessary accessible information.</span></span>  
  
 <span data-ttu-id="31784-590">此程式碼摘錄示範如何覆寫<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-590">This code excerpt demonstrates overriding the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method.</span></span> <span data-ttu-id="31784-591">請參閱<xref:System.Windows.Forms.AccessibleObject>類別概觀的完整程式碼範例。</span><span class="sxs-lookup"><span data-stu-id="31784-591">See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#2)]
 [!code-csharp[System.Windows.Forms.AccessibleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#2)]
 [!code-vb[System.Windows.Forms.AccessibleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-592"><para>在覆寫<see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" />在衍生類別中，請勿呼叫基底類別的<see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" />方法。</para></span><span class="sxs-lookup"><span data-stu-id="31784-592"><para>When overriding <see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /> in a derived class, do not call the base class's <see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /> method.</para></span></span></block>
        <altmember cref="T:System.Windows.Forms.Control.ControlAccessibleObject" />
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="CreateControl">
      <MemberSignature Language="C#" Value="public void CreateControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateControl" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateControl ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateControl();" />
      <MemberSignature Language="F#" Value="member this.CreateControl : unit -&gt; unit" Usage="control.CreateControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-593">強制建立可見控制項，包含建立控制代碼和任何可見的子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-593">Forces the creation of the visible control, including the creation of the handle and any visible child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-594"><xref:System.Windows.Forms.Control.CreateControl%2A>方法會強制控制項和其子控制項建立控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-594">The <xref:System.Windows.Forms.Control.CreateControl%2A> method forces a handle to be created for the control and its child controls.</span></span> <span data-ttu-id="31784-595">當您需要將控制代碼立即控制項或其子系; 的操作，會使用這個方法直接呼叫控制項的建構函式不會建立<xref:System.Windows.Forms.Control.Handle%2A>。</span><span class="sxs-lookup"><span data-stu-id="31784-595">This method is used when you need a handle immediately for manipulation of the control or its children; simply calling a control's constructor does not create the <xref:System.Windows.Forms.Control.Handle%2A>.</span></span>  
  
 <span data-ttu-id="31784-596"><xref:System.Windows.Forms.Control.CreateControl%2A> 不會建立控制代碼，如果控制項的<xref:System.Windows.Forms.Control.Visible%2A>屬性是`false`。</span><span class="sxs-lookup"><span data-stu-id="31784-596"><xref:System.Windows.Forms.Control.CreateControl%2A> does not create a control handle if the control's <xref:System.Windows.Forms.Control.Visible%2A> property is `false`.</span></span> <span data-ttu-id="31784-597">您可以呼叫<xref:System.Windows.Forms.Control.CreateHandle%2A>方法或存取<xref:System.Windows.Forms.Control.Handle%2A>屬性以建立控制項的處理不論控制項的可見性，但在此情況下，沒有任何視窗控制代碼建立控制項的子系。</span><span class="sxs-lookup"><span data-stu-id="31784-597">You can either call the <xref:System.Windows.Forms.Control.CreateHandle%2A> method or access the <xref:System.Windows.Forms.Control.Handle%2A> property to create the control's handle regardless of the control's visibility, but in this case, no window handles are created for the control's children.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="CreateControlsInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Control.ControlCollection CreateControlsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.Control/ControlCollection CreateControlsInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateControlsInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateControlsInstance () As Control.ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::Control::ControlCollection ^ CreateControlsInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateControlsInstance : unit -&gt; System.Windows.Forms.Control.ControlCollection&#xA;override this.CreateControlsInstance : unit -&gt; System.Windows.Forms.Control.ControlCollection" Usage="control.CreateControlsInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-598">建立控制項的控制項集合的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="31784-598">Creates a new instance of the control collection for the control.</span></span></summary>
        <returns><span data-ttu-id="31784-599">指定至控制項的 <see cref="T:System.Windows.Forms.Control.ControlCollection" /> 的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="31784-599">A new instance of <see cref="T:System.Windows.Forms.Control.ControlCollection" /> assigned to the control.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-600"><para>由衍生類別不應該呼叫這個方法的基底類別版本。</para></span><span class="sxs-lookup"><span data-stu-id="31784-600"><para>The base class version of this method should not be called by a derived class.</para></span></span></block>
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="Created">
      <MemberSignature Language="C#" Value="public bool Created { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Created" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Created" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Created As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Created { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Created : bool" Usage="System.Windows.Forms.Control.Created" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-601">取得值，指出是否已經建立控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-601">Gets a value indicating whether the control has been created.</span></span></summary>
        <value><span data-ttu-id="31784-602">如果已經建立控制項，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-602"><see langword="true" /> if the control has been created; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-603"><xref:System.Windows.Forms.Control.Created%2A>屬性會傳回`true`如果<xref:System.Windows.Forms.Control>已成功建立，即使控制項的控制代碼可能會有尚未建立或尚未重新建立。</span><span class="sxs-lookup"><span data-stu-id="31784-603">The <xref:System.Windows.Forms.Control.Created%2A> property returns `true` if the <xref:System.Windows.Forms.Control> was successfully created even though the control's handle might not have been created or recreated yet.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.OnCreateControl" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="CreateGraphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics CreateGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Graphics CreateGraphics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateGraphics" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateGraphics () As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Graphics ^ CreateGraphics();" />
      <MemberSignature Language="F#" Value="member this.CreateGraphics : unit -&gt; System.Drawing.Graphics" Usage="control.CreateGraphics " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-604">建立控制項的 <see cref="T:System.Drawing.Graphics" />。</span><span class="sxs-lookup"><span data-stu-id="31784-604">Creates the <see cref="T:System.Drawing.Graphics" /> for the control.</span></span></summary>
        <returns><span data-ttu-id="31784-605">控制項的 <see cref="T:System.Drawing.Graphics" />。</span><span class="sxs-lookup"><span data-stu-id="31784-605">The <see cref="T:System.Drawing.Graphics" /> for the control.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-606"><xref:System.Drawing.Graphics>物件，您透過擷取<xref:System.Windows.Forms.Control.CreateGraphics%2A>方法應該不通常會保留後已處理的目前的 Windows 訊息，因為與該物件所繪製的任何項目與下一個 WM_PAINT 訊息將被清除。</span><span class="sxs-lookup"><span data-stu-id="31784-606">The <xref:System.Drawing.Graphics> object that you retrieve through the <xref:System.Windows.Forms.Control.CreateGraphics%2A> method should not normally be retained after the current Windows message has been processed, because anything painted with that object will be erased with the next WM_PAINT message.</span></span> <span data-ttu-id="31784-607">因此您無法快取<xref:System.Drawing.Graphics>物件供重複使用，但若要使用非視覺方法，例如<xref:System.Drawing.Graphics.MeasureString%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="31784-607">Therefore you cannot cache the <xref:System.Drawing.Graphics> object for reuse, except to use non-visual methods like <xref:System.Drawing.Graphics.MeasureString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="31784-608">相反地，您必須呼叫<xref:System.Windows.Forms.Control.CreateGraphics%2A>每當您想要使用<xref:System.Drawing.Graphics>物件，然後再呼叫<xref:System.Drawing.Graphics.Dispose%2A>當您完成使用它。</span><span class="sxs-lookup"><span data-stu-id="31784-608">Instead, you must call <xref:System.Windows.Forms.Control.CreateGraphics%2A> every time that you want to use the <xref:System.Drawing.Graphics> object, and then call <xref:System.Drawing.Graphics.Dispose%2A> when you are finished using it.</span></span> <span data-ttu-id="31784-609">如需 Windows 訊息的詳細資訊，請參閱<xref:System.Windows.Forms.Control.WndProc%2A>。</span><span class="sxs-lookup"><span data-stu-id="31784-609">For more information about Windows messages, see <xref:System.Windows.Forms.Control.WndProc%2A>.</span></span>  
  
 <span data-ttu-id="31784-610">根據設計，<xref:System.Windows.Forms.Control.CreateGraphics%2A>設定擁有權給呼叫執行緒，而如果它在其他執行緒上呼叫會失敗。</span><span class="sxs-lookup"><span data-stu-id="31784-610">By design, <xref:System.Windows.Forms.Control.CreateGraphics%2A> sets ownership to the calling thread, and fails if it is called on other threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-611">除了<xref:System.Windows.Forms.Control.InvokeRequired%2A>屬性，在控制項上都是安全執行緒的四種方法： <xref:System.Windows.Forms.Control.Invoke%2A>， <xref:System.Windows.Forms.Control.BeginInvoke%2A>， <xref:System.Windows.Forms.Control.EndInvoke%2A>，和<xref:System.Windows.Forms.Control.CreateGraphics%2A>如果已經建立控制項的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-611">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="31784-612">呼叫<xref:System.Windows.Forms.Control.CreateGraphics%2A>背景執行緒上建立控制項的控制代碼之前可能會導致不合法的跨執行緒呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-612">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="31784-613">至於其他所有方法呼叫，您應該使用叫用方法的其中一個來封送處理控制項的執行緒的呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-613">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-614">下列程式碼範例會調整大小指定的控制項，讓控制項可以容納其格式化的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-614">The following code example resizes the specified control so the control will accommodate its formatted text.</span></span> <span data-ttu-id="31784-615">格式化的文字是<xref:System.Windows.Forms.Control.Text%2A>與控制項屬性的指派<xref:System.Windows.Forms.Control.Font%2A>套用至文字。</span><span class="sxs-lookup"><span data-stu-id="31784-615">The formatted text is the <xref:System.Windows.Forms.Control.Text%2A> property with the control's assigned <xref:System.Windows.Forms.Control.Font%2A> applied to the text.</span></span> <span data-ttu-id="31784-616">`AutoSizeControl`方法在此範例中也有`textPadding`參數，表示要套用至控制項的所有邊緣的填補量。</span><span class="sxs-lookup"><span data-stu-id="31784-616">The `AutoSizeControl` method in this example also has a `textPadding` parameter that represents the padding to apply to all edges of the control.</span></span> <span data-ttu-id="31784-617">若要讓出現相同的填補，以將文字的對齊`MiddleCenter`值<xref:System.Drawing.ContentAlignment?displayProperty=nameWithType>如果控制項支援它。</span><span class="sxs-lookup"><span data-stu-id="31784-617">To make the padding appear equal, align the text with the `MiddleCenter` value of <xref:System.Drawing.ContentAlignment?displayProperty=nameWithType> if your control supports it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Member5#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#1)]
 [!code-csharp[Windows.Forms.Control Member5#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#1)]
 [!code-vb[Windows.Forms.Control Member5#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-618">用於安全呼叫這個方法的子視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-618">for safe subwindows to call this method.</span></span> <span data-ttu-id="31784-619">列舉型別相關聯：<see langword="SafeSubWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-619">Associated enumeration: <see langword="SafeSubWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected virtual void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CreateHandle();" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : unit -&gt; unit&#xA;override this.CreateHandle : unit -&gt; unit" Usage="control.CreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-620">建立控制項的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-620">Creates a handle for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-621">您通常不應該呼叫<xref:System.Windows.Forms.Control.CreateHandle%2A>直接的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-621">You typically should not call the <xref:System.Windows.Forms.Control.CreateHandle%2A> method directly.</span></span> <span data-ttu-id="31784-622">慣用的方法是呼叫<xref:System.Windows.Forms.Control.CreateControl%2A>方法，強制建立控制項時建立的控制項及其子控制項的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-622">The preferred method is to call the <xref:System.Windows.Forms.Control.CreateControl%2A> method, which forces a handle to be created for the control and its child controls when the control is created.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="31784-623">物件為已處置狀態。</span><span class="sxs-lookup"><span data-stu-id="31784-623">The object is in a disposed state.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-624">繼承類別呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-624">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="31784-625">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-625">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <block subset="none" type="overrides"><span data-ttu-id="31784-626"><para>在覆寫<see cref="M:System.Windows.Forms.Control.CreateHandle" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.CreateHandle" />方法，以確保已建立之控制代碼。</para></span><span class="sxs-lookup"><span data-stu-id="31784-626"><para>When overriding <see cref="M:System.Windows.Forms.Control.CreateHandle" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.CreateHandle" /> method to ensure that the handle is created.</para></span></span></block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.Control.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-627">建立控制代碼時，取得必要的建立參數。</span><span class="sxs-lookup"><span data-stu-id="31784-627">Gets the required creation parameters when the control handle is created.</span></span></summary>
        <value><span data-ttu-id="31784-628"><see cref="T:System.Windows.Forms.CreateParams" />，包含建立控制項之控制代碼時所需的建立參數。</span><span class="sxs-lookup"><span data-stu-id="31784-628">A <see cref="T:System.Windows.Forms.CreateParams" /> that contains the required creation parameters when the handle to the control is created.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-629"><xref:System.Windows.Forms.Control.CreateParams%2A>屬性應該不會覆寫，用來調整衍生控制項的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-629">The <xref:System.Windows.Forms.Control.CreateParams%2A> property should not be overridden and used to adjust the properties of your derived control.</span></span> <span data-ttu-id="31784-630">屬性，例如<xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=nameWithType>， <xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=nameWithType>，和<xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=nameWithType>應該設定在控制項中的對應屬性例如<xref:System.Windows.Forms.Control.Text%2A?displayProperty=nameWithType>，<xref:System.Windows.Forms.Control.Width%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.Height%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="31784-630">Properties such as the <xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=nameWithType>, and <xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=nameWithType> should be set by the corresponding properties in your control such as <xref:System.Windows.Forms.Control.Text%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.Width%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.Height%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="31784-631"><xref:System.Windows.Forms.CreateParams>應該只在會包裝在標準 Windows 控制項的類別或設定樣式不提供 Windows Form 的命名空間時才擴充。</span><span class="sxs-lookup"><span data-stu-id="31784-631">The <xref:System.Windows.Forms.CreateParams> should only be extended when you are wrapping a standard Windows control class or to set styles not provided by the Windows Forms namespace.</span></span> <span data-ttu-id="31784-632">如需建立控制項參數的詳細資訊，請參閱`CreateWindow`和`CreateWindowEx`函式和[CREATESTRUCT](http://msdn.microsoft.com/library/windows/desktop/ms632603.aspx)結構文件。</span><span class="sxs-lookup"><span data-stu-id="31784-632">For more information about creating control parameters, see the `CreateWindow` and `CreateWindowEx` functions and the [CREATESTRUCT](http://msdn.microsoft.com/library/windows/desktop/ms632603.aspx)structure documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-633">下列程式碼範例將擴充<xref:System.Windows.Forms.Control.CreateParams%2A>屬性<xref:System.Windows.Forms.Button>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="31784-633">The following code example extends the <xref:System.Windows.Forms.Control.CreateParams%2A> property of a <xref:System.Windows.Forms.Button> derived class.</span></span> <span data-ttu-id="31784-634"><xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=nameWithType>屬性變更，因而導致按鈕以顯示<xref:System.Drawing.Icon>而不是<xref:System.Drawing.Image>。</span><span class="sxs-lookup"><span data-stu-id="31784-634">The <xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=nameWithType> property is changed, which causes the button to display an <xref:System.Drawing.Icon> rather than an <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="31784-635">這個範例需要您具有類別繼承自<xref:System.Windows.Forms.Button>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-635">This example requires that you have a class that inherits from the <xref:System.Windows.Forms.Button> class.</span></span>  
  
 [!code-cpp[CreateParams#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CreateParams/CPP/createparams.cpp#3)]
 [!code-csharp[CreateParams#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CreateParams/CS/createparams.cs#3)]
 [!code-vb[CreateParams#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CreateParams/VB/createparams.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="31784-636">呼叫 unmanaged 程式碼，取得屬性值時立即呼叫者。</span><span class="sxs-lookup"><span data-stu-id="31784-636">for the immediate caller to call unmanaged code when getting the property value.</span></span> <span data-ttu-id="31784-637">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="31784-637">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <block subset="none" type="overrides"><span data-ttu-id="31784-638"><para>在覆寫<see cref="P:System.Windows.Forms.Control.CreateParams" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.CreateParams" />屬性擴充的基底實作。否則，您必須提供所有的實作。</para></span><span class="sxs-lookup"><span data-stu-id="31784-638"><para>When overriding the <see cref="P:System.Windows.Forms.Control.CreateParams" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.CreateParams" /> property to extend the base implementation. Otherwise, you must provide all the implementation.</para></span></span></block>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Cursor ^ Cursor { System::Windows::Forms::Cursor ^ get(); void set(System::Windows::Forms::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Forms.Cursor with get, set" Usage="System.Windows.Forms.Control.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-639">取得或設定滑鼠指標移至控制項上時顯示的游標。</span><span class="sxs-lookup"><span data-stu-id="31784-639">Gets or sets the cursor that is displayed when the mouse pointer is over the control.</span></span></summary>
        <value><span data-ttu-id="31784-640"><see cref="T:System.Windows.Forms.Cursor" />，表示滑鼠指標移至控制項上方時所顯示的游標。</span><span class="sxs-lookup"><span data-stu-id="31784-640">A <see cref="T:System.Windows.Forms.Cursor" /> that represents the cursor to display when the mouse pointer is over the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-641">指派<xref:System.Windows.Forms.Cursor>至<xref:System.Windows.Forms.Control.Cursor%2A>若要變更資料指標時，滑鼠指標位於控制項上顯示控制項的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-641">Assign a <xref:System.Windows.Forms.Cursor> to the <xref:System.Windows.Forms.Control.Cursor%2A> property of the control to change the cursor displayed when the mouse pointer is over the control.</span></span> <span data-ttu-id="31784-642">若要暫時變更 應用程式集上的所有控制項的滑鼠游標<xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-642">To temporarily change the mouse cursor for all controls on your application set the <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="31784-643">通常您會設定<xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType>等候資料指標時填入屬性<xref:System.Windows.Forms.ComboBox>或儲存或載入檔案。</span><span class="sxs-lookup"><span data-stu-id="31784-643">Typically you would set the <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType> property to a wait cursor when populating a <xref:System.Windows.Forms.ComboBox> or saving or loading a file.</span></span>  
  
 <span data-ttu-id="31784-644"><xref:System.Windows.Forms.Control.Cursor%2A>屬性是環境的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-644">The <xref:System.Windows.Forms.Control.Cursor%2A> property is an ambient property.</span></span> <span data-ttu-id="31784-645">環境屬性是控制項屬性，如果未設定，將擷取從父控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-645">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="31784-646">例如，<xref:System.Windows.Forms.Button>具有相同<xref:System.Windows.Forms.Control.BackColor%2A>做為其父系<xref:System.Windows.Forms.Form>預設。</span><span class="sxs-lookup"><span data-stu-id="31784-646">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="31784-647">如需環境屬性的詳細資訊，請參閱<xref:System.Windows.Forms.AmbientProperties>類別或<xref:System.Windows.Forms.Control>類別概觀。</span><span class="sxs-lookup"><span data-stu-id="31784-647">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-648">下列程式碼範例會填入<xref:System.Windows.Forms.ComboBox>含有使用者的可用邏輯磁碟機。</span><span class="sxs-lookup"><span data-stu-id="31784-648">The following code example fills a <xref:System.Windows.Forms.ComboBox> with the user's available logical drives.</span></span> <span data-ttu-id="31784-649">此範例也會設定下拉式方塊的<xref:System.Windows.Forms.Cursor>屬性所以<xref:System.Windows.Forms.Cursors.Hand%2A?displayProperty=nameWithType>滑鼠指標停留下拉式按鈕上時，會顯示資料指標。</span><span class="sxs-lookup"><span data-stu-id="31784-649">The example also sets the combo box's <xref:System.Windows.Forms.Cursor> property so the <xref:System.Windows.Forms.Cursors.Hand%2A?displayProperty=nameWithType> cursor is displayed when the mouse pointer is over the drop-down button.</span></span> <span data-ttu-id="31784-650">此程式碼，您必須擁有<xref:System.Windows.Forms.Form>與<xref:System.Windows.Forms.ComboBox>在其上。</span><span class="sxs-lookup"><span data-stu-id="31784-650">This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.ComboBox> on it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-651">用於設定這個屬性值的安全子視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-651">for safe subwindows to set this property value.</span></span> <span data-ttu-id="31784-652">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></span><span class="sxs-lookup"><span data-stu-id="31784-652">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></span></span></permission>
        <block subset="none" type="overrides"><span data-ttu-id="31784-653"><para>在覆寫<see cref="P:System.Windows.Forms.Control.Cursor" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.Cursor" />屬性擴充的基底實作。否則，您必須提供所有的實作。您不需要覆寫兩個<see langword="get" />和<see langword="set" />方法<see cref="P:System.Windows.Forms.Control.Cursor" />屬性; 您可以覆寫只能有一個必要。</para></span><span class="sxs-lookup"><span data-stu-id="31784-653"><para>When overriding the <see cref="P:System.Windows.Forms.Control.Cursor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Cursor" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> methods of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property; you can override only one if needed.</para></span></span></block>
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <altmember cref="T:System.Windows.Forms.Cursors" />
      </Docs>
    </Member>
    <Member MemberName="CursorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CursorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CursorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.CursorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CursorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CursorChanged;" />
      <MemberSignature Language="F#" Value="member this.CursorChanged : EventHandler " Usage="member this.CursorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-654">發生於 <see cref="P:System.Windows.Forms.Control.Cursor" /> 屬性的值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-654">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-655">如果會引發這個事件<xref:System.Windows.Forms.Control.Cursor%2A>以程式設計方式修改或使用者互動變更屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-655">This event is raised if the <xref:System.Windows.Forms.Control.Cursor%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-656">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-656">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-657">下列程式碼範例示範如何變更滑鼠資料指標使用<xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType>屬性，<xref:System.Windows.Forms.Cursor>類別，而<xref:System.Windows.Forms.Cursors>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-657">The following code example demonstrates changing the mouse cursor using the <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType> property, the <xref:System.Windows.Forms.Cursor> class, and the <xref:System.Windows.Forms.Cursors> class.</span></span> <span data-ttu-id="31784-658">此範例會建立包含表單的<xref:System.Windows.Forms.ComboBox>控制項，<xref:System.Windows.Forms.Panel>控制項和<xref:System.Windows.Forms.ListView>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-658">The example creates a form that contains a <xref:System.Windows.Forms.ComboBox> control, a <xref:System.Windows.Forms.Panel> control, and a <xref:System.Windows.Forms.ListView> control.</span></span> <span data-ttu-id="31784-659"><xref:System.Windows.Forms.ComboBox>包含所提供的所有資料指標<xref:System.Windows.Forms.Cursors>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-659">The <xref:System.Windows.Forms.ComboBox> contains all cursors provided by the <xref:System.Windows.Forms.Cursors> class.</span></span> <span data-ttu-id="31784-660">當使用者選取的滑鼠游標置於<xref:System.Windows.Forms.ComboBox>、<xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType>屬性設定為選取的資料指標，它會更新資料指標， <xref:System.Windows.Forms.Panel>。</span><span class="sxs-lookup"><span data-stu-id="31784-660">When the user selects a mouse cursor in the <xref:System.Windows.Forms.ComboBox>, the <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType> property is set to the selected cursor, which updates the cursor for the <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="31784-661"><xref:System.Windows.Forms.ListView>會更新每次<xref:System.Windows.Forms.Control.CursorChanged?displayProperty=nameWithType>就會發生事件。</span><span class="sxs-lookup"><span data-stu-id="31784-661">The <xref:System.Windows.Forms.ListView> is updated every time the <xref:System.Windows.Forms.Control.CursorChanged?displayProperty=nameWithType> event occurs.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Cursors#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursors/CPP/cursorexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursors#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursors/CS/cursorexample.cs#1)]
 [!code-vb[System.Windows.Forms.Cursors#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursors/VB/cursorexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="DataBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlBindingsCollection DataBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ControlBindingsCollection DataBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DataBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataBindings As ControlBindingsCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ControlBindingsCollection ^ DataBindings { System::Windows::Forms::ControlBindingsCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataBindings : System.Windows.Forms.ControlBindingsCollection" Usage="System.Windows.Forms.Control.DataBindings" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IBindableComponent.DataBindings</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ParenthesizePropertyName(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlBindingsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-662">取得控制項的資料繫結 (Data Binding)。</span><span class="sxs-lookup"><span data-stu-id="31784-662">Gets the data bindings for the control.</span></span></summary>
        <value><span data-ttu-id="31784-663"><see cref="T:System.Windows.Forms.ControlBindingsCollection" />，包含控制項的 <see cref="T:System.Windows.Forms.Binding" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="31784-663">A <see cref="T:System.Windows.Forms.ControlBindingsCollection" /> that contains the <see cref="T:System.Windows.Forms.Binding" /> objects for the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-664">使用<xref:System.Windows.Forms.Control.DataBindings%2A>屬性來存取<xref:System.Windows.Forms.ControlBindingsCollection>。</span><span class="sxs-lookup"><span data-stu-id="31784-664">Use the <xref:System.Windows.Forms.Control.DataBindings%2A> property to access the <xref:System.Windows.Forms.ControlBindingsCollection>.</span></span> <span data-ttu-id="31784-665">藉由新增<xref:System.Windows.Forms.Binding>物件加入集合中，您可以將控制項的任何屬性繫結至物件的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-665">By adding <xref:System.Windows.Forms.Binding> objects to the collection, you can bind any property of a control to the property of an object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-666">下列程式碼範例會將<xref:System.Windows.Forms.Binding>物件加入至<xref:System.Windows.Forms.ControlBindingsCollection>五個控制項： 四個<xref:System.Windows.Forms.TextBox>控制項和<xref:System.Windows.Forms.DateTimePicker>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-666">The following code example adds <xref:System.Windows.Forms.Binding> objects to the <xref:System.Windows.Forms.ControlBindingsCollection> of five controls: four <xref:System.Windows.Forms.TextBox> controls and a <xref:System.Windows.Forms.DateTimePicker> control.</span></span> <span data-ttu-id="31784-667"><xref:System.Windows.Forms.ControlBindingsCollection> 可透過 <xref:System.Windows.Forms.Control.DataBindings%2A> 類別的 <xref:System.Windows.Forms.Control> 屬性存取。</span><span class="sxs-lookup"><span data-stu-id="31784-667">The <xref:System.Windows.Forms.ControlBindingsCollection> is accessed through the <xref:System.Windows.Forms.Control.DataBindings%2A> property of the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 [!code-cpp[Classic Control.DataBindings Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.DataBindings Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.DataBindings Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.DataBindings Example/CS/source.cs#1)]
 [!code-vb[Classic Control.DataBindings Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.DataBindings Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingContext" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
      </Docs>
    </Member>
    <Member MemberName="DefaultBackColor">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color DefaultBackColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Color DefaultBackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultBackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Color DefaultBackColor { System::Drawing::Color get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBackColor : System.Drawing.Color" Usage="System.Windows.Forms.Control.DefaultBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-668">取得控制項的預設背景色彩。</span><span class="sxs-lookup"><span data-stu-id="31784-668">Gets the default background color of the control.</span></span></summary>
        <value><span data-ttu-id="31784-669">控制項的預設背景 <see cref="T:System.Drawing.Color" />。</span><span class="sxs-lookup"><span data-stu-id="31784-669">The default background <see cref="T:System.Drawing.Color" /> of the control.</span></span> <span data-ttu-id="31784-670">預設值為 <see cref="P:System.Drawing.SystemColors.Control" />。</span><span class="sxs-lookup"><span data-stu-id="31784-670">The default is <see cref="P:System.Drawing.SystemColors.Control" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-671">這是預設<xref:System.Windows.Forms.Control.BackColor%2A>泛型的最上層控制項的屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-671">This is the default <xref:System.Windows.Forms.Control.BackColor%2A> property value of a generic top-level control.</span></span> <span data-ttu-id="31784-672">在衍生的類別可以有不同的預設值。</span><span class="sxs-lookup"><span data-stu-id="31784-672">Derived classes can have different defaults.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-673">下列程式碼範例示範如何使用<xref:System.Windows.Forms.Control.DefaultBackColor%2A>， <xref:System.Windows.Forms.Control.DefaultFont%2A>，和<xref:System.Windows.Forms.Control.DefaultForeColor%2A>成員。</span><span class="sxs-lookup"><span data-stu-id="31784-673">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members.</span></span> <span data-ttu-id="31784-674">若要執行範例時，將下列程式碼貼中表單，其中包含<xref:System.Windows.Forms.ListBox>呼叫 ListBox1。</span><span class="sxs-lookup"><span data-stu-id="31784-674">To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1.</span></span> <span data-ttu-id="31784-675">呼叫`Populate_ListBox`表單的建構函式中的方法或<xref:System.Windows.Forms.Form.Load>事件處理方法。</span><span class="sxs-lookup"><span data-stu-id="31784-675">Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="DefaultCursor">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Cursor DefaultCursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor DefaultCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultCursor" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultCursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::Cursor ^ DefaultCursor { System::Windows::Forms::Cursor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultCursor : System.Windows.Forms.Cursor" Usage="System.Windows.Forms.Control.DefaultCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-676">取得或設定控制項的預設游標。</span><span class="sxs-lookup"><span data-stu-id="31784-676">Gets or sets the default cursor for the control.</span></span></summary>
        <value><span data-ttu-id="31784-677">類型 <see cref="T:System.Windows.Forms.Cursor" /> 的物件，代表目前的預設資料指標。</span><span class="sxs-lookup"><span data-stu-id="31784-677">An object of type <see cref="T:System.Windows.Forms.Cursor" /> representing the current default cursor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-678">覆寫<xref:System.Windows.Forms.Control.DefaultCursor%2A>設定控制項的預設資料指標。</span><span class="sxs-lookup"><span data-stu-id="31784-678">Override <xref:System.Windows.Forms.Control.DefaultCursor%2A> to configure a default cursor for your control.</span></span> <span data-ttu-id="31784-679">這會更有效率，比在控制項的建構函式，設定資料指標，並提供自動支援特定資料指標相關的設計工具功能。</span><span class="sxs-lookup"><span data-stu-id="31784-679">This is more efficient than setting the cursor in the control's constructor, and gives automatic support for certain cursor-related designer functions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font DefaultFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Font DefaultFont" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultFont" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultFont As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Font ^ DefaultFont { System::Drawing::Font ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFont : System.Drawing.Font" Usage="System.Windows.Forms.Control.DefaultFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-680">取得控制項的預設字型。</span><span class="sxs-lookup"><span data-stu-id="31784-680">Gets the default font of the control.</span></span></summary>
        <value><span data-ttu-id="31784-681">控制項的預設 <see cref="T:System.Drawing.Font" />。</span><span class="sxs-lookup"><span data-stu-id="31784-681">The default <see cref="T:System.Drawing.Font" /> of the control.</span></span> <span data-ttu-id="31784-682">所傳回的值將會根據使用者的作業系統和系統的本機文化特性設定而異。</span><span class="sxs-lookup"><span data-stu-id="31784-682">The value returned will vary depending on the user's operating system the local culture setting of their system.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-683">下表描述傳回的值<xref:System.Windows.Forms.Control.DefaultFont%2A>取決於作業系統及當地文化特性。</span><span class="sxs-lookup"><span data-stu-id="31784-683">The following table describes the value returned by <xref:System.Windows.Forms.Control.DefaultFont%2A> depending on the operating system and local culture.</span></span>  
  
|<span data-ttu-id="31784-684">系統 / 和或文化特性</span><span class="sxs-lookup"><span data-stu-id="31784-684">System/and or Culture</span></span>|<span data-ttu-id="31784-685">字型</span><span class="sxs-lookup"><span data-stu-id="31784-685">Font</span></span>|  
|----------------------------|----------|  
|<span data-ttu-id="31784-686">Windows NT 4 x 日文版</span><span class="sxs-lookup"><span data-stu-id="31784-686">Windows NT 4x, Japanese version</span></span>|<span data-ttu-id="31784-687">MS UI 哥，9 點。</span><span class="sxs-lookup"><span data-stu-id="31784-687">MS UI Gothic, 9 point.</span></span>|  
|<span data-ttu-id="31784-688">阿拉伯文 Windows</span><span class="sxs-lookup"><span data-stu-id="31784-688">Arabic Windows</span></span>|<span data-ttu-id="31784-689">新細明體，8 點。</span><span class="sxs-lookup"><span data-stu-id="31784-689">Tahoma, 8 point.</span></span>|  
|<span data-ttu-id="31784-690">其他作業系統/文化特性</span><span class="sxs-lookup"><span data-stu-id="31784-690">Other operating system/culture</span></span>|<span data-ttu-id="31784-691">MS Shell Dlg 邏輯字型，通常是 Microsoft San 新細明體 8 點。</span><span class="sxs-lookup"><span data-stu-id="31784-691">MS Shell Dlg logical font, typically Microsoft San Serif 8 point.</span></span>|  
  
 <span data-ttu-id="31784-692">MS Shell Dlg 對應至系統登錄中設定的字型。</span><span class="sxs-lookup"><span data-stu-id="31784-692">MS Shell Dlg maps to a font set in the system registry.</span></span>  
  
 <span data-ttu-id="31784-693">如果尚未安裝先前的字型的預設字型是新細明體，8 點。</span><span class="sxs-lookup"><span data-stu-id="31784-693">If the previous fonts are not installed, the default font is Tahoma, 8 point.</span></span> <span data-ttu-id="31784-694">如果未安裝新細明體，8 的點，<xref:System.Windows.Forms.Control.DefaultFont%2A>傳回的值<xref:System.Drawing.FontFamily.GenericSansSerif%2A>屬性</span><span class="sxs-lookup"><span data-stu-id="31784-694">If Tahoma, 8 point, is not installed, <xref:System.Windows.Forms.Control.DefaultFont%2A> returns the value of the <xref:System.Drawing.FontFamily.GenericSansSerif%2A> property</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-695">下列程式碼範例示範如何使用<xref:System.Windows.Forms.Control.DefaultBackColor%2A>， <xref:System.Windows.Forms.Control.DefaultFont%2A>，和<xref:System.Windows.Forms.Control.DefaultForeColor%2A>成員。</span><span class="sxs-lookup"><span data-stu-id="31784-695">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members.</span></span> <span data-ttu-id="31784-696">若要執行範例時，將下列程式碼貼中表單，其中包含<xref:System.Windows.Forms.ListBox>呼叫 ListBox1。</span><span class="sxs-lookup"><span data-stu-id="31784-696">To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1.</span></span> <span data-ttu-id="31784-697">呼叫`Populate_ListBox`表單的建構函式中的方法或<xref:System.Windows.Forms.Form.Load>事件處理方法。</span><span class="sxs-lookup"><span data-stu-id="31784-697">Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31784-698">用戶端電腦上未安裝預設字型或地區替代字型。</span><span class="sxs-lookup"><span data-stu-id="31784-698">The default font or the regional alternative fonts are not installed on the client computer.</span></span></exception>
        <altmember cref="P:System.Windows.Forms.Control.Font" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="DefaultForeColor">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color DefaultForeColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Color DefaultForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Color DefaultForeColor { System::Drawing::Color get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultForeColor : System.Drawing.Color" Usage="System.Windows.Forms.Control.DefaultForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-699">取得控制項的預設前景色彩。</span><span class="sxs-lookup"><span data-stu-id="31784-699">Gets the default foreground color of the control.</span></span></summary>
        <value><span data-ttu-id="31784-700">控制項的預設前景 <see cref="T:System.Drawing.Color" />。</span><span class="sxs-lookup"><span data-stu-id="31784-700">The default foreground <see cref="T:System.Drawing.Color" /> of the control.</span></span> <span data-ttu-id="31784-701">預設值為 <see cref="P:System.Drawing.SystemColors.ControlText" />。</span><span class="sxs-lookup"><span data-stu-id="31784-701">The default is <see cref="P:System.Drawing.SystemColors.ControlText" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-702">這是預設<xref:System.Windows.Forms.Control.ForeColor%2A>nonparented 控制項的屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-702">This is the default <xref:System.Windows.Forms.Control.ForeColor%2A> property value of a nonparented control.</span></span> <span data-ttu-id="31784-703">在衍生的類別可以有不同的預設值。</span><span class="sxs-lookup"><span data-stu-id="31784-703">Derived classes can have different defaults.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-704">下列程式碼範例示範如何使用<xref:System.Windows.Forms.Control.DefaultBackColor%2A>， <xref:System.Windows.Forms.Control.DefaultFont%2A>，和<xref:System.Windows.Forms.Control.DefaultForeColor%2A>成員。</span><span class="sxs-lookup"><span data-stu-id="31784-704">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members.</span></span> <span data-ttu-id="31784-705">若要執行範例時，將下列程式碼貼中表單，其中包含<xref:System.Windows.Forms.ListBox>呼叫 ListBox1。</span><span class="sxs-lookup"><span data-stu-id="31784-705">To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1.</span></span> <span data-ttu-id="31784-706">呼叫`Populate_ListBox`表單的建構函式中的方法或<xref:System.Windows.Forms.Form.Load>事件處理方法。</span><span class="sxs-lookup"><span data-stu-id="31784-706">Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ForeColor" />
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="DefaultImeMode">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ImeMode DefaultImeMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode DefaultImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultImeMode" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultImeMode As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::ImeMode DefaultImeMode { System::Windows::Forms::ImeMode get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultImeMode : System.Windows.Forms.ImeMode" Usage="System.Windows.Forms.Control.DefaultImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-707">取得控制項支援的預設輸入法 (IME) 模式。</span><span class="sxs-lookup"><span data-stu-id="31784-707">Gets the default Input Method Editor (IME) mode supported by the control.</span></span></summary>
        <value><span data-ttu-id="31784-708">其中一個 <see cref="T:System.Windows.Forms.ImeMode" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-708">One of the <see cref="T:System.Windows.Forms.ImeMode" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-709">輸入法 (IME) 是一種程式，讓使用者能夠使用標準鍵盤輸入複雜字元和符號，例如日文漢字字元。</span><span class="sxs-lookup"><span data-stu-id="31784-709">An Input Method Editor (IME) is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, by using a standard keyboard.</span></span>  
  
 <span data-ttu-id="31784-710">在中實作<xref:System.Windows.Forms.Control>類別，這個屬性永遠傳回<xref:System.Windows.Forms.ImeMode.Inherit?displayProperty=nameWithType>值。</span><span class="sxs-lookup"><span data-stu-id="31784-710">As implemented in the <xref:System.Windows.Forms.Control> class, this property always returns the <xref:System.Windows.Forms.ImeMode.Inherit?displayProperty=nameWithType> value.</span></span> <span data-ttu-id="31784-711"><xref:System.Windows.Forms.ImeMode.Inherit>值會指定輸入法模式繼承自父控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-711">The <xref:System.Windows.Forms.ImeMode.Inherit> value specifies that the IME mode is inherited from the parent control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-712">下列程式碼範例將覆寫<xref:System.Windows.Forms.Control.DefaultImeMode%2A>開啟關閉輸入法編輯器中的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-712">The following code example overrides the <xref:System.Windows.Forms.Control.DefaultImeMode%2A> property to turn off the Input Method Editor.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#4)]
 [!code-csharp[Windows.Forms.Control Properties2#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#4)]
 [!code-vb[Windows.Forms.Control Properties2#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-713"><para>在覆寫<see cref="P:System.Windows.Forms.Control.DefaultImeMode" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.DefaultImeMode" />屬性擴充的基底實作。否則，您必須提供所有的實作。</para></span><span class="sxs-lookup"><span data-stu-id="31784-713"><para>When overriding the <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> property to extend the base implementation. Otherwise, you must provide all the implementation.</para></span></span></block>
        <altmember cref="T:System.Windows.Forms.ImeMode" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="DefaultMargin">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Padding DefaultMargin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding DefaultMargin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMargin" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultMargin As Padding" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::Padding DefaultMargin { System::Windows::Forms::Padding get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMargin : System.Windows.Forms.Padding" Usage="System.Windows.Forms.Control.DefaultMargin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-714">取得控制項之間的預設指定間距 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-714">Gets the space, in pixels, that is specified by default between controls.</span></span></summary>
        <value><span data-ttu-id="31784-715"><see cref="T:System.Windows.Forms.Padding" />，表示控制項之間的預設間距。</span><span class="sxs-lookup"><span data-stu-id="31784-715">A <see cref="T:System.Windows.Forms.Padding" /> that represents the default space between controls.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMaximumSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultMaximumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultMaximumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMaximumSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultMaximumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultMaximumSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMaximumSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.DefaultMaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-716">取得指定為控制項的預設大小之最大值的長度和高度 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-716">Gets the length and height, in pixels, that is specified as the default maximum size of a control.</span></span></summary>
        <value><span data-ttu-id="31784-717"><see cref="M:System.Drawing.Point.#ctor(System.Drawing.Size)" />，表示控制項的大小。</span><span class="sxs-lookup"><span data-stu-id="31784-717">A <see cref="M:System.Drawing.Point.#ctor(System.Drawing.Size)" /> representing the size of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMinimumSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultMinimumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultMinimumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMinimumSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultMinimumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultMinimumSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMinimumSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.DefaultMinimumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-718">取得指定為控制項的預設大小之最小值的長度和高度 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-718">Gets the length and height, in pixels, that is specified as the default minimum size of a control.</span></span></summary>
        <value><span data-ttu-id="31784-719"><see cref="T:System.Drawing.Size" />，表示控制項的大小。</span><span class="sxs-lookup"><span data-stu-id="31784-719">A <see cref="T:System.Drawing.Size" /> representing the size of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultPadding">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Padding DefaultPadding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding DefaultPadding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultPadding" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultPadding As Padding" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::Padding DefaultPadding { System::Windows::Forms::Padding get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultPadding : System.Windows.Forms.Padding" Usage="System.Windows.Forms.Control.DefaultPadding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-720">取得控制項內容的內部間距 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-720">Gets the internal spacing, in pixels, of the contents of a control.</span></span></summary>
        <value><span data-ttu-id="31784-721"><see cref="T:System.Windows.Forms.Padding" />，表示控制項內容的內部間距。</span><span class="sxs-lookup"><span data-stu-id="31784-721">A <see cref="T:System.Windows.Forms.Padding" /> that represents the internal spacing of the contents of a control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-722">取得控制項的預設大小。</span><span class="sxs-lookup"><span data-stu-id="31784-722">Gets the default size of the control.</span></span></summary>
        <value><span data-ttu-id="31784-723">控制項的預設 <see cref="T:System.Drawing.Size" />。</span><span class="sxs-lookup"><span data-stu-id="31784-723">The default <see cref="T:System.Drawing.Size" /> of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-724"><xref:System.Windows.Forms.Control.DefaultSize%2A>屬性代表<xref:System.Drawing.Size>最初建立時的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-724">The <xref:System.Windows.Forms.Control.DefaultSize%2A> property represents the <xref:System.Drawing.Size> of the control when it is initially created.</span></span> <span data-ttu-id="31784-725">您可以藉由設定調整控制項大小其<xref:System.Windows.Forms.Control.Size%2A>屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-725">You can adjust the size of the control by setting its <xref:System.Windows.Forms.Control.Size%2A> property value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-726">若要維持較佳的效能，請勿設定<xref:System.Drawing.Size>其建構函式中的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-726">To maintain better performance, do not set the <xref:System.Drawing.Size> of a control in its constructor.</span></span> <span data-ttu-id="31784-727">慣用的方法是覆寫<xref:System.Windows.Forms.Control.DefaultSize%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-727">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-728">在 Windows Server 2003 系統上，大小<xref:System.Windows.Forms.Form>受到最大像素寬度和高度的監視。</span><span class="sxs-lookup"><span data-stu-id="31784-728">On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-729">下列程式碼範例將覆寫<xref:System.Windows.Forms.Control.DefaultSize%2A>屬性，並使方形的表單 500 像素的預設大小。</span><span class="sxs-lookup"><span data-stu-id="31784-729">The following code example overrides the <xref:System.Windows.Forms.Control.DefaultSize%2A> property, and makes the default size of the form 500 pixels square.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-730"><para>在覆寫<see cref="P:System.Windows.Forms.Control.DefaultSize" />衍生類別中的屬性，最好是傳回<see cref="T:System.Drawing.Size" />所需的維度，而非覆寫所有的實作。</para></span><span class="sxs-lookup"><span data-stu-id="31784-730"><para>When overriding the <see cref="P:System.Windows.Forms.Control.DefaultSize" /> property in a derived class, it is preferable to return a <see cref="T:System.Drawing.Size" /> with the desired dimensions rather than to override all the implementation.</para></span></span></block>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="T:System.Drawing.Size" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="protected virtual void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member DefWndProc :  -&gt; unit&#xA;override this.DefWndProc :  -&gt; unit" Usage="control.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="31784-731">要處理的 Windows <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="31784-731">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</span></span></param>
        <summary><span data-ttu-id="31784-732">傳送指定的訊息至預設的視窗程序。</span><span class="sxs-lookup"><span data-stu-id="31784-732">Sends the specified message to the default window procedure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-733">如需有關如何處理 Windows 訊息的詳細資訊，請參閱[WindowProc 函式](http://go.microsoft.com/fwlink/?LinkId=181565)。</span><span class="sxs-lookup"><span data-stu-id="31784-733">For more information about processing Windows messages, see the [WindowProc function](http://go.microsoft.com/fwlink/?LinkId=181565).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="31784-734">立即呼叫者呼叫 unmanaged 程式碼。</span><span class="sxs-lookup"><span data-stu-id="31784-734">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="31784-735">關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span><span class="sxs-lookup"><span data-stu-id="31784-735">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="protected virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="control.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-736">終結與這個控制項相關的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-736">Destroys the handle associated with the control.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="31784-737">立即呼叫者呼叫 unmanaged 程式碼。</span><span class="sxs-lookup"><span data-stu-id="31784-737">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="31784-738">關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span><span class="sxs-lookup"><span data-stu-id="31784-738">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <block subset="none" type="overrides"><span data-ttu-id="31784-739"><para>在覆寫<see cref="M:System.Windows.Forms.Control.DestroyHandle" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.DestroyHandle" />方法，以確保控制代碼會終結。</para></span><span class="sxs-lookup"><span data-stu-id="31784-739"><para>When overriding <see cref="M:System.Windows.Forms.Control.DestroyHandle" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.DestroyHandle" /> method to ensure that the handle is destroyed.</para></span></span></block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="DeviceDpi">
      <MemberSignature Language="C#" Value="public int DeviceDpi { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DeviceDpi" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DeviceDpi" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeviceDpi As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DeviceDpi { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DeviceDpi : int" Usage="System.Windows.Forms.Control.DeviceDpi" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-740">取得目前顯示控制項的顯示裝置的 DPI 值。</span><span class="sxs-lookup"><span data-stu-id="31784-740">Gets the DPI value for the display device where the control is currently being displayed.</span></span></summary>
        <value><span data-ttu-id="31784-741">顯示裝置的 DPI 值。</span><span class="sxs-lookup"><span data-stu-id="31784-741">The DPI value of the display device.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayRectangle">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Rectangle DisplayRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle DisplayRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DisplayRectangle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Rectangle DisplayRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.Control.DisplayRectangle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.Layout.IArrangedElement.DisplayRectangle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-742">取得表示控制項顯示區域的矩形。</span><span class="sxs-lookup"><span data-stu-id="31784-742">Gets the rectangle that represents the display area of the control.</span></span></summary>
        <value><span data-ttu-id="31784-743">表示控制項顯示區的 <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="31784-743">A <see cref="T:System.Drawing.Rectangle" /> that represents the display area of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-744"><xref:System.Windows.Forms.Control.DisplayRectangle%2A>屬性會傳回控制項的顯示區域的用戶端矩形。</span><span class="sxs-lookup"><span data-stu-id="31784-744">The <xref:System.Windows.Forms.Control.DisplayRectangle%2A> property returns the client rectangle of the display area of the control.</span></span> <span data-ttu-id="31784-745">基底控制項類別，這個值等於用戶端矩形項目。</span><span class="sxs-lookup"><span data-stu-id="31784-745">For the base control class, this is equal to the client rectangle.</span></span> <span data-ttu-id="31784-746">不過，繼承的控制項可能會想要變更這如果顯示區域不同的工作區。</span><span class="sxs-lookup"><span data-stu-id="31784-746">However, inheriting controls might want to change this if their client area differs from their display area.</span></span> <span data-ttu-id="31784-747">顯示矩形是最小<xref:System.Drawing.Rectangle>封入控制項，而且用來配置控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-747">The display rectangle is the smallest <xref:System.Drawing.Rectangle> that encloses a control and is used to lay out controls.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-748"><para>在覆寫<see cref="P:System.Windows.Forms.Control.DisplayRectangle" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.DisplayRectangle" />屬性擴充的基底實作。或者，您必須提供所有的實作。</para></span><span class="sxs-lookup"><span data-stu-id="31784-748"><para>When overriding the <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> property to extend the base implementation. Alternatively, you must provide all the implementation.</para></span></span></block>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="control.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="31784-749"><see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</span><span class="sxs-lookup"><span data-stu-id="31784-749"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="31784-750">釋放 <see cref="T:System.Windows.Forms.Control" /> 所使用的 Unmanaged 資源，以及其子系的控制項，並會選擇性地釋放一些 Managed 資源。</span><span class="sxs-lookup"><span data-stu-id="31784-750">Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control" /> and its child controls and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-751">這個方法會呼叫公用`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。`Dispose()`</span><span class="sxs-lookup"><span data-stu-id="31784-751">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.`Dispose()`</span></span> <span data-ttu-id="31784-752">叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-752">invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="31784-753"><xref:System.Object.Finalize%2A> 叫用`Dispose`與`disposing`設`false`。</span><span class="sxs-lookup"><span data-stu-id="31784-753"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="31784-754">`disposing` 參數為 `true` 時，這個方法會釋放 <xref:System.Windows.Forms.Control> 參考的任何 Managed 物件所掌握的資源。</span><span class="sxs-lookup"><span data-stu-id="31784-754">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Windows.Forms.Control> references.</span></span> <span data-ttu-id="31784-755">這個方法會叫用每個參考物件的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="31784-755">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-756"><para> <see langword="Dispose" /> 可以被其他物件呼叫多次。在覆寫<see langword="Dispose(Boolean)" />小心不要參考物件已處置過的早期呼叫中<see langword="Dispose" />。如需有關如何實作<see langword="Dispose(Boolean)" />，請參閱 [實作 Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)。如需有關<see langword="Dispose" />和<see cref="M:System.Object.Finalize" />，請參閱 [清理 Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) 上和 [覆寫 Finalize 方法] (http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</para></span><span class="sxs-lookup"><span data-stu-id="31784-756"><para> <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="Disposing">
      <MemberSignature Language="C#" Value="public bool Disposing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Disposing" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Disposing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Disposing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Disposing { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Disposing : bool" Usage="System.Windows.Forms.Control.Disposing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-757">取得值，指出基底 <see cref="T:System.Windows.Forms.Control" /> 類別是否正在處置的過程中。</span><span class="sxs-lookup"><span data-stu-id="31784-757">Gets a value indicating whether the base <see cref="T:System.Windows.Forms.Control" /> class is in the process of disposing.</span></span></summary>
        <value><span data-ttu-id="31784-758">如果基底 <see cref="T:System.Windows.Forms.Control" /> 類別正在處置的過程中，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-758"><see langword="true" /> if the base <see cref="T:System.Windows.Forms.Control" /> class is in the process of disposing; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-759">當這個屬性會傳回`true`，基底<xref:System.Windows.Forms.Control>類別正在處置的過程。</span><span class="sxs-lookup"><span data-stu-id="31784-759">When this property returns `true`, the base <xref:System.Windows.Forms.Control> class is in the process of disposing.</span></span> <span data-ttu-id="31784-760">已處置此控制項之後，不再做為有效的 Windows 控制項參考它。</span><span class="sxs-lookup"><span data-stu-id="31784-760">After the control is disposed of, it can no longer be referenced as a valid Windows control.</span></span> <span data-ttu-id="31784-761">即使已經處置控制項的執行個體，它仍然會保留在記憶體中直到它從透過記憶體回收的記憶體中移除。</span><span class="sxs-lookup"><span data-stu-id="31784-761">Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection.</span></span> <span data-ttu-id="31784-762">當控制項已經處置時，無法呼叫其<xref:System.Windows.Forms.Control.RecreateHandle%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-762">When a control is disposed of, you cannot call its <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
        <altmember cref="T:System.GC" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="Dock">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DockStyle Dock { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DockStyle Dock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Dock" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Dock As DockStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::DockStyle Dock { System::Windows::Forms::DockStyle get(); void set(System::Windows::Forms::DockStyle value); };" />
      <MemberSignature Language="F#" Value="member this.Dock : System.Windows.Forms.DockStyle with get, set" Usage="System.Windows.Forms.Control.Dock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DockStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-763">取得或設定停駐在其父控制項的控制項框線，並決定控制項隨其父代重新調整大小的方式。</span><span class="sxs-lookup"><span data-stu-id="31784-763">Gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent.</span></span></summary>
        <value><span data-ttu-id="31784-764">其中一個 <see cref="T:System.Windows.Forms.DockStyle" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-764">One of the <see cref="T:System.Windows.Forms.DockStyle" /> values.</span></span> <span data-ttu-id="31784-765">預設值為 <see cref="F:System.Windows.Forms.DockStyle.None" />。</span><span class="sxs-lookup"><span data-stu-id="31784-765">The default is <see cref="F:System.Windows.Forms.DockStyle.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-766">使用<xref:System.Windows.Forms.Control.Dock%2A>屬性來定義如何調整控制項大小的自動調整其父控制項大小時。</span><span class="sxs-lookup"><span data-stu-id="31784-766">Use the <xref:System.Windows.Forms.Control.Dock%2A> property to define how a control is automatically resized as its parent control is resized.</span></span> <span data-ttu-id="31784-767">例如，設定<xref:System.Windows.Forms.Control.Dock%2A>至<xref:System.Windows.Forms.DockStyle.Left?displayProperty=nameWithType>會讓控制項與父控制項的左邊緣對齊本身，並會隨著調整父控制項調整大小。</span><span class="sxs-lookup"><span data-stu-id="31784-767">For example, setting <xref:System.Windows.Forms.Control.Dock%2A> to <xref:System.Windows.Forms.DockStyle.Left?displayProperty=nameWithType> causes the control to align itself with the left edges of its parent control and to resize as the parent control is resized.</span></span> <span data-ttu-id="31784-768">控制項停駐在其疊置順序，也就是表單的 z 軸 （深度） 沿著表單上控制項的視覺化圖層。</span><span class="sxs-lookup"><span data-stu-id="31784-768">Controls are docked in their Z-order, which is the visual layering of controls on a form along the form's Z-axis (depth).</span></span>  
  
 <span data-ttu-id="31784-769">控制項可以停駐於父容器的某一邊或可停駐的邊緣和填滿的父容器。</span><span class="sxs-lookup"><span data-stu-id="31784-769">A control can be docked to one edge of its parent container or can be docked to all edges and fill the parent container.</span></span>  
  
 <span data-ttu-id="31784-770">設定<xref:System.Windows.Forms.Control.Margin%2A>停駐控制項上有任何影響的控制項與其容器邊緣的距離。</span><span class="sxs-lookup"><span data-stu-id="31784-770">Setting the <xref:System.Windows.Forms.Control.Margin%2A> property on a docked control has no effect on the distance of the control from the edges of its container.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-771"><xref:System.Windows.Forms.Control.Anchor%2A>和<xref:System.Windows.Forms.Control.Dock%2A>屬性互斥。</span><span class="sxs-lookup"><span data-stu-id="31784-771">The <xref:System.Windows.Forms.Control.Anchor%2A> and <xref:System.Windows.Forms.Control.Dock%2A> properties are mutually exclusive.</span></span> <span data-ttu-id="31784-772">只有一個可以設定一次，最後一個設定的優先順序。</span><span class="sxs-lookup"><span data-stu-id="31784-772">Only one can be set at a time, and the last one set takes precedence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-773">下列程式碼範例會建立<xref:System.Windows.Forms.GroupBox>並設定一些常見的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-773">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="31784-774">此範例會建立<xref:System.Windows.Forms.TextBox>並設定其<xref:System.Windows.Forms.Control.Location%2A>群組方塊內。</span><span class="sxs-lookup"><span data-stu-id="31784-774">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="31784-775">接下來，設定<xref:System.Windows.Forms.Control.Text%2A>屬性群組 方塊中，群組方塊的停駐在表單頂端。</span><span class="sxs-lookup"><span data-stu-id="31784-775">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="31784-776">最後，它會停用 [群組] 方塊設定<xref:System.Windows.Forms.Control.Enabled%2A>屬性`false`，因而導致停用群組內包含的所有控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-776">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="31784-777">所指派的值不是其中一個 <see cref="T:System.Windows.Forms.DockStyle" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-777">The value assigned is not one of the <see cref="T:System.Windows.Forms.DockStyle" /> values.</span></span></exception>
        <block subset="none" type="overrides"><span data-ttu-id="31784-778"><para>在覆寫<see cref="P:System.Windows.Forms.Control.Dock" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.Dock" />屬性擴充的基底實作。否則，您必須提供所有的實作。您不需要覆寫兩個<see langword="get" />和<see langword="set" />方法<see cref="P:System.Windows.Forms.Control.Dock" />屬性; 您可以覆寫只能有一個必要。</para></span><span class="sxs-lookup"><span data-stu-id="31784-778"><para>When overriding the <see cref="P:System.Windows.Forms.Control.Dock" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Dock" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> methods of the <see cref="P:System.Windows.Forms.Control.Dock" /> property; you can override only one if needed.</para></span></span></block>
        <altmember cref="T:System.Windows.Forms.DockStyle" />
        <altmember cref="P:System.Windows.Forms.Control.Anchor" />
        <altmember cref="T:System.Windows.Forms.ScrollableControl.DockPaddingEdges" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="DockChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DockChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DockChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DockChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DockChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DockChanged;" />
      <MemberSignature Language="F#" Value="member this.DockChanged : EventHandler " Usage="member this.DockChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-779">發生於 <see cref="P:System.Windows.Forms.Control.Dock" /> 屬性的值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-779">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.Dock" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-780">如果會引發這個事件<xref:System.Windows.Forms.Control.Dock%2A>以程式設計方式修改或使用者互動變更屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-780">This event is raised if the <xref:System.Windows.Forms.Control.Dock%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-781">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-781">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-782">下列程式碼範例會為事件處理常式時執行<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-782">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-783"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式*PropertyName* `Changed`所引發的時機對應*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-783">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes(*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-784">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-784">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="31784-785">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-785">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-786">這個範例需要您有<xref:System.Windows.Forms.Form>包含<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-786">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="T:System.Windows.Forms.DockStyle" />
      </Docs>
    </Member>
    <Member MemberName="DoDragDrop">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects DoDragDrop (object data, System.Windows.Forms.DragDropEffects allowedEffects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.DragDropEffects DoDragDrop(object data, valuetype System.Windows.Forms.DragDropEffects allowedEffects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
      <MemberSignature Language="VB.NET" Value="Public Function DoDragDrop (data As Object, allowedEffects As DragDropEffects) As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DragDropEffects DoDragDrop(System::Object ^ data, System::Windows::Forms::DragDropEffects allowedEffects);" />
      <MemberSignature Language="F#" Value="member this.DoDragDrop : obj * System.Windows.Forms.DragDropEffects -&gt; System.Windows.Forms.DragDropEffects" Usage="control.DoDragDrop (data, allowedEffects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="allowedEffects" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="31784-787">要拖曳的資料。</span><span class="sxs-lookup"><span data-stu-id="31784-787">The data to drag.</span></span></param>
        <param name="allowedEffects"><span data-ttu-id="31784-788">其中一個 <see cref="T:System.Windows.Forms.DragDropEffects" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-788">One of the <see cref="T:System.Windows.Forms.DragDropEffects" /> values.</span></span></param>
        <summary><span data-ttu-id="31784-789">開始拖放作業。</span><span class="sxs-lookup"><span data-stu-id="31784-789">Begins a drag-and-drop operation.</span></span></summary>
        <returns><span data-ttu-id="31784-790">源自 <see cref="T:System.Windows.Forms.DragDropEffects" /> 列舉的值，表示在拖放作業時執行最後的結果。</span><span class="sxs-lookup"><span data-stu-id="31784-790">A value from the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration that represents the final effect that was performed during the drag-and-drop operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-791">`allowedEffects`參數會決定哪些作業可以發生的拖曳。</span><span class="sxs-lookup"><span data-stu-id="31784-791">The `allowedEffects` parameter determines which drag operations can occur.</span></span> <span data-ttu-id="31784-792">在拖曳作業需要與另一個處理序中的應用程式交互操作，如果資料應是基底的 managed 的類別 (<xref:System.String>， <xref:System.Drawing.Bitmap>，或<xref:System.Drawing.Imaging.Metafile>)，或該物件會實作<xref:System.Runtime.Serialization.ISerializable>或<xref:System.Windows.Forms.IDataObject>。</span><span class="sxs-lookup"><span data-stu-id="31784-792">If the drag operation needs to interoperate with applications in another process, data should either be a base managed class (<xref:System.String>, <xref:System.Drawing.Bitmap>, or <xref:System.Drawing.Imaging.Metafile>), or an object that implements <xref:System.Runtime.Serialization.ISerializable> or <xref:System.Windows.Forms.IDataObject>.</span></span>  
  
 <span data-ttu-id="31784-793">以下描述與拖放作業相關的事件，其引發的方法與時機。</span><span class="sxs-lookup"><span data-stu-id="31784-793">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="31784-794"><xref:System.Windows.Forms.Control.DoDragDrop%2A>方法會判斷目前的游標位置下的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-794">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="31784-795">接著會檢查此控制項是否為有效的置放目標。</span><span class="sxs-lookup"><span data-stu-id="31784-795">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="31784-796">如果控制項為有效的置放目標，<xref:System.Windows.Forms.Control.GiveFeedback>指定的拖放效果引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-796">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="31784-797">如需拖放效果的清單，請參閱 <xref:System.Windows.Forms.DragDropEffects> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="31784-797">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="31784-798">系統會追蹤滑鼠游標位置、鍵盤狀態和滑鼠按鈕狀態的變更。</span><span class="sxs-lookup"><span data-stu-id="31784-798">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="31784-799">如果使用者移出視窗外，便會引發 <xref:System.Windows.Forms.Control.DragLeave> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-799">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="31784-800">如果滑鼠進入另一個控制項，便會引發該控制項的 <xref:System.Windows.Forms.Control.DragEnter> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-800">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="31784-801">如果滑鼠移動，但是待在相同的控制項內，便會引發 <xref:System.Windows.Forms.Control.DragOver> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-801">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="31784-802">如果沒有鍵盤或滑鼠按鈕狀態變更<xref:System.Windows.Forms.Control.QueryContinueDrag>引發事件，並決定是否要繼續拖曳、 置放資料，或取消作業的值<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>的事件屬性<xref:System.Windows.Forms.QueryContinueDragEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="31784-802">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="31784-803">如果值<xref:System.Windows.Forms.DragAction>是`Continue`、<xref:System.Windows.Forms.Control.DragOver>就會引發事件，以繼續作業而<xref:System.Windows.Forms.Control.GiveFeedback>具有新效果就會引發事件，以便設定適當的視覺化回應。</span><span class="sxs-lookup"><span data-stu-id="31784-803">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="31784-804">如需有效置放效果的清單，請參閱 <xref:System.Windows.Forms.DragDropEffects> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="31784-804">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="31784-805"><xref:System.Windows.Forms.Control.DragOver>和<xref:System.Windows.Forms.Control.GiveFeedback>事件會經過配對，如此在滑鼠移動經過置放目標，不提供使用者最新的回應滑鼠的位置上。</span><span class="sxs-lookup"><span data-stu-id="31784-805">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="31784-806">如果值<xref:System.Windows.Forms.DragAction>是`Drop`，置放效果值會傳回來源，如此來源應用程式可以執行適當作業資料來源; 例如，如果剪下資料作業是移動。</span><span class="sxs-lookup"><span data-stu-id="31784-806">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="31784-807">如果值<xref:System.Windows.Forms.DragAction>是`Cancel`、<xref:System.Windows.Forms.Control.DragLeave>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-807">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-808"><xref:System.Windows.Forms.Control.DoDragDrop%2A>方法會攔截所有例外狀況，並重新擲回，只有下列安全性或重大例外狀況：</span><span class="sxs-lookup"><span data-stu-id="31784-808">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method catches all exceptions and rethrows only the following security or critical exceptions:</span></span>  
  
-   <span data-ttu-id="31784-809">SecurityException</span><span class="sxs-lookup"><span data-stu-id="31784-809">SecurityException</span></span>  
  
-   <span data-ttu-id="31784-810">NullReferenceException</span><span class="sxs-lookup"><span data-stu-id="31784-810">NullReferenceException</span></span>  
  
-   <span data-ttu-id="31784-811">StackOverflowException</span><span class="sxs-lookup"><span data-stu-id="31784-811">StackOverflowException</span></span>  
  
-   <span data-ttu-id="31784-812">OutOfMemoryException</span><span class="sxs-lookup"><span data-stu-id="31784-812">OutOfMemoryException</span></span>  
  
-   <span data-ttu-id="31784-813">ThreadAbortException</span><span class="sxs-lookup"><span data-stu-id="31784-813">ThreadAbortException</span></span>  
  
-   <span data-ttu-id="31784-814">ExecutionEngineException</span><span class="sxs-lookup"><span data-stu-id="31784-814">ExecutionEngineException</span></span>  
  
-   <span data-ttu-id="31784-815">IndexOutOfRangeException</span><span class="sxs-lookup"><span data-stu-id="31784-815">IndexOutOfRangeException</span></span>  
  
-   <span data-ttu-id="31784-816">AccessViolationException</span><span class="sxs-lookup"><span data-stu-id="31784-816">AccessViolationException</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-817">下列程式碼範例示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-817">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="31784-818">範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>時拖曳動作開始的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-818">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="31784-819">如果已移動滑鼠拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-819">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="31784-820"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來決定要在拖曳的項目索引`MouseDown`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-820">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="31784-821">此範例也示範如何使用自訂游標拖放作業。</span><span class="sxs-lookup"><span data-stu-id="31784-821">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="31784-822">這個範例需要有兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`、 自訂拖放到的應用程式目錄，存在於和不置放資料指標，分別。</span><span class="sxs-lookup"><span data-stu-id="31784-822">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="31784-823">如果使用自訂游標`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。</span><span class="sxs-lookup"><span data-stu-id="31784-823">The custom cursors will be used if the `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="31784-824">自訂的資料指標中所設定<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-824">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="31784-825">鍵盤的狀態會在評估<xref:System.Windows.Forms.Control.DragOver>右邊的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵的狀態。</span><span class="sxs-lookup"><span data-stu-id="31784-825">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="31784-826">中的位置`ListBox`期間也決定會卸除`DragOver`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-826">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="31784-827">如果要卸除的資料不是`String`，然後在<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設`None`中<xref:System.Windows.Forms.DragDropEffects>。</span><span class="sxs-lookup"><span data-stu-id="31784-827">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="31784-828">最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。</span><span class="sxs-lookup"><span data-stu-id="31784-828">Finally, the status of the drop is displayed in the `DropLocationLabel` <xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="31784-829">若要提供的權限卸除資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`中適當的位置加入值`ListBox`。</span><span class="sxs-lookup"><span data-stu-id="31784-829">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="31784-830">如果在拖曳作業移動超出界限的表單，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-830">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#1)]  
  
 <span data-ttu-id="31784-831">下列程式碼範例示範如何使用<xref:System.Windows.Forms.DragDropEffects>列舉來指定如何在拖放作業中所含的控制項之間傳輸資料。</span><span class="sxs-lookup"><span data-stu-id="31784-831">The following code example shows how to use the <xref:System.Windows.Forms.DragDropEffects> enumeration to specify how data should be transferred between the controls involved in a drag-and-drop operation.</span></span> <span data-ttu-id="31784-832">這個範例需要您的表單包括<xref:System.Windows.Forms.RichTextBox>控制項和<xref:System.Windows.Forms.ListBox>控制項，<xref:System.Windows.Forms.ListBox>控制項填入有效的檔案名稱的清單。</span><span class="sxs-lookup"><span data-stu-id="31784-832">This example requires that your form includes a <xref:System.Windows.Forms.RichTextBox> control and a <xref:System.Windows.Forms.ListBox> control and that the <xref:System.Windows.Forms.ListBox> control is populated with a list of valid file names.</span></span> <span data-ttu-id="31784-833">當使用者拖曳到的檔案名稱<xref:System.Windows.Forms.RichTextBox>控制項，控制項的<xref:System.Windows.Forms.Control.DragEnter>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-833">When the user drags a file name onto the <xref:System.Windows.Forms.RichTextBox> control, the control's <xref:System.Windows.Forms.Control.DragEnter> event is raised.</span></span> <span data-ttu-id="31784-834">事件處理常式內<xref:System.Windows.Forms.DragEventArgs.Effect%2A>屬性<xref:System.Windows.Forms.DragEventArgs>會初始化為<xref:System.Windows.Forms.DragDropEffects>表示的檔案路徑所參照的資料應該複製到<xref:System.Windows.Forms.RichTextBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-834">Within the event handler, the <xref:System.Windows.Forms.DragEventArgs.Effect%2A> property of the <xref:System.Windows.Forms.DragEventArgs> is initialized to <xref:System.Windows.Forms.DragDropEffects> to indicate that the data referenced by the file path should be copied to the <xref:System.Windows.Forms.RichTextBox> control.</span></span>  
  
 [!code-cpp[RichTextDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextDragDrop/CS/form1.cs#1)]
 [!code-vb[RichTextDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextDragDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AllowDrop" />
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected virtual bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DoubleBuffered" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property DoubleBuffered As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool DoubleBuffered { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoubleBuffered : bool with get, set" Usage="System.Windows.Forms.Control.DoubleBuffered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-835">取得或設定值，指出這個控制項是否應使用次要緩衝區重繪其介面，以減少或防止重繪閃動 (Flicker)。</span><span class="sxs-lookup"><span data-stu-id="31784-835">Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker.</span></span></summary>
        <value><span data-ttu-id="31784-836">如果應該使用雙重緩衝繪製控制項的介面，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-836"><see langword="true" /> if the surface of the control should be drawn using double buffering; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-837">已緩衝的圖形可以減少或消除閃爍漸進顯示介面的組件的重繪作業所造成。</span><span class="sxs-lookup"><span data-stu-id="31784-837">Buffered graphics can reduce or eliminate flicker that is caused by progressive redrawing of parts of a displayed surface.</span></span> <span data-ttu-id="31784-838">已緩衝的圖形需要更新的圖形資料第一次寫入的緩衝區。</span><span class="sxs-lookup"><span data-stu-id="31784-838">Buffered graphics require that the updated graphics data is first written to a buffer.</span></span> <span data-ttu-id="31784-839">圖形緩衝區中的資料會快速地寫入至顯示介面的記憶體。</span><span class="sxs-lookup"><span data-stu-id="31784-839">The data in the graphics buffer is then quickly written to displayed surface memory.</span></span> <span data-ttu-id="31784-840">顯示的圖形記憶體的快速切換通常會減少可以發生的重繪。</span><span class="sxs-lookup"><span data-stu-id="31784-840">The relatively quick switch of the displayed graphics memory typically reduces the flicker that can otherwise occur.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-841"><xref:System.Windows.Forms.Control.DoubleBuffered%2A> 不是可繫結的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-841"><xref:System.Windows.Forms.Control.DoubleBuffered%2A> is not a bindable property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.BufferedGraphicsContext" />
        <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event EventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoubleClick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DoubleClick;" />
      <MemberSignature Language="F#" Value="member this.DoubleClick : EventHandler " Usage="member this.DoubleClick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-842">發生於按兩下控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-842">Occurs when the control is double-clicked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-843">按兩下是由使用者的作業系統的滑鼠設定決定。</span><span class="sxs-lookup"><span data-stu-id="31784-843">A double-click is determined by the mouse settings of the user's operating system.</span></span> <span data-ttu-id="31784-844">使用者可以設定滑鼠按鍵的按一下之間應間隔多少時間才視為按兩下，而不是兩次按一下。</span><span class="sxs-lookup"><span data-stu-id="31784-844">The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.</span></span> <span data-ttu-id="31784-845"><xref:System.Windows.Forms.Control.Click>每次按兩下控制項時，就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-845">The <xref:System.Windows.Forms.Control.Click> event is raised every time a control is double-clicked.</span></span> <span data-ttu-id="31784-846">比方說，如果您有事件處理常式<xref:System.Windows.Forms.Control.Click>和<xref:System.Windows.Forms.Control.DoubleClick>事件<xref:System.Windows.Forms.Form>、<xref:System.Windows.Forms.Control.Click>和<xref:System.Windows.Forms.Control.DoubleClick>按兩下表單時，會呼叫這兩種方法時，會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-846">For example, if you have event handlers for the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events of a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events are raised when the form is double-clicked and both methods are called.</span></span> <span data-ttu-id="31784-847">如果按兩下控制項時，以及控制項不支援<xref:System.Windows.Forms.Control.DoubleClick>事件，<xref:System.Windows.Forms.Control.Click>事件可能會引發兩次。</span><span class="sxs-lookup"><span data-stu-id="31784-847">If a control is double-clicked and that control does not support the <xref:System.Windows.Forms.Control.DoubleClick> event, the <xref:System.Windows.Forms.Control.Click> event might be raised twice.</span></span>  
  
 <span data-ttu-id="31784-848">您必須設定`StandardDoubleClick`和`StandardClick`值<xref:System.Windows.Forms.ControlStyles>至`true`會引發這個事件。</span><span class="sxs-lookup"><span data-stu-id="31784-848">You must set the `StandardDoubleClick` and `StandardClick` values of <xref:System.Windows.Forms.ControlStyles> to `true` for this event to be raised.</span></span> <span data-ttu-id="31784-849">這些值可能會設定為`true`如果您繼承自現有的 Windows Form 控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-849">These values might already be set to `true` if you are inheriting from existing Windows Forms controls.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-850">無法針對引發下列事件<xref:System.Windows.Forms.TabControl>類別除非至少一個<xref:System.Windows.Forms.TabPage>中<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>集合： <xref:System.Windows.Forms.Control.Click>， <xref:System.Windows.Forms.Control.DoubleClick>， <xref:System.Windows.Forms.Control.MouseDown>， <xref:System.Windows.Forms.Control.MouseUp>， <xref:System.Windows.Forms.Control.MouseHover>， <xref:System.Windows.Forms.Control.MouseEnter>，<xref:System.Windows.Forms.Control.MouseLeave>和<xref:System.Windows.Forms.Control.MouseMove>。</span><span class="sxs-lookup"><span data-stu-id="31784-850">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="31784-851">如果沒有至少一個<xref:System.Windows.Forms.TabPage>在集合中，與使用者互動具有索引標籤控制項的標頭 (其中<xref:System.Windows.Forms.TabPage>名稱會出現)，則<xref:System.Windows.Forms.TabControl>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-851">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="31784-852">不過，如果使用者互動是索引標籤頁面上，工作區內<xref:System.Windows.Forms.TabPage>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-852">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="31784-853">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-853">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-854">下列程式碼範例使用<xref:System.Windows.Forms.Control.DoubleClick>事件<xref:System.Windows.Forms.ListBox>來載入文字檔案中所列<xref:System.Windows.Forms.ListBox>到<xref:System.Windows.Forms.TextBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-854">The following code example uses the <xref:System.Windows.Forms.Control.DoubleClick> event of a <xref:System.Windows.Forms.ListBox> to load text files listed in the <xref:System.Windows.Forms.ListBox> into a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 [!code-cpp[Control.DoubleClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.DoubleClick/CPP/form1.cpp#1)]
 [!code-csharp[Control.DoubleClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.DoubleClick/CS/form1.cs#1)]
 [!code-vb[Control.DoubleClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.DoubleClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-855"><para>繼承自標準的 Windows Form 控制項，並變更<see langword="StandardClick" />或<see langword="StandardDoubleClick" />值<see cref="T:System.Windows.Forms.ControlStyles" />至<see langword="true" />可以造成未預期的行為，或完全沒有任何作用，如果控制項不支援<see cref="E:System.Windows.Forms.Control.Click" />或<see cref="E:System.Windows.Forms.Control.DoubleClick" />事件。下表列出 Windows Form 控制項和事件 (<see cref="E:System.Windows.Forms.Control.Click" />或<see cref="E:System.Windows.Forms.Control.DoubleClick" />) 會引發以回應指定的滑鼠動作。<list type="table"><listheader><term> 控制</term><description>剩餘滑鼠點按</description><description>按兩下滑鼠左鍵</description><description>按一下滑鼠右鍵</description><description>按兩下滑鼠右鍵</description> <description>中間滑鼠點按</description><description>按兩下滑鼠中間鍵</description><description>按一下滑鼠的 XButton1 </description> <description>按兩下滑鼠的 XButton1 </description> <description> XButton2滑鼠按一下</description> <description> XButton2 滑鼠按兩下</description> </listheader> <item> <term> <see cref="T:System.Windows.Forms.MonthCalendar" />， <see cref="T:System.Windows.Forms.DateTimePicker" />， <see cref="T:System.Windows.Forms.RichTextBox" />， <see cref="T:System.Windows.Forms.HScrollBar" />， <see cref="T:System.Windows.Forms.VScrollBar" /> </term> <description>無</description><description>無</description><description>無</description><description>無</description><description>無</description> <description>無</description><description>無</description><description>無</description><description>無</description><description>無</description> </item> <item> <term><see cref="T:System.Windows.Forms.Button" />， <see cref="T:System.Windows.Forms.CheckBox" />， <see cref="T:System.Windows.Forms.RadioButton" /> </term> <description>按一下</description><description>按一下，按一下</description><description>無</description><description>無</description><description>無</description><description>無</description><description>無</description><description>無</description><description>無</description><description>無</description> </item> <item> <term> <see cref="T:System.Windows.Forms.ListBox" />， <see cref="T:System.Windows.Forms.CheckedListBox" />， <see cref="T:System.Windows.Forms.ComboBox" /> </term><description>按一下</description><description>按一下，DoubleClick </description> <description>無</description><description>無</description><description>無 </description> <description>無</description><description>無</description><description>無</description><description>無</description><description>無 </description> </item> <item> <term> <see cref="T:System.Windows.Forms.TextBox" />， <see cref="T:System.Windows.Forms.DomainUpDown" />， <see cref="T:System.Windows.Forms.NumericUpDown" /> </term> <description>按一下</description> <description> 按一下 DoubleClick </description> <description>無</description><description>無</description>&lt;s&gt;&lt;/s&gt;</para></span><span class="sxs-lookup"><span data-stu-id="31784-855"><para>Inheriting from a standard Windows Forms control and changing the <see langword="StandardClick" /> or <see langword="StandardDoubleClick" /> values of <see cref="T:System.Windows.Forms.ControlStyles" /> to <see langword="true" /> can cause unexpected behavior or have no effect at all if the control does not support the <see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" /> events.  The following table lists Windows Forms controls and which event (<see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" />) is raised in response to the mouse action specified.  <list type="table"><listheader><term> Control  </term><description> Left Mouse Click  </description><description> Left Mouse Double Click  </description><description> Right Mouse Click  </description><description> Right Mouse Double Click  </description><description> Middle Mouse Click  </description><description> Middle Mouse Double Click  </description><description> XButton1 Mouse Click  </description><description> XButton1 Mouse Double-Click  </description><description> XButton2 Mouse Click  </description><description> XButton2 Mouse Double-Click  </description></listheader><item><term><see cref="T:System.Windows.Forms.MonthCalendar" />,  <see cref="T:System.Windows.Forms.DateTimePicker" />,  <see cref="T:System.Windows.Forms.RichTextBox" />,  <see cref="T:System.Windows.Forms.HScrollBar" />,  <see cref="T:System.Windows.Forms.VScrollBar" /></term><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description></item><item><term><see cref="T:System.Windows.Forms.Button" />,  <see cref="T:System.Windows.Forms.CheckBox" />,  <see cref="T:System.Windows.Forms.RadioButton" /></term><description> Click  </description><description> Click, Click  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description></item><item><term><see cref="T:System.Windows.Forms.ListBox" />,  <see cref="T:System.Windows.Forms.CheckedListBox" />,  <see cref="T:System.Windows.Forms.ComboBox" /></term><description> Click  </description><description> Click, DoubleClick  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description></item><item><term><see cref="T:System.Windows.Forms.TextBox" />,  <see cref="T:System.Windows.Forms.DomainUpDown" />,  <see cref="T:System.Windows.Forms.NumericUpDown" /></term><description> Click  </description><description> Click, DoubleClick  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description></item><item><term> \* <see cref="T:System.Windows.Forms.TreeView" />,  \* <see cref="T:System.Windows.Forms.ListView" /></term><description> Click  </description><description> Click, DoubleClick  </description><description> Click  </description><description> Click, DoubleClick  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description><description> none  </description></item><item><term><see cref="T:System.Windows.Forms.ProgressBar" />,  <see cref="T:System.Windows.Forms.TrackBar" /></term><description> Click  </description><description> Click, Click  </description><description> Click  </description><description> Click, Click  </description><description> Click  </description><description> Click, Click  </description><description> Click  </description><description> Click, Click  </description><description> Click  </description><description> Click, Click  </description></item><item><term><see cref="T:System.Windows.Forms.Form" />,  <see cref="T:System.Windows.Forms.DataGrid" />,  <see cref="T:System.Windows.Forms.Label" />,  <see cref="T:System.Windows.Forms.LinkLabel" />,  <see cref="T:System.Windows.Forms.Panel" />,  <see cref="T:System.Windows.Forms.GroupBox" />,  <see cref="T:System.Windows.Forms.PictureBox" />,  <see cref="T:System.Windows.Forms.Splitter" />,  <see cref="T:System.Windows.Forms.StatusBar" />,  <see cref="T:System.Windows.Forms.ToolBar" />,  <see cref="T:System.Windows.Forms.TabPage" />,  \*\* <see cref="T:System.Windows.Forms.TabControl" /></term><description> Click  </description><description> Click, DoubleClick  </description><description> Click  </description><description> Click, DoubleClick  </description><description> Click  </description><description> Click, DoubleClick  </description><description> Click  </description><description> Click, DoubleClick  </description><description> Click  </description><description> Click, DoubleClick  </description></item></list>  \* The mouse pointer must be over a child object (<see cref="T:System.Windows.Forms.TreeNode" /> or <see cref="T:System.Windows.Forms.ListViewItem" />).  \*\* The <see cref="T:System.Windows.Forms.TabControl" /> must have at least one <see cref="T:System.Windows.Forms.TabPage" /> in its <see cref="P:System.Windows.Forms.TabControl.TabPages" /> collection.</para></span></span></block>
        <altmember cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardClick" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardDoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="DpiChangedAfterParent">
      <MemberSignature Language="C#" Value="public event EventHandler DpiChangedAfterParent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DpiChangedAfterParent" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DpiChangedAfterParent" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChangedAfterParent As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DpiChangedAfterParent;" />
      <MemberSignature Language="F#" Value="member this.DpiChangedAfterParent : EventHandler " Usage="member this.DpiChangedAfterParent : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-856">發生於某個控制項的父控制項或表單已變更之後，以程式設計方式變更其 DPI 設定時。</span><span class="sxs-lookup"><span data-stu-id="31784-856">Occurs when the DPI setting for a control is changed programmatically after the DPI of it's parent control or form has changed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiChangedBeforeParent">
      <MemberSignature Language="C#" Value="public event EventHandler DpiChangedBeforeParent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DpiChangedBeforeParent" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DpiChangedBeforeParent" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChangedBeforeParent As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DpiChangedBeforeParent;" />
      <MemberSignature Language="F#" Value="member this.DpiChangedBeforeParent : EventHandler " Usage="member this.DpiChangedBeforeParent : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-857">發生於某個控制項的父控制項或表單發生 DPI 變更事件之前，以程式設計方式變更其 DPI 設定時。</span><span class="sxs-lookup"><span data-stu-id="31784-857">Occurs when the DPI setting for a control is changed programmatically before a DPI change event for it's parent control or form has occurred.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragDrop;" />
      <MemberSignature Language="F#" Value="member this.DragDrop : System.Windows.Forms.DragEventHandler " Usage="member this.DragDrop : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-858">發生於拖放作業完成時。</span><span class="sxs-lookup"><span data-stu-id="31784-858">Occurs when a drag-and-drop operation is completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-859"><xref:System.Windows.Forms.DragEventArgs.X%2A>和<xref:System.Windows.Forms.DragEventArgs.Y%2A>屬性<xref:System.Windows.Forms.DragEventArgs>會在螢幕座標中，工作區座標。</span><span class="sxs-lookup"><span data-stu-id="31784-859">The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates.</span></span> <span data-ttu-id="31784-860">下列 Visual C# 程式碼行將屬性轉換為用戶端<xref:System.Drawing.Point>。</span><span class="sxs-lookup"><span data-stu-id="31784-860">The following line of Visual C# code converts the properties to a client <xref:System.Drawing.Point>.</span></span>  
  
```  
Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));  
```  
  
> [!NOTE]
>  <span data-ttu-id="31784-861">在版本早於[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]，如果您將<xref:System.Windows.Forms.UserControl>與<xref:System.Windows.Forms.Control.DragEnter>和<xref:System.Windows.Forms.Control.DragDrop>事件在 Windows Form 上的拖曳和卸除項目拖曳至<xref:System.Windows.Forms.UserControl>在設計階段，`DropDrop`和`DropEnter`事件引發。</span><span class="sxs-lookup"><span data-stu-id="31784-861">In versions earlier than [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], if you put a <xref:System.Windows.Forms.UserControl> with <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events on a Windows Form and drag and drop something onto the <xref:System.Windows.Forms.UserControl> at design time, the `DropDrop` and `DropEnter` events are raised.</span></span> <span data-ttu-id="31784-862">不過，當您關閉並重新開啟方案，<xref:System.Windows.Forms.Control.DragEnter>和<xref:System.Windows.Forms.Control.DragDrop>不會再次引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-862">However, when you close and reopen the solution, the <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events are not raised again.</span></span>  
  
 <span data-ttu-id="31784-863">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-863">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-864">此程式碼摘錄示範如何使用<xref:System.Windows.Forms.Control.DragDrop>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-864">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragDrop> event.</span></span> <span data-ttu-id="31784-865">請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整程式碼範例的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-865">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
        <altmember cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
        <altmember cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.Forms.DragEventHandler " Usage="member this.DragEnter : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-866">發生於將物件拖曳至控制項邊框時。</span><span class="sxs-lookup"><span data-stu-id="31784-866">Occurs when an object is dragged into the control's bounds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-867"><xref:System.Windows.Forms.Control.DragEnter>當使用者第一次拖曳滑鼠游標移至控制項拖放作業期間，系統就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-867">The <xref:System.Windows.Forms.Control.DragEnter> event is raised when the user first drags the mouse cursor over the control during a drag-and-drop operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-868">在版本早於[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]，如果您將<xref:System.Windows.Forms.UserControl>與<xref:System.Windows.Forms.Control.DragEnter>和<xref:System.Windows.Forms.Control.DragDrop>事件在 Windows Form 上的拖曳和卸除項目拖曳至<xref:System.Windows.Forms.UserControl>在設計階段，`DropDrop`和`DropEnter`事件引發。</span><span class="sxs-lookup"><span data-stu-id="31784-868">In versions earlier than [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], if you put a <xref:System.Windows.Forms.UserControl> with <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events on a Windows Form and drag and drop something onto the <xref:System.Windows.Forms.UserControl> at design time, the `DropDrop` and `DropEnter` events are raised.</span></span> <span data-ttu-id="31784-869">不過，當您關閉並重新開啟方案，<xref:System.Windows.Forms.Control.DragEnter>和<xref:System.Windows.Forms.Control.DragDrop>不會再次引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-869">However, when you close and reopen the solution, the <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events are not raised again.</span></span>  
  
 <span data-ttu-id="31784-870">以下描述與拖放作業相關的事件，其引發的方法與時機。</span><span class="sxs-lookup"><span data-stu-id="31784-870">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="31784-871"><xref:System.Windows.Forms.Control.DoDragDrop%2A>方法會判斷目前的游標位置下的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-871">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="31784-872">接著會檢查此控制項是否為有效的置放目標。</span><span class="sxs-lookup"><span data-stu-id="31784-872">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="31784-873">如果控制項為有效的置放目標，<xref:System.Windows.Forms.Control.GiveFeedback>指定的拖放效果引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-873">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="31784-874">如需拖放效果的清單，請參閱 <xref:System.Windows.Forms.DragDropEffects> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="31784-874">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="31784-875">系統會追蹤滑鼠游標位置、鍵盤狀態和滑鼠按鈕狀態的變更。</span><span class="sxs-lookup"><span data-stu-id="31784-875">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="31784-876">如果使用者移出視窗外，便會引發 <xref:System.Windows.Forms.Control.DragLeave> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-876">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="31784-877">如果滑鼠進入另一個控制項，便會引發該控制項的 <xref:System.Windows.Forms.Control.DragEnter> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-877">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="31784-878">如果滑鼠移動，但是待在相同的控制項內，便會引發 <xref:System.Windows.Forms.Control.DragOver> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-878">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="31784-879">如果沒有鍵盤或滑鼠按鈕狀態變更<xref:System.Windows.Forms.Control.QueryContinueDrag>引發事件，並決定是否要繼續拖曳、 置放資料，或取消作業的值<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>的事件屬性<xref:System.Windows.Forms.QueryContinueDragEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="31784-879">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="31784-880">如果值<xref:System.Windows.Forms.DragAction>是`Continue`、<xref:System.Windows.Forms.Control.DragOver>就會引發事件，以繼續作業而<xref:System.Windows.Forms.Control.GiveFeedback>具有新效果就會引發事件，以便設定適當的視覺化回應。</span><span class="sxs-lookup"><span data-stu-id="31784-880">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="31784-881">如需有效置放效果的清單，請參閱 <xref:System.Windows.Forms.DragDropEffects> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="31784-881">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="31784-882"><xref:System.Windows.Forms.Control.DragOver>和<xref:System.Windows.Forms.Control.GiveFeedback>事件會經過配對，如此在滑鼠移動經過置放目標，不提供使用者最新的回應滑鼠的位置上。</span><span class="sxs-lookup"><span data-stu-id="31784-882">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="31784-883">如果值<xref:System.Windows.Forms.DragAction>是`Drop`，置放效果值會傳回來源，如此來源應用程式可以執行適當作業資料來源; 例如，如果剪下資料作業是移動。</span><span class="sxs-lookup"><span data-stu-id="31784-883">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="31784-884">如果值<xref:System.Windows.Forms.DragAction>是`Cancel`、<xref:System.Windows.Forms.Control.DragLeave>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-884">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="31784-885"><xref:System.Windows.Forms.DragEventArgs.X%2A>和<xref:System.Windows.Forms.DragEventArgs.Y%2A>屬性<xref:System.Windows.Forms.DragEventArgs>會在螢幕座標中，工作區座標。</span><span class="sxs-lookup"><span data-stu-id="31784-885">The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates.</span></span> <span data-ttu-id="31784-886">下列 Visual C# 程式碼行將屬性轉換為用戶端<xref:System.Drawing.Point>。</span><span class="sxs-lookup"><span data-stu-id="31784-886">The following line of Visual C# code converts the properties to a client <xref:System.Drawing.Point>.</span></span>  
  
    ```  
    Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));  
    ```  
  
 <span data-ttu-id="31784-887">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-887">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-888">下列程式碼範例示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-888">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="31784-889">範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>時拖曳動作開始的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-889">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="31784-890">如果已移動滑鼠拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-890">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="31784-891"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來決定要在拖曳的項目索引`MouseDown`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-891">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="31784-892">此範例也示範如何使用自訂游標拖放作業。</span><span class="sxs-lookup"><span data-stu-id="31784-892">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="31784-893">這個範例需要有兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`、 自訂拖放到的應用程式目錄，存在於和不置放資料指標，分別。</span><span class="sxs-lookup"><span data-stu-id="31784-893">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="31784-894">如果使用自訂游標`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。</span><span class="sxs-lookup"><span data-stu-id="31784-894">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="31784-895">自訂的資料指標中所設定<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-895">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="31784-896">鍵盤的狀態會在評估<xref:System.Windows.Forms.Control.DragOver>右邊的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵的狀態。</span><span class="sxs-lookup"><span data-stu-id="31784-896">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="31784-897">中的位置`ListBox`期間也決定會卸除`DragOver`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-897">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="31784-898">如果要卸除的資料不是`String`，然後在<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設`None`中<xref:System.Windows.Forms.DragDropEffects>。</span><span class="sxs-lookup"><span data-stu-id="31784-898">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="31784-899">最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。</span><span class="sxs-lookup"><span data-stu-id="31784-899">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="31784-900">若要提供的權限卸除資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`中適當的位置加入值`ListBox`。</span><span class="sxs-lookup"><span data-stu-id="31784-900">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="31784-901">如果在拖曳作業移動超出界限的表單，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-901">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="31784-902">此程式碼摘錄示範如何使用<xref:System.Windows.Forms.Control.DragEnter>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-902">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragEnter> event.</span></span> <span data-ttu-id="31784-903">請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整程式碼範例的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-903">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#7)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event EventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : EventHandler " Usage="member this.DragLeave : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-904">發生於將物件拖出控制項界限時。</span><span class="sxs-lookup"><span data-stu-id="31784-904">Occurs when an object is dragged out of the control's bounds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-905"><xref:System.Windows.Forms.Control.DragLeave>使用者拖曳出控制項的資料指標，或使用者取消目前的拖放作業時，會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-905">The <xref:System.Windows.Forms.Control.DragLeave> event is raised when the user drags the cursor out of the control or the user cancels the current drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="31784-906">以下描述與拖放作業相關的事件，其引發的方法與時機。</span><span class="sxs-lookup"><span data-stu-id="31784-906">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="31784-907"><xref:System.Windows.Forms.Control.DoDragDrop%2A>方法會判斷目前的游標位置下的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-907">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="31784-908">接著會檢查此控制項是否為有效的置放目標。</span><span class="sxs-lookup"><span data-stu-id="31784-908">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="31784-909">如果控制項為有效的置放目標，<xref:System.Windows.Forms.Control.GiveFeedback>指定的拖放效果引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-909">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="31784-910">如需拖放效果的清單，請參閱 <xref:System.Windows.Forms.DragDropEffects> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="31784-910">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="31784-911">系統會追蹤滑鼠游標位置、鍵盤狀態和滑鼠按鈕狀態的變更。</span><span class="sxs-lookup"><span data-stu-id="31784-911">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="31784-912">如果使用者移出視窗外，便會引發 <xref:System.Windows.Forms.Control.DragLeave> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-912">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="31784-913">如果滑鼠進入另一個控制項，便會引發該控制項的 <xref:System.Windows.Forms.Control.DragEnter> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-913">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="31784-914">如果滑鼠移動，但是待在相同的控制項內，便會引發 <xref:System.Windows.Forms.Control.DragOver> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-914">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="31784-915">如果沒有鍵盤或滑鼠按鈕狀態變更<xref:System.Windows.Forms.Control.QueryContinueDrag>引發事件，並決定是否要繼續拖曳、 置放資料，或取消作業的值<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>的事件屬性<xref:System.Windows.Forms.QueryContinueDragEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="31784-915">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="31784-916">如果值<xref:System.Windows.Forms.DragAction>是`Continue`、<xref:System.Windows.Forms.Control.DragOver>就會引發事件，以繼續作業而<xref:System.Windows.Forms.Control.GiveFeedback>具有新效果就會引發事件，以便設定適當的視覺化回應。</span><span class="sxs-lookup"><span data-stu-id="31784-916">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="31784-917">如需有效置放效果的清單，請參閱 <xref:System.Windows.Forms.DragDropEffects> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="31784-917">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="31784-918"><xref:System.Windows.Forms.Control.DragOver>和<xref:System.Windows.Forms.Control.GiveFeedback>事件會經過配對，如此在滑鼠移動經過置放目標，不提供使用者最新的回應滑鼠的位置上。</span><span class="sxs-lookup"><span data-stu-id="31784-918">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="31784-919">如果值<xref:System.Windows.Forms.DragAction>是`Drop`，置放效果值會傳回來源，如此來源應用程式可以執行適當作業資料來源; 例如，如果剪下資料作業是移動。</span><span class="sxs-lookup"><span data-stu-id="31784-919">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="31784-920">如果值<xref:System.Windows.Forms.DragAction>是`Cancel`、<xref:System.Windows.Forms.Control.DragLeave>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-920">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
 <span data-ttu-id="31784-921">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-921">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-922">下列程式碼範例示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-922">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="31784-923">範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>時拖曳動作開始的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-923">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="31784-924">如果已移動滑鼠拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-924">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="31784-925"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來決定要在拖曳的項目索引`MouseDown`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-925">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="31784-926">此範例也示範如何使用自訂游標拖放作業。</span><span class="sxs-lookup"><span data-stu-id="31784-926">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="31784-927">這個範例需要有兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`、 自訂拖放到的應用程式目錄，存在於和不置放資料指標，分別。</span><span class="sxs-lookup"><span data-stu-id="31784-927">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="31784-928">如果使用自訂游標`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。</span><span class="sxs-lookup"><span data-stu-id="31784-928">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="31784-929">自訂的資料指標中所設定<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-929">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="31784-930">鍵盤的狀態會在評估<xref:System.Windows.Forms.Control.DragOver>右邊的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵的狀態。</span><span class="sxs-lookup"><span data-stu-id="31784-930">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="31784-931">中的位置`ListBox`期間也決定會卸除`DragOver`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-931">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="31784-932">如果要卸除的資料不是`String`，然後在<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設`None`中<xref:System.Windows.Forms.DragDropEffects>。</span><span class="sxs-lookup"><span data-stu-id="31784-932">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="31784-933">最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。</span><span class="sxs-lookup"><span data-stu-id="31784-933">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="31784-934">若要提供的權限卸除資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`中適當的位置加入值`ListBox`。</span><span class="sxs-lookup"><span data-stu-id="31784-934">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="31784-935">如果在拖曳作業移動超出界限的表單，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-935">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="31784-936">此程式碼摘錄示範如何使用<xref:System.Windows.Forms.Control.DragLeave>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-936">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragLeave> event.</span></span> <span data-ttu-id="31784-937">請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整程式碼範例的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-937">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#8)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#8)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.Forms.DragEventHandler " Usage="member this.DragOver : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-938">發生於將物件拖曳至控制項邊框上方時。</span><span class="sxs-lookup"><span data-stu-id="31784-938">Occurs when an object is dragged over the control's bounds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-939"><xref:System.Windows.Forms.Control.DragOver>滑鼠游標拖放作業期間移動控制項的範圍內時，就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-939">The <xref:System.Windows.Forms.Control.DragOver> event is raised when the mouse cursor moves within the bounds of the control during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="31784-940">以下描述與拖放作業相關的事件，其引發的方法與時機。</span><span class="sxs-lookup"><span data-stu-id="31784-940">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="31784-941"><xref:System.Windows.Forms.Control.DoDragDrop%2A>方法會判斷目前的游標位置下的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-941">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="31784-942">接著會檢查此控制項是否為有效的置放目標。</span><span class="sxs-lookup"><span data-stu-id="31784-942">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="31784-943">如果控制項為有效的置放目標，<xref:System.Windows.Forms.Control.GiveFeedback>指定的拖放效果引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-943">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="31784-944">如需拖放效果的清單，請參閱 <xref:System.Windows.Forms.DragDropEffects> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="31784-944">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="31784-945">系統會追蹤滑鼠游標位置、鍵盤狀態和滑鼠按鈕狀態的變更。</span><span class="sxs-lookup"><span data-stu-id="31784-945">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="31784-946">如果使用者移出視窗外，便會引發 <xref:System.Windows.Forms.Control.DragLeave> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-946">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="31784-947">如果滑鼠進入另一個控制項，便會引發該控制項的 <xref:System.Windows.Forms.Control.DragEnter> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-947">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="31784-948">如果滑鼠移動，但是待在相同的控制項內，便會引發 <xref:System.Windows.Forms.Control.DragOver> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-948">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="31784-949">如果沒有鍵盤或滑鼠按鈕狀態變更<xref:System.Windows.Forms.Control.QueryContinueDrag>引發事件，並決定是否要繼續拖曳、 置放資料，或取消作業的值<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>的事件屬性<xref:System.Windows.Forms.QueryContinueDragEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="31784-949">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="31784-950">如果值<xref:System.Windows.Forms.DragAction>值是`Continue`、<xref:System.Windows.Forms.Control.DragOver>就會引發事件，以繼續作業而<xref:System.Windows.Forms.Control.GiveFeedback>具有新效果就會引發事件，以便設定適當的視覺化回應。</span><span class="sxs-lookup"><span data-stu-id="31784-950">If the value of <xref:System.Windows.Forms.DragAction> value is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="31784-951">如需有效置放效果的清單，請參閱 <xref:System.Windows.Forms.DragDropEffects> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="31784-951">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="31784-952"><xref:System.Windows.Forms.Control.DragOver>和<xref:System.Windows.Forms.Control.GiveFeedback>事件會經過配對，如此在滑鼠移動經過置放目標，不提供使用者最新的回應滑鼠的位置上。</span><span class="sxs-lookup"><span data-stu-id="31784-952">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="31784-953">如果值<xref:System.Windows.Forms.DragAction>是`Drop`，置放效果值會傳回來源，如此來源應用程式可以執行適當作業資料來源; 例如，如果剪下資料作業是移動。</span><span class="sxs-lookup"><span data-stu-id="31784-953">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="31784-954">如果值<xref:System.Windows.Forms.DragAction>是`Cancel`、<xref:System.Windows.Forms.Control.DragLeave>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-954">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="31784-955"><xref:System.Windows.Forms.DragEventArgs.X%2A>和<xref:System.Windows.Forms.DragEventArgs.Y%2A>屬性<xref:System.Windows.Forms.DragEventArgs>會在螢幕座標中，工作區座標。</span><span class="sxs-lookup"><span data-stu-id="31784-955">The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates.</span></span> <span data-ttu-id="31784-956">下列 C# 程式碼行將屬性轉換為用戶端<xref:System.Drawing.Point>:</span><span class="sxs-lookup"><span data-stu-id="31784-956">The following line of C# code converts the properties to a client <xref:System.Drawing.Point>:</span></span>  
    >   
    >  <span data-ttu-id="31784-957">點 clientPoint = targetControl.PointToClient （新的點 (de。X，de。Y));</span><span class="sxs-lookup"><span data-stu-id="31784-957">Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));</span></span>  
  
 <span data-ttu-id="31784-958">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-958">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-959">下列程式碼範例示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-959">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="31784-960">範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>時拖曳動作開始的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-960">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="31784-961">如果已移動滑鼠拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-961">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="31784-962"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來決定要在拖曳的項目索引`MouseDown`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-962">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="31784-963">此範例也示範如何使用自訂游標拖放作業。</span><span class="sxs-lookup"><span data-stu-id="31784-963">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="31784-964">這個範例需要有兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`、 自訂拖放到的應用程式目錄，存在於和不置放資料指標，分別。</span><span class="sxs-lookup"><span data-stu-id="31784-964">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="31784-965">如果使用自訂游標`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。</span><span class="sxs-lookup"><span data-stu-id="31784-965">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="31784-966">自訂的資料指標中所設定<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-966">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="31784-967">鍵盤的狀態會在評估<xref:System.Windows.Forms.Control.DragOver>右邊的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵的狀態。</span><span class="sxs-lookup"><span data-stu-id="31784-967">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="31784-968">中的位置`ListBox`期間也決定會卸除`DragOver`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-968">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="31784-969">如果要卸除的資料不是`String`，然後在<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設`None`中<xref:System.Windows.Forms.DragDropEffects>。</span><span class="sxs-lookup"><span data-stu-id="31784-969">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="31784-970">最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。</span><span class="sxs-lookup"><span data-stu-id="31784-970">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="31784-971">若要提供的權限卸除資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`中適當的位置加入值`ListBox`。</span><span class="sxs-lookup"><span data-stu-id="31784-971">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="31784-972">如果在拖曳作業移動超出界限的表單，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-972">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="31784-973">此程式碼摘錄示範如何使用<xref:System.Windows.Forms.Control.DragOver>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-973">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragOver> event.</span></span> <span data-ttu-id="31784-974">請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整程式碼範例的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-974">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DrawToBitmap">
      <MemberSignature Language="C#" Value="public void DrawToBitmap (System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawToBitmap(class System.Drawing.Bitmap bitmap, valuetype System.Drawing.Rectangle targetBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawToBitmap(System::Drawing::Bitmap ^ bitmap, System::Drawing::Rectangle targetBounds);" />
      <MemberSignature Language="F#" Value="member this.DrawToBitmap : System.Drawing.Bitmap * System.Drawing.Rectangle -&gt; unit" Usage="control.DrawToBitmap (bitmap, targetBounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="System.Drawing.Bitmap" />
        <Parameter Name="targetBounds" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="bitmap"><span data-ttu-id="31784-975">要繪製成的點陣圖。</span><span class="sxs-lookup"><span data-stu-id="31784-975">The bitmap to be drawn to.</span></span></param>
        <param name="targetBounds"><span data-ttu-id="31784-976">要呈現控制項的範圍。</span><span class="sxs-lookup"><span data-stu-id="31784-976">The bounds within which the control is rendered.</span></span></param>
        <summary><span data-ttu-id="31784-977">支援呈現為指定的點陣圖。</span><span class="sxs-lookup"><span data-stu-id="31784-977">Supports rendering to the specified bitmap.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-978"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> ActiveX 控制項不支援方法。</span><span class="sxs-lookup"><span data-stu-id="31784-978">The <xref:System.Windows.Forms.Control.DrawToBitmap%2A> method is not supported for ActiveX controls.</span></span> <span data-ttu-id="31784-979">您可以覆寫<xref:System.Windows.Forms.Control.OnPrint%2A>事件，並視需要提供自訂的列印邏輯。</span><span class="sxs-lookup"><span data-stu-id="31784-979">You can override the <xref:System.Windows.Forms.Control.OnPrint%2A> event and provide custom printing logic if required.</span></span>  
  
 <span data-ttu-id="31784-980"><xref:System.Windows.Forms.Control.DrawToBitmap%2A>方法具有下列限制：</span><span class="sxs-lookup"><span data-stu-id="31784-980">The <xref:System.Windows.Forms.Control.DrawToBitmap%2A> method has the following limitations:</span></span>  
  
-   <span data-ttu-id="31784-981"><xref:System.ArgumentException>大型點陣圖可能會擲回。</span><span class="sxs-lookup"><span data-stu-id="31784-981">An <xref:System.ArgumentException> might be thrown for large bitmaps.</span></span> <span data-ttu-id="31784-982">最大容許大小會因電腦而異。</span><span class="sxs-lookup"><span data-stu-id="31784-982">The maximum allowable size varies by machine.</span></span>  
  
-   <span data-ttu-id="31784-983"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> 不支援`Ink`Windows XP Tablet PC Edition 2005 作業系統的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-983"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> does not support the `Ink` controls for the Windows XP Tablet PC Edition 2005 operating system.</span></span>  
  
-   <span data-ttu-id="31784-984"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> 不繪製子系<xref:System.Windows.Forms.TextBox>如果<xref:System.Windows.Forms.Control.Visible%2A>屬性<xref:System.Windows.Forms.TextBox>設`false`。</span><span class="sxs-lookup"><span data-stu-id="31784-984"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> does not draw a child <xref:System.Windows.Forms.TextBox> if the <xref:System.Windows.Forms.Control.Visible%2A> property of the <xref:System.Windows.Forms.TextBox> is set to `false`.</span></span>  
  
-   <span data-ttu-id="31784-985">會以反向順序呈現在容器內的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-985">Controls inside containers are rendered in reverse order.</span></span>  
  
-   <span data-ttu-id="31784-986"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> 完全正常運作的<xref:System.Windows.Forms.RichTextBox>; 只繪製點陣圖的框線。</span><span class="sxs-lookup"><span data-stu-id="31784-986"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> is not fully functional for the <xref:System.Windows.Forms.RichTextBox>; only the border of a bitmap is drawn.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.Control.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-514)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-987">取得或設定值，指出控制項是否可回應使用者互動。</span><span class="sxs-lookup"><span data-stu-id="31784-987">Gets or sets a value indicating whether the control can respond to user interaction.</span></span></summary>
        <value><span data-ttu-id="31784-988">如果控制項可以回應使用者互動，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-988"><see langword="true" /> if the control can respond to user interaction; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="31784-989">預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="31784-989">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-990">與<xref:System.Windows.Forms.Control.Enabled%2A>屬性，您可以啟用或停用控制項在執行階段。</span><span class="sxs-lookup"><span data-stu-id="31784-990">With the <xref:System.Windows.Forms.Control.Enabled%2A> property, you can enable or disable controls at run time.</span></span> <span data-ttu-id="31784-991">例如，您可以停用不會套用到應用程式的目前狀態的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-991">For example, you can disable controls that do not apply to the current state of the application.</span></span> <span data-ttu-id="31784-992">您也可以停用控制項以限制其用途。</span><span class="sxs-lookup"><span data-stu-id="31784-992">You can also disable a control to restrict its use.</span></span> <span data-ttu-id="31784-993">若要防止使用者按一下它，例如停用按鈕。</span><span class="sxs-lookup"><span data-stu-id="31784-993">For example, a button can be disabled to prevent the user from clicking it.</span></span> <span data-ttu-id="31784-994">如果控制項已停用，無法選取。</span><span class="sxs-lookup"><span data-stu-id="31784-994">If a control is disabled, it cannot be selected.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="31784-995">設定<xref:System.Windows.Forms.Control.Enabled%2A>屬性`false`不會停用應用程式的控制項方塊或防止應用程式視窗接收焦點。</span><span class="sxs-lookup"><span data-stu-id="31784-995">Setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false` does not disable the application's control box or prevent the application window from receiving the focus.</span></span>  
  
 <span data-ttu-id="31784-996">當容器控制項具有其已啟用的屬性設定為`false`，其包含的控制項已停用，以及。</span><span class="sxs-lookup"><span data-stu-id="31784-996">When a container control has its enabled property set to `false`, all its contained controls are disabled, as well.</span></span> <span data-ttu-id="31784-997">例如，如果使用者在任何已停用所包含的控制項<xref:System.Windows.Forms.GroupBox>控制項，不會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-997">For example, if the user clicks on any of the controls contained in a disabled <xref:System.Windows.Forms.GroupBox> control, no events are raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-998">停用可捲動的控制項時，捲軸也會停用。</span><span class="sxs-lookup"><span data-stu-id="31784-998">When a scrollable control is disabled, the scroll bars are also disabled.</span></span> <span data-ttu-id="31784-999">例如，已停用的多行文字方塊是無法捲動，以顯示文字的所有行。</span><span class="sxs-lookup"><span data-stu-id="31784-999">For example, a disabled multiline textbox is unable to scroll to display all the lines of text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1000">下列程式碼範例會建立<xref:System.Windows.Forms.GroupBox>並設定一些常見的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1000">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="31784-1001">此範例會建立<xref:System.Windows.Forms.TextBox>並設定其<xref:System.Windows.Forms.Control.Location%2A>群組方塊內。</span><span class="sxs-lookup"><span data-stu-id="31784-1001">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="31784-1002">接下來，設定<xref:System.Windows.Forms.Control.Text%2A>屬性群組 方塊中，群組方塊的停駐在表單頂端。</span><span class="sxs-lookup"><span data-stu-id="31784-1002">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="31784-1003">最後，它會停用 [群組] 方塊設定<xref:System.Windows.Forms.Control.Enabled%2A>屬性`false`，因而導致停用群組內包含的所有控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1003">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ScrollableControl" />
      </Docs>
    </Member>
    <Member MemberName="EnabledChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.EnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EnabledChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ EnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.EnabledChanged : EventHandler " Usage="member this.EnabledChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1004">發生於 <see cref="P:System.Windows.Forms.Control.Enabled" /> 屬性值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-1004">Occurs when the <see cref="P:System.Windows.Forms.Control.Enabled" /> property value has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1005">如果會引發這個事件<xref:System.Windows.Forms.Control.Enabled%2A>以程式設計方式修改或使用者互動變更屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1005">This event is raised if the <xref:System.Windows.Forms.Control.Enabled%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-1006">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1006">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1007">下列程式碼範例會使用兩個<xref:System.Windows.Forms.RadioButton>控制項，以示範<xref:System.Windows.Forms.Control.EnabledChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1007">The following code example uses two <xref:System.Windows.Forms.RadioButton> controls to demonstrate the <xref:System.Windows.Forms.Control.EnabledChanged> event.</span></span> <span data-ttu-id="31784-1008">按一下按鈕即可變更的值<xref:System.Windows.Forms.Control.Enabled%2A>屬性的其他按鈕`false`並顯示<xref:System.Windows.Forms.MessageBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1008">Clicking one button changes the value of the <xref:System.Windows.Forms.Control.Enabled%2A> property of the other button to `false` and displays a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.EnabledChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.EnabledChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.EnabledChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.EnabledChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (asyncResult As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndInvoke : IAsyncResult -&gt; obj&#xA;override this.EndInvoke : IAsyncResult -&gt; obj" Usage="control.EndInvoke asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="31784-1009">表示特定叫用非同步作業的 <see cref="T:System.IAsyncResult" />，在呼叫 <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> 時傳回。</span><span class="sxs-lookup"><span data-stu-id="31784-1009">The <see cref="T:System.IAsyncResult" /> that represents a specific invoke asynchronous operation, returned when calling <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />.</span></span></param>
        <summary><span data-ttu-id="31784-1010">擷取由傳遞的 <see cref="T:System.IAsyncResult" /> 表示的非同步作業的傳回值。</span><span class="sxs-lookup"><span data-stu-id="31784-1010">Retrieves the return value of the asynchronous operation represented by the <see cref="T:System.IAsyncResult" /> passed.</span></span></summary>
        <returns><span data-ttu-id="31784-1011">非同步作業產生的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1011">The <see cref="T:System.Object" /> generated by the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1012">如果尚未完成非同步作業，此函式會封鎖，直到得到結果為止。</span><span class="sxs-lookup"><span data-stu-id="31784-1012">If the asynchronous operation has not been completed, this function will block until the result is available.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1013">除了<xref:System.Windows.Forms.Control.InvokeRequired%2A>屬性，在控制項上都是安全執行緒的四種方法： <xref:System.Windows.Forms.Control.Invoke%2A>， <xref:System.Windows.Forms.Control.BeginInvoke%2A>， <xref:System.Windows.Forms.Control.EndInvoke%2A>，和<xref:System.Windows.Forms.Control.CreateGraphics%2A>如果已經建立控制項的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-1013">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="31784-1014">呼叫<xref:System.Windows.Forms.Control.CreateGraphics%2A>背景執行緒上建立控制項的控制代碼之前可能會導致不合法的跨執行緒呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-1014">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="31784-1015">至於其他所有方法呼叫，您應該使用叫用方法的其中一個來封送處理控制項的執行緒的呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-1015">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31784-1016"><paramref name="asyncResult" /> 參數值為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1016">The <paramref name="asyncResult" /> parameter value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31784-1017"><paramref name="asyncResult" /> 物件不是由同一控制項中 <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> 方法的前一個呼叫建立。</span><span class="sxs-lookup"><span data-stu-id="31784-1017">The <paramref name="asyncResult" /> object was not created by a preceding call of the <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> method from the same control.</span></span></exception>
        <altmember cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public event EventHandler Enter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Enter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Enter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Enter As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Enter;" />
      <MemberSignature Language="F#" Value="member this.Enter : EventHandler " Usage="member this.Enter : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1018">發生於輸入控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-1018">Occurs when the control is entered.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1019">當您藉由呼叫中使用鍵盤 （TAB、 SHIFT + TAB，等等） 變更焦點時<xref:System.Windows.Forms.Control.Select%2A>或<xref:System.Windows.Forms.Control.SelectNextControl%2A>方法，或藉由設定<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType>屬性目前的表單，焦點事件會發生順序如下：</span><span class="sxs-lookup"><span data-stu-id="31784-1019">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="31784-1020">當您將焦點變更使用滑鼠或藉由呼叫<xref:System.Windows.Forms.Control.Focus%2A>方法，焦點事件會依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-1020">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="31784-1021">如果<xref:System.Windows.Forms.Control.CausesValidation%2A>屬性設定為`false`、<xref:System.Windows.Forms.Control.Validating>和<xref:System.Windows.Forms.Control.Validated>事件都會被隱藏。</span><span class="sxs-lookup"><span data-stu-id="31784-1021">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1022"><xref:System.Windows.Forms.Control.Enter>和<xref:System.Windows.Forms.Control.Leave>事件隱藏的<xref:System.Windows.Forms.Form>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1022">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are suppressed by the <xref:System.Windows.Forms.Form> class.</span></span> <span data-ttu-id="31784-1023">中的對等事件<xref:System.Windows.Forms.Form>類別<xref:System.Windows.Forms.Form.Activated>和<xref:System.Windows.Forms.Form.Deactivate>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1023">The equivalent events in the <xref:System.Windows.Forms.Form> class are the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="31784-1024"><xref:System.Windows.Forms.Control.Enter>和<xref:System.Windows.Forms.Control.Leave>事件階層，直到達到適當的控制項，向上和向下的父鏈結會串聯。</span><span class="sxs-lookup"><span data-stu-id="31784-1024">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached.</span></span> <span data-ttu-id="31784-1025">例如，假設您有<xref:System.Windows.Forms.Form>具有兩個<xref:System.Windows.Forms.GroupBox>控制項，以及每個<xref:System.Windows.Forms.GroupBox>控制項有一個<xref:System.Windows.Forms.TextBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1025">For example, assume you have a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.GroupBox> controls, and each <xref:System.Windows.Forms.GroupBox> control has one <xref:System.Windows.Forms.TextBox> control.</span></span> <span data-ttu-id="31784-1026">當插入號移從其中一個<xref:System.Windows.Forms.TextBox>，<xref:System.Windows.Forms.Control.Leave>都會引發事件<xref:System.Windows.Forms.TextBox>和<xref:System.Windows.Forms.GroupBox>，而<xref:System.Windows.Forms.Control.Enter>引發其他<xref:System.Windows.Forms.GroupBox>和<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1026">When the caret is moved from one <xref:System.Windows.Forms.TextBox> to the other, the <xref:System.Windows.Forms.Control.Leave> event is raised for the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.GroupBox>, and the <xref:System.Windows.Forms.Control.Enter> event is raised for the other <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TextBox>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="31784-1027">請勿嘗試將焦點設在<xref:System.Windows.Forms.Control.Enter>， <xref:System.Windows.Forms.Control.GotFocus>， <xref:System.Windows.Forms.Control.Leave>， <xref:System.Windows.Forms.Control.LostFocus>， <xref:System.Windows.Forms.Control.Validating>，或<xref:System.Windows.Forms.Control.Validated>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1027">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="31784-1028">如此一來，可能會導致您的應用程式或作業系統停止回應。</span><span class="sxs-lookup"><span data-stu-id="31784-1028">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="31784-1029">如需詳細資訊，請參閱`WM_KILLFOCUS`< 鍵盤輸入參考 > 一節的 「 訊息死結 」 一節中的主題[有關訊息和訊息佇列](http://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx)主題。</span><span class="sxs-lookup"><span data-stu-id="31784-1029">For more information, see the `WM_KILLFOCUS` topic in the "Keyboard Input Reference" section and the "Message Deadlocks" section of the[About Messages and Message Queues](http://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx)topic.</span></span>  
  
 <span data-ttu-id="31784-1030">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1030">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1031">下列程式碼範例使用<xref:System.Windows.Forms.Control.Enter>事件來變更前景和背景的色彩<xref:System.Windows.Forms.TextBox>在特定情況下。</span><span class="sxs-lookup"><span data-stu-id="31784-1031">The following code example uses the <xref:System.Windows.Forms.Control.Enter> event to change the foreground and background colors of a <xref:System.Windows.Forms.TextBox> under particular conditions.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FindForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form FindForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form FindForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FindForm" />
      <MemberSignature Language="VB.NET" Value="Public Function FindForm () As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Form ^ FindForm();" />
      <MemberSignature Language="F#" Value="member this.FindForm : unit -&gt; System.Windows.Forms.Form" Usage="control.FindForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-1032">擷取控制項所在的表單。</span><span class="sxs-lookup"><span data-stu-id="31784-1032">Retrieves the form that the control is on.</span></span></summary>
        <returns><span data-ttu-id="31784-1033">控制項所在的 <see cref="T:System.Windows.Forms.Form" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1033">The <see cref="T:System.Windows.Forms.Form" /> that the control is on.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1034">控制項的<xref:System.Windows.Forms.Control.Parent%2A>屬性值可能無法與相同<xref:System.Windows.Forms.Form>傳回<xref:System.Windows.Forms.Control.FindForm%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1034">The control's <xref:System.Windows.Forms.Control.Parent%2A> property value might not be the same as the <xref:System.Windows.Forms.Form> returned by <xref:System.Windows.Forms.Control.FindForm%2A> method.</span></span> <span data-ttu-id="31784-1035">比方說，如果<xref:System.Windows.Forms.RadioButton>控制項內含<xref:System.Windows.Forms.GroupBox>控制項，而<xref:System.Windows.Forms.GroupBox>位於<xref:System.Windows.Forms.Form>、<xref:System.Windows.Forms.RadioButton>控制項的<xref:System.Windows.Forms.Control.Parent%2A>是<xref:System.Windows.Forms.GroupBox>和<xref:System.Windows.Forms.GroupBox>控制項的<xref:System.Windows.Forms.Control.Parent%2A>是<xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="31784-1035">For example, if a <xref:System.Windows.Forms.RadioButton> control is contained within a <xref:System.Windows.Forms.GroupBox> control, and the <xref:System.Windows.Forms.GroupBox> is on a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.RadioButton> control's <xref:System.Windows.Forms.Control.Parent%2A> is the <xref:System.Windows.Forms.GroupBox> and the <xref:System.Windows.Forms.GroupBox> control's <xref:System.Windows.Forms.Control.Parent%2A> is the <xref:System.Windows.Forms.Form>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1036">下列程式碼範例會尋找包含指定的按鈕的表單。</span><span class="sxs-lookup"><span data-stu-id="31784-1036">The following code example finds the form that contains the specified button.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-1037">呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-1037">for all windows to call this method.</span></span> <span data-ttu-id="31784-1038">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1038">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.GetTopLevel" />
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; bool" Usage="control.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-1039">設定控制項的輸入焦點。</span><span class="sxs-lookup"><span data-stu-id="31784-1039">Sets input focus to the control.</span></span></summary>
        <returns><span data-ttu-id="31784-1040">如果輸入焦點要求成功，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1040"><see langword="true" /> if the input focus request was successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1041"><xref:System.Windows.Forms.Control.Focus%2A>方法會傳回`true`如果控制項已成功收到輸入的焦點。</span><span class="sxs-lookup"><span data-stu-id="31784-1041">The <xref:System.Windows.Forms.Control.Focus%2A> method returns `true` if the control successfully received input focus.</span></span> <span data-ttu-id="31784-1042">控制項可以有輸入的焦點，但不顯示擁有焦點的任何視覺提示。</span><span class="sxs-lookup"><span data-stu-id="31784-1042">The control can have the input focus while not displaying any visual cues of having the focus.</span></span> <span data-ttu-id="31784-1043">下面列出的不可選取控制項主要是觀察此行為，或任何控制項衍生自它們。</span><span class="sxs-lookup"><span data-stu-id="31784-1043">This behavior is primarily observed by the nonselectable controls listed below, or any controls derived from them.</span></span>  
  
 <span data-ttu-id="31784-1044">控制項可以選取和接收輸入的焦點，如果下列所有條件都成立：`Selectable`值<xref:System.Windows.Forms.ControlStyles>設`true`、 它包含在另一個控制項和所有其父控制項都是可見並已啟用。</span><span class="sxs-lookup"><span data-stu-id="31784-1044">A control can be selected and receive input focus if all the following are true: the `Selectable` value of <xref:System.Windows.Forms.ControlStyles> is set to `true`, it is contained in another control, and all its parent controls are both visible and enabled.</span></span>  
  
 <span data-ttu-id="31784-1045">下列清單中的 Windows Form 控制項不能選取。</span><span class="sxs-lookup"><span data-stu-id="31784-1045">The Windows Forms controls in the following list are not selectable.</span></span> <span data-ttu-id="31784-1046">衍生自這些控制項的控制項不能也選取。</span><span class="sxs-lookup"><span data-stu-id="31784-1046">Controls derived from these controls are also not selectable.</span></span>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <span data-ttu-id="31784-1047"><xref:System.Windows.Forms.LinkLabel> （如果沒有在控制項中顯示連結）</span><span class="sxs-lookup"><span data-stu-id="31784-1047"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1048"><xref:System.Windows.Forms.Control.Focus%2A> 低層級的方法主要被供自訂控制項作者。</span><span class="sxs-lookup"><span data-stu-id="31784-1048"><xref:System.Windows.Forms.Control.Focus%2A> is a low-level method intended primarily for custom control authors.</span></span> <span data-ttu-id="31784-1049">應用程式設計人員應該改用<xref:System.Windows.Forms.Control.Select%2A>方法或<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A>子控制項的屬性或<xref:System.Windows.Forms.Form.Activate%2A>表單的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1049">Instead, application programmers should use the <xref:System.Windows.Forms.Control.Select%2A> method or the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property for child controls, or the <xref:System.Windows.Forms.Form.Activate%2A> method for forms.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1050">下列程式碼範例將焦點設定為指定<xref:System.Windows.Forms.Control>，如果它能夠接收焦點。</span><span class="sxs-lookup"><span data-stu-id="31784-1050">The following code example sets focus to the specified <xref:System.Windows.Forms.Control>, if it can receive focus.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#1)]
 [!code-csharp[Windows.Forms.ControlMembers6#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#1)]
 [!code-vb[Windows.Forms.ControlMembers6#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-1051">呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-1051">for all windows to call this method.</span></span> <span data-ttu-id="31784-1052">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1052">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="P:System.Windows.Forms.Control.ContainsFocus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.ActiveControl" />
        <altmember cref="M:System.Windows.Forms.Form.Activate" />
      </Docs>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public virtual bool Focused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Focused" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Focused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Focused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Focused : bool" Usage="System.Windows.Forms.Control.Focused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1053">取得指示控制項是否擁有輸入焦點的值。</span><span class="sxs-lookup"><span data-stu-id="31784-1053">Gets a value indicating whether the control has input focus.</span></span></summary>
        <value><span data-ttu-id="31784-1054">如果焦點在控制項，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1054"><see langword="true" /> if the control has focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="31784-1055">下列程式碼範例會停用<xref:System.Windows.Forms.MenuItem>如果<xref:System.Windows.Forms.TextBox>沒有焦點。</span><span class="sxs-lookup"><span data-stu-id="31784-1055">The following code example disables a <xref:System.Windows.Forms.MenuItem> if a <xref:System.Windows.Forms.TextBox> does not have focus.</span></span> <span data-ttu-id="31784-1056">這個範例需要您有<xref:System.Windows.Forms.Form>與<xref:System.Windows.Forms.TextBox>名為`textBox1`和兩個<xref:System.Windows.Forms.MenuItem>物件命名`menuItemEdit`和`menuItemEditInsertCustomerInfo`。</span><span class="sxs-lookup"><span data-stu-id="31784-1056">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TextBox> named `textBox1` and two <xref:System.Windows.Forms.MenuItem> objects named `menuItemEdit` and `menuItemEditInsertCustomerInfo`.</span></span>  
  
 [!code-cpp[Windows.FOrms.Control Members2#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#4)]
 [!code-csharp[Windows.FOrms.Control Members2#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#4)]
 [!code-vb[Windows.FOrms.Control Members2#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1057"><para>在覆寫<see cref="P:System.Windows.Forms.Control.Focused" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.Focused" />屬性擴充的基底實作。否則，您必須提供所有的實作。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1057"><para>When overriding the <see cref="P:System.Windows.Forms.Control.Focused" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Focused" /> property to extend the base implementation. Otherwise, you must provide all the implementation.</para></span></span></block>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
        <altmember cref="P:System.Windows.Forms.Control.ContainsFocus" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Font" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Font : System.Drawing.Font with get, set" Usage="System.Windows.Forms.Control.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1058">取得或設定控制項顯示之文字字型。</span><span class="sxs-lookup"><span data-stu-id="31784-1058">Gets or sets the font of the text displayed by the control.</span></span></summary>
        <value><span data-ttu-id="31784-1059">要套用至控制項顯示之文字的 <see cref="T:System.Drawing.Font" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1059">The <see cref="T:System.Drawing.Font" /> to apply to the text displayed by the control.</span></span> <span data-ttu-id="31784-1060">預設值為 <see cref="P:System.Windows.Forms.Control.DefaultFont" /> 屬性的值。</span><span class="sxs-lookup"><span data-stu-id="31784-1060">The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultFont" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1061"><xref:System.Windows.Forms.Control.Font%2A>屬性是環境的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1061">The <xref:System.Windows.Forms.Control.Font%2A> property is an ambient property.</span></span> <span data-ttu-id="31784-1062">環境屬性是控制項屬性，如果未設定，將擷取從父控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1062">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="31784-1063">例如，<xref:System.Windows.Forms.Button>具有相同<xref:System.Windows.Forms.Control.BackColor%2A>做為其父系<xref:System.Windows.Forms.Form>預設。</span><span class="sxs-lookup"><span data-stu-id="31784-1063">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="31784-1064">如需環境屬性的詳細資訊，請參閱<xref:System.Windows.Forms.AmbientProperties>類別或<xref:System.Windows.Forms.Control>類別概觀。</span><span class="sxs-lookup"><span data-stu-id="31784-1064">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
 <span data-ttu-id="31784-1065">因為<xref:System.Drawing.Font>是不可變的 （表示您不能調整的任何屬性），您只能指派<xref:System.Windows.Forms.Control.Font%2A>新屬性<xref:System.Drawing.Font>。</span><span class="sxs-lookup"><span data-stu-id="31784-1065">Because the <xref:System.Drawing.Font> is immutable (meaning that you cannot adjust any of its properties), you can only assign the <xref:System.Windows.Forms.Control.Font%2A> property a new <xref:System.Drawing.Font>.</span></span> <span data-ttu-id="31784-1066">不過，您可以根據現有的字型為新字型。</span><span class="sxs-lookup"><span data-stu-id="31784-1066">However, you can base the new font on the existing font.</span></span>  
  
 <span data-ttu-id="31784-1067">[Visual Basic、 C#]</span><span class="sxs-lookup"><span data-stu-id="31784-1067">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="31784-1068">如何調整現有的字型，讓它變成粗體的範例如下：</span><span class="sxs-lookup"><span data-stu-id="31784-1068">The following is an example of how to adjust the existing font to make it bold:</span></span>  
  
```csharp  
myControl.Font = new Font(myControl.Font,   
    myControl.Font.Style | FontStyle.Bold);  
```  
  
```vb  
MyControl.Font = New Font(MyControl.Font, _   
    MyControl.Font.Style Or FontStyle.Bold)  
```  
  
   
  
## Examples  
 <span data-ttu-id="31784-1069">下列程式碼範例顯示<xref:System.Windows.Forms.FontDialog>給使用者，並變更<xref:System.Drawing.Font>的<xref:System.Windows.Forms.DateTimePicker>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1069">The following code example displays a <xref:System.Windows.Forms.FontDialog> to the user and changes the <xref:System.Drawing.Font> of a <xref:System.Windows.Forms.DateTimePicker> control.</span></span> <span data-ttu-id="31784-1070">這個範例需要您有<xref:System.Windows.Forms.Form>與<xref:System.Windows.Forms.Button>和<xref:System.Windows.Forms.DateTimePicker>在其上。</span><span class="sxs-lookup"><span data-stu-id="31784-1070">This example requires that you have a <xref:System.Windows.Forms.Form> with <xref:System.Windows.Forms.Button> and a <xref:System.Windows.Forms.DateTimePicker> on it.</span></span>  
  
 [!code-cpp[Control_Font#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Font/CPP/control_font.cpp#1)]
 [!code-csharp[Control_Font#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Font/CS/control_font.cs#1)]
 [!code-vb[Control_Font#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Font/VB/control_font.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1071"><para>在覆寫<see cref="P:System.Windows.Forms.Control.Font" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.Font" />屬性擴充的基底實作。否則，您必須提供所有的實作。您不需要覆寫兩個<see langword="get" />和<see langword="set" />存取子<see cref="P:System.Windows.Forms.Control.Font" />屬性; 您可以覆寫只能有一個必要。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1071"><para>When overriding the <see cref="P:System.Windows.Forms.Control.Font" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Font" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Font" /> property; you can override only one if needed.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="FontChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FontChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FontChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.FontChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FontChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ FontChanged;" />
      <MemberSignature Language="F#" Value="member this.FontChanged : EventHandler " Usage="member this.FontChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1072">發生在 <see cref="P:System.Windows.Forms.Control.Font" /> 屬性值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-1072">Occurs when the <see cref="P:System.Windows.Forms.Control.Font" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1073">如果會引發這個事件<xref:System.Windows.Forms.Control.Font%2A>屬性變更時以程式設計方式修改或透過互動。</span><span class="sxs-lookup"><span data-stu-id="31784-1073">This event is raised if the <xref:System.Windows.Forms.Control.Font%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="31784-1074">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1074">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1075">下列程式碼範例示範<xref:System.Windows.Forms.Control.FontChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1075">The following code example demonstrates the <xref:System.Windows.Forms.Control.FontChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.FontChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.FontChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.FontChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.FontChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Font" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="FontHeight">
      <MemberSignature Language="C#" Value="protected int FontHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FontHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.FontHeight" />
      <MemberSignature Language="VB.NET" Value="Protected Property FontHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int FontHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.FontHeight : int with get, set" Usage="System.Windows.Forms.Control.FontHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1076">取得或設定控制項字型的高度。</span><span class="sxs-lookup"><span data-stu-id="31784-1076">Gets or sets the height of the font of the control.</span></span></summary>
        <value><span data-ttu-id="31784-1077">控制項的 <see cref="T:System.Drawing.Font" /> 高度 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-1077">The height of the <see cref="T:System.Drawing.Font" /> of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="31784-1078"><xref:System.Windows.Forms.Control.FontHeight%2A>屬性不應設為控制項的以外的任何值<xref:System.Drawing.Font.Height%2A?displayProperty=nameWithType>值，則為-1。</span><span class="sxs-lookup"><span data-stu-id="31784-1078">The <xref:System.Windows.Forms.Control.FontHeight%2A> property should not be set to any value other than the control's <xref:System.Drawing.Font.Height%2A?displayProperty=nameWithType> value, or -1.</span></span> <span data-ttu-id="31784-1079">設定<xref:System.Windows.Forms.Control.FontHeight%2A>為-1 的效果的清除的快取的高度值，並重新計算下一次參考屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-1079">Setting <xref:System.Windows.Forms.Control.FontHeight%2A> to -1 has the effect of clearing the cached height value, and the value is recalculated the next time the property is referenced.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Font.Height" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.Control.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-513)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1080">取得或設定控制項的前景色彩。</span><span class="sxs-lookup"><span data-stu-id="31784-1080">Gets or sets the foreground color of the control.</span></span></summary>
        <value><span data-ttu-id="31784-1081">控制項的前景 <see cref="T:System.Drawing.Color" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1081">The foreground <see cref="T:System.Drawing.Color" /> of the control.</span></span> <span data-ttu-id="31784-1082">預設值為 <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> 屬性的值。</span><span class="sxs-lookup"><span data-stu-id="31784-1082">The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1083"><xref:System.Windows.Forms.Control.ForeColor%2A>屬性是環境的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1083">The <xref:System.Windows.Forms.Control.ForeColor%2A> property is an ambient property.</span></span> <span data-ttu-id="31784-1084">環境屬性是控制項屬性，如果未設定，將擷取從父控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1084">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="31784-1085">例如，<xref:System.Windows.Forms.Button>具有相同<xref:System.Windows.Forms.Control.BackColor%2A>做為其父系<xref:System.Windows.Forms.Form>預設。</span><span class="sxs-lookup"><span data-stu-id="31784-1085">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="31784-1086">如需環境屬性的詳細資訊，請參閱<xref:System.Windows.Forms.AmbientProperties>類別或<xref:System.Windows.Forms.Control>類別概觀。</span><span class="sxs-lookup"><span data-stu-id="31784-1086">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1087">下列程式碼範例會設定<xref:System.Windows.Forms.Control.BackColor%2A>和<xref:System.Windows.Forms.Control.ForeColor%2A>預設系統色彩的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1087">The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors.</span></span> <span data-ttu-id="31784-1088">如果控制項的任何子控制項，則程式碼以遞迴方式呼叫其本身。</span><span class="sxs-lookup"><span data-stu-id="31784-1088">The code recursively calls itself if the control has any child controls.</span></span> <span data-ttu-id="31784-1089">這個程式碼範例需要您具有<xref:System.Windows.Forms.Form>與至少一個子系控制項; 不過，子容器控制，例如<xref:System.Windows.Forms.Panel>或<xref:System.Windows.Forms.GroupBox>，使用自己的子系控制項會進一步示範遞迴。</span><span class="sxs-lookup"><span data-stu-id="31784-1089">This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1090"><para>在覆寫<see cref="P:System.Windows.Forms.Control.ForeColor" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.ForeColor" />屬性擴充的基底實作。否則，您必須提供所有的實作。您不需要覆寫兩個<see langword="get" />和<see langword="set" />存取子<see cref="P:System.Windows.Forms.Control.ForeColor" />屬性; 您可以覆寫只能有一個必要。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1090"><para>When overriding the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ForeColor" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property; you can override only one if needed.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="ForeColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ForeColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ForeColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ForeColorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ForeColorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ForeColorChanged;" />
      <MemberSignature Language="F#" Value="member this.ForeColorChanged : EventHandler " Usage="member this.ForeColorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1091">發生在 <see cref="P:System.Windows.Forms.Control.ForeColor" /> 屬性值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-1091">Occurs when the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1092">如果會引發這個事件<xref:System.Windows.Forms.Control.ForeColor%2A>屬性變更時以程式設計方式修改或透過互動。</span><span class="sxs-lookup"><span data-stu-id="31784-1092">This event is raised if the <xref:System.Windows.Forms.Control.ForeColor%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="31784-1093">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1093">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1094">下列程式碼範例會為事件處理常式時執行<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-1094">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-1095"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式*PropertyName* `Changed`所引發的時機對應*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-1095">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-1096">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1096">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="31784-1097">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-1097">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-1098">這個範例需要您有<xref:System.Windows.Forms.Form>包含<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1098">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ForeColor" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="FromChildHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Control FromChildHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.Control FromChildHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FromChildHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromChildHandle (handle As IntPtr) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::Control ^ FromChildHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromChildHandle : nativeint -&gt; System.Windows.Forms.Control" Usage="System.Windows.Forms.Control.FromChildHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="31784-1099">要搜尋的視窗控制代碼 (<see langword="HWND" />)。</span><span class="sxs-lookup"><span data-stu-id="31784-1099">The window handle (<see langword="HWND" />) to search for.</span></span></param>
        <summary><span data-ttu-id="31784-1100">擷取包含指定控制代碼的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1100">Retrieves the control that contains the specified handle.</span></span></summary>
        <returns><span data-ttu-id="31784-1101"><see cref="T:System.Windows.Forms.Control" />，表示與指定的控制代碼關聯的控制項。如果找不到具有指定控制代碼的控制項，會傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1101">The <see cref="T:System.Windows.Forms.Control" /> that represents the control associated with the specified handle; returns <see langword="null" /> if no control with the specified handle is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1102">這個方法會搜尋視窗控制代碼的父鏈結，直到找到與控制項相關聯的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-1102">This method searches up the window handle parent chain until it finds a handle that is associated with a control.</span></span> <span data-ttu-id="31784-1103">這個方法是較可靠，不<xref:System.Windows.Forms.Control.FromHandle%2A>方法，因為它會正常傳回擁有一個以上的控制代碼的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1103">This method is more reliable than the <xref:System.Windows.Forms.Control.FromHandle%2A> method, because it correctly returns controls that own more than one handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-1104">呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-1104">for all windows to call this method.</span></span> <span data-ttu-id="31784-1105">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1105">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Control FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.Control FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::Control ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.Control" Usage="System.Windows.Forms.Control.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="31784-1106">要搜尋的視窗控制代碼 (<see langword="HWND" />)。</span><span class="sxs-lookup"><span data-stu-id="31784-1106">The window handle (<see langword="HWND" />) to search for.</span></span></param>
        <summary><span data-ttu-id="31784-1107">傳回目前與指定的控制代碼關聯的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1107">Returns the control that is currently associated with the specified handle.</span></span></summary>
        <returns><span data-ttu-id="31784-1108"><see cref="T:System.Windows.Forms.Control" />，表示與指定的控制代碼關聯的控制項。如果找不到具有指定控制代碼的控制項，會傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1108">A <see cref="T:System.Windows.Forms.Control" /> that represents the control associated with the specified handle; returns <see langword="null" /> if no control with the specified handle is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1109">使用<xref:System.Windows.Forms.Control.FromChildHandle%2A>方法，如果您需要傳回擁有一個以上的控制代碼的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1109">Use the <xref:System.Windows.Forms.Control.FromChildHandle%2A> method if you need to return controls that own more than one handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-1110">呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-1110">for all windows to call this method.</span></span> <span data-ttu-id="31784-1111">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1111">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetAccessibilityObjectById">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject GetAccessibilityObjectById (int objectId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject GetAccessibilityObjectById(int32 objectId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetAccessibilityObjectById(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetAccessibilityObjectById (objectId As Integer) As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::AccessibleObject ^ GetAccessibilityObjectById(int objectId);" />
      <MemberSignature Language="F#" Value="abstract member GetAccessibilityObjectById : int -&gt; System.Windows.Forms.AccessibleObject&#xA;override this.GetAccessibilityObjectById : int -&gt; System.Windows.Forms.AccessibleObject" Usage="control.GetAccessibilityObjectById objectId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="objectId"><span data-ttu-id="31784-1112"><see langword="Int32" />，識別要擷取的 <see cref="T:System.Windows.Forms.AccessibleObject" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1112">An <see langword="Int32" /> that identifies the <see cref="T:System.Windows.Forms.AccessibleObject" /> to retrieve.</span></span></param>
        <summary><span data-ttu-id="31784-1113">擷取指定的 <see cref="T:System.Windows.Forms.AccessibleObject" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1113">Retrieves the specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</span></span></summary>
        <returns><span data-ttu-id="31784-1114">指定的 <see cref="T:System.Windows.Forms.AccessibleObject" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1114">The specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="GetAutoSizeMode">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.AutoSizeMode GetAutoSizeMode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.AutoSizeMode GetAutoSizeMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetAutoSizeMode" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAutoSizeMode () As AutoSizeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::AutoSizeMode GetAutoSizeMode();" />
      <MemberSignature Language="F#" Value="member this.GetAutoSizeMode : unit -&gt; System.Windows.Forms.AutoSizeMode" Usage="control.GetAutoSizeMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoSizeMode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-1115">擷取值，表示已啟用控制項的 <see cref="P:System.Windows.Forms.Control.AutoSize" /> 屬性時，該控制項的行為模式為何。</span><span class="sxs-lookup"><span data-stu-id="31784-1115">Retrieves a value indicating how a control will behave when its <see cref="P:System.Windows.Forms.Control.AutoSize" /> property is enabled.</span></span></summary>
        <returns><span data-ttu-id="31784-1116">其中一個 <see cref="T:System.Windows.Forms.AutoSizeMode" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-1116">One of the <see cref="T:System.Windows.Forms.AutoSizeMode" /> values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildAtPoint">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31784-1117">擷取指定位置的子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1117">Retrieves the child control at a specified location.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildAtPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetChildAtPoint(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildAtPoint (pt As Point) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Control ^ GetChildAtPoint(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="member this.GetChildAtPoint : System.Drawing.Point -&gt; System.Windows.Forms.Control" Usage="control.GetChildAtPoint pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt"><span data-ttu-id="31784-1118"><see cref="T:System.Drawing.Point" />，包含您要尋找控制項之處的座標。</span><span class="sxs-lookup"><span data-stu-id="31784-1118">A <see cref="T:System.Drawing.Point" /> that contains the coordinates where you want to look for a control.</span></span> <span data-ttu-id="31784-1119">座標以和控制項工作區左上角相對的位置表示。</span><span class="sxs-lookup"><span data-stu-id="31784-1119">Coordinates are expressed relative to the upper-left corner of the control's client area.</span></span></param>
        <summary><span data-ttu-id="31784-1120">擷取位於指定座標的子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1120">Retrieves the child control that is located at the specified coordinates.</span></span></summary>
        <returns><span data-ttu-id="31784-1121"><see cref="T:System.Windows.Forms.Control" />，表示位於指定點上的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1121">A <see cref="T:System.Windows.Forms.Control" /> that represents the control that is located at the specified point.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1122">如果在指定的點，沒有任何子控制項<xref:System.Windows.Forms.Control.GetChildAtPoint%2A>方法會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="31784-1122">If there is no child control at the specified point, the <xref:System.Windows.Forms.Control.GetChildAtPoint%2A> method returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-1123">如果控制項傳回呼叫這個方法的所有視窗不是控制項的子系。</span><span class="sxs-lookup"><span data-stu-id="31784-1123">for all windows to call this method if the control returned is not a child of the control.</span></span> <span data-ttu-id="31784-1124">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1124">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="GetChildAtPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetChildAtPoint(valuetype System.Drawing.Point pt, valuetype System.Windows.Forms.GetChildAtPointSkip skipValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildAtPoint (pt As Point, skipValue As GetChildAtPointSkip) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Control ^ GetChildAtPoint(System::Drawing::Point pt, System::Windows::Forms::GetChildAtPointSkip skipValue);" />
      <MemberSignature Language="F#" Value="member this.GetChildAtPoint : System.Drawing.Point * System.Windows.Forms.GetChildAtPointSkip -&gt; System.Windows.Forms.Control" Usage="control.GetChildAtPoint (pt, skipValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
        <Parameter Name="skipValue" Type="System.Windows.Forms.GetChildAtPointSkip" />
      </Parameters>
      <Docs>
        <param name="pt"><span data-ttu-id="31784-1125"><see cref="T:System.Drawing.Point" />，包含您要尋找控制項之處的座標。</span><span class="sxs-lookup"><span data-stu-id="31784-1125">A <see cref="T:System.Drawing.Point" /> that contains the coordinates where you want to look for a control.</span></span> <span data-ttu-id="31784-1126">座標以和控制項工作區左上角相對的位置表示。</span><span class="sxs-lookup"><span data-stu-id="31784-1126">Coordinates are expressed relative to the upper-left corner of the control's client area.</span></span></param>
        <param name="skipValue"><span data-ttu-id="31784-1127">其中一個 <see cref="T:System.Windows.Forms.GetChildAtPointSkip" /> 值，可決定是否要忽略特定類型的子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1127">One of the values of <see cref="T:System.Windows.Forms.GetChildAtPointSkip" />, determining whether to ignore child controls of a certain type.</span></span></param>
        <summary><span data-ttu-id="31784-1128">擷取位於指定座標上的子控制項，指定是否要忽略特定類型的子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1128">Retrieves the child control that is located at the specified coordinates, specifying whether to ignore child controls of a certain type.</span></span></summary>
        <returns><span data-ttu-id="31784-1129">在指定座標上的子 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1129">The child <see cref="T:System.Windows.Forms.Control" /> at the specified coordinates.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IContainerControl GetContainerControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.IContainerControl GetContainerControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetContainerControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContainerControl () As IContainerControl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::IContainerControl ^ GetContainerControl();" />
      <MemberSignature Language="F#" Value="member this.GetContainerControl : unit -&gt; System.Windows.Forms.IContainerControl" Usage="control.GetContainerControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IContainerControl</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-1130">傳回父控制項的控制項鏈結上的下一個 <see cref="T:System.Windows.Forms.ContainerControl" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1130">Returns the next <see cref="T:System.Windows.Forms.ContainerControl" /> up the control's chain of parent controls.</span></span></summary>
        <returns><span data-ttu-id="31784-1131"><see cref="T:System.Windows.Forms.IContainerControl" />，表示 <see cref="T:System.Windows.Forms.Control" /> 的父代。</span><span class="sxs-lookup"><span data-stu-id="31784-1131">An <see cref="T:System.Windows.Forms.IContainerControl" />, that represents the parent of the <see cref="T:System.Windows.Forms.Control" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-1132">呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-1132">for all windows to call this method.</span></span> <span data-ttu-id="31784-1133">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1133">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
        <altmember cref="T:System.Windows.Forms.IContainerControl" />
      </Docs>
    </Member>
    <Member MemberName="GetNextControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetNextControl (System.Windows.Forms.Control ctl, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetNextControl(class System.Windows.Forms.Control ctl, bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextControl (ctl As Control, forward As Boolean) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Control ^ GetNextControl(System::Windows::Forms::Control ^ ctl, bool forward);" />
      <MemberSignature Language="F#" Value="member this.GetNextControl : System.Windows.Forms.Control * bool -&gt; System.Windows.Forms.Control" Usage="control.GetNextControl (ctl, forward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ctl"><span data-ttu-id="31784-1134">要做為搜尋起點的 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1134">The <see cref="T:System.Windows.Forms.Control" /> to start the search with.</span></span></param>
        <param name="forward"><span data-ttu-id="31784-1135"><see langword="true" /> 表示在定位順序中向前搜尋。<see langword="false" /> 表示向後搜尋。</span><span class="sxs-lookup"><span data-stu-id="31784-1135"><see langword="true" /> to search forward in the tab order; <see langword="false" /> to search backward.</span></span></param>
        <summary><span data-ttu-id="31784-1136">擷取子控制項定位順序中前後的下一個控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1136">Retrieves the next control forward or back in the tab order of child controls.</span></span></summary>
        <returns><span data-ttu-id="31784-1137">定位順序中的下一個 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1137">The next <see cref="T:System.Windows.Forms.Control" /> in the tab order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1138"><xref:System.Windows.Forms.Control.GetNextControl%2A>方法，是根據索引標籤順序。</span><span class="sxs-lookup"><span data-stu-id="31784-1138">The <xref:System.Windows.Forms.Control.GetNextControl%2A> method is dependent on tab order.</span></span> <span data-ttu-id="31784-1139">若要逐一查看所有控制項的表單，包括巢狀的控制項，使用<xref:System.Windows.Forms.Control.Controls%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1139">To iterate through all controls of a form, including nested controls, use the <xref:System.Windows.Forms.Control.Controls%2A> property.</span></span> <span data-ttu-id="31784-1140">若要取得或設定容器控制項的作用中的控制項，使用<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1140">To get or set the active control of a container control, use the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="GetPreferredSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size GetPreferredSize (System.Drawing.Size proposedSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.Size GetPreferredSize(valuetype System.Drawing.Size proposedSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPreferredSize (proposedSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Drawing::Size GetPreferredSize(System::Drawing::Size proposedSize);" />
      <MemberSignature Language="F#" Value="abstract member GetPreferredSize : System.Drawing.Size -&gt; System.Drawing.Size&#xA;override this.GetPreferredSize : System.Drawing.Size -&gt; System.Drawing.Size" Usage="control.GetPreferredSize proposedSize" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Layout.IArrangedElement.GetPreferredSize(System.Drawing.Size)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proposedSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="proposedSize"><span data-ttu-id="31784-1141">控制項的自訂大小區域。</span><span class="sxs-lookup"><span data-stu-id="31784-1141">The custom-sized area for a control.</span></span></param>
        <summary><span data-ttu-id="31784-1142">擷取可容納控制項之矩形區域的大小。</span><span class="sxs-lookup"><span data-stu-id="31784-1142">Retrieves the size of a rectangular area into which a control can be fitted.</span></span></summary>
        <returns><span data-ttu-id="31784-1143"><see cref="T:System.Drawing.Size" /> 類型的排序配對，代表矩形的寬度與高度。</span><span class="sxs-lookup"><span data-stu-id="31784-1143">An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1144">行為<xref:System.Windows.Forms.Control.GetPreferredSize%2A>不同的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1144">The behavior of <xref:System.Windows.Forms.Control.GetPreferredSize%2A> differs by control.</span></span> <span data-ttu-id="31784-1145"><xref:System.Windows.Forms.Control.LayoutEngine%2A>可能無法傳回的大小指派給控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1145">The <xref:System.Windows.Forms.Control.LayoutEngine%2A> might be unable to assign the returned size to the control.</span></span> <span data-ttu-id="31784-1146">您可以傳回的大小大於中指出的條件約束`proposedSize`參數，但`proposedSize`應該降低為條件約束則會減少。</span><span class="sxs-lookup"><span data-stu-id="31784-1146">You can return a size larger than the constraints indicated in the `proposedSize` parameter, but `proposedSize` should decrease as the constraint decreases.</span></span> <span data-ttu-id="31784-1147">例如，`GetPreferredSize(new Size(100, 0))`不能大於`GetPreferredSize(new Size(200, 0))`。</span><span class="sxs-lookup"><span data-stu-id="31784-1147">For example, `GetPreferredSize(new Size(100, 0))` should not be wider than `GetPreferredSize(new Size(200, 0))`.</span></span> <span data-ttu-id="31784-1148">例外狀況是`proposedSize`為 0 或`Size.Empty`，這會定義為非限制。</span><span class="sxs-lookup"><span data-stu-id="31784-1148">The exception is a `proposedSize` of 0 or `Size.Empty`, which are defined as unconstrained.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScaledBounds">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Rectangle GetScaledBounds(valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetScaledBounds (bounds As Rectangle, factor As SizeF, specified As BoundsSpecified) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Drawing::Rectangle GetScaledBounds(System::Drawing::Rectangle bounds, System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="abstract member GetScaledBounds : System.Drawing.Rectangle * System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; System.Drawing.Rectangle&#xA;override this.GetScaledBounds : System.Drawing.Rectangle * System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; System.Drawing.Rectangle" Usage="control.GetScaledBounds (bounds, factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="bounds"><span data-ttu-id="31784-1149"><see cref="T:System.Drawing.Rectangle" />，指定要為其擷取顯示範圍的區域。</span><span class="sxs-lookup"><span data-stu-id="31784-1149">A <see cref="T:System.Drawing.Rectangle" /> that specifies the area for which to retrieve the display bounds.</span></span></param>
        <param name="factor"><span data-ttu-id="31784-1150">控制項範圍的高度和寬度。</span><span class="sxs-lookup"><span data-stu-id="31784-1150">The height and width of the control's bounds.</span></span></param>
        <param name="specified"><span data-ttu-id="31784-1151">其中一個 <see cref="T:System.Windows.Forms.BoundsSpecified" /> 值，指定在定義控制項的大小和位置時所用的控制項範圍。</span><span class="sxs-lookup"><span data-stu-id="31784-1151">One of the values of <see cref="T:System.Windows.Forms.BoundsSpecified" /> that specifies the bounds of the control to use when defining its size and position.</span></span></param>
        <summary><span data-ttu-id="31784-1152">擷取縮放控制項的範圍。</span><span class="sxs-lookup"><span data-stu-id="31784-1152">Retrieves the bounds within which the control is scaled.</span></span></summary>
        <returns><span data-ttu-id="31784-1153"><see cref="T:System.Drawing.Rectangle" />，表示縮放控制項的範圍。</span><span class="sxs-lookup"><span data-stu-id="31784-1153">A <see cref="T:System.Drawing.Rectangle" /> representing the bounds within which the control is scaled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1154">這是 helper 方法，由呼叫<xref:System.Windows.Forms.Control.ScaleControl%2A>擷取縮放控制項的界限。</span><span class="sxs-lookup"><span data-stu-id="31784-1154">This is a helper method that is called by <xref:System.Windows.Forms.Control.ScaleControl%2A> to retrieve the bounds within which the control is scaled.</span></span> <span data-ttu-id="31784-1155">您可以覆寫這個方法，以重複使用<xref:System.Windows.Forms.Control.ScaleControl%2A>縮放邏輯，但您必須提供您自己的界限。</span><span class="sxs-lookup"><span data-stu-id="31784-1155">You can override this method to reuse the <xref:System.Windows.Forms.Control.ScaleControl%2A> scaling logic, but you must supply your own bounds.</span></span> <span data-ttu-id="31784-1156">預設實作會傳回縮放的範圍考量`specified`中繫結，控制項是否為最上層，是否控制項固定寬度或自動調整大小的控制項可能會有任何裝飾。</span><span class="sxs-lookup"><span data-stu-id="31784-1156">The default implementation returns scaled bounds that take into account the `specified` bounds, whether the control is top level, whether the control is fixed width or auto size, and any adornments the control might have.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.Scale(System.Single)" />
        <altmember cref="P:System.Windows.Forms.Control.ScaleChildren" />
      </Docs>
    </Member>
    <Member MemberName="GetStyle">
      <MemberSignature Language="C#" Value="protected bool GetStyle (System.Windows.Forms.ControlStyles flag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool GetStyle(valuetype System.Windows.Forms.ControlStyles flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyle (flag As ControlStyles) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool GetStyle(System::Windows::Forms::ControlStyles flag);" />
      <MemberSignature Language="F#" Value="member this.GetStyle : System.Windows.Forms.ControlStyles -&gt; bool" Usage="control.GetStyle flag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Windows.Forms.ControlStyles" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="31784-1157">要傳回值的來源 <see cref="T:System.Windows.Forms.ControlStyles" /> 位元。</span><span class="sxs-lookup"><span data-stu-id="31784-1157">The <see cref="T:System.Windows.Forms.ControlStyles" /> bit to return the value from.</span></span></param>
        <summary><span data-ttu-id="31784-1158">擷取控制項指定控制項樣式位元的值。</span><span class="sxs-lookup"><span data-stu-id="31784-1158">Retrieves the value of the specified control style bit for the control.</span></span></summary>
        <returns><span data-ttu-id="31784-1159">如果指定的控制項樣式位元設定為 <see langword="true" />，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1159"><see langword="true" /> if the specified control style bit is set to <see langword="true" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1160">控制項樣式位元旗標用來支援的行為分類。</span><span class="sxs-lookup"><span data-stu-id="31784-1160">Control style bit flags are used to categorize supported behavior.</span></span> <span data-ttu-id="31784-1161">控制項可以藉由呼叫啟用樣式<xref:System.Windows.Forms.Control.SetStyle%2A>方法並傳入適當<xref:System.Windows.Forms.ControlStyles>位元和設定位元的布林值。</span><span class="sxs-lookup"><span data-stu-id="31784-1161">A control can enable a style by calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method and passing in the appropriate <xref:System.Windows.Forms.ControlStyles> bit and the Boolean value to set the bit to.</span></span> <span data-ttu-id="31784-1162">若要判斷指派給指定的值<xref:System.Windows.Forms.ControlStyles>位元，請使用<xref:System.Windows.Forms.Control.GetStyle%2A>方法並傳入<xref:System.Windows.Forms.ControlStyles>成員來評估。</span><span class="sxs-lookup"><span data-stu-id="31784-1162">To determine the value assigned to a specified <xref:System.Windows.Forms.ControlStyles> bit, use the <xref:System.Windows.Forms.Control.GetStyle%2A> method and pass in the <xref:System.Windows.Forms.ControlStyles> member to evaluate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1163">下列程式碼範例會傳回用於位元的雙重緩衝的樣式相關值<xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="31784-1163">The following code example returns the value of the double-buffering related style bits for a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="31784-1164">這個範例會傳回`true`只有當所有樣式位元會都設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-1164">This example returns `true` only if all the style bits are set to `true`.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#4)]
 [!code-csharp[Windows.Forms.ControlMembers6#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#4)]
 [!code-vb[Windows.Forms.ControlMembers6#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="GetTopLevel">
      <MemberSignature Language="C#" Value="protected bool GetTopLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool GetTopLevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetTopLevel" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetTopLevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool GetTopLevel();" />
      <MemberSignature Language="F#" Value="member this.GetTopLevel : unit -&gt; bool" Usage="control.GetTopLevel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-1165">判斷控制項是否為最上層控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1165">Determines if the control is a top-level control.</span></span></summary>
        <returns><span data-ttu-id="31784-1166">如果控制項是最上層控制項，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1166"><see langword="true" /> if the control is a top-level control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.Forms.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.Forms.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1167">發生於拖曳作業時。</span><span class="sxs-lookup"><span data-stu-id="31784-1167">Occurs during a drag operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1168"><xref:System.Windows.Forms.Control.GiveFeedback>拖放作業開始時，就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1168">The <xref:System.Windows.Forms.Control.GiveFeedback> event is raised when a drag-and-drop operation is started.</span></span> <span data-ttu-id="31784-1169">與<xref:System.Windows.Forms.Control.GiveFeedback>事件的拖曳事件來源可以修改滑鼠指標外觀才能將使用者視覺化回應提供拖放作業期間。</span><span class="sxs-lookup"><span data-stu-id="31784-1169">With the <xref:System.Windows.Forms.Control.GiveFeedback> event, the source of a drag event can modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="31784-1170">以下描述與拖放作業相關的事件，其引發的方法與時機。</span><span class="sxs-lookup"><span data-stu-id="31784-1170">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="31784-1171"><xref:System.Windows.Forms.Control.DoDragDrop%2A>方法會判斷目前的游標位置下的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1171">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="31784-1172">接著會檢查此控制項是否為有效的置放目標。</span><span class="sxs-lookup"><span data-stu-id="31784-1172">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="31784-1173">如果控制項為有效的置放目標，<xref:System.Windows.Forms.Control.GiveFeedback>指定的拖放效果引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1173">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="31784-1174">如需拖放效果的清單，請參閱 <xref:System.Windows.Forms.DragDropEffects> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="31784-1174">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="31784-1175">系統會追蹤滑鼠游標位置、鍵盤狀態和滑鼠按鈕狀態的變更。</span><span class="sxs-lookup"><span data-stu-id="31784-1175">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="31784-1176">如果使用者移出視窗外，便會引發 <xref:System.Windows.Forms.Control.DragLeave> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1176">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="31784-1177">如果滑鼠進入另一個控制項，便會引發該控制項的 <xref:System.Windows.Forms.Control.DragEnter> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1177">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="31784-1178">如果滑鼠移動，但是待在相同的控制項內，便會引發 <xref:System.Windows.Forms.Control.DragOver> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1178">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="31784-1179">如果沒有鍵盤或滑鼠按鈕狀態變更<xref:System.Windows.Forms.Control.QueryContinueDrag>引發事件，並決定是否要繼續拖曳、 置放資料，或取消作業的值<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>的事件屬性<xref:System.Windows.Forms.QueryContinueDragEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="31784-1179">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="31784-1180">如果值<xref:System.Windows.Forms.DragAction>是`Continue`、<xref:System.Windows.Forms.Control.DragOver>就會引發事件，以繼續作業而<xref:System.Windows.Forms.Control.GiveFeedback>具有新效果就會引發事件，以便設定適當的視覺化回應。</span><span class="sxs-lookup"><span data-stu-id="31784-1180">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="31784-1181">如需有效置放效果的清單，請參閱 <xref:System.Windows.Forms.DragDropEffects> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="31784-1181">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="31784-1182"><xref:System.Windows.Forms.Control.DragOver>和<xref:System.Windows.Forms.Control.GiveFeedback>事件會經過配對，如此在滑鼠移動經過置放目標，不提供使用者最新的回應滑鼠的位置上。</span><span class="sxs-lookup"><span data-stu-id="31784-1182">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="31784-1183">如果值<xref:System.Windows.Forms.DragAction>是`Drop`，置放效果值會傳回來源，如此來源應用程式可以執行適當作業資料來源; 例如，如果剪下資料作業是移動。</span><span class="sxs-lookup"><span data-stu-id="31784-1183">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="31784-1184">如果值<xref:System.Windows.Forms.DragAction>是`Cancel`、<xref:System.Windows.Forms.Control.DragLeave>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1184">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
 <span data-ttu-id="31784-1185">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1185">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1186">下列程式碼範例示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1186">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="31784-1187">範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>時拖曳動作開始的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1187">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="31784-1188">如果已移動滑鼠拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1188">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="31784-1189"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來決定要在拖曳的項目索引`MouseDown`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1189">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="31784-1190">此範例也示範如何使用自訂游標拖放作業。</span><span class="sxs-lookup"><span data-stu-id="31784-1190">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="31784-1191">這個範例需要有兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`、 自訂拖放到的應用程式目錄，存在於和不置放資料指標，分別。</span><span class="sxs-lookup"><span data-stu-id="31784-1191">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="31784-1192">如果使用自訂游標`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。</span><span class="sxs-lookup"><span data-stu-id="31784-1192">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="31784-1193">自訂的資料指標中所設定<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1193">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="31784-1194">鍵盤的狀態會在評估<xref:System.Windows.Forms.Control.DragOver>右邊的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵的狀態。</span><span class="sxs-lookup"><span data-stu-id="31784-1194">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="31784-1195">中的位置`ListBox`期間也決定會卸除`DragOver`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1195">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="31784-1196">如果要卸除的資料不是`String`，然後在<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設`None`中<xref:System.Windows.Forms.DragDropEffects>。</span><span class="sxs-lookup"><span data-stu-id="31784-1196">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="31784-1197">最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。</span><span class="sxs-lookup"><span data-stu-id="31784-1197">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="31784-1198">若要提供的權限卸除資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`中適當的位置加入值`ListBox`。</span><span class="sxs-lookup"><span data-stu-id="31784-1198">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="31784-1199">如果在拖曳作業移動超出界限的表單，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1199">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="31784-1200">此程式碼摘錄示範如何使用<xref:System.Windows.Forms.Control.GiveFeedback>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1200">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.GiveFeedback> event.</span></span> <span data-ttu-id="31784-1201">請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整程式碼範例的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1201">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event EventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : EventHandler " Usage="member this.GotFocus : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1202">發生於控制項取得焦點時。</span><span class="sxs-lookup"><span data-stu-id="31784-1202">Occurs when the control receives focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1203">當您藉由呼叫中使用鍵盤 （TAB、 SHIFT + TAB，等等） 變更焦點時<xref:System.Windows.Forms.Control.Select%2A>或<xref:System.Windows.Forms.Control.SelectNextControl%2A>方法，或藉由設定<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType>屬性目前的表單，焦點事件會發生順序如下：</span><span class="sxs-lookup"><span data-stu-id="31784-1203">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="31784-1204">當您將焦點變更使用滑鼠或藉由呼叫<xref:System.Windows.Forms.Control.Focus%2A>方法，焦點事件會依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-1204">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="31784-1205">如果<xref:System.Windows.Forms.Control.CausesValidation%2A>屬性設定為`false`、<xref:System.Windows.Forms.Control.Validating>和<xref:System.Windows.Forms.Control.Validated>事件都會被隱藏。</span><span class="sxs-lookup"><span data-stu-id="31784-1205">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="31784-1206">**請注意**<xref:System.Windows.Forms.Control.GotFocus>和<xref:System.Windows.Forms.Control.LostFocus>事件是低階的焦點事件會繫結至 WM_KILLFOCUS 和 WM_SETFOCUS Windows 訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-1206">**Note** The <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages.</span></span> <span data-ttu-id="31784-1207">一般而言，<xref:System.Windows.Forms.Control.GotFocus>和<xref:System.Windows.Forms.Control.LostFocus>更新時，才會使用事件<xref:System.Windows.Forms.UICues>或撰寫自訂控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-1207">Typically, the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are only used when updating <xref:System.Windows.Forms.UICues> or when writing custom controls.</span></span> <span data-ttu-id="31784-1208">改為<xref:System.Windows.Forms.Control.Enter>和<xref:System.Windows.Forms.Control.Leave>事件應該可用於所有的控制項，除了<xref:System.Windows.Forms.Form>類別，它會使用<xref:System.Windows.Forms.Form.Activated>和<xref:System.Windows.Forms.Form.Deactivate>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1208">Instead the <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events should be used for all controls except the <xref:System.Windows.Forms.Form> class, which uses the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="31784-1209">如需有關<xref:System.Windows.Forms.Control.GotFocus>和<xref:System.Windows.Forms.Control.LostFocus>事件，請參閱[WM_SETFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646283\(v=vs.85\).aspx)和[WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)主題。</span><span class="sxs-lookup"><span data-stu-id="31784-1209">For more information about the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events, see the [WM_SETFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646283\(v=vs.85\).aspx)and[WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topics.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="31784-1210">請勿嘗試將焦點設在<xref:System.Windows.Forms.Control.Enter>， <xref:System.Windows.Forms.Control.GotFocus>， <xref:System.Windows.Forms.Control.Leave>， <xref:System.Windows.Forms.Control.LostFocus>， <xref:System.Windows.Forms.Control.Validating>，或<xref:System.Windows.Forms.Control.Validated>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1210">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="31784-1211">如此一來，可能會導致您的應用程式或作業系統停止回應。</span><span class="sxs-lookup"><span data-stu-id="31784-1211">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="31784-1212">如需詳細資訊，請參閱[WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)主題。</span><span class="sxs-lookup"><span data-stu-id="31784-1212">For more information, see the [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="31784-1213">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1213">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1214">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-1214">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-1215">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.GotFocus>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1215">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.GotFocus> event.</span></span> <span data-ttu-id="31784-1216">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-1216">This report helps you to learn when the event occurs and can assist you in debugging.</span></span>  
  
 <span data-ttu-id="31784-1217">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1217">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-1218">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.GotFocus>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1218">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.GotFocus> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#47)]
 [!code-vb[System.Windows.Forms.EventExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#47)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
        <altmember cref="E:System.Windows.Forms.Form.Activated" />
        <altmember cref="M:System.Windows.Forms.Form.Activate" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.Control.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-515)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1219">取得控制項要繫結的目標視窗控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-1219">Gets the window handle that the control is bound to.</span></span></summary>
        <value><span data-ttu-id="31784-1220"><see cref="T:System.IntPtr" />，包含控制項的視窗控制代碼 (<see langword="HWND" />)。</span><span class="sxs-lookup"><span data-stu-id="31784-1220">An <see cref="T:System.IntPtr" /> that contains the window handle (<see langword="HWND" />) of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1221">值<xref:System.Windows.Forms.Control.Handle%2A>屬性是一種 Windows `HWND`。</span><span class="sxs-lookup"><span data-stu-id="31784-1221">The value of the <xref:System.Windows.Forms.Control.Handle%2A> property is a Windows `HWND`.</span></span> <span data-ttu-id="31784-1222">如果尚未建立控制代碼，則參考這個屬性會強制建立控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-1222">If the handle has not yet been created, referencing this property will force the handle to be created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1223">下列程式碼範例示範如何使用<xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.Control.Handle%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1223">The following code example demonstrates using the <xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A?displayProperty=nameWithType> and the <xref:System.Windows.Forms.Control.Handle%2A> property.</span></span> <span data-ttu-id="31784-1224">若要在表單中執行範例貼上下列程式碼。</span><span class="sxs-lookup"><span data-stu-id="31784-1224">To run the example paste the following code in a form.</span></span> <span data-ttu-id="31784-1225">加入名為兩個按鈕`Button1`和`Button2`至表單，並確定所有事件都已都連接至其事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1225">Add two buttons named `Button1` and `Button2` to the form and ensure all events are connected to their event handlers.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HandleCreated">
      <MemberSignature Language="C#" Value="public event EventHandler HandleCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HandleCreated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HandleCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HandleCreated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HandleCreated;" />
      <MemberSignature Language="F#" Value="member this.HandleCreated : EventHandler " Usage="member this.HandleCreated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1226">發生於為控制項建立控制代碼時。</span><span class="sxs-lookup"><span data-stu-id="31784-1226">Occurs when a handle is created for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1227">控制代碼時，會建立<xref:System.Windows.Forms.Control>顯示第一次。</span><span class="sxs-lookup"><span data-stu-id="31784-1227">A handle is created when the <xref:System.Windows.Forms.Control> is displayed for the first time.</span></span> <span data-ttu-id="31784-1228">比方說，如果<xref:System.Windows.Forms.Control>會建立具有<xref:System.Windows.Forms.Control.Visible%2A>設`false`、<xref:System.Windows.Forms.Control.HandleCreated>事件將不會引發<xref:System.Windows.Forms.Control.Visible%2A>設`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-1228">For example, if a <xref:System.Windows.Forms.Control> is created that has <xref:System.Windows.Forms.Control.Visible%2A> set to `false`, the <xref:System.Windows.Forms.Control.HandleCreated> event will not be raised until <xref:System.Windows.Forms.Control.Visible%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="31784-1229">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1229">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1230">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-1230">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-1231">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.HandleCreated>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1231">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.HandleCreated> event.</span></span> <span data-ttu-id="31784-1232">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-1232">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-1233">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1233">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-1234">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1234">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-1235">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.HandleCreated>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1235">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.HandleCreated> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#37)]
 [!code-vb[System.Windows.Forms.EventExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HandleDestroyed">
      <MemberSignature Language="C#" Value="public event EventHandler HandleDestroyed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HandleDestroyed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HandleDestroyed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HandleDestroyed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HandleDestroyed;" />
      <MemberSignature Language="F#" Value="member this.HandleDestroyed : EventHandler " Usage="member this.HandleDestroyed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1236">發生於終結控制項的控制代碼時。</span><span class="sxs-lookup"><span data-stu-id="31784-1236">Occurs when the control's handle is in the process of being destroyed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1237">期間<xref:System.Windows.Forms.Control.HandleDestroyed>事件，控制項仍然是有效的 Windows 控制項和<xref:System.Windows.Forms.Control.Handle%2A>可以藉由呼叫重建<xref:System.Windows.Forms.Control.RecreateHandle%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1237">During the <xref:System.Windows.Forms.Control.HandleDestroyed> event, the control is still a valid Windows control and the <xref:System.Windows.Forms.Control.Handle%2A> can be recreated by calling the <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.</span></span>  
  
 <span data-ttu-id="31784-1238">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1238">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1239">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-1239">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-1240">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.HandleDestroyed>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1240">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.HandleDestroyed> event.</span></span> <span data-ttu-id="31784-1241">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-1241">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-1242">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1242">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-1243">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1243">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-1244">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.HandleDestroyed>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1244">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.HandleDestroyed> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#38)]
 [!code-vb[System.Windows.Forms.EventExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HasChildren">
      <MemberSignature Language="C#" Value="public bool HasChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.HasChildren" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChildren { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChildren : bool" Usage="System.Windows.Forms.Control.HasChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1245">取得指示控制項是否包含一或多個子控制項的值。</span><span class="sxs-lookup"><span data-stu-id="31784-1245">Gets a value indicating whether the control contains one or more child controls.</span></span></summary>
        <value><span data-ttu-id="31784-1246">如果控制項包含一或多個子控制項，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1246"><see langword="true" /> if the control contains one or more child controls; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1247">如果<xref:System.Windows.Forms.Control.Controls%2A>集合具有<xref:System.Windows.Forms.Layout.ArrangedElementCollection.Count%2A>小於或等於零，<xref:System.Windows.Forms.Control.HasChildren%2A>屬性會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-1247">If the <xref:System.Windows.Forms.Control.Controls%2A> collection has a <xref:System.Windows.Forms.Layout.ArrangedElementCollection.Count%2A> greater than zero, the <xref:System.Windows.Forms.Control.HasChildren%2A> property will return `true`.</span></span> <span data-ttu-id="31784-1248">存取<xref:System.Windows.Forms.Control.HasChildren%2A>屬性不會強制建立<xref:System.Windows.Forms.Control.ControlCollection>如果控制項有沒有子系，因此參考這個屬性可提供效能優勢時查核樹狀結構的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1248">Accessing the <xref:System.Windows.Forms.Control.HasChildren%2A> property does not force the creation of a <xref:System.Windows.Forms.Control.ControlCollection> if the control has no children, so referencing this property can provide a performance benefit when walking a tree of controls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1249">下列程式碼範例會設定<xref:System.Windows.Forms.Control.BackColor%2A>和<xref:System.Windows.Forms.Control.ForeColor%2A>預設系統色彩的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1249">The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors.</span></span> <span data-ttu-id="31784-1250">如果控制項的任何子控制項，則程式碼以遞迴方式呼叫其本身。</span><span class="sxs-lookup"><span data-stu-id="31784-1250">The code recursively calls itself if the control has any child controls.</span></span> <span data-ttu-id="31784-1251">這個程式碼範例需要您具有<xref:System.Windows.Forms.Form>與至少一個子系控制項; 不過，子容器控制，例如<xref:System.Windows.Forms.Panel>或<xref:System.Windows.Forms.GroupBox>，使用自己的子系控制項會進一步示範遞迴。</span><span class="sxs-lookup"><span data-stu-id="31784-1251">This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Layout.ArrangedElementCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Height { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Height : int with get, set" Usage="System.Windows.Forms.Control.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1252">取得或設定控制項的高度。</span><span class="sxs-lookup"><span data-stu-id="31784-1252">Gets or sets the height of the control.</span></span></summary>
        <value><span data-ttu-id="31784-1253">控制項的高度 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-1253">The height of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1254">所做的變更<xref:System.Windows.Forms.Control.Height%2A>和<xref:System.Windows.Forms.Control.Top%2A>屬性值會使<xref:System.Windows.Forms.Control.Bottom%2A>變更控制項的屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-1254">Changes made to the <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Top%2A> property values cause the <xref:System.Windows.Forms.Control.Bottom%2A> property value of the control to change.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1255">衍生的控制項的最小高度<xref:System.Windows.Forms.Splitter>是一個像素。</span><span class="sxs-lookup"><span data-stu-id="31784-1255">The minimum height for the derived control <xref:System.Windows.Forms.Splitter> is one pixel.</span></span> <span data-ttu-id="31784-1256">預設高度<xref:System.Windows.Forms.Splitter>控制項是三個像素為單位。</span><span class="sxs-lookup"><span data-stu-id="31784-1256">The default height for the <xref:System.Windows.Forms.Splitter> control is three pixels.</span></span> <span data-ttu-id="31784-1257">設定的高度<xref:System.Windows.Forms.Splitter>控制的值小於一將值重設屬性的預設高度。</span><span class="sxs-lookup"><span data-stu-id="31784-1257">Setting the height of the <xref:System.Windows.Forms.Splitter> control to a value less than one will reset the property value to the default height.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1258">下列程式碼範例會建立三個<xref:System.Windows.Forms.Button>表單上的控制項，並將其大小和位置設定使用的各種大小與和位置相關的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1258">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="31784-1259">這個範例需要您有<xref:System.Windows.Forms.Form>有寬度和高度的最少 300 像素為單位。</span><span class="sxs-lookup"><span data-stu-id="31784-1259">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="P:System.Windows.Forms.Control.Width" />
        <altmember cref="P:System.Drawing.Size.Height" />
      </Docs>
    </Member>
    <Member MemberName="HelpRequested">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HelpEventHandler HelpRequested;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HelpEventHandler HelpRequested" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HelpRequested" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HelpRequested As HelpEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HelpEventHandler ^ HelpRequested;" />
      <MemberSignature Language="F#" Value="member this.HelpRequested : System.Windows.Forms.HelpEventHandler " Usage="member this.HelpRequested : System.Windows.Forms.HelpEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HelpEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1260">發生於使用者要求控制項的說明時。</span><span class="sxs-lookup"><span data-stu-id="31784-1260">Occurs when the user requests help for a control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1261"><xref:System.Windows.Forms.Control.HelpRequested>使用者按下 F1 時，通常就會引發事件索引鍵或相關聯的即時線上說明 按鈕已按下。</span><span class="sxs-lookup"><span data-stu-id="31784-1261">The <xref:System.Windows.Forms.Control.HelpRequested> event is commonly raised when the user presses the F1 key or an associated context-sensitive help button is clicked.</span></span>  
  
 <span data-ttu-id="31784-1262">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1262">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1263">下列程式碼範例示範處理<xref:System.Windows.Forms.Control.HelpRequested>事件，以包含四個地址欄位的表單上顯示自訂的說明內容。</span><span class="sxs-lookup"><span data-stu-id="31784-1263">The following code example demonstrates handling the <xref:System.Windows.Forms.Control.HelpRequested> event to display custom Help content on a form containing four address fields.</span></span> <span data-ttu-id="31784-1264"><xref:System.Windows.Forms.Control.HelpRequested>按 F1 鍵將焦點放在 [位址] 欄位中，或使用 [即時線上說明] 按鈕，按一下 [位址] 欄位說明資料指標，就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1264">The <xref:System.Windows.Forms.Control.HelpRequested> event is raised either by pressing the F1 key with the focus in an address field, or by the using the context-sensitive Help button and clicking the Help cursor on an address field.</span></span> <span data-ttu-id="31784-1265"><xref:System.Windows.Forms.HelpEventArgs.Handled%2A>屬性設定為 true，表示`HelpRequested`處理事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1265">The <xref:System.Windows.Forms.HelpEventArgs.Handled%2A> property is set to true to indicate that the `HelpRequested` event is handled.</span></span> <span data-ttu-id="31784-1266">此範例也示範儲存中的說明文字<xref:System.Windows.Forms.Control.Tag%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1266">The example also demonstrates storing the Help text in the <xref:System.Windows.Forms.Control.Tag%2A?displayProperty=nameWithType> property.</span></span>  
  
 [!code-cpp[System.Windows.Forms.HelpEventHandler#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/CPP/helpevent.cpp#1)]
 [!code-csharp[System.Windows.Forms.HelpEventHandler#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/CS/helpevent.cs#1)]
 [!code-vb[System.Windows.Forms.HelpEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/VB/helpevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" />
        <altmember cref="T:System.Windows.Forms.HelpProvider" />
        <altmember cref="T:System.Windows.Forms.Help" />
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Hide" />
      <MemberSignature Language="VB.NET" Value="Public Sub Hide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Hide();" />
      <MemberSignature Language="F#" Value="member this.Hide : unit -&gt; unit" Usage="control.Hide " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-1267">對使用者隱藏控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1267">Conceals the control from the user.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1268">隱藏控制項相當於設定<xref:System.Windows.Forms.Control.Visible%2A>屬性`false`。</span><span class="sxs-lookup"><span data-stu-id="31784-1268">Hiding the control is equivalent to setting the <xref:System.Windows.Forms.Control.Visible%2A> property to `false`.</span></span> <span data-ttu-id="31784-1269">之後<xref:System.Windows.Forms.Control.Hide%2A>呼叫方法時，<xref:System.Windows.Forms.Control.Visible%2A>屬性會傳回值為`false`直到<xref:System.Windows.Forms.Control.Show%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-1269">After the <xref:System.Windows.Forms.Control.Hide%2A> method is called, the <xref:System.Windows.Forms.Control.Visible%2A> property returns a value of `false` until the <xref:System.Windows.Forms.Control.Show%2A> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1270">當按鈕按下 CTRL 鍵時，下列程式碼範例會隱藏按鈕。</span><span class="sxs-lookup"><span data-stu-id="31784-1270">The following code example hides a button if the CTRL key is pressed when the button is clicked.</span></span> <span data-ttu-id="31784-1271">這個範例需要您有<xref:System.Windows.Forms.Button>名為`button1`上<xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="31784-1271">This example requires that you have a <xref:System.Windows.Forms.Button> named `button1` on a <xref:System.Windows.Forms.Form>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members4#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#2)]
 [!code-vb[Windows.Forms.Control Members4#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Show" />
      </Docs>
    </Member>
    <Member MemberName="ImeMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImeMode ImeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode ImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ImeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ImeMode As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImeMode ImeMode { System::Windows::Forms::ImeMode get(); void set(System::Windows::Forms::ImeMode value); };" />
      <MemberSignature Language="F#" Value="member this.ImeMode : System.Windows.Forms.ImeMode with get, set" Usage="System.Windows.Forms.Control.ImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1272">取得或設定控制項的輸入法 (IME) 模式。</span><span class="sxs-lookup"><span data-stu-id="31784-1272">Gets or sets the Input Method Editor (IME) mode of the control.</span></span></summary>
        <value><span data-ttu-id="31784-1273">其中一個 <see cref="T:System.Windows.Forms.ImeMode" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-1273">One of the <see cref="T:System.Windows.Forms.ImeMode" /> values.</span></span> <span data-ttu-id="31784-1274">預設值為 <see cref="F:System.Windows.Forms.ImeMode.Inherit" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1274">The default is <see cref="F:System.Windows.Forms.ImeMode.Inherit" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1275">IME 是一種程式，可讓使用者輸入複雜字元和符號，例如日文漢字字元，使用標準鍵盤。</span><span class="sxs-lookup"><span data-stu-id="31784-1275">An IME is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, using a standard keyboard.</span></span> <span data-ttu-id="31784-1276"><xref:System.Windows.Forms.Control.ImeMode%2A>屬性通常會設定為<xref:System.Windows.Forms.ImeMode.Off?displayProperty=nameWithType>如<xref:System.Windows.Forms.TextBox>旨在只有輸入數字值的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1276">The <xref:System.Windows.Forms.Control.ImeMode%2A> property is typically set to <xref:System.Windows.Forms.ImeMode.Off?displayProperty=nameWithType> for a <xref:System.Windows.Forms.TextBox> control that is intended to only enter numeric values.</span></span> <span data-ttu-id="31784-1277"><xref:System.Windows.Forms.Control.ImeMode%2A>屬性值設定為<xref:System.Windows.Forms.ImeMode.NoControl?displayProperty=nameWithType>如<xref:System.Windows.Forms.Form>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1277">The <xref:System.Windows.Forms.Control.ImeMode%2A> property value is set to <xref:System.Windows.Forms.ImeMode.NoControl?displayProperty=nameWithType> for the <xref:System.Windows.Forms.Form> class.</span></span>  
  
 <span data-ttu-id="31784-1278">大部分的類別不直接支援輸入法編輯器，或允許從 IME，直接輸入將會設定這個屬性的值<xref:System.Windows.Forms.ImeMode.NoControl>。</span><span class="sxs-lookup"><span data-stu-id="31784-1278">Most classes that do not directly support Input Method Editors, or allow direct input from an IME, will set the value of this property to <xref:System.Windows.Forms.ImeMode.NoControl>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="31784-1279">使用者可以互動方式變更<xref:System.Windows.Forms.Control.ImeMode%2A>除非它已透過程式設計方式設定為<xref:System.Windows.Forms.ImeMode.Disable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="31784-1279">The user can interactively change the <xref:System.Windows.Forms.Control.ImeMode%2A> unless it has been programmatically set to <xref:System.Windows.Forms.ImeMode.Disable?displayProperty=nameWithType>.</span></span> <span data-ttu-id="31784-1280">在此情況下，使用者將無法使用輸入法。</span><span class="sxs-lookup"><span data-stu-id="31784-1280">In this case, the user will not be able to use the IME.</span></span>  
>   
>  <span data-ttu-id="31784-1281"><xref:System.Windows.Forms.Control.ImeMode%2A>全域的輸入的模式作用時，將會忽略在 Windows 8 上的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1281">The <xref:System.Windows.Forms.Control.ImeMode%2A> property is ignored on Windows 8 when the global input mode is in effect.</span></span> <span data-ttu-id="31784-1282">如需詳細資訊，請參閱[交換器文字輸入從變更每個執行緒為每個使用者](http://go.microsoft.com/fwlink/?LinkID=256509)。</span><span class="sxs-lookup"><span data-stu-id="31784-1282">For more info, see [Switch Text Input Changed from Per-Thread to Per-User](http://go.microsoft.com/fwlink/?LinkID=256509).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="31784-1283">所指派的值不是其中一個 <see cref="T:System.Windows.Forms.ImeMode" /> 列舉值。</span><span class="sxs-lookup"><span data-stu-id="31784-1283">The assigned value is not one of the <see cref="T:System.Windows.Forms.ImeMode" /> enumeration values.</span></span></exception>
        <altmember cref="T:System.Windows.Forms.ImeMode" />
        <altmember cref="P:System.Windows.Forms.Control.DefaultImeMode" />
      </Docs>
    </Member>
    <Member MemberName="ImeModeBase">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ImeMode ImeModeBase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode ImeModeBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ImeModeBase" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property ImeModeBase As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::ImeMode ImeModeBase { System::Windows::Forms::ImeMode get(); void set(System::Windows::Forms::ImeMode value); };" />
      <MemberSignature Language="F#" Value="member this.ImeModeBase : System.Windows.Forms.ImeMode with get, set" Usage="System.Windows.Forms.Control.ImeModeBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1284">取得或設定控制項的 IME 模式。</span><span class="sxs-lookup"><span data-stu-id="31784-1284">Gets or sets the IME mode of a control.</span></span></summary>
        <value><span data-ttu-id="31784-1285">控制項的 IME 模式。</span><span class="sxs-lookup"><span data-stu-id="31784-1285">The IME mode of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImeModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ImeModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ImeModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ImeModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ImeModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ImeModeChanged;" />
      <MemberSignature Language="F#" Value="member this.ImeModeChanged : EventHandler " Usage="member this.ImeModeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1286">發生於 <see cref="P:System.Windows.Forms.Control.ImeMode" /> 屬性變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-1286">Occurs when the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1287">如果會引發這個事件<xref:System.Windows.Forms.Control.ImeMode%2A>屬性變更時以程式設計方式修改或透過互動。</span><span class="sxs-lookup"><span data-stu-id="31784-1287">This event is raised if the <xref:System.Windows.Forms.Control.ImeMode%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="31784-1288">控制項不支援輸入法管理員一定不會引發這個事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1288">Controls that do not support Input Method Managers will never raise this event.</span></span>  
  
 <span data-ttu-id="31784-1289">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1289">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1290">下列程式碼範例會為事件處理常式時執行<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-1290">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-1291"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式*PropertyName* `Changed`所引發的時機對應*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-1291">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-1292">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1292">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="31784-1293">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-1293">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-1294">這個範例需要您有<xref:System.Windows.Forms.Form>包含<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1294">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
        <altmember cref="T:System.Windows.Forms.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="InitLayout">
      <MemberSignature Language="C#" Value="protected virtual void InitLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InitLayout" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitLayout ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitLayout();" />
      <MemberSignature Language="F#" Value="abstract member InitLayout : unit -&gt; unit&#xA;override this.InitLayout : unit -&gt; unit" Usage="control.InitLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-1295">在控制項加入其他容器後呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-1295">Called after the control has been added to another container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1296"><xref:System.Windows.Forms.Control.InitLayout%2A>將控制項加入至容器之後，立即呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1296">The <xref:System.Windows.Forms.Control.InitLayout%2A> method is called immediately after adding a control to a container.</span></span> <span data-ttu-id="31784-1297"><xref:System.Windows.Forms.Control.InitLayout%2A>方法可讓初始化其配置狀態，根據其容器的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1297">The <xref:System.Windows.Forms.Control.InitLayout%2A> method enables a control to initialize its layout state based on its container.</span></span> <span data-ttu-id="31784-1298">例如，您通常套用錨定和停駐到中的控制項<xref:System.Windows.Forms.Control.InitLayout%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1298">For example, you would typically apply anchoring and docking to the control in the <xref:System.Windows.Forms.Control.InitLayout%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1299"><para>在覆寫<see cref="M:System.Windows.Forms.Control.InitLayout" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.InitLayout" />方法，以便正確顯示控制項。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1299"><para>When overriding <see cref="M:System.Windows.Forms.Control.InitLayout" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.InitLayout" /> method so that the control is displayed correctly.</para></span></span></block>
        <altmember cref="P:System.Windows.Forms.Control.Anchor" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Invalidate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31784-1300">使控制項的特定區域失效，並且造成傳送繪製訊息至控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1300">Invalidates a specific region of the control and causes a paint message to be sent to the control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberSignature Language="F#" Value="member this.Invalidate : unit -&gt; unit" Usage="control.Invalidate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-1301">讓控制項的整個介面失效，並重新繪製控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1301">Invalidates the entire surface of the control and causes the control to be redrawn.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1302">呼叫<xref:System.Windows.Forms.Control.Invalidate%2A>方法不會強制同步小畫家; 若要強制同步小畫家，請呼叫<xref:System.Windows.Forms.Control.Update%2A>方法之後呼叫<xref:System.Windows.Forms.Control.Invalidate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1302">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="31784-1303">呼叫這個方法時，不含任何參數，將整個用戶端區域加入到更新區域中。</span><span class="sxs-lookup"><span data-stu-id="31784-1303">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1304">下列程式碼範例會啟用卸除使用者將是影像或影像檔案拖曳至表單，並將其顯示在其上的點。</span><span class="sxs-lookup"><span data-stu-id="31784-1304">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</span></span> <span data-ttu-id="31784-1305"><xref:System.Windows.Forms.Control.OnPaint%2A>表單繪製每次重新繪製影像會覆寫方法; 否則為映像就只會一直保存到下一步 重新繪製。</span><span class="sxs-lookup"><span data-stu-id="31784-1305">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="31784-1306"><xref:System.Windows.Forms.Control.DragEnter>事件處理方法判斷被拖曳至表單的資料類型，並提供適當的回應。</span><span class="sxs-lookup"><span data-stu-id="31784-1306">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="31784-1307"><xref:System.Windows.Forms.Control.DragDrop>事件處理方法會顯示在表單中，影像如果<xref:System.Drawing.Image>可以從資料建立。</span><span class="sxs-lookup"><span data-stu-id="31784-1307">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="31784-1308">因為<xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType>值螢幕座標，這個範例會使用<xref:System.Windows.Forms.Control.PointToClient%2A>方法，將它們轉換為用戶端座標。</span><span class="sxs-lookup"><span data-stu-id="31784-1308">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate (invalidateChildren As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(bool invalidateChildren);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : bool -&gt; unit" Usage="control.Invalidate invalidateChildren" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="invalidateChildren"><span data-ttu-id="31784-1309"><see langword="true" /> 會使控制項的子控制項失效，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1309"><see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="31784-1310">使控制項的特定區域失效，並且造成傳送繪製訊息至控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1310">Invalidates a specific region of the control and causes a paint message to be sent to the control.</span></span> <span data-ttu-id="31784-1311">選擇性使指派至控制項的子控制項失效。</span><span class="sxs-lookup"><span data-stu-id="31784-1311">Optionally, invalidates the child controls assigned to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1312">呼叫<xref:System.Windows.Forms.Control.Invalidate%2A>方法不會強制同步小畫家; 若要強制同步小畫家，請呼叫<xref:System.Windows.Forms.Control.Update%2A>方法之後呼叫<xref:System.Windows.Forms.Control.Invalidate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1312">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="31784-1313">呼叫這個方法時，不含任何參數，將整個用戶端區域加入到更新區域中。</span><span class="sxs-lookup"><span data-stu-id="31784-1313">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle rc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(valuetype System.Drawing.Rectangle rc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate (rc As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Rectangle rc);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Rectangle -&gt; unit" Usage="control.Invalidate rc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rc"><span data-ttu-id="31784-1314"><see cref="T:System.Drawing.Rectangle" />，表示要使其失效的區域。</span><span class="sxs-lookup"><span data-stu-id="31784-1314">A <see cref="T:System.Drawing.Rectangle" /> that represents the region to invalidate.</span></span></param>
        <summary><span data-ttu-id="31784-1315">使控制項的指定區域失效 (將它加入控制項的更新區域，而這個區域會在下一個繪製作業中重新繪製)，並使繪製訊息傳送至控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1315">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1316">呼叫<xref:System.Windows.Forms.Control.Invalidate%2A>方法不會強制同步小畫家; 若要強制同步小畫家，請呼叫<xref:System.Windows.Forms.Control.Update%2A>方法之後呼叫<xref:System.Windows.Forms.Control.Invalidate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1316">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="31784-1317">呼叫這個方法時，不含任何參數，將整個用戶端區域加入到更新區域中。</span><span class="sxs-lookup"><span data-stu-id="31784-1317">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Region -&gt; unit" Usage="control.Invalidate region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region"><span data-ttu-id="31784-1318">要使其失效的 <see cref="T:System.Drawing.Region" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1318">The <see cref="T:System.Drawing.Region" /> to invalidate.</span></span></param>
        <summary><span data-ttu-id="31784-1319">使控制項的指定區域失效 (將它加入控制項的更新區域，而這個區域會在下一個繪製作業中重新繪製)，並使繪製訊息傳送至控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1319">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1320">呼叫<xref:System.Windows.Forms.Control.Invalidate%2A>方法不會強制同步小畫家; 若要強制同步小畫家，請呼叫<xref:System.Windows.Forms.Control.Update%2A>方法之後呼叫<xref:System.Windows.Forms.Control.Invalidate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1320">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="31784-1321">呼叫這個方法時，不含任何參數，將整個用戶端區域加入到更新區域中。</span><span class="sxs-lookup"><span data-stu-id="31784-1321">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle rc, bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(valuetype System.Drawing.Rectangle rc, bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate (rc As Rectangle, invalidateChildren As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Rectangle rc, bool invalidateChildren);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Rectangle * bool -&gt; unit" Usage="control.Invalidate (rc, invalidateChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="System.Drawing.Rectangle" />
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rc"><span data-ttu-id="31784-1322"><see cref="T:System.Drawing.Rectangle" />，表示要使其失效的區域。</span><span class="sxs-lookup"><span data-stu-id="31784-1322">A <see cref="T:System.Drawing.Rectangle" /> that represents the region to invalidate.</span></span></param>
        <param name="invalidateChildren"><span data-ttu-id="31784-1323"><see langword="true" /> 會使控制項的子控制項失效，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1323"><see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="31784-1324">使控制項的指定區域失效 (將它加入控制項的更新區域，而這個區域會在下一個繪製作業中重新繪製)，並使繪製訊息傳送至控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1324">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span> <span data-ttu-id="31784-1325">選擇性使指派至控制項的子控制項失效。</span><span class="sxs-lookup"><span data-stu-id="31784-1325">Optionally, invalidates the child controls assigned to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1326">呼叫<xref:System.Windows.Forms.Control.Invalidate%2A>方法不會強制同步小畫家; 若要強制同步小畫家，請呼叫<xref:System.Windows.Forms.Control.Update%2A>方法之後呼叫<xref:System.Windows.Forms.Control.Invalidate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1326">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="31784-1327">呼叫這個方法時，不含任何參數，將整個用戶端區域加入到更新區域中。</span><span class="sxs-lookup"><span data-stu-id="31784-1327">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Region region, bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(class System.Drawing.Region region, bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Region ^ region, bool invalidateChildren);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Region * bool -&gt; unit" Usage="control.Invalidate (region, invalidateChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="region"><span data-ttu-id="31784-1328">要使其失效的 <see cref="T:System.Drawing.Region" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1328">The <see cref="T:System.Drawing.Region" /> to invalidate.</span></span></param>
        <param name="invalidateChildren"><span data-ttu-id="31784-1329"><see langword="true" /> 會使控制項的子控制項失效，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1329"><see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="31784-1330">使控制項的指定區域失效 (將它加入控制項的更新區域，而這個區域會在下一個繪製作業中重新繪製)，並使繪製訊息傳送至控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1330">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span> <span data-ttu-id="31784-1331">選擇性使指派至控制項的子控制項失效。</span><span class="sxs-lookup"><span data-stu-id="31784-1331">Optionally, invalidates the child controls assigned to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1332">呼叫<xref:System.Windows.Forms.Control.Invalidate%2A>方法不會強制同步小畫家; 若要強制同步小畫家，請呼叫<xref:System.Windows.Forms.Control.Update%2A>方法之後呼叫<xref:System.Windows.Forms.Control.Invalidate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1332">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="31784-1333">呼叫這個方法時，不含任何參數，將整個用戶端區域加入到更新區域中。</span><span class="sxs-lookup"><span data-stu-id="31784-1333">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidated">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.InvalidateEventHandler Invalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.InvalidateEventHandler Invalidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Invalidated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Invalidated As InvalidateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::InvalidateEventHandler ^ Invalidated;" />
      <MemberSignature Language="F#" Value="member this.Invalidated : System.Windows.Forms.InvalidateEventHandler " Usage="member this.Invalidated : System.Windows.Forms.InvalidateEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InvalidateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1334">發生於控制項的顯示需要重新繪製時。</span><span class="sxs-lookup"><span data-stu-id="31784-1334">Occurs when a control's display requires redrawing.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1335">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1335">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1336">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-1336">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-1337">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.Invalidated>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1337">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.Invalidated> event.</span></span> <span data-ttu-id="31784-1338">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-1338">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-1339">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1339">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-1340">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1340">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-1341">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.Invalidated>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1341">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.Invalidated> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#40)]
 [!code-vb[System.Windows.Forms.EventExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#40)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31784-1342">在擁有控制項基礎視窗控制代碼的執行緒上執行委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1342">Executes a delegate on the thread that owns the control's underlying window handle.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate -&gt; obj" Usage="control.Invoke method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="31784-1343">委派，包含要在控制項執行緒內容中呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1343">A delegate that contains a method to be called in the control's thread context.</span></span></param>
        <summary><span data-ttu-id="31784-1344">在擁有控制項基礎視窗控制代碼的執行緒上執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1344">Executes the specified delegate on the thread that owns the control's underlying window handle.</span></span></summary>
        <returns><span data-ttu-id="31784-1345">來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1345">The return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1346">委派是與 C 或 c + + 語言的函式指標類似。</span><span class="sxs-lookup"><span data-stu-id="31784-1346">Delegates are similar to function pointers in C or C++ languages.</span></span> <span data-ttu-id="31784-1347">委派會封裝將委派物件內的方法參考。</span><span class="sxs-lookup"><span data-stu-id="31784-1347">Delegates encapsulate a reference to a method inside a delegate object.</span></span> <span data-ttu-id="31784-1348">然後可以委派物件傳遞至程式碼呼叫受參考的方法，並在編譯時期，要叫用的方法可以是未知。</span><span class="sxs-lookup"><span data-stu-id="31784-1348">The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time.</span></span> <span data-ttu-id="31784-1349">不同於在 C 或 c + + 中的函式指標，委派為物件導向、 類型安全且更安全。</span><span class="sxs-lookup"><span data-stu-id="31784-1349">Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.</span></span>  
  
 <span data-ttu-id="31784-1350"><xref:System.Windows.Forms.Control.Invoke%2A>如果尚不存在目前的控制項基礎視窗控制代碼，請處理方法會搜尋直到找到的控制項或表單，視窗控制項的父鏈結。</span><span class="sxs-lookup"><span data-stu-id="31784-1350">The <xref:System.Windows.Forms.Control.Invoke%2A> method searches up the control's parent chain until it finds a control or form that has a window handle if the current control's underlying window handle does not exist yet.</span></span> <span data-ttu-id="31784-1351">如果找不到適當的控制代碼，<xref:System.Windows.Forms.Control.Invoke%2A>方法會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="31784-1351">If no appropriate handle can be found, the <xref:System.Windows.Forms.Control.Invoke%2A> method will throw an exception.</span></span> <span data-ttu-id="31784-1352">在呼叫期間引發的例外狀況會傳播回到呼叫端。</span><span class="sxs-lookup"><span data-stu-id="31784-1352">Exceptions that are raised during the call will be propagated back to the caller.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1353">除了<xref:System.Windows.Forms.Control.InvokeRequired%2A>屬性，在控制項上都是安全執行緒的四種方法： <xref:System.Windows.Forms.Control.Invoke%2A>， <xref:System.Windows.Forms.Control.BeginInvoke%2A>， <xref:System.Windows.Forms.Control.EndInvoke%2A>，和<xref:System.Windows.Forms.Control.CreateGraphics%2A>如果已經建立控制項的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-1353">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="31784-1354">呼叫<xref:System.Windows.Forms.Control.CreateGraphics%2A>背景執行緒上建立控制項的控制代碼之前可能會導致不合法的跨執行緒呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-1354">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="31784-1355">至於其他所有方法呼叫，您應該使用叫用方法的其中一個來封送處理控制項的執行緒的呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-1355">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
 <span data-ttu-id="31784-1356">委派可以是的執行個體<xref:System.EventHandler>，在此情況下寄件者參數會包含此控制項，且事件參數會包含<xref:System.EventArgs.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="31784-1356">The delegate can be an instance of <xref:System.EventHandler>, in which case the sender parameter will contain this control, and the event parameter will contain <xref:System.EventArgs.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="31784-1357">委派也可以是的執行個體<xref:System.Windows.Forms.MethodInvoker>，或任何其他接受 void 參數清單的委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1357">The delegate can also be an instance of <xref:System.Windows.Forms.MethodInvoker>, or any other delegate that takes a void parameter list.</span></span> <span data-ttu-id="31784-1358">呼叫<xref:System.EventHandler>或<xref:System.Windows.Forms.MethodInvoker>委派將會比其他類型的委派呼叫更快。</span><span class="sxs-lookup"><span data-stu-id="31784-1358">A call to an <xref:System.EventHandler> or <xref:System.Windows.Forms.MethodInvoker> delegate will be faster than a call to another type of delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1359">如果應該處理訊息的執行緒不再為作用中，可能會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="31784-1359">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1360">下列程式碼範例顯示包含委派的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1360">The following code example shows controls that contain a delegate.</span></span> <span data-ttu-id="31784-1361">委派會封裝將項目加入至清單方塊中，並擁有表單的基礎控制代碼的執行緒上執行此方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1361">The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form.</span></span> <span data-ttu-id="31784-1362">當使用者按一下按鈕，`Invoke`執行委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1362">When the user clicks on the button, `Invoke` runs the delegate.</span></span>  
  
 [!code-cpp[Control_Invoke2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Invoke2/CPP/control_invoke2.cpp#1)]
 [!code-csharp[Control_Invoke2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Invoke2/CS/control_invoke2.cs#1)]
 [!code-vb[Control_Invoke2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Invoke2/VB/control_invoke2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MethodInvoker" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Delegate * obj[] -&gt; obj&#xA;override this.Invoke : Delegate * obj[] -&gt; obj" Usage="control.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="31784-1363">方法的委派，採用的參數數目和類型與 <c>args</c> 參數中包含的數目和類型相同。</span><span class="sxs-lookup"><span data-stu-id="31784-1363">A delegate to a method that takes parameters of the same number and type that are contained in the <c>args</c> parameter.</span></span></param>
        <param name="args"><span data-ttu-id="31784-1364">做為引數傳遞至指定方法的物件陣列。</span><span class="sxs-lookup"><span data-stu-id="31784-1364">An array of objects to pass as arguments to the specified method.</span></span> <span data-ttu-id="31784-1365">如果方法沒有引數，這個參數可能是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1365">This parameter can be <see langword="null" /> if the method takes no arguments.</span></span></param>
        <summary><span data-ttu-id="31784-1366">在擁有控制項基礎視窗控制代碼的執行緒上，以指定的引數清單執行指定的委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1366">Executes the specified delegate, on the thread that owns the control's underlying window handle, with the specified list of arguments.</span></span></summary>
        <returns><span data-ttu-id="31784-1367"><see cref="T:System.Object" />，包含所叫用的委派的傳回值，如果委派沒有傳回值，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1367">An <see cref="T:System.Object" /> that contains the return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1368">委派是與 C 或 c + + 語言的函式指標類似。</span><span class="sxs-lookup"><span data-stu-id="31784-1368">Delegates are similar to function pointers in C or C++ languages.</span></span> <span data-ttu-id="31784-1369">委派會封裝將委派物件內的方法參考。</span><span class="sxs-lookup"><span data-stu-id="31784-1369">Delegates encapsulate a reference to a method inside a delegate object.</span></span> <span data-ttu-id="31784-1370">然後可以委派物件傳遞至程式碼呼叫受參考的方法，並在編譯時期，要叫用的方法可以是未知。</span><span class="sxs-lookup"><span data-stu-id="31784-1370">The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time.</span></span> <span data-ttu-id="31784-1371">不同於在 C 或 c + + 中的函式指標，委派為物件導向、 類型安全且更安全。</span><span class="sxs-lookup"><span data-stu-id="31784-1371">Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.</span></span>  
  
 <span data-ttu-id="31784-1372">如果尚不存在的控制項控點，直到找到的控制項或表單沒有視窗控制代碼，這個方法會搜尋控制項的父鏈結。</span><span class="sxs-lookup"><span data-stu-id="31784-1372">If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="31784-1373">如果找不到適當的控制代碼，這個方法會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="31784-1373">If no appropriate handle can be found, this method throws an exception.</span></span> <span data-ttu-id="31784-1374">在呼叫期間引發的例外狀況會傳播回到呼叫端。</span><span class="sxs-lookup"><span data-stu-id="31784-1374">Exceptions that are raised during the call will be propagated back to the caller.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1375">除了<xref:System.Windows.Forms.Control.InvokeRequired%2A>屬性，在控制項上都是安全執行緒的四種方法： <xref:System.Windows.Forms.Control.Invoke%2A>， <xref:System.Windows.Forms.Control.BeginInvoke%2A>， <xref:System.Windows.Forms.Control.EndInvoke%2A>，和<xref:System.Windows.Forms.Control.CreateGraphics%2A>如果已經建立控制項的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-1375">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="31784-1376">呼叫<xref:System.Windows.Forms.Control.CreateGraphics%2A>背景執行緒上建立控制項的控制代碼之前可能會導致不合法的跨執行緒呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-1376">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="31784-1377">至於其他所有方法呼叫，您應該使用叫用方法的其中一個來封送處理控制項的執行緒的呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-1377">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
 <span data-ttu-id="31784-1378">委派可以是的執行個體<xref:System.EventHandler>，在此情況下寄件者參數會包含此控制項，且事件參數會包含<xref:System.EventArgs.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="31784-1378">The delegate can be an instance of <xref:System.EventHandler>, in which case the sender parameter will contain this control, and the event parameter will contain <xref:System.EventArgs.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="31784-1379">委派也可以是的執行個體<xref:System.Windows.Forms.MethodInvoker>，或任何其他接受 void 參數清單的委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1379">The delegate can also be an instance of <xref:System.Windows.Forms.MethodInvoker>, or any other delegate that takes a void parameter list.</span></span> <span data-ttu-id="31784-1380">呼叫<xref:System.EventHandler>或<xref:System.Windows.Forms.MethodInvoker>委派將會比其他類型的委派呼叫更快。</span><span class="sxs-lookup"><span data-stu-id="31784-1380">A call to an <xref:System.EventHandler> or <xref:System.Windows.Forms.MethodInvoker> delegate will be faster than a call to another type of delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1381">如果應該處理訊息的執行緒不再為作用中，可能會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="31784-1381">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1382">下列程式碼範例顯示包含委派的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1382">The following code example shows controls that contain a delegate.</span></span> <span data-ttu-id="31784-1383">委派會封裝將項目加入至清單方塊中，並擁有表單，並使用指定的引數的基礎控制代碼的執行緒上執行此方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1383">The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form, using the specified arguments.</span></span> <span data-ttu-id="31784-1384">當使用者按一下按鈕，`Invoke`執行委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1384">When the user clicks on the button, `Invoke` runs the delegate.</span></span>  
  
 [!code-cpp[Control_Invoke1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Invoke1/CPP/control_invoke1.cpp#1)]
 [!code-csharp[Control_Invoke1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Invoke1/CS/control_invoke1.cs#1)]
 [!code-vb[Control_Invoke1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Invoke1/VB/control_invoke1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MethodInvoker" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="InvokeGotFocus">
      <MemberSignature Language="C#" Value="protected void InvokeGotFocus (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeGotFocus(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeGotFocus (toInvoke As Control, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeGotFocus(System::Windows::Forms::Control ^ toInvoke, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokeGotFocus : System.Windows.Forms.Control * EventArgs -&gt; unit" Usage="control.InvokeGotFocus (toInvoke, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke"><span data-ttu-id="31784-1385">要為其指定事件的 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1385">The <see cref="T:System.Windows.Forms.Control" /> to assign the event to.</span></span></param>
        <param name="e"><span data-ttu-id="31784-1386">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1386">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1387">引發指定之控制項的 <see cref="E:System.Windows.Forms.Control.GotFocus" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1387">Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeLostFocus">
      <MemberSignature Language="C#" Value="protected void InvokeLostFocus (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeLostFocus(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeLostFocus (toInvoke As Control, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeLostFocus(System::Windows::Forms::Control ^ toInvoke, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokeLostFocus : System.Windows.Forms.Control * EventArgs -&gt; unit" Usage="control.InvokeLostFocus (toInvoke, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke"><span data-ttu-id="31784-1388">要為其指定事件的 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1388">The <see cref="T:System.Windows.Forms.Control" /> to assign the event to.</span></span></param>
        <param name="e"><span data-ttu-id="31784-1389">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1389">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1390">引發指定之控制項的 <see cref="E:System.Windows.Forms.Control.LostFocus" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1390">Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeOnClick">
      <MemberSignature Language="C#" Value="protected void InvokeOnClick (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeOnClick(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeOnClick (toInvoke As Control, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeOnClick(System::Windows::Forms::Control ^ toInvoke, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokeOnClick : System.Windows.Forms.Control * EventArgs -&gt; unit" Usage="control.InvokeOnClick (toInvoke, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke"><span data-ttu-id="31784-1391">要為其指定 <see cref="T:System.Windows.Forms.Control" /> 事件的 <see cref="E:System.Windows.Forms.Control.Click" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1391">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Click" /> event to.</span></span></param>
        <param name="e"><span data-ttu-id="31784-1392">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1392">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1393">引發指定之控制項的 <see cref="E:System.Windows.Forms.Control.Click" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1393">Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokePaint">
      <MemberSignature Language="C#" Value="protected void InvokePaint (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokePaint(class System.Windows.Forms.Control c, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokePaint (c As Control, e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokePaint(System::Windows::Forms::Control ^ c, System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokePaint : System.Windows.Forms.Control * System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.InvokePaint (c, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="31784-1394">要為其指定 <see cref="T:System.Windows.Forms.Control" /> 事件的 <see cref="E:System.Windows.Forms.Control.Paint" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1394">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Paint" /> event to.</span></span></param>
        <param name="e"><span data-ttu-id="31784-1395">包含事件資料的 <see cref="T:System.Windows.Forms.PaintEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1395">An <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1396">引發指定之控制項的 <see cref="E:System.Windows.Forms.Control.Paint" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1396">Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.Paint" />
      </Docs>
    </Member>
    <Member MemberName="InvokePaintBackground">
      <MemberSignature Language="C#" Value="protected void InvokePaintBackground (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokePaintBackground(class System.Windows.Forms.Control c, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokePaintBackground (c As Control, e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokePaintBackground(System::Windows::Forms::Control ^ c, System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokePaintBackground : System.Windows.Forms.Control * System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.InvokePaintBackground (c, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="31784-1397">要為其指定 <see cref="T:System.Windows.Forms.Control" /> 事件的 <see cref="E:System.Windows.Forms.Control.Paint" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1397">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Paint" /> event to.</span></span></param>
        <param name="e"><span data-ttu-id="31784-1398">包含事件資料的 <see cref="T:System.Windows.Forms.PaintEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1398">An <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1399">引發指定之控制項的 <see langword="PaintBackground" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1399">Raises the <see langword="PaintBackground" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InvokeRequired : bool" Usage="System.Windows.Forms.Control.InvokeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1400">取得一個值。這個值會指示是否由於呼叫端是在建立控制項之執行緒以外的執行緒，因此在進行控制項的方法呼叫時，應呼叫叫用 (Invoke) 方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1400">Gets a value indicating whether the caller must call an invoke method when making method calls to the control because the caller is on a different thread than the one the control was created on.</span></span></summary>
        <value><span data-ttu-id="31784-1401">如果控制項的 <see langword="true" /> 是在呼叫執行緒以外的執行緒上建立，則為 <see cref="P:System.Windows.Forms.Control.Handle" /> (表示必須透過叫用方法呼叫)，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1401"><see langword="true" /> if the control's <see cref="P:System.Windows.Forms.Control.Handle" /> was created on a different thread than the calling thread (indicating that you must make calls to the control through an invoke method); otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1402">在 Windows Form 控制項繫結至特定的執行緒，並不具備執行緒安全。</span><span class="sxs-lookup"><span data-stu-id="31784-1402">Controls in Windows Forms are bound to a specific thread and are not thread safe.</span></span> <span data-ttu-id="31784-1403">如果您從不同的執行緒呼叫控制項的方法，您必須使用控制項的叫用封送處理至適當的執行緒呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1403">Therefore, if you are calling a control's method from a different thread, you must use one of the control's invoke methods to marshal the call to the proper thread.</span></span> <span data-ttu-id="31784-1404">這個屬性可以用來判斷是否您必須呼叫叫用方法，如果您不知道哪個執行緒擁有控制項就很有用。</span><span class="sxs-lookup"><span data-stu-id="31784-1404">This property can be used to determine if you must call an invoke method, which can be useful if you do not know what thread owns a control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1405">除了<xref:System.Windows.Forms.Control.InvokeRequired%2A>屬性，在控制項上四種具備執行緒安全呼叫的方法： <xref:System.Windows.Forms.Control.Invoke%2A>，<xref:System.Windows.Forms.Control.BeginInvoke%2A>，<xref:System.Windows.Forms.Control.EndInvoke%2A>和<xref:System.Windows.Forms.Control.CreateGraphics%2A>如果已經建立控制項的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-1405">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe to call: <xref:System.Windows.Forms.Control.Invoke%2A>,<xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A> and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="31784-1406">呼叫<xref:System.Windows.Forms.Control.CreateGraphics%2A>背景執行緒上建立控制項的控制代碼之前可能會導致不合法的跨執行緒呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-1406">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="31784-1407">至於其他所有方法呼叫中，您應該使用下列其中一種從不同的執行緒呼叫時，叫用方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1407">For all other method calls, you should use one of these invoke methods when calling from a different thread.</span></span>  
  
 <span data-ttu-id="31784-1408">如果尚未存在的控制代碼，<xref:System.Windows.Forms.Control.InvokeRequired%2A>搜尋上控制項的父鏈結，直到它找到的控制項或表單沒有視窗控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-1408">If the control's handle does not yet exist, <xref:System.Windows.Forms.Control.InvokeRequired%2A> searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="31784-1409">如果找不到適當的控制代碼，<xref:System.Windows.Forms.Control.InvokeRequired%2A>方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="31784-1409">If no appropriate handle can be found, the <xref:System.Windows.Forms.Control.InvokeRequired%2A> method returns `false`.</span></span>  
  
 <span data-ttu-id="31784-1410">這表示<xref:System.Windows.Forms.Control.InvokeRequired%2A>可以傳回`false`如果<xref:System.Windows.Forms.Control.Invoke%2A>就不需要 （呼叫，就會發生在相同執行緒上），或是不同的執行緒上建立控制項，但是尚未建立控制項的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-1410">This means that <xref:System.Windows.Forms.Control.InvokeRequired%2A> can return `false` if <xref:System.Windows.Forms.Control.Invoke%2A> is not required (the call occurs on the same thread), or if the control was created on a different thread but the control's handle has not yet been created.</span></span>  
  
 <span data-ttu-id="31784-1411">尚未建立控制項的控制代碼的情況下，您不應該直接呼叫屬性、 方法或事件在控制項上。</span><span class="sxs-lookup"><span data-stu-id="31784-1411">In the case where the control's handle has not yet been created, you should not simply call properties, methods, or events on the control.</span></span> <span data-ttu-id="31784-1412">這可能會造成隔離沒有訊息幫浦的執行緒上的控制項，並讓此應用程式不穩定的背景執行緒上建立控制項的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-1412">This might cause the control's handle to be created on the background thread, isolating the control on a thread without a message pump and making the application unstable.</span></span>  
  
 <span data-ttu-id="31784-1413">您可以保護針對此案例也檢查值<xref:System.Windows.Forms.Control.IsHandleCreated%2A>時<xref:System.Windows.Forms.Control.InvokeRequired%2A>傳回`false`背景執行緒上。</span><span class="sxs-lookup"><span data-stu-id="31784-1413">You can protect against this case by also checking the value of <xref:System.Windows.Forms.Control.IsHandleCreated%2A> when <xref:System.Windows.Forms.Control.InvokeRequired%2A> returns `false` on a background thread.</span></span> <span data-ttu-id="31784-1414">如果尚未建立控制代碼，您必須等到它建立之後，再呼叫<xref:System.Windows.Forms.Control.Invoke%2A>或<xref:System.Windows.Forms.Control.BeginInvoke%2A>。</span><span class="sxs-lookup"><span data-stu-id="31784-1414">If the control handle has not yet been created, you must wait until it has been created before calling <xref:System.Windows.Forms.Control.Invoke%2A> or <xref:System.Windows.Forms.Control.BeginInvoke%2A>.</span></span> <span data-ttu-id="31784-1415">通常，這是背景執行緒會在應用程式的主要表單的建構函式時，才 (像是`Application.Run(new MainForm())`，才能在顯示表單或`Application.Run`已呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-1415">Typically, this happens only if a background thread is created in the constructor of the primary form for the application (as in `Application.Run(new MainForm())`, before the form has been shown or `Application.Run` has been called.</span></span>  
  
 <span data-ttu-id="31784-1416">一個解決方案是等到之前啟動的背景執行緒已建立表單的控點。</span><span class="sxs-lookup"><span data-stu-id="31784-1416">One solution is to wait until the form's handle has been created before starting the background thread.</span></span> <span data-ttu-id="31784-1417">請藉由呼叫強制控制代碼建立<xref:System.Windows.Forms.Control.Handle%2A>屬性或等候<xref:System.Windows.Forms.Form.Load>啟動背景處理序的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1417">Either force handle creation by calling the <xref:System.Windows.Forms.Control.Handle%2A> property, or wait until the <xref:System.Windows.Forms.Form.Load> event to start the background process.</span></span>  
  
 <span data-ttu-id="31784-1418">更好的解決方案是使用`SynchronizationContext`傳回<xref:System.Threading.SynchronizationContext>而不是封送處理跨執行緒的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1418">An even better solution is to use the `SynchronizationContext` returned by <xref:System.Threading.SynchronizationContext> rather than a control for cross-thread marshaling.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1419">如果應該處理訊息的執行緒不再為作用中，可能會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="31784-1419">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
 <span data-ttu-id="31784-1420">如需多執行緒 Windows Form 控制項的詳細資訊，請參閱[How to： 使用背景執行緒搜尋檔案](~/docs/framework/winforms/controls/how-to-use-a-background-thread-to-search-for-files.md)和[How to： 至 Windows Form 控制項進行安全執行緒呼叫](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1420">For more information about multithreaded Windows Forms controls, see [How to: Use a Background Thread to Search for Files](~/docs/framework/winforms/controls/how-to-use-a-background-thread-to-search-for-files.md) and [How to: Make Thread-Safe Calls to Windows Forms Controls](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="IsAccessible">
      <MemberSignature Language="C#" Value="public bool IsAccessible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAccessible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsAccessible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsAccessible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAccessible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsAccessible : bool with get, set" Usage="System.Windows.Forms.Control.IsAccessible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1421">取得或設定值，指出可及性應用程式是否見得到控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1421">Gets or sets a value indicating whether the control is visible to accessibility applications.</span></span></summary>
        <value><span data-ttu-id="31784-1422">如果協助工具應用程式可看見控制項，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1422"><see langword="true" /> if the control is visible to accessibility applications; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Windows.Forms.Control.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1423">取得指示控制項是否已經處置的值。</span><span class="sxs-lookup"><span data-stu-id="31784-1423">Gets a value indicating whether the control has been disposed of.</span></span></summary>
        <value><span data-ttu-id="31784-1424">如果控制項已經處置，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1424"><see langword="true" /> if the control has been disposed of; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1425">當這個屬性會傳回`true`，控制會處置與不再可以參考做為有效的 Windows 控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1425">When this property returns `true`, the control is disposed of and can no longer be referenced as a valid Windows control.</span></span> <span data-ttu-id="31784-1426">即使已經處置控制項的執行個體，它仍然會保留在記憶體中直到它從透過記憶體回收的記憶體中移除。</span><span class="sxs-lookup"><span data-stu-id="31784-1426">Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection.</span></span> <span data-ttu-id="31784-1427">處置控制項時，您不能呼叫它<xref:System.Windows.Forms.Control.RecreateHandle%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1427">When a control is disposed, you cannot call its <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
        <altmember cref="T:System.GC" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="IsHandleCreated">
      <MemberSignature Language="C#" Value="public bool IsHandleCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHandleCreated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsHandleCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHandleCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHandleCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHandleCreated : bool" Usage="System.Windows.Forms.Control.IsHandleCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1428">取得指示控制項是否有相關控制代碼的值。</span><span class="sxs-lookup"><span data-stu-id="31784-1428">Gets a value indicating whether the control has a handle associated with it.</span></span></summary>
        <value><span data-ttu-id="31784-1429">如果為控制項指定了控制代碼，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1429"><see langword="true" /> if a handle has been assigned to the control; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1430">使用<xref:System.Windows.Forms.Control.IsHandleCreated%2A>屬性來判斷是否<xref:System.Windows.Forms.Control.CreateHandle%2A>已呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-1430">Use the <xref:System.Windows.Forms.Control.IsHandleCreated%2A> property to determine whether <xref:System.Windows.Forms.Control.CreateHandle%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="IsInputChar">
      <MemberSignature Language="C#" Value="protected virtual bool IsInputChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsInputChar(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsInputChar (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsInputChar(char charCode);" />
      <MemberSignature Language="F#" Value="abstract member IsInputChar : char -&gt; bool&#xA;override this.IsInputChar : char -&gt; bool" Usage="control.IsInputChar charCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="31784-1431">要測試的字元。</span><span class="sxs-lookup"><span data-stu-id="31784-1431">The character to test.</span></span></param>
        <summary><span data-ttu-id="31784-1432">判斷字元是否為控制項辨認的輸入字元。</span><span class="sxs-lookup"><span data-stu-id="31784-1432">Determines if a character is an input character that the control recognizes.</span></span></summary>
        <returns><span data-ttu-id="31784-1433">如果字元應直接傳送至控制項而不前置處理，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1433"><see langword="true" /> if the character should be sent directly to the control and not preprocessed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1434">呼叫<xref:System.Windows.Forms.Control.IsInputChar%2A>方法來判斷所指定的字元是否`charCode`參數是控制項要輸入的字元。</span><span class="sxs-lookup"><span data-stu-id="31784-1434">Call the <xref:System.Windows.Forms.Control.IsInputChar%2A> method to determine whether the character specified by the `charCode` parameter is an input character that the control wants.</span></span> <span data-ttu-id="31784-1435">在視窗訊息來判斷指定的輸入的字元是否應該前置處理過或直接傳送至控制項前置處理期間呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1435">This method is called during window message preprocessing to determine whether the specified input character should be preprocessed or sent directly to the control.</span></span> <span data-ttu-id="31784-1436">如果<xref:System.Windows.Forms.Control.IsInputChar%2A>傳回`true`，指定的字元會直接傳送給控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1436">If <xref:System.Windows.Forms.Control.IsInputChar%2A> returns `true`, the specified character is sent directly to the control.</span></span> <span data-ttu-id="31784-1437">如果<xref:System.Windows.Forms.Control.IsInputChar%2A>傳回`false`，前置處理指定的字元，如果它不由前置處理階段只傳送給控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1437">If <xref:System.Windows.Forms.Control.IsInputChar%2A> returns `false`, the specified character is preprocessed and only sent to the control if it is not consumed by the preprocessing phase.</span></span> <span data-ttu-id="31784-1438">前置處理的字元包括檢查的字元是否另一個控制項的助憶鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-1438">The preprocessing of a character includes checking whether the character is a mnemonic of another control.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-1439">繼承類別呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-1439">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="31784-1440">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1440">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected virtual bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member IsInputKey : System.Windows.Forms.Keys -&gt; bool&#xA;override this.IsInputKey : System.Windows.Forms.Keys -&gt; bool" Usage="control.IsInputKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><span data-ttu-id="31784-1441">其中一個 <see cref="T:System.Windows.Forms.Keys" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-1441">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</span></span></param>
        <summary><span data-ttu-id="31784-1442">判斷指定的按鍵是標準輸入按鍵或需要前置處理的特殊按鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-1442">Determines whether the specified key is a regular input key or a special key that requires preprocessing.</span></span></summary>
        <returns><span data-ttu-id="31784-1443">如果指定的按鍵是標準輸入按鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1443"><see langword="true" /> if the specified key is a regular input key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1444">呼叫<xref:System.Windows.Forms.Control.IsInputKey%2A>方法，以判斷是否由指定的索引鍵`keyData`參數是控制項要輸入索引鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-1444">Call the <xref:System.Windows.Forms.Control.IsInputKey%2A> method to determine whether the key specified by the `keyData` parameter is an input key that the control wants.</span></span> <span data-ttu-id="31784-1445">在視窗訊息來判斷是否應該前置處理過或直接傳送至控制項的指定輸入的索引鍵前置處理期間呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1445">This method is called during window message preprocessing to determine whether the specified input key should be preprocessed or sent directly to the control.</span></span> <span data-ttu-id="31784-1446">如果<xref:System.Windows.Forms.Control.IsInputKey%2A>傳回`true`，指定索引鍵會直接傳送給控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1446">If <xref:System.Windows.Forms.Control.IsInputKey%2A> returns `true`, the specified key is sent directly to the control.</span></span> <span data-ttu-id="31784-1447">如果<xref:System.Windows.Forms.Control.IsInputKey%2A>傳回`false`，前置處理指定的金鑰，並只傳送至控制項，如果它不由前置處理階段。</span><span class="sxs-lookup"><span data-stu-id="31784-1447">If <xref:System.Windows.Forms.Control.IsInputKey%2A> returns `false`, the specified key is preprocessed and only sent to the control if it is not consumed by the preprocessing phase.</span></span> <span data-ttu-id="31784-1448">前置處理過的索引鍵包括 [] 索引標籤，傳回、 esc 鍵和向上、 向下鍵、 向左鍵和向右箭號的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-1448">Keys that are preprocessed include the TAB, RETURN, ESC, and the UP ARROW, DOWN ARROW, LEFT ARROW, and RIGHT ARROW keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1449">下列程式碼範例會示範如何覆寫<xref:System.Windows.Forms.Control.IsInputKey%2A>方法<xref:System.Windows.Forms.TextBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1449">The following code example shows you how to override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method for a <xref:System.Windows.Forms.TextBox> control.</span></span> <span data-ttu-id="31784-1450">在此範例中，`TabTextBox`類別處理 TAB 鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-1450">In this example, the `TabTextBox` class handles the TAB key.</span></span> <span data-ttu-id="31784-1451">當`TabTextBox`擁有焦點且使用者按下 TAB 鍵在文字插入點，加入四個空格取代任何選取的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-1451">When the `TabTextBox` has the focus and the user presses the TAB key four spaces are added at the text insertion point, replacing any selected text.</span></span> <span data-ttu-id="31784-1452">根據預設，<xref:System.Windows.Forms.TextBox>控制處理 TAB 鍵將輸入的焦點移至下一個控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1452">By default, the <xref:System.Windows.Forms.TextBox> control handles the TAB key by moving the input focus to the next control.</span></span> <span data-ttu-id="31784-1453">在此情況下，keypress 永遠不會到達<xref:System.Windows.Forms.Control.OnKeyDown%2A>方法覆寫。</span><span class="sxs-lookup"><span data-stu-id="31784-1453">In this case, the keypress never reaches the <xref:System.Windows.Forms.Control.OnKeyDown%2A> method override.</span></span> <span data-ttu-id="31784-1454">若要防止這個預設行為，<xref:System.Windows.Forms.Control.IsInputKey%2A>方法覆寫會傳回`true`當使用者按下 TAB 鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-1454">To prevent this default behavior, the <xref:System.Windows.Forms.Control.IsInputKey%2A> method override returns `true` when the user presses the TAB key.</span></span> <span data-ttu-id="31784-1455">針對所有其他的按鍵<xref:System.Windows.Forms.Control.IsInputKey%2A>方法覆寫會傳回呼叫方法的基底類別版本的結果。</span><span class="sxs-lookup"><span data-stu-id="31784-1455">For all other keypresses, the <xref:System.Windows.Forms.Control.IsInputKey%2A> method override returns the result of calling the base-class version of the method.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.IsInputKey#0](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.IsInputKey/cs/form1.cs#0)]
 [!code-vb[System.Windows.Forms.Control.IsInputKey#0](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.IsInputKey/vb/form1.vb#0)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-1456">繼承類別呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-1456">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="31784-1457">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1457">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="T:System.Windows.Forms.Keys" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
        <altmember cref="P:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyLocked">
      <MemberSignature Language="C#" Value="public static bool IsKeyLocked (System.Windows.Forms.Keys keyVal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyLocked(valuetype System.Windows.Forms.Keys keyVal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsKeyLocked (keyVal As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKeyLocked(System::Windows::Forms::Keys keyVal);" />
      <MemberSignature Language="F#" Value="static member IsKeyLocked : System.Windows.Forms.Keys -&gt; bool" Usage="System.Windows.Forms.Control.IsKeyLocked keyVal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyVal" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyVal"><span data-ttu-id="31784-1458"><see cref="T:System.Windows.Forms.Keys" /> 列舉的 CAPS LOCK、NUM LOCK 或 SCROLL LOCK 成員。</span><span class="sxs-lookup"><span data-stu-id="31784-1458">The CAPS LOCK, NUM LOCK, or SCROLL LOCK member of the <see cref="T:System.Windows.Forms.Keys" /> enumeration.</span></span></param>
        <summary><span data-ttu-id="31784-1459">判斷 CAPS LOCK、NUM LOCK 或 SCROLL LOCK 按鍵是否在作用中。</span><span class="sxs-lookup"><span data-stu-id="31784-1459">Determines whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK key is in effect.</span></span></summary>
        <returns><span data-ttu-id="31784-1460">如果指定的按鍵在作用中，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1460"><see langword="true" /> if the specified key or keys are in effect; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1461">使用<xref:System.Windows.Forms.Control.IsKeyLocked%2A>屬性來判斷是否個別或合併是否在上，按下 CAPS LOCK、 NUM LOCK 或 SCROLL LOCK 鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-1461">Use the <xref:System.Windows.Forms.Control.IsKeyLocked%2A> property to determine whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK keys are on, whether individually or in combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1462">下列程式碼範例會顯示訊息方塊，指出指定的索引鍵 （在此情況下 Caps Lock 鍵） 是否生效。</span><span class="sxs-lookup"><span data-stu-id="31784-1462">The following code example displays a message box indicating whether the specified key (the Caps Lock key in this case) is in effect.</span></span>  
  
 [!code-cpp[ControlIsKeyLocked#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlIsKeyLocked/CPP/controliskeylocked.cpp#1)]
 [!code-csharp[ControlIsKeyLocked#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlIsKeyLocked/CS/controliskeylocked.cs#1)]
 [!code-vb[ControlIsKeyLocked#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlIsKeyLocked/VB/controliskeylocked.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="31784-1463"><paramref name="keyVal" /> 參數會參考 CAPS LOCK、NUM LOCK 或 SCROLL LOCK 以外的按鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-1463">The <paramref name="keyVal" /> parameter refers to a key other than the CAPS LOCK, NUM LOCK, or SCROLL LOCK key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsMirrored">
      <MemberSignature Language="C#" Value="public bool IsMirrored { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMirrored" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsMirrored" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMirrored As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMirrored { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMirrored : bool" Usage="System.Windows.Forms.Control.IsMirrored" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1464">取得值，指出是否左右反轉控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1464">Gets a value indicating whether the control is mirrored.</span></span></summary>
        <value><span data-ttu-id="31784-1465">如果控制項左右反轉則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1465"><see langword="true" /> if the control is mirrored; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1466">鏡像的控制顯示版面配置和由右至左的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-1466">A mirrored control displays both layout and text from right to left.</span></span> <span data-ttu-id="31784-1467">如需詳細資訊，請參閱[How to： 建立鏡像 Windows Form 和控制項](http://msdn.microsoft.com/library/7c5c4ecc-9bfb-4508-8383-753e306719b1)。</span><span class="sxs-lookup"><span data-stu-id="31784-1467">For more information, see [How to: Create Mirrored Windows Forms and Controls](http://msdn.microsoft.com/library/7c5c4ecc-9bfb-4508-8383-753e306719b1).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMnemonic">
      <MemberSignature Language="C#" Value="public static bool IsMnemonic (char charCode, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMnemonic(char charCode, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMnemonic (charCode As Char, text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMnemonic(char charCode, System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member IsMnemonic : char * string -&gt; bool" Usage="System.Windows.Forms.Control.IsMnemonic (charCode, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="31784-1468">要測試的字元。</span><span class="sxs-lookup"><span data-stu-id="31784-1468">The character to test.</span></span></param>
        <param name="text"><span data-ttu-id="31784-1469">要搜尋的字串。</span><span class="sxs-lookup"><span data-stu-id="31784-1469">The string to search.</span></span></param>
        <summary><span data-ttu-id="31784-1470">判斷指定的字元是否為在指定字串中指派的助憶鍵字元。</span><span class="sxs-lookup"><span data-stu-id="31784-1470">Determines if the specified character is the mnemonic character assigned to the control in the specified string.</span></span></summary>
        <returns><span data-ttu-id="31784-1471">如果 <paramref name="charCode" /> 字元是指派至控制項的助憶鍵字元，是 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1471"><see langword="true" /> if the <paramref name="charCode" /> character is the mnemonic character assigned to the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1472">助憶鍵字元是緊接第一個執行個體的"&"中的字元<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="31784-1472">The mnemonic character is the character immediately following the first instance of "&" in a <xref:System.String>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1473">下列程式碼範例示範會覆寫 按鈕類別的延伸<xref:System.Windows.Forms.Control.ProcessMnemonic%2A>至展現自訂行為的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1473">The following code example demonstrates an extension of the button class that overrides the <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> method to exhibit custom behavior.</span></span> <span data-ttu-id="31784-1474">此範例也示範如何使用<xref:System.Windows.Forms.Control.CanSelect%2A>和<xref:System.Windows.Forms.Control.IsMnemonic%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1474">The example also demonstrates the use of the <xref:System.Windows.Forms.Control.CanSelect%2A> and <xref:System.Windows.Forms.Control.IsMnemonic%2A> properties.</span></span> <span data-ttu-id="31784-1475">若要執行此範例中貼上下列程式碼的表單類別之後，在相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="31784-1475">To run this example paste the following code after a form class, in the same file.</span></span> <span data-ttu-id="31784-1476">加入按鈕的型別`MnemonicButton`至表單。</span><span class="sxs-lookup"><span data-stu-id="31784-1476">Add a button of type `MnemonicButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-1477">繼承類別呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-1477">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="31784-1478">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1478">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Forms.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Forms.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1479">發生於按下按鍵且焦點在控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-1479">Occurs when a key is pressed while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1480">按鍵事件會依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-1480">Key events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 <span data-ttu-id="31784-1481">若要處理只能在表單層級的鍵盤事件，並啟用接收鍵盤事件的其他控制項，將<xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType>屬性在表單的<xref:System.Windows.Forms.Control.KeyPress>事件處理方法來`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-1481">To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> property in your form's <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`.</span></span> <span data-ttu-id="31784-1482">是自動由控制項處理特定按鍵，例如索引標籤、 RETURN、 esc 鍵和箭號。</span><span class="sxs-lookup"><span data-stu-id="31784-1482">Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically.</span></span> <span data-ttu-id="31784-1483">若要將會引發這些機碼<xref:System.Windows.Forms.Control.KeyDown>事件，必須覆寫<xref:System.Windows.Forms.Control.IsInputKey%2A>表單上的每個控制項中的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1483">To have these keys raise the <xref:System.Windows.Forms.Control.KeyDown> event, you must override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method in each control on your form.</span></span> <span data-ttu-id="31784-1484">覆寫的程式碼<xref:System.Windows.Forms.Control.IsInputKey%2A>就必須判斷其中一個特殊的金鑰按下，傳回的值`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-1484">The code for the override of the <xref:System.Windows.Forms.Control.IsInputKey%2A> would need to determine if one of the special keys is pressed and return a value of `true`.</span></span> <span data-ttu-id="31784-1485">而不是覆寫<xref:System.Windows.Forms.Control.IsInputKey%2A>方法，您可以處理<xref:System.Windows.Forms.Control.PreviewKeyDown>事件以及組<xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A>屬性`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-1485">Instead of overriding the <xref:System.Windows.Forms.Control.IsInputKey%2A> method, you can handle the <xref:System.Windows.Forms.Control.PreviewKeyDown> event and set the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`.</span></span> <span data-ttu-id="31784-1486">如需程式碼範例，請參閱<xref:System.Windows.Forms.Control.PreviewKeyDown>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1486">For a code example, see the <xref:System.Windows.Forms.Control.PreviewKeyDown> event.</span></span>  
  
 <span data-ttu-id="31784-1487">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1487">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1488">下列程式碼範例使用<xref:System.Windows.Forms.Control.KeyDown>事件，以判斷輸入控制項的字元類型。</span><span class="sxs-lookup"><span data-stu-id="31784-1488">The following code example uses the <xref:System.Windows.Forms.Control.KeyDown> event to determine the type of character entered into the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
        <altmember cref="T:System.Windows.Forms.KeyEventHandler" />
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyPress">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyPressEventHandler KeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyPressEventHandler KeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyPress As KeyPressEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::KeyPressEventHandler ^ KeyPress;" />
      <MemberSignature Language="F#" Value="member this.KeyPress : System.Windows.Forms.KeyPressEventHandler " Usage="member this.KeyPress : System.Windows.Forms.KeyPressEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyPressEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1489">發生於</span><span class="sxs-lookup"><span data-stu-id="31784-1489">Occurs when a character.</span></span> <span data-ttu-id="31784-1490">控制項有焦點，並按下字元空格鍵或退格鍵時。</span><span class="sxs-lookup"><span data-stu-id="31784-1490">space or backspace key is pressed while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1491">按鍵事件會依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-1491">Key events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 <span data-ttu-id="31784-1492"><xref:System.Windows.Forms.Control.KeyPress>空間和退格鍵以外的非字元按鍵不引發事件; 不過，並引發非字元按鍵<xref:System.Windows.Forms.Control.KeyDown>和<xref:System.Windows.Forms.Control.KeyUp>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1492">The <xref:System.Windows.Forms.Control.KeyPress> event is not raised by non-character keys other than space and backspace; however, the non-character keys do raise the <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyUp> events.</span></span>  
  
 <span data-ttu-id="31784-1493">使用<xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A>屬性範例按鍵輸入，在執行階段，並且將會使用或修改一般按鍵的子集。</span><span class="sxs-lookup"><span data-stu-id="31784-1493">Use the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property to sample keystrokes at run time and to consume or modify a subset of common keystrokes.</span></span>  
  
 <span data-ttu-id="31784-1494">若要處理只能在表單層級的鍵盤事件，並啟用接收鍵盤事件的其他控制項，將<xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType>屬性在表單的<xref:System.Windows.Forms.Control.KeyPress>事件處理方法來`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-1494">To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> property in your form's <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`.</span></span>  
  
 <span data-ttu-id="31784-1495">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1495">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1496">下列程式碼範例使用<xref:System.Windows.Forms.Control.KeyPress>防止字元輸入這個控制項的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1496">The following code example uses the <xref:System.Windows.Forms.Control.KeyPress> event to prevent characters from entering the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyPressEventArgs.KeyChar" />
        <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Forms.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Forms.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1497">發生於放開按鍵且焦點在控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-1497">Occurs when a key is released while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1498">按鍵事件會依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-1498">Key events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 <span data-ttu-id="31784-1499">若要處理只能在表單層級的鍵盤事件，並啟用接收鍵盤事件的其他控制項，將<xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType>屬性在表單的<xref:System.Windows.Forms.Control.KeyPress>事件處理方法來`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-1499">To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> property in your form's <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`.</span></span> <span data-ttu-id="31784-1500">是自動由控制項處理特定按鍵，例如索引標籤、 RETURN、 esc 鍵和箭號。</span><span class="sxs-lookup"><span data-stu-id="31784-1500">Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically.</span></span> <span data-ttu-id="31784-1501">若要將會引發這些機碼<xref:System.Windows.Forms.Control.KeyUp>事件，必須覆寫<xref:System.Windows.Forms.Control.IsInputKey%2A>表單上的每個控制項中的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1501">To have these keys raise the <xref:System.Windows.Forms.Control.KeyUp> event, you must override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method in each control on your form.</span></span> <span data-ttu-id="31784-1502">覆寫的程式碼<xref:System.Windows.Forms.Control.IsInputKey%2A>就必須判斷其中一個特殊的金鑰按下，傳回的值`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-1502">The code for the override of <xref:System.Windows.Forms.Control.IsInputKey%2A> would need to determine if one of the special keys is pressed and return a value of `true`.</span></span>  
  
 <span data-ttu-id="31784-1503">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1503">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1504">下列程式碼範例使用<xref:System.Windows.Forms.Control.KeyUp>事件<xref:System.Windows.Forms.Help>類別，以顯示快顯樣式協助使用者。</span><span class="sxs-lookup"><span data-stu-id="31784-1504">The following code example uses the <xref:System.Windows.Forms.Control.KeyUp> event with the <xref:System.Windows.Forms.Help> class to display pop-up style help to the user.</span></span>  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="Layout">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LayoutEventHandler Layout;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LayoutEventHandler Layout" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Layout" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Layout As LayoutEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LayoutEventHandler ^ Layout;" />
      <MemberSignature Language="F#" Value="member this.Layout : System.Windows.Forms.LayoutEventHandler " Usage="member this.Layout : System.Windows.Forms.LayoutEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LayoutEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1505">發生於控制項應重新調整其子控制項位置時。</span><span class="sxs-lookup"><span data-stu-id="31784-1505">Occurs when a control should reposition its child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1506"><xref:System.Windows.Forms.Control.Layout>子控制項所新增或移除，當控制項變更，以及其他可能變更的範圍可能會影響控制項的配置時，就會發生事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1506">The <xref:System.Windows.Forms.Control.Layout> event occurs when child controls are added or removed, when the bounds of the control changes, and when other changes occur that can affect the layout of the control.</span></span> <span data-ttu-id="31784-1507">配置事件可以使用，以歸併<xref:System.Windows.Forms.Control.SuspendLayout%2A>和<xref:System.Windows.Forms.Control.ResumeLayout%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1507">The layout event can be suppressed using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods.</span></span> <span data-ttu-id="31784-1508">暫止配置可讓您在控制項上執行多個動作，而不需要執行的每個變更的配置。</span><span class="sxs-lookup"><span data-stu-id="31784-1508">Suspending layout enables you to perform multiple actions on a control without having to perform a layout for each change.</span></span> <span data-ttu-id="31784-1509">例如，如果您調整大小並移動控制項，每一項作業將會引發<xref:System.Windows.Forms.Control.Layout>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1509">For example, if you resize and move a control, each operation would raise a <xref:System.Windows.Forms.Control.Layout> event.</span></span>  
  
 <span data-ttu-id="31784-1510">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1510">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1511">下列程式碼範例是為主<xref:System.Windows.Forms.Form>在螢幕上<xref:System.Windows.Forms.Control.Layout>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1511">The following code example centers a <xref:System.Windows.Forms.Form> on the screen in the <xref:System.Windows.Forms.Control.Layout> event.</span></span> <span data-ttu-id="31784-1512">如此可保留置中隨著使用者調整它的格式。</span><span class="sxs-lookup"><span data-stu-id="31784-1512">This will keep the form centered as the user resizes it.</span></span> <span data-ttu-id="31784-1513">這個範例需要您已建立<xref:System.Windows.Forms.Form>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1513">This example requires that you have created a <xref:System.Windows.Forms.Form> control.</span></span>  
  
 [!code-cpp[Control.Layout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Layout/CPP/layout.cpp#1)]
 [!code-csharp[Control.Layout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Layout/CS/layout.cs#1)]
 [!code-vb[Control.Layout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Layout/VB/layout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
      </Docs>
    </Member>
    <Member MemberName="LayoutEngine">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Layout.LayoutEngine LayoutEngine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Layout.LayoutEngine LayoutEngine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.LayoutEngine" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LayoutEngine As LayoutEngine" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Layout::LayoutEngine ^ LayoutEngine { System::Windows::Forms::Layout::LayoutEngine ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LayoutEngine : System.Windows.Forms.Layout.LayoutEngine" Usage="System.Windows.Forms.Control.LayoutEngine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Layout.LayoutEngine</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1514">取得控制項之配置引擎的快取執行個體。</span><span class="sxs-lookup"><span data-stu-id="31784-1514">Gets a cached instance of the control's layout engine.</span></span></summary>
        <value><span data-ttu-id="31784-1515">控制項內容的 <see cref="T:System.Windows.Forms.Layout.LayoutEngine" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1515">The <see cref="T:System.Windows.Forms.Layout.LayoutEngine" /> for the control's contents.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1516"><xref:System.Windows.Forms.Control.LayoutEngine%2A>控制項的子系，而不是控制項本身的屬性會取得版面配置引擎。</span><span class="sxs-lookup"><span data-stu-id="31784-1516">The <xref:System.Windows.Forms.Control.LayoutEngine%2A> property gets the layout engine for the control's children rather than for the control itself.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Layout.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public event EventHandler Leave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Leave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Leave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Leave;" />
      <MemberSignature Language="F#" Value="member this.Leave : EventHandler " Usage="member this.Leave : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1517">發生於輸入焦點離開控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-1517">Occurs when the input focus leaves the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1518">當您藉由呼叫中使用鍵盤 （TAB、 SHIFT + TAB，等等） 變更焦點時<xref:System.Windows.Forms.Control.Select%2A>或<xref:System.Windows.Forms.Control.SelectNextControl%2A>方法，或藉由設定<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType>屬性目前的表單，焦點事件會發生順序如下：</span><span class="sxs-lookup"><span data-stu-id="31784-1518">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="31784-1519">當您將焦點變更使用滑鼠或藉由呼叫<xref:System.Windows.Forms.Control.Focus%2A>方法，焦點事件會依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-1519">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="31784-1520">如果<xref:System.Windows.Forms.Control.CausesValidation%2A>屬性設定為`false`、<xref:System.Windows.Forms.Control.Validating>和<xref:System.Windows.Forms.Control.Validated>事件都會被隱藏。</span><span class="sxs-lookup"><span data-stu-id="31784-1520">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1521"><xref:System.Windows.Forms.Control.Enter>和<xref:System.Windows.Forms.Control.Leave>事件隱藏的<xref:System.Windows.Forms.Form>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1521">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are suppressed by the <xref:System.Windows.Forms.Form> class.</span></span> <span data-ttu-id="31784-1522">中的對等事件<xref:System.Windows.Forms.Form>類別<xref:System.Windows.Forms.Form.Activated>和<xref:System.Windows.Forms.Form.Deactivate>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1522">The equivalent events in the <xref:System.Windows.Forms.Form> class are the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="31784-1523"><xref:System.Windows.Forms.Control.Enter>和<xref:System.Windows.Forms.Control.Leave>事件階層，直到達到適當的控制項，向上和向下的父鏈結會串聯。</span><span class="sxs-lookup"><span data-stu-id="31784-1523">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached.</span></span> <span data-ttu-id="31784-1524">例如，假設您有<xref:System.Windows.Forms.Form>具有兩個<xref:System.Windows.Forms.GroupBox>控制項，以及每個<xref:System.Windows.Forms.GroupBox>控制項有一個<xref:System.Windows.Forms.TextBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1524">For example, assume you have a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.GroupBox> controls, and each <xref:System.Windows.Forms.GroupBox> control has one <xref:System.Windows.Forms.TextBox> control.</span></span> <span data-ttu-id="31784-1525">當插入號移從其中一個<xref:System.Windows.Forms.TextBox>，<xref:System.Windows.Forms.Control.Leave>都會引發事件<xref:System.Windows.Forms.TextBox>和<xref:System.Windows.Forms.GroupBox>，而<xref:System.Windows.Forms.Control.Enter>引發其他<xref:System.Windows.Forms.GroupBox>和<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1525">When the caret is moved from one <xref:System.Windows.Forms.TextBox> to the other, the <xref:System.Windows.Forms.Control.Leave> event is raised for the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.GroupBox>, and the <xref:System.Windows.Forms.Control.Enter> event is raised for the other <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TextBox>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="31784-1526">請勿嘗試將焦點設在<xref:System.Windows.Forms.Control.Enter>， <xref:System.Windows.Forms.Control.GotFocus>， <xref:System.Windows.Forms.Control.Leave>， <xref:System.Windows.Forms.Control.LostFocus>， <xref:System.Windows.Forms.Control.Validating>，或<xref:System.Windows.Forms.Control.Validated>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1526">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="31784-1527">如此一來，可能會導致您的應用程式或作業系統停止回應。</span><span class="sxs-lookup"><span data-stu-id="31784-1527">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="31784-1528">如需詳細資訊，請參閱[WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)主題。</span><span class="sxs-lookup"><span data-stu-id="31784-1528">For more information, see the [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="31784-1529">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1529">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1530">下列程式碼範例使用<xref:System.Windows.Forms.Control.Leave>其先前的狀態重設控制項的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1530">The following code example uses the <xref:System.Windows.Forms.Control.Leave> event to reset a control to its former state.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public int Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Left { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Left : int with get, set" Usage="System.Windows.Forms.Control.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1531">取得或設定控制項左邊緣和其容器工作區 (Client Area) 左邊緣之間的距離 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-1531">Gets or sets the distance, in pixels, between the left edge of the control and the left edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="31784-1532"><see cref="T:System.Int32" />，代表控制項左緣和其容器工作區左緣之間的距離 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-1532">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the left edge of the control and the left edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1533"><xref:System.Windows.Forms.Control.Left%2A>屬性值相當於<xref:System.Drawing.Point.X%2A?displayProperty=nameWithType>屬性<xref:System.Windows.Forms.Control.Location%2A>控制項的屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-1533">The <xref:System.Windows.Forms.Control.Left%2A> property value is equivalent to the <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> property of the <xref:System.Windows.Forms.Control.Location%2A> property value of the control.</span></span>  
  
 <span data-ttu-id="31784-1534">所做的變更<xref:System.Windows.Forms.Control.Width%2A>和<xref:System.Windows.Forms.Control.Left%2A>屬性值會使<xref:System.Windows.Forms.Control.Right%2A>變更控制項的屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-1534">Changes made to the <xref:System.Windows.Forms.Control.Width%2A> and <xref:System.Windows.Forms.Control.Left%2A> property values cause the <xref:System.Windows.Forms.Control.Right%2A> property value of the control to change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1535">下列程式碼範例會建立三個<xref:System.Windows.Forms.Button>表單上的控制項，並將其大小和位置設定使用的各種大小與和位置相關的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1535">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="31784-1536">這個範例需要您有<xref:System.Windows.Forms.Form>有寬度和高度的最少 300 像素為單位。</span><span class="sxs-lookup"><span data-stu-id="31784-1536">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Point.X" />
        <altmember cref="P:System.Windows.Forms.Control.Right" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Location" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Location { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.Location : System.Drawing.Point with get, set" Usage="System.Windows.Forms.Control.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1537">取得或設定對應至控制項容器左上角之控制項左上角的座標。</span><span class="sxs-lookup"><span data-stu-id="31784-1537">Gets or sets the coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</span></span></summary>
        <value><span data-ttu-id="31784-1538"><see cref="T:System.Drawing.Point" />，表示對應至控制項容器左上角之控制項的左上角。</span><span class="sxs-lookup"><span data-stu-id="31784-1538">The <see cref="T:System.Drawing.Point" /> that represents the upper-left corner of the control relative to the upper-left corner of its container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1539">因為<xref:System.Drawing.Point>類別是實值類型 (`Structure`在 Visual Basic 中`struct`Visual C# 中)，它會傳回值，表示存取屬性會傳回控制項的左上角點的複本。</span><span class="sxs-lookup"><span data-stu-id="31784-1539">Because the <xref:System.Drawing.Point> class is a value type (`Structure` in Visual Basic, `struct` in Visual C#), it is returned by value, meaning accessing the property returns a copy of the upper-left point of the control.</span></span> <span data-ttu-id="31784-1540">因此，調整<xref:System.Drawing.Point.X%2A>或<xref:System.Drawing.Point.Y%2A>屬性<xref:System.Drawing.Point>傳回從這個屬性將不會影響<xref:System.Windows.Forms.Control.Left%2A>， <xref:System.Windows.Forms.Control.Right%2A>， <xref:System.Windows.Forms.Control.Top%2A>，或<xref:System.Windows.Forms.Control.Bottom%2A>控制項的屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-1540">So, adjusting the <xref:System.Drawing.Point.X%2A> or <xref:System.Drawing.Point.Y%2A> properties of the <xref:System.Drawing.Point> returned from this property will not affect the <xref:System.Windows.Forms.Control.Left%2A>, <xref:System.Windows.Forms.Control.Right%2A>, <xref:System.Windows.Forms.Control.Top%2A>, or <xref:System.Windows.Forms.Control.Bottom%2A> property values of the control.</span></span> <span data-ttu-id="31784-1541">若要調整這些屬性會個別設定每個屬性值，或設定<xref:System.Windows.Forms.Control.Location%2A>屬性與新<xref:System.Drawing.Point>。</span><span class="sxs-lookup"><span data-stu-id="31784-1541">To adjust these properties set each property value individually, or set the <xref:System.Windows.Forms.Control.Location%2A> property with a new <xref:System.Drawing.Point>.</span></span>  
  
 <span data-ttu-id="31784-1542">如果<xref:System.Windows.Forms.Control>是<xref:System.Windows.Forms.Form>、<xref:System.Windows.Forms.Control.Location%2A>屬性值表示的左上角<xref:System.Windows.Forms.Form>螢幕座標中。</span><span class="sxs-lookup"><span data-stu-id="31784-1542">If the <xref:System.Windows.Forms.Control> is a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Location%2A> property value represents the upper-left corner of the <xref:System.Windows.Forms.Form> in screen coordinates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1543">下列程式碼範例會建立<xref:System.Windows.Forms.GroupBox>並設定一些常見的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1543">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="31784-1544">此範例會建立<xref:System.Windows.Forms.TextBox>並設定其<xref:System.Windows.Forms.Control.Location%2A>群組方塊內。</span><span class="sxs-lookup"><span data-stu-id="31784-1544">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="31784-1545">接下來，設定<xref:System.Windows.Forms.Control.Text%2A>屬性群組 方塊中，群組方塊的停駐在表單頂端。</span><span class="sxs-lookup"><span data-stu-id="31784-1545">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="31784-1546">最後，它會停用 [群組] 方塊設定<xref:System.Windows.Forms.Control.Enabled%2A>屬性`false`，因而導致停用群組內包含的所有控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1546">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LocationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.LocationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LocationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LocationChanged;" />
      <MemberSignature Language="F#" Value="member this.LocationChanged : EventHandler " Usage="member this.LocationChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1547">發生於 <see cref="P:System.Windows.Forms.Control.Location" /> 屬性值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-1547">Occurs when the <see cref="P:System.Windows.Forms.Control.Location" /> property value has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1548">如果會引發這個事件<xref:System.Windows.Forms.Control.Location%2A>屬性變更時以程式設計方式修改或透過互動。</span><span class="sxs-lookup"><span data-stu-id="31784-1548">This event is raised if the <xref:System.Windows.Forms.Control.Location%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="31784-1549">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1549">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1550">下列程式碼範例會引發<xref:System.Windows.Forms.Control.LocationChanged>事件<xref:System.Windows.Forms.StatusStrip>表單會調整大小。</span><span class="sxs-lookup"><span data-stu-id="31784-1550">The following code example raises the <xref:System.Windows.Forms.Control.LocationChanged> event on a <xref:System.Windows.Forms.StatusStrip> when the form is resized.</span></span>  
  
 [!code-csharp[System.Windows.Forms.LocationChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LocationChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.LocationChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LocationChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="LogicalToDeviceUnits">
      <MemberSignature Language="C#" Value="public int LogicalToDeviceUnits (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LogicalToDeviceUnits(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.LogicalToDeviceUnits(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogicalToDeviceUnits (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LogicalToDeviceUnits(int value);" />
      <MemberSignature Language="F#" Value="member this.LogicalToDeviceUnits : int -&gt; int" Usage="control.LogicalToDeviceUnits value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="31784-1551">要轉換的邏輯值。</span><span class="sxs-lookup"><span data-stu-id="31784-1551">The Logical value to convert.</span></span></param>
        <summary><span data-ttu-id="31784-1552">將邏輯 DPI 值轉換為它的對等 DeviceUnit DPI 值。</span><span class="sxs-lookup"><span data-stu-id="31784-1552">Converts a Logical DPI value to it's equivalent DeviceUnit DPI value.</span></span></summary>
        <returns><span data-ttu-id="31784-1553">產生的 DeviceUnit 值。</span><span class="sxs-lookup"><span data-stu-id="31784-1553">The resulting DeviceUnit value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event EventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : EventHandler " Usage="member this.LostFocus : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1554">發生於控制項遺失焦點時。</span><span class="sxs-lookup"><span data-stu-id="31784-1554">Occurs when the control loses focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1555">當您藉由呼叫中使用鍵盤 （TAB、 SHIFT + TAB，等等） 變更焦點時<xref:System.Windows.Forms.Control.Select%2A>或<xref:System.Windows.Forms.Control.SelectNextControl%2A>方法，或藉由設定<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType>屬性目前的表單，焦點事件會發生順序如下：</span><span class="sxs-lookup"><span data-stu-id="31784-1555">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="31784-1556">當您將焦點變更使用滑鼠或藉由呼叫<xref:System.Windows.Forms.Control.Focus%2A>方法，焦點事件會依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-1556">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="31784-1557">如果<xref:System.Windows.Forms.Control.CausesValidation%2A>屬性設定為`false`、<xref:System.Windows.Forms.Control.Validating>和<xref:System.Windows.Forms.Control.Validated>事件都會被隱藏。</span><span class="sxs-lookup"><span data-stu-id="31784-1557">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="31784-1558">如果<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>屬性<xref:System.ComponentModel.CancelEventArgs>設`true`中<xref:System.Windows.Forms.Control.Validating>事件委派，通常會在之後發生的所有事件<xref:System.Windows.Forms.Control.Validating>事件都會被隱藏。</span><span class="sxs-lookup"><span data-stu-id="31784-1558">If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1559"><xref:System.Windows.Forms.Control.GotFocus>和<xref:System.Windows.Forms.Control.LostFocus>事件是低階的焦點事件會繫結至 WM_KILLFOCUS 和 WM_SETFOCUS Windows 訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-1559">The <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages.</span></span> <span data-ttu-id="31784-1560">一般而言，<xref:System.Windows.Forms.Control.GotFocus>和<xref:System.Windows.Forms.Control.LostFocus>更新時，才會使用事件<xref:System.Windows.Forms.UICues>或撰寫自訂控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-1560">Typically, the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are only used when updating <xref:System.Windows.Forms.UICues> or when writing custom controls.</span></span> <span data-ttu-id="31784-1561">改為<xref:System.Windows.Forms.Control.Enter>和<xref:System.Windows.Forms.Control.Leave>事件應該可用於所有的控制項，除了<xref:System.Windows.Forms.Form>類別，它會使用<xref:System.Windows.Forms.Form.Activated>和<xref:System.Windows.Forms.Form.Deactivate>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1561">Instead the <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events should be used for all controls except the <xref:System.Windows.Forms.Form> class, which uses the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="31784-1562">如需有關<xref:System.Windows.Forms.Control.GotFocus>和<xref:System.Windows.Forms.Control.LostFocus>事件，請參閱[WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)和[WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)主題。</span><span class="sxs-lookup"><span data-stu-id="31784-1562">For more information about the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events, see the [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) and [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topics.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="31784-1563">請勿嘗試將焦點設在<xref:System.Windows.Forms.Control.Enter>， <xref:System.Windows.Forms.Control.GotFocus>， <xref:System.Windows.Forms.Control.Leave>， <xref:System.Windows.Forms.Control.LostFocus>， <xref:System.Windows.Forms.Control.Validating>，或<xref:System.Windows.Forms.Control.Validated>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1563">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="31784-1564">如此一來，可能會導致您的應用程式或作業系統停止回應。</span><span class="sxs-lookup"><span data-stu-id="31784-1564">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="31784-1565">如需詳細資訊，請參閱[WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)主題。</span><span class="sxs-lookup"><span data-stu-id="31784-1565">For more information, see the [WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="31784-1566">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1566">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1567">下列程式碼範例示範如何驗證 TextBox1 文字。</span><span class="sxs-lookup"><span data-stu-id="31784-1567">The following code example demonstrates validating the text for TextBox1.</span></span> <span data-ttu-id="31784-1568">它也會示範處理<xref:System.Windows.Forms.Control.LostFocus>藉由設定事件<xref:System.Windows.Forms.FileDialog.InitialDirectory%2A?displayProperty=nameWithType>TextBox1 中文字的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1568">It also demonstrates handling the <xref:System.Windows.Forms.Control.LostFocus> event by setting the <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A?displayProperty=nameWithType> property to the text in TextBox1.</span></span> <span data-ttu-id="31784-1569">使用的程式碼範例<xref:System.Windows.Forms.ErrorProvider.GetError%2A?displayProperty=nameWithType>方法來檢查錯誤，然後再開啟 [檔案] 對話方塊。</span><span class="sxs-lookup"><span data-stu-id="31784-1569">The code example used the <xref:System.Windows.Forms.ErrorProvider.GetError%2A?displayProperty=nameWithType> method to check for an error before opening the file dialog box.</span></span> <span data-ttu-id="31784-1570">若要執行此範例中，將下列程式碼貼到表單，其中包含<xref:System.Windows.Forms.TextBox>名為`TextBox1`、<xref:System.Windows.Forms.OpenFileDialog>名為`OpenFileDialog1`、<xref:System.Windows.Forms.Button>名為`Button1`，和<xref:System.Windows.Forms.ErrorProvider>名為`ErrorProvider1`。</span><span class="sxs-lookup"><span data-stu-id="31784-1570">To run this example, paste the following code into a form containing a <xref:System.Windows.Forms.TextBox> named `TextBox1`, an <xref:System.Windows.Forms.OpenFileDialog> named `OpenFileDialog1`, a <xref:System.Windows.Forms.Button> named `Button1`, and an <xref:System.Windows.Forms.ErrorProvider> named `ErrorProvider1`.</span></span> <span data-ttu-id="31784-1571">請確定所有事件都都具有其事件處理常式相關聯。</span><span class="sxs-lookup"><span data-stu-id="31784-1571">Ensure all events are associated with their event handlers.</span></span>  
  
 [!code-cpp[System.Windows.Forms.FileDialog#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#2)]
 [!code-csharp[System.Windows.Forms.FileDialog#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#2)]
 [!code-vb[System.Windows.Forms.FileDialog#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
        <altmember cref="E:System.Windows.Forms.Control.Leave" />
        <altmember cref="E:System.Windows.Forms.Form.Deactivate" />
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Margin { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.Control.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1572">取得或設定控制項之間的空格。</span><span class="sxs-lookup"><span data-stu-id="31784-1572">Gets or sets the space between controls.</span></span></summary>
        <value><span data-ttu-id="31784-1573"><see cref="T:System.Windows.Forms.Padding" />，表示控制項之間的間距。</span><span class="sxs-lookup"><span data-stu-id="31784-1573">A <see cref="T:System.Windows.Forms.Padding" /> representing the space between controls.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1574">控制項可接收的預設值<xref:System.Windows.Forms.Control.Margin%2A>所相當接近 Windows 使用者介面指導方針。</span><span class="sxs-lookup"><span data-stu-id="31784-1574">Controls receive default values for <xref:System.Windows.Forms.Control.Margin%2A> that are reasonably close to Windows user interface guidelines.</span></span> <span data-ttu-id="31784-1575">一些調整仍可能需要特定的應用程式。</span><span class="sxs-lookup"><span data-stu-id="31784-1575">Some adjustments might still be necessary for particular applications.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1576">設定<xref:System.Windows.Forms.Control.Margin%2A>停駐控制項上有任何影響的控制項與其容器邊緣的距離。</span><span class="sxs-lookup"><span data-stu-id="31784-1576">Setting the <xref:System.Windows.Forms.Control.Margin%2A> property on a docked control has no effect on the distance of the control from the edges of its container.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarginChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MarginChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MarginChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MarginChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MarginChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MarginChanged;" />
      <MemberSignature Language="F#" Value="member this.MarginChanged : EventHandler " Usage="member this.MarginChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1577">發生於控制項的邊界變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-1577">Occurs when the control's margin changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1578">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1578">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1579">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-1579">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-1580">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.MarginChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1580">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.MarginChanged> event.</span></span> <span data-ttu-id="31784-1581">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-1581">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-1582">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1582">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-1583">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1583">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-1584">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.MarginChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1584">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.MarginChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#21)]
 [!code-vb[System.Windows.Forms.EventExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size MaximumSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MaximumSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property MaximumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size MaximumSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.MaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(typeof(System.Drawing.Size), "0, 0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1585">取得或設定 <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> 可以指定的上限大小。</span><span class="sxs-lookup"><span data-stu-id="31784-1585">Gets or sets the size that is the upper limit that <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> can specify.</span></span></summary>
        <value><span data-ttu-id="31784-1586"><see cref="T:System.Drawing.Size" /> 類型的排序配對，代表矩形的寬度與高度。</span><span class="sxs-lookup"><span data-stu-id="31784-1586">An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size MinimumSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MinimumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MinimumSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property MinimumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size MinimumSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.MinimumSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.MinimumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1587">取得或設定 <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> 可以指定的下限大小。</span><span class="sxs-lookup"><span data-stu-id="31784-1587">Gets or sets the size that is the lower limit that <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> can specify.</span></span></summary>
        <value><span data-ttu-id="31784-1588"><see cref="T:System.Drawing.Size" /> 類型的排序配對，代表矩形的寬度與高度。</span><span class="sxs-lookup"><span data-stu-id="31784-1588">An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifierKeys">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Keys ModifierKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.Keys ModifierKeys" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ModifierKeys" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ModifierKeys As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::Keys ModifierKeys { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.ModifierKeys : System.Windows.Forms.Keys" Usage="System.Windows.Forms.Control.ModifierKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1589">取得表示哪個輔助按鍵 (SHIFT、CTRL 和 ALT) 是處於按下狀態的值。</span><span class="sxs-lookup"><span data-stu-id="31784-1589">Gets a value indicating which of the modifier keys (SHIFT, CTRL, and ALT) is in a pressed state.</span></span></summary>
        <value><span data-ttu-id="31784-1590"><see cref="T:System.Windows.Forms.Keys" /> 值的位元組合。</span><span class="sxs-lookup"><span data-stu-id="31784-1590">A bitwise combination of the <see cref="T:System.Windows.Forms.Keys" /> values.</span></span> <span data-ttu-id="31784-1591">預設值為 <see cref="F:System.Windows.Forms.Keys.None" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1591">The default is <see cref="F:System.Windows.Forms.Keys.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="31784-1592">按一下按鈕時，按下 CTRL 鍵時，下列程式碼範例會隱藏按鈕。</span><span class="sxs-lookup"><span data-stu-id="31784-1592">The following code example hides a button when the CTRL key is pressed while the button is clicked.</span></span> <span data-ttu-id="31784-1593">這個範例需要您有<xref:System.Windows.Forms.Button>名為`button1`上<xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="31784-1593">This example requires that you have a <xref:System.Windows.Forms.Button> named `button1` on a <xref:System.Windows.Forms.Form>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members4#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#2)]
 [!code-vb[Windows.Forms.Control Members4#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Keys" />
      </Docs>
    </Member>
    <Member MemberName="MouseButtons">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.MouseButtons MouseButtons { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.MouseButtons MouseButtons" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MouseButtons" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MouseButtons As MouseButtons" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::MouseButtons MouseButtons { System::Windows::Forms::MouseButtons get(); };" />
      <MemberSignature Language="F#" Value="member this.MouseButtons : System.Windows.Forms.MouseButtons" Usage="System.Windows.Forms.Control.MouseButtons" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseButtons</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1594">取得表示哪個滑鼠按鈕是處於按下狀態的值。</span><span class="sxs-lookup"><span data-stu-id="31784-1594">Gets a value indicating which of the mouse buttons is in a pressed state.</span></span></summary>
        <value><span data-ttu-id="31784-1595"><see cref="T:System.Windows.Forms.MouseButtons" /> 列舉值的位元組合。</span><span class="sxs-lookup"><span data-stu-id="31784-1595">A bitwise combination of the <see cref="T:System.Windows.Forms.MouseButtons" /> enumeration values.</span></span> <span data-ttu-id="31784-1596">預設值為 <see cref="F:System.Windows.Forms.MouseButtons.None" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1596">The default is <see cref="F:System.Windows.Forms.MouseButtons.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="31784-1597">下列程式碼範例示範如何使用<xref:System.Windows.Forms.Control.BackColor%2A>， <xref:System.Windows.Forms.Control.RectangleToScreen%2A>， <xref:System.Windows.Forms.Control.PointToScreen%2A>， <xref:System.Windows.Forms.Control.MouseButtons%2A>， <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>，和<xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType>成員。</span><span class="sxs-lookup"><span data-stu-id="31784-1597">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> members.</span></span> <span data-ttu-id="31784-1598">若要執行此範例，下列的程式碼貼在名為 Form1 表單包含多個控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1598">To run the example, paste the following code in a form called Form1 containing several controls.</span></span> <span data-ttu-id="31784-1599">這個範例需要<xref:System.Windows.Forms.Control.MouseDown>， <xref:System.Windows.Forms.Control.MouseMove>，和<xref:System.Windows.Forms.Control.MouseUp>事件都已連接的範例中定義的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1599">This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MouseButtons" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseCaptureChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MouseCaptureChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseCaptureChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseCaptureChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseCaptureChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseCaptureChanged;" />
      <MemberSignature Language="F#" Value="member this.MouseCaptureChanged : EventHandler " Usage="member this.MouseCaptureChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1600">發生於控制項遺失滑鼠捕捉時。</span><span class="sxs-lookup"><span data-stu-id="31784-1600">Occurs when the control loses mouse capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1601">在罕見的情況下，您可能需要在偵測到未預期的輸入。</span><span class="sxs-lookup"><span data-stu-id="31784-1601">In rare scenarios, you might need to detect unexpected input.</span></span> <span data-ttu-id="31784-1602">例如，請考慮下列案例。</span><span class="sxs-lookup"><span data-stu-id="31784-1602">For example, consider the following scenarios.</span></span>  
  
-   <span data-ttu-id="31784-1603">在滑鼠作業時，使用者會開啟 [開始] 功能表，請按 Windows 鍵或 CTRL + esc 鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-1603">During a mouse operation, the user opens the Start menu by pressing the Windows key or CTRL+ESC.</span></span>  
  
-   <span data-ttu-id="31784-1604">在滑鼠作業時，使用者會切換成另一個程式按 ALT + TAB。</span><span class="sxs-lookup"><span data-stu-id="31784-1604">During a mouse operation, the user switches to another program by pressing ALT+TAB.</span></span>  
  
-   <span data-ttu-id="31784-1605">滑鼠作業時，另一個程式會顯示在視窗或接受焦點從目前的應用程式的訊息方塊。</span><span class="sxs-lookup"><span data-stu-id="31784-1605">During a mouse operation, another program displays a window or a message box that takes focus away from the current application.</span></span>  
  
 <span data-ttu-id="31784-1606">滑鼠的作業可能包括按一下並按住滑鼠按一下表單或控制項，或執行滑鼠拖曳作業。</span><span class="sxs-lookup"><span data-stu-id="31784-1606">Mouse operations can include clicking and holding the mouse on a form or a control, or performing a mouse drag operation.</span></span> <span data-ttu-id="31784-1607">如果您有可偵測當表單或控制項失去滑鼠捕捉這些及相關的非預期情況下，您可以使用<xref:System.Windows.Forms.Control.MouseCaptureChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1607">If you have to detect when a form or a control loses mouse capture for these and related unexpected scenarios, you can use the <xref:System.Windows.Forms.Control.MouseCaptureChanged> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1608">下列程式碼範例示範<xref:System.Windows.Forms.Control.MouseCaptureChanged>事件<xref:System.Windows.Forms.Button>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1608">The following code example demonstrates the <xref:System.Windows.Forms.Control.MouseCaptureChanged> event for a <xref:System.Windows.Forms.Button> control.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.MouseCaptureChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.mousecapturechanged/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.MouseCaptureChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.mousecapturechanged/vb/form1.vb#1)]  
  
 <span data-ttu-id="31784-1609">若要測試此範例中，它在偵錯工具中按 f5 鍵執行。</span><span class="sxs-lookup"><span data-stu-id="31784-1609">To test this example, run it in the debugger by pressing F5.</span></span> <span data-ttu-id="31784-1610">開啟**輸出**Visual Studio 中的視窗，讓您可以查看當引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1610">Open the **Output** window in Visual Studio so that you can see when events are raised.</span></span> <span data-ttu-id="31784-1611">按一下<xref:System.Windows.Forms.Button>，並注意下列輸出。</span><span class="sxs-lookup"><span data-stu-id="31784-1611">Click the <xref:System.Windows.Forms.Button> and notice the following output.</span></span>  
  
 `button1_MouseDown`  
  
 `button1_MouseUp`  
  
 `button1_MouseCaptureChanged`  
  
 <span data-ttu-id="31784-1612">現在，按住滑鼠左鍵<xref:System.Windows.Forms.Button>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1612">Now, click and hold the left mouse button on the <xref:System.Windows.Forms.Button> control.</span></span> <span data-ttu-id="31784-1613">同時仍按一下滑鼠，請按 ALT + TAB，切換到另一個程式。</span><span class="sxs-lookup"><span data-stu-id="31784-1613">While still clicking the mouse, press ALT+TAB to switch to another program.</span></span> <span data-ttu-id="31784-1614">請注意，<xref:System.Windows.Forms.Control.MouseCaptureChanged>就會引發事件，讓您可能會解決這種情況。</span><span class="sxs-lookup"><span data-stu-id="31784-1614">Notice that the <xref:System.Windows.Forms.Control.MouseCaptureChanged> event is raised enabling you to potentially handle this scenario.</span></span> <span data-ttu-id="31784-1615">根據您的動作，<xref:System.Windows.Forms.Control.MouseUp>可能不會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1615">Depending on your actions, the <xref:System.Windows.Forms.Control.MouseUp> event might not be raised.</span></span> <span data-ttu-id="31784-1616">您也可以嘗試這項測試的 Windows 鍵或 CTRL + esc 鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-1616">You can also try this test with the Windows key or CTRL+ESC.</span></span>  
  
 `button1_MouseDown`  
  
 `button1_MouseCaptureChanged`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseClick;" />
      <MemberSignature Language="F#" Value="member this.MouseClick : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseClick : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1617">發生於以滑鼠按一下控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-1617">Occurs when the control is clicked by the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1618">當資料指標通常是在控制項上按滑鼠按鈕時，會引發一系列如下的控制項的事件：</span><span class="sxs-lookup"><span data-stu-id="31784-1618">Depressing a mouse button when the cursor is over a control typically raises the following series of events from the control:</span></span>  
  
1.  <span data-ttu-id="31784-1619"><xref:System.Windows.Forms.Control.MouseDown> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1619"><xref:System.Windows.Forms.Control.MouseDown> event.</span></span>  
  
2.  <span data-ttu-id="31784-1620"><xref:System.Windows.Forms.Control.Click> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1620"><xref:System.Windows.Forms.Control.Click> event.</span></span>  
  
3.  <span data-ttu-id="31784-1621"><xref:System.Windows.Forms.Control.MouseClick> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1621"><xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
4.  <span data-ttu-id="31784-1622"><xref:System.Windows.Forms.Control.MouseUp> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1622"><xref:System.Windows.Forms.Control.MouseUp> event.</span></span>  
  
 <span data-ttu-id="31784-1623">要執行此，就無法停用各種事件中控制項的類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1623">For this to occur, the various events cannot be disabled in the control's class.</span></span>  
  
 <span data-ttu-id="31784-1624">兩個單一發生關閉足夠的時間，取決於使用者的作業系統的滑鼠設定將產生的點選<xref:System.Windows.Forms.Control.MouseDoubleClick>事件，而不是第二個<xref:System.Windows.Forms.Control.MouseClick>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1624">Two single clicks that occur close enough in time, as determined by the mouse settings of the user's operating system, will generate a <xref:System.Windows.Forms.Control.MouseDoubleClick> event instead of the second <xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="31784-1625"><xref:System.Windows.Forms.Control.Click> 事件是控制項的以邏輯方式較高層級事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1625"><xref:System.Windows.Forms.Control.Click> events are logically higher-level events of a control.</span></span> <span data-ttu-id="31784-1626">它們通常會引發受到其他動作，例如，當控制項取得焦點時按下 ENTER 鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-1626">They are often raised by other actions, such as pressing the ENTER key when the control has focus.</span></span>  
  
 <span data-ttu-id="31784-1627">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1627">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1628">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-1628">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-1629">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.MouseClick>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1629">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.MouseClick> event.</span></span> <span data-ttu-id="31784-1630">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-1630">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-1631">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1631">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-1632">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1632">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-1633">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.MouseClick>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1633">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#54)]
 [!code-vb[System.Windows.Forms.EventExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDown" />
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDoubleClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseDoubleClick;" />
      <MemberSignature Language="F#" Value="member this.MouseDoubleClick : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseDoubleClick : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1634">發生於以滑鼠按兩下控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-1634">Occurs when the control is double clicked by the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1635"><xref:System.Windows.Forms.Control.MouseDoubleClick>時使用者按下滑鼠按鈕中快速且連續兩次，資料指標位於控制項上時，就會發生事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1635">The <xref:System.Windows.Forms.Control.MouseDoubleClick> event occurs when the user depresses a mouse button twice in quick succession when the cursor is over the control.</span></span> <span data-ttu-id="31784-1636">按兩下分隔兩個單一按鍵的時間間隔取決於使用者的作業系統的滑鼠設定。</span><span class="sxs-lookup"><span data-stu-id="31784-1636">The time interval that separates two single clicks from a double-click is determined by the mouse settings of the user's operating system.</span></span>  
  
 <span data-ttu-id="31784-1637">控制項就會發生這類使用者動作時，即會引發下列一系列的事件：</span><span class="sxs-lookup"><span data-stu-id="31784-1637">The following series of events is raised by the control when such a user action takes place:</span></span>  
  
1.  <span data-ttu-id="31784-1638"><xref:System.Windows.Forms.Control.MouseDown> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1638"><xref:System.Windows.Forms.Control.MouseDown> event.</span></span>  
  
2.  <span data-ttu-id="31784-1639"><xref:System.Windows.Forms.Control.Click> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1639"><xref:System.Windows.Forms.Control.Click> event.</span></span>  
  
3.  <span data-ttu-id="31784-1640"><xref:System.Windows.Forms.Control.MouseClick> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1640"><xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
4.  <span data-ttu-id="31784-1641"><xref:System.Windows.Forms.Control.MouseUp> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1641"><xref:System.Windows.Forms.Control.MouseUp> event.</span></span>  
  
5.  <span data-ttu-id="31784-1642"><xref:System.Windows.Forms.Control.MouseDown> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1642"><xref:System.Windows.Forms.Control.MouseDown> event.</span></span>  
  
6.  <span data-ttu-id="31784-1643"><xref:System.Windows.Forms.Control.DoubleClick> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1643"><xref:System.Windows.Forms.Control.DoubleClick> event.</span></span>  
  
7.  <span data-ttu-id="31784-1644"><xref:System.Windows.Forms.Control.MouseDoubleClick> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1644"><xref:System.Windows.Forms.Control.MouseDoubleClick> event.</span></span>  
  
8.  <span data-ttu-id="31784-1645"><xref:System.Windows.Forms.Control.MouseUp> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1645"><xref:System.Windows.Forms.Control.MouseUp> event.</span></span>  
  
 <span data-ttu-id="31784-1646">要執行此，就無法停用各種事件中控制項的類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1646">For this to occur, the various events cannot be disabled in the control's class.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="31784-1647"><xref:System.Windows.Forms.Control.DoubleClick> 事件是控制項的以邏輯方式較高層級事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1647"><xref:System.Windows.Forms.Control.DoubleClick> events are logically higher-level events of a control.</span></span> <span data-ttu-id="31784-1648">它們可能會由其他使用者動作，例如快速鍵組合所引發。</span><span class="sxs-lookup"><span data-stu-id="31784-1648">They may be raised by other user actions, such as shortcut key combinations.</span></span>  
  
 <span data-ttu-id="31784-1649">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1649">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1650">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-1650">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-1651">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.MouseDoubleClick>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1651">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.MouseDoubleClick> event.</span></span> <span data-ttu-id="31784-1652">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-1652">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-1653">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1653">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-1654">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1654">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-1655">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.MouseDoubleClick>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1655">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.MouseDoubleClick> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#55)]
 [!code-vb[System.Windows.Forms.EventExamples#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseDown : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1656">發生於滑鼠指標位於控制項上，並且按下滑鼠按鍵時。</span><span class="sxs-lookup"><span data-stu-id="31784-1656">Occurs when the mouse pointer is over the control and a mouse button is pressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1657">滑鼠事件依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-1657">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1658">無法針對引發下列事件<xref:System.Windows.Forms.TabControl>類別除非至少一個<xref:System.Windows.Forms.TabPage>中<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>集合： <xref:System.Windows.Forms.Control.Click>， <xref:System.Windows.Forms.Control.DoubleClick>， <xref:System.Windows.Forms.Control.MouseDown>， <xref:System.Windows.Forms.Control.MouseUp>， <xref:System.Windows.Forms.Control.MouseHover>， <xref:System.Windows.Forms.Control.MouseEnter>，<xref:System.Windows.Forms.Control.MouseLeave>和<xref:System.Windows.Forms.Control.MouseMove>。</span><span class="sxs-lookup"><span data-stu-id="31784-1658">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="31784-1659">如果沒有至少一個<xref:System.Windows.Forms.TabPage>在集合中，與使用者互動具有索引標籤控制項的標頭 (其中<xref:System.Windows.Forms.TabPage>名稱會出現)，則<xref:System.Windows.Forms.TabControl>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1659">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="31784-1660">不過，如果使用者互動是索引標籤頁面上，工作區內<xref:System.Windows.Forms.TabPage>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1660">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="31784-1661">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1661">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1662">下列程式碼範例示範如何使用不同的滑鼠事件上繪製的路徑滑鼠<xref:System.Windows.Forms.Panel>。</span><span class="sxs-lookup"><span data-stu-id="31784-1662">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="31784-1663">直線線段加入<xref:System.Drawing.Drawing2D.GraphicsPath>每個<xref:System.Windows.Forms.Control.MouseMove>和<xref:System.Windows.Forms.Control.MouseDown>所發生的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1663">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="31784-1664">若要更新圖形，<xref:System.Windows.Forms.Control.Invalidate%2A>方法針對呼叫<xref:System.Windows.Forms.Panel>每`MouseDown`和`MouseUp`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1664">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="31784-1665">此外，圖形的路徑會捲動向上或向下時<xref:System.Windows.Forms.Control.MouseWheel>就會發生事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1665">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="31784-1666">其他的滑鼠事件，例如<xref:System.Windows.Forms.Control.MouseHover>，以及螢幕上所識別。</span><span class="sxs-lookup"><span data-stu-id="31784-1666">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="31784-1667">也會顯示在螢幕上會從滑鼠相關的其他資訊<xref:System.Windows.Forms.SystemInformation>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1667">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event EventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : EventHandler " Usage="member this.MouseEnter : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1668">發生於滑鼠指標進入控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-1668">Occurs when the mouse pointer enters the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1669">滑鼠事件依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-1669">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1670">無法針對引發下列事件<xref:System.Windows.Forms.TabControl>類別除非至少一個<xref:System.Windows.Forms.TabPage>中<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>集合： <xref:System.Windows.Forms.Control.Click>， <xref:System.Windows.Forms.Control.DoubleClick>， <xref:System.Windows.Forms.Control.MouseDown>， <xref:System.Windows.Forms.Control.MouseUp>， <xref:System.Windows.Forms.Control.MouseHover>， <xref:System.Windows.Forms.Control.MouseEnter>，<xref:System.Windows.Forms.Control.MouseLeave>和<xref:System.Windows.Forms.Control.MouseMove>。</span><span class="sxs-lookup"><span data-stu-id="31784-1670">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="31784-1671">如果沒有至少一個<xref:System.Windows.Forms.TabPage>在集合中，與使用者互動具有索引標籤控制項的標頭 (其中<xref:System.Windows.Forms.TabPage>名稱會出現)，則<xref:System.Windows.Forms.TabControl>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1671">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="31784-1672">不過，如果使用者互動是索引標籤頁面上，工作區內<xref:System.Windows.Forms.TabPage>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1672">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="31784-1673">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1673">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1674">下列程式碼範例示範如何使用不同的滑鼠事件上繪製的路徑滑鼠<xref:System.Windows.Forms.Panel>。</span><span class="sxs-lookup"><span data-stu-id="31784-1674">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="31784-1675">直線線段加入<xref:System.Drawing.Drawing2D.GraphicsPath>每個<xref:System.Windows.Forms.Control.MouseMove>和<xref:System.Windows.Forms.Control.MouseDown>所發生的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1675">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="31784-1676">若要更新圖形，<xref:System.Windows.Forms.Control.Invalidate%2A>方法針對呼叫<xref:System.Windows.Forms.Panel>每`MouseDown`和`MouseUp`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1676">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="31784-1677">此外，圖形的路徑會捲動向上或向下時<xref:System.Windows.Forms.Control.MouseWheel>就會發生事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1677">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="31784-1678">其他的滑鼠事件，例如<xref:System.Windows.Forms.Control.MouseHover>，以及螢幕上所識別。</span><span class="sxs-lookup"><span data-stu-id="31784-1678">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="31784-1679">也會顯示在螢幕上會從滑鼠相關的其他資訊<xref:System.Windows.Forms.SystemInformation>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1679">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.MouseLeave" />
        <altmember cref="E:System.Windows.Forms.Control.MouseHover" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseHover">
      <MemberSignature Language="C#" Value="public event EventHandler MouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseHover" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseHover" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseHover As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseHover;" />
      <MemberSignature Language="F#" Value="member this.MouseHover : EventHandler " Usage="member this.MouseHover : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1680">發生於滑鼠指標停留在控制項上時。</span><span class="sxs-lookup"><span data-stu-id="31784-1680">Occurs when the mouse pointer rests on the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1681">典型用法<xref:System.Windows.Forms.Control.MouseHover>是當滑鼠停留 （「 停留矩形內，"） 的控制項周圍的指定區域內的控制項上時顯示工具提示。</span><span class="sxs-lookup"><span data-stu-id="31784-1681">A typical use of <xref:System.Windows.Forms.Control.MouseHover> is to display a tool tip when the mouse pauses on a control within a specified area around the control (the "hover rectangle").</span></span> <span data-ttu-id="31784-1682">以毫秒為單位的指定會引發這個事件所需的暫停<xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1682">The pause required for this event to be raised is specified in milliseconds by the <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> property.</span></span>  
  
 <span data-ttu-id="31784-1683"><xref:System.Windows.Forms.Control.MouseHover>事件定義，且與偵測到<xref:System.Windows.Forms.SystemInformation.MouseHoverSize%2A>和<xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1683">The <xref:System.Windows.Forms.Control.MouseHover> event is defined and detected in connection with the <xref:System.Windows.Forms.SystemInformation.MouseHoverSize%2A> and <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> properties.</span></span>  
  
 <span data-ttu-id="31784-1684">滑鼠事件依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-1684">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1685">無法針對引發下列事件<xref:System.Windows.Forms.TabControl>類別除非至少一個<xref:System.Windows.Forms.TabPage>中<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>集合： <xref:System.Windows.Forms.Control.Click>， <xref:System.Windows.Forms.Control.DoubleClick>， <xref:System.Windows.Forms.Control.MouseDown>， <xref:System.Windows.Forms.Control.MouseUp>， <xref:System.Windows.Forms.Control.MouseHover>， <xref:System.Windows.Forms.Control.MouseEnter>，<xref:System.Windows.Forms.Control.MouseLeave>和<xref:System.Windows.Forms.Control.MouseMove>。</span><span class="sxs-lookup"><span data-stu-id="31784-1685">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="31784-1686">如果沒有至少一個<xref:System.Windows.Forms.TabPage>在集合中，與使用者互動具有索引標籤控制項的標頭 (其中<xref:System.Windows.Forms.TabPage>名稱會出現)，則<xref:System.Windows.Forms.TabControl>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1686">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="31784-1687">不過，如果使用者互動是索引標籤頁面上，工作區內<xref:System.Windows.Forms.TabPage>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1687">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="31784-1688">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1688">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1689">下列程式碼範例示範如何使用不同的滑鼠事件上繪製的路徑滑鼠<xref:System.Windows.Forms.Panel>。</span><span class="sxs-lookup"><span data-stu-id="31784-1689">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="31784-1690">直線線段加入<xref:System.Drawing.Drawing2D.GraphicsPath>每個<xref:System.Windows.Forms.Control.MouseMove>和<xref:System.Windows.Forms.Control.MouseDown>所發生的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1690">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="31784-1691">若要更新圖形，<xref:System.Windows.Forms.Control.Invalidate%2A>方法針對呼叫<xref:System.Windows.Forms.Panel>每`MouseDown`和`MouseUp`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1691">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="31784-1692">此外，圖形的路徑會捲動向上或向下時<xref:System.Windows.Forms.Control.MouseWheel>就會發生事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1692">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="31784-1693">其他的滑鼠事件，例如<xref:System.Windows.Forms.Control.MouseHover>，以及螢幕上所識別。</span><span class="sxs-lookup"><span data-stu-id="31784-1693">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="31784-1694">也會顯示在螢幕上會從滑鼠相關的其他資訊<xref:System.Windows.Forms.SystemInformation>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1694">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.SystemInformation.MouseHoverTime" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event EventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : EventHandler " Usage="member this.MouseLeave : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1695">發生於滑鼠指標離開控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-1695">Occurs when the mouse pointer leaves the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1696">滑鼠事件依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-1696">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1697">無法針對引發下列事件<xref:System.Windows.Forms.TabControl>類別除非至少一個<xref:System.Windows.Forms.TabPage>中<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>集合： <xref:System.Windows.Forms.Control.Click>， <xref:System.Windows.Forms.Control.DoubleClick>， <xref:System.Windows.Forms.Control.MouseDown>， <xref:System.Windows.Forms.Control.MouseUp>， <xref:System.Windows.Forms.Control.MouseHover>， <xref:System.Windows.Forms.Control.MouseEnter>，<xref:System.Windows.Forms.Control.MouseLeave>和<xref:System.Windows.Forms.Control.MouseMove>。</span><span class="sxs-lookup"><span data-stu-id="31784-1697">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="31784-1698">如果沒有至少一個<xref:System.Windows.Forms.TabPage>在集合中，與使用者互動具有索引標籤控制項的標頭 (其中<xref:System.Windows.Forms.TabPage>名稱會出現)，則<xref:System.Windows.Forms.TabControl>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1698">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="31784-1699">不過，如果使用者互動是索引標籤頁面上，工作區內<xref:System.Windows.Forms.TabPage>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1699">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="31784-1700">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1700">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1701">下列程式碼範例示範如何使用不同的滑鼠事件上繪製的路徑滑鼠<xref:System.Windows.Forms.Panel>。</span><span class="sxs-lookup"><span data-stu-id="31784-1701">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="31784-1702">直線線段加入<xref:System.Drawing.Drawing2D.GraphicsPath>每個<xref:System.Windows.Forms.Control.MouseMove>和<xref:System.Windows.Forms.Control.MouseDown>所發生的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1702">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="31784-1703">若要更新圖形，<xref:System.Windows.Forms.Control.Invalidate%2A>方法針對呼叫<xref:System.Windows.Forms.Panel>每`MouseDown`和`MouseUp`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1703">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="31784-1704">此外，圖形的路徑會捲動向上或向下時<xref:System.Windows.Forms.Control.MouseWheel>就會發生事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1704">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="31784-1705">其他的滑鼠事件，例如<xref:System.Windows.Forms.Control.MouseHover>，以及螢幕上所識別。</span><span class="sxs-lookup"><span data-stu-id="31784-1705">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="31784-1706">也會顯示在螢幕上會從滑鼠相關的其他資訊<xref:System.Windows.Forms.SystemInformation>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1706">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1707">發生於滑鼠指標移至控制項上時。</span><span class="sxs-lookup"><span data-stu-id="31784-1707">Occurs when the mouse pointer is moved over the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1708">一般用法<xref:System.Windows.Forms.Control.MouseMove>是否變更控制項的色彩來繪製引發的控制項周圍矩形。</span><span class="sxs-lookup"><span data-stu-id="31784-1708">Typical uses of <xref:System.Windows.Forms.Control.MouseMove> are to change the control's color or to paint a raised rectangle around the control.</span></span>  
  
 <span data-ttu-id="31784-1709">滑鼠事件依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-1709">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1710">無法針對引發下列事件<xref:System.Windows.Forms.TabControl>類別除非至少一個<xref:System.Windows.Forms.TabPage>中<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>集合： <xref:System.Windows.Forms.Control.Click>， <xref:System.Windows.Forms.Control.DoubleClick>， <xref:System.Windows.Forms.Control.MouseDown>， <xref:System.Windows.Forms.Control.MouseUp>， <xref:System.Windows.Forms.Control.MouseHover>， <xref:System.Windows.Forms.Control.MouseEnter>，<xref:System.Windows.Forms.Control.MouseLeave>和<xref:System.Windows.Forms.Control.MouseMove>。</span><span class="sxs-lookup"><span data-stu-id="31784-1710">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="31784-1711">如果沒有至少一個<xref:System.Windows.Forms.TabPage>在集合中，與使用者互動具有索引標籤控制項的標頭 (其中<xref:System.Windows.Forms.TabPage>名稱會出現)，則<xref:System.Windows.Forms.TabControl>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1711">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="31784-1712">不過，如果使用者互動是索引標籤頁面上，工作區內<xref:System.Windows.Forms.TabPage>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1712">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="31784-1713">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1713">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1714">下列程式碼範例示範如何使用不同的滑鼠事件上繪製的路徑滑鼠<xref:System.Windows.Forms.Panel>。</span><span class="sxs-lookup"><span data-stu-id="31784-1714">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="31784-1715">直線線段加入<xref:System.Drawing.Drawing2D.GraphicsPath>每個<xref:System.Windows.Forms.Control.MouseMove>和<xref:System.Windows.Forms.Control.MouseDown>所發生的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1715">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="31784-1716">若要更新圖形，<xref:System.Windows.Forms.Control.Invalidate%2A>方法針對呼叫<xref:System.Windows.Forms.Panel>每`MouseDown`和`MouseUp`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1716">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="31784-1717">此外，圖形的路徑會捲動向上或向下時<xref:System.Windows.Forms.Control.MouseWheel>就會發生事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1717">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="31784-1718">其他的滑鼠事件，例如<xref:System.Windows.Forms.Control.MouseHover>，以及螢幕上所識別。</span><span class="sxs-lookup"><span data-stu-id="31784-1718">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="31784-1719">也會顯示在螢幕上會從滑鼠相關的其他資訊<xref:System.Windows.Forms.SystemInformation>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1719">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MousePosition">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point MousePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Point MousePosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MousePosition" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MousePosition As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Point MousePosition { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.MousePosition : System.Drawing.Point" Usage="System.Windows.Forms.Control.MousePosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1720">取得滑鼠游標在螢幕座標中的位置。</span><span class="sxs-lookup"><span data-stu-id="31784-1720">Gets the position of the mouse cursor in screen coordinates.</span></span></summary>
        <value><span data-ttu-id="31784-1721"><see cref="T:System.Drawing.Point" />，包含與螢幕左上角相對的滑鼠游標座標。</span><span class="sxs-lookup"><span data-stu-id="31784-1721">A <see cref="T:System.Drawing.Point" /> that contains the coordinates of the mouse cursor relative to the upper-left corner of the screen.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1722"><xref:System.Windows.Forms.Control.MousePosition%2A>屬性會傳回<xref:System.Drawing.Point>表示滑鼠游標位置時被參考的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1722">The <xref:System.Windows.Forms.Control.MousePosition%2A> property returns a <xref:System.Drawing.Point> that represents the mouse cursor position at the time the property was referenced.</span></span> <span data-ttu-id="31784-1723">表示在畫面上，不是相對於控制項的位置座標，以及不論是否將游標放在控制項上時，都會傳回。</span><span class="sxs-lookup"><span data-stu-id="31784-1723">The coordinates indicate the position on the screen, not relative to the control, and are returned regardless of whether the cursor is positioned over the control.</span></span> <span data-ttu-id="31784-1724">螢幕左上角的座標是 0，0。</span><span class="sxs-lookup"><span data-stu-id="31784-1724">The coordinates of the upper-left corner of the screen are 0,0.</span></span>  
  
 <span data-ttu-id="31784-1725"><xref:System.Windows.Forms.Control.MousePosition%2A>屬性等同於<xref:System.Windows.Forms.Cursor.Position%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1725">The <xref:System.Windows.Forms.Control.MousePosition%2A> property is identical to the <xref:System.Windows.Forms.Cursor.Position%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1726">下列程式碼範例將<xref:System.Windows.Forms.TreeNode>成可編輯狀態時使用者按下 ALT + E 時滑鼠游標位於樹狀節點標籤。</span><span class="sxs-lookup"><span data-stu-id="31784-1726">The following code example puts a <xref:System.Windows.Forms.TreeNode> label into an editable state when the user presses ALT+E while the mouse cursor is over the tree node.</span></span> <span data-ttu-id="31784-1727">在使用者完成之後編輯標籤時，無法編輯標籤再次直到再次按下 ALT + E 按鍵組合。</span><span class="sxs-lookup"><span data-stu-id="31784-1727">After the user is done editing the label, the labels cannot be edited again until the ALT+E key combination is pressed again.</span></span> <span data-ttu-id="31784-1728">這個範例需要您有<xref:System.Windows.Forms.TreeView>上<xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="31784-1728">This example requires that you have a <xref:System.Windows.Forms.TreeView> on a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="31784-1729">樹狀檢視也應該有至少一個<xref:System.Windows.Forms.TreeNode>中其<xref:System.Windows.Forms.TreeView.Nodes%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="31784-1729">The tree view should also have at least one <xref:System.Windows.Forms.TreeNode> in its <xref:System.Windows.Forms.TreeView.Nodes%2A> collection.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseUp : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1730">發生於滑鼠指標位於控制項上並放開滑鼠按鍵時。</span><span class="sxs-lookup"><span data-stu-id="31784-1730">Occurs when the mouse pointer is over the control and a mouse button is released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1731">滑鼠事件依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-1731">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="31784-1732">無法針對引發下列事件<xref:System.Windows.Forms.TabControl>類別除非至少一個<xref:System.Windows.Forms.TabPage>中<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>集合： <xref:System.Windows.Forms.Control.Click>， <xref:System.Windows.Forms.Control.DoubleClick>， <xref:System.Windows.Forms.Control.MouseDown>， <xref:System.Windows.Forms.Control.MouseUp>， <xref:System.Windows.Forms.Control.MouseHover>， <xref:System.Windows.Forms.Control.MouseEnter>，<xref:System.Windows.Forms.Control.MouseLeave>和<xref:System.Windows.Forms.Control.MouseMove>。</span><span class="sxs-lookup"><span data-stu-id="31784-1732">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="31784-1733">如果沒有至少一個<xref:System.Windows.Forms.TabPage>在集合中，與使用者互動具有索引標籤控制項的標頭 (其中<xref:System.Windows.Forms.TabPage>名稱會出現)，則<xref:System.Windows.Forms.TabControl>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1733">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="31784-1734">不過，如果使用者互動是索引標籤頁面上，工作區內<xref:System.Windows.Forms.TabPage>引發適當的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1734">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="31784-1735">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1735">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1736">下列程式碼範例示範如何使用不同的滑鼠事件上繪製的路徑滑鼠<xref:System.Windows.Forms.Panel>。</span><span class="sxs-lookup"><span data-stu-id="31784-1736">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="31784-1737">直線線段加入<xref:System.Drawing.Drawing2D.GraphicsPath>每個<xref:System.Windows.Forms.Control.MouseMove>和<xref:System.Windows.Forms.Control.MouseDown>所發生的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1737">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="31784-1738">若要更新圖形，<xref:System.Windows.Forms.Control.Invalidate%2A>方法針對呼叫<xref:System.Windows.Forms.Panel>每`MouseDown`和`MouseUp`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1738">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="31784-1739">此外，圖形的路徑會捲動向上或向下時<xref:System.Windows.Forms.Control.MouseWheel>就會發生事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1739">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="31784-1740">其他的滑鼠事件，例如<xref:System.Windows.Forms.Control.MouseHover>，以及螢幕上所識別。</span><span class="sxs-lookup"><span data-stu-id="31784-1740">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="31784-1741">也會顯示在螢幕上會從滑鼠相關的其他資訊<xref:System.Windows.Forms.SystemInformation>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1741">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseWheel : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1742">發生於滑鼠滾輪移動且焦點在控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-1742">Occurs when the mouse wheel moves while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1743">當處理<xref:System.Windows.Forms.Control.MouseWheel>事件，請務必遵循與滑鼠滾輪相關聯的使用者介面 (UI) 標準。</span><span class="sxs-lookup"><span data-stu-id="31784-1743">When handling the <xref:System.Windows.Forms.Control.MouseWheel> event it is important to follow the user interface (UI) standards associated with the mouse wheel.</span></span> <span data-ttu-id="31784-1744"><xref:System.Windows.Forms.MouseEventArgs.Delta%2A?displayProperty=nameWithType>屬性值，指出已移動滑鼠滾輪的量。</span><span class="sxs-lookup"><span data-stu-id="31784-1744">The <xref:System.Windows.Forms.MouseEventArgs.Delta%2A?displayProperty=nameWithType> property value indicates the amount the mouse wheel has been moved.</span></span> <span data-ttu-id="31784-1745">當累積的差異是加號或減號 120 時，應該捲動 UI。</span><span class="sxs-lookup"><span data-stu-id="31784-1745">The UI should scroll when the accumulated delta is plus or minus 120.</span></span> <span data-ttu-id="31784-1746">UI 應該捲動的邏輯所傳回的行數<xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType>達到每個差異值的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-1746">The UI should scroll the number of logical lines returned by the <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType> property for every delta value reached.</span></span> <span data-ttu-id="31784-1747">您也可以捲動更平順地在較小 120 單位增加，不過比率應該維持不變，也就是<xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType>每 120 差異單位滾輪捲動的行。</span><span class="sxs-lookup"><span data-stu-id="31784-1747">You can also scroll more smoothly in smaller that 120 unit increments, however the ratio should remain constant, that is <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType> lines scrolled per 120 delta units of wheel movement.</span></span>  
  
 <span data-ttu-id="31784-1748">如需處理滑鼠滾輪訊息的詳細資訊，請參閱[WM_MOUSEWHEEL](http://msdn.microsoft.com/library/windows/desktop/ms645617\(v=vs.85\).aspx)主題。</span><span class="sxs-lookup"><span data-stu-id="31784-1748">For more information about handling mouse wheel messages, see the[WM_MOUSEWHEEL](http://msdn.microsoft.com/library/windows/desktop/ms645617\(v=vs.85\).aspx)topic.</span></span>  
  
 <span data-ttu-id="31784-1749">滑鼠事件依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-1749">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
 <span data-ttu-id="31784-1750">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1750">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1751">下列程式碼範例示範如何使用不同的滑鼠事件上繪製的路徑滑鼠<xref:System.Windows.Forms.Panel>。</span><span class="sxs-lookup"><span data-stu-id="31784-1751">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="31784-1752">直線線段加入<xref:System.Drawing.Drawing2D.GraphicsPath>每個<xref:System.Windows.Forms.Control.MouseMove>和<xref:System.Windows.Forms.Control.MouseDown>所發生的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1752">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="31784-1753">若要更新圖形，<xref:System.Windows.Forms.Control.Invalidate%2A>方法針對呼叫<xref:System.Windows.Forms.Panel>每`MouseDown`和`MouseUp`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1753">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="31784-1754">此外，圖形的路徑會捲動向上或向下時<xref:System.Windows.Forms.Control.MouseWheel>就會發生事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1754">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="31784-1755">其他的滑鼠事件，例如<xref:System.Windows.Forms.Control.MouseHover>，以及螢幕上所識別。</span><span class="sxs-lookup"><span data-stu-id="31784-1755">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="31784-1756">也會顯示在螢幕上會從滑鼠相關的其他資訊<xref:System.Windows.Forms.SystemInformation>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1756">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public event EventHandler Move;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Move" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Move" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Move As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Move;" />
      <MemberSignature Language="F#" Value="member this.Move : EventHandler " Usage="member this.Move : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1757">發生於控制項移動時。</span><span class="sxs-lookup"><span data-stu-id="31784-1757">Occurs when the control is moved.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1758">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1758">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1759">下列程式碼範例使用<xref:System.Windows.Forms.Control.Move>事件 以顯示在表單的標題列上的螢幕座標中表單的位置。</span><span class="sxs-lookup"><span data-stu-id="31784-1759">The following code example uses the <xref:System.Windows.Forms.Control.Move> event to display the location of the form in screen coordinates on the caption bar of the form.</span></span>  
  
 [!code-cpp[Control.Move#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Move/CPP/form1.cpp#1)]
 [!code-csharp[Control.Move#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Move/CS/form1.cs#1)]
 [!code-vb[Control.Move#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Move/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.Control.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-1760">取得或設定控制項的名稱。</span><span class="sxs-lookup"><span data-stu-id="31784-1760">Gets or sets the name of the control.</span></span></summary>
        <value><span data-ttu-id="31784-1761">控制項的名稱。</span><span class="sxs-lookup"><span data-stu-id="31784-1761">The name of the control.</span></span> <span data-ttu-id="31784-1762">預設為空字串 ("")。</span><span class="sxs-lookup"><span data-stu-id="31784-1762">The default is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1763"><xref:System.Windows.Forms.Control.Name%2A>屬性可以在執行階段中用來評估物件，依名稱而不是類型和程式設計名稱。</span><span class="sxs-lookup"><span data-stu-id="31784-1763">The <xref:System.Windows.Forms.Control.Name%2A> property can be used at run time to evaluate the object by name rather than type and programmatic name.</span></span> <span data-ttu-id="31784-1764">因為<xref:System.Windows.Forms.Control.Name%2A>屬性會傳回<xref:System.String>型別，可以依照案例樣式邏輯陳述式進行評估 (`Select`在 Visual Basic 中的陳述式`switch`陳述式在 Visual C# 和[!INCLUDE[vcprvc](~/includes/vcprvc-md.md)])。</span><span class="sxs-lookup"><span data-stu-id="31784-1764">Because the <xref:System.Windows.Forms.Control.Name%2A> property returns a <xref:System.String> type, it can be evaluated in case-style logic statements (`Select` statement in Visual Basic, `switch` statement in Visual C# and [!INCLUDE[vcprvc](~/includes/vcprvc-md.md)]).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1765">下列程式碼範例顯示<xref:System.Windows.Forms.Control.Name%2A>中的控制項<xref:System.Windows.Forms.MessageBox>時新增或移除從表單控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1765">The following code example displays the <xref:System.Windows.Forms.Control.Name%2A> of a control in a <xref:System.Windows.Forms.MessageBox> when the control is added or removed from a form.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.ISite.Name" />
      </Docs>
    </Member>
    <Member MemberName="NotifyInvalidate">
      <MemberSignature Language="C#" Value="protected virtual void NotifyInvalidate (System.Drawing.Rectangle invalidatedArea);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void NotifyInvalidate(valuetype System.Drawing.Rectangle invalidatedArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.NotifyInvalidate(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub NotifyInvalidate (invalidatedArea As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void NotifyInvalidate(System::Drawing::Rectangle invalidatedArea);" />
      <MemberSignature Language="F#" Value="abstract member NotifyInvalidate : System.Drawing.Rectangle -&gt; unit&#xA;override this.NotifyInvalidate : System.Drawing.Rectangle -&gt; unit" Usage="control.NotifyInvalidate invalidatedArea" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invalidatedArea" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="invalidatedArea"><span data-ttu-id="31784-1766"><see cref="T:System.Drawing.Rectangle" />，表示要失效的區域。</span><span class="sxs-lookup"><span data-stu-id="31784-1766">A <see cref="T:System.Drawing.Rectangle" /> representing the area to invalidate.</span></span></param>
        <summary><span data-ttu-id="31784-1767">引發 <see cref="E:System.Windows.Forms.Control.Invalidated" /> 事件，包含要失效的指定控制項區域。</span><span class="sxs-lookup"><span data-stu-id="31784-1767">Raises the <see cref="E:System.Windows.Forms.Control.Invalidated" /> event with a specified region of the control to invalidate.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAutoSizeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAutoSizeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAutoSizeChanged : EventArgs -&gt; unit&#xA;override this.OnAutoSizeChanged : EventArgs -&gt; unit" Usage="control.OnAutoSizeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1768">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1768">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1769">引發 <see cref="E:System.Windows.Forms.Control.AutoSizeChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1769">Raises the <see cref="E:System.Windows.Forms.Control.AutoSizeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1770">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1770">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1771">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1771">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1772"><xref:System.Windows.Forms.Control.OnAutoSizeChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1772">The <xref:System.Windows.Forms.Control.OnAutoSizeChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1773">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1773">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1774"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1774"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBackColorChanged : EventArgs -&gt; unit&#xA;override this.OnBackColorChanged : EventArgs -&gt; unit" Usage="control.OnBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1775">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1775">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1776">引發 <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1776">Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1777">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1777">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1778">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1778">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1779"><xref:System.Windows.Forms.Control.OnBackColorChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1779">The <xref:System.Windows.Forms.Control.OnBackColorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1780">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1780">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1781">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-1781">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-1782"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-1782">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-1783">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1783">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-1784">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-1784">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-1785">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1785">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1786"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1786"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBackgroundImageChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBackgroundImageChanged : EventArgs -&gt; unit&#xA;override this.OnBackgroundImageChanged : EventArgs -&gt; unit" Usage="control.OnBackgroundImageChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1787">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1787">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1788">引發 <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1788">Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1789">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1789">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1790">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1790">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1791"><xref:System.Windows.Forms.Control.OnBackgroundImageChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1791">The <xref:System.Windows.Forms.Control.OnBackgroundImageChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1792">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1792">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1793">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-1793">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-1794"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-1794">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-1795">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1795">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-1796">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-1796">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-1797">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1797">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1798"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1798"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundImageLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundImageLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBackgroundImageLayoutChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBackgroundImageLayoutChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBackgroundImageLayoutChanged : EventArgs -&gt; unit&#xA;override this.OnBackgroundImageLayoutChanged : EventArgs -&gt; unit" Usage="control.OnBackgroundImageLayoutChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1799">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1799">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1800">引發 <see cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1800">Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1801">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1801">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1802">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1802">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1803"><xref:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1803">The <xref:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1804">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1804">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1805"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1805"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnBindingContextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBindingContextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBindingContextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBindingContextChanged : EventArgs -&gt; unit&#xA;override this.OnBindingContextChanged : EventArgs -&gt; unit" Usage="control.OnBindingContextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1806">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1806">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1807">引發 <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1807">Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1808">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1808">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1809">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1809">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1810"><xref:System.Windows.Forms.Control.OnBindingContextChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1810">The <xref:System.Windows.Forms.Control.OnBindingContextChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1811">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1811">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1812"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1812"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BindingContext" />
      </Docs>
    </Member>
    <Member MemberName="OnCausesValidationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCausesValidationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCausesValidationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCausesValidationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCausesValidationChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCausesValidationChanged : EventArgs -&gt; unit&#xA;override this.OnCausesValidationChanged : EventArgs -&gt; unit" Usage="control.OnCausesValidationChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1813">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1813">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1814">引發 <see cref="E:System.Windows.Forms.Control.CausesValidationChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1814">Raises the <see cref="E:System.Windows.Forms.Control.CausesValidationChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1815">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1815">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1816">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1816">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1817"><xref:System.Windows.Forms.Control.OnCausesValidationChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1817">The <xref:System.Windows.Forms.Control.OnCausesValidationChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1818">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1818">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1819">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-1819">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-1820"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-1820">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-1821">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1821">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-1822">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-1822">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-1823">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1823">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1824"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1824"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.CausesValidationChanged" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
      </Docs>
    </Member>
    <Member MemberName="OnChangeUICues">
      <MemberSignature Language="C#" Value="protected virtual void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChangeUICues(class System.Windows.Forms.UICuesEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChangeUICues (e As UICuesEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChangeUICues(System::Windows::Forms::UICuesEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnChangeUICues : System.Windows.Forms.UICuesEventArgs -&gt; unit&#xA;override this.OnChangeUICues : System.Windows.Forms.UICuesEventArgs -&gt; unit" Usage="control.OnChangeUICues e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.UICuesEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1825"><see cref="T:System.Windows.Forms.UICuesEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1825">A <see cref="T:System.Windows.Forms.UICuesEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1826">引發 <see cref="E:System.Windows.Forms.Control.ChangeUICues" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1826">Raises the <see cref="E:System.Windows.Forms.Control.ChangeUICues" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1827">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1827">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1828">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1828">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1829"><xref:System.Windows.Forms.Control.OnChangeUICues%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1829">The <xref:System.Windows.Forms.Control.OnChangeUICues%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1830">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1830">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1831"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1831"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
        <altmember cref="T:System.Windows.Forms.UICues" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClick : EventArgs -&gt; unit&#xA;override this.OnClick : EventArgs -&gt; unit" Usage="control.OnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1832">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1832">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1833">引發 <see cref="E:System.Windows.Forms.Control.Click" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1833">Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1834">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1834">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1835">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1835">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1836"><xref:System.Windows.Forms.Control.OnClick%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1836">The <xref:System.Windows.Forms.Control.OnClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1837">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1837">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1838">下列程式碼範例示範如何覆寫<xref:System.Windows.Forms.Control.OnClick%2A>方法在衍生類別中的。</span><span class="sxs-lookup"><span data-stu-id="31784-1838">The following code example demonstrates overriding the <xref:System.Windows.Forms.Control.OnClick%2A> method in a derived class.</span></span> <span data-ttu-id="31784-1839">要執行此範例，貼上下列程式碼的表單類別之後，在相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="31784-1839">To run the example, paste the following code after a form class, in the same file.</span></span> <span data-ttu-id="31784-1840">加入類型的文字方塊`SingleClickTextBox`至表單。</span><span class="sxs-lookup"><span data-stu-id="31784-1840">Add a textbox of type `SingleClickTextBox` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlOnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlOnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlOnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/VB/form1.vb#1)]  
  
 <span data-ttu-id="31784-1841">下列程式碼範例示範許多的用途之一<xref:System.Windows.Forms.Control.Click>事件和事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1841">The following code example shows one of the many uses of the <xref:System.Windows.Forms.Control.Click> event and event handler.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1842"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1842"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.Click" />
      </Docs>
    </Member>
    <Member MemberName="OnClientSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnClientSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClientSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClientSizeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClientSizeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClientSizeChanged : EventArgs -&gt; unit&#xA;override this.OnClientSizeChanged : EventArgs -&gt; unit" Usage="control.OnClientSizeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1843">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1843">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1844">引發 <see cref="E:System.Windows.Forms.Control.ClientSizeChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1844">Raises the <see cref="E:System.Windows.Forms.Control.ClientSizeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1845">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1845">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1846">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1846">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1847"><xref:System.Windows.Forms.Control.OnClientSizeChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1847">The <xref:System.Windows.Forms.Control.OnClientSizeChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1848">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1848">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1849"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1849"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuChanged : EventArgs -&gt; unit&#xA;override this.OnContextMenuChanged : EventArgs -&gt; unit" Usage="control.OnContextMenuChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1850">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1850">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1851">引發 <see cref="E:System.Windows.Forms.Control.ContextMenuChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1851">Raises the <see cref="E:System.Windows.Forms.Control.ContextMenuChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1852">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1852">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1853">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1853">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1854"><xref:System.Windows.Forms.Control.OnContextMenuChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1854">The <xref:System.Windows.Forms.Control.OnContextMenuChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1855">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1855">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1856">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-1856">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-1857"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-1857">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-1858">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1858">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-1859">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-1859">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-1860">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1860">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1861"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1861"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.ContextMenuChanged" />
        <altmember cref="P:System.Windows.Forms.Control.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuStripChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuStripChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuStripChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuStripChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuStripChanged : EventArgs -&gt; unit&#xA;override this.OnContextMenuStripChanged : EventArgs -&gt; unit" Usage="control.OnContextMenuStripChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1862">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1862">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1863">引發 <see cref="E:System.Windows.Forms.Control.ContextMenuStripChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1863">Raises the <see cref="E:System.Windows.Forms.Control.ContextMenuStripChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1864">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1864">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1865">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1865">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1866"><xref:System.Windows.Forms.Control.OnContextMenuStripChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1866">The <xref:System.Windows.Forms.Control.OnContextMenuStripChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1867">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1867">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1868"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1868"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="OnControlAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnControlAdded (System.Windows.Forms.ControlEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnControlAdded(class System.Windows.Forms.ControlEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnControlAdded (e As ControlEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnControlAdded(System::Windows::Forms::ControlEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnControlAdded : System.Windows.Forms.ControlEventArgs -&gt; unit&#xA;override this.OnControlAdded : System.Windows.Forms.ControlEventArgs -&gt; unit" Usage="control.OnControlAdded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ControlEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1869"><see cref="T:System.Windows.Forms.ControlEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1869">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1870">引發 <see cref="E:System.Windows.Forms.Control.ControlAdded" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1870">Raises the <see cref="E:System.Windows.Forms.Control.ControlAdded" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1871">子控制項加入至控制項時呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-1871">Called when a child control is added to the control.</span></span>  
  
 <span data-ttu-id="31784-1872">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1872">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1873">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1873">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1874"><xref:System.Windows.Forms.Control.OnControlAdded%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1874">The <xref:System.Windows.Forms.Control.OnControlAdded%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1875">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1875">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1876">下列程式碼範例使用<xref:System.Windows.Forms.Control.ControlAdded>將控制項加入至表單，並顯示在已加入之控制項的名稱<xref:System.Windows.Forms.MessageBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1876">The following code example uses <xref:System.Windows.Forms.Control.ControlAdded> to add a control to a form and displays the name of the added control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1877"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1877"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.ControlAdded" />
      </Docs>
    </Member>
    <Member MemberName="OnControlRemoved">
      <MemberSignature Language="C#" Value="protected virtual void OnControlRemoved (System.Windows.Forms.ControlEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnControlRemoved(class System.Windows.Forms.ControlEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnControlRemoved (e As ControlEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnControlRemoved(System::Windows::Forms::ControlEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnControlRemoved : System.Windows.Forms.ControlEventArgs -&gt; unit&#xA;override this.OnControlRemoved : System.Windows.Forms.ControlEventArgs -&gt; unit" Usage="control.OnControlRemoved e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ControlEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1878"><see cref="T:System.Windows.Forms.ControlEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1878">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1879">引發 <see cref="E:System.Windows.Forms.Control.ControlRemoved" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1879">Raises the <see cref="E:System.Windows.Forms.Control.ControlRemoved" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1880">從控制項移除子控制項時呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-1880">Called when a child control is removed from the control.</span></span>  
  
 <span data-ttu-id="31784-1881">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1881">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1882">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1882">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1883"><xref:System.Windows.Forms.Control.OnControlRemoved%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1883">The <xref:System.Windows.Forms.Control.OnControlRemoved%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1884">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1884">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1885">下列程式碼範例使用<xref:System.Windows.Forms.Control.ControlRemoved>移除表單的控制項，並顯示中移除的控制項名稱<xref:System.Windows.Forms.MessageBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-1885">The following code example uses <xref:System.Windows.Forms.Control.ControlRemoved> to remove a control from a form and displays the name of the removed control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1886"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1886"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.ControlRemoved" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateControl">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateControl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCreateControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCreateControl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateControl ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateControl();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateControl : unit -&gt; unit&#xA;override this.OnCreateControl : unit -&gt; unit" Usage="control.OnCreateControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-1887">引發 <see cref="M:System.Windows.Forms.Control.CreateControl" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="31784-1887">Raises the <see cref="M:System.Windows.Forms.Control.CreateControl" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1888"><xref:System.Windows.Forms.Control.OnCreateControl%2A>方法先建立控制項時呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-1888">The <xref:System.Windows.Forms.Control.OnCreateControl%2A> method is called when the control is first created.</span></span>  
  
 <span data-ttu-id="31784-1889"><xref:System.Windows.Forms.Control.OnCreateControl%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1889">The <xref:System.Windows.Forms.Control.OnCreateControl%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1890">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1890">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1891"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnCreateControl" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnCreateControl" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1891"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
      </Docs>
    </Member>
    <Member MemberName="OnCursorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCursorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCursorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCursorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCursorChanged : EventArgs -&gt; unit&#xA;override this.OnCursorChanged : EventArgs -&gt; unit" Usage="control.OnCursorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1892">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1892">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1893">引發 <see cref="E:System.Windows.Forms.Control.CursorChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1893">Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1894">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1894">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1895">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1895">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1896"><xref:System.Windows.Forms.Control.OnCursorChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1896">The <xref:System.Windows.Forms.Control.OnCursorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1897">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1897">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1898">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-1898">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-1899"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-1899">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-1900">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1900">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-1901">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-1901">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-1902">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1902">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1903"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1903"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.CursorChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="OnDockChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDockChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDockChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDockChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDockChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDockChanged : EventArgs -&gt; unit&#xA;override this.OnDockChanged : EventArgs -&gt; unit" Usage="control.OnDockChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1904">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1904">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1905">引發 <see cref="E:System.Windows.Forms.Control.DockChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1905">Raises the <see cref="E:System.Windows.Forms.Control.DockChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1906">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1906">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1907">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1907">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1908"><xref:System.Windows.Forms.Control.OnDockChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1908">The <xref:System.Windows.Forms.Control.OnDockChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1909">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1909">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1910">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-1910">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-1911"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-1911">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-1912">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1912">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-1913">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-1913">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-1914">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1914">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1915"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1915"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.DockChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
      </Docs>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnDoubleClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoubleClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDoubleClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDoubleClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDoubleClick : EventArgs -&gt; unit&#xA;override this.OnDoubleClick : EventArgs -&gt; unit" Usage="control.OnDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1916">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1916">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1917">引發 <see cref="E:System.Windows.Forms.Control.DoubleClick" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1917">Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1918">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1918">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1919">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1919">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1920"><xref:System.Windows.Forms.Control.OnDoubleClick%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1920">The <xref:System.Windows.Forms.Control.OnDoubleClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1921">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1921">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1922">下列程式碼範例使用<xref:System.Windows.Forms.Control.DoubleClick>事件<xref:System.Windows.Forms.ListBox>來載入文字檔案中所列<xref:System.Windows.Forms.ListBox>到<xref:System.Windows.Forms.TextBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-1922">The following code example uses the <xref:System.Windows.Forms.Control.DoubleClick> event of a <xref:System.Windows.Forms.ListBox> to load text files listed in the <xref:System.Windows.Forms.ListBox> into a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 [!code-cpp[Control.DoubleClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.DoubleClick/CPP/form1.cpp#1)]
 [!code-csharp[Control.DoubleClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.DoubleClick/CS/form1.cs#1)]
 [!code-vb[Control.DoubleClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.DoubleClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1923"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1923"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="OnDpiChangedAfterParent">
      <MemberSignature Language="C#" Value="protected virtual void OnDpiChangedAfterParent (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDpiChangedAfterParent(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDpiChangedAfterParent(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDpiChangedAfterParent (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDpiChangedAfterParent(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDpiChangedAfterParent : EventArgs -&gt; unit&#xA;override this.OnDpiChangedAfterParent : EventArgs -&gt; unit" Usage="control.OnDpiChangedAfterParent e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1924">包含事件資料的 <see cref="T:System.Windows.Forms.DpiChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1924">An <see cref="T:System.Windows.Forms.DpiChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1925">引發 <see cref="E:System.Windows.Forms.Control.DpiChangedAfterParent" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1925">Raises the <see cref="E:System.Windows.Forms.Control.DpiChangedAfterParent" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDpiChangedBeforeParent">
      <MemberSignature Language="C#" Value="protected virtual void OnDpiChangedBeforeParent (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDpiChangedBeforeParent(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDpiChangedBeforeParent(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDpiChangedBeforeParent (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDpiChangedBeforeParent(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDpiChangedBeforeParent : EventArgs -&gt; unit&#xA;override this.OnDpiChangedBeforeParent : EventArgs -&gt; unit" Usage="control.OnDpiChangedBeforeParent e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1926">包含事件資料的 <see cref="T:System.Windows.Forms.DpiChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1926">An <see cref="T:System.Windows.Forms.DpiChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1927">引發 <see cref="E:System.Windows.Forms.Control.DpiChangedBeforeParent" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1927">Raises the <see cref="E:System.Windows.Forms.Control.DpiChangedBeforeParent" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDragDrop (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragDrop(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragDrop (drgevent As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragDrop(System::Windows::Forms::DragEventArgs ^ drgevent);" />
      <MemberSignature Language="F#" Value="abstract member OnDragDrop : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragDrop : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.OnDragDrop drgevent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragDrop(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent"><span data-ttu-id="31784-1928"><see cref="T:System.Windows.Forms.DragEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1928">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1929">引發 <see cref="E:System.Windows.Forms.Control.DragDrop" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1929">Raises the <see cref="E:System.Windows.Forms.Control.DragDrop" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1930">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1930">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1931">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1931">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1932"><xref:System.Windows.Forms.Control.OnDragDrop%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1932">The <xref:System.Windows.Forms.Control.OnDragDrop%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1933">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1933">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1934"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1934"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (drgevent As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::Forms::DragEventArgs ^ drgevent);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.OnDragEnter drgevent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragEnter(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent"><span data-ttu-id="31784-1935"><see cref="T:System.Windows.Forms.DragEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1935">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1936">引發 <see cref="E:System.Windows.Forms.Control.DragEnter" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1936">Raises the <see cref="E:System.Windows.Forms.Control.DragEnter" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1937">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1937">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1938">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1938">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1939"><xref:System.Windows.Forms.Control.OnDragEnter%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1939">The <xref:System.Windows.Forms.Control.OnDragEnter%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1940">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1940">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1941"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1941"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : EventArgs -&gt; unit&#xA;override this.OnDragLeave : EventArgs -&gt; unit" Usage="control.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragLeave(System.EventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1942">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1942">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1943">引發 <see cref="E:System.Windows.Forms.Control.DragLeave" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1943">Raises the <see cref="E:System.Windows.Forms.Control.DragLeave" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1944">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1944">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1945">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1945">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1946"><xref:System.Windows.Forms.Control.OnDragLeave%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1946">The <xref:System.Windows.Forms.Control.OnDragLeave%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1947">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1947">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1948"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1948"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (drgevent As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::Forms::DragEventArgs ^ drgevent);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.OnDragOver drgevent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragOver(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent"><span data-ttu-id="31784-1949"><see cref="T:System.Windows.Forms.DragEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1949">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1950">引發 <see cref="E:System.Windows.Forms.Control.DragOver" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1950">Raises the <see cref="E:System.Windows.Forms.Control.DragOver" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1951">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1951">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1952">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1952">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1953"><xref:System.Windows.Forms.Control.OnDragOver%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1953">The <xref:System.Windows.Forms.Control.OnDragOver%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1954">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1954">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1955"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1955"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnEnabledChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnEnabledChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnEnabledChanged : EventArgs -&gt; unit&#xA;override this.OnEnabledChanged : EventArgs -&gt; unit" Usage="control.OnEnabledChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1956">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1956">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1957">引發 <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1957">Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1958">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1958">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1959">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1959">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1960"><xref:System.Windows.Forms.Control.OnEnabledChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1960">The <xref:System.Windows.Forms.Control.OnEnabledChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1961">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1961">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1962"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1962"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.EnabledChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnEnter (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnEnter(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnEnter : EventArgs -&gt; unit&#xA;override this.OnEnter : EventArgs -&gt; unit" Usage="control.OnEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1963">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1963">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1964">引發 <see cref="E:System.Windows.Forms.Control.Enter" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1964">Raises the <see cref="E:System.Windows.Forms.Control.Enter" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1965">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1965">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1966">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1966">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1967"><xref:System.Windows.Forms.Control.OnEnter%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1967">The <xref:System.Windows.Forms.Control.OnEnter%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1968">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1968">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1969">下列程式碼範例使用<xref:System.Windows.Forms.Control.Enter>事件來變更前景和背景的色彩<xref:System.Windows.Forms.TextBox>在特定情況下。</span><span class="sxs-lookup"><span data-stu-id="31784-1969">The following code example uses the <xref:System.Windows.Forms.Control.Enter> event to change the foreground and background colors of a <xref:System.Windows.Forms.TextBox> under particular conditions.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1970"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1970"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnFontChanged : EventArgs -&gt; unit&#xA;override this.OnFontChanged : EventArgs -&gt; unit" Usage="control.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1971">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1971">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1972">引發 <see cref="E:System.Windows.Forms.Control.FontChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1972">Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1973">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1973">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1974">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1974">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1975"><xref:System.Windows.Forms.Control.OnFontChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1975">The <xref:System.Windows.Forms.Control.OnFontChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1976">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1976">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1977">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-1977">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-1978"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-1978">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-1979">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1979">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-1980">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-1980">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-1981">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1981">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1982"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1982"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnForeColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnForeColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnForeColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnForeColorChanged : EventArgs -&gt; unit&#xA;override this.OnForeColorChanged : EventArgs -&gt; unit" Usage="control.OnForeColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-1983">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-1983">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1984">引發 <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1984">Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1985">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1985">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1986">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1986">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1987"><xref:System.Windows.Forms.Control.OnForeColorChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1987">The <xref:System.Windows.Forms.Control.OnForeColorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-1988">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-1988">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-1989">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-1989">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-1990"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-1990">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-1991">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1991">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-1992">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-1992">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-1993">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-1993">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-1994"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-1994"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.Forms.GiveFeedbackEventArgs gfbevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.Forms.GiveFeedbackEventArgs gfbevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (gfbevent As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::Forms::GiveFeedbackEventArgs ^ gfbevent);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.Forms.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.Forms.GiveFeedbackEventArgs -&gt; unit" Usage="control.OnGiveFeedback gfbevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gfbevent" Type="System.Windows.Forms.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="gfbevent"><span data-ttu-id="31784-1995"><see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-1995">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-1996">引發 <see cref="E:System.Windows.Forms.Control.GiveFeedback" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-1996">Raises the <see cref="E:System.Windows.Forms.Control.GiveFeedback" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-1997">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-1997">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-1998">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-1998">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-1999"><xref:System.Windows.Forms.Control.OnGiveFeedback%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-1999">The <xref:System.Windows.Forms.Control.OnGiveFeedback%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2000">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2000">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2001"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2001"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : EventArgs -&gt; unit&#xA;override this.OnGotFocus : EventArgs -&gt; unit" Usage="control.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2002">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2002">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2003">引發 <see cref="E:System.Windows.Forms.Control.GotFocus" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2003">Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2004">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2004">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2005">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2005">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2006"><xref:System.Windows.Forms.Control.OnGotFocus%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2006">The <xref:System.Windows.Forms.Control.OnGotFocus%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2007">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2007">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2008"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2008"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnHandleCreated : EventArgs -&gt; unit&#xA;override this.OnHandleCreated : EventArgs -&gt; unit" Usage="control.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2009">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2009">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2010">引發 <see cref="E:System.Windows.Forms.Control.HandleCreated" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2010">Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2011">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2011">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2012">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2012">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2013"><xref:System.Windows.Forms.Control.OnHandleCreated%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2013">The <xref:System.Windows.Forms.Control.OnHandleCreated%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2014">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2014">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2015"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2015"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.HandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnHandleDestroyed : EventArgs -&gt; unit&#xA;override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="control.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2016">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2016">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2017">引發 <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2017">Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2018">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2018">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2019">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2019">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2020"><xref:System.Windows.Forms.Control.OnHandleDestroyed%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2020">The <xref:System.Windows.Forms.Control.OnHandleDestroyed%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2021">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2021">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2022"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2022"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.HandleDestroyed" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnHelpRequested">
      <MemberSignature Language="C#" Value="protected virtual void OnHelpRequested (System.Windows.Forms.HelpEventArgs hevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHelpRequested(class System.Windows.Forms.HelpEventArgs hevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHelpRequested (hevent As HelpEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHelpRequested(System::Windows::Forms::HelpEventArgs ^ hevent);" />
      <MemberSignature Language="F#" Value="abstract member OnHelpRequested : System.Windows.Forms.HelpEventArgs -&gt; unit&#xA;override this.OnHelpRequested : System.Windows.Forms.HelpEventArgs -&gt; unit" Usage="control.OnHelpRequested hevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hevent" Type="System.Windows.Forms.HelpEventArgs" />
      </Parameters>
      <Docs>
        <param name="hevent"><span data-ttu-id="31784-2023"><see cref="T:System.Windows.Forms.HelpEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2023">A <see cref="T:System.Windows.Forms.HelpEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2024">引發 <see cref="E:System.Windows.Forms.Control.HelpRequested" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2024">Raises the <see cref="E:System.Windows.Forms.Control.HelpRequested" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2025">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2025">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2026">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2026">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2027"><xref:System.Windows.Forms.Control.OnHelpRequested%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2027">The <xref:System.Windows.Forms.Control.OnHelpRequested%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2028">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2028">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2029"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2029"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.HelpRequested" />
      </Docs>
    </Member>
    <Member MemberName="OnImeModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnImeModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnImeModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnImeModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnImeModeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnImeModeChanged : EventArgs -&gt; unit&#xA;override this.OnImeModeChanged : EventArgs -&gt; unit" Usage="control.OnImeModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2030">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2030">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2031">引發 <see cref="E:System.Windows.Forms.Control.ImeModeChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2031">Raises the <see cref="E:System.Windows.Forms.Control.ImeModeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2032">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2032">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2033">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2033">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2034"><xref:System.Windows.Forms.Control.OnImeModeChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2034">The <xref:System.Windows.Forms.Control.OnImeModeChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2035">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2035">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2036">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2036">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2037"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2037">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2038">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2038">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2039">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2039">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2040">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2040">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2041"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2041"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.ImeModeChanged" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="OnInvalidated">
      <MemberSignature Language="C#" Value="protected virtual void OnInvalidated (System.Windows.Forms.InvalidateEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInvalidated(class System.Windows.Forms.InvalidateEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInvalidated (e As InvalidateEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInvalidated(System::Windows::Forms::InvalidateEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInvalidated : System.Windows.Forms.InvalidateEventArgs -&gt; unit&#xA;override this.OnInvalidated : System.Windows.Forms.InvalidateEventArgs -&gt; unit" Usage="control.OnInvalidated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.InvalidateEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2042">包含事件資料的 <see cref="T:System.Windows.Forms.InvalidateEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2042">An <see cref="T:System.Windows.Forms.InvalidateEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2043">引發 <see cref="E:System.Windows.Forms.Control.Invalidated" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2043">Raises the <see cref="E:System.Windows.Forms.Control.Invalidated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2044">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2044">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2045">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2045">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2046"><xref:System.Windows.Forms.Control.OnInvalidated%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2046">The <xref:System.Windows.Forms.Control.OnInvalidated%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2047">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2047">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2048"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2048"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.Invalidated" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="control.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2049"><see cref="T:System.Windows.Forms.KeyEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2049">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2050">引發 <see cref="E:System.Windows.Forms.Control.KeyDown" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2050">Raises the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2051">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2051">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2052">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2052">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2053"><xref:System.Windows.Forms.Control.OnKeyDown%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2053">The <xref:System.Windows.Forms.Control.OnKeyDown%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2054">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2054">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2055">下列程式碼範例使用<xref:System.Windows.Forms.Control.KeyDown>事件，以判斷輸入控制項的字元類型。</span><span class="sxs-lookup"><span data-stu-id="31784-2055">The following code example uses the <xref:System.Windows.Forms.Control.KeyDown> event to determine the type of character entered into the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2056"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2056"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyPress : System.Windows.Forms.KeyPressEventArgs -&gt; unit&#xA;override this.OnKeyPress : System.Windows.Forms.KeyPressEventArgs -&gt; unit" Usage="control.OnKeyPress e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2057"><see cref="T:System.Windows.Forms.KeyPressEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2057">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2058">引發 <see cref="E:System.Windows.Forms.Control.KeyPress" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2058">Raises the <see cref="E:System.Windows.Forms.Control.KeyPress" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2059">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2059">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2060">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2060">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2061"><xref:System.Windows.Forms.Control.OnKeyPress%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2061">The <xref:System.Windows.Forms.Control.OnKeyPress%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2062">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2062">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2063">下列程式碼範例使用<xref:System.Windows.Forms.Control.KeyPress>防止字元輸入這個控制項的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2063">The following code example uses the <xref:System.Windows.Forms.Control.KeyPress> event to prevent characters from entering the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2064"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2064"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="control.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2065"><see cref="T:System.Windows.Forms.KeyEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2065">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2066">引發 <see cref="E:System.Windows.Forms.Control.KeyUp" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2066">Raises the <see cref="E:System.Windows.Forms.Control.KeyUp" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2067">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2067">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2068">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2068">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2069"><xref:System.Windows.Forms.Control.OnKeyUp%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2069">The <xref:System.Windows.Forms.Control.OnKeyUp%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2070">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2070">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2071">下列程式碼範例使用<xref:System.Windows.Forms.Control.KeyUp>事件<xref:System.Windows.Forms.Help>類別，以顯示快顯樣式協助使用者。</span><span class="sxs-lookup"><span data-stu-id="31784-2071">The following code example uses the <xref:System.Windows.Forms.Control.KeyUp> event with the <xref:System.Windows.Forms.Help> class to display pop-up style help to the user.</span></span>  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2072"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2072"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected virtual void OnLayout (System.Windows.Forms.LayoutEventArgs levent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLayout(class System.Windows.Forms.LayoutEventArgs levent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLayout (levent As LayoutEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLayout(System::Windows::Forms::LayoutEventArgs ^ levent);" />
      <MemberSignature Language="F#" Value="abstract member OnLayout : System.Windows.Forms.LayoutEventArgs -&gt; unit&#xA;override this.OnLayout : System.Windows.Forms.LayoutEventArgs -&gt; unit" Usage="control.OnLayout levent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="levent" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="levent"><span data-ttu-id="31784-2073"><see cref="T:System.Windows.Forms.LayoutEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2073">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2074">引發 <see cref="E:System.Windows.Forms.Control.Layout" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2074">Raises the <see cref="E:System.Windows.Forms.Control.Layout" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2075">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2075">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2076">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2076">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2077"><xref:System.Windows.Forms.Control.OnLayout%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2077">The <xref:System.Windows.Forms.Control.OnLayout%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2078">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2078">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2079"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" />方法，讓已註冊的委派能接收到事件及一般停駐和錨定功能運作。在衍生的類別應該覆寫這個方法，以進行任何自訂版面配置邏輯。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2079"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> method so that registered delegates receive the event and for typical docking and anchoring functions to work. Derived classes should override this method to do any custom layout logic.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="OnLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLeave : EventArgs -&gt; unit&#xA;override this.OnLeave : EventArgs -&gt; unit" Usage="control.OnLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2080">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2080">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2081">引發 <see cref="E:System.Windows.Forms.Control.Leave" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2081">Raises the <see cref="E:System.Windows.Forms.Control.Leave" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2082">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2082">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2083">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2083">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2084"><xref:System.Windows.Forms.Control.OnLeave%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2084">The <xref:System.Windows.Forms.Control.OnLeave%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2085">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2085">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2086">下列程式碼範例使用<xref:System.Windows.Forms.Control.Leave>其先前的狀態重設控制項的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2086">The following code example uses the <xref:System.Windows.Forms.Control.Leave> event to reset a control to its former state.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2087"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2087"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.Leave" />
      </Docs>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLocationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLocationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLocationChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLocationChanged : EventArgs -&gt; unit&#xA;override this.OnLocationChanged : EventArgs -&gt; unit" Usage="control.OnLocationChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2088">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2088">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2089">引發 <see cref="E:System.Windows.Forms.Control.LocationChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2089">Raises the <see cref="E:System.Windows.Forms.Control.LocationChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2090">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2090">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2091">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2091">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2092"><xref:System.Windows.Forms.Control.OnLocationChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2092">The <xref:System.Windows.Forms.Control.OnLocationChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2093">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2093">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2094">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2094">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2095"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2095">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName* `Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2096">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2096">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2097">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2097">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2098">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2098">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2099"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2099"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.LocationChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : EventArgs -&gt; unit&#xA;override this.OnLostFocus : EventArgs -&gt; unit" Usage="control.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2100">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2100">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2101">引發 <see cref="E:System.Windows.Forms.Control.LostFocus" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2101">Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2102">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2102">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2103">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2103">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2104"><xref:System.Windows.Forms.Control.OnLostFocus%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2104">The <xref:System.Windows.Forms.Control.OnLostFocus%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2105">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2105">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2106"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2106"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnMarginChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMarginChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMarginChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMarginChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMarginChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMarginChanged : EventArgs -&gt; unit&#xA;override this.OnMarginChanged : EventArgs -&gt; unit" Usage="control.OnMarginChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2107"><see cref="T:System.EventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2107">A <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2108">引發 <see cref="E:System.Windows.Forms.Control.MarginChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2108">Raises the <see cref="E:System.Windows.Forms.Control.MarginChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2109">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2109">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2110">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2110">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2111"><xref:System.Windows.Forms.Control.OnMarginChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2111">The <xref:System.Windows.Forms.Control.OnMarginChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2112">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2112">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2113"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2113"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseCaptureChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseCaptureChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseCaptureChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseCaptureChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseCaptureChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseCaptureChanged : EventArgs -&gt; unit&#xA;override this.OnMouseCaptureChanged : EventArgs -&gt; unit" Usage="control.OnMouseCaptureChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2114">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2114">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2115">引發 <see cref="E:System.Windows.Forms.Control.MouseCaptureChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2115">Raises the <see cref="E:System.Windows.Forms.Control.MouseCaptureChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2116">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2116">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2117">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2117">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2118"><xref:System.Windows.Forms.Control.OnMouseCaptureChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2118">The <xref:System.Windows.Forms.Control.OnMouseCaptureChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2119">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2119">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2120"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2120"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseClick (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseClick(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseClick : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseClick : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2121">包含事件資料的 <see cref="T:System.Windows.Forms.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2121">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2122">引發 <see cref="E:System.Windows.Forms.Control.MouseClick" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2122">Raises the <see cref="E:System.Windows.Forms.Control.MouseClick" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2123">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2123">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2124">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2124">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2125"><xref:System.Windows.Forms.Control.OnMouseClick%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2125">The <xref:System.Windows.Forms.Control.OnMouseClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2126">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2126">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2127"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2127"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDoubleClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDoubleClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDoubleClick (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDoubleClick(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDoubleClick : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseDoubleClick : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2128">包含事件資料的 <see cref="T:System.Windows.Forms.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2128">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2129">引發 <see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2129">Raises the <see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2130">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2130">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2131">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2131">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2132"><xref:System.Windows.Forms.Control.OnMouseDoubleClick%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2132">The <xref:System.Windows.Forms.Control.OnMouseDoubleClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2133">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2133">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2134"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2134"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2135"><see cref="T:System.Windows.Forms.MouseEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2135">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2136">引發 <see cref="E:System.Windows.Forms.Control.MouseDown" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2136">Raises the <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2137">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2137">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2138">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2138">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2139"><xref:System.Windows.Forms.Control.OnMouseDown%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2139">The <xref:System.Windows.Forms.Control.OnMouseDown%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2140">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2140">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2141"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2141"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseDown" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : EventArgs -&gt; unit&#xA;override this.OnMouseEnter : EventArgs -&gt; unit" Usage="control.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2142">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2142">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2143">引發 <see cref="E:System.Windows.Forms.Control.MouseEnter" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2143">Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2144">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2144">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2145">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2145">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2146"><xref:System.Windows.Forms.Control.OnMouseEnter%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2146">The <xref:System.Windows.Forms.Control.OnMouseEnter%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2147">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2147">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2148"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2148"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseEnter" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseHover (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseHover(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseHover : EventArgs -&gt; unit&#xA;override this.OnMouseHover : EventArgs -&gt; unit" Usage="control.OnMouseHover e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2149">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2149">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2150">引發 <see cref="E:System.Windows.Forms.Control.MouseHover" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2150">Raises the <see cref="E:System.Windows.Forms.Control.MouseHover" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2151">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2151">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2152">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2152">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2153"><xref:System.Windows.Forms.Control.OnMouseHover%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2153">The <xref:System.Windows.Forms.Control.OnMouseHover%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2154">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2154">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2155">下列程式碼範例示範如何覆寫<xref:System.Windows.Forms.Control.OnMouseHover%2A>和<xref:System.Windows.Forms.Control.OnMouseMove%2A>方法在衍生類別中的。</span><span class="sxs-lookup"><span data-stu-id="31784-2155">The following code example demonstrates how to override the <xref:System.Windows.Forms.Control.OnMouseHover%2A> and <xref:System.Windows.Forms.Control.OnMouseMove%2A> methods in a derived class.</span></span> <span data-ttu-id="31784-2156">若要執行此範例，下列程式碼貼在新的表單並貼上這個類別相同的檔案格式之後。</span><span class="sxs-lookup"><span data-stu-id="31784-2156">To run the example, paste the following code in a new form and paste this class, forming the same file, after the form.</span></span> <span data-ttu-id="31784-2157">加入按鈕的型別`FunButton`至表單。</span><span class="sxs-lookup"><span data-stu-id="31784-2157">Add a button of type `FunButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2158"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2158"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseHover" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : EventArgs -&gt; unit&#xA;override this.OnMouseLeave : EventArgs -&gt; unit" Usage="control.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2159">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2159">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2160">引發 <see cref="E:System.Windows.Forms.Control.MouseLeave" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2160">Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2161">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2161">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2162">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2162">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2163"><xref:System.Windows.Forms.Control.OnMouseLeave%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2163">The <xref:System.Windows.Forms.Control.OnMouseLeave%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2164">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2164">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2165"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2165"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseLeave" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2166"><see cref="T:System.Windows.Forms.MouseEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2166">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2167">引發 <see cref="E:System.Windows.Forms.Control.MouseMove" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2167">Raises the <see cref="E:System.Windows.Forms.Control.MouseMove" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2168">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2168">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2169">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2169">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2170"><xref:System.Windows.Forms.Control.OnMouseMove%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2170">The <xref:System.Windows.Forms.Control.OnMouseMove%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2171">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2171">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2172">下列程式碼範例示範如何覆寫<xref:System.Windows.Forms.Control.OnMouseHover%2A>和<xref:System.Windows.Forms.Control.OnMouseMove%2A>方法在衍生類別中的。</span><span class="sxs-lookup"><span data-stu-id="31784-2172">The following code example demonstrates how to override the <xref:System.Windows.Forms.Control.OnMouseHover%2A> and <xref:System.Windows.Forms.Control.OnMouseMove%2A> methods in a derived class.</span></span> <span data-ttu-id="31784-2173">若要執行此範例，下列程式碼貼在新的表單並貼上這個類別相同的檔案格式之後。</span><span class="sxs-lookup"><span data-stu-id="31784-2173">To run the example, paste the following code in a new form and paste this class, forming the same file, after the form.</span></span> <span data-ttu-id="31784-2174">加入按鈕的型別`FunButton`至表單。</span><span class="sxs-lookup"><span data-stu-id="31784-2174">Add a button of type `FunButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2175"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2175"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseMove" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2176"><see cref="T:System.Windows.Forms.MouseEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2176">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2177">引發 <see cref="E:System.Windows.Forms.Control.MouseUp" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2177">Raises the <see cref="E:System.Windows.Forms.Control.MouseUp" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2178">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2178">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2179">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2179">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2180"><xref:System.Windows.Forms.Control.OnMouseUp%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2180">The <xref:System.Windows.Forms.Control.OnMouseUp%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2181">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2181">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2182"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2182"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2183"><see cref="T:System.Windows.Forms.MouseEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2183">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2184">引發 <see cref="E:System.Windows.Forms.Control.MouseWheel" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2184">Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2185">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2185">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2186">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2186">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2187"><xref:System.Windows.Forms.Control.OnMouseWheel%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2187">The <xref:System.Windows.Forms.Control.OnMouseWheel%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2188">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2188">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2189"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2189"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseWheel" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMove (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMove(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMove (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMove(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMove : EventArgs -&gt; unit&#xA;override this.OnMove : EventArgs -&gt; unit" Usage="control.OnMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2190">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2190">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2191">引發 <see cref="E:System.Windows.Forms.Control.Move" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2191">Raises the <see cref="E:System.Windows.Forms.Control.Move" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2192">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2192">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2193">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2193">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2194"><xref:System.Windows.Forms.Control.OnMove%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2194">The <xref:System.Windows.Forms.Control.OnMove%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2195">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2195">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2196">下列程式碼範例使用<xref:System.Windows.Forms.Control.Move>事件 以顯示在表單的標題列上的螢幕座標中表單的位置。</span><span class="sxs-lookup"><span data-stu-id="31784-2196">The following code example uses the <xref:System.Windows.Forms.Control.Move> event to display the location of the form in screen coordinates on the caption bar of the form.</span></span>  
  
 [!code-cpp[Control.Move#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Move/CPP/form1.cpp#1)]
 [!code-csharp[Control.Move#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Move/CS/form1.cs#1)]
 [!code-vb[Control.Move#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Move/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2197"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2197"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.Move" />
      </Docs>
    </Member>
    <Member MemberName="OnNotifyMessage">
      <MemberSignature Language="C#" Value="protected virtual void OnNotifyMessage (System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNotifyMessage(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnNotifyMessage (m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnNotifyMessage(System::Windows::Forms::Message m);" />
      <MemberSignature Language="F#" Value="abstract member OnNotifyMessage : System.Windows.Forms.Message -&gt; unit&#xA;override this.OnNotifyMessage : System.Windows.Forms.Message -&gt; unit" Usage="control.OnNotifyMessage m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="31784-2198">代表 Windows 訊息的 <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2198">A <see cref="T:System.Windows.Forms.Message" /> that represents the Windows message.</span></span></param>
        <summary><span data-ttu-id="31784-2199">將 Windows 訊息通知控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2199">Notifies the control of Windows messages.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2200"><xref:System.Windows.Forms.Control.OnNotifyMessage%2A>呼叫方法時若控制項的`EnableNotifyMessage`樣式位元會設<xref:System.Windows.Forms.ControlStyles>。</span><span class="sxs-lookup"><span data-stu-id="31784-2200">The <xref:System.Windows.Forms.Control.OnNotifyMessage%2A> method is called if the control's `EnableNotifyMessage` style bit is set in <xref:System.Windows.Forms.ControlStyles>.</span></span> <span data-ttu-id="31784-2201">`EnableNotifyMessage`中設定樣式<xref:System.Windows.Forms.ControlStyles>啟用時通知控制項<xref:System.Windows.Forms.Control.WndProc%2A>方法會接收 Windows 訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2201">The `EnableNotifyMessage` style in <xref:System.Windows.Forms.ControlStyles> enables the control to be notified when the <xref:System.Windows.Forms.Control.WndProc%2A> method receives a Windows message.</span></span> <span data-ttu-id="31784-2202">使用此方法，非完全信任的控制項可以接聽 Windows 訊息，而不讓他們能夠修改訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2202">With this method, semi-trusted controls can listen for Windows messages without enabling them to modify the message.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2203"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" />衍生類別中呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" />方法不需要，因為沒有初始的實作。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2203"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> in a derived class, calling the base class's <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> method is not necessary because there is no initial implementation.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="OnPaddingChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPaddingChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaddingChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPaddingChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPaddingChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPaddingChanged : EventArgs -&gt; unit&#xA;override this.OnPaddingChanged : EventArgs -&gt; unit" Usage="control.OnPaddingChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2204"><see cref="T:System.EventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2204">A <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2205">引發 <see cref="E:System.Windows.Forms.Control.PaddingChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2205">Raises the <see cref="E:System.Windows.Forms.Control.PaddingChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2206">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2206">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2207">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2207">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2208"><xref:System.Windows.Forms.Control.OnPaddingChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2208">The <xref:System.Windows.Forms.Control.OnPaddingChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2209">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2209">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2210"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2210"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected virtual void OnPaint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPaint (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPaint(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPaint : System.Windows.Forms.PaintEventArgs -&gt; unit&#xA;override this.OnPaint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.OnPaint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2211"><see cref="T:System.Windows.Forms.PaintEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2211">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2212">引發 <see cref="E:System.Windows.Forms.Control.Paint" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2212">Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2213">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2213">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2214">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2214">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2215"><xref:System.Windows.Forms.Control.OnPaint%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2215">The <xref:System.Windows.Forms.Control.OnPaint%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2216">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2216">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2217">下列程式碼範例可讓使用者將是影像或影像檔案拖曳至表單，並將其顯示在其上卸除的點。</span><span class="sxs-lookup"><span data-stu-id="31784-2217">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on which it is dropped.</span></span> <span data-ttu-id="31784-2218"><xref:System.Windows.Forms.Control.OnPaint%2A>表單繪製每次重新繪製影像會覆寫方法; 否則為映像就只會一直保存到下一步 重新繪製。</span><span class="sxs-lookup"><span data-stu-id="31784-2218">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="31784-2219"><xref:System.Windows.Forms.Control.DragEnter>事件處理方法判斷被拖曳至表單的資料類型，並提供適當的回應。</span><span class="sxs-lookup"><span data-stu-id="31784-2219">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="31784-2220"><xref:System.Windows.Forms.Control.DragDrop>事件處理方法會顯示在表單中，影像如果<xref:System.Drawing.Image>可以從資料建立。</span><span class="sxs-lookup"><span data-stu-id="31784-2220">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="31784-2221">因為<xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType>值螢幕座標，這個範例會使用<xref:System.Windows.Forms.Control.PointToClient%2A>方法，將它們轉換為用戶端座標。</span><span class="sxs-lookup"><span data-stu-id="31784-2221">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 [!code-cpp[Control.Paint#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Paint/CPP/form1.cpp#1)]
 [!code-csharp[Control.Paint#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Paint/CS/form1.cs#1)]
 [!code-vb[Control.Paint#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Paint/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2222"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2222"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.Paint" />
      </Docs>
    </Member>
    <Member MemberName="OnPaintBackground">
      <MemberSignature Language="C#" Value="protected virtual void OnPaintBackground (System.Windows.Forms.PaintEventArgs pevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaintBackground(class System.Windows.Forms.PaintEventArgs pevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPaintBackground (pevent As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPaintBackground(System::Windows::Forms::PaintEventArgs ^ pevent);" />
      <MemberSignature Language="F#" Value="abstract member OnPaintBackground : System.Windows.Forms.PaintEventArgs -&gt; unit&#xA;override this.OnPaintBackground : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.OnPaintBackground pevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pevent" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="pevent"><span data-ttu-id="31784-2223"><see cref="T:System.Windows.Forms.PaintEventArgs" />，含有要繪製的控制項資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-2223">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains information about the control to paint.</span></span></param>
        <summary><span data-ttu-id="31784-2224">繪製控制項的背景。</span><span class="sxs-lookup"><span data-stu-id="31784-2224">Paints the background of the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2225"><xref:System.Windows.Forms.Control.OnPaintBackground%2A>方法可讓衍生的類別處理 Windows 背景清除要求。</span><span class="sxs-lookup"><span data-stu-id="31784-2225">The <xref:System.Windows.Forms.Control.OnPaintBackground%2A> method enables derived classes to handle Windows background erase requests.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2226"><para>繼承的類別應該覆寫此方法以處理從 windows 清除背景要求。在覆寫<see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />衍生類別中則不需要呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2226"><para>Inheriting classes should override this method to handle the erase background request from windows. When overriding <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" /> in a derived class it is not necessary to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />.</para></span></span></block>
        <altmember cref="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBackColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentBackColorChanged : EventArgs -&gt; unit&#xA;override this.OnParentBackColorChanged : EventArgs -&gt; unit" Usage="control.OnParentBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2227">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2227">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2228">當控制項容器的 <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> 屬性值變更時，會引發 <see cref="P:System.Windows.Forms.Control.BackColor" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2228">Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> event when the <see cref="P:System.Windows.Forms.Control.BackColor" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2229">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2229">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2230">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2230">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2231"><xref:System.Windows.Forms.Control.OnParentBackColorChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2231">The <xref:System.Windows.Forms.Control.OnParentBackColorChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2232">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2232">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2233">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2233">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2234"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2234">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2235">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2235">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2236">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2236">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2237">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2237">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2238"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2238"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentBackgroundImageChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentBackgroundImageChanged : EventArgs -&gt; unit&#xA;override this.OnParentBackgroundImageChanged : EventArgs -&gt; unit" Usage="control.OnParentBackgroundImageChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2239">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2239">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2240">當控制項容器的 <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> 屬性值變更時，會引發 <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2240">Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> event when the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2241">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2241">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2242">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2242">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2243"><xref:System.Windows.Forms.Control.OnParentBackgroundImageChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2243">The <xref:System.Windows.Forms.Control.OnParentBackgroundImageChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2244">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2244">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2245">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2245">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2246"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2246">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2247">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2247">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2248">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2248">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2249">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2249">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2250"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2250"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBindingContextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentBindingContextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentBindingContextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentBindingContextChanged : EventArgs -&gt; unit&#xA;override this.OnParentBindingContextChanged : EventArgs -&gt; unit" Usage="control.OnParentBindingContextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2251">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2251">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2252">當控制項容器的 <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> 屬性值變更時，會引發 <see cref="P:System.Windows.Forms.Control.BindingContext" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2252">Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> event when the <see cref="P:System.Windows.Forms.Control.BindingContext" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2253">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2253">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2254">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2254">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2255"><xref:System.Windows.Forms.Control.OnParentBindingContextChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2255">The <xref:System.Windows.Forms.Control.OnParentBindingContextChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2256">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2256">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2257">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2257">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2258"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2258">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2259">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2259">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2260">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2260">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2261">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2261">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2262"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2262"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentChanged : EventArgs -&gt; unit&#xA;override this.OnParentChanged : EventArgs -&gt; unit" Usage="control.OnParentChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2263">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2263">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2264">引發 <see cref="E:System.Windows.Forms.Control.ParentChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2264">Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2265">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2265">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2266">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2266">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2267"><xref:System.Windows.Forms.Control.OnParentChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2267">The <xref:System.Windows.Forms.Control.OnParentChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2268">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2268">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2269">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2269">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2270"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2270">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2271">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2271">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2272">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2272">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2273">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2273">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2274"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2274"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.ParentChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentCursorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentCursorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentCursorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentCursorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentCursorChanged : EventArgs -&gt; unit&#xA;override this.OnParentCursorChanged : EventArgs -&gt; unit" Usage="control.OnParentCursorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2275">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2275">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2276">引發 <see cref="E:System.Windows.Forms.Control.CursorChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2276">Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2277">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2277">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2278">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2278">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2279"><xref:System.Windows.Forms.Control.OnParentCursorChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2279">The <xref:System.Windows.Forms.Control.OnParentCursorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2280">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2280">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2281"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2281"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="OnParentEnabledChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentEnabledChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentEnabledChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentEnabledChanged : EventArgs -&gt; unit&#xA;override this.OnParentEnabledChanged : EventArgs -&gt; unit" Usage="control.OnParentEnabledChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2282">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2282">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2283">當控制項容器的 <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> 屬性值變更時，會引發 <see cref="P:System.Windows.Forms.Control.Enabled" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2283">Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event when the <see cref="P:System.Windows.Forms.Control.Enabled" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2284">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2284">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2285">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2285">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2286"><xref:System.Windows.Forms.Control.OnParentEnabledChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2286">The <xref:System.Windows.Forms.Control.OnParentEnabledChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2287">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2287">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2288">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2288">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2289"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2289">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2290">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2290">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2291">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2291">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2292">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2292">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2293"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2293"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.EnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentFontChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentFontChanged : EventArgs -&gt; unit&#xA;override this.OnParentFontChanged : EventArgs -&gt; unit" Usage="control.OnParentFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2294">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2294">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2295">當控制項容器的 <see cref="E:System.Windows.Forms.Control.FontChanged" /> 屬性值變更時，會引發 <see cref="P:System.Windows.Forms.Control.Font" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2295">Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event when the <see cref="P:System.Windows.Forms.Control.Font" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2296">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2296">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2297">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2297">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2298"><xref:System.Windows.Forms.Control.OnParentFontChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2298">The <xref:System.Windows.Forms.Control.OnParentFontChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2299">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2299">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2300">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2300">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2301"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2301">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2302">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2302">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2303">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2303">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2304">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2304">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2305"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2305"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentForeColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentForeColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentForeColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentForeColorChanged : EventArgs -&gt; unit&#xA;override this.OnParentForeColorChanged : EventArgs -&gt; unit" Usage="control.OnParentForeColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2306">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2306">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2307">當控制項容器的 <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> 屬性值變更時，會引發 <see cref="P:System.Windows.Forms.Control.ForeColor" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2307">Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> event when the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2308">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2308">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2309">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2309">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2310"><xref:System.Windows.Forms.Control.OnParentForeColorChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2310">The <xref:System.Windows.Forms.Control.OnParentForeColorChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2311">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2311">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2312">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2312">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2313"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2313">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2314">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2314">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2315">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2315">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2316">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2316">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2317"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2317"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentRightToLeftChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentRightToLeftChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentRightToLeftChanged : EventArgs -&gt; unit&#xA;override this.OnParentRightToLeftChanged : EventArgs -&gt; unit" Usage="control.OnParentRightToLeftChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2318">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2318">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2319">當控制項容器的 <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> 屬性值變更時，會引發 <see cref="P:System.Windows.Forms.Control.RightToLeft" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2319">Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> event when the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2320">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2320">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2321">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2321">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2322"><xref:System.Windows.Forms.Control.OnParentRightToLeftChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2322">The <xref:System.Windows.Forms.Control.OnParentRightToLeftChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2323">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2323">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2324">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2324">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2325"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2325">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2326">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2326">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2327">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2327">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2328">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2328">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2329"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2329"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.RightToLeftChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentVisibleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentVisibleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentVisibleChanged : EventArgs -&gt; unit&#xA;override this.OnParentVisibleChanged : EventArgs -&gt; unit" Usage="control.OnParentVisibleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2330">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2330">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2331">當控制項容器的 <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> 屬性值變更時，會引發 <see cref="P:System.Windows.Forms.Control.Visible" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2331">Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event when the <see cref="P:System.Windows.Forms.Control.Visible" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2332">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2332">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2333">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2333">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2334"><xref:System.Windows.Forms.Control.OnParentVisibleChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2334">The <xref:System.Windows.Forms.Control.OnParentVisibleChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2335">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2335">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2336">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2336">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2337"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2337">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2338">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2338">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2339">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2339">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2340">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2340">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2341"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2341"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Forms.PreviewKeyDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Forms.PreviewKeyDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As PreviewKeyDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Forms::PreviewKeyDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventArgs -&gt; unit" Usage="control.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PreviewKeyDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2342"><see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2342">A <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2343">引發 <see cref="E:System.Windows.Forms.Control.PreviewKeyDown" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2343">Raises the <see cref="E:System.Windows.Forms.Control.PreviewKeyDown" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2344">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2344">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2345">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2345">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2346"><xref:System.Windows.Forms.Control.OnPreviewKeyDown%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2346">The <xref:System.Windows.Forms.Control.OnPreviewKeyDown%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2347">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2347">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2348"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2348"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="OnPrint">
      <MemberSignature Language="C#" Value="protected virtual void OnPrint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPrint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPrint (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPrint(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPrint : System.Windows.Forms.PaintEventArgs -&gt; unit&#xA;override this.OnPrint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.OnPrint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2349"><see cref="T:System.Windows.Forms.PaintEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2349">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2350">引發 <see cref="E:System.Windows.Forms.Control.Paint" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2350">Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2351">如果`UserPaint`的位元<xref:System.Windows.Forms.ControlStyles>已經設定，您可以覆寫<xref:System.Windows.Forms.Control.OnPrint%2A>執行分層的繪製。</span><span class="sxs-lookup"><span data-stu-id="31784-2351">If the `UserPaint` bit of the <xref:System.Windows.Forms.ControlStyles> is set, you can override <xref:System.Windows.Forms.Control.OnPrint%2A> to do layered painting.</span></span> <span data-ttu-id="31784-2352">如需詳細資訊，請參閱 <xref:System.Windows.Forms.Control.SetStyle%2A>。</span><span class="sxs-lookup"><span data-stu-id="31784-2352">See <xref:System.Windows.Forms.Control.SetStyle%2A> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31784-2353"><paramref name="e" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2353">The <paramref name="e" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.Forms.QueryContinueDragEventArgs qcdevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.Forms.QueryContinueDragEventArgs qcdevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (qcdevent As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::Forms::QueryContinueDragEventArgs ^ qcdevent);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.Forms.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.Forms.QueryContinueDragEventArgs -&gt; unit" Usage="control.OnQueryContinueDrag qcdevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qcdevent" Type="System.Windows.Forms.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="qcdevent"><span data-ttu-id="31784-2354"><see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2354">A <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2355">引發 <see cref="E:System.Windows.Forms.Control.QueryContinueDrag" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2355">Raises the <see cref="E:System.Windows.Forms.Control.QueryContinueDrag" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2356">拖曳開始之後，這個方法就會呼叫重複[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]直到取消或完成拖曳作業為止。</span><span class="sxs-lookup"><span data-stu-id="31784-2356">After dragging has begun, this method is called repeatedly by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] until the drag operation is either canceled or completed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-2357">如果您想要變更在取消拖曳的或卸除發生所在的點，請覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2357">Override this method if you want to change the point at which dragging is canceled or at which a drop occurs.</span></span>  
  
 <span data-ttu-id="31784-2358">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2358">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2359">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2359">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2360"><xref:System.Windows.Forms.Control.OnQueryContinueDrag%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2360">The <xref:System.Windows.Forms.Control.OnQueryContinueDrag%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2361">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2361">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2362"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2362"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnRegionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRegionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRegionChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRegionChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRegionChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRegionChanged : EventArgs -&gt; unit&#xA;override this.OnRegionChanged : EventArgs -&gt; unit" Usage="control.OnRegionChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2363">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2363">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2364">引發 <see cref="E:System.Windows.Forms.Control.RegionChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2364">Raises the <see cref="E:System.Windows.Forms.Control.RegionChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2365">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2365">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2366">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2366">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2367"><xref:System.Windows.Forms.Control.OnRegionChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2367">The <xref:System.Windows.Forms.Control.OnRegionChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2368">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2368">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2369"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2369"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected virtual void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResize(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnResize : EventArgs -&gt; unit&#xA;override this.OnResize : EventArgs -&gt; unit" Usage="control.OnResize e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2370">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2370">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2371">引發 <see cref="E:System.Windows.Forms.Control.Resize" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2371">Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2372">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2372">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2373">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2373">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2374"><xref:System.Windows.Forms.Control.OnResize%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2374">The <xref:System.Windows.Forms.Control.OnResize%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2375">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2375">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2376"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />方法，使已註冊的委派能接收到事件。<see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />可以呼叫方法，在建構期間，因此，如果您覆寫<see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />可以在控制項的建構函式呼叫之前呼叫。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2376"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> method so that registered delegates receive the event. The <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> method can be called during construction, so if you override <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> it can be called before the control constructor is called.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.Resize" />
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRightToLeftChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRightToLeftChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRightToLeftChanged : EventArgs -&gt; unit&#xA;override this.OnRightToLeftChanged : EventArgs -&gt; unit" Usage="control.OnRightToLeftChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2377">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2377">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2378">引發 <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2378">Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2379">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2379">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2380">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2380">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2381"><xref:System.Windows.Forms.Control.OnRightToLeftChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2381">The <xref:System.Windows.Forms.Control.OnRightToLeftChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2382">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2382">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2383">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2383">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2384"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2384">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2385">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2385">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2386">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2386">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2387">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2387">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2388"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2388"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.RightToLeftChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSizeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSizeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSizeChanged : EventArgs -&gt; unit&#xA;override this.OnSizeChanged : EventArgs -&gt; unit" Usage="control.OnSizeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2389">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2389">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2390">引發 <see cref="E:System.Windows.Forms.Control.SizeChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2390">Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2391">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2391">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2392">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2392">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2393"><xref:System.Windows.Forms.Control.OnSizeChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2393">The <xref:System.Windows.Forms.Control.OnSizeChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2394">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2394">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2395"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2395"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.SizeChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStyleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStyleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : EventArgs -&gt; unit&#xA;override this.OnStyleChanged : EventArgs -&gt; unit" Usage="control.OnStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2396">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2396">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2397">引發 <see cref="E:System.Windows.Forms.Control.StyleChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2397">Raises the <see cref="E:System.Windows.Forms.Control.StyleChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2398">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2398">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2399">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2399">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2400"><xref:System.Windows.Forms.Control.OnStyleChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2400">The <xref:System.Windows.Forms.Control.OnStyleChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2401">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2401">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2402"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2402"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.StyleChanged" />
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSystemColorsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSystemColorsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSystemColorsChanged : EventArgs -&gt; unit&#xA;override this.OnSystemColorsChanged : EventArgs -&gt; unit" Usage="control.OnSystemColorsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2403">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2403">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2404">引發 <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2404">Raises the <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2405">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2405">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2406">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2406">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2407"><xref:System.Windows.Forms.Control.OnSystemColorsChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2407">The <xref:System.Windows.Forms.Control.OnSystemColorsChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2408">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2408">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2409"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2409"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.SystemColorsChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTabIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTabIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTabIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTabIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTabIndexChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTabIndexChanged : EventArgs -&gt; unit&#xA;override this.OnTabIndexChanged : EventArgs -&gt; unit" Usage="control.OnTabIndexChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2410">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2410">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2411">引發 <see cref="E:System.Windows.Forms.Control.TabIndexChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2411">Raises the <see cref="E:System.Windows.Forms.Control.TabIndexChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2412">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2412">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2413">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2413">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2414"><xref:System.Windows.Forms.Control.OnTabIndexChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2414">The <xref:System.Windows.Forms.Control.OnTabIndexChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2415">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2415">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2416"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2416"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.TabIndexChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTabStopChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTabStopChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTabStopChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTabStopChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTabStopChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTabStopChanged : EventArgs -&gt; unit&#xA;override this.OnTabStopChanged : EventArgs -&gt; unit" Usage="control.OnTabStopChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2417">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2417">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2418">引發 <see cref="E:System.Windows.Forms.Control.TabStopChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2418">Raises the <see cref="E:System.Windows.Forms.Control.TabStopChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2419">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2419">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2420">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2420">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2421"><xref:System.Windows.Forms.Control.OnTabStopChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2421">The <xref:System.Windows.Forms.Control.OnTabStopChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2422">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2422">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2423">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2423">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2424"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2424">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2425">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2425">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2426">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2426">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2427">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2427">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2428"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2428"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.TabStopChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextChanged : EventArgs -&gt; unit&#xA;override this.OnTextChanged : EventArgs -&gt; unit" Usage="control.OnTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2429">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2429">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2430">引發 <see cref="E:System.Windows.Forms.Control.TextChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2430">Raises the <see cref="E:System.Windows.Forms.Control.TextChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2431">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2431">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2432">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2432">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2433"><xref:System.Windows.Forms.Control.OnTextChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2433">The <xref:System.Windows.Forms.Control.OnTextChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2434">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2434">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2435">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2435">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2436">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2436">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2437">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2437">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2438"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2438"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.TextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnValidated">
      <MemberSignature Language="C#" Value="protected virtual void OnValidated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnValidated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnValidated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnValidated : EventArgs -&gt; unit&#xA;override this.OnValidated : EventArgs -&gt; unit" Usage="control.OnValidated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2439">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2439">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2440">引發 <see cref="E:System.Windows.Forms.Control.Validated" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2440">Raises the <see cref="E:System.Windows.Forms.Control.Validated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2441">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2441">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2442">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2442">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2443"><xref:System.Windows.Forms.Control.OnValidated%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2443">The <xref:System.Windows.Forms.Control.OnValidated%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2444">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2444">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2445"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2445"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected virtual void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnValidating (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnValidating(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnValidating : System.ComponentModel.CancelEventArgs -&gt; unit&#xA;override this.OnValidating : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="control.OnValidating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2446"><see cref="T:System.ComponentModel.CancelEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2446">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2447">引發 <see cref="E:System.Windows.Forms.Control.Validating" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2447">Raises the <see cref="E:System.Windows.Forms.Control.Validating" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2448">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2448">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2449">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2449">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2450"><xref:System.Windows.Forms.Control.OnValidating%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2450">The <xref:System.Windows.Forms.Control.OnValidating%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2451">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2451">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2452"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2452"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
      </Docs>
    </Member>
    <Member MemberName="OnVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnVisibleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnVisibleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnVisibleChanged : EventArgs -&gt; unit&#xA;override this.OnVisibleChanged : EventArgs -&gt; unit" Usage="control.OnVisibleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-2453">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2453">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2454">引發 <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2454">Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2455">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2455">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="31784-2456">如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2456">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="31784-2457"><xref:System.Windows.Forms.Control.OnVisibleChanged%2A>方法也可讓衍生的類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="31784-2457">The <xref:System.Windows.Forms.Control.OnVisibleChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="31784-2458">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="31784-2458">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2459">下列程式碼範例是事件引發的方法，是執行時<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2459">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2460"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式`On` *PropertyName* `Changed` ，會引發對應的*PropertyName* `Changed`事件時*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2460">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2461">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>衍生的類別顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2461">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="31784-2462">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2462">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2463">這個範例需要您具有類別衍生自<xref:System.Windows.Forms.TextBox>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-2463">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2464"><para>在覆寫<see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2464"><para>When overriding <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Show" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.Control.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2465">取得或設定控制項內的邊框間距。</span><span class="sxs-lookup"><span data-stu-id="31784-2465">Gets or sets padding within the control.</span></span></summary>
        <value><span data-ttu-id="31784-2466"><see cref="T:System.Windows.Forms.Padding" />，表示控制項的內部間距特性。</span><span class="sxs-lookup"><span data-stu-id="31784-2466">A <see cref="T:System.Windows.Forms.Padding" /> representing the control's internal spacing characteristics.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2467">這類容器<xref:System.Windows.Forms.GroupBox>和<xref:System.Windows.Forms.TabControl>、<xref:System.Windows.Forms.Control.Padding%2A>屬性取得或設定其各自<xref:System.Windows.Forms.Control.DisplayRectangle%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2467">For containers such as <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TabControl>, the <xref:System.Windows.Forms.Control.Padding%2A> property gets or sets their respective <xref:System.Windows.Forms.Control.DisplayRectangle%2A> properties.</span></span> <span data-ttu-id="31784-2468"><xref:System.Windows.Forms.ScrollableControl.DockPadding%2A?displayProperty=nameWithType>屬性等於其<xref:System.Windows.Forms.Control.Padding%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2468">The <xref:System.Windows.Forms.ScrollableControl.DockPadding%2A?displayProperty=nameWithType> property is equal to its <xref:System.Windows.Forms.Control.Padding%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="31784-2469">控制項可接收的預設值<xref:System.Windows.Forms.Control.Padding%2A>所相當接近 Windows 使用者介面指導方針。</span><span class="sxs-lookup"><span data-stu-id="31784-2469">Controls receive default values for <xref:System.Windows.Forms.Control.Padding%2A> that are reasonably close to Windows user interface guidelines.</span></span> <span data-ttu-id="31784-2470">一些調整仍可能需要特定的應用程式。</span><span class="sxs-lookup"><span data-stu-id="31784-2470">Some adjustments might still be necessary for particular applications.</span></span>  
  
 <span data-ttu-id="31784-2471">實作所有控制項<xref:System.Windows.Forms.Control.GetPreferredSize%2A>中數量來放大<xref:System.Windows.Forms.Control.Padding%2A>時<xref:System.Windows.Forms.Control.AutoSize%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-2471">All controls that implement <xref:System.Windows.Forms.Control.GetPreferredSize%2A> are enlarged by the amount in <xref:System.Windows.Forms.Control.Padding%2A> when <xref:System.Windows.Forms.Control.AutoSize%2A> is `true`.</span></span>  
  
 <span data-ttu-id="31784-2472">下列控制項不使用<xref:System.Windows.Forms.Control.Padding%2A>:</span><span class="sxs-lookup"><span data-stu-id="31784-2472">The following controls do not use <xref:System.Windows.Forms.Control.Padding%2A>:</span></span>  
  
-   <span data-ttu-id="31784-2473">控制項不會實作<xref:System.Windows.Forms.Control.AutoSize%2A>透過 <xref:System.Windows.Forms.Control.GetPreferredSize%2A></span><span class="sxs-lookup"><span data-stu-id="31784-2473">Controls that do not implement <xref:System.Windows.Forms.Control.AutoSize%2A> through <xref:System.Windows.Forms.Control.GetPreferredSize%2A></span></span>  
  
-   <span data-ttu-id="31784-2474">直接繼承自的自訂控制項 <xref:System.Windows.Forms.Control></span><span class="sxs-lookup"><span data-stu-id="31784-2474">Custom controls that directly inherit from <xref:System.Windows.Forms.Control></span></span>  
  
-   <xref:System.Windows.Forms.AxHost>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DataGridView>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MaskedTextBox>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.PropertyGrid>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.SplitContainer>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TextBoxBase>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
-   <xref:System.Windows.Forms.WebBrowser>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberSignature Language="F#" Value="member this.PaddingChanged : EventHandler " Usage="member this.PaddingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2475">發生於控制項的邊框間距變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-2475">Occurs when the control's padding changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2476">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2476">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2477">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-2477">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-2478">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.PaddingChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2478">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.PaddingChanged> event.</span></span> <span data-ttu-id="31784-2479">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-2479">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-2480">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-2480">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-2481">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-2481">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-2482">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.PaddingChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2482">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.PaddingChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#41)]
 [!code-vb[System.Windows.Forms.EventExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberSignature Language="F#" Value="member this.Paint : System.Windows.Forms.PaintEventHandler " Usage="member this.Paint : System.Windows.Forms.PaintEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2483">發生於重繪控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-2483">Occurs when the control is redrawn.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2484"><xref:System.Windows.Forms.Control.Paint>生於重繪控制項時，就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2484">The <xref:System.Windows.Forms.Control.Paint> event is raised when the control is redrawn.</span></span> <span data-ttu-id="31784-2485">它的執行個體傳遞<xref:System.Windows.Forms.PaintEventArgs>要處理的方法<xref:System.Windows.Forms.Control.Paint>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2485">It passes an instance of <xref:System.Windows.Forms.PaintEventArgs> to the method(s) that handles the <xref:System.Windows.Forms.Control.Paint> event.</span></span>  
  
 <span data-ttu-id="31784-2486">當建立新的自訂控制項或繼承的控制項使用不同的視覺外觀，您必須提供程式碼，以呈現控制項，藉由覆寫<xref:System.Windows.Forms.Control.OnPaint%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2486">When creating a new custom control or an inherited control with a different visual appearance, you must provide code to render the control by overriding the <xref:System.Windows.Forms.Control.OnPaint%2A> method.</span></span> <span data-ttu-id="31784-2487">如需詳細資訊，請參閱[覆寫 OnPaint 方法](~/docs/framework/winforms/controls/overriding-the-onpaint-method.md)和[自訂控制項繪製和轉譯](~/docs/framework/winforms/controls/custom-control-painting-and-rendering.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2487">For more information, see [Overriding the OnPaint Method](~/docs/framework/winforms/controls/overriding-the-onpaint-method.md) and [Custom Control Painting and Rendering](~/docs/framework/winforms/controls/custom-control-painting-and-rendering.md).</span></span>  
  
 <span data-ttu-id="31784-2488">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2488">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2489">下列程式碼範例會建立<xref:System.Windows.Forms.PictureBox>控制項在表單和使用<xref:System.Windows.Forms.Control.Paint>繪製它的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2489">The following code example creates a <xref:System.Windows.Forms.PictureBox> control on the form and uses the <xref:System.Windows.Forms.Control.Paint> event to draw to it.</span></span>  
  
 [!code-cpp[Control.Paint#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Paint/CPP/form1.cpp#1)]
 [!code-csharp[Control.Paint#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Paint/CS/form1.cs#1)]
 [!code-vb[Control.Paint#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Paint/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Property Parent As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Parent { System::Windows::Forms::Control ^ get(); void set(System::Windows::Forms::Control ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.Control with get, set" Usage="System.Windows.Forms.Control.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2490">取得或設定控制項的父容器。</span><span class="sxs-lookup"><span data-stu-id="31784-2490">Gets or sets the parent container of the control.</span></span></summary>
        <value><span data-ttu-id="31784-2491"><see cref="T:System.Windows.Forms.Control" />，表示控制項的父代或容器控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2491">A <see cref="T:System.Windows.Forms.Control" /> that represents the parent or container control of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2492">設定<xref:System.Windows.Forms.Control.Parent%2A>屬性值設定為`null`移除控制項<xref:System.Windows.Forms.Control.ControlCollection>其目前的父控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2492">Setting the <xref:System.Windows.Forms.Control.Parent%2A> property value to `null` removes the control from the <xref:System.Windows.Forms.Control.ControlCollection> of its current parent control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2493">下列程式碼範例使用<xref:System.Windows.Forms.Control.Parent%2A>屬性和<xref:System.Windows.Forms.Control.FindForm%2A>方法來設定上的按鈕和其表單父控制項的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2493">The following code example uses the <xref:System.Windows.Forms.Control.Parent%2A> property and the <xref:System.Windows.Forms.Control.FindForm%2A> method to set properties on the parent control of a button and its form.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-2494">若要取得這個屬性值的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-2494">for all windows to get this property value.</span></span> <span data-ttu-id="31784-2495">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="31784-2495">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="ParentChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ParentChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ParentChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ParentChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ParentChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ParentChanged;" />
      <MemberSignature Language="F#" Value="member this.ParentChanged : EventHandler " Usage="member this.ParentChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2496">發生在 <see cref="P:System.Windows.Forms.Control.Parent" /> 屬性值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-2496">Occurs when the <see cref="P:System.Windows.Forms.Control.Parent" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2497">如果會引發這個事件<xref:System.Windows.Forms.Control.Parent%2A>以程式設計方式修改或使用者互動變更屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2497">This event is raised if the <xref:System.Windows.Forms.Control.Parent%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-2498">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2498">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PerformLayout">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31784-2499">強制控制項將配置邏輯套用至子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2499">Forces the control to apply layout logic to child controls.</span></span></summary>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </MemberGroup>
    <Member MemberName="PerformLayout">
      <MemberSignature Language="C#" Value="public void PerformLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PerformLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformLayout();" />
      <MemberSignature Language="F#" Value="member this.PerformLayout : unit -&gt; unit" Usage="control.PerformLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2500">強制控制項將配置邏輯套用至其所有子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2500">Forces the control to apply layout logic to all its child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2501">如果<xref:System.Windows.Forms.Control.SuspendLayout%2A>方法呼叫之前先呼叫<xref:System.Windows.Forms.Control.PerformLayout%2A>方法，<xref:System.Windows.Forms.Control.Layout>隱藏的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2501">If the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method was called before calling the <xref:System.Windows.Forms.Control.PerformLayout%2A> method, the <xref:System.Windows.Forms.Control.Layout> event is suppressed.</span></span>  
  
 <span data-ttu-id="31784-2502"><xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A>和<xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A>屬性<xref:System.Windows.Forms.LayoutEventArgs>建立會設為`null`如果已不提供任何值時<xref:System.Windows.Forms.Control.PerformLayout%2A>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2502">The <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> and <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> properties of the <xref:System.Windows.Forms.LayoutEventArgs> created are set to `null` if no values were provided when the <xref:System.Windows.Forms.Control.PerformLayout%2A> method was called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2503">下列程式碼範例會示範如何使用 <xref:System.Windows.Forms.Control.PerformLayout%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2503">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.PerformLayout%2A> method.</span></span> <span data-ttu-id="31784-2504">它也會示範方式<xref:System.Windows.Forms.Control.Layout>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2504">It also demonstrates ways in which the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span> <span data-ttu-id="31784-2505">在此範例中，`Click`事件處理常式`Button1`明確呼叫<xref:System.Windows.Forms.Control.PerformLayout%2A>。</span><span class="sxs-lookup"><span data-stu-id="31784-2505">In this example, the `Click` event handler for `Button1` explicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="31784-2506">`Click`事件處理常式`Button2`隱含地呼叫<xref:System.Windows.Forms.Control.PerformLayout%2A>。</span><span class="sxs-lookup"><span data-stu-id="31784-2506">The `Click` event handler for `Button2` implicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="31784-2507"><xref:System.Windows.Forms.Control.PerformLayout%2A> 也稱為當表單載入時。</span><span class="sxs-lookup"><span data-stu-id="31784-2507"><xref:System.Windows.Forms.Control.PerformLayout%2A> is also called when the form is loaded.</span></span> <span data-ttu-id="31784-2508">`Button3` 傳回的控制項來載入時的狀態。</span><span class="sxs-lookup"><span data-stu-id="31784-2508">`Button3` returns the control to the state it was in when loaded.</span></span> <span data-ttu-id="31784-2509">在每個案例中，<xref:System.Windows.Forms.Control.Layout>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2509">In each case, the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span>  
  
 <span data-ttu-id="31784-2510">這是完整的範例。</span><span class="sxs-lookup"><span data-stu-id="31784-2510">This is a complete example.</span></span> <span data-ttu-id="31784-2511">要執行此範例中，貼上下列程式碼空白表單中。</span><span class="sxs-lookup"><span data-stu-id="31784-2511">To run the example, paste the following code in a blank form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="PerformLayout">
      <MemberSignature Language="C#" Value="public void PerformLayout (System.Windows.Forms.Control affectedControl, string affectedProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformLayout(class System.Windows.Forms.Control affectedControl, string affectedProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformLayout (affectedControl As Control, affectedProperty As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformLayout(System::Windows::Forms::Control ^ affectedControl, System::String ^ affectedProperty);" />
      <MemberSignature Language="F#" Value="member this.PerformLayout : System.Windows.Forms.Control * string -&gt; unit" Usage="control.PerformLayout (affectedControl, affectedProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="affectedControl" Type="System.Windows.Forms.Control" />
        <Parameter Name="affectedProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="affectedControl"><span data-ttu-id="31784-2512"><see cref="T:System.Windows.Forms.Control" />，表示最新變更的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2512">A <see cref="T:System.Windows.Forms.Control" /> that represents the most recently changed control.</span></span></param>
        <param name="affectedProperty"><span data-ttu-id="31784-2513">控制項上最新變更之屬性的名稱。</span><span class="sxs-lookup"><span data-stu-id="31784-2513">The name of the most recently changed property on the control.</span></span></param>
        <summary><span data-ttu-id="31784-2514">強制控制項將配置邏輯套用至其所有子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2514">Forces the control to apply layout logic to all its child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2515">如果<xref:System.Windows.Forms.Control.SuspendLayout%2A>方法呼叫之前先呼叫<xref:System.Windows.Forms.Control.PerformLayout%2A>方法，<xref:System.Windows.Forms.Control.Layout>隱藏的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2515">If the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method was called before calling the <xref:System.Windows.Forms.Control.PerformLayout%2A> method, the <xref:System.Windows.Forms.Control.Layout> event is suppressed.</span></span>  
  
 <span data-ttu-id="31784-2516">`affectedControl`和`affectedProperty`參數都設定為`null`。</span><span class="sxs-lookup"><span data-stu-id="31784-2516">The `affectedControl` and `affectedProperty` parameters can both be set to `null`.</span></span> <span data-ttu-id="31784-2517">執行動作，原因<xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A>和<xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A>屬性<xref:System.Windows.Forms.LayoutEventArgs>建立設為`null`。</span><span class="sxs-lookup"><span data-stu-id="31784-2517">Doing so causes the <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> and <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> properties of the <xref:System.Windows.Forms.LayoutEventArgs> created to be set to `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2518">下列程式碼範例會示範如何使用 <xref:System.Windows.Forms.Control.PerformLayout%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2518">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.PerformLayout%2A> method.</span></span> <span data-ttu-id="31784-2519">它也會示範方式<xref:System.Windows.Forms.Control.Layout>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2519">It also demonstrates ways in which the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span> <span data-ttu-id="31784-2520">在此範例中，`Click`事件處理常式`Button1`明確呼叫<xref:System.Windows.Forms.Control.PerformLayout%2A>。</span><span class="sxs-lookup"><span data-stu-id="31784-2520">In this example, the `Click` event handler for `Button1` explicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="31784-2521">`Click`事件處理常式`Button2`隱含地呼叫<xref:System.Windows.Forms.Control.PerformLayout%2A>。</span><span class="sxs-lookup"><span data-stu-id="31784-2521">The `Click` event handler for `Button2` implicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="31784-2522"><xref:System.Windows.Forms.Control.PerformLayout%2A> 也稱為當表單載入時。</span><span class="sxs-lookup"><span data-stu-id="31784-2522"><xref:System.Windows.Forms.Control.PerformLayout%2A> is also called when the form is loaded.</span></span> <span data-ttu-id="31784-2523">`Button3` 傳回的控制項來載入時的狀態。</span><span class="sxs-lookup"><span data-stu-id="31784-2523">`Button3` returns the control to the state it was in when loaded.</span></span> <span data-ttu-id="31784-2524">在每個案例中，<xref:System.Windows.Forms.Control.Layout>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2524">In each case, the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span>  
  
 <span data-ttu-id="31784-2525">這是完整的範例。</span><span class="sxs-lookup"><span data-stu-id="31784-2525">This is a complete example.</span></span> <span data-ttu-id="31784-2526">要執行此範例中，貼上下列程式碼空白表單中。</span><span class="sxs-lookup"><span data-stu-id="31784-2526">To run the example, paste the following code in a blank form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="PointToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Point PointToClient (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point PointToClient(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function PointToClient (p As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Point PointToClient(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="member this.PointToClient : System.Drawing.Point -&gt; System.Drawing.Point" Usage="control.PointToClient p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p"><span data-ttu-id="31784-2527">要轉換的螢幕座標 <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2527">The screen coordinate <see cref="T:System.Drawing.Point" /> to convert.</span></span></param>
        <summary><span data-ttu-id="31784-2528">將指定的螢幕點的位置計算為工作區座標 (Client Coordinate)。</span><span class="sxs-lookup"><span data-stu-id="31784-2528">Computes the location of the specified screen point into client coordinates.</span></span></summary>
        <returns><span data-ttu-id="31784-2529"><see cref="T:System.Drawing.Point" />，以工作區座標表示的轉換後 <see cref="T:System.Drawing.Point" /> (<paramref name="p" />)。</span><span class="sxs-lookup"><span data-stu-id="31784-2529">A <see cref="T:System.Drawing.Point" /> that represents the converted <see cref="T:System.Drawing.Point" />, <paramref name="p" />, in client coordinates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="31784-2530">下列程式碼範例會啟用卸除使用者將是影像或影像檔案拖曳至表單，並將其顯示在其上的點。</span><span class="sxs-lookup"><span data-stu-id="31784-2530">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</span></span> <span data-ttu-id="31784-2531"><xref:System.Windows.Forms.Control.OnPaint%2A>表單繪製每次重新繪製影像會覆寫方法; 否則為映像就只會一直保存到下一步 重新繪製。</span><span class="sxs-lookup"><span data-stu-id="31784-2531">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="31784-2532"><xref:System.Windows.Forms.Control.DragEnter>事件處理方法判斷被拖曳至表單的資料類型，並提供適當的回應。</span><span class="sxs-lookup"><span data-stu-id="31784-2532">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="31784-2533"><xref:System.Windows.Forms.Control.DragDrop>事件處理方法會顯示在表單中，影像如果<xref:System.Drawing.Image>可以從資料建立。</span><span class="sxs-lookup"><span data-stu-id="31784-2533">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="31784-2534">因為<xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType>值螢幕座標，這個範例會使用<xref:System.Windows.Forms.Control.PointToClient%2A>方法，將它們轉換為用戶端座標。</span><span class="sxs-lookup"><span data-stu-id="31784-2534">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="PointToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Point PointToScreen (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point PointToScreen(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function PointToScreen (p As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Point PointToScreen(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="member this.PointToScreen : System.Drawing.Point -&gt; System.Drawing.Point" Usage="control.PointToScreen p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p"><span data-ttu-id="31784-2535">要轉換的工作區座標 <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2535">The client coordinate <see cref="T:System.Drawing.Point" /> to convert.</span></span></param>
        <summary><span data-ttu-id="31784-2536">將指定的工作區點的位置計算為螢幕座標。</span><span class="sxs-lookup"><span data-stu-id="31784-2536">Computes the location of the specified client point into screen coordinates.</span></span></summary>
        <returns><span data-ttu-id="31784-2537"><see cref="T:System.Drawing.Point" />，以螢幕座標表示的轉換後 <see cref="T:System.Drawing.Point" /> (<paramref name="p" />)。</span><span class="sxs-lookup"><span data-stu-id="31784-2537">A <see cref="T:System.Drawing.Point" /> that represents the converted <see cref="T:System.Drawing.Point" />, <paramref name="p" />, in screen coordinates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="31784-2538">下列程式碼範例示範如何使用<xref:System.Windows.Forms.Control.BackColor%2A>， <xref:System.Windows.Forms.Control.RectangleToScreen%2A>， <xref:System.Windows.Forms.Control.PointToScreen%2A>， <xref:System.Windows.Forms.Control.MouseButtons%2A>， <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>，和<xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType>成員。</span><span class="sxs-lookup"><span data-stu-id="31784-2538">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> members.</span></span> <span data-ttu-id="31784-2539">若要執行此範例，下列的程式碼貼在名為 Form1 表單包含多個控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2539">To run the example, paste the following code in a form called Form1 containing several controls.</span></span> <span data-ttu-id="31784-2540">這個範例需要<xref:System.Windows.Forms.Control.MouseDown>， <xref:System.Windows.Forms.Control.MouseMove>，和<xref:System.Windows.Forms.Control.MouseUp>事件都已連接的範例中定義的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2540">This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="PreferredSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size PreferredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size PreferredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.PreferredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size PreferredSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.PreferredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2541">取得能夠容納控制項的矩形區域的大小。</span><span class="sxs-lookup"><span data-stu-id="31784-2541">Gets the size of a rectangular area into which the control can fit.</span></span></summary>
        <value><span data-ttu-id="31784-2542"><see cref="T:System.Drawing.Size" />，包含高度和寬度 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-2542">A <see cref="T:System.Drawing.Size" /> containing the height and width, in pixels.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreProcessControlMessage">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.PreProcessControlState PreProcessControlMessage (ref System.Windows.Forms.Message msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.PreProcessControlState PreProcessControlMessage(valuetype System.Windows.Forms.Message&amp; msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PreProcessControlMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function PreProcessControlMessage (ByRef msg As Message) As PreProcessControlState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::PreProcessControlState PreProcessControlMessage(System::Windows::Forms::Message % msg);" />
      <MemberSignature Language="F#" Value="member this.PreProcessControlMessage :  -&gt; System.Windows.Forms.PreProcessControlState" Usage="control.PreProcessControlMessage msg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PreProcessControlState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="msg"><span data-ttu-id="31784-2543">
          <see cref="T:System.Windows.Forms.Message" />，表示要處理的訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2543">A <see cref="T:System.Windows.Forms.Message" /> that represents the message to process.</span></span></param>
        <summary><span data-ttu-id="31784-2544">先於訊息迴圈中前置處理鍵盤或輸入訊息後，再分派這些訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2544">Preprocesses keyboard or input messages within the message loop before they are dispatched.</span></span></summary>
        <returns><span data-ttu-id="31784-2545">其中一個 <see cref="T:System.Windows.Forms.PreProcessControlState" /> 值，取決於 <see cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" /> 是 <see langword="true" /> 或 <see langword="false" />，以及 <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" /> 或 <see cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" /> 是 <see langword="true" /> 或 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2545">One of the <see cref="T:System.Windows.Forms.PreProcessControlState" /> values, depending on whether <see cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" /> is <see langword="true" /> or <see langword="false" /> and whether <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" /> or <see cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" /> are <see langword="true" /> or <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreProcessMessage">
      <MemberSignature Language="C#" Value="public virtual bool PreProcessMessage (ref System.Windows.Forms.Message msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PreProcessMessage(valuetype System.Windows.Forms.Message&amp; msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PreProcessMessage (ByRef msg As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool PreProcessMessage(System::Windows::Forms::Message % msg);" />
      <MemberSignature Language="F#" Value="abstract member PreProcessMessage :  -&gt; bool&#xA;override this.PreProcessMessage :  -&gt; bool" Usage="control.PreProcessMessage msg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="msg"><span data-ttu-id="31784-2546">由參考傳遞的 <see cref="T:System.Windows.Forms.Message" />，表示要處理的訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2546">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the message to process.</span></span> <span data-ttu-id="31784-2547">可能的值包括 WM_KEYDOWN、WM_SYSKEYDOWN、WM_CHAR 和 WM_SYSCHAR。</span><span class="sxs-lookup"><span data-stu-id="31784-2547">The possible values are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.</span></span></param>
        <summary><span data-ttu-id="31784-2548">先於訊息迴圈中前置處理鍵盤或輸入訊息後，再分派這些訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2548">Preprocesses keyboard or input messages within the message loop before they are dispatched.</span></span></summary>
        <returns><span data-ttu-id="31784-2549">如果控制項已處理訊息，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2549"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2550"><xref:System.Windows.Forms.Control.PreProcessMessage%2A> 會呼叫預先處理輸入的訊息，再分派這些應用程式的訊息迴圈。</span><span class="sxs-lookup"><span data-stu-id="31784-2550"><xref:System.Windows.Forms.Control.PreProcessMessage%2A> is called by the application's message loop to preprocess input messages before they are dispatched.</span></span> <span data-ttu-id="31784-2551">可能值`msg`參數是 WM_KEYDOWN、 WM_SYSKEYDOWN、 WM_CHAR 和 WM_SYSCHAR。</span><span class="sxs-lookup"><span data-stu-id="31784-2551">Possible values for the `msg` parameter are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.</span></span>  
  
 <span data-ttu-id="31784-2552">在覆寫<xref:System.Windows.Forms.Control.PreProcessMessage%2A>，控制項應該傳回`true`指出它已處理訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2552">When overriding <xref:System.Windows.Forms.Control.PreProcessMessage%2A>, a control should return `true` to indicate that it has processed the message.</span></span> <span data-ttu-id="31784-2553">控制項的結果不會處理的訊息`base.PreProcessMessage`應該傳回。</span><span class="sxs-lookup"><span data-stu-id="31784-2553">For messages that are not processed by the control, the result of `base.PreProcessMessage` should be returned.</span></span> <span data-ttu-id="31784-2554">控制項將通常會覆寫其中一個更具特製化的方法如<xref:System.Windows.Forms.Control.IsInputChar%2A>， <xref:System.Windows.Forms.Control.IsInputKey%2A>， <xref:System.Windows.Forms.Control.ProcessCmdKey%2A>， <xref:System.Windows.Forms.Control.ProcessDialogChar%2A>，或<xref:System.Windows.Forms.Control.ProcessDialogKey%2A>而不是覆寫<xref:System.Windows.Forms.Control.PreProcessMessage%2A>。</span><span class="sxs-lookup"><span data-stu-id="31784-2554">Controls will typically override one of the more specialized methods such as <xref:System.Windows.Forms.Control.IsInputChar%2A>, <xref:System.Windows.Forms.Control.IsInputKey%2A>, <xref:System.Windows.Forms.Control.ProcessCmdKey%2A>, <xref:System.Windows.Forms.Control.ProcessDialogChar%2A>, or <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> instead of overriding <xref:System.Windows.Forms.Control.PreProcessMessage%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-2555">立即呼叫者，才能呼叫此方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-2555">for all windows for the immediate caller to call this method.</span></span> <span data-ttu-id="31784-2556">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2556">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As PreviewKeyDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PreviewKeyDownEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PreviewKeyDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2557">發生於焦點位於這個控制項上時並按下鍵盤按鍵的 <see cref="E:System.Windows.Forms.Control.KeyDown" /> 事件之前。</span><span class="sxs-lookup"><span data-stu-id="31784-2557">Occurs before the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event when a key is pressed while focus is on this control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2558">某些按鍵，例如索引標籤、 RETURN、 esc 鍵和方向鍵，某些控制項通常會忽略，因為它們不會被視為輸入的按鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2558">Some key presses, such as the TAB, RETURN, ESC, and arrow keys, are typically ignored by some controls because they are not considered input key presses.</span></span> <span data-ttu-id="31784-2559">例如，根據預設，<xref:System.Windows.Controls.Button>忽略的箭頭按鍵的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2559">For example, by default, a <xref:System.Windows.Controls.Button> control ignores the arrow keys.</span></span> <span data-ttu-id="31784-2560">按下方向鍵時，通常會導致焦點移到上一個或下一個控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2560">Pressing the arrow keys typically causes the focus to move to the previous or next control.</span></span> <span data-ttu-id="31784-2561">使用方向鍵來瀏覽鍵並按下這些機碼通常不會引發視為<xref:System.Windows.Forms.Control.KeyDown>事件<xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="31784-2561">The arrow keys are considered navigation keys and pressing these keys typically do not raise the <xref:System.Windows.Forms.Control.KeyDown> event for a <xref:System.Windows.Controls.Button>.</span></span> <span data-ttu-id="31784-2562">不過，按箭號的索引鍵<xref:System.Windows.Controls.Button>未引發<xref:System.Windows.Forms.Control.PreviewKeyDown>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2562">However, pressing the arrow keys for a <xref:System.Windows.Controls.Button> does raise the <xref:System.Windows.Forms.Control.PreviewKeyDown> event.</span></span> <span data-ttu-id="31784-2563">藉由處理<xref:System.Windows.Forms.Control.PreviewKeyDown>事件<xref:System.Windows.Controls.Button>和設定<xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A>屬性`true`，您可以提高<xref:System.Windows.Forms.Control.KeyDown>事件時按下方向鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2563">By handling the <xref:System.Windows.Forms.Control.PreviewKeyDown> event for a <xref:System.Windows.Controls.Button> and setting the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`, you can raise the <xref:System.Windows.Forms.Control.KeyDown> event when the arrow keys are pressed.</span></span> <span data-ttu-id="31784-2564">不過，如果您要處理的箭頭按鍵，將不會再將焦點移至前一個或下一個控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2564">However, if you handle the arrow keys, the focus will no longer move to the previous or next control.</span></span>  
  
 <span data-ttu-id="31784-2565">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2565">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2566">下列程式碼範例示範<xref:System.Windows.Forms.Button>包含<xref:System.Windows.Forms.ContextMenuStrip>。</span><span class="sxs-lookup"><span data-stu-id="31784-2566">The following code example demonstrates a <xref:System.Windows.Forms.Button> that includes a <xref:System.Windows.Forms.ContextMenuStrip>.</span></span> <span data-ttu-id="31784-2567">當<xref:System.Windows.Forms.Button>擁有焦點且按向上鍵或向下鍵，<xref:System.Windows.Forms.ContextMenuStrip>隨即出現。</span><span class="sxs-lookup"><span data-stu-id="31784-2567">When the <xref:System.Windows.Forms.Button> has the focus and you press the UP ARROW or DOWN ARROW keys, the <xref:System.Windows.Forms.ContextMenuStrip> appears.</span></span> <span data-ttu-id="31784-2568"><xref:System.Windows.Forms.Control.PreviewKeyDown>按下向上或向下鍵時偵測到事件處理常式，並設定<xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A>屬性`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-2568">The <xref:System.Windows.Forms.Control.PreviewKeyDown> event handler detects when the UP ARROW or DOWN ARROW keys are pressed and sets the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`.</span></span> <span data-ttu-id="31784-2569">這會引發<xref:System.Windows.Forms.Control.KeyDown>事件，以便您可以顯示<xref:System.Windows.Forms.ContextMenuStrip>。</span><span class="sxs-lookup"><span data-stu-id="31784-2569">This raises the <xref:System.Windows.Forms.Control.KeyDown> event so that you can display the <xref:System.Windows.Forms.ContextMenuStrip>.</span></span> <span data-ttu-id="31784-2570">您不應該將任何邏輯放在<xref:System.Windows.Forms.Control.PreviewKeyDown>事件處理常式，而不是要設定<xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2570">You should not put any logic in the <xref:System.Windows.Forms.Control.PreviewKeyDown> event handler, other than to set the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property.</span></span> <span data-ttu-id="31784-2571">相反地，您應該將您的邏輯放在<xref:System.Windows.Forms.Control.KeyDown>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2571">Instead, you should put your logic in the <xref:System.Windows.Forms.Control.KeyDown> event handler.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.PreviewKeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.previewkeydown/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PreviewKeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.previewkeydown/vb/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool&#xA;override this.ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool" Usage="control.ProcessCmdKey (msg, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg"><span data-ttu-id="31784-2572">由參考所傳遞的 <see cref="T:System.Windows.Forms.Message" />，代表要處理的視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2572">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <param name="keyData"><span data-ttu-id="31784-2573">其中一個 <see cref="T:System.Windows.Forms.Keys" /> 值，表示要處理的按鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2573">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</span></span></param>
        <summary><span data-ttu-id="31784-2574">處理命令按鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2574">Processes a command key.</span></span></summary>
        <returns><span data-ttu-id="31784-2575">如果字元已由控制項處理，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2575"><see langword="true" /> if the character was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2576">呼叫這個方法是在處理命令的索引鍵前置處理的訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2576">This method is called during message preprocessing to handle command keys.</span></span> <span data-ttu-id="31784-2577">命令索引鍵是一律優先於一般輸入索引鍵的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2577">Command keys are keys that always take precedence over regular input keys.</span></span> <span data-ttu-id="31784-2578">命令索引鍵的範例包括加速器及功能表快速鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2578">Examples of command keys include accelerators and menu shortcuts.</span></span> <span data-ttu-id="31784-2579">此方法必須傳回`true`指出它已處理命令按鍵，或`false`表示索引鍵不命令按鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2579">The method must return `true` to indicate that it has processed the command key, or `false` to indicate that the key is not a command key.</span></span> <span data-ttu-id="31784-2580">當控制項裝載在 Windows Forms 應用程式，或為 ActiveX 控制項時，只會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2580">This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</span></span>  
  
 <span data-ttu-id="31784-2581"><xref:System.Windows.Forms.Control.ProcessCmdKey%2A>方法會先判斷控制項是否有<xref:System.Windows.Forms.ContextMenu>，若是如此，可讓和<xref:System.Windows.Forms.ContextMenu>處理命令按鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2581">The <xref:System.Windows.Forms.Control.ProcessCmdKey%2A> method first determines whether the control has a <xref:System.Windows.Forms.ContextMenu>, and if so, enables the <xref:System.Windows.Forms.ContextMenu> to process the command key.</span></span> <span data-ttu-id="31784-2582">如果命令按鍵不功能表快顯控制項具有父代，金鑰會傳遞給父<xref:System.Windows.Forms.Control.ProcessCmdKey%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2582">If the command key is not a menu shortcut and the control has a parent, the key is passed to the parent's <xref:System.Windows.Forms.Control.ProcessCmdKey%2A> method.</span></span> <span data-ttu-id="31784-2583">最後的結果會是索引鍵 「 昇 」 在控制項階層架構該命令。</span><span class="sxs-lookup"><span data-stu-id="31784-2583">The net effect is that command keys are "bubbled" up the control hierarchy.</span></span> <span data-ttu-id="31784-2584">除了使用者按下索引鍵，索引鍵的資料也會指出它，如果有的話，在按下輔助按鍵做為索引鍵相同的時間。</span><span class="sxs-lookup"><span data-stu-id="31784-2584">In addition to the key the user pressed, the key data also indicates which, if any, modifier keys were pressed at the same time as the key.</span></span> <span data-ttu-id="31784-2585">輔助按鍵包含 SHIFT、 CTRL 和 ALT 鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2585">Modifier keys include the SHIFT, CTRL, and ALT keys.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="31784-2586">直接呼叫端和繼承的類別呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2586">for the immediate caller and inheriting classes to call this method.</span></span> <span data-ttu-id="31784-2587">關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2587">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2588"><para>在覆寫<see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />方法在衍生類別中的，控制項應該傳回<see langword="true" />以表示它具有處理金鑰。針對該控制項，呼叫基底類別的結果不會處理識別碼<see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />方法應該傳回。控制項很少，如果有的話，必須覆寫這個方法。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2588"><para>When overriding the <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key. For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> method should be returned. Controls will seldom, if ever, need to override this method.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogChar">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDialogChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDialogChar(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessDialogChar (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessDialogChar(char charCode);" />
      <MemberSignature Language="F#" Value="abstract member ProcessDialogChar : char -&gt; bool&#xA;override this.ProcessDialogChar : char -&gt; bool" Usage="control.ProcessDialogChar charCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="31784-2589">要處理的字元。</span><span class="sxs-lookup"><span data-stu-id="31784-2589">The character to process.</span></span></param>
        <summary><span data-ttu-id="31784-2590">處理對話方塊字元。</span><span class="sxs-lookup"><span data-stu-id="31784-2590">Processes a dialog character.</span></span></summary>
        <returns><span data-ttu-id="31784-2591">如果字元已由控制項處理，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2591"><see langword="true" /> if the character was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2592">訊息以處理對話方塊字元，例如控制項的助憶鍵前置處理期間，會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2592">This method is called during message preprocessing to handle dialog characters, such as control mnemonics.</span></span> <span data-ttu-id="31784-2593">只有當呼叫這個方法<xref:System.Windows.Forms.Control.IsInputChar%2A>方法表示控制項未處理的字元。</span><span class="sxs-lookup"><span data-stu-id="31784-2593">This method is called only if the <xref:System.Windows.Forms.Control.IsInputChar%2A> method indicates that the control is not processing the character.</span></span> <span data-ttu-id="31784-2594"><xref:System.Windows.Forms.Control.ProcessDialogChar%2A>方法只是傳送至父代的字元<xref:System.Windows.Forms.Control.ProcessDialogChar%2A>方法或傳回`false`如果控制項沒有父代。</span><span class="sxs-lookup"><span data-stu-id="31784-2594">The <xref:System.Windows.Forms.Control.ProcessDialogChar%2A> method simply sends the character to the parent's <xref:System.Windows.Forms.Control.ProcessDialogChar%2A> method, or returns `false` if the control has no parent.</span></span> <span data-ttu-id="31784-2595"><xref:System.Windows.Forms.Form>類別會覆寫此方法以執行實際處理對話方塊字元。</span><span class="sxs-lookup"><span data-stu-id="31784-2595">The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog characters.</span></span> <span data-ttu-id="31784-2596">當控制項裝載在 Windows Forms 應用程式，或為 ActiveX 控制項時，只會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2596">This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-2597">繼承類別呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-2597">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="31784-2598">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2598">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2599"><para>在覆寫<see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />方法在衍生類別中的，控制項應該傳回<see langword="true" />指出它已處理的字元。字元的控制項，呼叫基底類別的結果不會處理<see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />方法應該傳回。控制項很少，如果有的話，必須覆寫這個方法。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2599"><para>When overriding the <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the character. For characters that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method should be returned. Controls will seldom, if ever, need to override this method.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDialogKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessDialogKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessDialogKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member ProcessDialogKey : System.Windows.Forms.Keys -&gt; bool&#xA;override this.ProcessDialogKey : System.Windows.Forms.Keys -&gt; bool" Usage="control.ProcessDialogKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><span data-ttu-id="31784-2600">其中一個 <see cref="T:System.Windows.Forms.Keys" /> 值，表示要處理的按鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2600">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</span></span></param>
        <summary><span data-ttu-id="31784-2601">處理對話方塊按鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2601">Processes a dialog key.</span></span></summary>
        <returns><span data-ttu-id="31784-2602">如果按鍵已由控制項處理，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2602"><see langword="true" /> if the key was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2603">呼叫這個方法是在處理對話方塊字元，例如 TAB、 RETURN、 esc 鍵，和方向鍵前置處理的訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2603">This method is called during message preprocessing to handle dialog characters, such as TAB, RETURN, ESC, and arrow keys.</span></span> <span data-ttu-id="31784-2604">只有當呼叫這個方法<xref:System.Windows.Forms.Control.IsInputKey%2A>方法表示控制項未處理的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2604">This method is called only if the <xref:System.Windows.Forms.Control.IsInputKey%2A> method indicates that the control is not processing the key.</span></span> <span data-ttu-id="31784-2605"><xref:System.Windows.Forms.Control.ProcessDialogKey%2A>只傳送至父代的字元<xref:System.Windows.Forms.Control.ProcessDialogKey%2A>方法或傳回`false`如果控制項沒有父代。</span><span class="sxs-lookup"><span data-stu-id="31784-2605">The <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> simply sends the character to the parent's <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> method, or returns `false` if the control has no parent.</span></span> <span data-ttu-id="31784-2606"><xref:System.Windows.Forms.Form>類別會覆寫此方法以執行實際處理對話方塊按鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2606">The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog keys.</span></span> <span data-ttu-id="31784-2607">當控制項裝載在 Windows Forms 應用程式，或為 ActiveX 控制項時，只會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2607">This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-2608">繼承類別呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-2608">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="31784-2609">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2609">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2610"><para>在覆寫<see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" />方法在衍生類別中的，控制項應該傳回<see langword="true" />以表示它具有處理金鑰。針對該控制項，呼叫基底類別的結果不會處理識別碼<see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />方法應該傳回。控制項很少，如果有的話，必須覆寫這個方法。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2610"><para>When overriding the <see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key. For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method should be returned. Controls will seldom, if ever, need to override this method.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyEventArgs">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessKeyEventArgs (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessKeyEventArgs(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessKeyEventArgs (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessKeyEventArgs(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member ProcessKeyEventArgs :  -&gt; bool&#xA;override this.ProcessKeyEventArgs :  -&gt; bool" Usage="control.ProcessKeyEventArgs m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="31784-2611">由參考所傳遞的 <see cref="T:System.Windows.Forms.Message" />，代表要處理的視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2611">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <summary><span data-ttu-id="31784-2612">處理按鍵訊息，並產生適當的控制項事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2612">Processes a key message and generates the appropriate control events.</span></span></summary>
        <returns><span data-ttu-id="31784-2613">如果控制項已處理訊息，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2613"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2614">當控制項收到鍵盤訊息，會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2614">This method is called when a control receives a keyboard message.</span></span> <span data-ttu-id="31784-2615">方法是負責產生適當的索引鍵事件訊息，藉由呼叫<xref:System.Windows.Forms.Control.OnKeyPress%2A>， <xref:System.Windows.Forms.Control.OnKeyDown%2A>，或<xref:System.Windows.Forms.Control.OnKeyUp%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2615">The method is responsible for generating the appropriate key events for the message by calling the <xref:System.Windows.Forms.Control.OnKeyPress%2A>, <xref:System.Windows.Forms.Control.OnKeyDown%2A>, or <xref:System.Windows.Forms.Control.OnKeyUp%2A> methods.</span></span> <span data-ttu-id="31784-2616">`m`參數包含必須處理的視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2616">The `m` parameter contains the window message that must be processed.</span></span> <span data-ttu-id="31784-2617">可能值<xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>屬性是 WM_CHAR、 WM_KEYDOWN、 WM_SYSKEYDOWN、 WM_KEYUP、 WM_SYSKEYUP 和 WM_IME_CHAR。</span><span class="sxs-lookup"><span data-stu-id="31784-2617">Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, WM_SYSKEYUP, and WM_IME_CHAR.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-2618">繼承類別呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-2618">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="31784-2619">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2619">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="31784-2620">立即呼叫者呼叫 unmanaged 程式碼。</span><span class="sxs-lookup"><span data-stu-id="31784-2620">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="31784-2621">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="31784-2621">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2622"><para>在覆寫<see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" />方法在衍生類別中的，控制項應該傳回<see langword="true" />以表示它具有處理金鑰。針對該控制項，呼叫基底類別的結果不會處理識別碼<see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" />方法應該傳回。控制項很少，如果有的話，必須覆寫這個方法。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2622"><para>When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key. For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> method should be returned. Controls will seldom, if ever, need to override this method.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyMessage">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessKeyMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessKeyMessage(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ProcessKeyMessage (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessKeyMessage(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member ProcessKeyMessage :  -&gt; bool&#xA;override this.ProcessKeyMessage :  -&gt; bool" Usage="control.ProcessKeyMessage m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="31784-2623">由參考所傳遞的 <see cref="T:System.Windows.Forms.Message" />，代表要處理的視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2623">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <summary><span data-ttu-id="31784-2624">處理鍵盤訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2624">Processes a keyboard message.</span></span></summary>
        <returns><span data-ttu-id="31784-2625">如果控制項已處理訊息，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2625"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2626">當控制項收到鍵盤訊息，會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2626">This method is called when a control receives a keyboard message.</span></span> <span data-ttu-id="31784-2627">此方法會先判斷控制項是否具有父代。因此，它會呼叫父如果<xref:System.Windows.Forms.Control.ProcessKeyPreview%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2627">The method first determines whether the control has a parent; if so, it calls the parent's <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method.</span></span> <span data-ttu-id="31784-2628">如果父代的<xref:System.Windows.Forms.Control.ProcessKeyPreview%2A>方法不會處理訊息則<xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A>方法呼叫來產生適當的鍵盤事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2628">If the parent's <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method does not process the message then the <xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A> method is called to generate the appropriate keyboard events.</span></span> <span data-ttu-id="31784-2629">`m`參數包含必須處理的視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2629">The `m` parameter contains the window message that must be processed.</span></span> <span data-ttu-id="31784-2630">可能值<xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>屬性是 WM_CHAR、 WM_KEYDOWN、 WM_SYSKEYDOWN、 WM_KEYUP 和 WM_SYSKEYUP。</span><span class="sxs-lookup"><span data-stu-id="31784-2630">Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-2631">繼承類別呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-2631">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="31784-2632">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2632">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2633"><para>在覆寫<see cref="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" />方法中，控制項應該傳回<see langword="true" />以表示它具有處理金鑰。控制項的基底類別的結果不會處理的按鍵<see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" />應該傳回。控制項很少，如果有的話，必須覆寫這個方法。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2633"><para>When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" /> method, a control should return <see langword="true" /> to indicate that it has processed the key. For keys that are not processed by the control, the result of the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> should be returned. Controls will seldom, if ever, need to override this method.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyPreview">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessKeyPreview (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessKeyPreview(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessKeyPreview (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessKeyPreview(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member ProcessKeyPreview :  -&gt; bool&#xA;override this.ProcessKeyPreview :  -&gt; bool" Usage="control.ProcessKeyPreview m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="31784-2634">由參考所傳遞的 <see cref="T:System.Windows.Forms.Message" />，代表要處理的視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2634">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <summary><span data-ttu-id="31784-2635">預覽鍵盤訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2635">Previews a keyboard message.</span></span></summary>
        <returns><span data-ttu-id="31784-2636">如果控制項已處理訊息，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2636"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2637">這個方法稱為由子控制項的子控制項收到鍵盤訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2637">This method is called by a child control when the child control receives a keyboard message.</span></span> <span data-ttu-id="31784-2638">子控制項產生訊息的任何鍵盤事件之前呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2638">The child control calls this method before generating any keyboard events for the message.</span></span> <span data-ttu-id="31784-2639">如果此方法傳回`true`，子控制項處理的訊息會考量並不會產生任何鍵盤事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2639">If this method returns `true`, the child control considers the message processed and does not generate any keyboard events.</span></span> <span data-ttu-id="31784-2640">`m`參數包含要預覽的視窗訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2640">The `m` parameter contains the window message to preview.</span></span> <span data-ttu-id="31784-2641">可能值<xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>屬性是 WM_CHAR、 WM_KEYDOWN、 WM_SYSKEYDOWN、 WM_KEYUP 和 WM_SYSKEYUP。</span><span class="sxs-lookup"><span data-stu-id="31784-2641">Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.</span></span> <span data-ttu-id="31784-2642"><xref:System.Windows.Forms.Control.ProcessKeyPreview%2A>方法只是傳送至父代的字元<xref:System.Windows.Forms.Control.ProcessKeyPreview%2A>方法或傳回`false`如果控制項沒有父代。</span><span class="sxs-lookup"><span data-stu-id="31784-2642">The <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method simply sends the character to the parent's <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method, or returns `false` if the control has no parent.</span></span> <span data-ttu-id="31784-2643"><xref:System.Windows.Forms.Form>類別會覆寫此方法以執行實際處理對話方塊按鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2643">The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog keys.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-2644">繼承類別呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-2644">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="31784-2645">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2645">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="31784-2646">立即呼叫者呼叫 unmanaged 程式碼。</span><span class="sxs-lookup"><span data-stu-id="31784-2646">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="31784-2647">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="31784-2647">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2648"><para>在覆寫<see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" />方法在衍生類別中的，控制項應該傳回<see langword="true" />以表示它具有處理金鑰。針對該控制項，呼叫基底類別的結果不會處理識別碼<see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" />方法應該傳回。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2648"><para>When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key. For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /> method should be returned.</para></span></span></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="ProcessMnemonic">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessMnemonic (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessMnemonic(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ProcessMnemonic (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessMnemonic(char charCode);" />
      <MemberSignature Language="F#" Value="abstract member ProcessMnemonic : char -&gt; bool&#xA;override this.ProcessMnemonic : char -&gt; bool" Usage="control.ProcessMnemonic charCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="31784-2649">要處理的字元。</span><span class="sxs-lookup"><span data-stu-id="31784-2649">The character to process.</span></span></param>
        <summary><span data-ttu-id="31784-2650">處理助憶鍵字元。</span><span class="sxs-lookup"><span data-stu-id="31784-2650">Processes a mnemonic character.</span></span></summary>
        <returns><span data-ttu-id="31784-2651">如果控制項已將字元當成助憶鍵處理，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2651"><see langword="true" /> if the character was processed as a mnemonic by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2652">這個方法被呼叫要讓控制項有機會處理助憶鍵字元。</span><span class="sxs-lookup"><span data-stu-id="31784-2652">This method is called to give a control the opportunity to process a mnemonic character.</span></span> <span data-ttu-id="31784-2653">這個方法應判斷控制項是否處於處理助憶鍵的狀態，而且是否指定的字元是否表示助憶鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2653">The method should determine whether the control is in a state to process mnemonics and if whether the given character represents a mnemonic.</span></span> <span data-ttu-id="31784-2654">如果因此，此方法應該執行的助憶鍵和傳回相關聯的動作`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-2654">If so, the method should perform the action associated with the mnemonic and return `true`.</span></span> <span data-ttu-id="31784-2655">如果不是，這個方法應傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="31784-2655">If not, the method should return `false`.</span></span> <span data-ttu-id="31784-2656">實作這個方法通常會使用<xref:System.Windows.Forms.Control.IsMnemonic%2A>方法來判斷指定的字元是否符合控制項的文字中的助憶鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2656">Implementations of this method often use the <xref:System.Windows.Forms.Control.IsMnemonic%2A> method to determine whether the given character matches a mnemonic in the control's text.</span></span>  
  
 <span data-ttu-id="31784-2657">例如: </span><span class="sxs-lookup"><span data-stu-id="31784-2657">For example:</span></span>  
  
```csharp  
if (CanSelect && IsMnemonic(charCode, MyControl.Text) {  
      // Perform action associated with mnemonic.  
       }  
```  
  
 <span data-ttu-id="31784-2658">預設實作<xref:System.Windows.Forms.Control.ProcessMnemonic%2A>方法只會傳回`false`來表示控制項具有沒有助憶鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2658">This default implementation of the <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> method simply returns `false` to indicate that the control has no mnemonic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2659">下列程式碼範例示範會覆寫 按鈕類別的延伸<xref:System.Windows.Forms.Control.ProcessMnemonic%2A>至展現自訂行為的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2659">The following code example demonstrates an extension of the button class that overrides the <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> method to exhibit custom behavior.</span></span> <span data-ttu-id="31784-2660">此範例也示範如何使用<xref:System.Windows.Forms.Control.CanSelect%2A>和<xref:System.Windows.Forms.Control.IsMnemonic%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2660">The example also demonstrates the use of the <xref:System.Windows.Forms.Control.CanSelect%2A> and <xref:System.Windows.Forms.Control.IsMnemonic%2A> properties.</span></span> <span data-ttu-id="31784-2661">若要執行此範例中貼上下列程式碼的表單類別之後，在相同的檔案。</span><span class="sxs-lookup"><span data-stu-id="31784-2661">To run this example paste the following code after a form class, in the same file.</span></span> <span data-ttu-id="31784-2662">加入按鈕的型別`MnemonicButton`至表單。</span><span class="sxs-lookup"><span data-stu-id="31784-2662">Add a button of type `MnemonicButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-2663">繼承類別呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-2663">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="31784-2664">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2664">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)" />
        <altmember cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="ProductName">
      <MemberSignature Language="C#" Value="public string ProductName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProductName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ProductName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProductName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProductName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProductName : string" Usage="System.Windows.Forms.Control.ProductName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2665">取得包含控制項的組件的產品名稱。</span><span class="sxs-lookup"><span data-stu-id="31784-2665">Gets the product name of the assembly containing the control.</span></span></summary>
        <value><span data-ttu-id="31784-2666">包含控制項的組件的產品名稱。</span><span class="sxs-lookup"><span data-stu-id="31784-2666">The product name of the assembly containing the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2667"><xref:System.Windows.Forms.Control.ProductName%2A>屬性是唯讀屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2667">The <xref:System.Windows.Forms.Control.ProductName%2A> property is a read-only property.</span></span> <span data-ttu-id="31784-2668">若要變更這個屬性的值，設定<xref:System.Reflection.AssemblyProductAttribute.Product%2A>屬性值為<xref:System.Reflection.AssemblyProductAttribute>。</span><span class="sxs-lookup"><span data-stu-id="31784-2668">To change the value of this property, set the <xref:System.Reflection.AssemblyProductAttribute.Product%2A> property value of the <xref:System.Reflection.AssemblyProductAttribute>.</span></span> <span data-ttu-id="31784-2669">下的面 C# 程式碼集<xref:System.Windows.Forms.Control.ProductName%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2669">The following line of C# code sets the <xref:System.Windows.Forms.Control.ProductName%2A> property.</span></span>  
  
```  
[assembly: AssemblyProduct("MyApplication")]  
```  
  
> [!NOTE]
>  <span data-ttu-id="31784-2670">強烈建議您提供的公司名稱、 產品名稱和產品版本。</span><span class="sxs-lookup"><span data-stu-id="31784-2670">It is strongly recommended that you provide the company name, product name, and product version.</span></span> <span data-ttu-id="31784-2671">提供這項資訊可讓您使用 Windows Form 功能例如<xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType>，讓您更輕鬆地寫入應用程式符合"Certified for Windows 」 程式。</span><span class="sxs-lookup"><span data-stu-id="31784-2671">Providing this information enables the use of Windows Forms features such as <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType> that make it easier to write applications that comply with the "Certified for Windows" program.</span></span> <span data-ttu-id="31784-2672">如需 Certified for Windows 程式的詳細資訊，請參閱http://msdn.microsoft.com/certification。</span><span class="sxs-lookup"><span data-stu-id="31784-2672">For more information about the Certified for Windows program, see http://msdn.microsoft.com/certification.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2673">下列程式碼範例會顯示在應用程式的資訊<xref:System.Windows.Forms.Label>所包含<xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="31784-2673">The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="31784-2674">這個範例需要<xref:System.Windows.Forms.Control.CompanyName%2A>，<xref:System.Windows.Forms.Control.ProductName%2A>和<xref:System.Windows.Forms.Control.ProductVersion%2A>尚未設定。</span><span class="sxs-lookup"><span data-stu-id="31784-2674">This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyProductAttribute.Product" />
      </Docs>
    </Member>
    <Member MemberName="ProductVersion">
      <MemberSignature Language="C#" Value="public string ProductVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProductVersion" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ProductVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProductVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProductVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProductVersion : string" Usage="System.Windows.Forms.Control.ProductVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2675">取得包含控制項的組件的版本。</span><span class="sxs-lookup"><span data-stu-id="31784-2675">Gets the version of the assembly containing the control.</span></span></summary>
        <value><span data-ttu-id="31784-2676">包含控制項的組件的檔案版本。</span><span class="sxs-lookup"><span data-stu-id="31784-2676">The file version of the assembly containing the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2677"><xref:System.Windows.Forms.Control.ProductVersion%2A>屬性是唯讀屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2677">The <xref:System.Windows.Forms.Control.ProductVersion%2A> property is a read-only property.</span></span> <span data-ttu-id="31784-2678">若要變更這個屬性的值，設定<xref:System.Reflection.AssemblyVersionAttribute.Version%2A>屬性值為<xref:System.Reflection.AssemblyVersionAttribute>。</span><span class="sxs-lookup"><span data-stu-id="31784-2678">To change the value of this property, set the <xref:System.Reflection.AssemblyVersionAttribute.Version%2A> property value of the <xref:System.Reflection.AssemblyVersionAttribute>.</span></span> <span data-ttu-id="31784-2679">下的面 C# 程式碼集<xref:System.Windows.Forms.Control.ProductVersion%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2679">The following line of C# code sets the <xref:System.Windows.Forms.Control.ProductVersion%2A> property.</span></span>  
  
```  
[assembly: AssemblyVersion("1.0.1")]  
```  
  
> [!NOTE]
>  <span data-ttu-id="31784-2680">強烈建議您提供的公司名稱、 產品名稱和產品版本。</span><span class="sxs-lookup"><span data-stu-id="31784-2680">It is strongly recommended that you provide the company name, product name, and product version.</span></span> <span data-ttu-id="31784-2681">提供這項資訊可讓您使用 Windows Form 功能例如<xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType>，讓您更輕鬆地寫入應用程式符合"Certified for Windows 」 程式。</span><span class="sxs-lookup"><span data-stu-id="31784-2681">Providing this information enables the use of Windows Forms features such as <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType> that make it easier to write applications that comply with the "Certified for Windows" program.</span></span> <span data-ttu-id="31784-2682">如需 Certified for Windows 程式的詳細資訊，請參閱http://msdn.microsoft.com/certification。</span><span class="sxs-lookup"><span data-stu-id="31784-2682">For more information about the Certified for Windows program, see http://msdn.microsoft.com/certification.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2683">下列程式碼範例會顯示在應用程式的資訊<xref:System.Windows.Forms.Label>所包含<xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="31784-2683">The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="31784-2684">這個範例需要<xref:System.Windows.Forms.Control.CompanyName%2A>，<xref:System.Windows.Forms.Control.ProductName%2A>和<xref:System.Windows.Forms.Control.ProductVersion%2A>尚未設定。</span><span class="sxs-lookup"><span data-stu-id="31784-2684">This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyVersionAttribute.Version" />
      </Docs>
    </Member>
    <Member MemberName="PropagatingImeMode">
      <MemberSignature Language="C#" Value="protected static System.Windows.Forms.ImeMode PropagatingImeMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.ImeMode PropagatingImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.PropagatingImeMode" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly Property PropagatingImeMode As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static property System::Windows::Forms::ImeMode PropagatingImeMode { System::Windows::Forms::ImeMode get(); };" />
      <MemberSignature Language="F#" Value="member this.PropagatingImeMode : System.Windows.Forms.ImeMode" Usage="System.Windows.Forms.Control.PropagatingImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2685">取得表示傳播中 IME 模式的物件。</span><span class="sxs-lookup"><span data-stu-id="31784-2685">Gets an object that represents a propagating IME mode.</span></span></summary>
        <value><span data-ttu-id="31784-2686">表示傳播中 IME 模式的物件。</span><span class="sxs-lookup"><span data-stu-id="31784-2686">An object that represents a propagating IME mode.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryAccessibilityHelp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.QueryAccessibilityHelp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryAccessibilityHelp As QueryAccessibilityHelpEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::QueryAccessibilityHelpEventHandler ^ QueryAccessibilityHelp;" />
      <MemberSignature Language="F#" Value="member this.QueryAccessibilityHelp : System.Windows.Forms.QueryAccessibilityHelpEventHandler " Usage="member this.QueryAccessibilityHelp : System.Windows.Forms.QueryAccessibilityHelpEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryAccessibilityHelpEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2687">發生於 <see cref="T:System.Windows.Forms.AccessibleObject" /> 為協助工具應用程式提供說明時。</span><span class="sxs-lookup"><span data-stu-id="31784-2687">Occurs when <see cref="T:System.Windows.Forms.AccessibleObject" /> is providing help to accessibility applications.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2688">您應該使用<xref:System.Windows.Forms.HelpProvider>類別，讓使用者可以叫用可存取物件上的說明，請按 F1 鍵。</span><span class="sxs-lookup"><span data-stu-id="31784-2688">You should use the <xref:System.Windows.Forms.HelpProvider> class to enable users to invoke help on your accessible object by pressing the F1 key.</span></span> <span data-ttu-id="31784-2689">使用<xref:System.Windows.Forms.HelpProvider>中完整的資訊為您提供<xref:System.Windows.Forms.QueryAccessibilityHelpEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="31784-2689">Using the <xref:System.Windows.Forms.HelpProvider> provides you with complete information in the <xref:System.Windows.Forms.QueryAccessibilityHelpEventArgs>.</span></span> <span data-ttu-id="31784-2690">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2690">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2691">下列程式碼範例示範如何建立可存取性感知的圖表控制，請使用<xref:System.Windows.Forms.AccessibleObject>和<xref:System.Windows.Forms.Control.ControlAccessibleObject>類別會公開可存取的資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-2691">The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information.</span></span> <span data-ttu-id="31784-2692">控制項會繪製兩條曲線，以及一個圖例。</span><span class="sxs-lookup"><span data-stu-id="31784-2692">The control plots two curves along with a legend.</span></span> <span data-ttu-id="31784-2693">`ChartControlAccessibleObject`類別，衍生自`ControlAccessibleObject`，用於<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A>方法以提供圖表控制項的自訂存取資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-2693">The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control.</span></span> <span data-ttu-id="31784-2694">因為圖表圖例不是實際<xref:System.Windows.Forms.Control>-為基礎的控制，但改為繪製所 chart 控制項中，它不會不含任何內建的可存取資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-2694">Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</span></span> <span data-ttu-id="31784-2695">因為這個緣故，`ChartControlAccessibleObject`類別覆寫<xref:System.Windows.Forms.AccessibleObject.GetChild%2A>方法以傳回`CurveLegendAccessibleObject`，表示每個部分的圖例可存取的資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-2695">Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend.</span></span> <span data-ttu-id="31784-2696">當存取感知的應用程式使用這個控制項時，控制項可以提供必要的可存取資訊。</span><span class="sxs-lookup"><span data-stu-id="31784-2696">When an accessible-aware application uses this control, the control can provide the necessary accessible information.</span></span>  
  
 <span data-ttu-id="31784-2697">此程式碼摘錄示範處理<xref:System.Windows.Forms.Control.QueryAccessibilityHelp>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2697">This code excerpt demonstrates handling the <xref:System.Windows.Forms.Control.QueryAccessibilityHelp> event.</span></span> <span data-ttu-id="31784-2698">請參閱<xref:System.Windows.Forms.AccessibleObject>類別概觀的完整程式碼範例。</span><span class="sxs-lookup"><span data-stu-id="31784-2698">See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#3)]
 [!code-csharp[System.Windows.Forms.AccessibleObject#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#3)]
 [!code-vb[System.Windows.Forms.AccessibleObject#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.AccessibleObject.GetHelpTopic(System.String@)" />
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.Forms.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.Forms.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2699">發生於拖放作業時，讓拖曳來源能夠決定是否應取消拖放作業。</span><span class="sxs-lookup"><span data-stu-id="31784-2699">Occurs during a drag-and-drop operation and enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2700"><xref:System.Windows.Forms.Control.QueryContinueDrag>拖放作業期間鍵盤或滑鼠按鈕狀態變更時，會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2700">The <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span> <span data-ttu-id="31784-2701"><xref:System.Windows.Forms.Control.QueryContinueDrag>事件可讓拖曳來源能夠決定是否應取消拖放作業。</span><span class="sxs-lookup"><span data-stu-id="31784-2701">The <xref:System.Windows.Forms.Control.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="31784-2702">以下描述與拖放作業相關的事件，其引發的方法與時機。</span><span class="sxs-lookup"><span data-stu-id="31784-2702">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="31784-2703"><xref:System.Windows.Forms.Control.DoDragDrop%2A>方法會判斷目前的游標位置下的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2703">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="31784-2704">接著會檢查此控制項是否為有效的置放目標。</span><span class="sxs-lookup"><span data-stu-id="31784-2704">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="31784-2705">如果控制項為有效的置放目標，<xref:System.Windows.Forms.Control.GiveFeedback>指定的拖放效果引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2705">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="31784-2706">如需拖放效果的清單，請參閱 <xref:System.Windows.Forms.DragDropEffects> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="31784-2706">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="31784-2707">系統會追蹤滑鼠游標位置、鍵盤狀態和滑鼠按鈕狀態的變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2707">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="31784-2708">如果使用者移出視窗外，便會引發 <xref:System.Windows.Forms.Control.DragLeave> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2708">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="31784-2709">如果滑鼠進入另一個控制項，便會引發該控制項的 <xref:System.Windows.Forms.Control.DragEnter> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2709">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="31784-2710">如果滑鼠移動，但是待在相同的控制項內，便會引發 <xref:System.Windows.Forms.Control.DragOver> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2710">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="31784-2711">如果沒有鍵盤或滑鼠按鈕狀態變更<xref:System.Windows.Forms.Control.QueryContinueDrag>引發事件，並決定是否要繼續拖曳、 置放資料，或取消作業的值<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>的事件屬性<xref:System.Windows.Forms.QueryContinueDragEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="31784-2711">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="31784-2712">如果值<xref:System.Windows.Forms.DragAction>是`Continue`、<xref:System.Windows.Forms.Control.DragOver>就會引發事件，以繼續作業而<xref:System.Windows.Forms.Control.GiveFeedback>具有新效果就會引發事件，以便設定適當的視覺化回應。</span><span class="sxs-lookup"><span data-stu-id="31784-2712">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="31784-2713">如需有效置放效果的清單，請參閱 <xref:System.Windows.Forms.DragDropEffects> 列舉型別。</span><span class="sxs-lookup"><span data-stu-id="31784-2713">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="31784-2714"><xref:System.Windows.Forms.Control.DragOver>和<xref:System.Windows.Forms.Control.GiveFeedback>事件會經過配對，如此在滑鼠移動經過置放目標，不提供使用者最新的回應滑鼠的位置上。</span><span class="sxs-lookup"><span data-stu-id="31784-2714">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="31784-2715">如果值<xref:System.Windows.Forms.DragAction>是`Drop`，置放效果值會傳回來源，如此來源應用程式可以執行適當作業資料來源; 例如，如果剪下資料作業是移動。</span><span class="sxs-lookup"><span data-stu-id="31784-2715">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="31784-2716">如果值<xref:System.Windows.Forms.DragAction>是`Cancel`、<xref:System.Windows.Forms.Control.DragLeave>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2716">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
 <span data-ttu-id="31784-2717">根據預設，<xref:System.Windows.Forms.Control.QueryContinueDrag>事件設定<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>至`Cancel`中<xref:System.Windows.Forms.DragAction>如果按下 ESC 鍵，並設定<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>至`Drop`中<xref:System.Windows.Forms.DragAction>按下滑鼠左、 置中 或右鍵時。</span><span class="sxs-lookup"><span data-stu-id="31784-2717">By default, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event sets <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> to `Cancel` in <xref:System.Windows.Forms.DragAction> if the ESC key was pressed and sets <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> to `Drop` in <xref:System.Windows.Forms.DragAction> if the left, middle, or right mouse button is pressed.</span></span>  
  
 <span data-ttu-id="31784-2718">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2718">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2719">下列程式碼範例示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2719">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="31784-2720">範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>時拖曳動作開始的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2720">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="31784-2721">如果已移動滑鼠拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2721">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="31784-2722"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來決定要在拖曳的項目索引`MouseDown`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2722">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="31784-2723">此範例也示範如何使用自訂游標拖放作業。</span><span class="sxs-lookup"><span data-stu-id="31784-2723">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="31784-2724">這個範例需要有兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`、 自訂拖放到的應用程式目錄，存在於和不置放資料指標，分別。</span><span class="sxs-lookup"><span data-stu-id="31784-2724">The example requires that two cursor files,`3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="31784-2725">如果使用自訂游標`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。</span><span class="sxs-lookup"><span data-stu-id="31784-2725">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="31784-2726">自訂的資料指標中所設定<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2726">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="31784-2727">鍵盤的狀態會在評估<xref:System.Windows.Forms.Control.DragOver>右邊的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵的狀態。</span><span class="sxs-lookup"><span data-stu-id="31784-2727">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="31784-2728">中的位置`ListBox`期間也決定會卸除`DragOver`事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2728">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="31784-2729">如果要卸除的資料不是`String`，然後在<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設`None`中<xref:System.Windows.Forms.DragDropEffects>。</span><span class="sxs-lookup"><span data-stu-id="31784-2729">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="31784-2730">最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。</span><span class="sxs-lookup"><span data-stu-id="31784-2730">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="31784-2731">若要提供的權限卸除資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`中適當的位置加入值`ListBox`。</span><span class="sxs-lookup"><span data-stu-id="31784-2731">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="31784-2732">如果在拖曳作業移動超出界限的表單，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2732">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="31784-2733">此程式碼摘錄示範如何使用<xref:System.Windows.Forms.Control.QueryContinueDrag>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2733">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.QueryContinueDrag> event.</span></span> <span data-ttu-id="31784-2734">請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整程式碼範例的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2734">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#6)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseDragEvent">
      <MemberSignature Language="C#" Value="protected void RaiseDragEvent (object key, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseDragEvent(object key, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseDragEvent (key As Object, e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseDragEvent(System::Object ^ key, System::Windows::Forms::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaiseDragEvent : obj * System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.RaiseDragEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="31784-2735">要引發的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2735">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="31784-2736"><see cref="T:System.Windows.Forms.DragEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2736">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2737">引發適當的拖曳事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2737">Raises the appropriate drag event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseKeyEvent">
      <MemberSignature Language="C#" Value="protected void RaiseKeyEvent (object key, System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseKeyEvent(object key, class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseKeyEvent (key As Object, e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseKeyEvent(System::Object ^ key, System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaiseKeyEvent : obj * System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="control.RaiseKeyEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="31784-2738">要引發的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2738">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="31784-2739"><see cref="T:System.Windows.Forms.KeyEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2739">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2740">引發適當的按鍵事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2740">Raises the appropriate key event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseMouseEvent">
      <MemberSignature Language="C#" Value="protected void RaiseMouseEvent (object key, System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseMouseEvent(object key, class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseMouseEvent (key As Object, e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseMouseEvent(System::Object ^ key, System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaiseMouseEvent : obj * System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.RaiseMouseEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="31784-2741">要引發的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2741">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="31784-2742"><see cref="T:System.Windows.Forms.MouseEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2742">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2743">引發適當的滑鼠事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2743">Raises the appropriate mouse event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaisePaintEvent">
      <MemberSignature Language="C#" Value="protected void RaisePaintEvent (object key, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaisePaintEvent(object key, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaisePaintEvent (key As Object, e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaisePaintEvent(System::Object ^ key, System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaisePaintEvent : obj * System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.RaisePaintEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="31784-2744">要引發的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2744">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="31784-2745"><see cref="T:System.Windows.Forms.PaintEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2745">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-2746">引發適當的繪製事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2746">Raises the appropriate paint event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RecreateHandle">
      <MemberSignature Language="C#" Value="protected void RecreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RecreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RecreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RecreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RecreateHandle();" />
      <MemberSignature Language="F#" Value="member this.RecreateHandle : unit -&gt; unit" Usage="control.RecreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2747">強制重新建立控制項的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-2747">Forces the re-creation of the handle for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2748"><xref:System.Windows.Forms.Control.RecreateHandle%2A>每當新的控制，需要參數，會呼叫方法，但使用的呼叫<xref:System.Windows.Forms.Control.UpdateStyles%2A>至<xref:System.Windows.Forms.Control.CreateParams%2A>不足。</span><span class="sxs-lookup"><span data-stu-id="31784-2748">The <xref:System.Windows.Forms.Control.RecreateHandle%2A> method is called whenever parameters are needed for a new control, but using a call from <xref:System.Windows.Forms.Control.UpdateStyles%2A> to <xref:System.Windows.Forms.Control.CreateParams%2A> is insufficient.</span></span> <span data-ttu-id="31784-2749">這個方法也會呼叫<xref:System.Windows.Forms.Control.DestroyHandle%2A>和<xref:System.Windows.Forms.Control.CreateHandle%2A>並設定<xref:System.Windows.Forms.Control.RecreatingHandle%2A>至`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-2749">This method also calls <xref:System.Windows.Forms.Control.DestroyHandle%2A> and <xref:System.Windows.Forms.Control.CreateHandle%2A> and sets <xref:System.Windows.Forms.Control.RecreatingHandle%2A> to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="RecreatingHandle">
      <MemberSignature Language="C#" Value="public bool RecreatingHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RecreatingHandle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RecreatingHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecreatingHandle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RecreatingHandle { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RecreatingHandle : bool" Usage="System.Windows.Forms.Control.RecreatingHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2750">取得指示控制項目前是否正重新建立其控制代碼的值。</span><span class="sxs-lookup"><span data-stu-id="31784-2750">Gets a value indicating whether the control is currently re-creating its handle.</span></span></summary>
        <value><span data-ttu-id="31784-2751">如果控制項目前正在重新建立其控制代碼，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2751"><see langword="true" /> if the control is currently re-creating its handle; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2752"><xref:System.Windows.Forms.Control.RecreatingHandle%2A>屬性會傳回`true`如果<xref:System.Windows.Forms.Control.RecreateHandle%2A>方法仍在控制項上執行。</span><span class="sxs-lookup"><span data-stu-id="31784-2752">The <xref:System.Windows.Forms.Control.RecreatingHandle%2A> property returns `true` if the <xref:System.Windows.Forms.Control.RecreateHandle%2A> method is still running on the control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="RectangleToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle RectangleToClient (System.Drawing.Rectangle r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle RectangleToClient(valuetype System.Drawing.Rectangle r) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function RectangleToClient (r As Rectangle) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle RectangleToClient(System::Drawing::Rectangle r);" />
      <MemberSignature Language="F#" Value="member this.RectangleToClient : System.Drawing.Rectangle -&gt; System.Drawing.Rectangle" Usage="control.RectangleToClient r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="r"><span data-ttu-id="31784-2753">要轉換的螢幕座標 <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2753">The screen coordinate <see cref="T:System.Drawing.Rectangle" /> to convert.</span></span></param>
        <summary><span data-ttu-id="31784-2754">以工作區座標計算指定的螢幕矩形大小和位置。</span><span class="sxs-lookup"><span data-stu-id="31784-2754">Computes the size and location of the specified screen rectangle in client coordinates.</span></span></summary>
        <returns><span data-ttu-id="31784-2755"><see cref="T:System.Drawing.Rectangle" />，以工作區座標表示的轉換後 <see cref="T:System.Drawing.Rectangle" /> (<paramref name="r" />)。</span><span class="sxs-lookup"><span data-stu-id="31784-2755">A <see cref="T:System.Drawing.Rectangle" /> that represents the converted <see cref="T:System.Drawing.Rectangle" />, <paramref name="r" />, in client coordinates.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="RectangleToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle RectangleToScreen (System.Drawing.Rectangle r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle RectangleToScreen(valuetype System.Drawing.Rectangle r) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function RectangleToScreen (r As Rectangle) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle RectangleToScreen(System::Drawing::Rectangle r);" />
      <MemberSignature Language="F#" Value="member this.RectangleToScreen : System.Drawing.Rectangle -&gt; System.Drawing.Rectangle" Usage="control.RectangleToScreen r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="r"><span data-ttu-id="31784-2756">要轉換的工作區座標 <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2756">The client coordinate <see cref="T:System.Drawing.Rectangle" /> to convert.</span></span></param>
        <summary><span data-ttu-id="31784-2757">以螢幕座標計算指定的工作區矩形大小和位置。</span><span class="sxs-lookup"><span data-stu-id="31784-2757">Computes the size and location of the specified client rectangle in screen coordinates.</span></span></summary>
        <returns><span data-ttu-id="31784-2758"><see cref="T:System.Drawing.Rectangle" />，以螢幕座標表示的轉換後 <see cref="T:System.Drawing.Rectangle" /> (<paramref name="p" />)。</span><span class="sxs-lookup"><span data-stu-id="31784-2758">A <see cref="T:System.Drawing.Rectangle" /> that represents the converted <see cref="T:System.Drawing.Rectangle" />, <paramref name="p" />, in screen coordinates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="31784-2759">下列程式碼範例示範如何使用<xref:System.Windows.Forms.Control.BackColor%2A>， <xref:System.Windows.Forms.Control.RectangleToScreen%2A>， <xref:System.Windows.Forms.Control.PointToScreen%2A>， <xref:System.Windows.Forms.Control.MouseButtons%2A>， <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>，和<xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType>成員。</span><span class="sxs-lookup"><span data-stu-id="31784-2759">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> members.</span></span> <span data-ttu-id="31784-2760">若要執行此範例，下列程式碼的呼叫格式貼**Form1**含有數個控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2760">To run the example, paste the following code in a form called **Form1** containing several controls.</span></span> <span data-ttu-id="31784-2761">這個範例需要<xref:System.Windows.Forms.Control.MouseDown>， <xref:System.Windows.Forms.Control.MouseMove>，和<xref:System.Windows.Forms.Control.MouseUp>事件都已連接的範例中定義的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2761">This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="M:System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="ReflectMessage">
      <MemberSignature Language="C#" Value="protected static bool ReflectMessage (IntPtr hWnd, ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool ReflectMessage(native int hWnd, valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ReflectMessage (hWnd As IntPtr, ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool ReflectMessage(IntPtr hWnd, System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="static member ReflectMessage : nativeint *  -&gt; bool" Usage="System.Windows.Forms.Control.ReflectMessage (hWnd, m)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="hWnd"><span data-ttu-id="31784-2762"><see cref="T:System.IntPtr" />，表示要反映訊息的目標控制項控制代碼。</span><span class="sxs-lookup"><span data-stu-id="31784-2762">An <see cref="T:System.IntPtr" /> representing the handle of the control to reflect the message to.</span></span></param>
        <param name="m"><span data-ttu-id="31784-2763"><see cref="T:System.Windows.Forms.Message" />，表示要反映的 Windows 訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2763">A <see cref="T:System.Windows.Forms.Message" /> representing the Windows message to reflect.</span></span></param>
        <summary><span data-ttu-id="31784-2764">將指定的訊息反映至繫結至指定控制代碼的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2764">Reflects the specified message to the control that is bound to the specified handle.</span></span></summary>
        <returns><span data-ttu-id="31784-2765">如果已反映訊息，為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2765"><see langword="true" /> if the message was reflected; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2766"><xref:System.Windows.Forms.Control.ReflectMessage%2A>方法是基礎結構方法，通常不應該呼叫您的程式碼。</span><span class="sxs-lookup"><span data-stu-id="31784-2766">The <xref:System.Windows.Forms.Control.ReflectMessage%2A> method is an infrastructure method and typically should not be called from your code.</span></span>  
  
 <span data-ttu-id="31784-2767">如果`hWnd`參數不代表有效的控制，<xref:System.Windows.Forms.Control.ReflectMessage%2A>方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="31784-2767">If the `hWnd` parameter does not represent a valid control, the <xref:System.Windows.Forms.Control.ReflectMessage%2A> method returns `false`.</span></span>  
  
 <span data-ttu-id="31784-2768">因為 Windows 訊息不會傳回至最上層視窗，<xref:System.Windows.Forms.Control.ReflectMessage%2A>方法用來傳播至控制項傳送該訊息傳回訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-2768">Because Windows messages are returned to the top-level window, the <xref:System.Windows.Forms.Control.ReflectMessage%2A> method is used to propagate the return message to the control that sent the message.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-2769">呼叫這個方法的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-2769">for all windows to call this method.</span></span> <span data-ttu-id="31784-2770">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2770">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public virtual void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Refresh();" />
      <MemberSignature Language="F#" Value="abstract member Refresh : unit -&gt; unit&#xA;override this.Refresh : unit -&gt; unit" Usage="control.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2771">強制控制項使其工作區失效，並且立即重繪其本身和任何子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2771">Forces the control to invalidate its client area and immediately redraw itself and any child controls.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2772"><para>在覆寫<see cref="M:System.Windows.Forms.Control.Refresh" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.Refresh" />方法，使失效並且重繪控制項和其子控制項。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2772"><para>When overriding <see cref="M:System.Windows.Forms.Control.Refresh" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.Refresh" /> method so the control and its child controls are invalidated and redrawn.</para></span></span></block>
        <altmember cref="M:System.Windows.Forms.Control.Update" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <Member MemberName="Region">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Region { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Region" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Region" />
      <MemberSignature Language="VB.NET" Value="Public Property Region As Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Region ^ Region { System::Drawing::Region ^ get(); void set(System::Drawing::Region ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Region : System.Drawing.Region with get, set" Usage="System.Windows.Forms.Control.Region" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2773">取得或設定與控制項關聯的視窗區域。</span><span class="sxs-lookup"><span data-stu-id="31784-2773">Gets or sets the window region associated with the control.</span></span></summary>
        <value><span data-ttu-id="31784-2774">與控制項關聯的視窗 <see cref="T:System.Drawing.Region" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2774">The window <see cref="T:System.Drawing.Region" /> associated with the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2775">視窗區域是像素為單位，其中作業系統允許繪製視窗內的集合。</span><span class="sxs-lookup"><span data-stu-id="31784-2775">The window region is a collection of pixels within the window where the operating system permits drawing.</span></span> <span data-ttu-id="31784-2776">作業系統不會顯示在視窗的視窗區域外部的任何部分。</span><span class="sxs-lookup"><span data-stu-id="31784-2776">The operating system does not display any portion of a window that lies outside of the window region.</span></span> <span data-ttu-id="31784-2777">控制項的座標是區域的相對於控制項，而非工作區控制項的左上角。</span><span class="sxs-lookup"><span data-stu-id="31784-2777">The coordinates of a control's region are relative to the upper-left corner of the control, not the client area of the control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-2778">可以是不連續的像素區域中包含的集合。</span><span class="sxs-lookup"><span data-stu-id="31784-2778">The collection of pixels contained with the region can be noncontiguous.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2779">下列程式碼範例示範如何使用<xref:System.Windows.Forms.Control.Region%2A>藉由建立圓形按鈕的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2779">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.Region%2A> property by creating a round button.</span></span> <span data-ttu-id="31784-2780">要執行此範例中，貼上下列程式碼形式，其中包含呼叫的按鈕`roundButton`。</span><span class="sxs-lookup"><span data-stu-id="31784-2780">To run the example, paste the following code in a form containing a button called `roundButton`.</span></span> <span data-ttu-id="31784-2781">這個範例需要<xref:System.Windows.Forms.Control.Paint>事件已連線到此範例中定義的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-2781">This example requires that the <xref:System.Windows.Forms.Control.Paint> event is connected to the event handler defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.Region#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.Region#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.Region#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-2782">若要設定這個屬性值的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-2782">for all windows to set this property value.</span></span> <span data-ttu-id="31784-2783">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="31784-2783">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
      </Docs>
    </Member>
    <Member MemberName="RegionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RegionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RegionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.RegionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RegionChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RegionChanged;" />
      <MemberSignature Language="F#" Value="member this.RegionChanged : EventHandler " Usage="member this.RegionChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2784">發生於 <see cref="P:System.Windows.Forms.Control.Region" /> 屬性的值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-2784">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.Region" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2785">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2785">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2786">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-2786">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-2787">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.RegionChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2787">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.RegionChanged> event.</span></span> <span data-ttu-id="31784-2788">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-2788">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-2789">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-2789">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-2790">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-2790">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-2791">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.RegionChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2791">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.RegionChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#22)]
 [!code-vb[System.Windows.Forms.EventExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderRightToLeft">
      <MemberSignature Language="C#" Value="protected internal bool RenderRightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderRightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RenderRightToLeft" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property RenderRightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property bool RenderRightToLeft { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RenderRightToLeft : bool" Usage="System.Windows.Forms.Control.RenderRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property has been deprecated. Please use RightToLeft instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2792">此屬性現在已過時。</span><span class="sxs-lookup"><span data-stu-id="31784-2792">This property is now obsolete.</span></span></summary>
        <value><span data-ttu-id="31784-2793">如果控制項是由右至左呈現則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2793"><see langword="true" /> if the control is rendered from right to left; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="31784-2794">預設值為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2794">The default is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RescaleConstantsForDpi">
      <MemberSignature Language="C#" Value="protected virtual void RescaleConstantsForDpi (int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RescaleConstantsForDpi(int32 deviceDpiOld, int32 deviceDpiNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RescaleConstantsForDpi(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RescaleConstantsForDpi (deviceDpiOld As Integer, deviceDpiNew As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="F#" Value="abstract member RescaleConstantsForDpi : int * int -&gt; unit&#xA;override this.RescaleConstantsForDpi : int * int -&gt; unit" Usage="control.RescaleConstantsForDpi (deviceDpiOld, deviceDpiNew)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceDpiOld" Type="System.Int32" />
        <Parameter Name="deviceDpiNew" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="deviceDpiOld"><span data-ttu-id="31784-2795">變更之前的 DPI 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2795">The DPI value prior to the change.</span></span></param>
        <param name="deviceDpiNew"><span data-ttu-id="31784-2796">變更之後的 DPI 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2796">The DPI value after the change.</span></span></param>
        <summary><span data-ttu-id="31784-2797">提供在發生 DPI 變更時用來重新調整控制項的常數。</span><span class="sxs-lookup"><span data-stu-id="31784-2797">Provides constants for rescaling the control when a DPI change occurs.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public virtual void ResetBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetBackColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetBackColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetBackColor();" />
      <MemberSignature Language="F#" Value="abstract member ResetBackColor : unit -&gt; unit&#xA;override this.ResetBackColor : unit -&gt; unit" Usage="control.ResetBackColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2798">重設 <see cref="P:System.Windows.Forms.Control.BackColor" /> 屬性為其預設值。</span><span class="sxs-lookup"><span data-stu-id="31784-2798">Resets the <see cref="P:System.Windows.Forms.Control.BackColor" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2799">這個方法與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-2799">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBindings">
      <MemberSignature Language="C#" Value="public void ResetBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetBindings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetBindings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetBindings();" />
      <MemberSignature Language="F#" Value="member this.ResetBindings : unit -&gt; unit" Usage="control.ResetBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2800">使得繫結至 <see cref="T:System.Windows.Forms.BindingSource" /> 的控制項重新讀取清單中的所有項目，並重新整理其顯示的值。</span><span class="sxs-lookup"><span data-stu-id="31784-2800">Causes a control bound to the <see cref="T:System.Windows.Forms.BindingSource" /> to reread all the items in the list and refresh their displayed values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2801">這個方法與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-2801">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.DataBindings" />
      </Docs>
    </Member>
    <Member MemberName="ResetCursor">
      <MemberSignature Language="C#" Value="public virtual void ResetCursor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetCursor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetCursor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetCursor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetCursor();" />
      <MemberSignature Language="F#" Value="abstract member ResetCursor : unit -&gt; unit&#xA;override this.ResetCursor : unit -&gt; unit" Usage="control.ResetCursor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2802">重設 <see cref="P:System.Windows.Forms.Control.Cursor" /> 屬性為其預設值。</span><span class="sxs-lookup"><span data-stu-id="31784-2802">Resets the <see cref="P:System.Windows.Forms.Control.Cursor" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2803">這個方法與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-2803">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetFont">
      <MemberSignature Language="C#" Value="public virtual void ResetFont ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetFont() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetFont" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetFont ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetFont();" />
      <MemberSignature Language="F#" Value="abstract member ResetFont : unit -&gt; unit&#xA;override this.ResetFont : unit -&gt; unit" Usage="control.ResetFont " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2804">重設 <see cref="P:System.Windows.Forms.Control.Font" /> 屬性為其預設值。</span><span class="sxs-lookup"><span data-stu-id="31784-2804">Resets the <see cref="P:System.Windows.Forms.Control.Font" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2805">這個方法與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-2805">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public virtual void ResetForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetForeColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetForeColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetForeColor();" />
      <MemberSignature Language="F#" Value="abstract member ResetForeColor : unit -&gt; unit&#xA;override this.ResetForeColor : unit -&gt; unit" Usage="control.ResetForeColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2806">重設 <see cref="P:System.Windows.Forms.Control.ForeColor" /> 屬性為其預設值。</span><span class="sxs-lookup"><span data-stu-id="31784-2806">Resets the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2807">這個方法與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-2807">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetImeMode">
      <MemberSignature Language="C#" Value="public void ResetImeMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetImeMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetImeMode" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetImeMode ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetImeMode();" />
      <MemberSignature Language="F#" Value="member this.ResetImeMode : unit -&gt; unit" Usage="control.ResetImeMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2808">重設 <see cref="P:System.Windows.Forms.Control.ImeMode" /> 屬性為其預設值。</span><span class="sxs-lookup"><span data-stu-id="31784-2808">Resets the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2809">這個方法與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-2809">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetMouseEventArgs">
      <MemberSignature Language="C#" Value="protected void ResetMouseEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ResetMouseEventArgs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetMouseEventArgs" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ResetMouseEventArgs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ResetMouseEventArgs();" />
      <MemberSignature Language="F#" Value="member this.ResetMouseEventArgs : unit -&gt; unit" Usage="control.ResetMouseEventArgs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2810">重設控制項來處理 <see cref="E:System.Windows.Forms.Control.MouseLeave" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2810">Resets the control to handle the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetRightToLeft">
      <MemberSignature Language="C#" Value="public virtual void ResetRightToLeft ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetRightToLeft() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetRightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetRightToLeft ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetRightToLeft();" />
      <MemberSignature Language="F#" Value="abstract member ResetRightToLeft : unit -&gt; unit&#xA;override this.ResetRightToLeft : unit -&gt; unit" Usage="control.ResetRightToLeft " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2811">重設 <see cref="P:System.Windows.Forms.Control.RightToLeft" /> 屬性為其預設值。</span><span class="sxs-lookup"><span data-stu-id="31784-2811">Resets the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2812">這個方法與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-2812">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetText">
      <MemberSignature Language="C#" Value="public virtual void ResetText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetText ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetText();" />
      <MemberSignature Language="F#" Value="abstract member ResetText : unit -&gt; unit&#xA;override this.ResetText : unit -&gt; unit" Usage="control.ResetText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2813">將 <see cref="P:System.Windows.Forms.Control.Text" /> 屬性重設為其預設值 (<see cref="F:System.String.Empty" />)。</span><span class="sxs-lookup"><span data-stu-id="31784-2813">Resets the <see cref="P:System.Windows.Forms.Control.Text" /> property to its default value (<see cref="F:System.String.Empty" />).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2814">您通常使用這個方法，如果您要建立的設計工具<xref:System.Windows.Forms.Control>或建立您自己的控制項加入<xref:System.Windows.Forms.Control>。</span><span class="sxs-lookup"><span data-stu-id="31784-2814">You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.Control> or creating your own control incorporating the <xref:System.Windows.Forms.Control>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Text" />
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event EventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Resize" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Resize As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Resize;" />
      <MemberSignature Language="F#" Value="member this.Resize : EventHandler " Usage="member this.Resize : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2815">發生於重設控制項大小時。</span><span class="sxs-lookup"><span data-stu-id="31784-2815">Occurs when the control is resized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2816">若要判斷<xref:System.Windows.Forms.Control.Size%2A>的調整大小的控制項，您可以轉型`sender`參數的已註冊<xref:System.Windows.Forms.ControlEventHandler>方法<xref:System.Windows.Forms.Control>並取得其<xref:System.Windows.Forms.Control.Size%2A>屬性 (或<xref:System.Windows.Forms.Control.Height%2A>和<xref:System.Windows.Forms.Control.Width%2A>屬性個別）。</span><span class="sxs-lookup"><span data-stu-id="31784-2816">To determine the <xref:System.Windows.Forms.Control.Size%2A> of the resized control, you can cast the `sender` parameter of the registered <xref:System.Windows.Forms.ControlEventHandler> method  to a <xref:System.Windows.Forms.Control> and get its <xref:System.Windows.Forms.Control.Size%2A> property (or <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Width%2A> properties individually).</span></span>  
  
 <span data-ttu-id="31784-2817">若要處理自訂版面配置，使用<xref:System.Windows.Forms.Control.Layout>而不是調整大小事件的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2817">To handle custom layouts, use the <xref:System.Windows.Forms.Control.Layout> event instead of the Resize event.</span></span> <span data-ttu-id="31784-2818"><xref:System.Windows.Forms.Control.Layout>引發以回應<xref:System.Windows.Forms.Control.Resize>事件，但也在其他會影響控制項的配置變更回應。</span><span class="sxs-lookup"><span data-stu-id="31784-2818">The <xref:System.Windows.Forms.Control.Layout> event is raised in response to a <xref:System.Windows.Forms.Control.Resize> event, but also in response to other changes that affect the layout of the control.</span></span>  
  
 <span data-ttu-id="31784-2819">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2819">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2820">下列程式碼範例會處理<xref:System.Windows.Forms.Control.Resize>事件<xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="31784-2820">The following code example handles the <xref:System.Windows.Forms.Control.Resize> event of a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="31784-2821">重新調整表單大小，此事件處理常式可確保表單出現方形 (其<xref:System.Windows.Forms.Control.Height%2A>和<xref:System.Windows.Forms.Control.Width%2A>仍相同)。</span><span class="sxs-lookup"><span data-stu-id="31784-2821">When the form is resized, the event handler ensures that the form stays square (its <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Width%2A> remain equal).</span></span> <span data-ttu-id="31784-2822">若要執行此範例中，請確定，然後將此事件處理方法產生關聯的表單<xref:System.Windows.Forms.Control.Resize>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2822">To run this example, make sure and associate this event-handling method with the form’s <xref:System.Windows.Forms.Control.Resize> event.</span></span>  
  
 [!code-cpp[WinForms.Control.Resize#1](~/samples/snippets/cpp/VS_Snippets_Winforms/WinForms.Control.Resize/CPP/form1.cpp#1)]
 [!code-csharp[WinForms.Control.Resize#1](~/samples/snippets/csharp/VS_Snippets_Winforms/WinForms.Control.Resize/CS/form1.cs#1)]
 [!code-vb[WinForms.Control.Resize#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/WinForms.Control.Resize/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="ResizeRedraw">
      <MemberSignature Language="C#" Value="protected bool ResizeRedraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResizeRedraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ResizeRedraw" />
      <MemberSignature Language="VB.NET" Value="Protected Property ResizeRedraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool ResizeRedraw { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ResizeRedraw : bool with get, set" Usage="System.Windows.Forms.Control.ResizeRedraw" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2823">取得或設定值，指出控制項重設大小時，是否會重繪本身。</span><span class="sxs-lookup"><span data-stu-id="31784-2823">Gets or sets a value indicating whether the control redraws itself when resized.</span></span></summary>
        <value><span data-ttu-id="31784-2824">如果在重設大小時會重繪本身，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2824"><see langword="true" /> if the control redraws itself when resized; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2825"><xref:System.Windows.Forms.Control.ResizeRedraw%2A>屬性值相當於的傳回值<xref:System.Windows.Forms.Control.GetStyle%2A>方法時傳入<xref:System.Windows.Forms.ControlStyles.ResizeRedraw?displayProperty=nameWithType>做為參數的值。</span><span class="sxs-lookup"><span data-stu-id="31784-2825">The <xref:System.Windows.Forms.Control.ResizeRedraw%2A> property value is equivalent to the return value of the <xref:System.Windows.Forms.Control.GetStyle%2A> method when passing in the <xref:System.Windows.Forms.ControlStyles.ResizeRedraw?displayProperty=nameWithType> value as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.ResizeRedraw" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ResumeLayout">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31784-2826">繼續平常的配置邏輯。</span><span class="sxs-lookup"><span data-stu-id="31784-2826">Resumes the usual layout logic.</span></span></summary>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ResumeLayout">
      <MemberSignature Language="C#" Value="public void ResumeLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResumeLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResumeLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResumeLayout();" />
      <MemberSignature Language="F#" Value="member this.ResumeLayout : unit -&gt; unit" Usage="control.ResumeLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2827">繼續平常的配置邏輯。</span><span class="sxs-lookup"><span data-stu-id="31784-2827">Resumes usual layout logic.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2828">呼叫<xref:System.Windows.Forms.Control.ResumeLayout%2A>方法不論是否有任何暫止配置要求，強制立即配置。</span><span class="sxs-lookup"><span data-stu-id="31784-2828">Calling the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method forces an immediate layout if there are any pending layout requests.</span></span>  
  
 <span data-ttu-id="31784-2829"><xref:System.Windows.Forms.Control.SuspendLayout%2A>和<xref:System.Windows.Forms.Control.ResumeLayout%2A>一起用來隱藏多個方法是<xref:System.Windows.Forms.Control.Layout>事件而調整控制項的多個屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2829">The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control.</span></span> <span data-ttu-id="31784-2830">例如，您通常會呼叫<xref:System.Windows.Forms.Control.SuspendLayout%2A>方法，然後設定<xref:System.Windows.Forms.Control.Size%2A>， <xref:System.Windows.Forms.Control.Location%2A>， <xref:System.Windows.Forms.Control.Anchor%2A>，或<xref:System.Windows.Forms.Control.Dock%2A>屬性的控制項，然後再呼叫<xref:System.Windows.Forms.Control.ResumeLayout%2A>方法，讓變更生效。</span><span class="sxs-lookup"><span data-stu-id="31784-2830">For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.</span></span>  
  
 <span data-ttu-id="31784-2831">必須有任何暫止呼叫<xref:System.Windows.Forms.Control.SuspendLayout%2A>如<xref:System.Windows.Forms.Control.ResumeLayout%2A>成功呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-2831">There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2832">下列程式碼範例會將兩個按鈕加入至表單。</span><span class="sxs-lookup"><span data-stu-id="31784-2832">The following code example adds two buttons to a form.</span></span> <span data-ttu-id="31784-2833">範例交易使用的按鈕加入<xref:System.Windows.Forms.Control.SuspendLayout%2A>和<xref:System.Windows.Forms.Control.ResumeLayout%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2833">The example transactions the addition of the buttons by using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#2)]
 [!code-vb[Windows.Forms.Control Members2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="ResumeLayout">
      <MemberSignature Language="C#" Value="public void ResumeLayout (bool performLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeLayout(bool performLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResumeLayout (performLayout As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResumeLayout(bool performLayout);" />
      <MemberSignature Language="F#" Value="member this.ResumeLayout : bool -&gt; unit" Usage="control.ResumeLayout performLayout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="performLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="performLayout"><span data-ttu-id="31784-2834"><see langword="true" /> 以執行暫止配置要求，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2834"><see langword="true" /> to execute pending layout requests; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="31784-2835">繼續平常的配置邏輯，選擇性地強制暫止配置要求的立即配置。</span><span class="sxs-lookup"><span data-stu-id="31784-2835">Resumes usual layout logic, optionally forcing an immediate layout of pending layout requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2836">呼叫<xref:System.Windows.Forms.Control.ResumeLayout%2A>方法不論是否有任何暫止配置要求，強制立即配置。</span><span class="sxs-lookup"><span data-stu-id="31784-2836">Calling the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method forces an immediate layout if there are any pending layout requests.</span></span> <span data-ttu-id="31784-2837">當`performLayout`參數設定為`true`，如果有任何暫止配置要求，就會發生的立即配置。</span><span class="sxs-lookup"><span data-stu-id="31784-2837">When the `performLayout` parameter is set to `true`, an immediate layout occurs if there are any pending layout requests.</span></span>  
  
 <span data-ttu-id="31784-2838"><xref:System.Windows.Forms.Control.SuspendLayout%2A>和<xref:System.Windows.Forms.Control.ResumeLayout%2A>一起用來隱藏多個方法是<xref:System.Windows.Forms.Control.Layout>事件而調整控制項的多個屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2838">The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control.</span></span> <span data-ttu-id="31784-2839">例如，您通常會呼叫<xref:System.Windows.Forms.Control.SuspendLayout%2A>方法，然後設定<xref:System.Windows.Forms.Control.Size%2A>， <xref:System.Windows.Forms.Control.Location%2A>， <xref:System.Windows.Forms.Control.Anchor%2A>，或<xref:System.Windows.Forms.Control.Dock%2A>屬性的控制項，然後再呼叫<xref:System.Windows.Forms.Control.ResumeLayout%2A>方法，讓變更生效。</span><span class="sxs-lookup"><span data-stu-id="31784-2839">For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.</span></span>  
  
 <span data-ttu-id="31784-2840">必須有任何暫止呼叫<xref:System.Windows.Forms.Control.SuspendLayout%2A>如<xref:System.Windows.Forms.Control.ResumeLayout%2A>成功呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-2840">There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-2841">將數個控制項加入至父控制項，建議您呼叫<xref:System.Windows.Forms.Control.SuspendLayout%2A>方法初始化加入的控制項之前。</span><span class="sxs-lookup"><span data-stu-id="31784-2841">When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added.</span></span> <span data-ttu-id="31784-2842">將控制項加入至父控制項之後, 呼叫<xref:System.Windows.Forms.Control.ResumeLayout%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2842">After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method.</span></span> <span data-ttu-id="31784-2843">這會增加具有許多控制項的應用程式的效能。</span><span class="sxs-lookup"><span data-stu-id="31784-2843">This will increase the performance of applications with many controls.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public int Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Right" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Right { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Right : int" Usage="System.Windows.Forms.Control.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2844">取得控制項右邊緣和其容器工作區 (Client Area) 左邊緣之間的距離 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-2844">Gets the distance, in pixels, between the right edge of the control and the left edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="31784-2845"><see cref="T:System.Int32" />，代表控制項右緣和其容器工作區左緣之間的距離 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-2845">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the right edge of the control and the left edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2846">值<xref:System.Windows.Forms.Control.Right%2A>屬性的總和等於<xref:System.Windows.Forms.Control.Left%2A>屬性值和<xref:System.Windows.Forms.Control.Width%2A>屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-2846">The value of the <xref:System.Windows.Forms.Control.Right%2A> property is equal to the sum of the <xref:System.Windows.Forms.Control.Left%2A> property value and the <xref:System.Windows.Forms.Control.Width%2A> property value.</span></span>  
  
 <span data-ttu-id="31784-2847"><xref:System.Windows.Forms.Control.Right%2A> 屬性是唯讀的。</span><span class="sxs-lookup"><span data-stu-id="31784-2847">The <xref:System.Windows.Forms.Control.Right%2A> property is read-only.</span></span> <span data-ttu-id="31784-2848">您可以藉由變更的值，間接變更這個屬性值<xref:System.Windows.Forms.Control.Left%2A>或<xref:System.Windows.Forms.Control.Width%2A>屬性或呼叫<xref:System.Windows.Forms.Control.SetBounds%2A>， <xref:System.Windows.Forms.Control.SetBoundsCore%2A>， <xref:System.Windows.Forms.Control.UpdateBounds%2A>，或<xref:System.Windows.Forms.Control.SetClientSizeCore%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2848">You can change this property value indirectly by changing the value of the <xref:System.Windows.Forms.Control.Left%2A> or <xref:System.Windows.Forms.Control.Width%2A> properties or calling the <xref:System.Windows.Forms.Control.SetBounds%2A>, <xref:System.Windows.Forms.Control.SetBoundsCore%2A>, <xref:System.Windows.Forms.Control.UpdateBounds%2A>, or <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2849">下列程式碼範例會建立三個<xref:System.Windows.Forms.Button>表單上的控制項，並將其大小和位置設定使用的各種大小與和位置相關的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2849">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="31784-2850">這個範例需要您有<xref:System.Windows.Forms.Form>有寬度和高度的最少 300 像素為單位。</span><span class="sxs-lookup"><span data-stu-id="31784-2850">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Right" />
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.Control.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2851">取得或設定值，指出控制項的項目是否對齊，以支援使用由右至左字型的地區設定。</span><span class="sxs-lookup"><span data-stu-id="31784-2851">Gets or sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.</span></span></summary>
        <value><span data-ttu-id="31784-2852">其中一個 <see cref="T:System.Windows.Forms.RightToLeft" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2852">One of the <see cref="T:System.Windows.Forms.RightToLeft" /> values.</span></span> <span data-ttu-id="31784-2853">預設值為 <see cref="F:System.Windows.Forms.RightToLeft.Inherit" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2853">The default is <see cref="F:System.Windows.Forms.RightToLeft.Inherit" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2854"><xref:System.Windows.Forms.Control.RightToLeft%2A>屬性是環境的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2854">The <xref:System.Windows.Forms.Control.RightToLeft%2A> property is an ambient property.</span></span> <span data-ttu-id="31784-2855">環境屬性是控制項屬性，如果未設定，將擷取從父控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2855">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="31784-2856">例如，<xref:System.Windows.Forms.Button>具有相同<xref:System.Windows.Forms.Control.BackColor%2A>做為其父系<xref:System.Windows.Forms.Form>預設。</span><span class="sxs-lookup"><span data-stu-id="31784-2856">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="31784-2857">如需環境屬性的詳細資訊，請參閱<xref:System.Windows.Forms.AmbientProperties>類別或<xref:System.Windows.Forms.Control>類別概觀。</span><span class="sxs-lookup"><span data-stu-id="31784-2857">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
 <span data-ttu-id="31784-2858"><xref:System.Windows.Forms.Control.RightToLeft%2A>屬性可用於國際應用程式的語言由右至左，例如希伯來文或阿拉伯文的寫入位置。</span><span class="sxs-lookup"><span data-stu-id="31784-2858">The <xref:System.Windows.Forms.Control.RightToLeft%2A> property is used for international applications where the language is written from right to left, such as Hebrew or Arabic.</span></span> <span data-ttu-id="31784-2859">當這個屬性設定為<xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType>，包含文字的控制項項目會由右至左顯示。</span><span class="sxs-lookup"><span data-stu-id="31784-2859">When this property is set to <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType>, control elements that include text are displayed from right to left.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-2860">如果值<xref:System.Windows.Forms.Control.RightToLeft%2A>屬性在執行階段變更，但不含格式只未經處理的文字會保留。</span><span class="sxs-lookup"><span data-stu-id="31784-2860">If the value of the <xref:System.Windows.Forms.Control.RightToLeft%2A> property is changed at run time, only raw text without formatting is preserved.</span></span>  
  
 <span data-ttu-id="31784-2861">以下是幾個範例的控制項項目會受到<xref:System.Windows.Forms.Control.RightToLeft%2A>屬性值為<xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="31784-2861">The following are a few examples of how control elements are affected by the <xref:System.Windows.Forms.Control.RightToLeft%2A> property value of <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType> :</span></span>  
  
-   <span data-ttu-id="31784-2862">垂直捲軸會顯示在左邊，而不是可捲動的控制項的右端 (例如， <xref:System.Windows.Forms.Form>， <xref:System.Windows.Forms.Panel>、 多行<xref:System.Windows.Forms.TextBox>，和<xref:System.Windows.Forms.RichTextBox>)。</span><span class="sxs-lookup"><span data-stu-id="31784-2862">Vertical scroll bars are displayed on the left side rather than right side of scrollable controls (for example, <xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.Panel>, multiline <xref:System.Windows.Forms.TextBox>, and <xref:System.Windows.Forms.RichTextBox>).</span></span>  
  
-   <span data-ttu-id="31784-2863">水平捲軸的開頭為靠右對齊的捲動方塊 （捲動方塊）。</span><span class="sxs-lookup"><span data-stu-id="31784-2863">Horizontal scroll bars start with the scroll box (thumb) right-aligned.</span></span>  
  
-   <span data-ttu-id="31784-2864">所控制的核取方塊項目對齊`CheckAlign`屬性，為反轉<xref:System.Windows.Forms.CheckBox>和<xref:System.Windows.Forms.RadioButton>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2864">The check box element alignment, controlled by the `CheckAlign` property, is reversed for <xref:System.Windows.Forms.CheckBox> and <xref:System.Windows.Forms.RadioButton> controls.</span></span>  
  
-   <span data-ttu-id="31784-2865">清單方塊、 下拉式方塊和上下按鈕控制項中的項目會靠右對齊。</span><span class="sxs-lookup"><span data-stu-id="31784-2865">Items in list box, combo box, and up-down controls are right aligned.</span></span>  
  
-   <span data-ttu-id="31784-2866">上下按鈕是 靠左對齊上<xref:System.Windows.Forms.NumericUpDown>和<xref:System.Windows.Forms.DomainUpDown>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2866">Up and down buttons are left-aligned on <xref:System.Windows.Forms.NumericUpDown> and <xref:System.Windows.Forms.DomainUpDown> controls.</span></span>  
  
-   <span data-ttu-id="31784-2867">功能表 (<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.MenuItem>，和<xref:System.Windows.Forms.ContextMenu>) 會顯示為靠右對齊。</span><span class="sxs-lookup"><span data-stu-id="31784-2867">Menus (<xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.MenuItem>, and <xref:System.Windows.Forms.ContextMenu>) are displayed right-aligned.</span></span>  
  
-   <span data-ttu-id="31784-2868">在工具列按鈕的對齊方式<xref:System.Windows.Forms.ToolBar>控制項或上的文字對齊<xref:System.Windows.Forms.ToolBarButton>不會受到<xref:System.Windows.Forms.Control.RightToLeft%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2868">The alignment of toolbar buttons on a <xref:System.Windows.Forms.ToolBar> control or the alignment of text on a <xref:System.Windows.Forms.ToolBarButton> is not affected by the <xref:System.Windows.Forms.Control.RightToLeft%2A> property.</span></span>  
  
-   <span data-ttu-id="31784-2869"><xref:System.Windows.Forms.AxHost> 支援由右至左對齊。不過，對 ActiveX 控制項的影響取決於控制項作者實作支援由右至左顯示的範圍。</span><span class="sxs-lookup"><span data-stu-id="31784-2869"><xref:System.Windows.Forms.AxHost> supports right-to-left alignment; however, the effect on an ActiveX control depends on the extent to which the control author implemented support for right-to-left display.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="31784-2870">指派的值不是其中一個 <see cref="T:System.Windows.Forms.RightToLeft" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2870">The assigned value is not one of the <see cref="T:System.Windows.Forms.RightToLeft" /> values.</span></span></exception>
        <block subset="none" type="overrides"><span data-ttu-id="31784-2871"><para>在覆寫<see cref="P:System.Windows.Forms.Control.RightToLeft" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.RightToLeft" />屬性擴充的基底實作。否則，您必須提供所有的實作。您不需要覆寫兩個<see langword="get" />和<see langword="set" />存取子<see cref="P:System.Windows.Forms.Control.RightToLeft" />屬性; 您可以覆寫只能有一個必要。</para></span><span class="sxs-lookup"><span data-stu-id="31784-2871"><para>When overriding the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property; you can override only one if needed.</para></span></span></block>
        <altmember cref="T:System.Windows.Forms.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RightToLeftChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.RightToLeftChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RightToLeftChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RightToLeftChanged;" />
      <MemberSignature Language="F#" Value="member this.RightToLeftChanged : EventHandler " Usage="member this.RightToLeftChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2872">發生在 <see cref="P:System.Windows.Forms.Control.RightToLeft" /> 屬性值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-2872">Occurs when the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2873">如果會引發這個事件<xref:System.Windows.Forms.Control.RightToLeft%2A>以程式設計方式修改或使用者互動變更屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-2873">This event is raised if the <xref:System.Windows.Forms.Control.RightToLeft%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-2874">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-2874">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2875">下列程式碼範例會為事件處理常式時執行<xref:System.Windows.Forms.Control.Text%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="31784-2875">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="31784-2876"><xref:System.Windows.Forms.Control>類別有數種方法具有名稱模式*PropertyName* `Changed`所引發的時機對應*PropertyName*值變更 (*PropertyName*代表對應屬性的名稱)。</span><span class="sxs-lookup"><span data-stu-id="31784-2876">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="31784-2877">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-2877">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="31784-2878">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-2878">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-2879">這個範例需要您有<xref:System.Windows.Forms.Form>包含<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-2879">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RtlTranslateAlignment">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31784-2880">將目前的對齊轉換為適當對齊以支援由右至左文字。</span><span class="sxs-lookup"><span data-stu-id="31784-2880">Converts the current alignment to the appropriate alignment to support right-to-left text.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Drawing.ContentAlignment RtlTranslateAlignment (System.Drawing.ContentAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Drawing.ContentAlignment RtlTranslateAlignment(valuetype System.Drawing.ContentAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Drawing.ContentAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateAlignment (align As ContentAlignment) As ContentAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Drawing::ContentAlignment RtlTranslateAlignment(System::Drawing::ContentAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateAlignment : System.Drawing.ContentAlignment -&gt; System.Drawing.ContentAlignment" Usage="control.RtlTranslateAlignment align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Drawing.ContentAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="31784-2881">其中一個 <see cref="T:System.Drawing.ContentAlignment" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2881">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="31784-2882">將指定的 <see cref="T:System.Drawing.ContentAlignment" /> 轉換為適當的 <see cref="T:System.Drawing.ContentAlignment" />，以支援由右至左的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-2882">Converts the specified <see cref="T:System.Drawing.ContentAlignment" /> to the appropriate <see cref="T:System.Drawing.ContentAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="31784-2883">其中一個 <see cref="T:System.Drawing.ContentAlignment" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2883">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2884">如果<xref:System.Windows.Forms.Control.RightToLeft%2A>屬性<xref:System.Windows.Forms.RightToLeft>設`No`，傳回的值等於`align`參數傳入。</span><span class="sxs-lookup"><span data-stu-id="31784-2884">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Drawing.ContentAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.HorizontalAlignment RtlTranslateAlignment (System.Windows.Forms.HorizontalAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.HorizontalAlignment RtlTranslateAlignment(valuetype System.Windows.Forms.HorizontalAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateAlignment (align As HorizontalAlignment) As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::HorizontalAlignment RtlTranslateAlignment(System::Windows::Forms::HorizontalAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateAlignment : System.Windows.Forms.HorizontalAlignment -&gt; System.Windows.Forms.HorizontalAlignment" Usage="control.RtlTranslateAlignment align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.HorizontalAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="31784-2885">其中一個 <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2885">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="31784-2886">將指定的 <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 轉換為適當的 <see cref="T:System.Windows.Forms.HorizontalAlignment" />，以支援由右至左的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-2886">Converts the specified <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="31784-2887">其中一個 <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2887">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2888">如果<xref:System.Windows.Forms.Control.RightToLeft%2A>屬性<xref:System.Windows.Forms.RightToLeft>設`No`，傳回的值等於`align`參數傳入。</span><span class="sxs-lookup"><span data-stu-id="31784-2888">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.LeftRightAlignment RtlTranslateAlignment (System.Windows.Forms.LeftRightAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.LeftRightAlignment RtlTranslateAlignment(valuetype System.Windows.Forms.LeftRightAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateAlignment (align As LeftRightAlignment) As LeftRightAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::LeftRightAlignment RtlTranslateAlignment(System::Windows::Forms::LeftRightAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateAlignment : System.Windows.Forms.LeftRightAlignment -&gt; System.Windows.Forms.LeftRightAlignment" Usage="control.RtlTranslateAlignment align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LeftRightAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="31784-2889">其中一個 <see cref="T:System.Windows.Forms.LeftRightAlignment" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2889">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="31784-2890">將指定的 <see cref="T:System.Windows.Forms.LeftRightAlignment" /> 轉換為適當的 <see cref="T:System.Windows.Forms.LeftRightAlignment" />，以支援由右至左的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-2890">Converts the specified <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="31784-2891">其中一個 <see cref="T:System.Windows.Forms.LeftRightAlignment" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2891">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2892">如果<xref:System.Windows.Forms.Control.RightToLeft%2A>屬性<xref:System.Windows.Forms.RightToLeft>設`No`，傳回的值等於`align`參數傳入。</span><span class="sxs-lookup"><span data-stu-id="31784-2892">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.LeftRightAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateContent">
      <MemberSignature Language="C#" Value="protected internal System.Drawing.ContentAlignment RtlTranslateContent (System.Drawing.ContentAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance valuetype System.Drawing.ContentAlignment RtlTranslateContent(valuetype System.Drawing.ContentAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function RtlTranslateContent (align As ContentAlignment) As ContentAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Drawing::ContentAlignment RtlTranslateContent(System::Drawing::ContentAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateContent : System.Drawing.ContentAlignment -&gt; System.Drawing.ContentAlignment" Usage="control.RtlTranslateContent align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Drawing.ContentAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="31784-2893">其中一個 <see cref="T:System.Drawing.ContentAlignment" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2893">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="31784-2894">將指定的 <see cref="T:System.Drawing.ContentAlignment" /> 轉換為適當的 <see cref="T:System.Drawing.ContentAlignment" />，以支援由右至左的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-2894">Converts the specified <see cref="T:System.Drawing.ContentAlignment" /> to the appropriate <see cref="T:System.Drawing.ContentAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="31784-2895">其中一個 <see cref="T:System.Drawing.ContentAlignment" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2895">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2896">如果<xref:System.Windows.Forms.Control.RightToLeft%2A>屬性<xref:System.Windows.Forms.RightToLeft>設`No`，傳回的值等於`align`參數傳入。</span><span class="sxs-lookup"><span data-stu-id="31784-2896">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Drawing.ContentAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateHorizontal">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.HorizontalAlignment RtlTranslateHorizontal (System.Windows.Forms.HorizontalAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.HorizontalAlignment RtlTranslateHorizontal(valuetype System.Windows.Forms.HorizontalAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateHorizontal (align As HorizontalAlignment) As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::HorizontalAlignment RtlTranslateHorizontal(System::Windows::Forms::HorizontalAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateHorizontal : System.Windows.Forms.HorizontalAlignment -&gt; System.Windows.Forms.HorizontalAlignment" Usage="control.RtlTranslateHorizontal align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.HorizontalAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="31784-2897">其中一個 <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2897">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="31784-2898">將指定的 <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 轉換為適當的 <see cref="T:System.Windows.Forms.HorizontalAlignment" />，以支援由右至左的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-2898">Converts the specified <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="31784-2899">其中一個 <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2899">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2900">如果<xref:System.Windows.Forms.Control.RightToLeft%2A>屬性<xref:System.Windows.Forms.RightToLeft>設`No`，傳回的值等於`align`參數傳入。</span><span class="sxs-lookup"><span data-stu-id="31784-2900">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateLeftRight">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.LeftRightAlignment RtlTranslateLeftRight (System.Windows.Forms.LeftRightAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.LeftRightAlignment RtlTranslateLeftRight(valuetype System.Windows.Forms.LeftRightAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateLeftRight (align As LeftRightAlignment) As LeftRightAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::LeftRightAlignment RtlTranslateLeftRight(System::Windows::Forms::LeftRightAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateLeftRight : System.Windows.Forms.LeftRightAlignment -&gt; System.Windows.Forms.LeftRightAlignment" Usage="control.RtlTranslateLeftRight align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LeftRightAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="31784-2901">其中一個 <see cref="T:System.Windows.Forms.LeftRightAlignment" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2901">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="31784-2902">將指定的 <see cref="T:System.Windows.Forms.LeftRightAlignment" /> 轉換為適當的 <see cref="T:System.Windows.Forms.LeftRightAlignment" />，以支援由右至左的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-2902">Converts the specified <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="31784-2903">其中一個 <see cref="T:System.Windows.Forms.LeftRightAlignment" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2903">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2904">如果<xref:System.Windows.Forms.Control.RightToLeft%2A>屬性<xref:System.Windows.Forms.RightToLeft>設`No`，傳回的值等於`align`參數傳入。</span><span class="sxs-lookup"><span data-stu-id="31784-2904">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.LeftRightAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Scale">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31784-2905">縮放控制項和任何的子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2905">Scales the control and any child controls.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (System.Drawing.SizeF factor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(valuetype System.Drawing.SizeF factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Drawing.SizeF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (factor As SizeF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(System::Drawing::SizeF factor);" />
      <MemberSignature Language="F#" Value="member this.Scale : System.Drawing.SizeF -&gt; unit" Usage="control.Scale factor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="factor"><span data-ttu-id="31784-2906"><see cref="T:System.Drawing.SizeF" />，包含水平和垂直縮放比例。</span><span class="sxs-lookup"><span data-stu-id="31784-2906">A <see cref="T:System.Drawing.SizeF" /> containing the horizontal and vertical scaling factors.</span></span></param>
        <summary><span data-ttu-id="31784-2907">根據指定的縮放比例來縮放控制項和所有子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2907">Scales the control and all child controls by the specified scaling factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2908"><xref:System.Windows.Forms.Control.Scale%2A>方法，根據指定的縮放比例來縮放控制項`factor`。</span><span class="sxs-lookup"><span data-stu-id="31784-2908">The <xref:System.Windows.Forms.Control.Scale%2A> method scales the control by the specified scaling `factor`.</span></span> <span data-ttu-id="31784-2909">它也會以遞迴方式調整所有子控制項，如果<xref:System.Windows.Forms.Control.ScaleChildren%2A>屬性是`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-2909">It also recursively scales all child controls if the <xref:System.Windows.Forms.Control.ScaleChildren%2A> property is `true`.</span></span> <span data-ttu-id="31784-2910">就內部而言，這個方法會呼叫<xref:System.Windows.Forms.Control.ScaleControl%2A>調整每個控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2910">Internally, this method calls <xref:System.Windows.Forms.Control.ScaleControl%2A> to scale each control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ScaleChildren" />
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float ratio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 ratio) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (ratio As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(float ratio);" />
      <MemberSignature Language="F#" Value="member this.Scale : single -&gt; unit" Usage="control.Scale ratio" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated. Use the Scale(SizeF ratio) method instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ratio" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="ratio"><span data-ttu-id="31784-2911">用於縮放的比例。</span><span class="sxs-lookup"><span data-stu-id="31784-2911">The ratio to use for scaling.</span></span></param>
        <summary><span data-ttu-id="31784-2912">縮放控制項和任何的子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2912">Scales the control and any child controls.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.Scale : single * single -&gt; unit" Usage="control.Scale (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated. Use the Scale(SizeF ratio) method instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx"><span data-ttu-id="31784-2913">水平縮放比例。</span><span class="sxs-lookup"><span data-stu-id="31784-2913">The horizontal scaling factor.</span></span></param>
        <param name="dy"><span data-ttu-id="31784-2914">垂直縮放比例。</span><span class="sxs-lookup"><span data-stu-id="31784-2914">The vertical scaling factor.</span></span></param>
        <summary><span data-ttu-id="31784-2915">縮放整個控制項和任何的子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2915">Scales the entire control and any child controls.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleBitmapLogicalToDevice">
      <MemberSignature Language="C#" Value="public void ScaleBitmapLogicalToDevice (ref System.Drawing.Bitmap logicalBitmap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleBitmapLogicalToDevice(class System.Drawing.Bitmap&amp; logicalBitmap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleBitmapLogicalToDevice(System.Drawing.Bitmap@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleBitmapLogicalToDevice (ByRef logicalBitmap As Bitmap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleBitmapLogicalToDevice(System::Drawing::Bitmap ^ % logicalBitmap);" />
      <MemberSignature Language="F#" Value="member this.ScaleBitmapLogicalToDevice :  -&gt; unit" Usage="control.ScaleBitmapLogicalToDevice logicalBitmap" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalBitmap" Type="System.Drawing.Bitmap&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="logicalBitmap"><span data-ttu-id="31784-2916">要調整的點陣圖。</span><span class="sxs-lookup"><span data-stu-id="31784-2916">The bitmap to scale.</span></span></param>
        <summary><span data-ttu-id="31784-2917">發生 DPI 變更時，將邏輯點陣圖值調整為它的對等裝置單位值。</span><span class="sxs-lookup"><span data-stu-id="31784-2917">Scales a logical bitmap value to it's equivalent device unit value when a DPI change occurs.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleChildren">
      <MemberSignature Language="C#" Value="protected virtual bool ScaleChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScaleChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ScaleChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ScaleChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool ScaleChildren { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ScaleChildren : bool" Usage="System.Windows.Forms.Control.ScaleChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-2918">取得值，以判斷子控制項的縮放。</span><span class="sxs-lookup"><span data-stu-id="31784-2918">Gets a value that determines the scaling of child controls.</span></span></summary>
        <value><span data-ttu-id="31784-2919">如果當呼叫此控制項上的 <see langword="true" /> 方法時會縮放子控制項，則為 <see cref="M:System.Windows.Forms.Control.Scale(System.Single)" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2919"><see langword="true" /> if child controls will be scaled when the <see cref="M:System.Windows.Forms.Control.Scale(System.Single)" /> method on this control is called; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="31784-2920">預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2920">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2921">如果<xref:System.Windows.Forms.Control.ScaleChildren%2A>屬性是`true`，然後在<xref:System.Windows.Forms.Control.Scale%2A>方法會以遞迴方式呼叫<xref:System.Windows.Forms.Control.ScaleControl%2A>每個子控制項的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2921">If the <xref:System.Windows.Forms.Control.ScaleChildren%2A> property is `true`, then the <xref:System.Windows.Forms.Control.Scale%2A> method will recursively call the <xref:System.Windows.Forms.Control.ScaleControl%2A> method of each of its child controls.</span></span>  
  
 <span data-ttu-id="31784-2922">預設實作<xref:System.Windows.Forms.Control.ScaleChildren%2A>一律會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-2922">The default implementation of <xref:System.Windows.Forms.Control.ScaleChildren%2A> always returns `true`.</span></span> <span data-ttu-id="31784-2923">在衍生的類別可以覆寫<xref:System.Windows.Forms.Control.ScaleChildren%2A>傳回`false`表示的縮放比例不應執行它們的子系。</span><span class="sxs-lookup"><span data-stu-id="31784-2923">Derived classes can override <xref:System.Windows.Forms.Control.ScaleChildren%2A> to return `false` to indicate that scaling should not be performed on their children.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Scale(System.Single)" />
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      </Docs>
    </Member>
    <Member MemberName="ScaleControl">
      <MemberSignature Language="C#" Value="protected virtual void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ScaleControl(valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ScaleControl (factor As SizeF, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ScaleControl(System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="abstract member ScaleControl : System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; unit&#xA;override this.ScaleControl : System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="control.ScaleControl (factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="factor"><span data-ttu-id="31784-2924">控制項高度與寬度的縮放比例。</span><span class="sxs-lookup"><span data-stu-id="31784-2924">The factor by which the height and width of the control will be scaled.</span></span></param>
        <param name="specified"><span data-ttu-id="31784-2925"><see cref="T:System.Windows.Forms.BoundsSpecified" /> 值，指定在定義控制項的大小和位置時所用的控制項範圍。</span><span class="sxs-lookup"><span data-stu-id="31784-2925">A <see cref="T:System.Windows.Forms.BoundsSpecified" /> value that specifies the bounds of the control to use when defining its size and position.</span></span></param>
        <summary><span data-ttu-id="31784-2926">縮放控制項的位置、大小、邊框間距和邊界。</span><span class="sxs-lookup"><span data-stu-id="31784-2926">Scales a control's location, size, padding and margin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2927">如果控制項是最上層，將不會縮放控制項的位置。</span><span class="sxs-lookup"><span data-stu-id="31784-2927">If the control is top level, this will not scale the control's location.</span></span> <span data-ttu-id="31784-2928">這無法調整大小的自動調整大小的控制項或其子系。</span><span class="sxs-lookup"><span data-stu-id="31784-2928">This does not scale children or the size of automatically sized controls.</span></span> <span data-ttu-id="31784-2929">您可以省略任何方向中的值變更的縮放比例`specified`參數。</span><span class="sxs-lookup"><span data-stu-id="31784-2929">You can omit scaling in any direction by changing the value of the `specified` parameter.</span></span>  
  
   
  
## Examples  
 <xref:System.Windows.Forms.BoundsSpecified>  
  
 <xref:System.Windows.Forms.Control.Scale%2A>  
  
 <xref:System.Windows.Forms.Control.GetScaledBounds%2A>  
  
 <xref:System.Windows.Forms.Control.SetBoundsCore%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleCore">
      <MemberSignature Language="C#" Value="protected virtual void ScaleCore (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ScaleCore(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ScaleCore (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ScaleCore(float dx, float dy);" />
      <MemberSignature Language="F#" Value="abstract member ScaleCore : single * single -&gt; unit&#xA;override this.ScaleCore : single * single -&gt; unit" Usage="control.ScaleCore (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx"><span data-ttu-id="31784-2930">水平縮放比例。</span><span class="sxs-lookup"><span data-stu-id="31784-2930">The horizontal scaling factor.</span></span></param>
        <param name="dy"><span data-ttu-id="31784-2931">垂直縮放比例。</span><span class="sxs-lookup"><span data-stu-id="31784-2931">The vertical scaling factor.</span></span></param>
        <summary><span data-ttu-id="31784-2932">這個方法與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-2932">This method is not relevant for this class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2933">這個方法與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-2933">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Select">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31784-2934">啟動控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2934">Activates a control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; unit" Usage="control.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2935">啟動控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2935">Activates the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2936"><xref:System.Windows.Forms.Control.Select%2A>方法啟動控制項，如果控制項的`Selectable`樣式位元會設為`true`中<xref:System.Windows.Forms.ControlStyles>、 它包含在另一個控制項和所有其父控制項都是可見並已啟用。</span><span class="sxs-lookup"><span data-stu-id="31784-2936">The <xref:System.Windows.Forms.Control.Select%2A> method activates the control if the control's `Selectable` style bit is set to `true` in <xref:System.Windows.Forms.ControlStyles>, it is contained in another control, and all its parent controls are both visible and enabled.</span></span>  
  
 <span data-ttu-id="31784-2937">下列清單中的 Windows Form 控制項不能選取。</span><span class="sxs-lookup"><span data-stu-id="31784-2937">The Windows Forms controls in the following list are not selectable.</span></span> <span data-ttu-id="31784-2938">從清單中的控制項衍生控制項也不會選取。</span><span class="sxs-lookup"><span data-stu-id="31784-2938">Controls derived from controls in the list will also not be selectable.</span></span>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <span data-ttu-id="31784-2939"><xref:System.Windows.Forms.LinkLabel> （如果沒有在控制項中顯示連結）</span><span class="sxs-lookup"><span data-stu-id="31784-2939"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2940">下列程式碼範例會選取指定<xref:System.Windows.Forms.Control>、 如果可供選取。</span><span class="sxs-lookup"><span data-stu-id="31784-2940">The following code example selects the specified <xref:System.Windows.Forms.Control>, if it is selectable.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#2)]
 [!code-csharp[Windows.Forms.ControlMembers6#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#2)]
 [!code-vb[Windows.Forms.ControlMembers6#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="protected virtual void Select (bool directed, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Select(bool directed, bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Select (directed As Boolean, forward As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Select(bool directed, bool forward);" />
      <MemberSignature Language="F#" Value="abstract member Select : bool * bool -&gt; unit&#xA;override this.Select : bool * bool -&gt; unit" Usage="control.Select (directed, forward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directed" Type="System.Boolean" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="directed"><span data-ttu-id="31784-2941"><see langword="true" /> 以指定要選取控制項的方向，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2941"><see langword="true" /> to specify the direction of the control to select; otherwise, <see langword="false" />.</span></span></param>
        <param name="forward"><span data-ttu-id="31784-2942"><see langword="true" /> 會在定位順序中向前移動。<see langword="false" /> 會在定位順序中向後移動。</span><span class="sxs-lookup"><span data-stu-id="31784-2942"><see langword="true" /> to move forward in the tab order; <see langword="false" /> to move backward in the tab order.</span></span></param>
        <summary><span data-ttu-id="31784-2943">啟動子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2943">Activates a child control.</span></span> <span data-ttu-id="31784-2944">選擇性指定定位順序中要選取控制項的方向。</span><span class="sxs-lookup"><span data-stu-id="31784-2944">Optionally specifies the direction in the tab order to select the control from.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2945">`directed`和`forward`容器樣式控制項使用的參數。</span><span class="sxs-lookup"><span data-stu-id="31784-2945">The `directed` and `forward` parameters are used by container-style controls.</span></span> <span data-ttu-id="31784-2946">當`directed`參數設定為`true`、`forward`參數進行評估以判斷哪一個控制項來選取。</span><span class="sxs-lookup"><span data-stu-id="31784-2946">When the `directed` parameter is set to `true`, the `forward` parameter is evaluated to determine which control to select.</span></span> <span data-ttu-id="31784-2947">當`forward`設為`true`，定位順序中的下一個控制項已選取; 當`false`，選取先前的控制項定位順序中。</span><span class="sxs-lookup"><span data-stu-id="31784-2947">When `forward` is set to `true`, the next control in the tab order is selected; when `false`, the previous control in the tab order is selected.</span></span>  
  
 <span data-ttu-id="31784-2948"><xref:System.Windows.Forms.Control.Select%2A>方法啟動控制項，如果控制項的`Selectable`樣式位元會設為`true`中<xref:System.Windows.Forms.ControlStyles>、 它包含在另一個控制項和所有其父控制項都是可見並已啟用。</span><span class="sxs-lookup"><span data-stu-id="31784-2948">The <xref:System.Windows.Forms.Control.Select%2A> method activates the control if the control's `Selectable` style bit is set to `true` in <xref:System.Windows.Forms.ControlStyles>, it is contained in another control, and all its parent controls are both visible and enabled.</span></span>  
  
 <span data-ttu-id="31784-2949">下列清單中的 Windows Form 控制項不能選取。</span><span class="sxs-lookup"><span data-stu-id="31784-2949">The Windows Forms controls in the following list are not selectable.</span></span> <span data-ttu-id="31784-2950">從清單中的控制項衍生控制項也不會選取。</span><span class="sxs-lookup"><span data-stu-id="31784-2950">Controls derived from controls in the list will also not be selectable.</span></span>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <span data-ttu-id="31784-2951"><xref:System.Windows.Forms.LinkLabel> （如果沒有在控制項中顯示連結）</span><span class="sxs-lookup"><span data-stu-id="31784-2951"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
        <altmember cref="M:System.Windows.Forms.Control.Select" />
      </Docs>
    </Member>
    <Member MemberName="SelectNextControl">
      <MemberSignature Language="C#" Value="public bool SelectNextControl (System.Windows.Forms.Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SelectNextControl(class System.Windows.Forms.Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectNextControl (ctl As Control, forward As Boolean, tabStopOnly As Boolean, nested As Boolean, wrap As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SelectNextControl(System::Windows::Forms::Control ^ ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);" />
      <MemberSignature Language="F#" Value="member this.SelectNextControl : System.Windows.Forms.Control * bool * bool * bool * bool -&gt; bool" Usage="control.SelectNextControl (ctl, forward, tabStopOnly, nested, wrap)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
        <Parameter Name="forward" Type="System.Boolean" />
        <Parameter Name="tabStopOnly" Type="System.Boolean" />
        <Parameter Name="nested" Type="System.Boolean" />
        <Parameter Name="wrap" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ctl"><span data-ttu-id="31784-2952">要從其開始搜尋的 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2952">The <see cref="T:System.Windows.Forms.Control" /> at which to start the search.</span></span></param>
        <param name="forward"><span data-ttu-id="31784-2953"><see langword="true" /> 會在定位順序中向前移動。<see langword="false" /> 會在定位順序中向後移動。</span><span class="sxs-lookup"><span data-stu-id="31784-2953"><see langword="true" /> to move forward in the tab order; <see langword="false" /> to move backward in the tab order.</span></span></param>
        <param name="tabStopOnly"><span data-ttu-id="31784-2954"><see langword="true" /> 會忽略 <see cref="P:System.Windows.Forms.Control.TabStop" /> 屬性設定為 <see langword="false" /> 的控制項，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2954"><see langword="true" /> to ignore the controls with the <see cref="P:System.Windows.Forms.Control.TabStop" /> property set to <see langword="false" />; otherwise, <see langword="false" />.</span></span></param>
        <param name="nested"><span data-ttu-id="31784-2955"><see langword="true" /> 會包含巢狀 (子控制項的子系) 子控制項，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2955"><see langword="true" /> to include nested (children of child controls) child controls; otherwise, <see langword="false" />.</span></span></param>
        <param name="wrap"><span data-ttu-id="31784-2956"><see langword="true" /> 會在到達最後一個控制項後，從定位順序中的第一個控制項繼續搜尋，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2956"><see langword="true" /> to continue searching from the first control in the tab order after the last control has been reached; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="31784-2957">啟動下一個控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2957">Activates the next control.</span></span></summary>
        <returns><span data-ttu-id="31784-2958">如果已啟動控制項，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-2958"><see langword="true" /> if a control was activated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2959"><xref:System.Windows.Forms.Control.SelectNextControl%2A>方法啟動的下一個控制項定位順序中，如果控制項的`Selectable`樣式位元會設為`true`中<xref:System.Windows.Forms.ControlStyles>、 它包含在另一個控制項和所有其父控制項都是可見並已啟用。</span><span class="sxs-lookup"><span data-stu-id="31784-2959">The <xref:System.Windows.Forms.Control.SelectNextControl%2A> method activates the next control in the tab order if the control's `Selectable` style bit is set to `true` in <xref:System.Windows.Forms.ControlStyles>, it is contained in another control, and all its parent controls are both visible and enabled.</span></span>  
  
 <span data-ttu-id="31784-2960">下列清單中的 Windows Form 控制項不能選取。</span><span class="sxs-lookup"><span data-stu-id="31784-2960">The Windows Forms controls in the following list are not selectable.</span></span> <span data-ttu-id="31784-2961">從清單中的控制項衍生控制項也不會選取。</span><span class="sxs-lookup"><span data-stu-id="31784-2961">Controls derived from controls in the list will also not be selectable.</span></span>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <span data-ttu-id="31784-2962"><xref:System.Windows.Forms.LinkLabel> （如果沒有在控制項中顯示連結）</span><span class="sxs-lookup"><span data-stu-id="31784-2962"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>  
  
 <span data-ttu-id="31784-2963">當您藉由呼叫中使用鍵盤 （TAB、 SHIFT + TAB，等等） 變更焦點時<xref:System.Windows.Forms.Control.Select%2A>或<xref:System.Windows.Forms.Control.SelectNextControl%2A>方法，或藉由設定<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType>屬性目前的表單，焦點事件會發生順序如下：</span><span class="sxs-lookup"><span data-stu-id="31784-2963">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="31784-2964">如果<xref:System.Windows.Forms.Control.CausesValidation%2A>屬性設定為`false`、<xref:System.Windows.Forms.Control.Validating>和<xref:System.Windows.Forms.Control.Validated>事件都會被隱藏。</span><span class="sxs-lookup"><span data-stu-id="31784-2964">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-2965">下列程式碼範例示範<xref:System.Windows.Forms.Control.SelectNextControl%2A>某些控制項的表單中使用的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2965">The following code exampleshows the <xref:System.Windows.Forms.Control.SelectNextControl%2A> method being used in a form that has some controls.</span></span> <span data-ttu-id="31784-2966">每次您按一下表單上，啟動下一個控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2966">Each time that you click the form, the next control is activated.</span></span> <span data-ttu-id="31784-2967"><xref:System.Windows.Forms.ContainerControl.ActiveControl%2A>屬性會取得目前作用中控制項的容器控制項中。</span><span class="sxs-lookup"><span data-stu-id="31784-2967">The <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property gets the currently active control in the container control.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.SelectNextControl#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.SelectNextControl#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/vb/form1.vb#1)]  
  
 <span data-ttu-id="31784-2968">下列程式碼範例示範<xref:System.Windows.Forms.Control.SelectNextControl%2A>方法中的表單使用<xref:System.Windows.Forms.Button>和一些其他控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2968">The following code example shows the <xref:System.Windows.Forms.Control.SelectNextControl%2A> method being used in a form that has a <xref:System.Windows.Forms.Button> and some other controls.</span></span> <span data-ttu-id="31784-2969">當您按一下<xref:System.Windows.Forms.Button>之後, 的下一個控制項<xref:System.Windows.Forms.Button>已啟動。</span><span class="sxs-lookup"><span data-stu-id="31784-2969">When you click the <xref:System.Windows.Forms.Button>, the next control after the <xref:System.Windows.Forms.Button> is activated.</span></span> <span data-ttu-id="31784-2970">請注意，您需要取得的父代<xref:System.Windows.Forms.Button>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2970">Notice that you have to get the parent of the <xref:System.Windows.Forms.Button> control.</span></span> <span data-ttu-id="31784-2971">因為<xref:System.Windows.Forms.Button>不是一個容器，呼叫<xref:System.Windows.Forms.Control.SelectNextControl%2A>直接依據<xref:System.Windows.Forms.Button>就不會變更啟用。</span><span class="sxs-lookup"><span data-stu-id="31784-2971">Since <xref:System.Windows.Forms.Button> is not a container, calling <xref:System.Windows.Forms.Control.SelectNextControl%2A> directly on the <xref:System.Windows.Forms.Button> would not change the activation.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.SelectNextControl#2](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/cs/form1.cs#2)]
 [!code-vb[System.Windows.Forms.Control.SelectNextControl#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/vb/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
      </Docs>
    </Member>
    <Member MemberName="SendToBack">
      <MemberSignature Language="C#" Value="public void SendToBack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendToBack() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SendToBack" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendToBack ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendToBack();" />
      <MemberSignature Language="F#" Value="member this.SendToBack : unit -&gt; unit" Usage="control.SendToBack " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-2972">將控制項傳送到疊置順序的後面。</span><span class="sxs-lookup"><span data-stu-id="31784-2972">Sends the control to the back of the z-order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-2973">將控制項移到疊置順序最下層。</span><span class="sxs-lookup"><span data-stu-id="31784-2973">The control is moved to the back of the z-order.</span></span> <span data-ttu-id="31784-2974">如果控制項是其他控制項的子系，子控制項移動到疊置順序最下層。</span><span class="sxs-lookup"><span data-stu-id="31784-2974">If the control is a child of another control, the child control is moved to the back of the z-order.</span></span> <span data-ttu-id="31784-2975">如果控制項是最上層控制項，這個方法無法正常運作除非控制項為作用中。</span><span class="sxs-lookup"><span data-stu-id="31784-2975">If the control is a top-level control, this method will not work correctly unless the control is active.</span></span> <span data-ttu-id="31784-2976">最上層控制項是一個控制項，例如<xref:System.Windows.Forms.Form>，也就是沒有子系的另一個控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2976">A top-level control is a control, such as a <xref:System.Windows.Forms.Form>, that is not a child of another control.</span></span> <span data-ttu-id="31784-2977">現用控制項是可見的控制項，具有輸入焦點。</span><span class="sxs-lookup"><span data-stu-id="31784-2977">An active control is a visible control that has input focus.</span></span> <span data-ttu-id="31784-2978">若要使用<xref:System.Windows.Forms.Control.SendToBack%2A>方法與非作用中、 最上層控制項，先呼叫<xref:System.Windows.Forms.Control.BringToFront%2A>控制項上的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-2978">To use the <xref:System.Windows.Forms.Control.SendToBack%2A> method with an inactive, top-level control, first call the <xref:System.Windows.Forms.Control.BringToFront%2A> method on the control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.BringToFront" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
      </Docs>
    </Member>
    <Member MemberName="SetAutoSizeMode">
      <MemberSignature Language="C#" Value="protected void SetAutoSizeMode (System.Windows.Forms.AutoSizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetAutoSizeMode(valuetype System.Windows.Forms.AutoSizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetAutoSizeMode(System.Windows.Forms.AutoSizeMode)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetAutoSizeMode (mode As AutoSizeMode)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetAutoSizeMode(System::Windows::Forms::AutoSizeMode mode);" />
      <MemberSignature Language="F#" Value="member this.SetAutoSizeMode : System.Windows.Forms.AutoSizeMode -&gt; unit" Usage="control.SetAutoSizeMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Windows.Forms.AutoSizeMode" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="31784-2979">其中一個 <see cref="T:System.Windows.Forms.AutoSizeMode" /> 值。</span><span class="sxs-lookup"><span data-stu-id="31784-2979">One of the <see cref="T:System.Windows.Forms.AutoSizeMode" /> values.</span></span></param>
        <summary><span data-ttu-id="31784-2980">設定值，表示已啟用控制項的 <see cref="P:System.Windows.Forms.Control.AutoSize" /> 屬性時，該控制項的行為模式為何。</span><span class="sxs-lookup"><span data-stu-id="31784-2980">Sets a value indicating how a control will behave when its <see cref="P:System.Windows.Forms.Control.AutoSize" /> property is enabled.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBounds">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31784-2981">設定控制項的範圍。</span><span class="sxs-lookup"><span data-stu-id="31784-2981">Sets the bounds of the control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="public void SetBounds (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBounds(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBounds (x As Integer, y As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBounds(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.SetBounds : int * int * int * int -&gt; unit" Usage="control.SetBounds (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="31784-2982">控制項的新 <see cref="P:System.Windows.Forms.Control.Left" /> 屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-2982">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</span></span></param>
        <param name="y"><span data-ttu-id="31784-2983">控制項的新 <see cref="P:System.Windows.Forms.Control.Top" /> 屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-2983">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</span></span></param>
        <param name="width"><span data-ttu-id="31784-2984">控制項的新 <see cref="P:System.Windows.Forms.Control.Width" /> 屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-2984">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</span></span></param>
        <param name="height"><span data-ttu-id="31784-2985">控制項的新 <see cref="P:System.Windows.Forms.Control.Height" /> 屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-2985">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</span></span></param>
        <summary><span data-ttu-id="31784-2986">將控制項的範圍設定為指定的位置和大小。</span><span class="sxs-lookup"><span data-stu-id="31784-2986">Sets the bounds of the control to the specified location and size.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="public void SetBounds (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBounds(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBounds (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBounds(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="member this.SetBounds : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="control.SetBounds (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="31784-2987">控制項的新 <see cref="P:System.Windows.Forms.Control.Left" /> 屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-2987">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</span></span></param>
        <param name="y"><span data-ttu-id="31784-2988">控制項的新 <see cref="P:System.Windows.Forms.Control.Top" /> 屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-2988">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</span></span></param>
        <param name="width"><span data-ttu-id="31784-2989">控制項的新 <see cref="P:System.Windows.Forms.Control.Width" /> 屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-2989">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</span></span></param>
        <param name="height"><span data-ttu-id="31784-2990">控制項的新 <see cref="P:System.Windows.Forms.Control.Height" /> 屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-2990">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</span></span></param>
        <param name="specified"><span data-ttu-id="31784-2991"><see cref="T:System.Windows.Forms.BoundsSpecified" /> 值的位元組合。</span><span class="sxs-lookup"><span data-stu-id="31784-2991">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values.</span></span> <span data-ttu-id="31784-2992">任何未指定的參數會使用目前的值。</span><span class="sxs-lookup"><span data-stu-id="31784-2992">For any parameter not specified, the current value will be used.</span></span></param>
        <summary><span data-ttu-id="31784-2993">將控制項的指定範圍設定為指定的位置和大小。</span><span class="sxs-lookup"><span data-stu-id="31784-2993">Sets the specified bounds of the control to the specified location and size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="31784-2994">下列程式碼範例是為主<xref:System.Windows.Forms.Form>在螢幕上<xref:System.Windows.Forms.Control.Layout>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-2994">The following code example centers a <xref:System.Windows.Forms.Form> on the screen in the <xref:System.Windows.Forms.Control.Layout> event.</span></span> <span data-ttu-id="31784-2995">如此可保留置中隨著使用者調整它的格式。</span><span class="sxs-lookup"><span data-stu-id="31784-2995">This will keep the form centered as the user resizes it.</span></span> <span data-ttu-id="31784-2996">這個範例需要您已建立<xref:System.Windows.Forms.Form>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-2996">This example requires that you have created a <xref:System.Windows.Forms.Form> control.</span></span>  
  
 [!code-cpp[Control.Layout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Layout/CPP/layout.cpp#1)]
 [!code-csharp[Control.Layout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Layout/CS/layout.cs#1)]
 [!code-vb[Control.Layout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Layout/VB/layout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected virtual void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetBoundsCore (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetBoundsCore(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="abstract member SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit&#xA;override this.SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="control.SetBoundsCore (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="31784-2997">控制項的新 <see cref="P:System.Windows.Forms.Control.Left" /> 屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-2997">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</span></span></param>
        <param name="y"><span data-ttu-id="31784-2998">控制項的新 <see cref="P:System.Windows.Forms.Control.Top" /> 屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-2998">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</span></span></param>
        <param name="width"><span data-ttu-id="31784-2999">控制項的新 <see cref="P:System.Windows.Forms.Control.Width" /> 屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-2999">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</span></span></param>
        <param name="height"><span data-ttu-id="31784-3000">控制項的新 <see cref="P:System.Windows.Forms.Control.Height" /> 屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-3000">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</span></span></param>
        <param name="specified"><span data-ttu-id="31784-3001"><see cref="T:System.Windows.Forms.BoundsSpecified" /> 值的位元組合。</span><span class="sxs-lookup"><span data-stu-id="31784-3001">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values.</span></span></param>
        <summary><span data-ttu-id="31784-3002">執行設定這個控制項的指定範圍的工作。</span><span class="sxs-lookup"><span data-stu-id="31784-3002">Performs the work of setting the specified bounds of this control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3003">一般而言，對應到範圍中不包含參數`specified`參數傳入其目前值。</span><span class="sxs-lookup"><span data-stu-id="31784-3003">Typically, the parameters that correspond to the bounds not included in the `specified` parameter are passed in with their current values.</span></span> <span data-ttu-id="31784-3004">例如， <xref:System.Windows.Forms.Control.Height%2A>， <xref:System.Windows.Forms.Control.Width%2A>，或<xref:System.Drawing.Point.X%2A>或<xref:System.Drawing.Point.Y%2A>屬性<xref:System.Windows.Forms.Control.Location%2A>屬性可以傳入控制項的目前執行個體的參考。</span><span class="sxs-lookup"><span data-stu-id="31784-3004">For example, the <xref:System.Windows.Forms.Control.Height%2A>, <xref:System.Windows.Forms.Control.Width%2A>, or the <xref:System.Drawing.Point.X%2A> or <xref:System.Drawing.Point.Y%2A> properties of the <xref:System.Windows.Forms.Control.Location%2A> property can be passed in with a reference to the current instance of the control.</span></span> <span data-ttu-id="31784-3005">不過會接受所有傳入的值，而套用至控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3005">However all values passed in are honored and applied to the control.</span></span>  
  
 <span data-ttu-id="31784-3006">`boundsSpecified`參數代表控制項的項目<xref:System.Windows.Forms.Control.Bounds%2A>變更您的應用程式。</span><span class="sxs-lookup"><span data-stu-id="31784-3006">The `boundsSpecified` parameter represents the elements of the controls <xref:System.Windows.Forms.Control.Bounds%2A> changed by your application.</span></span> <span data-ttu-id="31784-3007">例如，如果您變更<xref:System.Windows.Forms.Control.Size%2A>控制項的`boundsSpecified`參數值是`Size`值<xref:System.Windows.Forms.BoundsSpecified>。</span><span class="sxs-lookup"><span data-stu-id="31784-3007">For example, if you change the <xref:System.Windows.Forms.Control.Size%2A> of the control, the `boundsSpecified` parameter value is the `Size` value of <xref:System.Windows.Forms.BoundsSpecified>.</span></span> <span data-ttu-id="31784-3008">不過，如果<xref:System.Windows.Forms.Control.Size%2A>調整以回應<xref:System.Windows.Forms.Control.Dock%2A>屬性設定，`boundsSpecified`參數值是`None`值<xref:System.Windows.Forms.BoundsSpecified>。</span><span class="sxs-lookup"><span data-stu-id="31784-3008">However, if the <xref:System.Windows.Forms.Control.Size%2A> is adjusted in response to the <xref:System.Windows.Forms.Control.Dock%2A> property being set, the `boundsSpecified` parameter value is the `None` value of <xref:System.Windows.Forms.BoundsSpecified>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-3009">在 Windows Server 2003 系統上，大小<xref:System.Windows.Forms.Form>受到最大像素寬度和高度的監視。</span><span class="sxs-lookup"><span data-stu-id="31784-3009">On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3010">下列程式碼範例將覆寫<xref:System.Windows.Forms.Control.SetBoundsCore%2A>方法，以確保控制項維持固定的大小。</span><span class="sxs-lookup"><span data-stu-id="31784-3010">The following code example overrides the <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method to ensure that the control remains a fixed size.</span></span> <span data-ttu-id="31784-3011">這個範例需要您有直接或間接衍生自類別<xref:System.Windows.Forms.Control>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-3011">This example requires that you have a class that is either directly or indirectly derived from the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_Methods#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CPP/controlmethods.cpp#1)]
 [!code-csharp[Windows.Forms.Control_Methods#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CS/controlmethods.cs#1)]
 [!code-vb[Windows.Forms.Control_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_Methods/VB/controlmethods.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-3012"><para>在覆寫<see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />方法，以強制變更控制項的範圍。在衍生的類別可以加入大小限制<see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />方法。</para></span><span class="sxs-lookup"><span data-stu-id="31784-3012"><para>When overriding <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> method to force the bounds of the control to change. Derived classes can add size restrictions to the <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> method.</para></span></span></block>
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetClientSizeCore">
      <MemberSignature Language="C#" Value="protected virtual void SetClientSizeCore (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetClientSizeCore(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetClientSizeCore (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetClientSizeCore(int x, int y);" />
      <MemberSignature Language="F#" Value="abstract member SetClientSizeCore : int * int -&gt; unit&#xA;override this.SetClientSizeCore : int * int -&gt; unit" Usage="control.SetClientSizeCore (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="31784-3013">工作區寬度 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-3013">The client area width, in pixels.</span></span></param>
        <param name="y"><span data-ttu-id="31784-3014">工作區高度 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-3014">The client area height, in pixels.</span></span></param>
        <summary><span data-ttu-id="31784-3015">設定控制項工作區的大小。</span><span class="sxs-lookup"><span data-stu-id="31784-3015">Sets the size of the client area of the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3016">工作區開始 （0，0） 的位置並延伸到 (`x`， `y`) 位置。</span><span class="sxs-lookup"><span data-stu-id="31784-3016">The client area starts at the (0, 0) location and extends to the (`x`, `y`) location.</span></span>  
  
 <span data-ttu-id="31784-3017">一般而言，您不應將<xref:System.Windows.Forms.Control.ClientSize%2A>的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3017">Typically, you should not set the <xref:System.Windows.Forms.Control.ClientSize%2A> of the control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3018">下列程式碼範例將覆寫<xref:System.Windows.Forms.Control.SetClientSizeCore%2A>方法，以確保控制項仍為正方形。</span><span class="sxs-lookup"><span data-stu-id="31784-3018">The following code example overrides the <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method to ensure that the control remains square.</span></span> <span data-ttu-id="31784-3019">這個範例需要您有直接或間接衍生自類別<xref:System.Windows.Forms.Control>類別。</span><span class="sxs-lookup"><span data-stu-id="31784-3019">This example requires that you have a class that is either directly or indirectly derived from the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_Methods#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CPP/controlmethods.cpp#2)]
 [!code-csharp[Windows.Forms.Control_Methods#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CS/controlmethods.cs#2)]
 [!code-vb[Windows.Forms.Control_Methods#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_Methods/VB/controlmethods.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-3020"><para>在覆寫<see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" />方法以便<see cref="P:System.Windows.Forms.Control.ClientSize" />調整屬性。在控制項上繪製的相關資訊，請參閱 [呈現 Windows Form Control](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)。</para></span><span class="sxs-lookup"><span data-stu-id="31784-3020"><para>When overriding <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /> method so that the <see cref="P:System.Windows.Forms.Control.ClientSize" /> property is adjusted.  For more information about drawing on controls, see [Rendering a Windows Forms Control](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md).</para></span></span></block>
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
      </Docs>
    </Member>
    <Member MemberName="SetStyle">
      <MemberSignature Language="C#" Value="protected void SetStyle (System.Windows.Forms.ControlStyles flag, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetStyle(valuetype System.Windows.Forms.ControlStyles flag, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetStyle (flag As ControlStyles, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetStyle(System::Windows::Forms::ControlStyles flag, bool value);" />
      <MemberSignature Language="F#" Value="member this.SetStyle : System.Windows.Forms.ControlStyles * bool -&gt; unit" Usage="control.SetStyle (flag, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Windows.Forms.ControlStyles" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="31784-3021">要設定的 <see cref="T:System.Windows.Forms.ControlStyles" /> 位元。</span><span class="sxs-lookup"><span data-stu-id="31784-3021">The <see cref="T:System.Windows.Forms.ControlStyles" /> bit to set.</span></span></param>
        <param name="value"><span data-ttu-id="31784-3022"><see langword="true" /> 會將指定的樣式套用至控制項，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3022"><see langword="true" /> to apply the specified style to the control; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="31784-3023">將指定的 <see cref="T:System.Windows.Forms.ControlStyles" /> 旗標設定為 <see langword="true" /> 或 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3023">Sets a specified <see cref="T:System.Windows.Forms.ControlStyles" /> flag to either <see langword="true" /> or <see langword="false" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3024">控制項樣式位元旗標用來支援的行為分類。</span><span class="sxs-lookup"><span data-stu-id="31784-3024">Control style bit flags are used to categorize supported behavior.</span></span> <span data-ttu-id="31784-3025">控制項可以藉由呼叫啟用樣式<xref:System.Windows.Forms.Control.SetStyle%2A>方法並傳入適當<xref:System.Windows.Forms.ControlStyles>位元 （或位元） 及要設為位元的布林值。</span><span class="sxs-lookup"><span data-stu-id="31784-3025">A control can enable a style by calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method and passing in the appropriate <xref:System.Windows.Forms.ControlStyles> bit (or bits) and the Boolean value to set the bit(s) to.</span></span> <span data-ttu-id="31784-3026">若要判斷指派給指定的值<xref:System.Windows.Forms.ControlStyles>位元，請使用<xref:System.Windows.Forms.Control.GetStyle%2A>方法並傳入<xref:System.Windows.Forms.ControlStyles>成員來評估。</span><span class="sxs-lookup"><span data-stu-id="31784-3026">To determine the value assigned to a specified <xref:System.Windows.Forms.ControlStyles> bit, use the <xref:System.Windows.Forms.Control.GetStyle%2A> method and pass in the <xref:System.Windows.Forms.ControlStyles> member to evaluate.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="31784-3027">設定控制項樣式位元，可以大幅變更控制項的行為。</span><span class="sxs-lookup"><span data-stu-id="31784-3027">Setting the control style bits can substantially change the behavior of the control.</span></span> <span data-ttu-id="31784-3028">檢閱<xref:System.Windows.Forms.ControlStyles>列舉文件以了解變更控制項樣式位元，然後再呼叫的效果<xref:System.Windows.Forms.Control.SetStyle%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-3028">Review the <xref:System.Windows.Forms.ControlStyles> enumeration documentation to understand the effects of changing the control style bits before calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3029">下列程式碼範例可讓在雙重緩衝<xref:System.Windows.Forms.Form>並更新以反映變更的樣式。</span><span class="sxs-lookup"><span data-stu-id="31784-3029">The following code example enables double-buffering on a <xref:System.Windows.Forms.Form> and updates the styles to reflect the changes.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#3)]
 [!code-csharp[Windows.Forms.ControlMembers6#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#3)]
 [!code-vb[Windows.Forms.ControlMembers6#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="SetTopLevel">
      <MemberSignature Language="C#" Value="protected void SetTopLevel (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetTopLevel(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetTopLevel (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetTopLevel(bool value);" />
      <MemberSignature Language="F#" Value="member this.SetTopLevel : bool -&gt; unit" Usage="control.SetTopLevel value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="31784-3030"><see langword="true" /> 會將控制項設定為最上層控制項，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3030"><see langword="true" /> to set the control as the top-level control; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="31784-3031">將控制項設定為最上層控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3031">Sets the control as the top-level control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3032">如果您呼叫<xref:System.Windows.Forms.Control.SetTopLevel%2A>方法<xref:System.Windows.Forms.Form>並傳入的值`false`，無法顯示表單，直到您呼叫<xref:System.Windows.Forms.Control.SetTopLevel%2A>同樣地，值為傳遞`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-3032">If you call the <xref:System.Windows.Forms.Control.SetTopLevel%2A> method of a <xref:System.Windows.Forms.Form> and pass in a value of `false`, the form will not be visible until you call <xref:System.Windows.Forms.Control.SetTopLevel%2A> again, passing in a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="31784-3033"><paramref name="value" /> 參數設定為 <see langword="true" />，而且控制項是 ActiveX 控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3033">The <paramref name="value" /> parameter is set to <see langword="true" /> and the control is an ActiveX control.</span></span></exception>
        <exception cref="T:System.Exception"><span data-ttu-id="31784-3034"><see cref="M:System.Windows.Forms.Control.GetTopLevel" /> 傳回值不等於 <paramref name="value" /> 參數，而且 <see cref="P:System.Windows.Forms.Control.Parent" /> 屬性不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3034">The <see cref="M:System.Windows.Forms.Control.GetTopLevel" /> return value is not equal to the <paramref name="value" /> parameter and the <see cref="P:System.Windows.Forms.Control.Parent" /> property is not <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-3035">若要將控制項設定為最上層控制項，如果它不是任何類型的<see cref="T:System.Windows.Forms.Form" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3035">to set the control as a top-level control if it is of any type other than <see cref="T:System.Windows.Forms.Form" />.</span></span> <span data-ttu-id="31784-3036">如果只要求此使用權限<paramref name="value" />參數是<see langword="true" />和控制項不是 ActiveX 控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3036">This permission is only demanded if the <paramref name="value" /> parameter is <see langword="true" /> and the control is not an ActiveX control.</span></span> <span data-ttu-id="31784-3037">列舉型別相關聯：<see langword="AllWindows" />值<see cref="T:System.Security.Permissions.UIPermissionWindow" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3037">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.GetTopLevel" />
      </Docs>
    </Member>
    <Member MemberName="SetVisibleCore">
      <MemberSignature Language="C#" Value="protected virtual void SetVisibleCore (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetVisibleCore(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetVisibleCore (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetVisibleCore(bool value);" />
      <MemberSignature Language="F#" Value="abstract member SetVisibleCore : bool -&gt; unit&#xA;override this.SetVisibleCore : bool -&gt; unit" Usage="control.SetVisibleCore value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="31784-3038"><see langword="true" /> 表示將控制項設為可見，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3038"><see langword="true" /> to make the control visible; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="31784-3039">將控制項設定為指定的可見狀態。</span><span class="sxs-lookup"><span data-stu-id="31784-3039">Sets the control to the specified visible state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3040">您通常會覆寫此方法以變更控制項的可見性行為。</span><span class="sxs-lookup"><span data-stu-id="31784-3040">You would typically override this method to change the visibility behavior of the control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-3041"><para>在覆寫<see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" />方法，以強制變更控制項的可見性。</para></span><span class="sxs-lookup"><span data-stu-id="31784-3041"><para>When overriding <see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /> method to force the visibility of the control to change.</para></span></span></block>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Show" />
      <MemberSignature Language="VB.NET" Value="Public Sub Show ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show();" />
      <MemberSignature Language="F#" Value="member this.Show : unit -&gt; unit" Usage="control.Show " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-3042">對使用者顯示控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3042">Displays the control to the user.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3043">顯示控制項相當於設定<xref:System.Windows.Forms.Control.Visible%2A>屬性`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-3043">Showing the control is equivalent to setting the <xref:System.Windows.Forms.Control.Visible%2A> property to `true`.</span></span> <span data-ttu-id="31784-3044">之後<xref:System.Windows.Forms.Control.Show%2A>呼叫方法時，<xref:System.Windows.Forms.Control.Visible%2A>屬性會傳回值為`true`直到<xref:System.Windows.Forms.Control.Hide%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-3044">After the <xref:System.Windows.Forms.Control.Show%2A> method is called, the <xref:System.Windows.Forms.Control.Visible%2A> property returns a value of `true` until the <xref:System.Windows.Forms.Control.Hide%2A> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3045">下列程式碼範例會顯示關於 對話方塊，並暫時將藍色方繪製在其介面。</span><span class="sxs-lookup"><span data-stu-id="31784-3045">The following code example displays an about dialog box and temporarily draws a blue square on its surface.</span></span> <span data-ttu-id="31784-3046">這個範例需要您已定義的類別，衍生自<xref:System.Windows.Forms.Form>名為`AboutDialog`。</span><span class="sxs-lookup"><span data-stu-id="31784-3046">This example requires that you have defined a class that derives from <xref:System.Windows.Forms.Form> named `AboutDialog`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#1)]
 [!code-vb[Windows.Forms.Control Members2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
      </Docs>
    </Member>
    <Member MemberName="ShowFocusCues">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShowFocusCues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowFocusCues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ShowFocusCues" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property ShowFocusCues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool ShowFocusCues { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShowFocusCues : bool" Usage="System.Windows.Forms.Control.ShowFocusCues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3047">取得指示控制項是否應顯示焦點矩形 (Focus Rectangle) 的值。</span><span class="sxs-lookup"><span data-stu-id="31784-3047">Gets a value indicating whether the control should display focus rectangles.</span></span></summary>
        <value><span data-ttu-id="31784-3048">如果控制項應顯示焦點矩形，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3048"><see langword="true" /> if the control should display focus rectangles; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3049">如需有關這項功能的詳細資訊，請參閱[WM_CHANGEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx)，[WM_QUERYUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx)，而[WM_UPDATEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)主題。</span><span class="sxs-lookup"><span data-stu-id="31784-3049">For more information about this feature, see the[WM_CHANGEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx),[WM_QUERYUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx), and the [WM_UPDATEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)topics.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-3050"><para>在覆寫<see cref="P:System.Windows.Forms.Control.ShowFocusCues" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.ShowFocusCues" />屬性擴充的基底實作。否則，您必須提供所有的實作。</para></span><span class="sxs-lookup"><span data-stu-id="31784-3050"><para>When overriding the <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> property to extend the base implementation. Otherwise, you must provide all the implementation.</para></span></span></block>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
        <altmember cref="P:System.Windows.Forms.Control.ShowKeyboardCues" />
      </Docs>
    </Member>
    <Member MemberName="ShowKeyboardCues">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShowKeyboardCues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowKeyboardCues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ShowKeyboardCues" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property ShowKeyboardCues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool ShowKeyboardCues { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShowKeyboardCues : bool" Usage="System.Windows.Forms.Control.ShowKeyboardCues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3051">取得值，指出使用者介面是否處於可顯示或隱藏鍵盤快速鍵的適當狀態下。</span><span class="sxs-lookup"><span data-stu-id="31784-3051">Gets a value indicating whether the user interface is in the appropriate state to show or hide keyboard accelerators.</span></span></summary>
        <value><span data-ttu-id="31784-3052">如果可以看到鍵盤快速鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3052"><see langword="true" /> if the keyboard accelerators are visible; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3053">在控制項中建立 Windows Form 設計工具中，鍵盤快速鍵會預設為可見。</span><span class="sxs-lookup"><span data-stu-id="31784-3053">In controls created in the Windows Forms designer, keyboard accelerators are visible by default.</span></span>  
  
 <span data-ttu-id="31784-3054">如需有關這項功能的詳細資訊，請參閱[WM_CHANGEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx)，[WM_QUERYUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx)，而[WM_UPDATEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)主題。</span><span class="sxs-lookup"><span data-stu-id="31784-3054">For more information about this feature, see the[WM_CHANGEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx),[WM_QUERYUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx), and the [WM_UPDATEUISTATE](http://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)topics.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="P:System.Windows.Forms.Control.ShowFocusCues" />
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Windows.Forms.Control.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3055">取得或設定控制項的站台。</span><span class="sxs-lookup"><span data-stu-id="31784-3055">Gets or sets the site of the control.</span></span></summary>
        <value><span data-ttu-id="31784-3056">與 <see cref="T:System.ComponentModel.ISite" /> 相關聯的 <see cref="T:System.Windows.Forms.Control" /> (如果有)。</span><span class="sxs-lookup"><span data-stu-id="31784-3056">The <see cref="T:System.ComponentModel.ISite" /> associated with the <see cref="T:System.Windows.Forms.Control" />, if any.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.ISite" />
        <altmember cref="P:System.ComponentModel.IComponent.Site" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3057">取得或設定控制項的高度和寬度。</span><span class="sxs-lookup"><span data-stu-id="31784-3057">Gets or sets the height and width of the control.</span></span></summary>
        <value><span data-ttu-id="31784-3058">表示控制項高度和寬度的 <see cref="T:System.Drawing.Size" /> (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-3058">The <see cref="T:System.Drawing.Size" /> that represents the height and width of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3059">因為<xref:System.Drawing.Size>類別是實值類型 (`Structure`在 Visual Basic 中`struct`Visual C# 中)，它會傳回值，表示存取屬性會傳回控制項大小的複本。</span><span class="sxs-lookup"><span data-stu-id="31784-3059">Because the <xref:System.Drawing.Size> class is a value type (`Structure` in Visual Basic, `struct` in Visual C#), it is returned by value, meaning accessing the property returns a copy of the size of the control.</span></span> <span data-ttu-id="31784-3060">因此，調整<xref:System.Drawing.Size.Width%2A>或<xref:System.Drawing.Size.Height%2A>屬性<xref:System.Drawing.Size>傳回從這個屬性將不會影響<xref:System.Windows.Forms.Control.Width%2A>或<xref:System.Windows.Forms.Control.Height%2A>的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3060">So, adjusting the <xref:System.Drawing.Size.Width%2A> or <xref:System.Drawing.Size.Height%2A> properties of the <xref:System.Drawing.Size> returned from this property will not affect the <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> of the control.</span></span> <span data-ttu-id="31784-3061">若要調整<xref:System.Windows.Forms.Control.Width%2A>或<xref:System.Windows.Forms.Control.Height%2A>的控制項，您必須設定控制項的<xref:System.Windows.Forms.Control.Width%2A>或<xref:System.Windows.Forms.Control.Height%2A>屬性或 set<xref:System.Windows.Forms.Control.Size%2A>與新的屬性<xref:System.Drawing.Size>。</span><span class="sxs-lookup"><span data-stu-id="31784-3061">To adjust the <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> of the control, you must set the control's <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> property, or set the <xref:System.Windows.Forms.Control.Size%2A> property with a new <xref:System.Drawing.Size>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-3062">若要維持較佳的效能，請勿設定<xref:System.Drawing.Size>其建構函式中的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3062">To maintain better performance, do not set the <xref:System.Drawing.Size> of a control in its constructor.</span></span> <span data-ttu-id="31784-3063">慣用的方法是覆寫<xref:System.Windows.Forms.Control.DefaultSize%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3063">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-3064">在 Windows Server 2003 系統上，大小<xref:System.Windows.Forms.Form>受到最大像素寬度和高度的監視。</span><span class="sxs-lookup"><span data-stu-id="31784-3064">On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3065">下列程式碼範例會將<xref:System.Windows.Forms.Button>至表單，並設定一些常見的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3065">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="31784-3066">此範例錨定至表單的右下角的按鈕，以便調整表單大小時，則會保持其相對位置。</span><span class="sxs-lookup"><span data-stu-id="31784-3066">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="31784-3067">接下來設定<xref:System.Windows.Forms.Control.BackgroundImage%2A>並調整大小的按鈕，以做為相同大小<xref:System.Drawing.Image>。</span><span class="sxs-lookup"><span data-stu-id="31784-3067">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="31784-3068">範例接著會設定<xref:System.Windows.Forms.Control.TabStop%2A>至`true`並設定<xref:System.Windows.Forms.Control.TabIndex%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3068">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="31784-3069">最後，它會加入事件處理常式來處理<xref:System.Windows.Forms.Control.Click>按鈕的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3069">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="31784-3070">這個範例需要您有<xref:System.Windows.Forms.ImageList>名為`imageList1`。</span><span class="sxs-lookup"><span data-stu-id="31784-3070">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SizeChanged;" />
      <MemberSignature Language="F#" Value="member this.SizeChanged : EventHandler " Usage="member this.SizeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3071">發生在 <see cref="P:System.Windows.Forms.Control.Size" /> 屬性值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-3071">Occurs when the <see cref="P:System.Windows.Forms.Control.Size" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3072">最好是使用<xref:System.Windows.Forms.Control.Layout>事件，以處理自訂版面配置。</span><span class="sxs-lookup"><span data-stu-id="31784-3072">It is preferable to use the <xref:System.Windows.Forms.Control.Layout> event to handle custom layouts.</span></span> <span data-ttu-id="31784-3073"><xref:System.Windows.Forms.Control.Layout>引發以回應<xref:System.Windows.Forms.Control.Resize>事件，但也在其他條件時可能需要套用的版面配置。</span><span class="sxs-lookup"><span data-stu-id="31784-3073">The <xref:System.Windows.Forms.Control.Layout> event is raised in response to <xref:System.Windows.Forms.Control.Resize> events, but also in other conditions when layout might need to be applied.</span></span>  
  
 <span data-ttu-id="31784-3074">如果會引發這個事件<xref:System.Windows.Forms.Control.Size%2A>以程式設計方式修改或使用者互動變更屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3074">This event is raised if the <xref:System.Windows.Forms.Control.Size%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-3075">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-3075">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3076">下列程式碼範例示範<xref:System.Windows.Forms.Control.SizeChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3076">The following code example demonstrates the <xref:System.Windows.Forms.Control.SizeChanged> event.</span></span> <span data-ttu-id="31784-3077">執行個體<xref:System.Windows.Forms.Button>已經提供的可以水平及垂直縮放控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3077">An instance of a <xref:System.Windows.Forms.Button> control has been provided that can be scaled both horizontally and vertically.</span></span> <span data-ttu-id="31784-3078">A<xref:System.Windows.Forms.NumericUpDown>執行個體會提供水平及垂直的小數位數值。</span><span class="sxs-lookup"><span data-stu-id="31784-3078">A <xref:System.Windows.Forms.NumericUpDown> instance provides the horizontal and vertical scale value.</span></span> <span data-ttu-id="31784-3079"><xref:System.Windows.Forms.Button>名為執行個體**確定**用來設定的標尺值<xref:System.Windows.Forms.Button>控制項執行個體。</span><span class="sxs-lookup"><span data-stu-id="31784-3079">The <xref:System.Windows.Forms.Button> instance named **OK** is used to set the scale values for the <xref:System.Windows.Forms.Button> control instance.</span></span> <span data-ttu-id="31784-3080">每當控制項的大小變更時，相關聯的事件處理常式<xref:System.Windows.Forms.Control.SizeChanged>稱為控制項的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3080">Whenever the size of the control changes, the event handler associated with the <xref:System.Windows.Forms.Control.SizeChanged> event of the control is called.</span></span> <span data-ttu-id="31784-3081">這個事件處理常式會顯示訊息方塊，指出控制項的大小已變更。</span><span class="sxs-lookup"><span data-stu-id="31784-3081">This event handler displays a message box indicating that the size of the control has changed.</span></span>  
  
 [!code-cpp[Control_Scale1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Scale1/CPP/control_scale1.cpp#2)]
 [!code-csharp[Control_Scale1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Scale1/CS/control_scale1.cs#2)]
 [!code-vb[Control_Scale1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Scale1/VB/control_scale1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="E:System.Windows.Forms.Control.Resize" />
      </Docs>
    </Member>
    <Member MemberName="SizeFromClientSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size SizeFromClientSize (System.Drawing.Size clientSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Size SizeFromClientSize(valuetype System.Drawing.Size clientSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SizeFromClientSize(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SizeFromClientSize (clientSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Drawing::Size SizeFromClientSize(System::Drawing::Size clientSize);" />
      <MemberSignature Language="F#" Value="abstract member SizeFromClientSize : System.Drawing.Size -&gt; System.Drawing.Size&#xA;override this.SizeFromClientSize : System.Drawing.Size -&gt; System.Drawing.Size" Usage="control.SizeFromClientSize clientSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="clientSize"><span data-ttu-id="31784-3082"><see cref="T:System.Drawing.Size" /> 值，表示控制項工作區的高度和寬度。</span><span class="sxs-lookup"><span data-stu-id="31784-3082">A <see cref="T:System.Drawing.Size" /> value representing the height and width of the control's client area.</span></span></param>
        <summary><span data-ttu-id="31784-3083">從控制項的工作區之高度和寬度判斷整個控制項的大小。</span><span class="sxs-lookup"><span data-stu-id="31784-3083">Determines the size of the entire control from the height and width of its client area.</span></span></summary>
        <returns><span data-ttu-id="31784-3084"><see cref="T:System.Drawing.Size" /> 值，表示整個控制項的高度和寬度。</span><span class="sxs-lookup"><span data-stu-id="31784-3084">A <see cref="T:System.Drawing.Size" /> value representing the height and width of the entire control.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.StyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StyleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ StyleChanged;" />
      <MemberSignature Language="F#" Value="member this.StyleChanged : EventHandler " Usage="member this.StyleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3085">發生於控制項樣式變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-3085">Occurs when the control style changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3086"><xref:System.Windows.Forms.Control.StyleChanged>就會發生事件時<xref:System.Windows.Forms.ControlStyles>旗標已加入或變更。</span><span class="sxs-lookup"><span data-stu-id="31784-3086">The <xref:System.Windows.Forms.Control.StyleChanged> event occurs when <xref:System.Windows.Forms.ControlStyles> flags have been added or changed.</span></span>  
  
 <span data-ttu-id="31784-3087">如果控制項樣式變更以程式設計方式修改或使用者互動，就會引發這個事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3087">This event is raised if the control style is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-3088">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-3088">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3089">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-3089">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-3090">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.StyleChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3090">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.StyleChanged> event.</span></span> <span data-ttu-id="31784-3091">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-3091">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-3092">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-3092">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-3093">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-3093">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-3094">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.StyleChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3094">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.StyleChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#68)]
 [!code-vb[System.Windows.Forms.EventExamples#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#68)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="SuspendLayout">
      <MemberSignature Language="C#" Value="public void SuspendLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SuspendLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SuspendLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub SuspendLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SuspendLayout();" />
      <MemberSignature Language="F#" Value="member this.SuspendLayout : unit -&gt; unit" Usage="control.SuspendLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-3095">暫停控制項的配置邏輯。</span><span class="sxs-lookup"><span data-stu-id="31784-3095">Temporarily suspends the layout logic for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3096">控制項的配置邏輯已暫止，直到<xref:System.Windows.Forms.Control.ResumeLayout%2A>方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-3096">The layout logic of the control is suspended until the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method is called.</span></span>  
  
 <span data-ttu-id="31784-3097"><xref:System.Windows.Forms.Control.SuspendLayout%2A>和<xref:System.Windows.Forms.Control.ResumeLayout%2A>一起用來隱藏多個方法是<xref:System.Windows.Forms.Control.Layout>事件而調整控制項的多個屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3097">The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control.</span></span> <span data-ttu-id="31784-3098">例如，您通常會呼叫<xref:System.Windows.Forms.Control.SuspendLayout%2A>方法，然後設定<xref:System.Windows.Forms.Control.Size%2A>， <xref:System.Windows.Forms.Control.Location%2A>， <xref:System.Windows.Forms.Control.Anchor%2A>，或<xref:System.Windows.Forms.Control.Dock%2A>屬性的控制項，然後再呼叫<xref:System.Windows.Forms.Control.ResumeLayout%2A>方法，讓變更生效。</span><span class="sxs-lookup"><span data-stu-id="31784-3098">For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.</span></span>  
  
 <span data-ttu-id="31784-3099">必須有任何暫止呼叫<xref:System.Windows.Forms.Control.SuspendLayout%2A>如<xref:System.Windows.Forms.Control.ResumeLayout%2A>成功呼叫。</span><span class="sxs-lookup"><span data-stu-id="31784-3099">There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31784-3100">將數個控制項加入至父控制項，建議您呼叫<xref:System.Windows.Forms.Control.SuspendLayout%2A>方法初始化加入的控制項之前。</span><span class="sxs-lookup"><span data-stu-id="31784-3100">When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added.</span></span> <span data-ttu-id="31784-3101">將控制項加入至父控制項之後, 呼叫<xref:System.Windows.Forms.Control.ResumeLayout%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-3101">After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method.</span></span> <span data-ttu-id="31784-3102">這會增加具有許多控制項的應用程式的效能。</span><span class="sxs-lookup"><span data-stu-id="31784-3102">This will increase the performance of applications with many controls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3103">下列程式碼範例會將兩個按鈕加入至表單。</span><span class="sxs-lookup"><span data-stu-id="31784-3103">The following code example adds two buttons to a form.</span></span> <span data-ttu-id="31784-3104">範例交易使用的按鈕加入<xref:System.Windows.Forms.Control.SuspendLayout%2A>和<xref:System.Windows.Forms.Control.ResumeLayout%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-3104">The example transactions the addition of the buttons by using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#2)]
 [!code-vb[Windows.Forms.Control Members2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragDrop">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragDrop (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragDrop(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragDrop (drgEvent As DragEventArgs) Implements IDropTarget.OnDragDrop" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragDrop(System::Windows::Forms::DragEventArgs ^ drgEvent) = System::Windows::Forms::IDropTarget::OnDragDrop;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragDrop(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgEvent"><span data-ttu-id="31784-3105"><see cref="T:System.Windows.Forms.DragEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-3105">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-3106">引發 <see cref="E:System.Windows.Forms.Control.DragDrop" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3106">Raises the <see cref="E:System.Windows.Forms.Control.DragDrop" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragEnter">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragEnter (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragEnter(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragEnter (drgEvent As DragEventArgs) Implements IDropTarget.OnDragEnter" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragEnter(System::Windows::Forms::DragEventArgs ^ drgEvent) = System::Windows::Forms::IDropTarget::OnDragEnter;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragEnter(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgEvent"><span data-ttu-id="31784-3107"><see cref="T:System.Windows.Forms.DragEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-3107">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-3108">引發 <see cref="E:System.Windows.Forms.Control.DragEnter" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3108">Raises the <see cref="E:System.Windows.Forms.Control.DragEnter" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragLeave">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragLeave (e As EventArgs) Implements IDropTarget.OnDragLeave" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs ^ e) = System::Windows::Forms::IDropTarget::OnDragLeave;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragLeave(System.EventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="31784-3109"><see cref="T:System.EventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-3109">A <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-3110">引發 <see cref="E:System.Windows.Forms.Control.DragLeave" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3110">Raises the <see cref="E:System.Windows.Forms.Control.DragLeave" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragOver">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragOver (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragOver(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragOver(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragOver (drgEvent As DragEventArgs) Implements IDropTarget.OnDragOver" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragOver(System::Windows::Forms::DragEventArgs ^ drgEvent) = System::Windows::Forms::IDropTarget::OnDragOver;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragOver(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgEvent"><span data-ttu-id="31784-3111"><see cref="T:System.Windows.Forms.DragEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="31784-3111">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="31784-3112">引發 <see cref="E:System.Windows.Forms.Control.DragOver" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3112">Raises the <see cref="E:System.Windows.Forms.Control.DragOver" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemColorsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SystemColorsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SystemColorsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.SystemColorsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SystemColorsChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SystemColorsChanged;" />
      <MemberSignature Language="F#" Value="member this.SystemColorsChanged : EventHandler " Usage="member this.SystemColorsChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3113">發生於系統色彩變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-3113">Occurs when the system colors change.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3114">如果會引發這個事件<xref:System.Drawing.SystemColors>來以程式設計方式修改或使用者互動變更。</span><span class="sxs-lookup"><span data-stu-id="31784-3114">This event is raised if the <xref:System.Drawing.SystemColors> is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-3115">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-3115">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3116">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-3116">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-3117">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.SystemColorsChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3117">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.SystemColorsChanged> event.</span></span> <span data-ttu-id="31784-3118">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-3118">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-3119">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-3119">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-3120">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-3120">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-3121">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.SystemColorsChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3121">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.SystemColorsChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#69)]
 [!code-vb[System.Windows.Forms.EventExamples#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#69)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public int TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TabIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TabIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TabIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TabIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TabIndex : int with get, set" Usage="System.Windows.Forms.Control.TabIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3122">取得或設定控制項容器中的控制項定位順序。</span><span class="sxs-lookup"><span data-stu-id="31784-3122">Gets or sets the tab order of the control within its container.</span></span></summary>
        <value><span data-ttu-id="31784-3123">在控制項集合內的控制項之索引值 (在其容器內)。</span><span class="sxs-lookup"><span data-stu-id="31784-3123">The index value of the control within the set of controls within its container.</span></span> <span data-ttu-id="31784-3124">容器內的控制項會包含在定位順序中。</span><span class="sxs-lookup"><span data-stu-id="31784-3124">The controls in the container are included in the tab order.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3125">定位點索引可以包含任何有效的整數大於或等於零，較低的數字，在稍早在定位順序。</span><span class="sxs-lookup"><span data-stu-id="31784-3125">A tab index can consist of any valid integer greater than or equal to zero, lower numbers being earlier in the tab order.</span></span> <span data-ttu-id="31784-3126">如果在相同的父控制項上的多個控制項具有相同的索引，控制項疊置順序會決定的順序，以循環的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3126">If more than one control on the same parent control has the same tab index, the z-order of the controls determines the order to cycle through the controls.</span></span>  
  
 <span data-ttu-id="31784-3127">控制項的定位順序，包含其<xref:System.Windows.Forms.Control.TabStop%2A>屬性必須設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="31784-3127">For a control to be included in the tab order, its <xref:System.Windows.Forms.Control.TabStop%2A> property must be set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3128">下列程式碼範例會將<xref:System.Windows.Forms.Button>至表單，並設定一些常見的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3128">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="31784-3129">此範例錨定至表單的右下角的按鈕，以便調整表單大小時，則會保持其相對位置。</span><span class="sxs-lookup"><span data-stu-id="31784-3129">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="31784-3130">接下來設定<xref:System.Windows.Forms.Control.BackgroundImage%2A>並調整大小的按鈕，以做為相同大小<xref:System.Drawing.Image>。</span><span class="sxs-lookup"><span data-stu-id="31784-3130">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="31784-3131">範例接著會設定<xref:System.Windows.Forms.Control.TabStop%2A>至`true`並設定<xref:System.Windows.Forms.Control.TabIndex%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3131">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="31784-3132">最後，它會加入事件處理常式來處理<xref:System.Windows.Forms.Control.Click>按鈕的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3132">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="31784-3133">這個範例需要您有<xref:System.Windows.Forms.ImageList>名為`imageList1`。</span><span class="sxs-lookup"><span data-stu-id="31784-3133">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
        <altmember cref="P:System.Windows.Forms.Control.TabStop" />
      </Docs>
    </Member>
    <Member MemberName="TabIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TabIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TabIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TabIndexChanged;" />
      <MemberSignature Language="F#" Value="member this.TabIndexChanged : EventHandler " Usage="member this.TabIndexChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3134">發生在 <see cref="P:System.Windows.Forms.Control.TabIndex" /> 屬性值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-3134">Occurs when the <see cref="P:System.Windows.Forms.Control.TabIndex" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3135">如果會引發這個事件<xref:System.Windows.Forms.Control.TabIndex%2A>以程式設計方式修改或使用者互動變更屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3135">This event is raised if the <xref:System.Windows.Forms.Control.TabIndex%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-3136">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-3136">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3137">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-3137">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-3138">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.TabIndexChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3138">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.TabIndexChanged> event.</span></span> <span data-ttu-id="31784-3139">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-3139">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-3140">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-3140">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-3141">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-3141">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-3142">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.TabIndexChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3142">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.TabIndexChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#25)]
 [!code-vb[System.Windows.Forms.EventExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="TabStop">
      <MemberSignature Language="C#" Value="public bool TabStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TabStop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TabStop" />
      <MemberSignature Language="VB.NET" Value="Public Property TabStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TabStop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TabStop : bool with get, set" Usage="System.Windows.Forms.Control.TabStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-516)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3143">取得或設定值，指出使用者是否能使用 TAB 鍵，將焦點 (Focus) 給予這個控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3143">Gets or sets a value indicating whether the user can give the focus to this control using the TAB key.</span></span></summary>
        <value><span data-ttu-id="31784-3144">如果使用者可以使用 TAB 鍵將焦點置於這個控制項，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3144"><see langword="true" /> if the user can give the focus to the control using the TAB key; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="31784-3145">預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3145">The default is <see langword="true" />.</span></span>  
  
 <span data-ttu-id="31784-3146"><block subset="none" type="note"><para> 這個屬性一律會傳回<see langword="true" />執行個體<see cref="T:System.Windows.Forms.Form" />類別。  </para></block></span><span class="sxs-lookup"><span data-stu-id="31784-3146"><block subset="none" type="note"><para> This property will always return <see langword="true" /> for an instance of the <see cref="T:System.Windows.Forms.Form" /> class.  </para></block></span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3147">當使用者按下 TAB 鍵時，則會將輸入的焦點設定為定位順序中的下一個控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3147">When the user presses the TAB key, the input focus is set to the next control in the tab order.</span></span> <span data-ttu-id="31784-3148">控制與<xref:System.Windows.Forms.Control.TabStop%2A>屬性值為`false`未被納入的定位順序中的控制項集合。</span><span class="sxs-lookup"><span data-stu-id="31784-3148">Controls with the <xref:System.Windows.Forms.Control.TabStop%2A> property value of `false` are not included in the collection of controls in the tab order.</span></span> <span data-ttu-id="31784-3149">定位順序都可以藉由設定控制項的操作<xref:System.Windows.Forms.Control.TabIndex%2A>屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-3149">The tab order can be manipulated by setting the control's <xref:System.Windows.Forms.Control.TabIndex%2A> property value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3150">下列程式碼範例會將<xref:System.Windows.Forms.Button>至表單，並設定一些常見的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3150">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="31784-3151">此範例錨定至表單的右下角的按鈕，以便調整表單大小時，則會保持其相對位置。</span><span class="sxs-lookup"><span data-stu-id="31784-3151">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="31784-3152">接下來設定<xref:System.Windows.Forms.Control.BackgroundImage%2A>並調整大小的按鈕，以做為相同大小<xref:System.Drawing.Image>。</span><span class="sxs-lookup"><span data-stu-id="31784-3152">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="31784-3153">範例接著會設定<xref:System.Windows.Forms.Control.TabStop%2A>至`true`並設定<xref:System.Windows.Forms.Control.TabIndex%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3153">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="31784-3154">最後，它會加入事件處理常式來處理<xref:System.Windows.Forms.Control.Click>按鈕的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3154">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="31784-3155">這個範例需要您有<xref:System.Windows.Forms.ImageList>名為`imageList1`。</span><span class="sxs-lookup"><span data-stu-id="31784-3155">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="TabStopChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabStopChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabStopChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TabStopChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TabStopChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TabStopChanged;" />
      <MemberSignature Language="F#" Value="member this.TabStopChanged : EventHandler " Usage="member this.TabStopChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3156">發生在 <see cref="P:System.Windows.Forms.Control.TabStop" /> 屬性值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-3156">Occurs when the <see cref="P:System.Windows.Forms.Control.TabStop" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3157">如果會引發這個事件<xref:System.Windows.Forms.Control.TabStop%2A>以程式設計方式修改或使用者互動變更屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3157">This event is raised if the <xref:System.Windows.Forms.Control.TabStop%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-3158">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-3158">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3159">下列程式碼範例示範如何使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="31784-3159">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="31784-3160">在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.Control.TabStopChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3160">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.TabStopChanged> event.</span></span> <span data-ttu-id="31784-3161">此報表可協助您了解事件發生的時機，並可協助您偵錯。</span><span class="sxs-lookup"><span data-stu-id="31784-3161">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="31784-3162">若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-3162">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="31784-3163">若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.Control>，例如<xref:System.Windows.Forms.Button>或<xref:System.Windows.Forms.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-3163">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="31784-3164">然後將其命名執行個體`Control1`，並確認事件處理常式關聯<xref:System.Windows.Forms.Control.TabStopChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3164">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.TabStopChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#26)]
 [!code-vb[System.Windows.Forms.EventExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.TabStop" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Control.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3165">取得或設定物件，其包含控制項相關資料。</span><span class="sxs-lookup"><span data-stu-id="31784-3165">Gets or sets the object that contains data about the control.</span></span></summary>
        <value><span data-ttu-id="31784-3166">包含有關控制項資料的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3166">An <see cref="T:System.Object" /> that contains data about the control.</span></span> <span data-ttu-id="31784-3167">預設值為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3167">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3168">衍生型別<xref:System.Object>類別可以指派給這個屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3168">Any type derived from the <xref:System.Object> class can be assigned to this property.</span></span> <span data-ttu-id="31784-3169">如果<xref:System.Windows.Forms.Control.Tag%2A>屬性透過 Windows Form 設計工具設定，可以指定只會將文字。</span><span class="sxs-lookup"><span data-stu-id="31784-3169">If the <xref:System.Windows.Forms.Control.Tag%2A> property is set through the Windows Forms designer, only text can be assigned.</span></span>  
  
 <span data-ttu-id="31784-3170">常見用途<xref:System.Windows.Forms.Control.Tag%2A>屬性是儲存緊密地與控制項相關聯的資料。</span><span class="sxs-lookup"><span data-stu-id="31784-3170">A common use for the <xref:System.Windows.Forms.Control.Tag%2A> property is to store data that is closely associated with the control.</span></span> <span data-ttu-id="31784-3171">例如，如果您有顯示客戶的相關資訊的控制項，您可能會儲存<xref:System.Data.DataSet>，其中包含該控制項中的客戶的訂單記錄<xref:System.Windows.Forms.Control.Tag%2A>屬性，以便快速存取資料。</span><span class="sxs-lookup"><span data-stu-id="31784-3171">For example, if you have a control that displays information about a customer, you might store a <xref:System.Data.DataSet> that contains the customer's order history in that control's <xref:System.Windows.Forms.Control.Tag%2A> property so the data can be accessed quickly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3172">下列程式碼範例會顯示表單，並將`Customer`中其<xref:System.Windows.Forms.Control.Tag%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3172">The following code example displays a form and stores a `Customer` in its <xref:System.Windows.Forms.Control.Tag%2A> property.</span></span> <span data-ttu-id="31784-3173">這個範例需要您已定義的類別，衍生自<xref:System.Windows.Forms.Form>名為`CustomerForm`和您定義`Customer`。</span><span class="sxs-lookup"><span data-stu-id="31784-3173">This example requires that you have defined a class that derives from <xref:System.Windows.Forms.Form> named `CustomerForm` and that you have defined a `Customer`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#3)]
 [!code-vb[Windows.Forms.Control Members2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.Control.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-517)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3174">取得或設定這個控制項的相關文字。</span><span class="sxs-lookup"><span data-stu-id="31784-3174">Gets or sets the text associated with this control.</span></span></summary>
        <value><span data-ttu-id="31784-3175">與這個控制項關聯的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-3175">The text associated with this control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3176"><xref:System.Windows.Forms.Control.Text%2A>控制項的屬性在每個衍生類別中有不同的使用方式。</span><span class="sxs-lookup"><span data-stu-id="31784-3176">The <xref:System.Windows.Forms.Control.Text%2A> property of the control is used differently by each derived class.</span></span> <span data-ttu-id="31784-3177">例如<xref:System.Windows.Forms.Control.Text%2A>屬性<xref:System.Windows.Forms.Form>會顯示在表單頂端的標題列、 非常少的字元計數和通常會顯示應用程式或文件的名稱。</span><span class="sxs-lookup"><span data-stu-id="31784-3177">For example the <xref:System.Windows.Forms.Control.Text%2A> property of a <xref:System.Windows.Forms.Form> is displayed in the title bar at the top of the form, is fairly small in character count, and usually displays the application or document name.</span></span> <span data-ttu-id="31784-3178">不過，<xref:System.Windows.Forms.Control.Text%2A>屬性<xref:System.Windows.Forms.RichTextBox>可能很大，而且可包含許多用來格式化文字的隱藏字元。</span><span class="sxs-lookup"><span data-stu-id="31784-3178">However, the <xref:System.Windows.Forms.Control.Text%2A> property of a <xref:System.Windows.Forms.RichTextBox> can be large and can include numerous nonvisual characters used to format the text.</span></span> <span data-ttu-id="31784-3179">例如，將中顯示的文字<xref:System.Windows.Forms.RichTextBox>可以藉由調整格式化<xref:System.Drawing.Font>屬性，或加上空格或定位字元對齊的文字。</span><span class="sxs-lookup"><span data-stu-id="31784-3179">For example, the text displayed in a <xref:System.Windows.Forms.RichTextBox> can be formatted by adjusting the <xref:System.Drawing.Font> properties, or by the addition of spaces or tab characters to align the text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3180">下列程式碼範例會建立<xref:System.Windows.Forms.GroupBox>並設定一些常見的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3180">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="31784-3181">此範例會建立<xref:System.Windows.Forms.TextBox>並設定其<xref:System.Windows.Forms.Control.Location%2A>群組方塊內。</span><span class="sxs-lookup"><span data-stu-id="31784-3181">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="31784-3182">接下來，設定<xref:System.Windows.Forms.Control.Text%2A>屬性群組 方塊中，群組方塊的停駐在表單頂端。</span><span class="sxs-lookup"><span data-stu-id="31784-3182">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="31784-3183">最後，它會停用 [群組] 方塊設定<xref:System.Windows.Forms.Control.Enabled%2A>屬性`false`，因而導致停用群組內包含的所有控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3183">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="31784-3184"><para>在覆寫<see cref="P:System.Windows.Forms.Control.Text" />屬性在衍生類別中，使用基底類別的<see cref="P:System.Windows.Forms.Control.Text" />屬性擴充的基底實作。否則，您必須提供所有的實作。您不需要覆寫兩個<see langword="get" />和<see langword="set" />存取子<see cref="P:System.Windows.Forms.Control.Text" />屬性; 您可以覆寫只能有一個必要。</para></span><span class="sxs-lookup"><span data-stu-id="31784-3184"><para>When overriding the <see cref="P:System.Windows.Forms.Control.Text" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Text" /> property to extend the base implementation. Otherwise, you must provide all the implementation. You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Text" /> property; you can override only one if needed.</para></span></span></block>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberSignature Language="F#" Value="member this.TextChanged : EventHandler " Usage="member this.TextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3185">發生在 <see cref="P:System.Windows.Forms.Control.Text" /> 屬性值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-3185">Occurs when the <see cref="P:System.Windows.Forms.Control.Text" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3186">如果會引發這個事件<xref:System.Windows.Forms.Control.Text%2A>以程式設計方式修改或使用者互動變更屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3186">This event is raised if the <xref:System.Windows.Forms.Control.Text%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-3187">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-3187">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3188">下列程式碼範例會變更<xref:System.Windows.Forms.Control.ForeColor%2A>的<xref:System.Windows.Forms.TextBox>顯示貨幣資料。</span><span class="sxs-lookup"><span data-stu-id="31784-3188">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="31784-3189">此範例會將文字轉換成十進位數字和變更<xref:System.Windows.Forms.Control.ForeColor%2A>至<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>如果數值為負數，<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>如果數字為正數。</span><span class="sxs-lookup"><span data-stu-id="31784-3189">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="31784-3190">這個範例需要您有<xref:System.Windows.Forms.Form>包含<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-3190">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Text" />
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public int Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Top { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Top : int with get, set" Usage="System.Windows.Forms.Control.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3191">取得或設定控制項上邊緣和其容器工作區 (Client Area) 上邊緣之間的距離 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-3191">Gets or sets the distance, in pixels, between the top edge of the control and the top edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="31784-3192"><see cref="T:System.Int32" />，代表控制項下緣和其容器工作區上緣之間的距離 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-3192">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3193"><xref:System.Windows.Forms.Control.Top%2A>屬性值相當於<xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType>屬性<xref:System.Windows.Forms.Control.Location%2A>控制項的屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-3193">The <xref:System.Windows.Forms.Control.Top%2A> property value is equivalent to the <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> property of the <xref:System.Windows.Forms.Control.Location%2A> property value of the control.</span></span>  
  
 <span data-ttu-id="31784-3194">所做的變更<xref:System.Windows.Forms.Control.Height%2A>和<xref:System.Windows.Forms.Control.Top%2A>屬性值會使<xref:System.Windows.Forms.Control.Bottom%2A>變更控制項的屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-3194">Changes made to the <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Top%2A> property values cause the <xref:System.Windows.Forms.Control.Bottom%2A> property value of the control to change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3195">下列程式碼範例會建立三個<xref:System.Windows.Forms.Button>表單上的控制項，並將其大小和位置設定使用的各種大小與和位置相關的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3195">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="31784-3196">這個範例需要您有<xref:System.Windows.Forms.Form>有寬度和高度的最少 300 像素為單位。</span><span class="sxs-lookup"><span data-stu-id="31784-3196">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Point.Y" />
        <altmember cref="P:System.Windows.Forms.Control.Bottom" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
      </Docs>
    </Member>
    <Member MemberName="TopLevelControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control TopLevelControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control TopLevelControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TopLevelControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TopLevelControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ TopLevelControl { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TopLevelControl : System.Windows.Forms.Control" Usage="System.Windows.Forms.Control.TopLevelControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3197">取得沒有其他 Windows Form 父控制項的父控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3197">Gets the parent control that is not parented by another Windows Forms control.</span></span> <span data-ttu-id="31784-3198">通常，這會是內含控制項最外層的 <see cref="T:System.Windows.Forms.Form" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3198">Typically, this is the outermost <see cref="T:System.Windows.Forms.Form" /> that the control is contained in.</span></span></summary>
        <value><span data-ttu-id="31784-3199"><see cref="T:System.Windows.Forms.Control" />，表示包含目前控制項的最上層控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3199">The <see cref="T:System.Windows.Forms.Control" /> that represents the top-level control that contains the current control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3200">最上層控制項定義為父控制項的不由另一個 Windows Form 控制項的父代。</span><span class="sxs-lookup"><span data-stu-id="31784-3200">The top-level control is defined as the parent control that is not parented by another Windows Forms control.</span></span> <span data-ttu-id="31784-3201">通常，這會是內含控制項最外層的 <xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="31784-3201">Typically, this is the outermost <xref:System.Windows.Forms.Form> that the control is contained in.</span></span> <span data-ttu-id="31784-3202">例如，如果內含控制項上的 MDI 子系<xref:System.Windows.Forms.Form>，那麼最上層控制項是多個文件介面 (MDI) 父<xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="31784-3202">For example, if the control is contained on an MDI child <xref:System.Windows.Forms.Form>, then the top-level control is the Multiple Document Interface (MDI) parent <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="31784-3203">如果控制項不父代上<xref:System.Windows.Forms.Form>，這個屬性會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="31784-3203">If the control is not parented on a <xref:System.Windows.Forms.Form>, this property will return `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="31784-3204">若要取得這個屬性值的所有視窗。</span><span class="sxs-lookup"><span data-stu-id="31784-3204">for all windows to get this property value.</span></span> <span data-ttu-id="31784-3205">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="31784-3205">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public void Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Update" />
      <MemberSignature Language="VB.NET" Value="Public Sub Update ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Update();" />
      <MemberSignature Language="F#" Value="member this.Update : unit -&gt; unit" Usage="control.Update " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-3206">使控制項重繪其工作區內的失效區域。</span><span class="sxs-lookup"><span data-stu-id="31784-3206">Causes the control to redraw the invalidated regions within its client area.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3207">執行繪製的任何暫止要求。</span><span class="sxs-lookup"><span data-stu-id="31784-3207">Executes any pending requests for painting.</span></span>  
  
 <span data-ttu-id="31784-3208">有兩種方式來重新繪製的表單和其內容：</span><span class="sxs-lookup"><span data-stu-id="31784-3208">There are two ways to repaint a form and its contents:</span></span>  
  
-   <span data-ttu-id="31784-3209">您可以使用其中一個多載的<xref:System.Windows.Forms.Control.Invalidate%2A>方法<xref:System.Windows.Forms.Control.Update%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-3209">You can use one of the overloads of the <xref:System.Windows.Forms.Control.Invalidate%2A> method with the <xref:System.Windows.Forms.Control.Update%2A> method.</span></span>  
  
-   <span data-ttu-id="31784-3210">您可以呼叫<xref:System.Windows.Forms.Control.Refresh%2A>方法強制將控制項重繪本身及其所有子系。</span><span class="sxs-lookup"><span data-stu-id="31784-3210">You can call the <xref:System.Windows.Forms.Control.Refresh%2A> method, which forces the control to redraw itself and all its children.</span></span> <span data-ttu-id="31784-3211">這相當於設定<xref:System.Windows.Forms.Control.Invalidate%2A>方法`true`，並使用它與<xref:System.Windows.Forms.Control.Update%2A>。</span><span class="sxs-lookup"><span data-stu-id="31784-3211">This is equivalent to setting the <xref:System.Windows.Forms.Control.Invalidate%2A> method to `true` and using it with <xref:System.Windows.Forms.Control.Update%2A>.</span></span>  
  
 <span data-ttu-id="31784-3212"><xref:System.Windows.Forms.Control.Invalidate%2A>方法控制什麼取得繪製，或重新繪製。</span><span class="sxs-lookup"><span data-stu-id="31784-3212">The <xref:System.Windows.Forms.Control.Invalidate%2A> method governs what gets painted or repainted.</span></span> <span data-ttu-id="31784-3213"><xref:System.Windows.Forms.Control.Update%2A>方法控制繪製或 repainting 時。</span><span class="sxs-lookup"><span data-stu-id="31784-3213">The <xref:System.Windows.Forms.Control.Update%2A> method governs when the painting or repainting occurs.</span></span> <span data-ttu-id="31784-3214">如果您使用<xref:System.Windows.Forms.Control.Invalidate%2A>和<xref:System.Windows.Forms.Control.Update%2A>方法放在一起，而不是呼叫<xref:System.Windows.Forms.Control.Refresh%2A>，什麼取得繪製取決於哪一個多載<xref:System.Windows.Forms.Control.Invalidate%2A>您使用。</span><span class="sxs-lookup"><span data-stu-id="31784-3214">If you use the <xref:System.Windows.Forms.Control.Invalidate%2A> and <xref:System.Windows.Forms.Control.Update%2A> methods together rather than calling <xref:System.Windows.Forms.Control.Refresh%2A>, what gets repainted depends on which overload of <xref:System.Windows.Forms.Control.Invalidate%2A> you use.</span></span> <span data-ttu-id="31784-3215"><xref:System.Windows.Forms.Control.Update%2A>方法只會強制控制項將立即繪製但<xref:System.Windows.Forms.Control.Invalidate%2A>方法可讓您控制哪些取得繪製呼叫時<xref:System.Windows.Forms.Control.Update%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-3215">The <xref:System.Windows.Forms.Control.Update%2A> method just forces the control to be painted immediately, but the <xref:System.Windows.Forms.Control.Invalidate%2A> method governs what gets painted when you call the <xref:System.Windows.Forms.Control.Update%2A> method.</span></span>  
  
 <span data-ttu-id="31784-3216">如需詳細資訊，請參閱[WM_PAINT](http://msdn.microsoft.com/library/dd145213\(v=vs.85\).aspx)主題。</span><span class="sxs-lookup"><span data-stu-id="31784-3216">For more information, see the[WM_PAINT](http://msdn.microsoft.com/library/dd145213\(v=vs.85\).aspx)topic.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateBounds">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31784-3217">更新控制項的範圍。</span><span class="sxs-lookup"><span data-stu-id="31784-3217">Updates the bounds of the control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected internal void UpdateBounds ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void UpdateBounds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub UpdateBounds ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void UpdateBounds();" />
      <MemberSignature Language="F#" Value="member this.UpdateBounds : unit -&gt; unit" Usage="control.UpdateBounds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-3218">以目前大小和位置更新控制項的範圍。</span><span class="sxs-lookup"><span data-stu-id="31784-3218">Updates the bounds of the control with the current size and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3219">如果新<xref:System.Windows.Forms.Control.Size%2A>控制項就會不同於先前<xref:System.Drawing.Size>、<xref:System.Windows.Forms.Control.SizeChanged>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3219">If the new <xref:System.Windows.Forms.Control.Size%2A> of the control is different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised.</span></span> <span data-ttu-id="31784-3220">同樣地，如果<xref:System.Windows.Forms.Control.Location%2A>控制項變更，<xref:System.Windows.Forms.Control.LocationChanged>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3220">Likewise, if the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected void UpdateBounds (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBounds(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateBounds (x As Integer, y As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateBounds(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.UpdateBounds : int * int * int * int -&gt; unit" Usage="control.UpdateBounds (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="31784-3221">控制項的 <see cref="P:System.Drawing.Point.X" /> 座標。</span><span class="sxs-lookup"><span data-stu-id="31784-3221">The <see cref="P:System.Drawing.Point.X" /> coordinate of the control.</span></span></param>
        <param name="y"><span data-ttu-id="31784-3222">控制項的 <see cref="P:System.Drawing.Point.Y" /> 座標。</span><span class="sxs-lookup"><span data-stu-id="31784-3222">The <see cref="P:System.Drawing.Point.Y" /> coordinate of the control.</span></span></param>
        <param name="width"><span data-ttu-id="31784-3223">控制項的 <see cref="P:System.Drawing.Size.Width" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3223">The <see cref="P:System.Drawing.Size.Width" /> of the control.</span></span></param>
        <param name="height"><span data-ttu-id="31784-3224">控制項的 <see cref="P:System.Drawing.Size.Height" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3224">The <see cref="P:System.Drawing.Size.Height" /> of the control.</span></span></param>
        <summary><span data-ttu-id="31784-3225">以指定的大小和位置更新控制項的範圍。</span><span class="sxs-lookup"><span data-stu-id="31784-3225">Updates the bounds of the control with the specified size and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3226">如果新<xref:System.Windows.Forms.Control.Size%2A>如果不同於先前的控制項<xref:System.Drawing.Size>、<xref:System.Windows.Forms.Control.SizeChanged>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3226">If the new <xref:System.Windows.Forms.Control.Size%2A> of the control if different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised.</span></span> <span data-ttu-id="31784-3227">同樣地，是<xref:System.Windows.Forms.Control.Location%2A>控制項變更，<xref:System.Windows.Forms.Control.LocationChanged>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3227">Likewise, is the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected void UpdateBounds (int x, int y, int width, int height, int clientWidth, int clientHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBounds(int32 x, int32 y, int32 width, int32 height, int32 clientWidth, int32 clientHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateBounds (x As Integer, y As Integer, width As Integer, height As Integer, clientWidth As Integer, clientHeight As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateBounds(int x, int y, int width, int height, int clientWidth, int clientHeight);" />
      <MemberSignature Language="F#" Value="member this.UpdateBounds : int * int * int * int * int * int -&gt; unit" Usage="control.UpdateBounds (x, y, width, height, clientWidth, clientHeight)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="clientWidth" Type="System.Int32" />
        <Parameter Name="clientHeight" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="31784-3228">控制項的 <see cref="P:System.Drawing.Point.X" /> 座標。</span><span class="sxs-lookup"><span data-stu-id="31784-3228">The <see cref="P:System.Drawing.Point.X" /> coordinate of the control.</span></span></param>
        <param name="y"><span data-ttu-id="31784-3229">控制項的 <see cref="P:System.Drawing.Point.Y" /> 座標。</span><span class="sxs-lookup"><span data-stu-id="31784-3229">The <see cref="P:System.Drawing.Point.Y" /> coordinate of the control.</span></span></param>
        <param name="width"><span data-ttu-id="31784-3230">控制項的 <see cref="P:System.Drawing.Size.Width" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3230">The <see cref="P:System.Drawing.Size.Width" /> of the control.</span></span></param>
        <param name="height"><span data-ttu-id="31784-3231">控制項的 <see cref="P:System.Drawing.Size.Height" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3231">The <see cref="P:System.Drawing.Size.Height" /> of the control.</span></span></param>
        <param name="clientWidth"><span data-ttu-id="31784-3232">控制項的用戶端 <see cref="P:System.Drawing.Size.Width" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3232">The client <see cref="P:System.Drawing.Size.Width" /> of the control.</span></span></param>
        <param name="clientHeight"><span data-ttu-id="31784-3233">控制項的用戶端 <see cref="P:System.Drawing.Size.Height" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3233">The client <see cref="P:System.Drawing.Size.Height" /> of the control.</span></span></param>
        <summary><span data-ttu-id="31784-3234">以指定的大小、位置和工作區大小更新控制項的範圍。</span><span class="sxs-lookup"><span data-stu-id="31784-3234">Updates the bounds of the control with the specified size, location, and client size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3235">如果新<xref:System.Windows.Forms.Control.Size%2A>控制項就會不同於先前<xref:System.Drawing.Size>、<xref:System.Windows.Forms.Control.SizeChanged>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3235">If the new <xref:System.Windows.Forms.Control.Size%2A> of the control is different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised.</span></span> <span data-ttu-id="31784-3236">同樣地，如果<xref:System.Windows.Forms.Control.Location%2A>控制項變更，<xref:System.Windows.Forms.Control.LocationChanged>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3236">Likewise, if the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
      </Docs>
    </Member>
    <Member MemberName="UpdateStyles">
      <MemberSignature Language="C#" Value="protected void UpdateStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateStyles ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateStyles();" />
      <MemberSignature Language="F#" Value="member this.UpdateStyles : unit -&gt; unit" Usage="control.UpdateStyles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-3237">強制重新套用指派的樣式至控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3237">Forces the assigned styles to be reapplied to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3238">這個方法會呼叫<xref:System.Windows.Forms.Control.CreateParams%2A>方法來取得要套用樣式。</span><span class="sxs-lookup"><span data-stu-id="31784-3238">This method calls the <xref:System.Windows.Forms.Control.CreateParams%2A> method to get the styles to apply.</span></span> <span data-ttu-id="31784-3239">指派給樣式<xref:System.Windows.Forms.CreateParams.Style%2A>和<xref:System.Windows.Forms.CreateParams.ExStyle%2A>屬性<xref:System.Windows.Forms.CreateParams>指派給控制項的<xref:System.Windows.Forms.Control.CreateParams%2A>屬性會套用。</span><span class="sxs-lookup"><span data-stu-id="31784-3239">The styles assigned to the <xref:System.Windows.Forms.CreateParams.Style%2A> and <xref:System.Windows.Forms.CreateParams.ExStyle%2A> properties of the <xref:System.Windows.Forms.CreateParams> assigned to the control's <xref:System.Windows.Forms.Control.CreateParams%2A> property are reapplied.</span></span> <span data-ttu-id="31784-3240">以反映樣式的變更，如有必要重繪控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3240">The control is repainted to reflect the style changes if necessary.</span></span>  
  
 <span data-ttu-id="31784-3241"><xref:System.Windows.Forms.Control.UpdateStyles%2A>方法沒有任何作用，如果<xref:System.Windows.Forms.Control.IsHandleCreated%2A>屬性值是`false`。</span><span class="sxs-lookup"><span data-stu-id="31784-3241">The <xref:System.Windows.Forms.Control.UpdateStyles%2A> method has no effect if the <xref:System.Windows.Forms.Control.IsHandleCreated%2A> property value is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3242">下列程式碼範例可讓在雙重緩衝<xref:System.Windows.Forms.Form>並更新以反映變更的樣式。</span><span class="sxs-lookup"><span data-stu-id="31784-3242">The following code example enables double-buffering on a <xref:System.Windows.Forms.Form> and updates the styles to reflect the changes.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#3)]
 [!code-csharp[Windows.Forms.ControlMembers6#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#3)]
 [!code-vb[Windows.Forms.ControlMembers6#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="UpdateZOrder">
      <MemberSignature Language="C#" Value="protected void UpdateZOrder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateZOrder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateZOrder" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateZOrder ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateZOrder();" />
      <MemberSignature Language="F#" Value="member this.UpdateZOrder : unit -&gt; unit" Usage="control.UpdateZOrder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31784-3243">以控制項的父控制項疊置順序更新控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3243">Updates the control in its parent's z-order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3244"><xref:System.Windows.Forms.Control.UpdateZOrder%2A>更新控制項的位置，在其父控制項的疊置順序的方法。</span><span class="sxs-lookup"><span data-stu-id="31784-3244">The <xref:System.Windows.Forms.Control.UpdateZOrder%2A> method updates the position of the control in its parent control's z-order.</span></span> <span data-ttu-id="31784-3245">例如，如果此控制項是新建立控制已加入至<xref:System.Windows.Forms.Control.ControlCollection>，疊置順序更新包含新加入的控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3245">For example, if this control is a newly created control that was added to a <xref:System.Windows.Forms.Control.ControlCollection>, the z-order is updated with the new control added to the back.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="UseWaitCursor">
      <MemberSignature Language="C#" Value="public bool UseWaitCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseWaitCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.UseWaitCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property UseWaitCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseWaitCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseWaitCursor : bool with get, set" Usage="System.Windows.Forms.Control.UseWaitCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3246">取得或設定值，指出是否將等待游標用於目前控制項和所有子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3246">Gets or sets a value indicating whether to use the wait cursor for the current control and all child controls.</span></span></summary>
        <value><span data-ttu-id="31784-3247"><see langword="true" /> 表示將等待游標用於目前控制項和所有子控制項，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3247"><see langword="true" /> to use the wait cursor for the current control and all child controls; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="31784-3248">預設值為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3248">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3249">每當您執行的作業採用可觀的時間，請使用等待游標。不過請注意會阻擋 UI 執行緒的作業也會封鎖 acursor 變更。因此，在另一個執行緒中執行這些耗時的作業時，應該只使用這個屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3249">Use a wait cursor whenever you perform an operation that takes a noticeable amount of time.However, note that operations that block the UI thread will also block acursor change.Therefore, this property should only be used when performing time-consuming operations in another thread.</span></span> <span data-ttu-id="31784-3250">若要變更資料指標，全域和立即，seethe<xref:System.Windows.Forms.Cursor.Current%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3250">To change the cursor globally and immediately, seethe <xref:System.Windows.Forms.Cursor.Current%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validated">
      <MemberSignature Language="C#" Value="public event EventHandler Validated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Validated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Validated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Validated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Validated;" />
      <MemberSignature Language="F#" Value="member this.Validated : EventHandler " Usage="member this.Validated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3251">發生於控制項完成驗證時。</span><span class="sxs-lookup"><span data-stu-id="31784-3251">Occurs when the control is finished validating.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3252">當您藉由呼叫中使用鍵盤 （TAB、 SHIFT + TAB，等等） 變更焦點時<xref:System.Windows.Forms.Control.Select%2A>或<xref:System.Windows.Forms.Control.SelectNextControl%2A>方法，或藉由設定<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType>屬性目前的表單，焦點事件會發生順序如下：</span><span class="sxs-lookup"><span data-stu-id="31784-3252">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="31784-3253">當您將焦點變更使用滑鼠或藉由呼叫<xref:System.Windows.Forms.Control.Focus%2A>方法，焦點事件會依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-3253">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="31784-3254">如果<xref:System.Windows.Forms.Control.CausesValidation%2A>屬性設定為`false`、<xref:System.Windows.Forms.Control.Validating>和<xref:System.Windows.Forms.Control.Validated>事件都會被隱藏。</span><span class="sxs-lookup"><span data-stu-id="31784-3254">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="31784-3255">如果<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>屬性<xref:System.ComponentModel.CancelEventArgs>設`true`中<xref:System.Windows.Forms.Control.Validating>事件委派，通常會在之後發生的所有事件<xref:System.Windows.Forms.Control.Validating>事件都會被隱藏。</span><span class="sxs-lookup"><span data-stu-id="31784-3255">If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="31784-3256">請勿嘗試將焦點設在<xref:System.Windows.Forms.Control.Enter>， <xref:System.Windows.Forms.Control.GotFocus>， <xref:System.Windows.Forms.Control.Leave>， <xref:System.Windows.Forms.Control.LostFocus>， <xref:System.Windows.Forms.Control.Validating>，或<xref:System.Windows.Forms.Control.Validated>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-3256">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="31784-3257">如此一來，可能會導致您的應用程式或作業系統停止回應。</span><span class="sxs-lookup"><span data-stu-id="31784-3257">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="31784-3258">如需詳細資訊，請參閱[WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx)主題和 「 訊息死結 」 一節[有關訊息和訊息佇列](http://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx)主題。</span><span class="sxs-lookup"><span data-stu-id="31784-3258">For more information, see the[WM_KILLFOCUS](http://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx)topic, and the "Message Deadlocks" section of the [About Messages and Message Queues](http://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="31784-3259">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-3259">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3260">下列程式碼範例會使用衍生的類別<xref:System.Windows.Forms.TextBox>並驗證使用者輸入電子郵件地址。</span><span class="sxs-lookup"><span data-stu-id="31784-3260">The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an email address that the user enters.</span></span> <span data-ttu-id="31784-3261">如果電子郵件地址不是標準格式 (包含"@" and "。")，驗證失敗，<xref:System.Windows.Forms.ErrorProvider>圖示會顯示，而且在取消事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3261">If the email address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled.</span></span> <span data-ttu-id="31784-3262">這個範例需要<xref:System.Windows.Forms.TextBox>和<xref:System.Windows.Forms.ErrorProvider>控制項在表單上建立。</span><span class="sxs-lookup"><span data-stu-id="31784-3262">This example requires that a <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.ErrorProvider> control have been created on a form.</span></span>  
  
 [!code-cpp[Control.Validating#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#1)]
 [!code-csharp[Control.Validating#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#1)]
 [!code-vb[Control.Validating#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
      </Docs>
    </Member>
    <Member MemberName="Validating">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Validating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Validating" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Validating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Validating As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ Validating;" />
      <MemberSignature Language="F#" Value="member this.Validating : System.ComponentModel.CancelEventHandler " Usage="member this.Validating : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3263">發生於驗證控制項時。</span><span class="sxs-lookup"><span data-stu-id="31784-3263">Occurs when the control is validating.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3264">當您藉由呼叫中使用鍵盤 （TAB、 SHIFT + TAB，等等） 變更焦點時<xref:System.Windows.Forms.Control.Select%2A>或<xref:System.Windows.Forms.Control.SelectNextControl%2A>方法，或藉由設定<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType>屬性目前的表單，焦點事件會發生順序如下：</span><span class="sxs-lookup"><span data-stu-id="31784-3264">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="31784-3265">當您將焦點變更使用滑鼠或藉由呼叫<xref:System.Windows.Forms.Control.Focus%2A>方法，焦點事件會依下列順序發生：</span><span class="sxs-lookup"><span data-stu-id="31784-3265">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="31784-3266">如果<xref:System.Windows.Forms.Control.CausesValidation%2A>屬性設定為`false`、<xref:System.Windows.Forms.Control.Validating>和<xref:System.Windows.Forms.Control.Validated>事件都會被隱藏。</span><span class="sxs-lookup"><span data-stu-id="31784-3266">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="31784-3267">如果<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>屬性<xref:System.ComponentModel.CancelEventArgs>設`true`中<xref:System.Windows.Forms.Control.Validating>事件委派，通常會在之後發生的所有事件<xref:System.Windows.Forms.Control.Validating>事件都會被隱藏。</span><span class="sxs-lookup"><span data-stu-id="31784-3267">If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="31784-3268">請勿嘗試將焦點設在<xref:System.Windows.Forms.Control.Enter>， <xref:System.Windows.Forms.Control.GotFocus>， <xref:System.Windows.Forms.Control.Leave>， <xref:System.Windows.Forms.Control.LostFocus>， <xref:System.Windows.Forms.Control.Validating>，或<xref:System.Windows.Forms.Control.Validated>事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="31784-3268">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="31784-3269">如此一來，可能會導致您的應用程式或作業系統停止回應。</span><span class="sxs-lookup"><span data-stu-id="31784-3269">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="31784-3270">如需詳細資訊，請參閱`WM_KILLFOCUS`< 鍵盤輸入參考 > 一節中，並在 MSDN library 中的 「 關於訊息和訊息佇列 」 主題的 「 訊息死結 」 一節中的主題http://msdn.microsoft.com/library。</span><span class="sxs-lookup"><span data-stu-id="31784-3270">For more information, see the `WM_KILLFOCUS` topic in the "Keyboard Input Reference" section, and the "Message Deadlocks" section of the "About Messages and Message Queues" topic in the MSDN library at http://msdn.microsoft.com/library.</span></span>  
  
 <span data-ttu-id="31784-3271">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-3271">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3272">下列程式碼範例會使用衍生的類別<xref:System.Windows.Forms.TextBox>並驗證使用者輸入電子郵件地址。</span><span class="sxs-lookup"><span data-stu-id="31784-3272">The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an email address that the user enters.</span></span> <span data-ttu-id="31784-3273">如果電子郵件地址不是標準格式 (包含"@" and "。")，驗證失敗，<xref:System.Windows.Forms.ErrorProvider>圖示會顯示，而且在取消事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3273">If the email address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled.</span></span> <span data-ttu-id="31784-3274">這個範例需要<xref:System.Windows.Forms.TextBox>和<xref:System.Windows.Forms.ErrorProvider>控制項在表單上建立。</span><span class="sxs-lookup"><span data-stu-id="31784-3274">This example requires that a <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.ErrorProvider> control have been created on a form.</span></span>  
  
 [!code-cpp[Control.Validating#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#1)]
 [!code-csharp[Control.Validating#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#1)]
 [!code-vb[Control.Validating#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Windows.Forms.Control.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3275">取得或設定值，這個值指出是否顯示控制項及其所有子控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3275">Gets or sets a value indicating whether the control and all its child controls are displayed.</span></span></summary>
        <value><span data-ttu-id="31784-3276">如果控制項及其所有子控制項都會顯示，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3276"><see langword="true" /> if the control and all its child controls are displayed; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="31784-3277">預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3277">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3278">請注意，即使如果`Visible`設`true`，控制項遮蔽其他控制項之後，可能無法顯示給使用者。</span><span class="sxs-lookup"><span data-stu-id="31784-3278">Note that even if `Visible` is set to `true`, the control might not be visible to the user if it is obscured behind other controls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3279">下列程式碼範例會使用衍生的類別<xref:System.Windows.Forms.VScrollBar>和<xref:System.Windows.Forms.HScrollBar>並設定其<xref:System.Windows.Forms.Control.Visible%2A>屬性值，根據大小<xref:System.Drawing.Image>中顯示<xref:System.Windows.Forms.PictureBox>控制項。</span><span class="sxs-lookup"><span data-stu-id="31784-3279">The following code example uses the derived classes <xref:System.Windows.Forms.VScrollBar> and <xref:System.Windows.Forms.HScrollBar> and sets their <xref:System.Windows.Forms.Control.Visible%2A> property values, based on the size of an <xref:System.Drawing.Image> being displayed in a <xref:System.Windows.Forms.PictureBox> control.</span></span> <span data-ttu-id="31784-3280">這個範例需要<xref:System.Windows.Forms.PictureBox>已建立表單，而且該<xref:System.Windows.Forms.HScrollBar>和<xref:System.Windows.Forms.VScrollBar>上建立控制項<xref:System.Windows.Forms.PictureBox>。</span><span class="sxs-lookup"><span data-stu-id="31784-3280">This example requires that a <xref:System.Windows.Forms.PictureBox> has been created on a form and that <xref:System.Windows.Forms.HScrollBar> and <xref:System.Windows.Forms.VScrollBar> controls have been created on the <xref:System.Windows.Forms.PictureBox>.</span></span> <span data-ttu-id="31784-3281">此程式碼時，應該呼叫影像載入到圖片方塊中，經由<xref:System.Windows.Forms.Control.Resize>表單的事件。</span><span class="sxs-lookup"><span data-stu-id="31784-3281">This code should be called when the image is loaded into the picture box and by the <xref:System.Windows.Forms.Control.Resize> event of the form.</span></span>  
  
 [!code-cpp[Classic Control.Visible Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.Visible Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.Visible Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.Visible Example/CS/source.cs#1)]
 [!code-vb[Classic Control.Visible Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.Visible Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
        <altmember cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" />
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="VisibleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler VisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler VisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.VisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VisibleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ VisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.VisibleChanged : EventHandler " Usage="member this.VisibleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3282">發生在 <see cref="P:System.Windows.Forms.Control.Visible" /> 屬性值變更時。</span><span class="sxs-lookup"><span data-stu-id="31784-3282">Occurs when the <see cref="P:System.Windows.Forms.Control.Visible" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3283">如果會引發這個事件<xref:System.Windows.Forms.Control.Visible%2A>以程式設計方式修改或使用者互動變更屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3283">This event is raised if the <xref:System.Windows.Forms.Control.Visible%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="31784-3284">如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="31784-3284">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3285">下列程式碼範例會引發<xref:System.Windows.Forms.Control.VisibleChanged>事件時<xref:System.Windows.Forms.Control.Visible%2A>屬性值為<xref:System.Windows.Forms.Label>控制項已變更。</span><span class="sxs-lookup"><span data-stu-id="31784-3285">The following code example raises the <xref:System.Windows.Forms.Control.VisibleChanged> event when the <xref:System.Windows.Forms.Control.Visible%2A> property value of the <xref:System.Windows.Forms.Label> control has changed.</span></span>  
  
 [!code-cpp[Control_VisibleChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_VisibleChanged/CPP/control_visiblechanged.cpp#1)]
 [!code-csharp[Control_VisibleChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_VisibleChanged/CS/control_visiblechanged.cs#1)]
 [!code-vb[Control_VisibleChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_VisibleChanged/VB/control_visiblechanged.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Width { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Width : int with get, set" Usage="System.Windows.Forms.Control.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3286">取得或設定控制項的寬度。</span><span class="sxs-lookup"><span data-stu-id="31784-3286">Gets or sets the width of the control.</span></span></summary>
        <value><span data-ttu-id="31784-3287">控制項的寬度 (單位為像素)。</span><span class="sxs-lookup"><span data-stu-id="31784-3287">The width of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3288">所做的變更<xref:System.Windows.Forms.Control.Width%2A>和<xref:System.Windows.Forms.Control.Left%2A>屬性值會使<xref:System.Windows.Forms.Control.Right%2A>變更控制項的屬性值。</span><span class="sxs-lookup"><span data-stu-id="31784-3288">Changes made to the <xref:System.Windows.Forms.Control.Width%2A> and <xref:System.Windows.Forms.Control.Left%2A> property values cause the <xref:System.Windows.Forms.Control.Right%2A> property value of the control to change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3289">下列程式碼範例會建立三個<xref:System.Windows.Forms.Button>表單上的控制項，並將其大小和位置設定使用的各種大小與和位置相關的屬性。</span><span class="sxs-lookup"><span data-stu-id="31784-3289">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="31784-3290">這個範例需要您有<xref:System.Windows.Forms.Form>有寬度和高度的最少 300 像素為單位。</span><span class="sxs-lookup"><span data-stu-id="31784-3290">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
        <altmember cref="P:System.Drawing.Size.Width" />
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WindowTarget">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IWindowTarget WindowTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IWindowTarget WindowTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.WindowTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowTarget As IWindowTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IWindowTarget ^ WindowTarget { System::Windows::Forms::IWindowTarget ^ get(); void set(System::Windows::Forms::IWindowTarget ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WindowTarget : System.Windows.Forms.IWindowTarget with get, set" Usage="System.Windows.Forms.Control.WindowTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IWindowTarget</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31784-3291">這個屬性與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-3291">This property is not relevant for this class.</span></span></summary>
        <value><span data-ttu-id="31784-3292">控制項內含的 NativeWindow。</span><span class="sxs-lookup"><span data-stu-id="31784-3292">The NativeWindow contained within the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3293">這個屬性與這個類別無關。</span><span class="sxs-lookup"><span data-stu-id="31784-3293">This property is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="control.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="31784-3294">要處理的 Windows <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3294">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</span></span></param>
        <summary><span data-ttu-id="31784-3295">處理 Windows 訊息。</span><span class="sxs-lookup"><span data-stu-id="31784-3295">Processes Windows messages.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31784-3296">所有訊息都會都傳送至<xref:System.Windows.Forms.Control.WndProc%2A>方法之後被篩透過<xref:System.Windows.Forms.Control.PreProcessMessage%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="31784-3296">All messages are sent to the <xref:System.Windows.Forms.Control.WndProc%2A> method after getting filtered through the <xref:System.Windows.Forms.Control.PreProcessMessage%2A> method.</span></span>  
  
 <span data-ttu-id="31784-3297"><xref:System.Windows.Forms.Control.WndProc%2A> 方法完全對應於 Windows `WindowProc` 函式。</span><span class="sxs-lookup"><span data-stu-id="31784-3297">The <xref:System.Windows.Forms.Control.WndProc%2A> method corresponds exactly to the Windows `WindowProc` function.</span></span> <span data-ttu-id="31784-3298">如需有關如何處理 Windows 訊息的詳細資訊，請參閱[WindowProc 函式](http://go.microsoft.com/fwlink/?LinkId=181565)。</span><span class="sxs-lookup"><span data-stu-id="31784-3298">For more information about processing Windows messages, see the [WindowProc function](http://go.microsoft.com/fwlink/?LinkId=181565).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31784-3299">下列程式碼範例示範如何覆寫<xref:System.Windows.Forms.Control.WndProc%2A>方法以處理作業系統訊息中識別<xref:System.Windows.Forms.Message>結構。</span><span class="sxs-lookup"><span data-stu-id="31784-3299">The following code example demonstrates overriding the <xref:System.Windows.Forms.Control.WndProc%2A> method to handle operating system messages identified in the <xref:System.Windows.Forms.Message> structure.</span></span> <span data-ttu-id="31784-3300">[WM_ACTIVATEAPP](http://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx)作業系統訊息在此範例中了解當另一個應用程式會變成作用中處理。</span><span class="sxs-lookup"><span data-stu-id="31784-3300">The[WM_ACTIVATEAPP](http://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx)operating system message is handled in this example to know when another application is becoming active.</span></span> <span data-ttu-id="31784-3301">請參閱下列主題，以了解可用<xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>， <xref:System.Windows.Forms.Message.LParam%2A?displayProperty=nameWithType>，和<xref:System.Windows.Forms.Message.WParam%2A?displayProperty=nameWithType>值。</span><span class="sxs-lookup"><span data-stu-id="31784-3301">See the following topics to understand the available <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Message.LParam%2A?displayProperty=nameWithType>, and <xref:System.Windows.Forms.Message.WParam%2A?displayProperty=nameWithType> values.</span></span> <span data-ttu-id="31784-3302">實際的常數值可以找到 Windows.h 標頭檔中。</span><span class="sxs-lookup"><span data-stu-id="31784-3302">Actual constant values can be found in the Windows.h header file.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="31784-3303">立即呼叫者呼叫 unmanaged 程式碼。</span><span class="sxs-lookup"><span data-stu-id="31784-3303">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="31784-3304">關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span><span class="sxs-lookup"><span data-stu-id="31784-3304">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <block subset="none" type="overrides"><span data-ttu-id="31784-3305"><para>繼承的控制項，應該呼叫基底類別的<see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />方法來處理未處理任何訊息。</para></span><span class="sxs-lookup"><span data-stu-id="31784-3305"><para>Inheriting controls should call the base class's <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" /> method to process any messages that they do not handle.</para></span></span></block>
        <altmember cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
  </Members>
</Type>