<Type Name="GiveFeedbackEventArgs" FullName="System.Windows.Forms.GiveFeedbackEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4fdae29e2eb0954752b7699e2e4a550ab1dab618" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37568903" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class GiveFeedbackEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GiveFeedbackEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.GiveFeedbackEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class GiveFeedbackEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class GiveFeedbackEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type GiveFeedbackEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供 <see cref="E:System.Windows.Forms.Control.GiveFeedback" /> 事件的資料，事件將發生於拖曳作業期間。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.GiveFeedback>在拖曳作業期間發生的事件。 它可讓來源修改滑鼠指標外觀，以便將使用者的視覺化回饋提供拖放作業期間的拖曳事件。 A<xref:System.Windows.Forms.GiveFeedbackEventArgs>物件指定的拖放作業及是否使用預設資料指標類型。  
  
 事件模型的相關資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列範例示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。 此範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>拖曳動作開始時的方法。 如果滑鼠已移動，拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來判斷要在拖曳的項目索引`MouseDown`事件。  
  
 此範例也示範如何使用自訂游標拖放作業。 此範例假設兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`，在應用程式目錄中，自訂拖曳存在，而不置放的資料指標分別。 會使用自訂的資料指標，如果`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。 中所設定的自訂游標<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。  
  
 鍵盤狀態會在評估<xref:System.Windows.Forms.Control.DragOver>提供的權限的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵狀態。 中的位置`ListBox`期間也決定其中將進行卸除`DragOver`事件。 如果不是要卸除的資料`String`，則<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設定為<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要卸除提供的權限的資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`值會加入適當的位置中`ListBox`。 如果表單的界限之外移動的拖曳作業，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。  
  
 此程式碼摘錄示範使用<xref:System.Windows.Forms.GiveFeedbackEventArgs>類別。 請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整的程式碼範例中的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GiveFeedbackEventArgs (System.Windows.Forms.DragDropEffects effect, bool useDefaultCursors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.DragDropEffects effect, bool useDefaultCursors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.GiveFeedbackEventArgs.#ctor(System.Windows.Forms.DragDropEffects,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (effect As DragDropEffects, useDefaultCursors As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GiveFeedbackEventArgs(System::Windows::Forms::DragDropEffects effect, bool useDefaultCursors);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.GiveFeedbackEventArgs : System.Windows.Forms.DragDropEffects * bool -&gt; System.Windows.Forms.GiveFeedbackEventArgs" Usage="new System.Windows.Forms.GiveFeedbackEventArgs (effect, useDefaultCursors)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="effect" Type="System.Windows.Forms.DragDropEffects" />
        <Parameter Name="useDefaultCursors" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="effect">拖放作業的類型。 將位元的 OR (|) 運算套用至 <see cref="T:System.Windows.Forms.DragDropEffects" /> 中所定義的常數，以取得可能的值。</param>
        <param name="useDefaultCursors">如果使用預設指標則為 <see langword="true" />，否則為 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects Effect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.GiveFeedbackEventArgs.Effect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Effect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects Effect { System::Windows::Forms::DragDropEffects get(); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Forms.DragDropEffects" Usage="System.Windows.Forms.GiveFeedbackEventArgs.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得要顯示的拖放作業回應。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.DragDropEffects" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。 此範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>拖曳動作開始時的方法。 如果滑鼠已移動，拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來判斷要在拖曳的項目索引`MouseDown`事件。  
  
 此範例也示範如何使用自訂游標拖放作業。 此範例假設兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`，在應用程式目錄中，自訂拖曳存在，而不置放的資料指標分別。 會使用自訂的資料指標，如果`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。 中所設定的自訂游標<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。  
  
 鍵盤狀態會在評估<xref:System.Windows.Forms.Control.DragOver>提供的權限的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵狀態。 中的位置`ListBox`期間也決定其中將進行卸除`DragOver`事件。 如果不是要卸除的資料`String`，則<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設定為<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要卸除提供的權限的資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`值會加入適當的位置中`ListBox`。 如果表單的界限之外移動的拖曳作業，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。  
  
 此程式碼摘錄示範使用<xref:System.Windows.Forms.GiveFeedbackEventArgs>類別。 請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整的程式碼範例中的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCursors">
      <MemberSignature Language="C#" Value="public bool UseDefaultCursors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCursors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDefaultCursors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDefaultCursors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultCursors : bool with get, set" Usage="System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定拖曳作業是否應使用與拖放效果關聯的預設游標。</summary>
        <value>如果使用預設指標，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 系統會提供不同的拖放作業，例如移動或複製拖放資料指標預設值。 如果<xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A>設為`false`，它是事件來源，設定適當的資料指標的責任。  
  
   
  
## Examples  
 下列範例示範兩個之間的拖放作業<xref:System.Windows.Forms.ListBox>控制項。 此範例會呼叫<xref:System.Windows.Forms.Control.DoDragDrop%2A>拖曳動作開始時的方法。 如果滑鼠已移動，拖曳動作會啟動多個<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>期間的滑鼠位置<xref:System.Windows.Forms.Control.MouseDown>事件。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用來判斷要在拖曳的項目索引`MouseDown`事件。  
  
 此範例也示範如何使用自訂游標拖放作業。 此範例假設兩個資料指標檔案`3dwarro.cur`和`3dwno.cur`，在應用程式目錄中，自訂拖曳存在，而不置放的資料指標分別。 會使用自訂的資料指標，如果`UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox>已核取。 中所設定的自訂游標<xref:System.Windows.Forms.Control.GiveFeedback>事件處理常式。  
  
 鍵盤狀態會在評估<xref:System.Windows.Forms.Control.DragOver>提供的權限的事件處理常式`ListBox`，以決定在拖曳作業將會根據 SHIFT、 CTRL、 ALT 或 CTRL + ALT 鍵狀態。 中的位置`ListBox`期間也決定其中將進行卸除`DragOver`事件。 如果不是要卸除的資料`String`，則<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>設定為<xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>。 最後，卸除的狀態會顯示在`DropLocationLabel` <xref:System.Windows.Forms.Label>。  
  
 若要卸除提供的權限的資料`ListBox`決定<xref:System.Windows.Forms.Control.DragDrop>事件處理常式和`String`值會加入適當的位置中`ListBox`。 如果表單的界限之外移動的拖曳作業，則取消拖放作業<xref:System.Windows.Forms.Control.QueryContinueDrag>事件處理常式。  
  
 此程式碼摘錄示範使用<xref:System.Windows.Forms.GiveFeedbackEventArgs>類別。 請參閱<xref:System.Windows.Forms.Control.DoDragDrop%2A>完整的程式碼範例中的方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>