<Type Name="OSFeature" FullName="System.Windows.Forms.OSFeature">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f8490b1b743429b4f7179e1a7f1ae345071802c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36517138" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class OSFeature : System.Windows.Forms.FeatureSupport" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OSFeature extends System.Windows.Forms.FeatureSupport" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.OSFeature" />
  <TypeSignature Language="VB.NET" Value="Public Class OSFeature&#xA;Inherits FeatureSupport" />
  <TypeSignature Language="C++ CLI" Value="public ref class OSFeature : System::Windows::Forms::FeatureSupport" />
  <TypeSignature Language="F#" Value="type OSFeature = class&#xA;    inherit FeatureSupport" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.FeatureSupport</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供作業系統特定的功能查詢。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`static`中提供此類別的執行個體<xref:System.Windows.Forms.OSFeature.Feature%2A>查詢作業系統功能的屬性。 您無法建立此類別的執行個體。  
  
 若要判斷某項功能的版本，請呼叫<xref:System.Windows.Forms.OSFeature.GetVersionPresent%2A>方法。 若要判斷是否有一項功能或特定版本，請呼叫<xref:System.Windows.Forms.FeatureSupport.IsPresent%2A>方法並指定要與這個類別中提供的功能識別碼尋找功能。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Windows.Forms.OSFeature>查詢作業系統以判斷是否<xref:System.Windows.Forms.OSFeature.LayeredWindows>功能安裝。 此範例顯示兩種不同方式的檢查，看看是否有此功能。 在第一個方法中，`myVersion`檢查以查看它是否`null`。 如果版本是`null`，未安裝的功能。 在第二個方法中，此範例會呼叫基底類別方法<xref:System.Windows.Forms.FeatureSupport.IsPresent%2A>以查看是否已安裝的功能。 結果會顯示在文字方塊中。  
  
 此程式碼假設`textBox1`已經建立，並在表單上。  
  
 [!code-cpp[Classic OSFeature Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OSFeature Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OSFeature Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OSFeature Example/CS/source.cs#1)]
 [!code-vb[Classic OSFeature Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OSFeature Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.AppDomain" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Environment" />
    <altmember cref="T:System.Windows.Forms.SystemInformation" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OSFeature ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OSFeature.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OSFeature();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.OSFeature" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 無法執行個體化這個類別。 若要查詢的作業系統功能，請使用`static`的執行個體<xref:System.Windows.Forms.OSFeature>提供此類別中。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.OSFeature" />
      </Docs>
    </Member>
    <Member MemberName="Feature">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.OSFeature Feature { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.OSFeature Feature" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.OSFeature.Feature" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Feature As OSFeature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::OSFeature ^ Feature { System::Windows::Forms::OSFeature ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Feature : System.Windows.Forms.OSFeature" Usage="System.Windows.Forms.OSFeature.Feature" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.OSFeature</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Windows.Forms.OSFeature" /> 類別的 <see langword="static" /> 執行個體，以便用於功能查詢。 這個屬性是唯讀的。</summary>
        <value>
          <see cref="T:System.Windows.Forms.OSFeature" /> 類別的執行個體。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此`static`查詢作業系統功能的屬性。 您無法建立此類別的執行個體。  
  
 若要判斷某項功能的版本，請呼叫<xref:System.Windows.Forms.OSFeature.GetVersionPresent%2A>方法。 若要判斷是否有一項功能或特定版本，請呼叫<xref:System.Windows.Forms.FeatureSupport.IsPresent%2A>方法並指定要與這個類別中提供的功能識別碼尋找功能。  
  
   
  
## Examples  
 下列範例會查詢<xref:System.Windows.Forms.OSFeature>如<xref:System.Windows.Forms.OSFeature.LayeredWindows>功能。 版本會檢查以查看它是否`null`，以判斷是否有此功能。 結果會顯示在文字方塊中。 此程式碼假設`textBox1`已經建立，並在表單上。  
  
 [!code-cpp[Classic OSFeature.GetVersionPresent Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OSFeature.GetVersionPresent Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OSFeature.GetVersionPresent Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OSFeature.GetVersionPresent Example/CS/source.cs#1)]
 [!code-vb[Classic OSFeature.GetVersionPresent Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OSFeature.GetVersionPresent Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.OSFeature.#ctor" />
        <altmember cref="T:System.Version" />
        <altmember cref="T:System.Windows.Forms.FeatureSupport" />
        <altmember cref="F:System.Windows.Forms.OSFeature.LayeredWindows" />
      </Docs>
    </Member>
    <Member MemberName="GetVersionPresent">
      <MemberSignature Language="C#" Value="public override Version GetVersionPresent (object feature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Version GetVersionPresent(object feature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OSFeature.GetVersionPresent(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetVersionPresent (feature As Object) As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Version ^ GetVersionPresent(System::Object ^ feature);" />
      <MemberSignature Language="F#" Value="override this.GetVersionPresent : obj -&gt; Version" Usage="oSFeature.GetVersionPresent feature" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="feature" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="feature">要求特定版本的功能 (<see cref="F:System.Windows.Forms.OSFeature.LayeredWindows" /> 或 <see cref="F:System.Windows.Forms.OSFeature.Themes" />)。</param>
        <summary>擷取目前系統上可用的指定功能的版本。</summary>
        <returns>
          <see cref="T:System.Version" /> 表示目前可在系統上使用的指定作業系統功能版本，如果未發現此功能，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.OSFeature.Feature%2A>屬性，`static`的執行個體<xref:System.Windows.Forms.OSFeature>提供這個類別，來查詢的一項功能的版本號碼。  
  
   
  
## Examples  
 下列範例會查詢<xref:System.Windows.Forms.OSFeature>如<xref:System.Windows.Forms.OSFeature.LayeredWindows>功能。 版本會檢查以查看它是否`null`，以判斷是否有此功能。 結果會顯示在文字方塊中。 此程式碼假設`textBox1`已經建立，並在表單上。  
  
 [!code-cpp[Classic OSFeature.GetVersionPresent Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OSFeature.GetVersionPresent Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OSFeature.GetVersionPresent Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OSFeature.GetVersionPresent Example/CS/source.cs#1)]
 [!code-vb[Classic OSFeature.GetVersionPresent Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OSFeature.GetVersionPresent Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Version" />
        <altmember cref="P:System.Windows.Forms.OSFeature.Feature" />
        <altmember cref="T:System.Windows.Forms.FeatureSupport" />
        <altmember cref="F:System.Windows.Forms.OSFeature.LayeredWindows" />
      </Docs>
    </Member>
    <Member MemberName="IsPresent">
      <MemberSignature Language="C#" Value="public static bool IsPresent (System.Windows.Forms.SystemParameter enumVal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPresent(valuetype System.Windows.Forms.SystemParameter enumVal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OSFeature.IsPresent(System.Windows.Forms.SystemParameter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPresent (enumVal As SystemParameter) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPresent(System::Windows::Forms::SystemParameter enumVal);" />
      <MemberSignature Language="F#" Value="static member IsPresent : System.Windows.Forms.SystemParameter -&gt; bool" Usage="System.Windows.Forms.OSFeature.IsPresent enumVal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumVal" Type="System.Windows.Forms.SystemParameter" />
      </Parameters>
      <Docs>
        <param name="enumVal">
          <see cref="T:System.Windows.Forms.SystemParameter" />，表示要搜尋的功能。</param>
        <summary>擷取值，指出作業系統是否支援指定的功能或度量資訊 (Metric)。</summary>
        <returns>如果此功能可以在系統上使用，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，您會使用<xref:System.Windows.Forms.OSFeature.IsPresent%2A>方法，以判斷作業系統是否支援特定功能或所識別的公制`enumValue`。 根據從傳回的值<xref:System.Windows.Forms.OSFeature.IsPresent%2A>，您會在程式碼中執行條件式的動作。 例如，如果呼叫此方法的參數值時<xref:System.Windows.Forms.SystemParameter.FlatMenu>傳回`true`，您可以建立主控描繪功能表應用程式中平面的樣式。  
  
 如果沒有可用的特定作業系統版本上，存取某些系統功能或度量可以引發例外狀況。 在此情況下，第一次使用對應<xref:System.Windows.Forms.SystemParameter>列舉值，以及與<xref:System.Windows.Forms.OSFeature.IsPresent%2A>，以判斷是否支援度量。 例如，呼叫<xref:System.Windows.Forms.OSFeature.IsPresent%2A>與<xref:System.Windows.Forms.SystemInformation.CaretWidth%2A>再取得<xref:System.Windows.Forms.SystemInformation.CaretWidth%2A?displayProperty=nameWithType>屬性值。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.OSFeature.IsPresent%2A>方法<xref:System.Windows.Forms.SystemParameter>列舉型別。 此範例判斷作業系統是否支援`CaretWidth`度量，然後再呼叫<xref:System.Windows.Forms.SystemInformation.CaretWidth%2A?displayProperty=nameWithType>屬性。  
  
 [!code-cpp[System.Windows.Forms.OSFeature.IsPresent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.OSFeature.IsPresent/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.OSFeature.IsPresent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.OSFeature.IsPresent/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.OSFeature.IsPresent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.OSFeature.IsPresent/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.OSFeature.IsPresent#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.OSFeature.IsPresent/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.OSFeature.IsPresent#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.OSFeature.IsPresent/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.OSFeature.IsPresent#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.OSFeature.IsPresent/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.SystemParameter" />
        <altmember cref="M:System.Windows.Forms.OSFeature.GetVersionPresent(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LayeredWindows">
      <MemberSignature Language="C#" Value="public static readonly object LayeredWindows;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object LayeredWindows" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.OSFeature.LayeredWindows" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LayeredWindows As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ LayeredWindows;" />
      <MemberSignature Language="F#" Value=" staticval mutable LayeredWindows : obj" Usage="System.Windows.Forms.OSFeature.LayeredWindows" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示層次的最上層視窗功能。 此欄位為唯讀。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 層疊的視窗可以透過透明或半透明作業系統。 在 Windows 2000 中引進支援層疊視窗。 如需詳細資訊，請參閱 「 分層 Windows:: 新方式來使用半透明和透明度效果在 Windows 中的應用程式"Platform SDK 文件，網址http://msdn.microsoft.com。  
  
 若要判斷層疊的視窗功能是否已安裝，請使用<xref:System.Windows.Forms.OSFeature.Feature%2A>呼叫基底類別方法的屬性<xref:System.Windows.Forms.FeatureSupport.IsPresent%2A>與<xref:System.Windows.Forms.OSFeature.LayeredWindows>做為要尋找的功能。  
  
 或者，您可以檢查是否安裝此功能藉由呼叫<xref:System.Windows.Forms.OSFeature.GetVersionPresent%2A>方法<xref:System.Windows.Forms.OSFeature.LayeredWindows>做為要尋找的功能。  
  
   
  
## Examples  
 下列範例會判斷目前的系統是否支援層疊的視窗。 基底類別方法<xref:System.Windows.Forms.FeatureSupport.IsPresent%2A>呼叫<xref:System.Windows.Forms.OSFeature.LayeredWindows>做為要尋找的功能。 結果會顯示在文字方塊中。 此程式碼假設`textBox1`具現化並放置在表單上。  
  
 [!code-cpp[Classic OSFeature.LayeredWindows Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OSFeature.LayeredWindows Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OSFeature.LayeredWindows Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OSFeature.LayeredWindows Example/CS/source.cs#1)]
 [!code-vb[Classic OSFeature.LayeredWindows Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OSFeature.LayeredWindows Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Forms.OSFeature.IsPresent" />
        <altmember cref="M:System.Windows.Forms.OSFeature.GetVersionPresent(System.Object)" />
        <altmember cref="P:System.Windows.Forms.OSFeature.Feature" />
      </Docs>
    </Member>
    <Member MemberName="Themes">
      <MemberSignature Language="C#" Value="public static readonly object Themes;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object Themes" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.OSFeature.Themes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Themes As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ Themes;" />
      <MemberSignature Language="F#" Value=" staticval mutable Themes : obj" Usage="System.Windows.Forms.OSFeature.Themes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示作業系統的主題功能。 此欄位為唯讀。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主題是底色圖案、 資料指標、 字型、 聲音和首度引進圖示納入 Microsoft 加號的視覺介面設定的集合 ！ Windows 95。 .NET Framework 並不直接支援操作的佈景主題，不過卻有更詳盡的支援中的視覺化樣式的<xref:System.Windows.Forms.VisualStyles?displayProperty=nameWithType>命名空間。 如需 Windows 佈景主題的詳細資訊，請參閱主題佈景主題和視覺化樣式和 Win32 SDK 中的視覺樣式參考。  
  
 若要判斷是否已安裝主題功能，請呼叫基底類別方法<xref:System.Windows.Forms.FeatureSupport.IsPresent%2A>與<xref:System.Windows.Forms.OSFeature.Themes>做為要尋找的功能。  
  
 或者，您可以檢查是否安裝此功能藉由呼叫<xref:System.Windows.Forms.OSFeature.GetVersionPresent%2A>方法<xref:System.Windows.Forms.OSFeature.Themes>做為要尋找的功能。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Forms.OSFeature.IsPresent" />
        <altmember cref="M:System.Windows.Forms.OSFeature.GetVersionPresent(System.Object)" />
        <altmember cref="P:System.Windows.Forms.OSFeature.Feature" />
      </Docs>
    </Member>
  </Members>
</Type>