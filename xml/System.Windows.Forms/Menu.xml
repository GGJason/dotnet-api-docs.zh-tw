<Type Name="Menu" FullName="System.Windows.Forms.Menu">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="adf082395a798050141636ba818758d1dede43a6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36517450" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Menu : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Menu extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Menu" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Menu&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Menu abstract : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Menu = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示所有功能表的基礎功能。 雖然 <see cref="T:System.Windows.Forms.ToolStripDropDown" /> 和 <see cref="T:System.Windows.Forms.ToolStripDropDownMenu" /> 會在之前版本的 <see cref="T:System.Windows.Forms.Menu" /> 控制項中取代及新增功能，您還是可以選擇保留 <see cref="T:System.Windows.Forms.Menu" /> 以提供回溯相容性以及供未來使用。　</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別是基底類別<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.MenuItem>，和<xref:System.Windows.Forms.ContextMenu>類別。 您無法建立此類別的執行個體。 功能表的應用程式 consist<xref:System.Windows.Forms.MenuItem>物件。 這些可以包含其他<xref:System.Windows.Forms.MenuItem>物件，代表子功能表項目。 <xref:System.Windows.Forms.MenuItem>物件可以儲存在<xref:System.Windows.Forms.MainMenu>顯示做為表單的整個功能表結構或<xref:System.Windows.Forms.ContextMenu>用來顯示捷徑功能表。 這個類別會提供很常見的功能表上的所有類別的功能。  
  
 不同於多個基底類別，<xref:System.Windows.Forms.Menu>類別會使用其衍生的類別來定義許多屬性。 如果您使用您的功能表中的多重文件介面 (MDI) 應用程式，您可以使用<xref:System.Windows.Forms.Menu.MdiListItem%2A>屬性來指定<xref:System.Windows.Forms.MenuItem>會在您的應用程式中顯示開啟的 MDI 子表單的清單。 <xref:System.Windows.Forms.Menu.MenuItems%2A>屬性包含一份<xref:System.Windows.Forms.MenuItem>功能表類別中所儲存的物件。 如<xref:System.Windows.Forms.MainMenu>或<xref:System.Windows.Forms.ContextMenu>，這個屬性會包含所有<xref:System.Windows.Forms.MenuItem>顯示物件。 如<xref:System.Windows.Forms.MenuItem>、<xref:System.Windows.Forms.Menu.MenuItems%2A>屬性代表與其關聯的子功能表項目。  
  
 屬性會針對所有功能表在衍生的類別，提供除了<xref:System.Windows.Forms.Menu>類別也提供方法，例如<xref:System.Windows.Forms.Menu.CloneMenu%2A>和<xref:System.Windows.Forms.Menu.MergeMenu%2A>，可讓您建立新的功能表，從現有的功能表，而且也會合併兩個功能表結構在一起。  
  
 <xref:System.Windows.Forms.Menu>類別也會定義巢狀的類別<xref:System.Windows.Forms.Menu.MenuItemCollection>。 這個類別定義的集合，<xref:System.Windows.Forms.MenuItem>所使用的物件<xref:System.Windows.Forms.Menu.MenuItems%2A>屬性。 您可以使用的方法<xref:System.Windows.Forms.Menu.MenuItemCollection>類別來新增和移除功能表項目從<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.ContextMenu>，或<xref:System.Windows.Forms.MenuItem>。  
  
   
  
## Examples  
 下列程式碼範例會使用衍生的類別， <xref:System.Windows.Forms.MenuItem>，若要建立表單的功能表結構。 範例程式碼加入<xref:System.Windows.Forms.MenuItem>，表示最上層功能表項目中，選取字型的大小，將子功能表項目加入至它，然後將兩個子功能表項目加入至該功能表項目代表應用程式中的大型和小型的字型選項。 這個範例需要有<xref:System.Windows.Forms.MainMenu>名為物件`mainMenu1`和第四個<xref:System.Windows.Forms.MenuItem>物件命名`menuItem1`， `menuItem2`， `menuItem3`，和`menuItem4`。  
  
 [!code-cpp[Classic Menu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu Example/CS/source.cs#1)]
 [!code-vb[Classic Menu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MainMenu" />
    <altmember cref="T:System.Windows.Forms.ContextMenu" />
    <altmember cref="T:System.Windows.Forms.MenuItem" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Menu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Menu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Menu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.Menu" Usage="new System.Windows.Forms.Menu items" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">
          <see cref="T:System.Windows.Forms.MenuItem" /> 型別的陣列，包含要加入至功能表的物件。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Menu" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因為<xref:System.Windows.Forms.Menu>繼承的類別可以呼叫功能表的建構函式僅是抽象類別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="protected internal void CloneMenu (System.Windows.Forms.Menu menuSrc);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void CloneMenu(class System.Windows.Forms.Menu menuSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.CloneMenu(System.Windows.Forms.Menu)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub CloneMenu (menuSrc As Menu)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void CloneMenu(System::Windows::Forms::Menu ^ menuSrc);" />
      <MemberSignature Language="F#" Value="member this.CloneMenu : System.Windows.Forms.Menu -&gt; unit" Usage="menu.CloneMenu menuSrc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuSrc" Type="System.Windows.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="menuSrc">要複製的 <see cref="T:System.Windows.Forms.Menu" />。</param>
        <summary>將以參數傳遞的 <see cref="T:System.Windows.Forms.Menu" /> 複製到目前的 <see cref="T:System.Windows.Forms.Menu" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會複製整個清單<xref:System.Windows.Forms.MenuItem>物件 (儲存在<xref:System.Windows.Forms.Menu>中傳遞給`menuSrc`) 至目前功能表。 您也可以在衍生類別中使用這個方法，複製<xref:System.Windows.Forms.MenuItem>物件。 他們再能夠重複使用衍生自其他類別<xref:System.Windows.Forms.Menu>，例如<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.ContextMenu>，和<xref:System.Windows.Forms.MenuItem>。  
  
   
  
## Examples  
 這個範例會建立主功能表中， `mainMenu1`，具有三個功能表項目： `File`， `Edit`，和`View`。 然後它會使用<xref:System.Windows.Forms.Menu.CloneMenu%2A>方法，以複製`mainMenu1`到`mainMenu2`。 然後指派給表單，顯示複製的功能表。 此程式需要，您已經建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[CloneMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/CloneMenu/CPP/form1.cpp#1)]
 [!code-csharp[CloneMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/CloneMenu/CS/form1.cs#1)]
 [!code-vb[CloneMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CloneMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="T:System.Windows.Forms.MainMenu" />
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected virtual IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance native int CreateMenuHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.CreateMenuHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateMenuHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual IntPtr CreateMenuHandle();" />
      <MemberSignature Language="F#" Value="abstract member CreateMenuHandle : unit -&gt; nativeint&#xA;override this.CreateMenuHandle : unit -&gt; nativeint" Usage="menu.CreateMenuHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Windows.Forms.Menu" /> 的新控制代碼。</summary>
        <returns>如果該方法成功則為功能表的控制代碼；否則為 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於與 unmanaged 程式碼的作業。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="menu.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
        <summary>處置 <see cref="T:System.Windows.Forms.Menu" /> 所使用的資源 (除了記憶體之外)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Menu.Dispose%2A> 使用完畢時，請呼叫 <xref:System.Windows.Forms.Menu>。 <xref:System.Windows.Forms.Menu.Dispose%2A> 方法會將 <xref:System.Windows.Forms.Menu> 保留在無法使用的狀態。 在呼叫<xref:System.Windows.Forms.Menu.Dispose%2A>，您必須釋放所有參考<xref:System.Windows.Forms.Menu>讓它所佔用的記憶體可由記憶體回收收回。  
  
> [!NOTE]
>  在您釋放最後一個 <xref:System.Windows.Forms.Menu.Dispose%2A> 參考之前，請務必呼叫 <xref:System.Windows.Forms.Menu>。 否則，資源<xref:System.Windows.Forms.Menu>是使用之前，將不會釋放記憶體回收集合呼叫<xref:System.Windows.Forms.Menu>物件的解構函式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindHandle">
      <MemberSignature Language="C#" Value="public const int FindHandle = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 FindHandle = (0)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Menu.FindHandle" />
      <MemberSignature Language="VB.NET" Value="Public Const FindHandle As Integer  = 0" />
      <MemberSignature Language="C++ CLI" Value="public: int FindHandle = 0;" />
      <MemberSignature Language="F#" Value="val mutable FindHandle : int" Usage="System.Windows.Forms.Menu.FindHandle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>指定 <see cref="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" /> 方法應該搜尋控制代碼。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMenuItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuItem FindMenuItem (int type, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.MenuItem FindMenuItem(int32 type, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindMenuItem (type As Integer, value As IntPtr) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::MenuItem ^ FindMenuItem(int type, IntPtr value);" />
      <MemberSignature Language="F#" Value="member this.FindMenuItem : int * nativeint -&gt; System.Windows.Forms.MenuItem" Usage="menu.FindMenuItem (type, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Int32" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="type">用來尋找 <see cref="T:System.Windows.Forms.MenuItem" /> 的項目型別。</param>
        <param name="value">用來尋找 <see cref="T:System.Windows.Forms.MenuItem" /> 的項目。</param>
        <summary>取得包含指定值的 <see cref="T:System.Windows.Forms.MenuItem" />。</summary>
        <returns>符合值的 <see cref="T:System.Windows.Forms.MenuItem" />，否則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要搜尋<xref:System.Windows.Forms.MenuItem>使用控制代碼，傳入<xref:System.Windows.Forms.Menu.FindHandle>欄位做為型別，以及的控制代碼<xref:System.Windows.Forms.MenuItem>您想要尋找做為值。  
  
 若要搜尋<xref:System.Windows.Forms.MenuItem>使用捷徑，傳入<xref:System.Windows.Forms.Menu.FindShortcut>欄位做為型別，並快顯值<xref:System.Windows.Forms.MenuItem>您想要尋找做為值。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">呼叫這個方法的控制項。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FindMergePosition">
      <MemberSignature Language="C#" Value="protected int FindMergePosition (int mergeOrder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance int32 FindMergePosition(int32 mergeOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.FindMergePosition(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function FindMergePosition (mergeOrder As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; int FindMergePosition(int mergeOrder);" />
      <MemberSignature Language="F#" Value="member this.FindMergePosition : int -&gt; int" Usage="menu.FindMergePosition mergeOrder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="mergeOrder">要合併的功能表項目的合併順序位置。</param>
        <summary>傳回功能表項目應該插入功能表上的位置。</summary>
        <returns>功能表項目應該插入功能表上的位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 功能表項目的合併順序指定的相對位置，此功能表項目會假設如果功能表結構<xref:System.Windows.Forms.MenuItem>包含在與另一個合併。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindShortcut">
      <MemberSignature Language="C#" Value="public const int FindShortcut = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 FindShortcut = (1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Menu.FindShortcut" />
      <MemberSignature Language="VB.NET" Value="Public Const FindShortcut As Integer  = 1" />
      <MemberSignature Language="C++ CLI" Value="public: int FindShortcut = 1;" />
      <MemberSignature Language="F#" Value="val mutable FindShortcut : int" Usage="System.Windows.Forms.Menu.FindShortcut" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>指定 <see cref="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" /> 方法應該搜尋捷徑。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ContextMenu GetContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ContextMenu GetContextMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.GetContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextMenu () As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ContextMenu ^ GetContextMenu();" />
      <MemberSignature Language="F#" Value="member this.GetContextMenu : unit -&gt; System.Windows.Forms.ContextMenu" Usage="menu.GetContextMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得含有這個功能表的 <see cref="T:System.Windows.Forms.ContextMenu" />。</summary>
        <returns>含有這個功能表的 <see cref="T:System.Windows.Forms.ContextMenu" />。 預設值為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可讓您取得的參考<xref:System.Windows.Forms.ContextMenu>中包含這個功能表。 這個屬性會傳回`null`如果功能表未包含在<xref:System.Windows.Forms.ContextMenu>。 [] 功能表中可能發生這<xref:System.Windows.Forms.MenuItem>或<xref:System.Windows.Forms.MainMenu>，或如果功能表未包含任何功能表中。 判斷是否目前正在使用功能表，並決定在何處，您可以使用這個屬性。  
  
   
  
## Examples  
 在此範例中，您會使用<xref:System.Windows.Forms.Menu.GetContextMenu%2A>方法，以取得快顯功能表，其中包含的參考`menuItem1`或`menuItem2`，並在訊息方塊中顯示的捷徑功能表上的資訊。 您有兩個項目，以程式設計方式建立快顯功能表`New`和`Open`。 然後建立適當的事件處理常式，將功能加入至這些項目。 當您執行範例時，您會取得訊息方塊，其中會告訴您以滑鼠右鍵按一下以顯示快顯功能表的表單。 然後，當您按一下功能表項目，您會取得另一則訊息，告知已按下哪些項目，並顯示包含的捷徑功能表上的資訊。 這個範例需要您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[GetContextMenu2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetContextMenu2/CPP/form1.cpp#1)]
 [!code-csharp[GetContextMenu2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetContextMenu2/CS/form1.cs#1)]
 [!code-vb[GetContextMenu2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetContextMenu2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.GetMainMenu" />
      </Docs>
    </Member>
    <Member MemberName="GetMainMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MainMenu GetMainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.MainMenu GetMainMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.GetMainMenu" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMainMenu () As MainMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::MainMenu ^ GetMainMenu();" />
      <MemberSignature Language="F#" Value="member this.GetMainMenu : unit -&gt; System.Windows.Forms.MainMenu" Usage="menu.GetMainMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得含有這個功能表的 <see cref="T:System.Windows.Forms.MainMenu" />。</summary>
        <returns>含有這個功能表的 <see cref="T:System.Windows.Forms.MainMenu" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可讓您取得的參考<xref:System.Windows.Forms.MainMenu>目前位於此功能表。 這個屬性會傳回`null`如果功能表未包含在<xref:System.Windows.Forms.MainMenu>。 [] 功能表中可能發生這<xref:System.Windows.Forms.MenuItem>或<xref:System.Windows.Forms.ContextMenu>，或如果功能表未包含任何功能表中。 判斷是否目前正在使用功能表，並決定在何處，您可以使用這個屬性。  
  
   
  
## Examples  
 這個範例會宣告<xref:System.Windows.Forms.MainMenu>， `mainMenu1`，以及四個功能表項目， `menuItem1`， `menuItem2`， `menuItem3`，和`menuItem4`。 只有第一個的三個功能表項目加入`mainMenu1`供顯示。 程式接著會檢查是否`menuItem3`正在使用，也就是`true`，並決定的表單會使用它。 標籤文字用來顯示裝載表單的名稱<xref:System.Windows.Forms.MainMenu>。 如果您變更功能表項目以測試良好與否`menuItem4`，條件評估為`false`因為`menuItem4`從未使用過。 這個範例需要您已建立<xref:System.Windows.Forms.Form>名為`MyForm`包含<xref:System.Windows.Forms.Label>名為`label1`。  
  
 [!code-cpp[GetMainMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetMainMenu/CPP/form1.cpp#1)]
 [!code-csharp[GetMainMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetMainMenu/CS/form1.cs#1)]
 [!code-vb[GetMainMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetMainMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.GetContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.Menu.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，表示功能表的視窗控制代碼 (Window Handle)。</summary>
        <value>此功能表的 HMENU 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性來取得執行特殊的作業，此類別或其衍生的類別所提供的功能之外的功能表來功能表的控制代碼。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsParent">
      <MemberSignature Language="C#" Value="public virtual bool IsParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.IsParent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsParent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsParent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsParent : bool" Usage="System.Windows.Forms.Menu.IsParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出這個功能表是否包含任何功能表項目。 這個屬性是唯讀的。</summary>
        <value>如果這個功能表包含 <see cref="T:System.Windows.Forms.MenuItem" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個方法來判斷是否有任何<xref:System.Windows.Forms.MenuItem>物件會指派給這個功能表。 這相當於檢查`null`中<xref:System.Windows.Forms.Menu.MenuItems%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.MainMenu>具有兩個<xref:System.Windows.Forms.MenuItem>物件。 然後它會使用<xref:System.Windows.Forms.Menu.IsParent%2A>屬性來判斷是否`mainMenu1`包含功能表項目。 如果條件評估`true`，它會設定<xref:System.Windows.Forms.MainMenu.RightToLeft%2A>屬性`true`並繫結至主功能表<xref:System.Windows.Forms.Form>。 這個範例需要您有<xref:System.Windows.Forms.Form>建立名為`Form1`。  
  
 [!code-cpp[IsParent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IsParent/CPP/form1.cpp#1)]
 [!code-csharp[IsParent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IsParent/CS/form1.cs#1)]
 [!code-vb[IsParent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IsParent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用於與 unmanaged 程式碼的作業。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName="MdiListItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuItem MdiListItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.MenuItem MdiListItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MdiListItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MdiListItem As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MenuItem ^ MdiListItem { System::Windows::Forms::MenuItem ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MdiListItem : System.Windows.Forms.MenuItem" Usage="System.Windows.Forms.Menu.MdiListItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出用來顯示多重文件介面 (MDI) 子表單清單的 <see cref="T:System.Windows.Forms.MenuItem" />。</summary>
        <value>
          <see cref="T:System.Windows.Forms.MenuItem" />，表示顯示應用程式中開啟的 MDI 子表單清單的功能表項目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性來判斷是否<xref:System.Windows.Forms.MenuItem>已被指定為在 MDI 應用程式中顯示開啟的子視窗清單。 若要使用特定<xref:System.Windows.Forms.MenuItem>MDI 清單，來設定<xref:System.Windows.Forms.MenuItem.MdiList%2A>屬性<xref:System.Windows.Forms.MenuItem>使用。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MdiList" />
      </Docs>
    </Member>
    <Member MemberName="MenuItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Menu.MenuItemCollection MenuItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Menu/MenuItemCollection MenuItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MenuItems As Menu.MenuItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Menu::MenuItemCollection ^ MenuItems { System::Windows::Forms::Menu::MenuItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MenuItems : System.Windows.Forms.Menu.MenuItemCollection" Usage="System.Windows.Forms.Menu.MenuItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Menu+MenuItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出與功能表相關的 <see cref="T:System.Windows.Forms.MenuItem" /> 物件集合。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" />，表示儲存在功能表中的 <see cref="T:System.Windows.Forms.MenuItem" /> 物件清單。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性來取得目前儲存在 [] 功能表的功能表項目清單的參考。 如<xref:System.Windows.Forms.MainMenu>和<xref:System.Windows.Forms.ContextMenu>物件<xref:System.Windows.Forms.Menu.MenuItems%2A>屬性包含控制項中的整個功能表結構。 如<xref:System.Windows.Forms.MenuItem>類別<xref:System.Windows.Forms.Menu.MenuItems%2A>屬性包含相關聯的子功能表項目清單<xref:System.Windows.Forms.MenuItem>。 （這個屬性所提供） 的功能表的功能表項目集合的參考，您可以新增和移除功能表項目，判斷的功能表項目總數與清除集合中的功能表項目清單。 如需維護功能表的功能表項目集合的詳細資訊，請參閱<xref:System.Windows.Forms.Menu.MenuItemCollection?displayProperty=nameWithType>文件。  
  
   
  
## Examples  
 下列程式碼範例會建立在衍生類別的執行個體<xref:System.Windows.Forms.MainMenu>，並將<xref:System.Windows.Forms.MenuItem>物件至其集合<xref:System.Windows.Forms.MenuItem>物件。 這個範例需要在此範例中定義的方法是位於表單的類別，以及該表單類別中的方法所呼叫。  
  
 [!code-cpp[Classic Menu.MenuItems Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItems Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItems Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItems Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MainMenu" />
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="T:System.Windows.Forms.Menu.MenuItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public virtual void MergeMenu (System.Windows.Forms.Menu menuSrc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MergeMenu(class System.Windows.Forms.Menu menuSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MergeMenu(System.Windows.Forms.Menu)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub MergeMenu (menuSrc As Menu)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void MergeMenu(System::Windows::Forms::Menu ^ menuSrc);" />
      <MemberSignature Language="F#" Value="abstract member MergeMenu : System.Windows.Forms.Menu -&gt; unit&#xA;override this.MergeMenu : System.Windows.Forms.Menu -&gt; unit" Usage="menu.MergeMenu menuSrc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuSrc" Type="System.Windows.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="menuSrc">
          <see cref="T:System.Windows.Forms.Menu" />，它的功能表項目和目前功能表的功能表項目合併。</param>
        <summary>將一個功能表的 <see cref="T:System.Windows.Forms.MenuItem" /> 物件和目前的功能表合併。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法就會合併<xref:System.Windows.Forms.MenuItem>物件從目前的功能表與一個功能表。 <xref:System.Windows.Forms.MenuItem> 物件會根據合併<xref:System.Windows.Forms.MenuItem.MergeType%2A?displayProperty=nameWithType>和<xref:System.Windows.Forms.MenuItem.MergeOrder%2A?displayProperty=nameWithType>屬性。  
  
 功能表合併處理通常是為了合併與作用中的 MDI 子表單的多個文件介面 (MDI) 父表單的功能表。 這是由.NET Framework common language runtime 會自動執行。 例如，如果 MDI 父表單包含一組功能表來處理檔案，而且您的 MDI 子表單也有檔案相關的功能表項目，功能表設定會自動合併到單一檔案 功能表的子表單都會在 MDI 父表單時，設定。  
  
 您可以使用<xref:System.Windows.Forms.Menu.MergeMenu%2A>方法，如果您要合併兩個不屬於 MDI 應用程式的功能表結構。 可以呼叫此實作<xref:System.Windows.Forms.MainMenu>或<xref:System.Windows.Forms.ContextMenu>類別來合併兩個或多個物件衍生自<xref:System.Windows.Forms.Menu>。  
  
 要合併兩個<xref:System.Windows.Forms.MenuItem>物件使用<xref:System.Windows.Forms.MenuItem.MergeMenu%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 這個範例會建立兩個功能表，`mainMenu1`和`mainMenu2`。 第一個功能表包含一個<xref:System.Windows.Forms.MenuItem>， `File`，第二個包含一個<xref:System.Windows.Forms.MenuItem>， `Edit`。 使用<xref:System.Windows.Forms.Menu.MergeMenu%2A>方法，`mainMenu2`與合併`mainMenu1`。 當顯示，`mainMenu1`將包含兩個功能表項目`File`和`Edit`。 這個範例需要您已建立<xref:System.Windows.Forms.Form>名為`Form1`。  
  
 [!code-cpp[MergeMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MergeMenu/CPP/form1.cpp#1)]
 [!code-csharp[MergeMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MergeMenu/CS/form1.cs#1)]
 [!code-vb[MergeMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MergeMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">嘗試將此功能表與它自己合併。</exception>
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.Menu.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Forms.Menu" /> 的名稱。</summary>
        <value>表示名稱的字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在設計階段，這個屬性是設定為控制項的程式設計識別項。 不過，此屬性會在執行階段在控制項上的 並無任何影響。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool&#xA;override this.ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool" Usage="menu.ProcessCmdKey (msg, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">傳址方式所傳遞的 <see cref="T:System.Windows.Forms.Message" />，表示要處理的視窗訊息。</param>
        <param name="keyData">其中一個 <see cref="T:System.Windows.Forms.Keys" /> 值，表示要處理的按鍵。</param>
        <summary>處理命令按鍵。</summary>
        <returns>如果字元已由控制項處理，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Menu.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與控制項相關的使用者定義資料。</summary>
        <value>表示資料的物件。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="menu.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回表示 <see cref="T:System.String" /> 控制項的 <see cref="T:System.Windows.Forms.Menu" />。</summary>
        <returns>
          <see cref="T:System.String" /> ，代表目前的 <see cref="T:System.Windows.Forms.Menu" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Menu.ToString%2A>方法會傳回<xref:System.String>包含型別和中的項目數<xref:System.Windows.Forms.Menu.MenuItems%2A>控制項的屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>