<Type Name="ListViewInsertionMark" FullName="System.Windows.Forms.ListViewInsertionMark">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2e7383a0bdc59f7b3f55dd5bd6162c3f0cd7390c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37509993" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ListViewInsertionMark" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ListViewInsertionMark extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListViewInsertionMark" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ListViewInsertionMark" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListViewInsertionMark sealed" />
  <TypeSignature Language="F#" Value="type ListViewInsertionMark = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>將項目拖曳至 <see cref="T:System.Windows.Forms.ListView" /> 控制項的新位置時，用來表示預期的置放位置。 只有在 Windows XP (含) 以後版本上才能使用這個功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以擷取<xref:System.Windows.Forms.ListViewInsertionMark>從<xref:System.Windows.Forms.ListView.InsertionMark%2A>屬性<xref:System.Windows.Forms.ListView>控制項，並使用它以視覺方式表示應該的置放位置拖放作業中，當項目拖曳至新位置。  
  
 這項功能的運作時，才<xref:System.Windows.Forms.ListView.AutoArrange%2A?displayProperty=nameWithType>屬性設定為`true`及何時<xref:System.Windows.Forms.ListView>控制項不會自動排序項目。 若要防止自動排序<xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType>屬性必須設為<xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType>並<xref:System.Windows.Forms.ListView.View%2A?displayProperty=nameWithType>屬性必須設為<xref:System.Windows.Forms.View.LargeIcon?displayProperty=nameWithType>， <xref:System.Windows.Forms.View.SmallIcon?displayProperty=nameWithType>，或<xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>。 此外，插入標記功能無法搭配<xref:System.Windows.Forms.ListView>群組功能，因為群組功能排序的項目，透過群組成員資格。  
  
 <xref:System.Windows.Forms.ListViewInsertionMark>通常會使用類別中的處理常式<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>或<xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType>事件，以更新插入標記的位置，如拖曳項目。 它也會在處理常式<xref:System.Windows.Forms.Control.DragDrop?displayProperty=nameWithType>或<xref:System.Windows.Forms.Control.MouseUp?displayProperty=nameWithType>事件，以拖曳的項目插入正確的位置。  
  
 若要更新的插入標記的位置，請遵循下列步驟：  
  
1.  中的處理常式<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>或是<xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType>事件，使用<xref:System.Windows.Forms.ListView.InsertionMark%2A?displayProperty=nameWithType>屬性來存取<xref:System.Windows.Forms.ListViewInsertionMark>相關聯的物件<xref:System.Windows.Forms.ListView>控制項。  
  
2.  使用<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法來擷取滑鼠指標最接近之項目的索引。  
  
3.  傳遞的索引值<xref:System.Windows.Forms.ListView.GetItemRect%2A?displayProperty=nameWithType>方法來擷取項目的週框矩形。  
  
4.  如果滑鼠指標位於左側的週框的角落，設定<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>屬性，以`false`; 否則，請將它設定為`true`。  
  
5.  設定<xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>屬性設為從擷取的索引值<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法。 插入標記出現在下一步 指定的索引，到左邊或右邊，取決於項目<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>屬性值。 如果項目拖曳至本身，索引便是-1，並已隱藏插入標記。  
  
 若要在正確的位置插入拖曳的項目，請遵循下列步驟：  
  
1.  中的處理常式<xref:System.Windows.Forms.Control.DragDrop?displayProperty=nameWithType>或是<xref:System.Windows.Forms.Control.MouseUp?displayProperty=nameWithType>事件，使用<xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>來判斷目前的位置，插入標記的屬性。 儲存此值，以用作稍後插入的索引。  
  
2.  如果<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>屬性設定為`true`，遞增預存的插入的索引值。  
  
3.  使用<xref:System.Windows.Forms.ListView.ListViewItemCollection.Insert%2A?displayProperty=nameWithType>方法來插入的拖曳的項目到複製<xref:System.Windows.Forms.ListView.Items%2A?displayProperty=nameWithType>中預存的插入的索引處的集合。  
  
4.  使用<xref:System.Windows.Forms.ListView.ListViewItemCollection.Remove%2A?displayProperty=nameWithType>方法來移除原始的拖曳的項目複本。  
  
 因此索引中的值中移除原始複本之前，您必須插入的拖曳的項目複製<xref:System.Windows.Forms.ListView.Items%2A?displayProperty=nameWithType>插入之前，不會改變集合。  
  
 若要確保顯示的項目時，會在其索引值的順序相同，您必須設定<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A?displayProperty=nameWithType>屬性的實作<xref:System.Collections.IComparer>介面的索引值所排序的項目。 如需詳細資訊，請參閱 < 範例 > 一節。  
  
 您可以使用，以修改插入標記的色彩<xref:System.Windows.Forms.ListViewInsertionMark.Color%2A>屬性。 如果您需要的大小或插入標記的位置，您可以透過取得其周框<xref:System.Windows.Forms.ListViewInsertionMark.Bounds%2A>屬性。  
  
> [!NOTE]
>  當您的應用程式呼叫時，插入標記功能是僅適用於 Windows XP 和 Windows Server 2003 系列<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>方法。 在舊版的作業系統，插入標記相關的任何程式碼將會被忽略，不會出現插入標記。 如此一來，任何程式碼插入標記功能而定，可能無法正常運作。 您可能想要包含的測試，判斷是否可用，插入標記功能，並提供替代功能，無法使用時。 例如，您可以略過所有實作拖放項目重新定位時不支援插入標記的作業系統上執行的程式碼。  
>   
>  插入標記功能會提供相同的程式庫，提供作業系統的佈景主題功能。 若要檢查此程式庫的可用性，請呼叫<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType>方法多載，並傳入<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType>值。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView>插入標記功能，並使用標準重新實作拖放項目排列拖曳事件。 插入標記的位置中的處理常式更新<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>事件。 在這個處理常式中，滑鼠指標位置會相較於最接近的項目 的中間點，和結果來判斷是否插入標記出現在左邊或右邊的項目。  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListView" />
  </Docs>
  <Members>
    <Member MemberName="AppearsAfterItem">
      <MemberSignature Language="C#" Value="public bool AppearsAfterItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AppearsAfterItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem" />
      <MemberSignature Language="VB.NET" Value="Public Property AppearsAfterItem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AppearsAfterItem { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AppearsAfterItem : bool with get, set" Usage="System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出插入標記是否出現在具有 <see cref="P:System.Windows.Forms.ListViewInsertionMark.Index" /> 屬性所指定之索引的項目右邊。</summary>
        <value>若插入標記出現在具有 <see cref="P:System.Windows.Forms.ListViewInsertionMark.Index" /> 屬性所指定之索引的項目右邊則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法可讓您尋找的項目最接近滑鼠指標，但您必須執行您自己的計算，以判斷是否之前或之後此項目，應該會出現插入標記。  
  
 若要計算所需的值<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>屬性，請遵循下列步驟：  
  
1.  使用<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法來擷取滑鼠指標最接近之項目的索引。  
  
2.  傳遞的索引值<xref:System.Windows.Forms.ListView.GetItemRect%2A?displayProperty=nameWithType>方法來擷取項目的週框矩形。  
  
3.  如果滑鼠指標位於左側的週框的角落，設定<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>屬性，以`false`; 否則，請將它設定為`true`。  
  
 如需詳細資訊，請參閱<xref:System.Windows.Forms.ListViewInsertionMark>概觀參考主題。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView>插入標記功能，並使用標準重新實作拖放項目排列拖曳事件。 插入標記的位置中的處理常式更新<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>事件。 在這個處理常式中，滑鼠指標位置會相較於最接近的項目 的中間點，和結果來判斷是否插入標記出現在左邊或右邊的項目。  
  
 完整的範例，請參閱<xref:System.Windows.Forms.ListViewInsertionMark>概觀參考主題。  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#3)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Bounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListViewInsertionMark.Bounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle Bounds { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.Bounds : System.Drawing.Rectangle" Usage="System.Windows.Forms.ListViewInsertionMark.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得插入標記的週框。</summary>
        <value>
          <see cref="T:System.Drawing.Rectangle" />，表示插入標記的位置和大小。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 週框矩形的插入標記中的座標是相對於左上角<xref:System.Windows.Forms.ListView>控制項。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Drawing.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListViewInsertionMark.Color" />
      <MemberSignature Language="VB.NET" Value="Public Property Color As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color Color { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.Color : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListViewInsertionMark.Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定插入標記的色彩。</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> 值，表示插入標記的色彩。 預設值為 <see cref="P:System.Windows.Forms.ListView.ForeColor" /> 屬性的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個屬性來設定插入標記色彩以外的前景色彩的值<xref:System.Windows.Forms.ListView>控制項。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView>插入標記功能，並使用標準重新實作拖放項目排列拖曳事件。 插入標記的位置中的處理常式更新<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>事件。 在這個處理常式中，滑鼠指標位置會相較於最接近的項目 的中間點，和結果來判斷是否插入標記出現在左邊或右邊的項目。  
  
 完整的範例，請參閱<xref:System.Windows.Forms.ListViewInsertionMark>概觀參考主題。  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#2)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListViewInsertionMark.Index" />
      <MemberSignature Language="VB.NET" Value="Public Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Index : int with get, set" Usage="System.Windows.Forms.ListViewInsertionMark.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定旁邊要顯示插入標記的項目索引。</summary>
        <value>旁邊要顯示插入標記的項目索引，已隱藏插入標記時則為 -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果具有指定索引的項目左邊會出現插入標記<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>屬性設定為`false`; 否則它出現在右邊的項目。 拖曳的項目插入時，插入標記會自動消失<xref:System.Windows.Forms.ListView.Items%2A?displayProperty=nameWithType>集合。 若要移除的插入標記以手動的方式，比方說，拖曳至本身或拖曳控制項之外的項目，設定<xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>為-1 的值。  
  
 使用<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法來擷取最接近指定的位置，例如定位在拖放作業中的項目時，將滑鼠指標的位置之項目的索引。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView>插入標記功能，並使用標準重新實作拖放項目排列拖曳事件。 插入標記的位置中的處理常式更新<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>事件。 在這個處理常式中，滑鼠指標位置會相較於最接近的項目 的中間點，和結果來判斷是否插入標記出現在左邊或右邊的項目。  
  
 完整的範例，請參閱<xref:System.Windows.Forms.ListViewInsertionMark>概觀參考主題。  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#3)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
    <Member MemberName="NearestIndex">
      <MemberSignature Language="C#" Value="public int NearestIndex (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NearestIndex(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListViewInsertionMark.NearestIndex(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function NearestIndex (pt As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NearestIndex(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="member this.NearestIndex : System.Drawing.Point -&gt; int" Usage="listViewInsertionMark.NearestIndex pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">
          <see cref="T:System.Drawing.Point" />，表示要從此位置尋找最接近的項目。</param>
        <summary>擷取最接近指定點的項目索引。</summary>
        <returns>最接近指定點的項目索引，如果最接近的項目是目前正在拖曳的項目，則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可讓您在進行拖放作業，找出最接近的滑鼠指標的項目。 使用索引傳回的值來設定<xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>屬性。 當滑鼠指標最接近的項目正在拖曳的項目，這個方法的傳回值為-1。 在此情況下，設定<xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>屬性設為這個值會隱藏插入標記。  
  
 這個方法會尋找最接近的項目，將滑鼠指標所在位置，而不論<xref:System.Windows.Forms.ListView.GetItemAt%2A?displayProperty=nameWithType>方法會傳回在指定的位置，項目或`null`如果該位置沒有任何項目。 <xref:System.Windows.Forms.ListView.GetItemAt%2A?displayProperty=nameWithType>方法會傳回`null`，比方說，當滑鼠指標位於兩個項目。 基於這個理由，您應該一律使用<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法時使用拖放作業來定位項目。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.ListView>插入標記功能，並使用標準重新實作拖放項目排列拖曳事件。 插入標記的位置中的處理常式更新<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>事件。 在這個處理常式中，滑鼠指標位置會相較於最接近的項目 的中間點，和結果來判斷是否插入標記出現在左邊或右邊的項目。  
  
 完整的範例，請參閱<xref:System.Windows.Forms.ListViewInsertionMark>概觀參考主題。  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#3)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
      </Docs>
    </Member>
  </Members>
</Type>