<Type Name="BindingManagerBase" FullName="System.Windows.Forms.BindingManagerBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="40d487e63b8c4a75f7fc5c25827c2a3808b40ec0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30640632" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class BindingManagerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BindingManagerBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.BindingManagerBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BindingManagerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingManagerBase abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>管理繫結至相同資料來源和資料成員的所有 <see cref="T:System.Windows.Forms.Binding" /> 物件。 這個類別是抽象的。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingManagerBase>可讓 Windows Form 上的資料繫結控制項繫結至相同的資料來源的同步處理。 (如需簡單的控制項繫結至資料來源的詳細資訊，請參閱<xref:System.Windows.Forms.Binding>類別。)例如，假設表單包含兩個<xref:System.Windows.Forms.TextBox>相同的資料來源，但不同的資料行繫結的控制項。 資料來源可能是<xref:System.Data.DataTable>，其中包含客戶的名稱，而資料行可能包含第一個和最後一個名稱。 必須同步處理兩個控制項，以顯示正確的第一個和最後一個名稱，以相同的客戶。 <xref:System.Windows.Forms.CurrencyManager>，後者繼承自<xref:System.Windows.Forms.BindingManagerBase>類別，藉由維護目前的項目中的資料來源的指標會完成這項同步處理。 <xref:System.Windows.Forms.TextBox>控制項的繫結到目前的項目使它們顯示相同的資料列的資訊。 當目前的項目變更時，<xref:System.Windows.Forms.CurrencyManager>通知所有繫結控制項，好讓它們可以重新整理其資料。 此外，您可以設定<xref:System.Windows.Forms.BindingManagerBase.Position%2A>屬性來指定中的資料列<xref:System.Data.DataTable>控制項指向。 若要判斷資料來源中的多少資料列存在，請使用<xref:System.Windows.Forms.BindingManagerBase.Count%2A>屬性。  
  
 <xref:System.Windows.Forms.CurrencyManager>是必要的因為資料來源不一定會維護目前項目指標。 例如，陣列和<xref:System.Collections.ArrayList>物件可以是資料來源，但它們之間沒有屬性，可傳回目前的項目。 若要取得目前的項目，請使用<xref:System.Windows.Forms.BindingManagerBase.Current%2A>屬性。  
  
 <xref:System.Windows.Forms.PropertyManager>也會繼承<xref:System.Windows.Forms.BindingManagerBase>，而且它用來維護之目前屬性的物件，而不是資料來源中的目前物件的屬性。 基於這個理由，嘗試設定<xref:System.Windows.Forms.BindingManagerBase.Position%2A>或<xref:System.Windows.Forms.BindingManagerBase.Count%2A>屬性<xref:System.Windows.Forms.PropertyManager>沒有任何作用。  
  
 若要建立<xref:System.Windows.Forms.BindingManagerBase>，使用<xref:System.Windows.Forms.BindingContext>類別，會傳回<xref:System.Windows.Forms.CurrencyManager>或<xref:System.Windows.Forms.PropertyManager>，視受管理的資料來源。  
  
 方案的程式設計人員會鼓勵直接繫結控制項至<xref:System.Windows.Forms.BindingSource>元件，可做為資料來源和實際的目標資料來源的資料連接器。 <xref:System.Windows.Forms.BindingSource> 大幅簡化了這兩個簡單和複雜資料繫結，包括管理控制項和其目標之間的貨幣。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Windows.Forms.BindingContext>傳回<xref:System.Windows.Forms.BindingManagerBase>特定資料來源。 (這個範例假設您已經宣告`myBindingManagerBase`宣告區段的模組中。)然後此範例會將事件委派至<xref:System.Windows.Forms.BindingManagerBase.CurrentChanged>和<xref:System.Windows.Forms.BindingManagerBase.PositionChanged>事件。 最後，此範例包含四種方法 (`MoveNext`， `MovePrevious`， `MoveFirst`，和`MoveLast`) 的遞增或遞減<xref:System.Windows.Forms.BindingManagerBase.Position%2A>屬性，以及組<xref:System.Windows.Forms.BindingManagerBase.Position%2A>清單中第一個或最後一個資料列。 在清單中的最後一個資料列由使用<xref:System.Windows.Forms.BindingManagerBase.Count%2A>屬性。  
  
 [!code-cpp[Classic BindingManagerBase Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingManagerBase Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingManagerBase Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingManagerBase Example/CS/source.cs#1)]
 [!code-vb[Classic BindingManagerBase Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingManagerBase Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>當您繼承自<see cref="T:System.Windows.Forms.BindingManagerBase" />，您必須覆寫下列的抽象成員： <see cref="M:System.Windows.Forms.BindingManagerBase.AddNew" />， <see cref="P:System.Windows.Forms.BindingManagerBase.Count" />， <see cref="M:System.Windows.Forms.BindingManagerBase.CancelCurrentEdit" />， <see cref="P:System.Windows.Forms.BindingManagerBase.Current" />， <see cref="M:System.Windows.Forms.BindingManagerBase.EndCurrentEdit" />， <see cref="M:System.Windows.Forms.BindingManagerBase.GetItemProperties" />， <see cref="M:System.Windows.Forms.BindingManagerBase.OnCurrentChanged(System.EventArgs)" />， <see cref="P:System.Windows.Forms.BindingManagerBase.Position" />， <see cref="M:System.Windows.Forms.BindingManagerBase.RemoveAt(System.Int32)" /><see cref="M:System.Windows.Forms.BindingManagerBase.ResumeBinding" />， <see cref="M:System.Windows.Forms.BindingManagerBase.SuspendBinding" />，和<see cref="M:System.Windows.Forms.BindingManagerBase.UpdateIsBinding" />。</para>
    </block>
    <altmember cref="T:System.Windows.Forms.BindingSource" />
    <altmember cref="T:System.Windows.Forms.BindingContext" />
    <altmember cref="T:System.Windows.Forms.CurrencyManager" />
    <altmember cref="T:System.Windows.Forms.PropertyManager" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindingManagerBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BindingManagerBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.BindingManagerBase" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設建構函式集<xref:System.Windows.Forms.BindingManagerBase.Bindings%2A>屬性`null`。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Bindings" />
      </Docs>
    </Member>
    <Member MemberName="AddNew">
      <MemberSignature Language="C#" Value="public abstract void AddNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.AddNew" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub AddNew ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddNew();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>當在衍生類別中覆寫時，加入新項目至基礎清單中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingManagerBase.AddNew%2A>方法會將加入新項目加入基礎清單的項目類型使用預設建構函式。 <xref:System.Windows.Forms.BindingManagerBase.AddNew%2A> 主要被為了供程式設計人員將複雜資料繫結支援加入至其自訂元件。  
  
 <xref:System.Windows.Forms.BindingManagerBase.AddNew%2A> 通常會實作使用以下模式，可讓應用程式設計人員將自己的程式碼建立自訂項目：  
  
1.  <xref:System.Windows.Forms.BindingManagerBase.AddNew%2A> 會引發 <xref:System.Windows.Forms.BindingSource.AddingNew> 事件。  
  
2.  程式設計人員可以提供自訂的項目，藉由處理<xref:System.Windows.Forms.BindingSource.AddingNew>事件及設定<xref:System.ComponentModel.AddingNewEventArgs.NewObject%2A>屬性<xref:System.ComponentModel.AddingNewEventArgs>參數，以新的項目。 否則，此元件應該建立使用預設建構函式項目。  
  
3.  如果資料來源沒有實作<xref:System.ComponentModel.IEditableObject>介面，將項目立即加入基礎清單與資料來源。 如果支援這個介面，然後加入已由交易<xref:System.Windows.Forms.BindingManagerBase.CancelCurrentEdit%2A>和<xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.AddingNewEventArgs.NewObject" />
        <altmember cref="T:System.ComponentModel.AddingNewEventArgs" />
        <altmember cref="T:System.ComponentModel.IEditableObject" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.CancelCurrentEdit" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.EndCurrentEdit" />
      </Docs>
    </Member>
    <Member MemberName="BindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingCompleteEventHandler BindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.BindingCompleteEventHandler BindingComplete" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingManagerBase.BindingComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BindingComplete As BindingCompleteEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::BindingCompleteEventHandler ^ BindingComplete;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於資料繫結作業完成時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingManagerBase.BindingComplete>可能包含下列資料繫結作業的完成之後發生的事件：  
  
-   將資訊從資料來源推送到其繫結控制項的屬性。  
  
-   提取資訊從繫結控制項至其相關聯的資料來源。  
  
 請注意會引發這個事件，不論完成狀態的繫結作業中，雖然這個狀態可以檢查來判斷<xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A>屬性<xref:System.Windows.Forms.BindingCompleteEventArgs>與事件相關聯的參數。 <xref:System.Windows.Forms.BindingCompleteEventArgs> 也可能包含錯誤和例外狀況資訊。 例如，在嘗試推播到資料來源的 null 值的繫結作業<xref:System.Windows.Forms.DateTimePicker>控制項將會產生例外狀況，因為<xref:System.DateTime>不可`null`。 在此情況下，繫結作業未順利完成，但是<xref:System.Windows.Forms.BindingManagerBase.BindingComplete>會引發取代事件，以及事件將包含在嘗試失敗的繫結資訊。  
  
   
  
## Examples  
 下列程式碼範例示範如何處理<xref:System.Windows.Forms.BindingManagerBase.BindingComplete>事件，並確認其中一個控制項的值變更時繫結至相同的資料來源的多個控制項都能保持同步。 若要執行此範例中，貼上程式碼的 Windows Form 和呼叫`InitializeControlsAndData`從表單的建構函式的方法或<xref:System.Windows.Forms.Form.Load>事件處理方法。  
  
 [!code-csharp[System.Windows.Forms.BindingSourceMultipleControls#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMultipleControls/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.BindingSourceMultipleControls#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMultipleControls/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
        <altmember cref="T:System.Windows.Forms.BindingCompleteEventArgs" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Bindings" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.SuspendBinding" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.ResumeBinding" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.UpdateIsBinding" />
      </Docs>
    </Member>
    <Member MemberName="Bindings">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingsCollection Bindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingsCollection Bindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingManagerBase.Bindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bindings As BindingsCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingsCollection ^ Bindings { System::Windows::Forms::BindingsCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得受管理的繫結集合。</summary>
        <value>
          <see cref="T:System.Windows.Forms.BindingsCollection" />，包含接受這個 <see cref="T:System.Windows.Forms.Binding" /> 管理的 <see cref="T:System.Windows.Forms.BindingManagerBase" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例取得<xref:System.Windows.Forms.BindingManagerBase>特定資料來源。 然後此範例使用<xref:System.Windows.Forms.BindingManagerBase.Bindings%2A>列印每個控制項的相關資訊的屬性繫結至相同的資料來源。  
  
 [!code-cpp[Classic BindingManagerBase.Bindings Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingManagerBase.Bindings Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingManagerBase.Bindings Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingManagerBase.Bindings Example/CS/source.cs#1)]
 [!code-vb[Classic BindingManagerBase.Bindings Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingManagerBase.Bindings Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingContext" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.SuspendBinding" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.ResumeBinding" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.UpdateIsBinding" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.BindingComplete" />
      </Docs>
    </Member>
    <Member MemberName="CancelCurrentEdit">
      <MemberSignature Language="C#" Value="public abstract void CancelCurrentEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelCurrentEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.CancelCurrentEdit" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub CancelCurrentEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void CancelCurrentEdit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>當在衍生類別中覆寫時，取消目前的編輯。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法僅支援資料來源實作<xref:System.ComponentModel.IEditableObject>介面。 如果物件未實作<xref:System.ComponentModel.IEditableObject>介面，對資料進行的變更不會被捨棄。  
  
 呼叫<xref:System.Windows.Forms.BindingManagerBase.CancelCurrentEdit%2A>方法會使<xref:System.Windows.Forms.Binding.Format>發生的事件。  
  
   
  
## Examples  
 下列程式碼範例示範<xref:System.Windows.Forms.BindingManagerBase.CancelCurrentEdit%2A>和<xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A>方法。 當您呼叫<xref:System.Windows.Forms.BindingManagerBase.CancelCurrentEdit%2A>方法，對資料進行的變更會被捨棄。 當您呼叫<xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A>方法時，所做的變更會保留。  
  
 [!code-cpp[BindingManagerBase.CancelCurrentEdit Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BindingManagerBase.CancelCurrentEdit Example/CPP/canceledit.cpp#1)]
 [!code-csharp[BindingManagerBase.CancelCurrentEdit Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BindingManagerBase.CancelCurrentEdit Example/CS/canceledit.cs#1)]
 [!code-vb[BindingManagerBase.CancelCurrentEdit Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BindingManagerBase.CancelCurrentEdit Example/VB/canceledit.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.AddNew" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.EndCurrentEdit" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.CancelCurrentEdit" />
        <altmember cref="T:System.ComponentModel.IEditableObject" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public abstract int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingManagerBase.Count" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得 <see cref="T:System.Windows.Forms.BindingManagerBase" /> 管理的資料列數目。</summary>
        <value>
          <see cref="T:System.Windows.Forms.BindingManagerBase" /> 管理的資料列數目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.BindingManagerBase.Count%2A>屬性來判斷所維護的資料列在清單中的最後一個項目<xref:System.Windows.Forms.BindingManagerBase>。 若要移到最後一個項目，設定<xref:System.Windows.Forms.BindingManagerBase.Position%2A>屬性<xref:System.Windows.Forms.BindingManagerBase.Count%2A>減 1 的屬性值。  
  
   
  
## Examples  
 下列程式碼範例顯示四種方法設定<xref:System.Windows.Forms.BindingManagerBase.Position%2A>屬性。 `MoveNext`方法屬性遞增量為 1。 `MovePrevious`方法遞減 1 的屬性。 `MoveFirst`方法屬性設定為 0。 `MoveLast`方法屬性的值設定<xref:System.Windows.Forms.BindingManagerBase.Count%2A>減 1 的屬性。  
  
 [!code-cpp[Classic BindingManagerBase.Count Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingManagerBase.Count Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingManagerBase.Count Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingManagerBase.Count Example/CS/source.cs#1)]
 [!code-vb[Classic BindingManagerBase.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingManagerBase.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Position" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public abstract object Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingManagerBase.Current" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Current As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當在衍生類別中覆寫時，取得目前物件。</summary>
        <value>表示目前物件的 <see cref="T:System.Object" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingManagerBase.Current%2A>物件中包含的資料來源中的目前項目值。 若要使用目前的項目值，您必須轉換的項目<xref:System.Type>所包含之物件的<xref:System.Windows.Forms.Binding.DataSource%2A>。 例如，<xref:System.Data.DataTable>包含<xref:System.Data.DataRowView>物件。 若要判斷目前物件的類型，請使用<xref:System.Object.GetType%2A>和<xref:System.Type.ToString%2A>方法。  
  
> [!NOTE]
>  當<xref:System.Windows.Forms.Binding.DataSource%2A>是<xref:System.Data.DataSet>， <xref:System.Data.DataViewManager>，或<xref:System.Data.DataTable>，您實際上繫結至<xref:System.Data.DataView>。 因此，每個<xref:System.Windows.Forms.BindingManagerBase.Current%2A>物件是<xref:System.Data.DataRowView>物件。  
  
   
  
## Examples  
 下列程式碼範例會列印值<xref:System.Windows.Forms.BindingManagerBase.Current%2A>物件存放至<xref:System.Windows.Forms.BindingManagerBase>中<xref:System.Windows.Forms.BindingManagerBase.CurrentChanged>事件。 這個範例假設資料來源是<xref:System.Data.DataTable>包含<xref:System.Data.DataColumn>名為`CustName`。  
  
 [!code-cpp[Classic BindingManagerBase.Current Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingManagerBase.Current Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingManagerBase.Current Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingManagerBase.Current Example/CS/source.cs#1)]
 [!code-vb[Classic BindingManagerBase.Current Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingManagerBase.Current Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Position" />
      </Docs>
    </Member>
    <Member MemberName="CurrentChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CurrentChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CurrentChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於目前繫結的項目變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingManagerBase.CurrentChanged>就會引發事件時<xref:System.Windows.Forms.BindingManagerBase.Current%2A>屬性變更或<xref:System.Windows.Forms.BindingManagerBase.CurrentItemChanged>就會發生事件。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例會列印值<xref:System.Windows.Forms.BindingManagerBase.Current%2A>物件存放至<xref:System.Windows.Forms.BindingManagerBase>中<xref:System.Windows.Forms.BindingManagerBase.CurrentChanged>事件。 這個範例假設資料來源是<xref:System.Data.DataTable>包含<xref:System.Data.DataColumn>名為`CustName`。  
  
 [!code-cpp[Classic BindingManagerBase.Current Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingManagerBase.Current Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingManagerBase.Current Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingManagerBase.Current Example/CS/source.cs#1)]
 [!code-vb[Classic BindingManagerBase.Current Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingManagerBase.Current Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.OnCurrentChanged(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentItemChanged" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Current" />
      </Docs>
    </Member>
    <Member MemberName="CurrentItemChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentItemChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentItemChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingManagerBase.CurrentItemChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CurrentItemChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CurrentItemChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於目前繫結的項目之狀態變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingManagerBase.CurrentItemChanged>中目前繫結項目狀態變更時，就會發生事件。 如果此項目的屬性已變更或取代或移動項目本身，也可能會發生。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.BindingManagerBase.CurrentItemChanged>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.BindingManagerBase>，例如<xref:System.Windows.Forms.PropertyManager>或<xref:System.Windows.Forms.CurrencyManager>。 然後將其命名執行個體`BindingManagerBase1`，並確認事件處理常式關聯<xref:System.Windows.Forms.BindingManagerBase.CurrentItemChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#82](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#82)]
 [!code-vb[System.Windows.Forms.EventExamples#82](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#82)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.OnCurrentItemChanged(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentItemChanged" />
      </Docs>
    </Member>
    <Member MemberName="DataError">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingManagerDataErrorEventHandler DataError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.BindingManagerDataErrorEventHandler DataError" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingManagerBase.DataError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataError As BindingManagerDataErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::BindingManagerDataErrorEventHandler ^ DataError;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerDataErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當 <see cref="T:System.Exception" /> 以無訊息模式處理 <see cref="T:System.Windows.Forms.BindingManagerBase" /> 時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件僅提供資訊，並報告 Common Language Specification (CLS)-僅相容的例外狀況。 若要判斷發生何種類型的例外狀況，處理這個事件，並檢查<xref:System.Windows.Forms.BindingManagerDataErrorEventArgs.Exception%2A>屬性<xref:System.Windows.Forms.BindingManagerDataErrorEventArgs>。  
  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.BindingManagerBase.DataError>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>與<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含繼承自類型的執行個體的專案<xref:System.Windows.Forms.BindingManagerBase>，例如<xref:System.Windows.Forms.PropertyManager>或<xref:System.Windows.Forms.CurrencyManager>。 然後將其命名執行個體`BindingManagerBase1`，並確認事件處理常式關聯<xref:System.Windows.Forms.BindingManagerBase.DataError>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#83](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#83)]
 [!code-vb[System.Windows.Forms.EventExamples#83](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#83)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCurrentEdit">
      <MemberSignature Language="C#" Value="public abstract void EndCurrentEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndCurrentEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.EndCurrentEdit" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub EndCurrentEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void EndCurrentEdit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>當在衍生類別中覆寫時，結束目前的編輯。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法僅支援資料來源實作<xref:System.ComponentModel.IEditableObject>介面。 在此情況下，將儲存的變更。 如果物件未實作<xref:System.ComponentModel.IEditableObject>介面，將不儲存資料所做的變更。  
  
   
  
## Examples  
 下列程式碼範例示範<xref:System.Windows.Forms.BindingManagerBase.CancelCurrentEdit%2A>和<xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A>方法。 當您呼叫<xref:System.Windows.Forms.BindingManagerBase.CancelCurrentEdit%2A>方法，對資料進行的變更會被捨棄。 當您呼叫<xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A>方法時，所做的變更會保留。  
  
 [!code-cpp[BindingManagerBase.CancelCurrentEdit Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BindingManagerBase.CancelCurrentEdit Example/CPP/canceledit.cpp#1)]
 [!code-csharp[BindingManagerBase.CancelCurrentEdit Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BindingManagerBase.CancelCurrentEdit Example/CS/canceledit.cs#1)]
 [!code-vb[BindingManagerBase.CancelCurrentEdit Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BindingManagerBase.CancelCurrentEdit Example/VB/canceledit.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.CancelCurrentEdit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetItemProperties">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得資料來源的屬性描述項清單。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetItemProperties">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.PropertyDescriptorCollection GetItemProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptorCollection GetItemProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.GetItemProperties" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemProperties () As PropertyDescriptorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::PropertyDescriptorCollection ^ GetItemProperties();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>當在衍生類別中覆寫時，取得繫結的屬性描述項集合。</summary>
        <returns>
          <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，表示繫結的屬性描述項。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例使用<xref:System.Windows.Forms.BindingManagerBase.GetItemProperties%2A>方法以傳回<xref:System.ComponentModel.PropertyDescriptorCollection>。 這個範例會列印<xref:System.ComponentModel.MemberDescriptor.Name%2A>和目前值<xref:System.Data.DataColumn>使用<xref:System.ComponentModel.PropertyDescriptor.GetValue%2A>方法<xref:System.ComponentModel.PropertyDescriptor>。  
  
 [!code-cpp[Classic BindingManagerBase.GetItemProperties Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingManagerBase.GetItemProperties Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingManagerBase.GetItemProperties Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingManagerBase.GetItemProperties Example/CS/source.cs#1)]
 [!code-vb[Classic BindingManagerBase.GetItemProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingManagerBase.GetItemProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.GetListName(System.Collections.ArrayList)" />
      </Docs>
    </Member>
    <Member MemberName="GetItemProperties">
      <MemberSignature Language="C#" Value="protected internal virtual System.ComponentModel.PropertyDescriptorCollection GetItemProperties (System.Collections.ArrayList dataSources, System.Collections.ArrayList listAccessors);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptorCollection GetItemProperties(class System.Collections.ArrayList dataSources, class System.Collections.ArrayList listAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.GetItemProperties(System.Collections.ArrayList,System.Collections.ArrayList)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetItemProperties (dataSources As ArrayList, listAccessors As ArrayList) As PropertyDescriptorCollection" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::ComponentModel::PropertyDescriptorCollection ^ GetItemProperties(System::Collections::ArrayList ^ dataSources, System::Collections::ArrayList ^ listAccessors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSources" Type="System.Collections.ArrayList" />
        <Parameter Name="listAccessors" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="dataSources">包含資料來源的 <see cref="T:System.Collections.ArrayList" />。</param>
        <param name="listAccessors">
          <see cref="T:System.Collections.ArrayList" />，包含資料表的繫結屬性。</param>
        <summary>使用指定的 <see cref="T:System.Collections.ArrayList" />，取得繫結的屬性描述項集合。</summary>
        <returns>
          <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，表示繫結的屬性描述項。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建立資料繫結控制項的開發人員會使用這個方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.GetListName(System.Collections.ArrayList)" />
      </Docs>
    </Member>
    <Member MemberName="GetItemProperties">
      <MemberSignature Language="C#" Value="protected virtual System.ComponentModel.PropertyDescriptorCollection GetItemProperties (Type listType, int offset, System.Collections.ArrayList dataSources, System.Collections.ArrayList listAccessors);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptorCollection GetItemProperties(class System.Type listType, int32 offset, class System.Collections.ArrayList dataSources, class System.Collections.ArrayList listAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.GetItemProperties(System.Type,System.Int32,System.Collections.ArrayList,System.Collections.ArrayList)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetItemProperties (listType As Type, offset As Integer, dataSources As ArrayList, listAccessors As ArrayList) As PropertyDescriptorCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::ComponentModel::PropertyDescriptorCollection ^ GetItemProperties(Type ^ listType, int offset, System::Collections::ArrayList ^ dataSources, System::Collections::ArrayList ^ listAccessors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listType" Type="System.Type" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="dataSources" Type="System.Collections.ArrayList" />
        <Parameter Name="listAccessors" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="listType">繫結清單的 <see cref="T:System.Type" />。</param>
        <param name="offset">計數器，用來遞迴呼叫方法。</param>
        <param name="dataSources">包含資料來源的 <see cref="T:System.Collections.ArrayList" />。</param>
        <param name="listAccessors">
          <see cref="T:System.Collections.ArrayList" />，包含資料表的繫結屬性。</param>
        <summary>取得由這個 <see cref="T:System.Windows.Forms.BindingManagerBase" /> 所管理項目的屬性清單。</summary>
        <returns>
          <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，表示繫結的屬性描述項。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個多載是開發人員用來建立資料繫結控制項。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Windows.Forms.BindingManagerBase.GetItemProperties%2A>方法以傳回<xref:System.ComponentModel.PropertyDescriptorCollection>如<xref:System.Windows.Forms.BindingManagerBase>。 此範例接著會列印出<xref:System.ComponentModel.MemberDescriptor.Name%2A>和<xref:System.ComponentModel.PropertyDescriptor.PropertyType%2A>每個<xref:System.ComponentModel.PropertyDescriptor>集合中。  
  
 [!code-cpp[Classic BindingManagerBase.GetItemProperties2 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingManagerBase.GetItemProperties2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingManagerBase.GetItemProperties2 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingManagerBase.GetItemProperties2 Example/CS/source.cs#1)]
 [!code-vb[Classic BindingManagerBase.GetItemProperties2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingManagerBase.GetItemProperties2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.GetListName(System.Collections.ArrayList)" />
      </Docs>
    </Member>
    <Member MemberName="GetListName">
      <MemberSignature Language="C#" Value="protected internal abstract string GetListName (System.Collections.ArrayList listAccessors);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string GetListName(class System.Collections.ArrayList listAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.GetListName(System.Collections.ArrayList)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function GetListName (listAccessors As ArrayList) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::String ^ GetListName(System::Collections::ArrayList ^ listAccessors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listAccessors" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="listAccessors">
          <see cref="T:System.Collections.ArrayList" />，包含資料表的繫結屬性。</param>
        <summary>當在衍生類別中覆寫時，取得提供資料給繫結的清單名稱。</summary>
        <returns>清單名稱，其為繫結提供資料。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBindingSuspended">
      <MemberSignature Language="C#" Value="public bool IsBindingSuspended { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBindingSuspended" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingManagerBase.IsBindingSuspended" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBindingSuspended As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBindingSuspended { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出繫結作業是否已暫止。</summary>
        <value>
          如果繫結作業已暫止，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBindingComplete">
      <MemberSignature Language="C#" Value="protected internal void OnBindingComplete (System.Windows.Forms.BindingCompleteEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void OnBindingComplete(class System.Windows.Forms.BindingCompleteEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub OnBindingComplete (args As BindingCompleteEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void OnBindingComplete(System::Windows::Forms::BindingCompleteEventArgs ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Windows.Forms.BindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">
          <see cref="T:System.Windows.Forms.BindingCompleteEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.BindingManagerBase.BindingComplete" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.BindingManagerBase.OnBindingComplete%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.BindingManagerBase.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.BindingManagerBase.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCurrentChanged">
      <MemberSignature Language="C#" Value="protected internal abstract void OnCurrentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCurrentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.OnCurrentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub OnCurrentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void OnCurrentChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.BindingManagerBase.OnCurrentChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.BindingManagerBase.OnCurrentChanged(System.EventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.BindingManagerBase.OnCurrentChanged(System.EventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentItemChanged" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Current" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Position" />
      </Docs>
    </Member>
    <Member MemberName="onCurrentChangedHandler">
      <MemberSignature Language="C#" Value="protected EventHandler onCurrentChangedHandler;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.EventHandler onCurrentChangedHandler" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.BindingManagerBase.onCurrentChangedHandler" />
      <MemberSignature Language="VB.NET" Value="Protected onCurrentChangedHandler As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="protected: EventHandler ^ onCurrentChangedHandler;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定 <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" /> 事件的事件處理常式。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnCurrentItemChanged">
      <MemberSignature Language="C#" Value="protected internal abstract void OnCurrentItemChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCurrentItemChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.OnCurrentItemChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub OnCurrentItemChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void OnCurrentItemChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentItemChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.BindingManagerBase.OnCurrentItemChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.BindingManagerBase.OnCurrentItemChanged(System.EventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.BindingManagerBase.OnCurrentItemChanged(System.EventArgs)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentItemChanged" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.OnCurrentChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Current" />
      </Docs>
    </Member>
    <Member MemberName="OnDataError">
      <MemberSignature Language="C#" Value="protected internal void OnDataError (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void OnDataError(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.OnDataError(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub OnDataError (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void OnDataError(Exception ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">讓 <see cref="T:System.Exception" /> 事件發生的 <see cref="E:System.Windows.Forms.BindingManagerBase.DataError" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.BindingManagerBase.DataError" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.BindingManagerBase.OnDataError%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.BindingManagerBase.OnDataError(System.Exception)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.BindingManagerBase.OnDataError(System.Exception)" /> 方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="onPositionChangedHandler">
      <MemberSignature Language="C#" Value="protected EventHandler onPositionChangedHandler;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.EventHandler onPositionChangedHandler" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.BindingManagerBase.onPositionChangedHandler" />
      <MemberSignature Language="VB.NET" Value="Protected onPositionChangedHandler As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="protected: EventHandler ^ onPositionChangedHandler;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定 <see cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" /> 事件的事件處理常式。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public abstract int Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingManagerBase.Position" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Property Position As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Position { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當在衍生類別中覆寫時，取得或設定控制項 (繫結至這個資料來源) 所指向基礎清單中的位置。</summary>
        <value>以零為起始的索引，指定基礎清單中的位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.BindingManagerBase.Position%2A>屬性來逐一查看所維護的基礎清單<xref:System.Windows.Forms.BindingManagerBase>。 若要移至第一個項目，設定<xref:System.Windows.Forms.BindingManagerBase.Position%2A>設為 0。 若要移至清單的結尾，請設定<xref:System.Windows.Forms.BindingManagerBase.Position%2A>值<xref:System.Windows.Forms.BindingManagerBase.Count%2A>減 1 的屬性。  
  
 <xref:System.Windows.Forms.BindingManagerBase.PositionChanged>就會發生事件時<xref:System.Windows.Forms.BindingManagerBase.Position%2A>屬性值變更。  
  
   
  
## Examples  
 下列程式碼範例顯示四種方法設定<xref:System.Windows.Forms.BindingManagerBase.Position%2A>屬性。 `MoveNext`方法屬性遞增量為 1。 `MovePrevious`方法遞減 1 的屬性。 `MoveFirst`方法屬性設定為 0，而`MoveLast`方法屬性的值設定<xref:System.Windows.Forms.BindingManagerBase.Count%2A>減 1 的屬性。  
  
 [!code-cpp[Classic BindingManagerBase.Count Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingManagerBase.Count Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingManagerBase.Count Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingManagerBase.Count Example/CS/source.cs#1)]
 [!code-vb[Classic BindingManagerBase.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingManagerBase.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Current" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Count" />
      </Docs>
    </Member>
    <Member MemberName="PositionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PositionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PositionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PositionChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PositionChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="P:System.Windows.Forms.BindingManagerBase.Position" /> 屬性的值已變更後。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Windows.Forms.Binding>，然後將它加入至集合和<xref:System.Windows.Forms.Binding>物件<xref:System.Windows.Forms.TextBox>控制項。 此範例接著會取得<xref:System.Windows.Forms.BindingManagerBase>資料來源，並且將加入的委派<xref:System.Windows.Forms.BindingManagerBase.PositionChanged>事件。  
  
 [!code-cpp[Classic BindingManagerBase.PositionChanged Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingManagerBase.PositionChanged Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingManagerBase.PositionChanged Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingManagerBase.PositionChanged Example/CS/source.cs#1)]
 [!code-vb[Classic BindingManagerBase.PositionChanged Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingManagerBase.PositionChanged Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PullData">
      <MemberSignature Language="C#" Value="protected void PullData ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PullData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.PullData" />
      <MemberSignature Language="VB.NET" Value="Protected Sub PullData ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void PullData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從資料繫結程序的控制項取出資料送入資料來源，而不需傳回任何資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingManagerBase.PullData%2A>方法會提取回資料來源的資訊從資料繫結控制項的程式設計的方式。 因為通常在控制項時，自動更新其繫結的資料來源焦點離開不需要標準控制項的作業。  
  
 <xref:System.Windows.Forms.BindingManagerBase.PullData%2A> 引發<xref:System.Windows.Forms.BindingManagerBase.BindingComplete>視來源的事件和變更事件的資料。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.PushData" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Bindings" />
      </Docs>
    </Member>
    <Member MemberName="PushData">
      <MemberSignature Language="C#" Value="protected void PushData ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PushData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.PushData" />
      <MemberSignature Language="VB.NET" Value="Protected Sub PushData ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void PushData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將資料來源中的資料送入資料繫結的控制項，而不需傳回任何資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingManagerBase.PushData%2A>方法是將資訊從資料來源推送至資料繫結控制項的程式設計的方式。 如果資料來源實作這個方法不需要<xref:System.ComponentModel.IBindingList?displayProperty=nameWithType>介面，因為<xref:System.ComponentModel.IBindingList.ListChanged?displayProperty=nameWithType>事件應該會自動讓控制項透過其 currency 管理員進行更新。  
  
 如果這個方法發出時<xref:System.Windows.Forms.BindingManagerBase.PullData%2A>正在執行的操作，<xref:System.Windows.Forms.BindingManagerBase.PushData%2A>方法會立即傳回值是`true`。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.PullData" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Bindings" />
        <altmember cref="T:System.ComponentModel.IBindingList" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public abstract void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要刪除的資料列索引。</param>
        <summary>當在衍生類別中覆寫時，刪除位於基礎清單中指定索引處的資料列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingManagerBase.RemoveAt%2A>方法依賴基礎資料來源來判斷方法的行為。 (請參閱<xref:System.Windows.Forms.Binding>類別支援的資料來源清單。)針對類別可實作<xref:System.Collections.IList>， <xref:System.ComponentModel.IBindingList>，或<xref:System.ComponentModel.ITypedList>、 以及做為強型別的類別可實作<xref:System.Collections.IList>、<xref:System.Windows.Forms.BindingManagerBase.RemoveAt%2A>方法實際上會刪除基礎的清單，而非移除它的內容中的資料列。  
  
 如果基礎清單實作<xref:System.ComponentModel.IBindingList>介面，<xref:System.ComponentModel.IBindingList.AllowRemove%2A>屬性必須傳回`true`。 如果基礎清單實作<xref:System.Collections.IList>介面，<xref:System.Collections.IList.IsFixedSize%2A>屬性必須傳回`false`。  
  
   
  
## Examples  
 [!code-cpp[BindingManagerBase_RemoveAt#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BindingManagerBase_RemoveAt/CPP/bindingmanagerbase_removeat.cpp#1)]
 [!code-csharp[BindingManagerBase_RemoveAt#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BindingManagerBase_RemoveAt/CS/bindingmanagerbase_removeat.cs#1)]
 [!code-vb[BindingManagerBase_RemoveAt#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BindingManagerBase_RemoveAt/VB/bindingmanagerbase_removeat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">指定的 <paramref name="index" /> 處並沒有資料列。</exception>
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Position" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.AddNew" />
      </Docs>
    </Member>
    <Member MemberName="ResumeBinding">
      <MemberSignature Language="C#" Value="public abstract void ResumeBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResumeBinding() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.ResumeBinding" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ResumeBinding ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ResumeBinding();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>當在衍生類別中覆寫時，繼續資料繫結 (Data Binding)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> 和<xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A>允許的暫止和繼續資料繫結的兩種方法。 如果必須允許使用者編輯資料欄位發生驗證之前，您通常會暫止資料繫結。 例如，使用者可能需要變更成符合第二個欄位; 的欄位否則，驗證的第一個欄位會導致錯誤的第二個欄位。  
  
   
  
## Examples  
 [!code-cpp[BindingManagerBase_Suspend_Resume_Binding#2](~/samples/snippets/cpp/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/CPP/bindingmanagerbase_suspend_resume_binding.cpp#2)]
 [!code-csharp[BindingManagerBase_Suspend_Resume_Binding#2](~/samples/snippets/csharp/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/CS/bindingmanagerbase_suspend_resume_binding.cs#2)]
 [!code-vb[BindingManagerBase_Suspend_Resume_Binding#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/VB/bindingmanagerbase_suspend_resume_binding.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.BindingComplete" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.SuspendBinding" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.UpdateIsBinding" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Bindings" />
      </Docs>
    </Member>
    <Member MemberName="SuspendBinding">
      <MemberSignature Language="C#" Value="public abstract void SuspendBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SuspendBinding() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.SuspendBinding" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SuspendBinding ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SuspendBinding();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>當在衍生類別中覆寫時，暫止資料繫結。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> 和<xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A>允許的暫止和繼續資料繫結的兩種方法。 如果必須允許使用者編輯資料欄位發生驗證之前，您通常會暫止資料繫結。 例如，使用者可能需要變更成符合第二個欄位; 的欄位否則，驗證的第一個欄位會導致錯誤的第二個欄位。  
  
   
  
## Examples  
 [!code-cpp[BindingManagerBase_Suspend_Resume_Binding#2](~/samples/snippets/cpp/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/CPP/bindingmanagerbase_suspend_resume_binding.cpp#2)]
 [!code-csharp[BindingManagerBase_Suspend_Resume_Binding#2](~/samples/snippets/csharp/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/CS/bindingmanagerbase_suspend_resume_binding.cs#2)]
 [!code-vb[BindingManagerBase_Suspend_Resume_Binding#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/VB/bindingmanagerbase_suspend_resume_binding.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.BindingComplete" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.ResumeBinding" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.UpdateIsBinding" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Bindings" />
      </Docs>
    </Member>
    <Member MemberName="UpdateIsBinding">
      <MemberSignature Language="C#" Value="protected abstract void UpdateIsBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UpdateIsBinding() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingManagerBase.UpdateIsBinding" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub UpdateIsBinding ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void UpdateIsBinding();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>當在衍生類別中覆寫時，更新繫結。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingManagerBase.UpdateIsBinding%2A>方法會更新繫結的控制項和其資料來源之間的資料繫結。 複雜資料繫結案例中，它也會重設目前的位置加入基礎清單的開頭。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.BindingComplete" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.SuspendBinding" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.ResumeBinding" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Bindings" />
      </Docs>
    </Member>
  </Members>
</Type>