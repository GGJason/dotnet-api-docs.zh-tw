<Type Name="MaskedTextBox" FullName="System.Windows.Forms.MaskedTextBox">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4fa1a5b8dfd6830403ad1f318c5ea51e6693aac4" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65015403" /></Metadata><TypeSignature Language="C#" Value="public class MaskedTextBox : System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MaskedTextBox extends System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MaskedTextBox" />
  <TypeSignature Language="VB.NET" Value="Public Class MaskedTextBox&#xA;Inherits TextBoxBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class MaskedTextBox : System::Windows::Forms::TextBoxBase" />
  <TypeSignature Language="F#" Value="type MaskedTextBox = class&#xA;    inherit TextBoxBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("MaskInputRejected")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Mask")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.MaskedTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.MaskedTextBoxDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>使用遮罩區別適當及不適當的使用者輸入。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox>類別是增強型<xref:System.Windows.Forms.TextBox>支援宣告式語法，以接受或拒絕使用者輸入的控制項。 使用<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>屬性，您可以指定下列輸入而不需要撰寫任何自訂驗證邏輯應用程式中：  
  
-   必要的輸入的字元。  
  
-   選擇性的輸入的字元。  
  
-   輸入遮罩; 中的指定位置中預期的類型例如，數字或字母或英數字元。  
  
-   遮罩常值或應出現直接在字元<xref:System.Windows.Forms.MaskedTextBox>; 例如連字號 （-） 中的電話號碼或在價格的貨幣符號。  
  
-   輸入的字元; 的特殊處理例如，如果要轉換為大寫的字母字元。  
  
 當<xref:System.Windows.Forms.MaskedTextBox>控制項會顯示在執行階段，它表示成一系列的提示字元和選擇性的常值字元的遮罩。 每個可編輯遮罩的位置，表示必要或選擇性的輸入，會顯示與單一的提示字元。 例如，數字符號 （#） 是通常用於做為預留位置的數字字元的輸入。 您可以使用<xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>屬性來指定自訂的提示字元。 <xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A>屬性會決定是否使用者會看到提示字元，則當控制項失去輸入焦點。  
  
 使用者類型的輸入遮罩的文字方塊中，有效的輸入的字元會取代其各自的提示字元，以循序方式。 如果使用者輸入無效的輸入的字元，就會發生任何取代項目，但如果要改為發出嗶聲<xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A>屬性設定為`true`，和<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>就會引發事件。 您可以藉由處理這個事件來提供您自己的自訂錯誤邏輯。  
  
 當目前的插入點位於常值字元時，使用者會有多個選項：  
  
-   如果輸入一個字元以外的提示字元、 常值將會自動略過和輸入的字元將會套用至下一個可編輯位置，由下一步 提示字元。  
  
-   如果提示字元的類型和<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>屬性為 true 時，輸入將會取代提示字元並插入點將會移至 遮罩中的下一個位置。  
  
-   一律是這樣，因為方向鍵可瀏覽至先前或後續的位置。  
  
 您可以使用<xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A>屬性，確認是否使用者已輸入所有必要的輸入。 <xref:System.Windows.Forms.MaskedTextBox.Text%2A>屬性一律會擷取使用者的輸入遮罩根據格式化和<xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>屬性。  
  
 <xref:System.Windows.Forms.MaskedTextBox>控制項實際上會延遲到所有遮罩處理<xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>所指定的類別<xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>屬性。 此標準的提供者支援所有除了 surrogate 的 Unicode 字元，並以垂直方式合併的字元，不過，<xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>屬性可用來限制輸入字元組 a-z、 A-Z、0-9 和 0-9。  
  
 遮罩並不一定會保證使用者的輸入會代表有效的值，指定的類型;例如，無法輸入歲數-9。 您可以確認使用者的輸入代表有效的值，指派至該值型別的執行個體<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>屬性。 您可以偵測使用者是否移除焦點從<xref:System.Windows.Forms.MaskedTextBox>藉由監視包含無效的值時<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件。 如果型別驗證成功，表示值的物件可透過<xref:System.Windows.Forms.TypeValidationEventArgs.ReturnValue%2A>屬性<xref:System.Windows.Forms.TypeValidationEventArgs>參數。  
  
 如同<xref:System.Windows.Forms.TextBox>控制項中，數個常用的鍵盤快速鍵不適用於<xref:System.Windows.Forms.MaskedTextBox>。 特別是，CTRL-R （靠右對齊文字）、 CTRL-L （靠左對齊文字），和 CTRL-L （文字置中） 沒有任何作用。  
  
## <a name="compatibility-with-visual-basic-60"></a>使用 Visual Basic 6.0 的相容性  
 <xref:System.Windows.Forms.MaskedTextBox> 被設計成保留大部分的 Visual Basic 6.0 之遮罩編輯控制項的功能。 下表列出遮罩編輯控制項上的通用屬性，並提供其對等項目<xref:System.Windows.Forms.MaskedTextBox>。  
  
|遮罩的編輯控制項 (Visual Basic 6.0) 屬性|對等的 MaskedTextBox ([!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]) 屬性|  
|-------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------|  
|`AllowPrompt` 屬性|<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>|  
|`AutoTab` 屬性|None|  
|`ClipMode` 屬性|<xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>|  
|`ClipText` 屬性|<xref:System.Windows.Forms.MaskedTextBox.Text%2A> (當<xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>設為<xref:System.Windows.Forms.MaskFormat.ExcludePromptAndLiterals>)|  
|`Format` 屬性|None|  
|`FormattedText` 屬性|<xref:System.Windows.Forms.MaskedTextBox.Text%2A> (當<xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>設為<xref:System.Windows.Forms.MaskFormat.IncludePromptAndLiterals>)|  
|`Mask` 屬性|<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>|  
|`PromptChar` 屬性|<xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>|  
|`PromptInclude` 屬性|<xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>|  
|`ValidationError` 事件|<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>|  
  
> [!CAUTION]
>  <xref:System.Windows.Forms.MaskedTextBox>控制項不支援多行組態或復原的功能。 不過，這些功能相關聯的成員時已保留的相容性<xref:System.Windows.Forms.TextBoxBase>基底類別，它們的實作未執行任何動作。  
  
   
  
## Examples  
 下列程式碼範例會初始化<xref:System.Windows.Forms.MaskedTextBox>接受日期，並使用這兩個<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>和<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件以通知使用者有無效的輸入。  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
    <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
    <related type="Article" href="https://msdn.microsoft.com/library/235d6121-027d-481d-8d59-4f6794d15d0c">MaskedTextBox 控制項 (Windows Form)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化的新執行個體<see cref="T:System.Windows.Forms.MaskedTextBox" />類別使用預設值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設值<xref:System.Windows.Forms.MaskedTextBox.%23ctor>建構函式集<xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>屬性為 null 的遮罩，由 「 <>"的字串表示。 Null 的遮罩會接受做為輸入字元的任意組合。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (System.ComponentModel.MaskedTextProvider maskedTextProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.MaskedTextProvider maskedTextProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.ComponentModel.MaskedTextProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::ComponentModel::MaskedTextProvider ^ maskedTextProvider);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MaskedTextBox : System.ComponentModel.MaskedTextProvider -&gt; System.Windows.Forms.MaskedTextBox" Usage="new System.Windows.Forms.MaskedTextBox maskedTextProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="maskedTextProvider" Type="System.ComponentModel.MaskedTextProvider" />
      </Parameters>
      <Docs>
        <param name="maskedTextProvider">自訂遮罩語言提供者中，衍生自<see cref="T:System.ComponentModel.MaskedTextProvider" />類別。</param>
        <summary>初始化的新執行個體<see cref="T:System.Windows.Forms.MaskedTextBox" />類別使用指定的自訂遮罩語言提供者。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `maskedTextProvider`參數會定義所使用的遮罩語言<xref:System.Windows.Forms.MaskedTextBox>。 它負責剖析遮罩，並判斷使用者輸入是否符合目前的遮罩位置。 您可以衍生新的類別，從<xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>定義您自己的自訂遮罩語言，並使用<xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29>建構函式來取代標準<xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>。  
  
 如果您想要使用預設的遮罩語言提供自己的輸入的遮罩，則您不需要使用這個建構函式。 相反地，您可以使用<xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29>建構函式或使用預設建構函式將<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="maskedTextProvider" /> 為 <see langword="null" />。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (string mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mask As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::String ^ mask);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MaskedTextBox : string -&gt; System.Windows.Forms.MaskedTextBox" Usage="new System.Windows.Forms.MaskedTextBox mask" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mask">A<see cref="T:System.String" />表示輸入的遮罩。 初始值<see cref="P:System.Windows.Forms.MaskedTextBox.Mask" />屬性。</param>
        <summary>初始化的新執行個體<see cref="T:System.Windows.Forms.MaskedTextBox" />類別使用指定的輸入的遮罩。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29>建構函式會使用標準<xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>具有輸入`mask`剖析使用者輸入到<xref:System.Windows.Forms.MaskedTextBox>。  
  
 如果您指派至新的遮罩<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>屬性，則會覆寫這個建構函式所設定的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="mask" /> 為 <see langword="null" />。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTab">
      <MemberSignature Language="C#" Value="public bool AcceptsTab { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsTab" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsTab As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsTab { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AcceptsTab : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.AcceptsTab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，判斷要如何針對多行組態處理 Tab 鍵。 這個屬性不支援<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <value>所有情況下都是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A>屬性繼承自基底<xref:System.Windows.Forms.TextBoxBase>類別。 不過，因為<xref:System.Windows.Forms.MaskedTextBox>控制項不支援多行的設定，不支援這個屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTabChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AcceptsTabChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AcceptsTabChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AcceptsTabChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AcceptsTabChanged;" />
      <MemberSignature Language="F#" Value="member this.AcceptsTabChanged : EventHandler " Usage="member this.AcceptsTabChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" /> 屬性的值已變更時。 不會引發這個事件<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged>事件繼承自基底<xref:System.Windows.Forms.TextBoxBase>類別。 不過，因為<xref:System.Windows.Forms.MaskedTextBox>控制項不支援多行組態，不支援這個事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AllowPromptAsInput">
      <MemberSignature Language="C#" Value="public bool AllowPromptAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPromptAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowPromptAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowPromptAsInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowPromptAsInput : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否<see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />可以由使用者輸入做為有效資料。</summary>
        <value><see langword="true" /> 如果使用者可以輸入控制項的提示字元否則， <see langword="false" />。 預設為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 即使<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>是`true`，才能被接受，提示字元必須是有效的遮罩中目前的位置。 比方說，如果<xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>是"*"，以及遮罩中目前的位置會要求使用者輸入數字，輸入星號 (\*) 會失敗，並會導致<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>發生的事件。  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>屬性會優先於<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="AsciiOnly">
      <MemberSignature Language="C#" Value="public bool AsciiOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsciiOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property AsciiOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AsciiOnly { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AsciiOnly : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否<see cref="T:System.Windows.Forms.MaskedTextBox" />控制項接受 ASCII 字元集之外的字元。</summary>
        <value><see langword="true" /> 如果僅接受 ASCII 是;<see langword="false" />如果<see cref="T:System.Windows.Forms.MaskedTextBox" />控制項可接受任意的 Unicode 字元。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`true`，<xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>會限制使用者的輸入字元 a-z 和 A-Z。 不允許 ASCII 控制字元。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      </Docs>
    </Member>
    <Member MemberName="BeepOnError">
      <MemberSignature Language="C#" Value="public bool BeepOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BeepOnError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      <MemberSignature Language="VB.NET" Value="Public Property BeepOnError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BeepOnError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BeepOnError : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.BeepOnError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出遮罩文字方塊控制項是否會針對其所拒絕的每一個使用者按鍵輸入發出系統嗶聲。</summary>
        <value><see langword="true" /> 如果<see cref="T:System.Windows.Forms.MaskedTextBox" />時，控制項應該發出嗶聲無效輸入，否則<see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>如果事件仍會發生<xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A>屬性設定為`true`。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      </Docs>
    </Member>
    <Member MemberName="CanUndo">
      <MemberSignature Language="C#" Value="public bool CanUndo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUndo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanUndo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanUndo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanUndo : bool" Usage="System.Windows.Forms.MaskedTextBox.CanUndo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出使用者是否能復原先前的作業。 這個屬性不支援<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <value>所有情況下都是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.CanUndo%2A>屬性繼承自基底<xref:System.Windows.Forms.TextBoxBase>類別。 不過，因為<xref:System.Windows.Forms.MaskedTextBox>不支援復原功能，這個屬性一律是否具有值為`false`。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="ClearUndo">
      <MemberSignature Language="C#" Value="public void ClearUndo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearUndo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearUndo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearUndo();" />
      <MemberSignature Language="F#" Value="override this.ClearUndo : unit -&gt; unit" Usage="maskedTextBox.ClearUndo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將與最近執行的作業有關的資訊從文字方塊的復原緩衝區清除。 這個方法不支援<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.ClearUndo%2A>方法繼承自基底<xref:System.Windows.Forms.TextBoxBase>類別。 不過，<xref:System.Windows.Forms.MaskedTextBox>不支援復原功能。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateHandle : unit -&gt; unit" Usage="maskedTextBox.CreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立控制項的控制代碼。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.MaskedTextBox.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>建立控制代碼時，取得必要的建立參數。</summary>
        <value><see cref="T:System.Windows.Forms.CreateParams" />，表示建立控制項時所需的資訊。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Windows.Forms.MaskedTextBox.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與遮罩文字方塊有關的文化特性資訊。</summary>
        <value>A<see cref="T:System.Globalization.CultureInfo" />表示支援的文化特性<see cref="T:System.Windows.Forms.MaskedTextBox" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Windows.Forms.MaskedTextBox.Culture" /> 已設定為<see langword="null" />。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="CutCopyMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat CutCopyMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat CutCopyMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property CutCopyMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat CutCopyMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberSignature Language="F#" Value="member this.CutCopyMaskFormat : System.Windows.Forms.MaskFormat with get, set" Usage="System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值可判斷是否會將常值和提示字元複製到剪貼簿中。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.MaskFormat" /> 值。 預設為 <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>屬性會決定如何將文字選取內<xref:System.Windows.Forms.MaskedTextBox>控制項，複製到剪貼簿或透過擷取時，會解譯<xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A>屬性。 具體來說，它會判斷是否常值字元、 提示字元，或是兩者都包含存取選取的文字時。 當提示字元會排除時，它們會轉換成已複製的字串中的空格。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>屬性的功能類似方式方面<xref:System.Windows.Forms.MaskedTextBox.Text%2A>屬性解譯。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">以無效的 <see cref="T:System.Windows.Forms.MaskFormat" /> 值所設定的屬性。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="FormatProvider">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatProvider As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatProvider { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatProvider : IFormatProvider with get, set" Usage="System.Windows.Forms.MaskedTextBox.FormatProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定<see cref="T:System.IFormatProvider" />執行類型驗證時使用。</summary>
        <value>實作 <see cref="T:System.IFormatProvider" /> 介面的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> 決定符號用於貨幣、 日期及其他特定文化特性的遮罩預留位置類型驗證，就會發生，且控制項具有非 null 時<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
      </Docs>
    </Member>
    <Member MemberName="GetCharFromPosition">
      <MemberSignature Language="C#" Value="public override char GetCharFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance char GetCharFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharFromPosition (pt As Point) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override char GetCharFromPosition(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="override this.GetCharFromPosition : System.Drawing.Point -&gt; char" Usage="maskedTextBox.GetCharFromPosition pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">要從其中尋找最接近字元的位置。</param>
        <summary>擷取最接近控制項內指定位置的字元。</summary>
        <returns>在指定位置的字元。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetCharIndexFromPosition">
      <MemberSignature Language="C#" Value="public override int GetCharIndexFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharIndexFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharIndexFromPosition (pt As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharIndexFromPosition(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="override this.GetCharIndexFromPosition : System.Drawing.Point -&gt; int" Usage="maskedTextBox.GetCharIndexFromPosition pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">要搜尋的位置。</param>
        <summary>擷取最接近指定位置之字元的索引。</summary>
        <returns>指定位置處的以零為起始的字元索引。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexFromLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexFromLine (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexFromLine(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexFromLine (lineNumber As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexFromLine(int lineNumber);" />
      <MemberSignature Language="F#" Value="override this.GetFirstCharIndexFromLine : int -&gt; int" Usage="maskedTextBox.GetFirstCharIndexFromLine lineNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">不使用這個參數。</param>
        <summary>擷取指定行第一個字元的索引。 這個方法不支援<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <returns>這個方法一定會傳回 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine%2A>方法繼承自基底<xref:System.Windows.Forms.TextBoxBase>類別。 不過，因為<xref:System.Windows.Forms.MaskedTextBox>控制項不支援多行組態，不支援這個方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexOfCurrentLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexOfCurrentLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexOfCurrentLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexOfCurrentLine () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexOfCurrentLine();" />
      <MemberSignature Language="F#" Value="override this.GetFirstCharIndexOfCurrentLine : unit -&gt; int" Usage="maskedTextBox.GetFirstCharIndexOfCurrentLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>擷取目前這行第一個字元的索引。 這個方法不支援<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <returns>這個方法一定會傳回 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine%2A>方法繼承自基底<xref:System.Windows.Forms.TextBoxBase>類別。 不過，因為<xref:System.Windows.Forms.MaskedTextBox>控制項不支援多行組態，不支援這個方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetLineFromCharIndex">
      <MemberSignature Language="C#" Value="public override int GetLineFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLineFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLineFromCharIndex (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetLineFromCharIndex(int index);" />
      <MemberSignature Language="F#" Value="override this.GetLineFromCharIndex : int -&gt; int" Usage="maskedTextBox.GetLineFromCharIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">不使用這個參數。</param>
        <summary>擷取控制項文字內指定字元位置的行號。 這個方法不支援<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <returns>這個方法一定會傳回 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex%2A>方法繼承自基底<xref:System.Windows.Forms.TextBoxBase>類別。 不過，因為<xref:System.Windows.Forms.MaskedTextBox>控制項不支援多行組態，不支援這個方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionFromCharIndex">
      <MemberSignature Language="C#" Value="public override System.Drawing.Point GetPositionFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Drawing.Point GetPositionFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPositionFromCharIndex (index As Integer) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Drawing::Point GetPositionFromCharIndex(int index);" />
      <MemberSignature Language="F#" Value="override this.GetPositionFromCharIndex : int -&gt; System.Drawing.Point" Usage="maskedTextBox.GetPositionFromCharIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要擷取位置的字元索引。</param>
        <summary>擷取控制項內指定之字元索引的位置。</summary>
        <returns>控制項之用戶端矩形內指定字元的位置。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HidePromptOnLeave">
      <MemberSignature Language="C#" Value="public bool HidePromptOnLeave { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HidePromptOnLeave" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      <MemberSignature Language="VB.NET" Value="Public Property HidePromptOnLeave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HidePromptOnLeave { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HidePromptOnLeave : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出當遮罩文字方塊失去焦點時，是否會隱藏輸入遮罩中的提示字元。</summary>
        <value><see langword="true" /> 如果<see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />時會隱藏<see cref="T:System.Windows.Forms.MaskedTextBox" />未取得焦點，否則<see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="InsertKeyMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.InsertKeyMode InsertKeyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.InsertKeyMode InsertKeyMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertKeyMode As InsertKeyMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::InsertKeyMode InsertKeyMode { System::Windows::Forms::InsertKeyMode get(); void set(System::Windows::Forms::InsertKeyMode value); };" />
      <MemberSignature Language="F#" Value="member this.InsertKeyMode : System.Windows.Forms.InsertKeyMode with get, set" Usage="System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InsertKeyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定遮罩文字方塊控制項的文字插入模式。</summary>
        <value><see cref="T:System.Windows.Forms.InsertKeyMode" />值，指出目前的插入模式。 預設為 <see cref="F:System.Windows.Forms.InsertKeyMode.Default" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>屬性會控制字元插入行為<xref:System.Windows.Forms.MaskedTextBox>控制項。 此屬性的狀態由所定義<xref:System.Windows.Forms.InsertKeyMode>列舉型別，可以是永遠開啟、 一律會關閉，或設為採用使用者的鍵盤設定。 這個屬性會取代鍵盤插入模式。 比方說，如果鍵盤設定為覆寫，但<xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>設定為`Insert`，則<xref:System.Windows.Forms.MaskedTextBox>會在插入模式下運作。 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>屬性會存取的則為 true 的插入模式<xref:System.Windows.Forms.MaskedTextBox>。  
  
 如果變更<xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>的值變更<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>，<xref:System.Windows.Forms.MaskedTextBox>將會引發<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged>事件。  
  
 如果沒有遮罩已設定這個屬性就會有任何作用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">無效的<see cref="T:System.Windows.Forms.InsertKeyMode" />設定這個屬性時所提供的值。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.IsInputKey : System.Windows.Forms.Keys -&gt; bool" Usage="maskedTextBox.IsInputKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">其中一個 <see cref="T:System.Windows.Forms.Keys" /> 值。</param>
        <summary>判斷指定的按鍵是輸入按鍵還是需要前置處理的特殊按鍵。</summary>
        <returns><see langword="true" /> 如果指定的按鍵是輸入的索引鍵;否則， <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteMode">
      <MemberSignature Language="C#" Value="public bool IsOverwriteMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOverwriteMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOverwriteMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOverwriteMode { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOverwriteMode : bool" Usage="System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出新的使用者輸入是否會覆寫現有的輸入。</summary>
        <value><see langword="true" /> 如果<see cref="T:System.Windows.Forms.MaskedTextBox" />將會覆寫現有的字元，當使用者輸入新的;<see langword="false" />如果<see cref="T:System.Windows.Forms.MaskedTextBox" />將會轉換現有的字元往前移。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> 值會考量<xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>屬性和使用者的鍵盤的狀態。 如果<xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>會設為<xref:System.Windows.Forms.InsertKeyMode.Insert>或是<xref:System.Windows.Forms.InsertKeyMode.Overwrite>，<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>會傳回`false`或`true`分別。 如果<xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>設為<xref:System.Windows.Forms.InsertKeyMode.Default>，它會傳回 INSERT 鍵的狀態。  
  
 當<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>已`false`，<xref:System.Windows.Forms.MaskedTextBox>會拒絕提交這些為無效的遮罩中的任何位置的違規會導致任何字元項目。 換言之，如果插入的字元會導致要移位到，它就不是有效的遮罩位置的字元插入字元將會遭到拒絕。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler IsOverwriteModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler IsOverwriteModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsOverwriteModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ IsOverwriteModeChanged;" />
      <MemberSignature Language="F#" Value="member this.IsOverwriteModeChanged : EventHandler " Usage="member this.IsOverwriteModeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生在插入模式已變更之後。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged>的值之後，就會引發事件<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>屬性變更。  
  
 此事件，才能正確地繫結至資料<xref:System.Windows.Forms.MaskedTextBox>控制項。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>具有<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.MaskedTextBox>名為`MaskedTextBox1`。 請確定 與關聯的事件處理常式<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#484](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#484)]
 [!code-vb[System.Windows.Forms.EventExamples#484](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#484)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Lines">
      <MemberSignature Language="C#" Value="public string[] Lines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Lines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Lines" />
      <MemberSignature Language="VB.NET" Value="Public Property Lines As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Lines { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Lines : string[] with get, set" Usage="System.Windows.Forms.MaskedTextBox.Lines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定多行組態中的文字行。 這個屬性不支援<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <value>型別的陣列<see cref="T:System.String" />，包含單一字行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Lines%2A>屬性繼承自基底<xref:System.Windows.Forms.TextBoxBase>類別。 不過，因為<xref:System.Windows.Forms.MaskedTextBox>控制項不支援多行的設定，不支援這個屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="Mask">
      <MemberSignature Language="C#" Value="public string Mask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Mask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Mask" />
      <MemberSignature Language="VB.NET" Value="Public Property Mask As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Mask { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Mask : string with get, set" Usage="System.Windows.Forms.MaskedTextBox.Mask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskPropertyEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskPropertyEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要在執行階段使用的輸入的遮罩。</summary>
        <value>A<see cref="T:System.String" />表示目前的遮罩。 預設值為允許任何輸入的空字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> 是的預設屬性<xref:System.Windows.Forms.MaskedTextBox>類別。  
  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> 必須由字串組成一或多個遮罩項目中下, 表所示。 所使用的遮罩語言<xref:System.Windows.Forms.MaskedTextBox>定義及其相關聯的<xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>。 標準提供者指定根據遮罩編輯控制項，在 Visual Basic 6.0 中，所使用的遮罩語言，而且應該是從該平台移轉的使用者很熟悉。  
  
|遮罩項目|描述|  
|---------------------|-----------------|  
|0|數字，所需。 這個項目將會接受任何介於 0 到 9 之間的單一數字。|  
|9|數字或空格，選擇性。|  
|#|數字或空格，選擇性。 如果這個位置是遮罩中空白的它會轉譯為中的空間<xref:System.Windows.Forms.MaskedTextBox.Text%2A>屬性。 加號 （+） 和減號 （-） 允許符號。|  
|L|字母、 所需。 會限制為 ASCII 字母 a 到 z 和 A-Z 的輸入。 此遮罩項目相當於 [a A-ZA-Z] 規則運算式中。|  
|?|字母、 選擇性。 會限制為 ASCII 字母 a 到 z 和 A-Z 的輸入。 這個遮罩項目相當於 [a A-ZA-Z] 嗎？ 在規則運算式。|  
|&|字元，則需要。 如果<xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>屬性設為 true，這個項目行為類似"L"項目。|  
|C|字元 (選擇性）。 任何非控制字元。 如果<xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>屬性設定為`true`，這個項目行為類似 「？ 」 項目。|  
|A|英數字元、 必要。 如果<xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>屬性設定為`true`，只有可接受的字元是 ASCII 字母 a 到 z 和 A-Z。 這個遮罩項目就等於"a"的項目。|  
|一個|英數字元、 選擇性。 如果<xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>屬性設定為`true`，只有可接受的字元是 ASCII 字母 a 到 z 和 A-Z。 這個遮罩項目就等於"A"的項目。|  
|。|小數預留位置。 使用實際顯示字元會適當格式提供者，小數點符號，取決於控制項的<xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>屬性。|  
|,|數千個預留位置。 使用的實際顯示字元將會是千分位適當格式提供者，由控制項的預留位置<xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>屬性。|  
|:|時間分隔符號。 使用實際顯示字元會 time 符號適當格式提供者，由控制項的<xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>屬性。|  
|/|日期分隔符號。 使用實際顯示字元將是適當的格式提供者中，日期符號，由控制項的<xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>屬性。|  
|$|貨幣符號。 所顯示的實際字元會適當格式提供者的貨幣符號，取決於控制項的<xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>屬性。|  
|\<|向下移動。 將轉換成小寫之後的所有字元。|  
|>|上移。 將轉換成大寫之後的所有字元。|  
|&#124;|停用先前 shift 向上或向下移動。|  
|&#92;|逸出。 逸出的遮罩字元，將它轉換成常值。 「\\\\」 是一個反斜線逸出序列。|  
|所有其他字元|常值。 所有非遮罩項目會顯示為本身內<xref:System.Windows.Forms.MaskedTextBox>。 常值一律佔用遮罩中的靜態位置，在執行階段，並無法移動或刪除使用者。|  
  
 如果您變更遮罩時<xref:System.Windows.Forms.MaskedTextBox>已經包含使用者輸入由先前的遮罩，篩選<xref:System.Windows.Forms.MaskedTextBox>會嘗試移轉到新的遮罩定義該輸入。 如果失敗，它將會清除現有的輸入。 指派為遮罩長度為零的字串將會保留任何現有的資料控制項中。 長度為零的遮罩，搭配使用時<xref:System.Windows.Forms.MaskedTextBox>行為類似單行<xref:System.Windows.Forms.TextBox>控制項。  
  
 小數點 （.）、 千分之一秒 （，）、 （:） 的時間、 日期 （/） 和貨幣 （$） 符號預設值所定義的應用程式的文化特性顯示這些符號。 您可以強制使用顯示另一個文化特性的符號<xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>屬性。  
  
 在執行階段，遮罩字元插入由控制<xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A>屬性。 使用者可以瀏覽遮罩使用左邊和右邊的方向鍵或滑鼠資料指標，並輸入一個空格可以略過選擇性遮罩中的位置。  
  
> [!IMPORTANT]
>  <xref:System.Windows.Forms.MaskedTextBox> 支援所有的 Unicode 字元，除了 surrogate 和垂直組合的字元。  
  
 下表顯示範例遮罩。  
  
|遮罩|行為|  
|----------|--------------|  
|`00/00/0000`|國際的日期格式日期天、 數字月份 （年）。 "/"字元是邏輯日期分隔符號，並將對使用者顯示做為適用於應用程式的目前文化特性的日期分隔符號。|  
|`00->L<LL-0000`|格式的日期 （日期、 月份縮寫及年份） 美國顯示與第一個字母大寫後面兩個小寫字母的三個字母月份縮寫。|  
|`(999)-000-0000`|美國電話號碼，選擇性的區碼。 如果使用者不想要輸入的選擇性字元，他們可以輸入空格，或直接將滑鼠指標置於第一個 0 表示遮罩中的位置。|  
|`$999,999.00`|範圍內的 0 到 999999 貨幣值。 在執行階段會取代 「 貨幣、 千位數和小數點字元 」，以相對的特定文化特性。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">此字串提供給<see cref="P:System.Windows.Forms.MaskedTextBox.Mask" />屬性不是有效的遮罩。 無效的遮罩包括含有不可列印字元的遮罩。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MaskChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MaskChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MaskChanged;" />
      <MemberSignature Language="F#" Value="member this.MaskChanged : EventHandler " Usage="member this.MaskChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於輸入遮罩已變更後。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskChanged>的值之後，就會引發事件<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>屬性變更。 如果也會引發這個事件<xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>間接成員例如更改<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>， <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>， <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>，和<xref:System.Windows.Forms.MaskedTextBox.Culture%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.MaskedTextBox.MaskChanged>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>具有<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.MaskedTextBox>名為`MaskedTextBox1`。 請確定 與關聯的事件處理常式<xref:System.Windows.Forms.MaskedTextBox.MaskChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#485](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#485)]
 [!code-vb[System.Windows.Forms.EventExamples#485](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#485)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskCompleted">
      <MemberSignature Language="C#" Value="public bool MaskCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.MaskCompleted : bool" Usage="System.Windows.Forms.MaskedTextBox.MaskCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出所有必要的輸入是否已經輸入到輸入遮罩中。</summary>
        <value><see langword="true" /> 如果遮罩中，輸入所有必要的輸入否則， <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> 檢查必要的輸入的元素。 若要判斷是否已填入所有必要和選擇性的輸入項目，使用<xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A>屬性改為。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="MaskedTextProvider">
      <MemberSignature Language="C#" Value="public System.ComponentModel.MaskedTextProvider MaskedTextProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.MaskedTextProvider MaskedTextProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskedTextProvider As MaskedTextProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::MaskedTextProvider ^ MaskedTextProvider { System::ComponentModel::MaskedTextProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MaskedTextProvider : System.ComponentModel.MaskedTextProvider" Usage="System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.MaskedTextProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與遮罩文字方塊控制項的這個執行個體有關的遮罩提供者的複製品。</summary>
        <value>遮罩語言提供者的型別<see cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>屬性會定義 「 遮罩剖析引擎所使用的遮罩語言<xref:System.Windows.Forms.MaskedTextBox>控制項。 預設提供者<xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>類別; 不過，自訂提供者也可以指定使用<xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29>建構函式。  
  
 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> 無法直接設定。 不過，有些屬性的設定<xref:System.Windows.Forms.MaskedTextBox>-這類<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>， <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>， <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>，和<xref:System.Windows.Forms.MaskedTextBox.Culture%2A>-在內部可能會導致建立新<xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
      </Docs>
    </Member>
    <Member MemberName="MaskFull">
      <MemberSignature Language="C#" Value="public bool MaskFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskFull" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskFull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskFull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.MaskFull : bool" Usage="System.Windows.Forms.MaskedTextBox.MaskFull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否已經輸入所有必要和選擇性輸入到輸入遮罩。</summary>
        <value><see langword="true" /> 如果已經輸入所有必要和選擇性輸入;否則， <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A>內的屬性<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>事件處理常式，來判斷是否使用者的輸入被拒，因為不有任何剩餘的輸入遮罩中。 若要判斷是否已經輸入必要的輸入的元素，請使用<xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例會處理<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>事件，並使用<xref:System.Windows.Forms.ToolTip>來提醒使用者，如果嘗試在所有輸入資料已使用遮罩中的位置。  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="MaskInputRejected">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskInputRejected As MaskInputRejectedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MaskInputRejectedEventHandler ^ MaskInputRejected;" />
      <MemberSignature Language="F#" Value="member this.MaskInputRejected : System.Windows.Forms.MaskInputRejectedEventHandler " Usage="member this.MaskInputRejected : System.Windows.Forms.MaskInputRejectedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskInputRejectedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於使用者的輸入或指派的字元不符合輸入遮罩的對應格式項目時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 是的預設事件<xref:System.Windows.Forms.MaskedTextBox>類別。  
  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>輸入遮罩所拒絕的字元時，就會發生事件。 輸入的遮罩，由<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>屬性，透過相關聯不顯示字元的文字提供者所解譯<xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>屬性。 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 在下列情況下產生：  
  
-   輸入的字元不符合對應的格式項目。 比方說，使用者輸入字母的字元，就需要數字時。 這可能是最常見的原因為何會引發這個事件。  
  
-   使用者嘗試輸入超過結尾的遮罩多餘的字元可能是因為遮罩已填入，或目前的插入號位置已經移至顯示的輸入的遮罩字串的最尾端。  
  
-   貼上作業是插入的字元不符合其相關聯的格式項目，或如果<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>屬性是`false`，它會將現有的字元轉移到新位置，它們不符合其格式項目。  
  
-   剪下的作業會將現有的字元向左，及一或多個字元不符合其新關聯的格式項目。  
  
-   指派用以<xref:System.Windows.Forms.MaskedTextBox.Text%2A>屬性和指派的字串造成一或多個遮罩違規。  
  
 如果字串已指派給控制項，會導致<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>若要進行任何部分的字串會出現在<xref:System.Windows.Forms.MaskedTextBox>。  
  
 處理預設<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>就會播放嗶聲的聲音 if<xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A>屬性設定為`true`。 這個事件通常用於實作自訂錯誤處理，例如，移至下一步 的使用者輸入的控制項，如果遮罩已滿，或顯示自訂錯誤 對話方塊或工具提示，如果輸入的字元無效。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>具有<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.MaskedTextBox>名為`MaskedTextBox1`。 請確定 與關聯的事件處理常式<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#486](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#486)]
 [!code-vb[System.Windows.Forms.EventExamples#486](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#486)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.Windows.Forms.MaskInputRejectedEventArgs" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public override int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxLength : int with get, set" Usage="System.Windows.Forms.MaskedTextBox.MaxLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定使用者能夠輸入或貼入文字方塊控制項中的最大字元數。 這個屬性不支援<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <value>這個屬性永遠傳回 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 請參閱<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>屬性和<xref:System.Windows.Forms.MaskInputRejectedEventArgs.Position%2A>中的屬性<xref:System.Windows.Forms.MaskInputRejectedEventArgs>如需有關如何判斷字串中的最大長度資訊的類別<xref:System.Windows.Forms.MaskedTextBox>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskInputRejectedEventArgs.Position" />
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public override bool Multiline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Multiline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Multiline { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Multiline : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.Multiline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出這是否為多行文字方塊控制項。 這個屬性不完全支援<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <value>這個屬性永遠會傳回 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A>屬性繼承自基底<xref:System.Windows.Forms.TextBoxBase>類別。 不過，因為<xref:System.Windows.Forms.MaskedTextBox>控制項不支援多行組態不完全支援這個屬性; 不能設定，它一定會解析成`false`。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="MultilineChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MultilineChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MultilineChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MultilineChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MultilineChanged;" />
      <MemberSignature Language="F#" Value="member this.MultilineChanged : EventHandler " Usage="member this.MultilineChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通常就會發生時的值<see cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />屬性已變更; 不過，此事件不會引發<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MultilineChanged>事件繼承自基底<xref:System.Windows.Forms.TextBoxBase>類別。 不過，因為<xref:System.Windows.Forms.MaskedTextBox>控制項不支援多行組態，此事件未實作<xref:System.Windows.Forms.MaskedTextBox>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnBackColorChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>發生於 <see cref="P:System.Windows.Forms.Control.BackColor" /> 屬性的值變更時。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="maskedTextBox.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.HandleCreated" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsOverwriteModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsOverwriteModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsOverwriteModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsOverwriteModeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsOverwriteModeChanged : EventArgs -&gt; unit&#xA;override this.OnIsOverwriteModeChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnIsOverwriteModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" /> 方法，使已註冊的委派能接收到事件。</para></block>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="maskedTextBox.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.KeyDown" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyPress : System.Windows.Forms.KeyPressEventArgs -&gt; unit" Usage="maskedTextBox.OnKeyPress e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.KeyPressEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.KeyPress" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="maskedTextBox.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs" />，其中包含事件資料。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.KeyUp" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMaskChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMaskChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMaskChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMaskChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMaskChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMaskChanged : EventArgs -&gt; unit&#xA;override this.OnMaskChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnMaskChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnMaskChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" /> 方法，使已註冊的委派能接收到事件。</para></block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnMultilineChanged">
      <MemberSignature Language="C#" Value="protected override void OnMultilineChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMultilineChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMultilineChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMultilineChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMultilineChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnMultilineChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>通常會引發<see cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />事件，但是停用<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.OnMultilineChanged%2A>方法繼承自基底<xref:System.Windows.Forms.TextBoxBase>類別。 不過，因為<xref:System.Windows.Forms.MaskedTextBox>控制項不支援多行組態，這個方法會覆寫以不執行任何動作。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextAlignChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextAlignChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextAlignChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextAlignChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextAlignChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextAlignChanged : EventArgs -&gt; unit&#xA;override this.OnTextAlignChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnTextAlignChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" /> 方法，使已註冊的委派能接收到事件。</para></block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnTextChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.TextChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnTextChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" /> 方法，使已註冊的委派能接收到事件。</para></block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.Control.TextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected override void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnValidating (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnValidating(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnValidating : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="maskedTextBox.OnValidating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
        <summary>引發 <see cref="E:System.Windows.Forms.Control.Validating" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A>方法會導致要進行驗證的輸入的字串<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>屬性，如果<xref:System.Type>已指定此屬性。 然後，它會也引發<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件。  
  
> [!NOTE]
>  將進行驗證以確保一致性，以文字為基礎的控制項，即使<xref:System.Windows.Forms.MaskedTextBox>處於唯讀狀態 (其<xref:System.Windows.Forms.MaskedTextBox.ReadOnly%2A>屬性設定為`true`)。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">輸入字串的剖析期間，發生重大例外狀況。</exception>
        <block subset="none" type="overrides"><para>當在衍生類別中覆寫 <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" /> 時，請確定呼叫基底類別的 <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" /> 方法，使已註冊的委派能接收到事件。</para></block>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="PasswordChar">
      <MemberSignature Language="C#" Value="public char PasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PasswordChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PasswordChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.PasswordChar : char with get, set" Usage="System.Windows.Forms.MaskedTextBox.PasswordChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('\0')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要顯示來代替使用者輸入的字元。</summary>
        <value><see cref="T:System.Char" />當做密碼字元使用的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 對於機密的使用者輸入，它是常見的做法，來隱藏使用者所輸入的實際資訊。 如果<xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>屬性設定至非 null 字元，<xref:System.Windows.Forms.MaskedTextBox>會顯示此控制項的所有輸入字元。 將此屬性設定為`null`將會停用這項功能。  
  
 如果您想要使用的作業系統提供的密碼字元，其定義於 COMCTL32.dll，使用<xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A>屬性改為。 如果兩個<xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>和<xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A>啟動屬性，會優先使用後者。  
  
> [!IMPORTANT]
>  為安全的考量，<xref:System.Windows.Forms.MaskedTextBox>控制項停用密碼的字串上剪下和複製作業。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">當設定這個屬性不是有效的密碼字元，由指定的字元<see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />方法的<see cref="T:System.ComponentModel.MaskedTextProvider" />類別。</exception>
        <exception cref="T:System.InvalidOperationException">指定的密碼字元會與目前的提示字元中，相同<see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />。 這兩個必須是不同。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool" Usage="maskedTextBox.ProcessCmdKey (msg, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">以傳參考方式傳遞的 <see cref="T:System.Windows.Forms.Message" />，它代表要處理的視窗訊息。</param>
        <param name="keyData">其中一個 <see cref="T:System.Windows.Forms.Keys" /> 值，它代表要處理的快速鍵。</param>
        <summary>處理命令按鍵。</summary>
        <returns>若命令按鍵已由控制項處理，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyMessage">
      <MemberSignature Language="C#" Value="protected internal override bool ProcessKeyMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool ProcessKeyMessage(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ProcessKeyMessage (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool ProcessKeyMessage(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.ProcessKeyMessage :  -&gt; bool" Usage="maskedTextBox.ProcessKeyMessage m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">以傳參考方式傳遞的 <see cref="T:System.Windows.Forms.Message" />，它代表要處理的視窗訊息。</param>
        <summary>覆寫這個方法的基底實作，以處理輸入語言變更。</summary>
        <returns>如果控制項已處理訊息，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> 覆寫其基底控制項的實作<xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A>可正確處理使用者輸入字元時，會產生字元事件。 例如使用輸入法 (IME)，來輸入日文、 中文和其他複雜的非拉丁指令碼。 <xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A> 會偵測出現之後再接收 WM_IME_CHAR 訊息，則會加以隱藏以防止這些字元出現在控制項中的任何 WM_CHAR 訊息。 如果您從這個控制項衍生，並覆寫這封郵件，您應該重複此行為，如果您想要使用 Ime 您新的控制項。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PromptChar">
      <MemberSignature Language="C#" Value="public char PromptChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PromptChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PromptChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PromptChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.PromptChar : char with get, set" Usage="System.Windows.Forms.MaskedTextBox.PromptChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('_')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來表示沒有在使用者輸入的字元<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <value>用來提示使用者輸入資料的字元。 預設為底線 (_)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> 將會顯示在<xref:System.Windows.Forms.MaskedTextBox>使用者具有未尚未填入任何遮罩位置。  
  
 使用<xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A>屬性，指定是否要顯示的提示字元時<xref:System.Windows.Forms.MaskedTextBox>未取得焦點。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">當設定這個屬性不是有效的提示字元，由指定的字元<see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />方法的<see cref="T:System.ComponentModel.MaskedTextProvider" />類別。</exception>
        <exception cref="T:System.InvalidOperationException">指定的提示字元等同於目前的密碼字元<see cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />。 這兩個必須是不同。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出文字方塊中的文字唯讀的。</summary>
        <value><see langword="true" /> 指出文字是唯讀的;否則， <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectInputOnFirstFailure">
      <MemberSignature Language="C#" Value="public bool RejectInputOnFirstFailure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RejectInputOnFirstFailure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
      <MemberSignature Language="VB.NET" Value="Public Property RejectInputOnFirstFailure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RejectInputOnFirstFailure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RejectInputOnFirstFailure : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出到達第一個無效字元後，使用者輸入的剖析動作是否應該停止。</summary>
        <value><see langword="true" /> 如果處理的輸入的字串就應該終止在第一個剖析錯誤;否則，<see langword="false" />如果處理作業應該略過所有錯誤。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有時候使用者會輸入到數個字元<xref:System.Windows.Forms.MaskedTextBox>在單一輸入作業中，通常是藉由複製並貼上字串。 如果整個字串只包含有效的字元，輸入遮罩中，貼上位置根據整個作業會成功。 不過，當剖析發生錯誤時，行為<xref:System.Windows.Forms.MaskedTextBox>的值而定<xref:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure%2A>、，如下所示：  
  
-   如果此屬性為`true`，然後輸入字串的處理會停止在無效的字元。 會忽略所有後續的字元。 單一<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>就會引發事件。  
  
-   如果此屬性為`false`，然後就會拒絕無效的字元，但剖析會繼續進行下一個字元，輸入字串中。 A<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>輸入字串中的每個無效字元都會引發事件。  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>，<xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A>和<xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>屬性可能也會影響使用者輸入的解譯。  
  
 如果<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>屬性是`false`，則已輸入遮罩中要插入點右邊的任何字元會偏移可接受的字元數。 此位移，可能會造成額外的剖析錯誤。  
  
 可透過程式設計方式模擬貼上作業，藉由設定<xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnPrompt">
      <MemberSignature Language="C#" Value="public bool ResetOnPrompt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnPrompt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnPrompt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnPrompt { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ResetOnPrompt : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，判斷應如何處理符合提示字元的輸入字元。</summary>
        <value><see langword="true" /> 輸入做為輸入提示字元會造成遮罩中要重設; 目前的可編輯位置否則，<see langword="false" />表示提示字元會當做一般輸入字元處理。 預設為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox>可以特別將兩種-空格和提示字元的英數字元。 一般而言，每個輸入的字元會先通過遮罩並接受或拒絕。 假設<xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>屬性設定為非`null`，然後設定<xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>屬性設`true`會導致提示字元的特殊處理。 當使用者輸入遮罩的提示字元時，它將會導致要清除目前的遮罩字元位置與目前位置前進至下一步 可編輯的字元。  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> 會優先於<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>屬性下, 表所示。  
  
|ResetOnPrompt value|AllowPromptAsInput value|產生的行為|  
|-------------------------|------------------------------|------------------------|  
|`true`|`true`|輸入提示字元，而且它會導致目前的遮罩位置重設。 這是預設值。|  
|`true`|`false`|輸入提示字元，而且它會導致目前的遮罩位置重設。|  
|`false`|`true`|提示字元會當做一般輸入字元處理。|  
|`false`|`false`|不是有效的提示字元，並引發<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>事件。|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnSpace">
      <MemberSignature Language="C#" Value="public bool ResetOnSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnSpace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnSpace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ResetOnSpace : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，判斷應如何處理空格輸入字元。</summary>
        <value><see langword="true" /> 如果空格輸入的字元會造成遮罩中要重設; 目前的可編輯位置否則，<see langword="false" />以指出它是當做一般輸入字元處理。 預設為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox>可以特別將兩種-空格和提示字元的英數字元。 一般而言，每個輸入的字元會先通過遮罩並接受或拒絕。 設定<xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A>屬性設`true`導致要清除目前的遮罩字元位置與目前位置前進至下一步 可編輯的字元。  
  
 字元輸入的類型將決定遮罩引擎會繼續進行下一個字元在遮罩中，或保持目前的位置並等候相符的字元。 如果輸入的字元是空格，，和不符合目前不可編輯的字元遮罩中，遮罩引擎將會跳到遮罩中的下一個字元。 如果輸入的字元不是一個空格，，和不符合目前不可編輯的字元遮罩中，遮罩引擎就會維持在目前的遮罩位置，並嘗試比對針對它的下一個輸入的字元。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="ScrollToCaret">
      <MemberSignature Language="C#" Value="public void ScrollToCaret ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollToCaret() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ScrollToCaret" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollToCaret ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollToCaret();" />
      <MemberSignature Language="F#" Value="override this.ScrollToCaret : unit -&gt; unit" Usage="maskedTextBox.ScrollToCaret " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>捲動控制項的內容至目前插入號 (Caret) 所在位置。 這個方法不支援<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.ScrollToCaret%2A>方法繼承自基底<xref:System.Windows.Forms.TextBoxBase>類別。 不過，因為<xref:System.Windows.Forms.MaskedTextBox>控制項不支援多行組態，這個方法會覆寫以不執行任何動作。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="SelectedText">
      <MemberSignature Language="C#" Value="public override string SelectedText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SelectedText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedText : string with get, set" Usage="System.Windows.Forms.MaskedTextBox.SelectedText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前的選取範圍中<see cref="T:System.Windows.Forms.MaskedTextBox" />控制項。</summary>
        <value>目前選取的文字，為<see cref="T:System.String" />。 如果目前未選取任何文字，則這個屬性會解析為空字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個屬性來擷取選取的項目會依照格式控制項的格式化屬性，例如<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>， <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>，<xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>和<xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>。 使用這個屬性設定的選取項目表現貼上作業： 每個字元會比對的遮罩，而<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>無效的字元都會引發事件。 如果<xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>已`true`，設定時，則不會允許常值和提示字元<xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A>，除非它們違反遮罩將以無訊息方式移除。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SkipLiterals">
      <MemberSignature Language="C#" Value="public bool SkipLiterals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipLiterals" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipLiterals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipLiterals { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipLiterals : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否允許使用者重新輸入常值。</summary>
        <value><see langword="true" /> 表示允許重新輸入; 的常值否則，<see langword="false" />防止使用者覆寫常值字元。 預設為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 輸入的遮罩通常包含常值。 當使用者輸入字元<xref:System.Windows.Forms.MaskedTextBox>在執行階段，目前的字元位置有時候會落在常值。 <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>屬性描述的下一個字元的使用者輸入的處理，如下所示的方式：  
  
-   如果此屬性為`true`，使用者可以重複輸入相同的字元與常值目前位置，或可以輸入下一步] 可編輯的字元，藉此跳至該位置的 [目前的位置。  
  
-   如果此屬性為`false`，使用者只能輸入下一步 可編輯的字元。 如果遮罩中的下一個位置將不會接受常值字元 (例如，在使用者輸入"/"和下一個位置只接受數字)，控制項將會引發<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>事件。  
  
 例如，在"90/90/0000"日期輸入遮罩中，正斜線字元都是常值。 假設使用者已輸入兩個初始數字，"11"，因此中的目前位置的遮罩是在第一個正斜線 （/） 常值。 如果<xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>是`true`，則使用者會有下列有效的選項：  
  
-   使用者可以輸入"/"字元。 這會導致目前位置移至下一個字元，這在此範例中是第四個位置，也就是 9，遮罩項目。  
  
-   使用者可以輸入的下一步 的可編輯字元，這在此範例中是一個數字。 會驗證該數字和目前的位置會自動移至第五個位置，也就是 0 遮罩項目。  
  
 如果<xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>是`false`，則允許只有有效的資料輸入，在此範例是一個數字。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.MaskedTextBox.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskedTextBoxTextEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskedTextBoxTextEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前顯示給使用者的文字。</summary>
        <value>A<see cref="T:System.String" />包含目前控制項所顯示的文字。 預設為空字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 是預設繫結屬性<xref:System.Windows.Forms.MaskedTextBox>類別。  
  
 使用這個屬性來擷取的字串會依照格式控制項的格式化屬性，例如<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>和<xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>。  
  
 您可以指派字串和常值字元<xref:System.Windows.Forms.MaskedTextBox.Text%2A>依據的值<xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>， <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A>，和<xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>。  
  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 是預設繫結屬性<xref:System.Windows.Forms.MaskedTextBox>。  
  
 <xref:System.Windows.Forms.MaskedTextBox> 將會引發<xref:System.Windows.Forms.Control.TextChanged>格式化的文字值變更時的事件。 不同的屬性可能會或可能不會造成此值可變更。 例如，變更<xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>屬性將不會引發<xref:System.Windows.Forms.Control.TextChanged>事件，但是變更<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例示範使用<xref:System.Windows.Forms.MaskedTextBox.Text%2A>屬性。  
  
 [!code-vb[TestMaskedTextBox#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TestMaskedTextBox/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      </Docs>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HorizontalAlignment TextAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.HorizontalAlignment TextAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlign As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HorizontalAlignment TextAlign { System::Windows::Forms::HorizontalAlignment get(); void set(System::Windows::Forms::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.TextAlign : System.Windows.Forms.HorizontalAlignment with get, set" Usage="System.Windows.Forms.MaskedTextBox.TextAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定文字在遮罩文字方塊控制項中的對齊方式。</summary>
        <value>其中一個<see cref="T:System.Windows.Forms.HorizontalAlignment" />列舉值，指定文字相對於控制項的對齊方式。 預設為 <see cref="F:System.Windows.Forms.HorizontalAlignment.Left" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A>屬性中顯示的文字對齊<xref:System.Windows.Forms.MaskedTextBox>以符合您的表單上的視覺元素的版面配置。 例如，如果您的控制項全都位於表單右邊，您可以設定<xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A>屬性設<xref:System.Windows.Forms.HorizontalAlignment.Right>，並將對齊文字，而不是預設值靠左對齊控制項的右側。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指派給這個屬性的值不是類型<see cref="T:System.Windows.Forms.HorizontalAlignment" />。</exception>
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.AutoSize" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextAlignChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextAlignChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextAlignChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextAlignChanged;" />
      <MemberSignature Language="F#" Value="member this.TextAlignChanged : EventHandler " Usage="member this.TextAlignChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於文字對齊方式變更時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged>之後，就會引發事件<xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A>屬性變更。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個成員。 在範例中，事件處理常式會報告一次<xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged>事件。 此報表可協助您了解事件發生的時機，並可協助您偵錯。 若要報告多個事件或事件經常發生，請考慮更換<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>具有<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>或將訊息附加到多行<xref:System.Windows.Forms.TextBox>。  
  
 若要執行範例程式碼，將它貼到包含類型的執行個體的專案<xref:System.Windows.Forms.MaskedTextBox>名為`MaskedTextBox1`。 請確定 與關聯的事件處理常式<xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged>事件。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#487](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#487)]
 [!code-vb[System.Windows.Forms.EventExamples#487](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#487)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public override int TextLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TextLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TextLength : int" Usage="System.Windows.Forms.MaskedTextBox.TextLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得顯示文字的長度。</summary>
        <value>Int32 表示中的字元數<see cref="P:System.Windows.Forms.MaskedTextBox.Text" />屬性。 <see cref="P:System.Windows.Forms.MaskedTextBox.TextLength" /> 這類屬性會遵守<see cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />，這表示傳回的結果可能會因控制項是否有焦點而不同。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat TextMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat TextMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property TextMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat TextMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberSignature Language="F#" Value="member this.TextMaskFormat : System.Windows.Forms.MaskFormat with get, set" Usage="System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值可判斷是否會將常值和提示字元包含在格式化的字串中。</summary>
        <value>其中一個 <see cref="T:System.Windows.Forms.MaskFormat" /> 值。 預設為 <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>屬性會決定如何處理遮罩中的常值和提示字元時產生格式化的字串。 更具體來說，它會判斷是否會將常值字元、 提示字元，或兩者都包含在<xref:System.Windows.Forms.MaskedTextBox.Text%2A>屬性。 當提示字元會排除後時，它們會轉換成格式化字串中的空格。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>屬性的功能類似方式方面<xref:System.Windows.Forms.MaskedTextBox.Text%2A>屬性解譯。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">以無效的 <see cref="T:System.Windows.Forms.MaskFormat" /> 值所設定的屬性。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="maskedTextBox.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回字串，表示目前的遮罩文字方塊。 這個方法會覆寫 <see cref="M:System.Windows.Forms.TextBoxBase.ToString" />。</summary>
        <returns>A <see cref="T:System.String" /> ，其中包含關於目前的資訊<see cref="T:System.Windows.Forms.MaskedTextBox" />。 此字串包含類型、輸入字串的精簡檢視以及格式化的輸入字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本版<xref:System.Windows.Forms.MaskedTextBox.ToString%2A>方法會呼叫這個方法的基底類別實作<xref:System.Windows.Forms.TextBoxBase.ToString%2A?displayProperty=nameWithType>，遮罩所然後附加之後處理的輸入的字串。 這個方法會接受變更的格式化字串，但有下列例外狀況外觀的屬性：  
  
-   傳回的字串一律會包含提示和常值字元，不論值<xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>屬性。  
  
-   密碼字元會被忽略，，如此會傳回實際的使用者所輸入字元。 換句話說的值<xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>和<xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A>屬性會被忽略。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="TypeValidationCompleted">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TypeValidationCompleted As TypeValidationEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TypeValidationEventHandler ^ TypeValidationCompleted;" />
      <MemberSignature Language="F#" Value="member this.TypeValidationCompleted : System.Windows.Forms.TypeValidationEventHandler " Usage="member this.TypeValidationCompleted : System.Windows.Forms.TypeValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TypeValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生時<see cref="T:System.Windows.Forms.MaskedTextBox" />完成剖析目前的值使用<see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox>控制項將會選擇性地驗證使用者輸入，針對所定義的類型及其<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A?displayProperty=nameWithType>屬性。 當這個屬性不是`null`，就會發生下列一系列的事件：  
  
1.  當發生下列其中一項時，就會開始驗證順序：  
  
    -   <xref:System.Windows.Forms.MaskedTextBox> 控制項失去焦點。  
  
    -   <xref:System.Windows.Forms.MaskedTextBox.Text%2A>已擷取屬性。  
  
    -   已呼叫 <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> 方法。  
  
2.  任何這類事件的呼叫會導致`Parse`與指定之型別的方法<xref:System.Windows.Forms.TypeValidationEventArgs.ValidatingType%2A>屬性。 `Parse` 負責格式化輸入字串轉換成目標型別。 若要成功轉換等同於驗證成功。  
  
3.  在後`Parse`會傳回<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>就會引發事件。 此事件的事件處理常式通常是執行型別或遮罩驗證處理實作。 它會接收<xref:System.Windows.Forms.TypeValidationEventArgs>參數，其中包含轉換; 的相關資訊，例如<xref:System.Windows.Forms.TypeValidationEventArgs.IsValidInput%2A>成員表示轉換是否成功。  
  
4.  之後的事件處理常式<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件會傳回的標準驗證事件， <xref:System.Windows.Forms.Control.Validating>，就會引發。 執行標準驗證，可能包括 取消事件，就可以實作處理常式。  
  
5.  如果未在步驟 3 中取消事件，則標準來控制驗證事件<xref:System.Windows.Forms.Control.Validated>，就會引發。  
  
 如果<xref:System.Windows.Forms.TypeValidationEventArgs.Cancel%2A>屬性設定為`true`中<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件處理常式，事件將會被取消並<xref:System.Windows.Forms.MaskedTextBox>控制項會保留焦點，除非後續<xref:System.Windows.Forms.Control.Validating>事件設定其版本<xref:System.ComponentModel.CancelEventArgs.Cancel%2A?displayProperty=nameWithType>屬性回到`false`。  
  
   
  
## Examples  
 下列程式碼範例會嘗試剖析為有效的使用者的輸入<xref:System.DateTime>物件。 如果失敗，<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件處理常式會向使用者顯示錯誤訊息。 如果值為有效<xref:System.DateTime>，程式碼會驗證提供的日期不在今天的日期之前。 此程式碼範例需要您的 Windows Form 專案包含<xref:System.Windows.Forms.MaskedTextBox>控制項，名為`MaskedTextBox1`並<xref:System.Windows.Forms.ToolTip>控制項，名為`ToolTip1`。  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="T:System.Windows.Forms.TypeValidationEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Undo">
      <MemberSignature Language="C#" Value="public void Undo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Undo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.Undo" />
      <MemberSignature Language="VB.NET" Value="Public Sub Undo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Undo();" />
      <MemberSignature Language="F#" Value="override this.Undo : unit -&gt; unit" Usage="maskedTextBox.Undo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將文字方塊中上次的編輯作業復原。 這個方法不支援<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Undo%2A>方法繼承自基底<xref:System.Windows.Forms.TextBoxBase>類別。 不過，<xref:System.Windows.Forms.MaskedTextBox>不支援復原功能。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      </Docs>
    </Member>
    <Member MemberName="UseSystemPasswordChar">
      <MemberSignature Language="C#" Value="public bool UseSystemPasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSystemPasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property UseSystemPasswordChar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSystemPasswordChar { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseSystemPasswordChar : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否應該使用作業系統提供的密碼字元。</summary>
        <value><see langword="true" /> 如果應該使用系統密碼做為提示字元中;否則， <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A>屬性會決定是否應該以顯示使用者提供輸入<xref:System.Windows.Forms.MaskedTextBox>為作業系統所定義的密碼字元的多個項目。 <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> 函式類似於<xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>屬性，而不是提示時，請使用程式設計人員提供的字元，但<xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A>會使用作業系統所定義的提示。 這個屬性的優先順序高於<xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>。  
  
> [!IMPORTANT]
>  為安全的考量，<xref:System.Windows.Forms.MaskedTextBox>控制項停用密碼的字串上剪下和複製作業。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定的密碼字元會與目前的提示字元中，相同<see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />。 這兩個必須是不同。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      </Docs>
    </Member>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public object ValidateText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateText () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateText();" />
      <MemberSignature Language="F#" Value="member this.ValidateText : unit -&gt; obj" Usage="maskedTextBox.ValidateText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將使用者輸入字串轉換成驗證類型的執行個體。</summary>
        <returns>如果成功，<see cref="T:System.Object" />所指定型別的<see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />屬性，否則<see langword="null" />，表示轉換失敗。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A>方法會嘗試將格式化的字串中包含<xref:System.Windows.Forms.MaskedTextBox.Text%2A>所指定之型別的執行個體的內容<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>屬性。 在格式化字串中，會忽略的提示字元，但常值會根據目前的值處理<xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>屬性。  
  
 <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> 引發<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>之後嘗試轉換時，不論其成功與否的事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">輸入字串的剖析期間，發生重大例外狀況。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ValidatingType">
      <MemberSignature Language="C#" Value="public Type ValidatingType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValidatingType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatingType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ValidatingType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatingType : Type with get, set" Usage="System.Windows.Forms.MaskedTextBox.ValidatingType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來驗證資料輸入使用者的資料類型。</summary>
        <value>A<see cref="T:System.Type" />表示驗證中使用的資料類型。 預設為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 遮罩並不是在本身中保證使用者的輸入會代表有效的值，指定的類型。 下列 C# 程式碼顯示遮罩：  
  
```  
maskedTextBox1.Mask = "99/99/9999";  
```  
  
 下列 Visual Basic 程式碼顯示遮罩：  
  
 `MaskedTextBox1.Mask = "99/99/9999"`  
  
 此遮罩可以要求使用者輸入 8 位數，但無法驗證使用者輸入月份、 日期和年份值正確的範圍內;遮罩是而言，"12/20/2003"和"70/90/0000"會同樣有效。  
  
 您可以使用<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>若要確認是否由使用者輸入的資料正確範圍之內-在先前所述的案例中，將它指派的執行個體<xref:System.DateTime>型別。 控制項中目前的文字將會驗證是在使用者離開控制項時。 您可以判斷是否將資料驗證失敗藉由監視<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件。 <xref:System.Windows.Forms.MaskedTextBox> 只會執行檢查，以防止<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>如果<xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A>是`true`。  
  
 如果您想要使用您自己的自訂資料類型與<xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>，您必須實作靜態`Parse`接受字串做為參數的方法。 使用其中一個或多個下列簽章，就必須實作這個方法：  
  
 `public static Object Parse(string)`  
  
 `public static Object Parse(string, IFormatProvider)`  
  
   
  
## Examples  
 下列程式碼範例會嘗試剖析為有效的使用者的輸入<xref:System.DateTime>。 如果失敗，<xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>事件處理常式會向使用者顯示錯誤訊息。 如果值為有效<xref:System.DateTime>，程式碼會執行額外檢查，以確保提供的日期不在今天的日期之前。 此程式碼範例需要您的 Windows Form 專案包含<xref:System.Windows.Forms.MaskedTextBox>控制項，名為`MaskedTextBox1`並<xref:System.Windows.Forms.ToolTip>控制項，名為`ToolTip1`。  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc :  -&gt; unit" Usage="maskedTextBox.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">要處理的 Windows <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>處理 Windows 訊息。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="WordWrap">
      <MemberSignature Language="C#" Value="public bool WordWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WordWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.WordWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property WordWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WordWrap { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WordWrap : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.WordWrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出多行文字方塊控制項是否會在必要時自動將文字換行到下一行的開頭。 這個屬性不支援<see cref="T:System.Windows.Forms.MaskedTextBox" />。</summary>
        <value><see cref="P:System.Windows.Forms.MaskedTextBox.WordWrap" />屬性一律會傳回<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因為<xref:System.Windows.Forms.MaskedTextBox>不支援多行的輸入，<xref:System.Windows.Forms.MaskedTextBox.WordWrap%2A>屬性會被忽略。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
  </Members>
</Type>