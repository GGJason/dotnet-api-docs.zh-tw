<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PipeStream.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c4ce12188b120bb90db9e7bbf08c300b37b4511a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4ce12188b120bb90db9e7bbf08c300b37b4511a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.Pipes.PipeStream">
          <source>Exposes a <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object around a pipe, which supports both anonymous and named pipes.</source>
          <target state="translated">公開管道的 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 物件，其兼具匿名與具名管道的支援。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> class provides the base class for named and anonymous pipes operations in the .NET Framework.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>類別會提供.NET Framework 中的具名和匿名管道作業的基底類別。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.NamedPipeServerStream&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Pipes.NamedPipeClientStream&gt;</ph> classes for named pipe operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.NamedPipeServerStream&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.Pipes.NamedPipeClientStream&gt;</ph>具名的管道作業的類別。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph> classes for anonymous pipe operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt;</ph>匿名管道作業的類別。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>For more information about pipes, see <bpt id="p1">[</bpt>Pipes<ept id="p1">](~/docs/standard/io/pipe-operations.md)</ept>.</source>
          <target state="translated">如需有關管道的詳細資訊，請參閱<bpt id="p1">[</bpt>管道<ept id="p1">](~/docs/standard/io/pipe-operations.md)</ept>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>For an example of anonymous pipes, see <bpt id="p1">[</bpt>How to: Use Anonymous Pipes for Local Interprocess Communication<ept id="p1">](~/docs/standard/io/how-to-use-anonymous-pipes-for-local-interprocess-communication.md)</ept>.</source>
          <target state="translated">如需匿名管道的範例，請參閱<bpt id="p1">[</bpt>How to： 使用匿名管道進行本機處理序間通訊<ept id="p1">](~/docs/standard/io/how-to-use-anonymous-pipes-for-local-interprocess-communication.md)</ept>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>For an example of named pipes, see <bpt id="p1">[</bpt>How to: Use Named Pipes for Network Interprocess Communication<ept id="p1">](~/docs/standard/io/how-to-use-named-pipes-for-network-interprocess-communication.md)</ept>.</source>
          <target state="translated">如需具名管道的範例，請參閱<bpt id="p1">[</bpt>How to： 使用具名管道網路處理序間通訊<ept id="p1">](~/docs/standard/io/how-to-use-named-pipes-for-network-interprocess-communication.md)</ept>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>for full trust for inheritors.</source>
          <target state="translated">針對繼承者完全信任。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Pipes.PipeStream">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">這個類別無法被繼承，部分信任程式碼。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="T:System.IO.Pipes.PipeStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> values that indicates the direction of the pipe object.</source>
          <target state="translated">其中一個 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> 值，表示管道物件的方向。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
          <source>A positive <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value greater than or equal to 0 that indicates the buffer size.</source>
          <target state="translated">表示緩衝區大小且大於或等於 0 的正數 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> class using the specified <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> value and buffer size.</source>
          <target state="translated">使用指定的 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> 值和緩衝區大小，初始化 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
          <source>This constructor uses a pipe transmission mode of <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Byte&gt;</ph>.</source>
          <target state="translated">這個建構函式會使用的管道傳輸模式<ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Byte&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> values that indicates the direction of the pipe object.</source>
          <target state="translated">其中一個 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> 值，表示管道物件的方向。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> values that indicates the transmission mode of the pipe object.</source>
          <target state="translated">其中一個 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> 值，表示管道物件的傳輸模式。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source>A positive <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value greater than or equal to 0 that indicates the buffer size.</source>
          <target state="translated">表示緩衝區大小且大於或等於 0 的正數 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> class using the specified <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph>, and buffer size.</source>
          <target state="translated">使用指定的 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph>、<ph id="ph3">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> 和緩衝區大小，初始化 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="direction" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeDirection" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="transmissionMode" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="transmissionMode" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to read data into.</source>
          <target state="translated">要讀取資料的緩衝區。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin reading.</source>
          <target state="translated">「緩衝區」<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>中要開始讀取的位元組位移。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">要讀取的最大位元組數。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The method to call when the asynchronous read operation is completed.</source>
          <target state="translated">在完成非同步讀取作業時呼叫的方法。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous read request from other requests.</source>
          <target state="translated">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步讀取的要求。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous read operation.</source>
          <target state="translated">開始非同步的讀取作業。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> object that references the asynchronous read.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 物件，參考非同步讀取。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the returned <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> object to the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> method to determine how many bytes were read and to release operating system resources used for reading.</source>
          <target state="translated">傳回傳遞<ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>物件<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>方法來判斷有多少位元組被讀取，並釋放用於讀取的作業系統資源。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> 必須針對每次呼叫一次呼叫<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>This can be done either in the same code that called <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph> or in a callback that is passed to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated">作法是在相同的程式碼呼叫<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>或傳遞至回撥中<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports read operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph>屬性來判斷是否目前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>物件支援讀取作業。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If the pipe is closed or an invalid argument is passed to <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>, the appropriate exceptions are raised immediately.</source>
          <target state="translated">如果管道已關閉或無效的引數傳遞給<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>，會立即引發適當的例外狀況。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous read request occur on the thread pool thread that is performing the request.</source>
          <target state="translated">正在執行要求的執行緒集區執行緒上，會發生在非同步讀取要求期間發生的錯誤。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The exceptions are raised when the code calls the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> method.</source>
          <target state="translated">程式碼呼叫時，會引發例外狀況<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is greater than the number of bytes available in <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 大於 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> 中的可用位元組數目。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe is closed.</source>
          <target state="translated">管道已關閉。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe does not support read operations.</source>
          <target state="translated">管道不支援讀取作業。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe is disconnected, waiting to connect, or the handle has not been set.</source>
          <target state="translated">管道已中斷連接、正在等候連接，或尚未設定控制代碼。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已中斷，或發生另一個 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer that contains the data to write to the current stream.</source>
          <target state="translated">緩衝區，其中包含要寫入目前資料流的資料。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin copying bytes to the current stream.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 中以零為起始的位元組位移，將會從該處開始將位元組複製到目前的資料流。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">寫入的最大位元組數。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The method to call when the asynchronous write operation is completed.</source>
          <target state="translated">在完成非同步寫入作業時呼叫的方法。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous write request from other requests.</source>
          <target state="translated">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步寫入的要求。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous write operation.</source>
          <target state="translated">開始非同步的寫入作業。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> object that references the asynchronous write operation.</source>
          <target state="translated">參考非同步寫入作業的 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph> 必須針對每次呼叫一次呼叫<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>This can be done either in the same code that called <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph> or in a callback that is passed to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated">作法是在相同的程式碼呼叫<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>或傳遞至回撥中<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports write operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph>屬性來判斷是否目前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>物件支援寫入作業。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If the pipe is closed or an invalid argument is passed to <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>, the appropriate exceptions are raised immediately.</source>
          <target state="translated">如果管道已關閉或無效的引數傳遞給<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>，會立即引發適當的例外狀況。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous write request occur on the thread pool thread that is performing the request.</source>
          <target state="translated">正在執行要求的執行緒集區執行緒上，會發生在非同步寫入要求期間發生的錯誤。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The exceptions are raised when the code calls the  <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph> method.</source>
          <target state="translated">程式碼呼叫時，會引發例外狀況<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is greater than the number of bytes available in <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 大於 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> 中的可用位元組數目。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe is closed.</source>
          <target state="translated">管道已關閉。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe does not support write operations.</source>
          <target state="translated">管道不支援寫入作業。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe is disconnected, waiting to connect, or the handle has not been set.</source>
          <target state="translated">管道已中斷連接、正在等候連接，或尚未設定控制代碼。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已中斷，或發生另一個 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.CanRead">
          <source>Gets a value indicating whether the current stream supports read operations.</source>
          <target state="translated">取得值，表示目前的資料流是否支援讀取作業。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports read operations; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果資料流支援讀取作業則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.CanRead">
          <source>If the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object is closed, this property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>物件已關閉，則這個屬性會傳回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.CanSeek">
          <source>Gets a value indicating whether the current stream supports seek operations.</source>
          <target state="translated">取得值，表示目前的資料流是否支援搜尋作業。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.CanSeek">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases.</source>
          <target state="translated">所有情況下都是 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.CanSeek">
          <source>If the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object is closed, this property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>物件已關閉，則這個屬性會傳回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.CanWrite">
          <source>Gets a value indicating whether the current stream supports write operations.</source>
          <target state="translated">取得值，表示目前的資料流是否支援寫入作業。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports write operations; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果資料流支援寫入作業則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.CanWrite">
          <source>If the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object is closed, this property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>物件已關閉，則這個屬性會傳回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.CheckPipePropertyOperations">
          <source>Verifies that the pipe is in a proper state for getting or setting properties.</source>
          <target state="translated">確認管道處於可取得或設定屬性的正確狀態。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.CheckReadOperations">
          <source>Verifies that the pipe is in a connected state for read operations.</source>
          <target state="translated">確認管道處於可讀取作業的連接狀態。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.CheckWriteOperations">
          <source>Verifies that the pipe is in a connected state for write operations.</source>
          <target state="translated">確認管道處於可寫入作業的連接狀態。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示釋放 Managed 和 Unmanaged 資源，<ph id="ph2">&lt;see langword="false" /&gt;</ph> 則表示只釋放 Unmanaged 資源。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> class and optionally releases the managed resources.</source>
          <target state="translated">釋放 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 類別所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">這個方法會呼叫公用<ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> 叫用受保護<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Dispose%2A&gt;</ph>方法<ph id="ph3">`disposing`</ph>參數設定為<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 叫用<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Dispose%2A&gt;</ph>與<ph id="ph3">`disposing`</ph>設<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>When the disposing parameter is <ph id="ph1">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object references.</source>
          <target state="translated">當處置參數是<ph id="ph1">`true`</ph>，這個方法的任何 managed 物件所持有的資源全部釋出這個<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>物件參考。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Dispose%2A&gt;</ph> method of each referenced object.</source>
          <target state="translated">這個方法會叫用每個參考物件的 <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Dispose%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>In derived classes, put all <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> cleanup logic in the <ph id="ph2">&lt;see cref="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">在衍生類別，讓所有<ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>中的清除邏輯<ph id="ph2">&lt;see cref="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)" /&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> 可以被其他物件呼叫多次。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated">覆寫 <ph id="ph1">&lt;see cref="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)" /&gt;</ph> 時，請小心不要參考到先前已在對 <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> 的早期呼叫中被處置 (Dispose) 的物件。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">如需有關如何實作<ph id="ph1">&lt;see cref="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)" /&gt;</ph>，請參閱<bpt id="p1">[</bpt>實作 Dispose 方法<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">如需有關<ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>和<ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>，請參閱<bpt id="p1">[</bpt>清除 Unmanaged 資源上<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>The reference to the pending asynchronous request.</source>
          <target state="translated">暫止之非同步要求的參考。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>Ends a pending asynchronous read request.</source>
          <target state="translated">結束擱置的非同步讀取要求。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>The number of bytes that were read.</source>
          <target state="translated">已讀取的位元組數目。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>A return value of 0 indicates the end of the stream (the pipe has been closed).</source>
          <target state="translated">傳回值 0 表示資料流末端 (管道已經關閉)。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>This method returns the number of bytes read into the byte array specified by the earlier call to <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated">這個方法會傳回  苺巃所指定的位元組陣列中讀取的位元組數目<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>Pass the returned <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> object to the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> method to determine how many bytes were read and to release operating system resources used for reading.</source>
          <target state="translated">傳回傳遞<ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>物件<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>方法來判斷有多少位元組被讀取，並釋放用於讀取的作業系統資源。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> 必須針對每次呼叫一次呼叫<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>This can be done either in the same code that called <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph> or in a callback that is passed to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated">作法是在相同的程式碼呼叫<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>或傳遞至回撥中<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports read operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph>屬性來判斷是否目前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>物件支援讀取作業。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>If the pipe is closed or an invalid argument is passed to <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>, the appropriate exceptions are raised immediately.</source>
          <target state="translated">如果管道已關閉或無效的引數傳遞給<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>，會立即引發適當的例外狀況。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>Errors that occur during an asynchronous read request occur on the thread pool thread that is performing the request.</source>
          <target state="translated">正在執行要求的執行緒集區執行緒上，會發生在非同步讀取要求期間發生的錯誤。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>The exceptions are raised when the code calls the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph> method.</source>
          <target state="translated">程式碼呼叫時，會引發例外狀況<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> did not originate from a <ph id="ph2">&lt;see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> method on the current stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 不是來自目前資料流的 <ph id="ph2">&lt;see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">資料流已關閉或發生內部錯誤。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>The reference to the pending asynchronous request.</source>
          <target state="translated">暫止之非同步要求的參考。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>Ends a pending asynchronous write request.</source>
          <target state="translated">結束暫止的非同步寫入要求。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph> 必須針對每次呼叫一次呼叫<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>This can be done either in the same code that called <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph> or in a callback that is passed to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated">作法是在相同的程式碼呼叫<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>或傳遞至回撥中<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports write operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph>屬性來判斷是否目前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>物件支援寫入作業。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>If the pipe is closed or an invalid argument is passed to <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>, the appropriate exceptions are raised immediately.</source>
          <target state="translated">如果管道已關閉或無效的引數傳遞給<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>，會立即引發適當的例外狀況。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>Errors that occur during an asynchronous write request occur on the thread pool thread that is performing the request.</source>
          <target state="translated">正在執行要求的執行緒集區執行緒上，會發生在非同步寫入要求期間發生的錯誤。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>The exceptions are raised when the code the calls <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph> method.</source>
          <target state="translated">會引發例外狀況時的程式碼呼叫<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> did not originate from a <ph id="ph2">&lt;see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> method on the current stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 不是來自目前資料流的 <ph id="ph2">&lt;see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">資料流已關閉或發生內部錯誤。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Flush">
          <source>Clears the buffer for the current stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">清除目前資料流的緩衝區，並讓所有的緩衝資料全部寫入基礎裝置。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Flush">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Flush%2A&gt;</ph> method is not supported in the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> class and does nothing when it is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Flush%2A&gt;</ph>中不支援方法<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>類別，而且不會呼叫時，所有項目。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Flush">
          <source>The pipe is closed.</source>
          <target state="translated">管道已關閉。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Flush">
          <source>The pipe does not support write operations.</source>
          <target state="translated">管道不支援寫入作業。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Flush">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已中斷，或發生另一個 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> object that encapsulates the access control list (ACL) entries for the pipe described by the current <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> 物件，該物件會封裝目前 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 物件所描述之管道的存取控制清單 (ACL) 項目。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> object that encapsulates the access control list (ACL) entries for the pipe described by the current <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> 物件，該物件會封裝目前 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 物件所描述之管道的存取控制清單 (ACL) 項目。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>An access control list (ACL) describes individuals and/or groups that have, or do not have, rights to perform specific actions on a specified file.</source>
          <target state="translated">存取控制清單 (ACL) 說明個人和/或群組，或沒有，在指定的檔案上執行特定動作的權限。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add or Remove Access Control List Entries<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>如何：新增或移除存取控制清單項目<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>The pipe is closed.</source>
          <target state="translated">管道已關閉。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>The underlying call to set security information failed.</source>
          <target state="translated">設定安全性資訊的基礎呼叫失敗。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>The underlying call to set security information failed.</source>
          <target state="translated">設定安全性資訊的基礎呼叫失敗。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.GetAccessControl">
          <source>The underlying call to set security information failed.</source>
          <target state="translated">設定安全性資訊的基礎呼叫失敗。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.InBufferSize">
          <source>Gets the size, in bytes, of the inbound buffer for a pipe.</source>
          <target state="translated">取得管道的傳入緩衝區大小 (以位元組為單位)。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.InBufferSize">
          <source>An integer value that represents the inbound buffer size, in bytes.</source>
          <target state="translated">整數值，表示傳入緩衝區的大小 (以位元組為單位)。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.InBufferSize">
          <source>If <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.InBufferSize%2A&gt;</ph> is 0, the buffer size is allocated as needed.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.InBufferSize%2A&gt;</ph>是 0，視需要配置的緩衝區大小。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.InBufferSize">
          <source>The stream is unreadable.</source>
          <target state="translated">資料流無法讀取。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.InBufferSize">
          <source>The pipe is waiting to connect.</source>
          <target state="translated">管道正在等候連接。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.InBufferSize">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已中斷，或發生另一個 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /&gt;</ph> object of the pipe to initialize.</source>
          <target state="translated">要初始化之管道的 <ph id="ph1">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to expose the handle; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果要公開控制代碼，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the handle was opened asynchronously; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示控制代碼為非同步開啟；否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object from the specified <ph id="ph2">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /&gt;</ph> object.</source>
          <target state="translated">從指定的 <ph id="ph2">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /&gt;</ph> 物件初始化 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
          <source>If the pipe is in a connected state, this method also sets the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.IsConnected%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">如果管道處於連線狀態，這個方法也會設定<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.IsConnected%2A&gt;</ph>屬性<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
          <source>A handle cannot be bound to the pipe.</source>
          <target state="translated">無法繫結至管道的控制代碼。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsAsync">
          <source>Gets a value indicating whether a <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object was opened asynchronously or synchronously.</source>
          <target state="translated">取得值，指出 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 物件是非同步開啟還是同步開啟。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsAsync">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object was opened asynchronously; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 物件是非同步開啟則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsAsync">
          <source>This property enables your code to use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.SafePipeHandle%2A&gt;</ph> property correctly.</source>
          <target state="translated">此屬性可讓您的程式碼，以使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.SafePipeHandle%2A&gt;</ph>屬性正確。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsConnected">
          <source>Gets or sets a value indicating whether a <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object is connected.</source>
          <target state="translated">取得或定值，指出是否已連接 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsConnected">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object is connected; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已連接 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 物件則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsConnected">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.IsConnected%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> only if the <ph id="ph3">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object is connected.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.IsConnected%2A&gt;</ph>屬性會傳回<ph id="ph2">`true`</ph>才<ph id="ph3">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>物件連接。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsConnected">
          <source>If this property returns <ph id="ph1">`false`</ph>, the pipe may be waiting to connect, or may be disconnected, closed, or broken.</source>
          <target state="translated">如果這個屬性會傳回<ph id="ph1">`false`</ph>，管道可能正在等候連接，或可能會中斷連線、 關閉，或破壞。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsHandleExposed">
          <source>Gets a value indicating whether a handle to a <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object is exposed.</source>
          <target state="translated">取得值，指出是否已公開 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 物件的控制代碼。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsHandleExposed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a handle to the <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object is exposed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已公開 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 物件的控制代碼則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsHandleExposed">
          <source>The value of this property is set when obtaining a handle to the pipe that is encapsulated by the current <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object.</source>
          <target state="translated">取得管道的控制代碼會由目前封裝時，會設定這個屬性的值<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>Gets a value indicating whether there is more data in the message returned from the most recent read operation.</source>
          <target state="translated">取得值，指出最近一次讀取作業傳回的訊息中是否有更多資料。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if there are no more characters to read in the message; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果訊息中已無其他字元可供讀取則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>This property is relevant if the pipe's <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.ReadMode%2A&gt;</ph> property was set to <ph id="ph2">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> by the most recent call to <ph id="ph3">&lt;xref:System.IO.Pipes.PipeStream.Read%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>.</source>
          <target state="translated">這個屬性是相關如果管道<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.ReadMode%2A&gt;</ph>屬性設定為<ph id="ph2">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph>由最新呼叫<ph id="ph3">&lt;xref:System.IO.Pipes.PipeStream.Read%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>The pipe is not connected.</source>
          <target state="translated">此管道未連接。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>The pipe handle has not been set.</source>
          <target state="translated">尚未設定管道控制代碼。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>The pipe's <ph id="ph1">&lt;see cref="P:System.IO.Pipes.PipeStream.ReadMode" /&gt;</ph> property value is not <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" /&gt;</ph>.</source>
          <target state="translated">此管道的 <ph id="ph1">&lt;see cref="P:System.IO.Pipes.PipeStream.ReadMode" /&gt;</ph> 屬性值不是 <ph id="ph2">&lt;see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.IsMessageComplete">
          <source>The pipe is closed.</source>
          <target state="translated">管道已關閉。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.Length">
          <source>Gets the length of a stream, in bytes.</source>
          <target state="translated">取得資料流的長度 (以位元組為單位)。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.Length">
          <source>0 in all cases.</source>
          <target state="translated">所有情況下都是 0。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.Length">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> class does not support the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Length%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> 類別 (Class) 不支援 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Length%2A&gt;</ph> 屬性。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.Length">
          <source>Always thrown.</source>
          <target state="translated">一律擲回。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.OutBufferSize">
          <source>Gets the size, in bytes, of the outbound buffer for a pipe.</source>
          <target state="translated">取得管道的傳出緩衝區大小 (以位元組為單位)。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.OutBufferSize">
          <source>The outbound buffer size, in bytes.</source>
          <target state="translated">傳出緩衝區的大小 (以位元組為單位)。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.OutBufferSize">
          <source>If <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.OutBufferSize%2A&gt;</ph> is 0, the buffer size is allocated as needed.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.OutBufferSize%2A&gt;</ph>是 0，視需要配置的緩衝區大小。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.OutBufferSize">
          <source>The stream is unwriteable.</source>
          <target state="translated">資料流無法寫入。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.OutBufferSize">
          <source>The pipe is waiting to connect.</source>
          <target state="translated">管道正在等候連接。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.OutBufferSize">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已中斷，或發生另一個 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.Position">
          <source>Gets or sets the current position of the current stream.</source>
          <target state="translated">取得或設定目前資料流目前的位置。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.Position">
          <source>0 in all cases.</source>
          <target state="translated">所有情況下都是 0。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.Position">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> class does not support the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Position%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> 類別 (Class) 不支援 <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.Position%2A&gt;</ph> 屬性。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.Position">
          <source>Always thrown.</source>
          <target state="translated">一律擲回。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When this method returns, contains the specified byte array with the values between <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the bytes read from the current source.</source>
          <target state="translated">當這個方法傳回時，會包含其值介於 <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> 和 (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) 之間，並由讀取自目前來源的位元組取代的指定位元組陣列。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The byte offset in the <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> array at which the bytes that are read will be placed.</source>
          <target state="translated">要將讀取位元組放入其中之「緩衝區」<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>陣列中的位元組位移。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">要讀取的最大位元組數。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads a block of bytes from a stream and writes the data to a specified buffer.</source>
          <target state="translated">讀取資料流的位元組區塊，並將資料寫入指定的緩衝區。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes that are read into <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated">讀入 <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 中的位元組總數。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This might be less than the number of bytes requested if that number of bytes is not currently available, or 0 if the end of the stream is reached.</source>
          <target state="translated">如果目前無法取得要求的位元組數目，此數目可能小於該位元組數目；如果已到達資料流結尾，則此數目為 0。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports read operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph>屬性來判斷是否目前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>物件支援讀取作業。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Calling the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Read%2A&gt;</ph> method blocks until <ph id="ph2">`count`</ph> bytes are read or the end of the stream is reached.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Read%2A&gt;</ph>方法會封鎖，直到<ph id="ph2">`count`</ph>讀取的位元組或資料流結尾為止。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>For asynchronous read operations, see <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>.</source>
          <target state="translated">針對非同步讀取操作，請參閱<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginRead%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndRead%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following example creates an anonymous pipe client and pipe server.</source>
          <target state="translated">下列範例會建立匿名管道用戶端和管道伺服器。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The pipe server uses the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Read%2A&gt;</ph> method to read a series of bytes from the pipe client as a validation code.</source>
          <target state="translated">使用的管道伺服器<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Read%2A&gt;</ph>方法來讀取管道用戶端與驗證程式碼中的一系列的位元組。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Both the pipe client and the pipe server are part of the same example.</source>
          <target state="translated">管道的用戶端和管道伺服器屬於相同的範例。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The server portion of the example creates a client process and passes it an anonymous pipe handle as an argument.</source>
          <target state="translated">此範例的伺服器部分會建立用戶端處理序，並將其做為引數傳遞匿名管道控制代碼。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is greater than the number of bytes available in <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 大於 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> 中的可用位元組數目。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The pipe is closed.</source>
          <target state="translated">管道已關閉。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The pipe does not support read operations.</source>
          <target state="translated">管道不支援讀取作業。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The pipe is disconnected, waiting to connect, or the handle has not been set.</source>
          <target state="translated">管道已中斷連接、正在等候連接，或尚未設定控制代碼。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Any I/O error occurred.</source>
          <target state="translated">發生任何 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.ReadByte">
          <source>Reads a byte from a pipe.</source>
          <target state="translated">從管道讀取位元組。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.ReadByte">
          <source>The byte, cast to <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>, or -1 indicates the end of the stream (the pipe has been closed).</source>
          <target state="translated">轉型為 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 的位元組或 -1 表示資料流末端 (管道已經關閉)。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.ReadByte">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports read operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanRead%2A&gt;</ph>屬性來判斷是否目前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>物件支援讀取作業。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.ReadByte">
          <source>The pipe is closed.</source>
          <target state="translated">管道已關閉。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.ReadByte">
          <source>The pipe does not support read operations.</source>
          <target state="translated">管道不支援讀取作業。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.ReadByte">
          <source>The pipe is disconnected, waiting to connect, or the handle has not been set.</source>
          <target state="translated">管道已中斷連接、正在等候連接，或尚未設定控制代碼。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.ReadByte">
          <source>Any I/O error occurred.</source>
          <target state="translated">發生任何 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>Gets or sets the reading mode for a <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object.</source>
          <target state="translated">取得或設定 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 物件的讀取模式。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> values that indicates how the <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object reads from the pipe.</source>
          <target state="translated">其中一個 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> 值，表示 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 物件讀取管道的方式。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>Anonymous pipes do not support <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> mode message transmission.</source>
          <target state="translated">不支援匿名管道<ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph>模式訊息傳輸。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>The supplied value is not a valid <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> value.</source>
          <target state="translated">所提供的值不是有效的 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>The supplied value is not a supported <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> value for this pipe stream.</source>
          <target state="translated">所提供的值不是此管道資料流所支援的 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>The handle has not been set.</source>
          <target state="translated">尚未設定控制代碼。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>The pipe is waiting to connect with a named client.</source>
          <target state="translated">管道正在等候與具名用戶端連接。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.ReadMode">
          <source>The pipe is broken or an I/O error occurred with a named client.</source>
          <target state="translated">管道已中斷或具名用戶端發生 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.SafePipeHandle">
          <source>Gets the safe handle for the local end of the pipe that the current <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object encapsulates.</source>
          <target state="translated">取得目前 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 物件封裝之管道的本機端的安全控制代碼。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.SafePipeHandle">
          <source>A <ph id="ph1">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /&gt;</ph> object for the pipe that is encapsulated by the current <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object.</source>
          <target state="translated">目前 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 物件封裝之管道的 <ph id="ph1">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.SafePipeHandle">
          <source>The pipe handle has not been set.</source>
          <target state="translated">尚未設定管道控制代碼。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.SafePipeHandle">
          <source>The pipe is closed.</source>
          <target state="translated">管道已關閉。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The point, relative to <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>, to begin seeking from.</source>
          <target state="translated">相對於「原點」<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>的搜尋起點。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Specifies the beginning, the end, or the current position as a reference point for <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept>, using a value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph>.</source>
          <target state="translated">使用類型 <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> 的值，指定開頭、結尾或目前位置作為「位移」<bpt id="p1">&lt;c&gt;</bpt><ept id="p1">&lt;/c&gt;</ept>的參考點。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Sets the current position of the current stream to the specified value.</source>
          <target state="translated">將目前資料流目前的位置設定為指定的值。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position in the stream.</source>
          <target state="translated">資料流中的新位置。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Seek%2A&gt;</ph> method is not supported in pipes and raises a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph> when it is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Seek%2A&gt;</ph>方法不支援管道和引發<ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>當呼叫它。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> object that specifies an access control list (ACL) entry to apply to the current pipe.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> 物件，指定要套用至目前管道的存取控制清單 (ACL) 項目。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>Applies the access control list (ACL) entries specified by a <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> object to the pipe specified by the current <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> object.</source>
          <target state="translated">將 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeSecurity" /&gt;</ph> 物件所指定的存取控制清單 (ACL) 項目套用至目前 <ph id="ph2">&lt;see cref="T:System.IO.Pipes.PipeStream" /&gt;</ph> 物件所指定的管道。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>An access control list (ACL) describes individuals and/or groups that have, or do not have, rights to perform specific actions on a specified file.</source>
          <target state="translated">存取控制清單 (ACL) 說明個人和/或群組，或沒有，在指定的檔案上執行特定動作的權限。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add or Remove Access Control List Entries<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>如何：新增或移除存取控制清單項目<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>The pipe is closed.</source>
          <target state="translated">管道已關閉。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source><ph id="ph1">&lt;paramref name="pipeSecurity" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pipeSecurity" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>The underlying call to set security information failed.</source>
          <target state="translated">設定安全性資訊的基礎呼叫失敗。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>The underlying call to set security information failed.</source>
          <target state="translated">設定安全性資訊的基礎呼叫失敗。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
          <source>The underlying call to set security information failed.</source>
          <target state="translated">設定安全性資訊的基礎呼叫失敗。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetLength(System.Int64)">
          <source>The new length of the stream.</source>
          <target state="translated">資料流的新長度。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.SetLength(System.Int64)">
          <source>Sets the length of the current stream to the specified value.</source>
          <target state="translated">將目前資料流的長度設定為指定的數值。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.SetLength(System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> class does not support the <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.SetLength%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>類別不支援<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.SetLength%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>Gets the pipe transmission mode supported by the current pipe.</source>
          <target state="translated">取得目前管道支援的管道傳輸模式。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> values that indicates the transmission mode supported by the current pipe.</source>
          <target state="translated">其中一個 <ph id="ph1">&lt;see cref="T:System.IO.Pipes.PipeTransmissionMode" /&gt;</ph> 值，表示目前管道支援的傳輸模式。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>Anonymous pipes do not support <ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph> mode message transmission.</source>
          <target state="translated">不支援匿名管道<ph id="ph1">&lt;xref:System.IO.Pipes.PipeTransmissionMode.Message&gt;</ph>模式訊息傳輸。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>The pipe is closed.</source>
          <target state="translated">管道已關閉。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>The handle has not been set.</source>
          <target state="translated">尚未設定此控制代碼。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>The pipe is waiting to connect in an anonymous client/server operation or with a named client.</source>
          <target state="translated">管道正在等候連接匿名的用戶端/伺服器作業，或具名的用戶端。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="P:System.IO.Pipes.PipeStream.TransmissionMode">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已中斷，或發生另一個 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
          <source>Waits for the other end of the pipe to read all sent bytes.</source>
          <target state="translated">等待管道另一端讀取已傳送的所有位元組。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.WaitForPipeDrain%2A&gt;</ph> method blocks until the other end of the pipe has read all sent bytes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.WaitForPipeDrain%2A&gt;</ph>方法會封鎖，直到管道另一端具有讀取傳送的所有位元組。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
          <source>The pipe is closed.</source>
          <target state="translated">管道已關閉。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
          <source>The pipe does not support write operations.</source>
          <target state="translated">管道不支援寫入作業。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已中斷，或發生另一個 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer that contains data to write to the pipe.</source>
          <target state="translated">緩衝區，其中包含要寫入管道的資料。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin copying bytes to the current stream.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 中以零為起始的位元組位移，將會從該處開始將位元組複製到目前的資料流。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to write to the current stream.</source>
          <target state="translated">要寫入目前資料流的位元組數目上限。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writes a block of bytes to the current stream using data from a buffer.</source>
          <target state="translated">使用緩衝區的資料，將位元組區塊寫入目前的資料流。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports write operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph>屬性來判斷是否目前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>物件支援寫入作業。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Calling the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Write%2A&gt;</ph> method blocks until <ph id="ph2">`count`</ph> bytes are read or the end of the stream is reached.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.Write%2A&gt;</ph>方法會封鎖，直到<ph id="ph2">`count`</ph>讀取的位元組或資料流結尾為止。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>For asynchronous read operations, see <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph>.</source>
          <target state="translated">針對非同步讀取操作，請參閱<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.BeginWrite%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream.EndWrite%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is greater than the number of bytes available in <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 大於 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> 中的可用位元組數目。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The pipe is closed.</source>
          <target state="translated">管道已關閉。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The pipe does not support write operations.</source>
          <target state="translated">管道不支援寫入作業。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已中斷，或發生另一個 I/O 錯誤。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
          <source>The byte to write to the stream.</source>
          <target state="translated">寫入資料流的位元組。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
          <source>Writes a byte to the current stream.</source>
          <target state="translated">將位元組寫入目前的資料流。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph> property to determine whether the current <ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> object supports write operations.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream.CanWrite%2A&gt;</ph>屬性來判斷是否目前<ph id="ph2">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph>物件支援寫入作業。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
          <source>The pipe is closed.</source>
          <target state="translated">管道已關閉。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
          <source>The pipe does not support write operations.</source>
          <target state="translated">管道不支援寫入作業。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
          <source>The pipe is disconnected, waiting to connect, or the handle has not been set.</source>
          <target state="translated">管道已中斷連接、正在等候連接，或尚未設定控制代碼。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
          <source>The pipe is broken or another I/O error occurred.</source>
          <target state="translated">管道已中斷，或發生另一個 I/O 錯誤。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>