<Type Name="ContextItemManager" FullName="System.Activities.Presentation.ContextItemManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d4c008e573670c163370fd256d7a1d503eeac114" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30359622" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ContextItemManager : System.Collections.Generic.IEnumerable&lt;System.Activities.Presentation.ContextItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ContextItemManager extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.Activities.Presentation.ContextItem&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.ContextItemManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ContextItemManager&#xA;Implements IEnumerable(Of ContextItem)" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContextItemManager abstract : System::Collections::Generic::IEnumerable&lt;System::Activities::Presentation::ContextItem ^&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Activities.Presentation.ContextItem&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>代表維持一組已發行到設計工具編輯內容中之內容項目的類別。 這個類別是抽象的。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.ContextItem> 中包含的每個 <xref:System.Activities.Presentation.ContextItemManager> 均代表 <xref:System.Activities.Presentation.WorkflowDesigner> 中的一段暫時性狀態。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ContextItemManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ContextItemManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Activities.Presentation.ContextItemManager" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public abstract bool Contains (Type itemType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Type itemType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.Contains(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Contains (itemType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Contains(Type ^ itemType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="itemType">要檢查之項目的型別。</param>
        <summary>在衍生類別中遭覆寫時，會傳回值以指出項目管理員是否包含指定型別的項目。</summary>
        <returns>
          如果內容包含指定的項目型別的執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="itemType" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TItemType&gt;">
      <MemberSignature Language="C#" Value="public bool Contains&lt;TItemType&gt; () where TItemType : System.Activities.Presentation.ContextItem;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains&lt;(class System.Activities.Presentation.ContextItem) TItemType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.Contains``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains(Of TItemType As ContextItem) () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TItemType&gt;&#xA; where TItemType : System::Activities::Presentation::ContextItem bool Contains();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItemType">
          <Constraints>
            <BaseTypeName>System.Activities.Presentation.ContextItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TItemType">要檢查之項目的型別。</typeparam>
        <summary>傳回值，這個值表示項目管理員是否包含指定型別的項目。</summary>
        <returns>
          如果內容包含指定的項目型別的執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個泛型方法會叫用抽象的 <xref:System.Activities.Presentation.ContextItemManager.Contains%2A> 方法，必須實作後者才能提供型別檢查功能。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerator&lt;System.Activities.Presentation.ContextItem&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Activities.Presentation.ContextItem&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEnumerator () As IEnumerator(Of ContextItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IEnumerator&lt;System::Activities::Presentation::ContextItem ^&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Activities.Presentation.ContextItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中遭覆寫時，會列舉編輯內容中的內容項目。 除非列舉達到隔離層，否則這個列舉會包含之前的各層。</summary>
        <returns>傳回 <see cref="T:System.Collections.Generic.IEnumerator`1" />，其中包含內容項目的列舉。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTarget">
      <MemberSignature Language="C#" Value="protected static object GetTarget (Delegate callback);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig object GetTarget(class System.Delegate callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.GetTarget(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetTarget (callback As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Object ^ GetTarget(Delegate ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="callback">所需目標的回呼。</param>
        <summary>代表傳回委派之目標物件的 Helper 方法。 如果建立委派的目的是要進行泛型委派設定 Proxy，則這個方法會傳回原始物件，而非 Proxy。</summary>
        <returns>傳回 <see cref="T:System.Object" />，其中包含回呼的目標物件。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public abstract System.Activities.Presentation.ContextItem GetValue (Type itemType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Activities.Presentation.ContextItem GetValue(class System.Type itemType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.GetValue(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetValue (itemType As Type) As ContextItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Activities::Presentation::ContextItem ^ GetValue(Type ^ itemType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Presentation.ContextItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="itemType">要傳回之項目的型別。</param>
        <summary>在衍生類別中遭覆寫時，會傳回要求之項目型別的執行個體。 如果沒有指定型別的內容項目，就會建立空的項目。</summary>
        <returns>傳回 <see cref="T:System.Activities.Presentation.ContextItem" />，其中包含所要求之型別的內容項目。 如果這個型別的內容中沒有任何項目，則會建立一個預設項目。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="itemType" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue&lt;TItemType&gt;">
      <MemberSignature Language="C#" Value="public TItemType GetValue&lt;TItemType&gt; () where TItemType : System.Activities.Presentation.ContextItem;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TItemType GetValue&lt;(class System.Activities.Presentation.ContextItem) TItemType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.GetValue``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue(Of TItemType As ContextItem) () As TItemType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TItemType&gt;&#xA; where TItemType : System::Activities::Presentation::ContextItem TItemType GetValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItemType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TItemType">
          <Constraints>
            <BaseTypeName>System.Activities.Presentation.ContextItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TItemType">要傳回之項目的型別。</typeparam>
        <summary>傳回要求之項目型別的執行個體。 如果沒有指定型別的內容項目，就會建立空的項目。</summary>
        <returns>傳回 <see cref="T:System.Activities.Presentation.ContextItem" />，其中包含所要求之型別的內容項目。 如果這個型別的內容中沒有任何項目，則會建立一個預設項目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個泛型方法會叫用抽象的 <xref:System.Activities.Presentation.ContextItemManager.GetValue%2A> 方法，必須實作後者才能提供取得型別功能。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyItemChanged">
      <MemberSignature Language="C#" Value="protected static void NotifyItemChanged (System.Activities.Presentation.EditingContext context, System.Activities.Presentation.ContextItem item, System.Activities.Presentation.ContextItem previousItem);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void NotifyItemChanged(class System.Activities.Presentation.EditingContext context, class System.Activities.Presentation.ContextItem item, class System.Activities.Presentation.ContextItem previousItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.NotifyItemChanged(System.Activities.Presentation.EditingContext,System.Activities.Presentation.ContextItem,System.Activities.Presentation.ContextItem)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub NotifyItemChanged (context As EditingContext, item As ContextItem, previousItem As ContextItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void NotifyItemChanged(System::Activities::Presentation::EditingContext ^ context, System::Activities::Presentation::ContextItem ^ item, System::Activities::Presentation::ContextItem ^ previousItem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.Presentation.EditingContext" />
        <Parameter Name="item" Type="System.Activities.Presentation.ContextItem" />
        <Parameter Name="previousItem" Type="System.Activities.Presentation.ContextItem" />
      </Parameters>
      <Docs>
        <param name="context">使用中的 <see cref="T:System.Activities.Presentation.EditingContext" />。</param>
        <param name="item">新的 <see cref="T:System.Activities.Presentation.ContextItem" />。</param>
        <param name="previousItem">上一個 <see cref="T:System.Activities.Presentation.ContextItem" />。</param>
        <summary>代表 Helper 方法，這個方法會叫用受保護的 <see cref="M:System.Activities.Presentation.ContextItem.OnItemChanged(System.Activities.Presentation.EditingContext,System.Activities.Presentation.ContextItem)" /> 方法。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="context" />
          <paramref name="item" /> 或 <paramref name="previousItem" /> 是 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCallback">
      <MemberSignature Language="C#" Value="protected static Delegate RemoveCallback (Delegate existing, Delegate toRemove);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Delegate RemoveCallback(class System.Delegate existing, class System.Delegate toRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.RemoveCallback(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RemoveCallback (existing As Delegate, toRemove As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static Delegate ^ RemoveCallback(Delegate ^ existing, Delegate ^ toRemove);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="existing" Type="System.Delegate" />
        <Parameter Name="toRemove" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="existing">現有的委派。</param>
        <param name="toRemove">要從 <c>existing</c> 中移除的委派。</param>
        <summary>代表 Helper 方法，這個方法會執行委派移除，也會取消包裝泛型回呼 Proxy 的委派。</summary>
        <returns>傳回 <see cref="T:System.Delegate" />，其中包含應指派給 <paramref name="existing" /> 的新委派。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 請在您的 <xref:System.Activities.Presentation.ContextItemManager.Unsubscribe%2A> 方法實作中使用這個方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public abstract void SetValue (System.Activities.Presentation.ContextItem value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(class System.Activities.Presentation.ContextItem value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.SetValue(System.Activities.Presentation.ContextItem)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetValue (value As ContextItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetValue(System::Activities::Presentation::ContextItem ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Activities.Presentation.ContextItem" />
      </Parameters>
      <Docs>
        <param name="value">要設定為 <see cref="T:System.Activities.Presentation.ContextItem" /> 的值。</param>
        <summary>在衍生類別中遭覆寫時，會將內容項目設定為指定的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 未通過`null`值。 若要將 <xref:System.Activities.Presentation.ContextItem> 設定為空值，請使用預設的建構函式建立項目的執行個體。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public abstract void Subscribe (Type contextItemType, System.Activities.Presentation.SubscribeContextCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Subscribe(class System.Type contextItemType, class System.Activities.Presentation.SubscribeContextCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.Subscribe(System.Type,System.Activities.Presentation.SubscribeContextCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Subscribe (contextItemType As Type, callback As SubscribeContextCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Subscribe(Type ^ contextItemType, System::Activities::Presentation::SubscribeContextCallback ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextItemType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeContextCallback" />
      </Parameters>
      <Docs>
        <param name="contextItemType">您要訂閱的項目型別。</param>
        <param name="callback">
          <c>contextItemType</c> 變更時叫用的 <see cref="T:System.Activities.Presentation.SubscribeContextCallback" />。</param>
        <summary>在衍生類別中遭覆寫時，會加入當指定之項目型別的內容項目變更時，所叫用的事件回呼。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="contextItemType" /> 或 <paramref name="callback" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Subscribe&lt;TContextItemType&gt;">
      <MemberSignature Language="C#" Value="public void Subscribe&lt;TContextItemType&gt; (System.Activities.Presentation.SubscribeContextCallback&lt;TContextItemType&gt; callback) where TContextItemType : System.Activities.Presentation.ContextItem;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Subscribe&lt;(class System.Activities.Presentation.ContextItem) TContextItemType&gt;(class System.Activities.Presentation.SubscribeContextCallback`1&lt;!!TContextItemType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.Subscribe``1(System.Activities.Presentation.SubscribeContextCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Subscribe(Of TContextItemType As ContextItem) (callback As SubscribeContextCallback(Of TContextItemType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContextItemType&gt;&#xA; where TContextItemType : System::Activities::Presentation::ContextItem void Subscribe(System::Activities::Presentation::SubscribeContextCallback&lt;TContextItemType&gt; ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContextItemType">
          <Constraints>
            <BaseTypeName>System.Activities.Presentation.ContextItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeContextCallback&lt;TContextItemType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContextItemType">您要訂閱的項目型別。</typeparam>
        <param name="callback">
          <c>contextItemType</c> 變更時叫用的 <see cref="T:System.Activities.Presentation.SubscribeContextCallback`1" />。</param>
        <summary>加入當指定之項目型別的內容項目變更時，所叫用的事件回呼。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="contextItemType" /> 或 <paramref name="callback" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>列舉編輯內容中的內容項目。</summary>
        <returns>傳回 <see cref="T:System.Collections.IEnumerator" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe">
      <MemberSignature Language="C#" Value="public abstract void Unsubscribe (Type contextItemType, System.Activities.Presentation.SubscribeContextCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unsubscribe(class System.Type contextItemType, class System.Activities.Presentation.SubscribeContextCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.Unsubscribe(System.Type,System.Activities.Presentation.SubscribeContextCallback)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Unsubscribe (contextItemType As Type, callback As SubscribeContextCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Unsubscribe(Type ^ contextItemType, System::Activities::Presentation::SubscribeContextCallback ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextItemType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeContextCallback" />
      </Parameters>
      <Docs>
        <param name="contextItemType">要從其中移除回呼之內容項目的型別。</param>
        <param name="callback">要移除的 <see cref="T:System.Activities.Presentation.SubscribeContextCallback" />。</param>
        <summary>在衍生類別中遭覆寫時，會移除訂閱。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe&lt;TContextItemType&gt;">
      <MemberSignature Language="C#" Value="public void Unsubscribe&lt;TContextItemType&gt; (System.Activities.Presentation.SubscribeContextCallback&lt;TContextItemType&gt; callback) where TContextItemType : System.Activities.Presentation.ContextItem;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unsubscribe&lt;(class System.Activities.Presentation.ContextItem) TContextItemType&gt;(class System.Activities.Presentation.SubscribeContextCallback`1&lt;!!TContextItemType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ContextItemManager.Unsubscribe``1(System.Activities.Presentation.SubscribeContextCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unsubscribe(Of TContextItemType As ContextItem) (callback As SubscribeContextCallback(Of TContextItemType))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContextItemType&gt;&#xA; where TContextItemType : System::Activities::Presentation::ContextItem void Unsubscribe(System::Activities::Presentation::SubscribeContextCallback&lt;TContextItemType&gt; ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContextItemType">
          <Constraints>
            <BaseTypeName>System.Activities.Presentation.ContextItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeContextCallback&lt;TContextItemType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContextItemType">要從其中移除回呼之內容項目的型別。</typeparam>
        <param name="callback">要移除的 <see cref="T:System.Activities.Presentation.SubscribeContextCallback`1" />。</param>
        <summary>移除訂閱。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>