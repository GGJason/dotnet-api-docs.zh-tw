<Type Name="WorkflowInstance" FullName="System.Workflow.Runtime.WorkflowInstance">
  <TypeSignature Language="C#" Value="public sealed class WorkflowInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInstance extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowInstance" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInstance" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInstance sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="197bd-101">代表工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-101">Represents a workflow instance.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <span data-ttu-id="197bd-102"><xref:System.Workflow.Runtime.WorkflowInstance> 類別會公開可用於控制工作流程執行個體之執行的方法和屬性，它基本上是工作流程執行階段引擎使用的實際工作流程執行個體的 Proxy。</span><span class="sxs-lookup"><span data-stu-id="197bd-102">The <xref:System.Workflow.Runtime.WorkflowInstance> class exposes methods and properties that can be used to control the execution of a workflow instance; it is essentially a proxy to the actual workflow instance used by the workflow runtime engine.</span></span> <span data-ttu-id="197bd-103">主機或服務可以呼叫包含在 <xref:System.Workflow.Runtime.WorkflowInstance> 類別中的適當方法，來指示工作流程執行階段引擎在工作流程執行個體上執行動作。</span><span class="sxs-lookup"><span data-stu-id="197bd-103">A host or a service can instruct the workflow runtime engine to perform actions on a workflow instance by calling the appropriate methods that are contained in the <xref:System.Workflow.Runtime.WorkflowInstance> class.</span></span>  <span data-ttu-id="197bd-104">如果要求的動作無效，例如，如果主機呼叫已完成的工作流程執行個體上的 <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>，則工作流程執行階段引擎會引發適當的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="197bd-104">If the requested action is not valid, for example, if the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> on a workflow instance that has already completed, the workflow runtime engine will raise an appropriate exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="197bd-105">如果工作流程執行個體因為主應用程式 (Host Application) 上的呼叫沒有傳回而變得沒有回應，復原執行個體的唯一方法就是重新啟動執行階段。</span><span class="sxs-lookup"><span data-stu-id="197bd-105">If a workflow instance becomes unresponsive because a call on the host application does not return, the only way to recover the instance is to restart the runtime.</span></span> <span data-ttu-id="197bd-106">不過，如果已強制卸載、中止或暫停執行個體，則透過呼叫 <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType> 方法可以繼續該執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-106">However, if the instance has been forcibly unloaded, aborted, or suspended, it can be continued by calling the <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-107">下列程式碼範例將示範如何在工作流程主機中建立和啟動 <xref:System.Workflow.Runtime.WorkflowInstance>。</span><span class="sxs-lookup"><span data-stu-id="197bd-107">The following code example demonstrates how you can create and start a <xref:System.Workflow.Runtime.WorkflowInstance> in a workflow host.</span></span> <span data-ttu-id="197bd-108">下列程式碼會建立 <xref:System.Workflow.Runtime.WorkflowRuntime> 的執行個體、加入服務至執行階段，然後示範建立 <xref:System.Workflow.Runtime.WorkflowInstance> 物件的建議方式。</span><span class="sxs-lookup"><span data-stu-id="197bd-108">The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span> <span data-ttu-id="197bd-109">程式碼藉由呼叫 <xref:System.Workflow.Runtime.WorkflowInstance> 方法和傳遞之前建立的類型給它來初始化 <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>。</span><span class="sxs-lookup"><span data-stu-id="197bd-109">The code initializes <xref:System.Workflow.Runtime.WorkflowInstance> by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it.</span></span> <span data-ttu-id="197bd-110"><xref:System.Workflow.Runtime.WorkflowInstance> 由 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> 方法呼叫啟動。</span><span class="sxs-lookup"><span data-stu-id="197bd-110">The <xref:System.Workflow.Runtime.WorkflowInstance> is started with the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method call.</span></span>  
  
 <span data-ttu-id="197bd-111">這個程式碼範例是 Program.cs 檔案中＜取消工作流程 SDK＞範例的一部分。</span><span class="sxs-lookup"><span data-stu-id="197bd-111">This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</span></span> <span data-ttu-id="197bd-112">如需詳細資訊，請參閱[取消工作流程](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)。</span><span class="sxs-lookup"><span data-stu-id="197bd-112">For more information, see [Canceling a Workflow](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).</span></span>  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="197bd-113">此型別具備執行緒安全。</span><span class="sxs-lookup"><span data-stu-id="197bd-113">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="197bd-114">中止工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-114">Aborts the workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-115">工作流程執行個體是以同步方式中止，也就是這個方法會在中止工作流程執行個體後返回。</span><span class="sxs-lookup"><span data-stu-id="197bd-115">The workflow instance is aborted in a synchronous manner; that is, the method returns after the workflow instance has been aborted.</span></span> <span data-ttu-id="197bd-116">工作流程執行階段引擎會使記憶體中的工作流程執行個體失效，並且清除 <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>。</span><span class="sxs-lookup"><span data-stu-id="197bd-116">The workflow runtime engine invalidates the workflow instance in memory and clears the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>.</span></span> <span data-ttu-id="197bd-117">如果您的工作流程執行個體使用持續性 (Persistence) 服務，自上次保存點開始執行的所有工作都會被丟棄。</span><span class="sxs-lookup"><span data-stu-id="197bd-117">If a persistence service was used by your workflow instance, all work performed since the last persistence point is thrown away.</span></span> <span data-ttu-id="197bd-118">中止工作流程執行個體後，工作流程執行階段引擎會引發 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> 事件。</span><span class="sxs-lookup"><span data-stu-id="197bd-118">After it aborts the workflow instance, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> event.</span></span> <span data-ttu-id="197bd-119">您可以呼叫 <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> 以重新載入工作流程執行個體，然後從它的上一個保存點啟動。</span><span class="sxs-lookup"><span data-stu-id="197bd-119">You can call <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> to reload the workflow instance and start from its last persistence point.</span></span>  
  
 <span data-ttu-id="197bd-120">`Abort` 與 <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> 不同，因為 `Abort` 僅清除記憶體內的工作流程執行個體，而且可以從上次保存點重新啟動，終止 (Terminate) 會清除記憶體內的工作流程執行個體，並通知持續性服務該執行個體已自記憶體中清除。</span><span class="sxs-lookup"><span data-stu-id="197bd-120">`Abort` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> in that while `Abort` simply clears the in-memory workflow instance and can be restarted from the last persistence point, Terminate clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory.</span></span> <span data-ttu-id="197bd-121">對 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> 而言，這表示發生終止時，所有該工作流程執行個體的狀態資訊都會從資料庫中刪除。</span><span class="sxs-lookup"><span data-stu-id="197bd-121">For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination.</span></span> <span data-ttu-id="197bd-122">您將無法從之前儲存的保存點重新載入工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-122">You will not be able to reload the workflow instance from a previously stored persistence point.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-123">下列程式碼範例將示範呼叫 Workflow1 類型之工作流程執行個體上的 Abort。</span><span class="sxs-lookup"><span data-stu-id="197bd-123">The following example demonstrates calling Abort on a workflow instance of type Workflow1.</span></span>  
  
 [!code-csharp[WF_Samples#13](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#13)]
 [!code-vb[WF_Samples#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="197bd-124">工作流程執行階段引擎不在執行中。</span><span class="sxs-lookup"><span data-stu-id="197bd-124">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyWorkflowChanges">
      <MemberSignature Language="C#" Value="public void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyWorkflowChanges(class System.Workflow.ComponentModel.WorkflowChanges workflowChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyWorkflowChanges(System::Workflow::ComponentModel::WorkflowChanges ^ workflowChanges);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowChanges" Type="System.Workflow.ComponentModel.WorkflowChanges" />
      </Parameters>
      <Docs>
        <param name="workflowChanges"><span data-ttu-id="197bd-125">指定工作流程執行個體之動態更新的 <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" />。</span><span class="sxs-lookup"><span data-stu-id="197bd-125">A <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> specifying dynamic updates for the workflow instance.</span></span></param>
        <summary><span data-ttu-id="197bd-126">將變更套用到 <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> 物件指定的工作流程執行個體中。</span><span class="sxs-lookup"><span data-stu-id="197bd-126">Applies changes to the workflow instance specified by the <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-127">如果工作流程執行個體尚未暫止，在套用變更之前，工作流程執行階段引擎會暫時停止執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-127">If the workflow instance is not already suspended, the workflow runtime engine temporarily suspends the instance before applying the changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-128">下列範例將示範如何呼叫 <xref:System.Workflow.Runtime.WorkflowInstance> 物件的 ApplyWorkflowChanges。</span><span class="sxs-lookup"><span data-stu-id="197bd-128">The following example demonstrates calling ApplyWorkflowChanges to a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  <span data-ttu-id="197bd-129">這個範例是 Mainform.cs 的檔案中＜訂購狀態機器 SDK＞範例的一部分。</span><span class="sxs-lookup"><span data-stu-id="197bd-129">This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.</span></span>  <span data-ttu-id="197bd-130">如需詳細資訊，請參閱[訂購狀態機器範例](http://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c)。</span><span class="sxs-lookup"><span data-stu-id="197bd-130">For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c).</span></span>  
  
 [!code-csharp[WF_Samples#89](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#89)]
 [!code-vb[WF_Samples#89](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="197bd-131">工作流程執行階段引擎不在執行中。</span><span class="sxs-lookup"><span data-stu-id="197bd-131">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnqueueItem">
      <MemberSignature Language="C#" Value="public void EnqueueItem (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnqueueItem(class System.IComparable queueName, object item, class System.Workflow.Runtime.IPendingWork pendingWork, object workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnqueueItem (queueName As IComparable, item As Object, pendingWork As IPendingWork, workItem As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnqueueItem(IComparable ^ queueName, System::Object ^ item, System::Workflow::Runtime::IPendingWork ^ pendingWork, System::Object ^ workItem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="pendingWork" Type="System.Workflow.Runtime.IPendingWork" />
        <Parameter Name="workItem" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="queueName"><span data-ttu-id="197bd-132"><see cref="T:System.Workflow.Runtime.WorkflowQueue" /> 的名稱。</span><span class="sxs-lookup"><span data-stu-id="197bd-132">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</span></span></param>
        <param name="item"><span data-ttu-id="197bd-133">要加入佇列的物件。</span><span class="sxs-lookup"><span data-stu-id="197bd-133">The object to enqueue.</span></span></param>
        <param name="pendingWork"><span data-ttu-id="197bd-134"><see cref="T:System.Workflow.Runtime.IPendingWork" />，可讓寄件者在傳遞 <c>item</c> 時收到通知。</span><span class="sxs-lookup"><span data-stu-id="197bd-134">An <see cref="T:System.Workflow.Runtime.IPendingWork" /> that allows the sender to be notified when <c>item</c> is delivered.</span></span></param>
        <param name="workItem"><span data-ttu-id="197bd-135">要傳遞給 <see cref="T:System.Workflow.Runtime.IPendingWork" /> 方法的物件。</span><span class="sxs-lookup"><span data-stu-id="197bd-135">An object to be passed to the <see cref="T:System.Workflow.Runtime.IPendingWork" /> methods.</span></span></param>
        <summary><span data-ttu-id="197bd-136">同步公佈訊息至指定的工作流程佇列。</span><span class="sxs-lookup"><span data-stu-id="197bd-136">Posts a message to the specified workflow queue synchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-137">將 `item` 傳送至指定的 <xref:System.Workflow.Runtime.WorkflowQueue>。</span><span class="sxs-lookup"><span data-stu-id="197bd-137">Sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>.</span></span> <span data-ttu-id="197bd-138">如果想要在傳遞訊息時得到通知，您可以在您的服務中實作 <xref:System.Workflow.Runtime.IPendingWork>，並且傳遞 `workItem` 和 <xref:System.Workflow.Runtime.IPendingWork> 物件至 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="197bd-138">If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>.</span></span> <span data-ttu-id="197bd-139">如果不想要這類通知，您可以傳遞 `Nothing` 和 `pendingWork` 的 null 參考 (在 Visual Basic 中為 `workItem`)。</span><span class="sxs-lookup"><span data-stu-id="197bd-139">If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`.</span></span>  
  
 <span data-ttu-id="197bd-140">使用此方法搭配狀態機器工作流程時，您可能會取得帶有「未啟用佇列 '{0}'」訊息的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="197bd-140">When using this method with a state machine workflow, you might get an exception with the message "Queue '{0}' is not enabled."</span></span> <span data-ttu-id="197bd-141">這種情況發生在狀態機器的目前狀態不知道如何處理特定事件時。</span><span class="sxs-lookup"><span data-stu-id="197bd-141">This happens when the current state of the state machine does not know how to handle a specific event.</span></span> <span data-ttu-id="197bd-142">例如，當目前狀態以外的某種狀態包含 <xref:System.Workflow.Activities.EventDrivenActivity>，而且其中包含由佇列 '{0}' 所代表的 <xref:System.Workflow.Activities.HandleExternalEventActivity> 時。</span><span class="sxs-lookup"><span data-stu-id="197bd-142">For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="197bd-143">工作流程執行個體接收訊息的順序，不一定會與訊息的傳送順序相同。</span><span class="sxs-lookup"><span data-stu-id="197bd-143">Messages are not guaranteed to be received by the workflow instance in the order that they were sent.</span></span> <span data-ttu-id="197bd-144">例如，如果在現有佇列 (佇列 A) 中接收訊息導致工作流程建立另一個佇列 (佇列 B)，後者接著接聽在第一個訊息後傳送的另一個訊息，第二個訊息可能會先到達，而且因為它的佇列尚未建立而無法被接收。</span><span class="sxs-lookup"><span data-stu-id="197bd-144">For example, if receiving a message in an existing queue (Queue A) causes a workflow to create another queue (Queue B), which then listens for another message sent after the first message, it is possible that the second message will arrive first, and will not be received due to its queue not being created yet.</span></span> <span data-ttu-id="197bd-145">若要避免這個問題，應該先確認 (使用 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>) 第二個佇列存在後，再傳送第二個訊息。</span><span class="sxs-lookup"><span data-stu-id="197bd-145">To prevent this issue, the second message should not be sent until the presence of the second queue is verified (using <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-146">下列程式碼範例將示範如何使用 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="197bd-146">The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>.</span></span> <span data-ttu-id="197bd-147">當 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> 事件發生時，會呼叫此範例中定義的 `OnWorkflowIdled` 方法。</span><span class="sxs-lookup"><span data-stu-id="197bd-147">When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called.</span></span> <span data-ttu-id="197bd-148">它會使用 <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> 屬性判斷閒置的工作流程，然後呼叫 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> 方法取得工作流程執行個體之佇列項目的集合。</span><span class="sxs-lookup"><span data-stu-id="197bd-148">It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method.</span></span> <span data-ttu-id="197bd-149">此程式碼會在集合上反覆查看，以判斷是哪個活動正在等候閒置工作流程的事件。</span><span class="sxs-lookup"><span data-stu-id="197bd-149">The code iterates over the collection to determine which activity is waiting for the event that idled the workflow.</span></span> <span data-ttu-id="197bd-150">然後，它會使用 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> 方法以及事件佇列項目的名稱，將例外狀況傳送到工作流程佇列中。</span><span class="sxs-lookup"><span data-stu-id="197bd-150">It then sends an exception to the workflow queue using the <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> method along with the name of the event queue item.</span></span>  
  
 <span data-ttu-id="197bd-151">這個程式碼範例是 Program.cs 檔案中＜取消工作流程 SDK＞範例的一部分。</span><span class="sxs-lookup"><span data-stu-id="197bd-151">This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</span></span> <span data-ttu-id="197bd-152">如需詳細資訊，請參閱[取消工作流程](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)。</span><span class="sxs-lookup"><span data-stu-id="197bd-152">For more information, see [Canceling a Workflow](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).</span></span>  
  
 [!code-csharp[WF_Samples#261](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#261)]
 [!code-vb[WF_Samples#261](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#261)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="197bd-153"><paramref name="queueName" /> 為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="197bd-153"><paramref name="queueName" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="197bd-154">工作流程執行階段引擎不在執行中。</span><span class="sxs-lookup"><span data-stu-id="197bd-154">The workflow runtime engine is not running.</span></span>  
  
 <span data-ttu-id="197bd-155">-或-</span><span class="sxs-lookup"><span data-stu-id="197bd-155">-or-</span></span>  
  
 <span data-ttu-id="197bd-156">由 <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> 指定的 <paramref name="queueName" /> 並不存在。</span><span class="sxs-lookup"><span data-stu-id="197bd-156">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> does not exist.</span></span>  
  
 <span data-ttu-id="197bd-157">-或-</span><span class="sxs-lookup"><span data-stu-id="197bd-157">-or-</span></span>  
  
 <span data-ttu-id="197bd-158"><see cref="T:System.Workflow.Runtime.WorkflowQueue" /> 指定的 <paramref name="queueName" /> 未啟用。</span><span class="sxs-lookup"><span data-stu-id="197bd-158">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> is not enabled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnqueueItemOnIdle">
      <MemberSignature Language="C#" Value="public void EnqueueItemOnIdle (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnqueueItemOnIdle(class System.IComparable queueName, object item, class System.Workflow.Runtime.IPendingWork pendingWork, object workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnqueueItemOnIdle (queueName As IComparable, item As Object, pendingWork As IPendingWork, workItem As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnqueueItemOnIdle(IComparable ^ queueName, System::Object ^ item, System::Workflow::Runtime::IPendingWork ^ pendingWork, System::Object ^ workItem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="pendingWork" Type="System.Workflow.Runtime.IPendingWork" />
        <Parameter Name="workItem" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="queueName"><span data-ttu-id="197bd-159"><see cref="T:System.Workflow.Runtime.WorkflowQueue" /> 的名稱。</span><span class="sxs-lookup"><span data-stu-id="197bd-159">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</span></span></param>
        <param name="item"><span data-ttu-id="197bd-160">要加入佇列的物件。</span><span class="sxs-lookup"><span data-stu-id="197bd-160">The object to enqueue.</span></span></param>
        <param name="pendingWork"><span data-ttu-id="197bd-161"><see cref="T:System.Workflow.Runtime.IPendingWork" />，可讓寄件者在傳遞 <c>item</c> 時收到通知。</span><span class="sxs-lookup"><span data-stu-id="197bd-161">An <see cref="T:System.Workflow.Runtime.IPendingWork" /> that allows the sender to be notified when <c>item</c> is delivered.</span></span></param>
        <param name="workItem"><span data-ttu-id="197bd-162">要傳遞給 <see cref="T:System.Workflow.Runtime.IPendingWork" /> 方法的物件。</span><span class="sxs-lookup"><span data-stu-id="197bd-162">An object to be passed to the <see cref="T:System.Workflow.Runtime.IPendingWork" /> methods.</span></span></param>
        <summary><span data-ttu-id="197bd-163">工作流程閒置時，將訊息張貼至指定的工作流程佇列。</span><span class="sxs-lookup"><span data-stu-id="197bd-163">Posts a message to the specified workflow queue when the workflow is idle.</span></span> <span data-ttu-id="197bd-164"><see cref="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" /> 會等到工作流程到達閒置點，並在確認工作流程排程器閒置後 (也就是沒有任何正在執行的作用中操作時) 加入佇列中。</span><span class="sxs-lookup"><span data-stu-id="197bd-164"><see cref="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" /> waits until the workflow reaches an idle point and enqueues after verifying that the workflow scheduler is idle (that is, no active operation is being executed).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-165">等待工作流程執行個體變成閒置，然後將 `item` 傳送到指定的 <xref:System.Workflow.Runtime.WorkflowQueue>。</span><span class="sxs-lookup"><span data-stu-id="197bd-165">Waits for the workflow instance to become idle and then sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>.</span></span> <span data-ttu-id="197bd-166">如果您在工作流程執行個體暫止時呼叫 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A>，工作流程執行階段引擎將擲回 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="197bd-166">If you call <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A> while the workflow instance is suspended, the workflow runtime engine will throw an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="197bd-167">如果想要在傳遞訊息時得到通知，您可以在您的服務中實作 <xref:System.Workflow.Runtime.IPendingWork>，並且傳遞 `workItem` 和 <xref:System.Workflow.Runtime.IPendingWork> 物件至 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="197bd-167">If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>.</span></span> <span data-ttu-id="197bd-168">如果不想要這類通知，您可以傳遞 `Nothing` 和 `pendingWork` 的 null 參考 (在 Visual Basic 中為 `workItem`)。</span><span class="sxs-lookup"><span data-stu-id="197bd-168">If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`.</span></span>  
  
 <span data-ttu-id="197bd-169">使用此方法搭配狀態機器工作流程時，您可能會取得帶有「未啟用佇列 '{0}'」訊息的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="197bd-169">When you are using this method with a state machine workflow, you might get an exception that contains the message "Queue '{0}' is not enabled."</span></span> <span data-ttu-id="197bd-170">這種情況發生在狀態機器的目前狀態不知道如何處理特定事件時。</span><span class="sxs-lookup"><span data-stu-id="197bd-170">This occurs when the current state of the state machine does not know how to handle a specific event.</span></span> <span data-ttu-id="197bd-171">例如，當目前狀態以外的某種狀態包含 <xref:System.Workflow.Activities.EventDrivenActivity>，而且其中包含由佇列 '{0}' 所代表的 <xref:System.Workflow.Activities.HandleExternalEventActivity> 時。</span><span class="sxs-lookup"><span data-stu-id="197bd-171">For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-172">下列程式碼範例將示範使用 `EnqueueItemOnIdle` 方法，將資訊傳送到工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-172">The following example demonstrates sending information to a workflow instance using the `EnqueueItemOnIdle` method.</span></span> <span data-ttu-id="197bd-173">首先會建立並啟動 WorkflowInstance 物件，接下來則會建立實作 <xref:System.Workflow.Runtime.IPendingWork> 介面的物件。</span><span class="sxs-lookup"><span data-stu-id="197bd-173">First, a WorkflowInstance object is created and started; next, an object that implements the <xref:System.Workflow.Runtime.IPendingWork> interface is created.</span></span> <span data-ttu-id="197bd-174">`EnqueueItemOnIdle` 然後，呼叫傳入佇列名稱、 加入佇列項目和工作項目，要傳遞給 pendingWork 物件之方法的字串值。</span><span class="sxs-lookup"><span data-stu-id="197bd-174">`EnqueueItemOnIdle` is then called, passing in string values for the queue name, the enqueued item, and the work item to be passed to the methods of the pendingWork object.</span></span>  
  
 [!code-csharp[WF_Samples#12](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#12)]
 [!code-vb[WF_Samples#12](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="197bd-175"><paramref name="queueName" /> 為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</span><span class="sxs-lookup"><span data-stu-id="197bd-175"><paramref name="queueName" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="197bd-176">工作流程執行階段引擎不在執行中。</span><span class="sxs-lookup"><span data-stu-id="197bd-176">The workflow runtime engine is not running.</span></span>  
  
 <span data-ttu-id="197bd-177">-或-</span><span class="sxs-lookup"><span data-stu-id="197bd-177">-or-</span></span>  
  
 <span data-ttu-id="197bd-178">工作流程執行個體已暫停。</span><span class="sxs-lookup"><span data-stu-id="197bd-178">The workflow instance is suspended.</span></span>  
  
 <span data-ttu-id="197bd-179">-或-</span><span class="sxs-lookup"><span data-stu-id="197bd-179">-or-</span></span>  
  
 <span data-ttu-id="197bd-180">由 <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> 指定的 <paramref name="queueName" /> 並不存在。</span><span class="sxs-lookup"><span data-stu-id="197bd-180">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> does not exist.</span></span>  
  
 <span data-ttu-id="197bd-181">-或-</span><span class="sxs-lookup"><span data-stu-id="197bd-181">-or-</span></span>  
  
 <span data-ttu-id="197bd-182"><see cref="T:System.Workflow.Runtime.WorkflowQueue" /> 指定的 <paramref name="queueName" /> 未啟用。</span><span class="sxs-lookup"><span data-stu-id="197bd-182">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> is not enabled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="197bd-183">要比較的物件。</span><span class="sxs-lookup"><span data-stu-id="197bd-183">The object to compare.</span></span></param>
        <summary><span data-ttu-id="197bd-184">傳回指出指定的物件是否和 <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> 相等的值。</span><span class="sxs-lookup"><span data-stu-id="197bd-184">Returns a value that indicates whether the specified object is equal to the <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</span></span></summary>
        <returns>
          <span data-ttu-id="197bd-185">如果指定的物件和這個 <see langword="true" /> 相等，則為 <see cref="T:System.Workflow.Runtime.WorkflowInstance" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="197bd-185"><see langword="true" /> if the specified object is equal to this <see cref="T:System.Workflow.Runtime.WorkflowInstance" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-186">物件必須是 <xref:System.Workflow.Runtime.WorkflowInstance> 類別的執行個體，而且擁有和此 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 相同的 <xref:System.Workflow.Runtime.WorkflowInstance>。</span><span class="sxs-lookup"><span data-stu-id="197bd-186">The object must be an instance of the <xref:System.Workflow.Runtime.WorkflowInstance> class and have the same <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> as this <xref:System.Workflow.Runtime.WorkflowInstance>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="197bd-187">傳回這個工作流程執行個體的雜湊程式碼。</span><span class="sxs-lookup"><span data-stu-id="197bd-187">Returns the hash code for this workflow instance.</span></span></summary>
        <returns><span data-ttu-id="197bd-188">這個 <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> 的雜湊碼。</span><span class="sxs-lookup"><span data-stu-id="197bd-188">The hash code for this <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-189"><xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A><xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>會傳回以  的值為基礎的雜湊程式碼。</span><span class="sxs-lookup"><span data-stu-id="197bd-189"><xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A> returns a hash code based on the value of <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowDefinition">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Activity GetWorkflowDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.ComponentModel.Activity GetWorkflowDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowDefinition () As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::ComponentModel::Activity ^ GetWorkflowDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="197bd-190">擷取此工作流程執行個體的根活動。</span><span class="sxs-lookup"><span data-stu-id="197bd-190">Retrieves the root activity for this workflow instance.</span></span></summary>
        <returns><span data-ttu-id="197bd-191"><see cref="T:System.Workflow.ComponentModel.Activity" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="197bd-191">An <see cref="T:System.Workflow.ComponentModel.Activity" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-192">您可以使用根活動巡覽工作流程的活動階層。</span><span class="sxs-lookup"><span data-stu-id="197bd-192">You can use the root activity to navigate the activity hierarchy of the workflow.</span></span>  
  
 <span data-ttu-id="197bd-193">這個方法不具備執行緒安全，因此主機應該同步其對此方法的呼叫。</span><span class="sxs-lookup"><span data-stu-id="197bd-193">This method is not thread safe, so the host should synchronize its calls to this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-194">下列程式碼範例將示範如何從工作流程執行個體中擷取工作流程定義。</span><span class="sxs-lookup"><span data-stu-id="197bd-194">The following example demonstrates retrieving the workflow definition from a workflow instance.</span></span>  <span data-ttu-id="197bd-195">這個範例是 Mainform.cs 的檔案中＜訂購狀態機器 SDK＞範例的一部分。</span><span class="sxs-lookup"><span data-stu-id="197bd-195">This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.</span></span>  <span data-ttu-id="197bd-196">如需詳細資訊，請參閱[訂購狀態機器範例](http://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c)。</span><span class="sxs-lookup"><span data-stu-id="197bd-196">For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c).</span></span>  
  
 [!code-csharp[WF_Samples#86](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#86)]
 [!code-vb[WF_Samples#86](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#86)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowNextTimerExpiration">
      <MemberSignature Language="C#" Value="public DateTime GetWorkflowNextTimerExpiration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetWorkflowNextTimerExpiration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowNextTimerExpiration () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime GetWorkflowNextTimerExpiration();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="197bd-197">傳回計時器訊息將會傳遞至此 <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> 的下一個時間點。</span><span class="sxs-lookup"><span data-stu-id="197bd-197">Returns the next point in time that this <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> is scheduled to be delivered a timer message.</span></span></summary>
        <returns><span data-ttu-id="197bd-198">DateTime 值，表示在下一個 <see cref="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt" /> 時間，將傳遞計時器訊息至此 <see cref="T:System.Workflow.Runtime.WorkflowInstance" />。</span><span class="sxs-lookup"><span data-stu-id="197bd-198">A DateTime value that represents the next <see cref="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt" /> time this <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> will be delivered a timer message.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="197bd-199">下列範例示範使用 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration%2A> 方法，判斷是否有更多工作流程計時器訊息加入佇列中。</span><span class="sxs-lookup"><span data-stu-id="197bd-199">The following example demonstrates using the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration%2A> method to determine if more workflow timer messages are enqueued.</span></span> <span data-ttu-id="197bd-200">這個範例是 Program.cs 檔案中＜工作流程執行緒 SDK＞範例的一部分。</span><span class="sxs-lookup"><span data-stu-id="197bd-200">This example is from the WorkflowThreading SDK sample, from the Program.cs file.</span></span> <span data-ttu-id="197bd-201">如需詳細資訊，請參閱[工作流程執行緒範例](http://msdn.microsoft.com/library/5b650be7-09fa-47db-a2f6-523dc8ea5ee9)。</span><span class="sxs-lookup"><span data-stu-id="197bd-201">For more information, see [Workflow Threading Sample](http://msdn.microsoft.com/library/5b650be7-09fa-47db-a2f6-523dc8ea5ee9).</span></span>  
  
 [!code-csharp[WF_Samples#284](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#284)]
 [!code-vb[WF_Samples#284](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#284)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Workflow.Runtime.TimerEventSubscription" />
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowQueueData">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt; GetWorkflowQueueData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowQueueInfo&gt; GetWorkflowQueueData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowQueueData () As ReadOnlyCollection(Of WorkflowQueueInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::Runtime::WorkflowQueueInfo ^&gt; ^ GetWorkflowQueueData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="197bd-202">取得 <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> 物件的集合，其中包含此工作流程執行個體關聯的工作流程佇列之暫止項目 (Pending Item) 與訂閱的活動。</span><span class="sxs-lookup"><span data-stu-id="197bd-202">Gets a collection of <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> objects that contains the pending items and subscribed activities for the workflow queues associated with this workflow instance.</span></span></summary>
        <returns><span data-ttu-id="197bd-203"><see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" />。</span><span class="sxs-lookup"><span data-stu-id="197bd-203">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> objects.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-204"><xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> 會傳回 <xref:System.Workflow.Runtime.WorkflowQueueInfo> 物件的集合，每一個物件都包含與此工作流程執行個體關聯的其中一個工作流程佇列狀態的資訊。</span><span class="sxs-lookup"><span data-stu-id="197bd-204"><xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> returns a collection of <xref:System.Workflow.Runtime.WorkflowQueueInfo> objects, each of which contains information about the state of one of the workflow queues associated with this workflow instance.</span></span> <span data-ttu-id="197bd-205"><xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=nameWithType> 包含 <xref:System.Workflow.Runtime.WorkflowQueue> 的暫止項目，而 <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=nameWithType> 則包含在 <xref:System.Workflow.Runtime.WorkflowQueue> 上傳遞項目的訂閱活動清單。</span><span class="sxs-lookup"><span data-stu-id="197bd-205"><xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=nameWithType> contains the pending items for a <xref:System.Workflow.Runtime.WorkflowQueue> and <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=nameWithType> contains a list of the activities that are subscribed for item delivery on a <xref:System.Workflow.Runtime.WorkflowQueue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-206">下列程式碼範例將示範如何使用 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> 方法，以取得與 <xref:System.Workflow.Runtime.WorkflowInstance> 物件關聯的所有工作流程佇列的狀態資訊。</span><span class="sxs-lookup"><span data-stu-id="197bd-206">The following code example demonstrates how you can use the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method to obtain information about the state of all workflow queues associated with a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span> <span data-ttu-id="197bd-207">當 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> 事件發生時，會呼叫此範例中定義的 `OnWorkflowIdled` 方法。</span><span class="sxs-lookup"><span data-stu-id="197bd-207">When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called.</span></span> <span data-ttu-id="197bd-208">它會使用 <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> 屬性判斷閒置的工作流程，然後呼叫 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> 方法取得工作流程執行個體之佇列項目的集合。</span><span class="sxs-lookup"><span data-stu-id="197bd-208">It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method.</span></span> <span data-ttu-id="197bd-209">此程式碼會在集合上反覆查看，以判斷是哪個活動正在等候閒置工作流程的事件。</span><span class="sxs-lookup"><span data-stu-id="197bd-209">The code iterates over the collection to determine which activity is waiting for the event that idled the workflow.</span></span> <span data-ttu-id="197bd-210">然後，它會使用 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> 方法以及事件佇列項目的名稱，將例外狀況傳送到工作流程佇列中。</span><span class="sxs-lookup"><span data-stu-id="197bd-210">It then sends an exception to the workflow queue using the <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> method along with the name of the event queue item.</span></span>  
  
 <span data-ttu-id="197bd-211">這個程式碼範例是 Program.cs 檔案中＜取消工作流程 SDK＞範例的一部分。</span><span class="sxs-lookup"><span data-stu-id="197bd-211">This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</span></span> <span data-ttu-id="197bd-212">如需詳細資訊，請參閱[取消工作流程](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)。</span><span class="sxs-lookup"><span data-stu-id="197bd-212">For more information, see [Canceling a Workflow](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).</span></span>  
  
 [!code-csharp[WF_Samples#261](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#261)]
 [!code-vb[WF_Samples#261](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#261)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="197bd-213">工作流程執行階段引擎不在執行中。</span><span class="sxs-lookup"><span data-stu-id="197bd-213">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public Guid InstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowInstance.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceId As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid InstanceId { Guid get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="197bd-214">取得工作流程執行個體的唯一識別碼。</span><span class="sxs-lookup"><span data-stu-id="197bd-214">Gets the unique identifier for the workflow instance.</span></span></summary>
        <value><span data-ttu-id="197bd-215">工作流程執行個體的 <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="197bd-215">The <see cref="T:System.Guid" /> of the workflow instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-216">您可以使用 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 參考工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-216">You can use <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> to reference the workflow instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-217">下列程式碼範例將示範如何使用 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 屬性取得關於 <xref:System.Workflow.Runtime.WorkflowInstance> 物件的資訊。</span><span class="sxs-lookup"><span data-stu-id="197bd-217">The following code example demonstrates how you can use the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property to obtain information about a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span> <span data-ttu-id="197bd-218">第一個程式碼片段會建立名為 <xref:System.Workflow.Runtime.WorkflowInstance> 的 `instanceId` 變數。</span><span class="sxs-lookup"><span data-stu-id="197bd-218">The first code snippet creates a <xref:System.Workflow.Runtime.WorkflowInstance> variable named `instanceId`.</span></span>  
  
 [!code-csharp[WF_Samples#210](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#210)]
 [!code-vb[WF_Samples#210](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#210)]  
  
 <span data-ttu-id="197bd-219">第二個片段使用 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 屬性做為呼叫 `OrderEventArgs` 方法時，在 `CallBackForApproval` 建構函式 (Constructor) 呼叫中的第一個物件。</span><span class="sxs-lookup"><span data-stu-id="197bd-219">The second snippet uses the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property as the first object in an `OrderEventArgs` constructor call when the `CallBackForApproval` method is called.</span></span>  
  
 <span data-ttu-id="197bd-220">這個程式碼範例是 OrderServiceImple.cs 檔案中＜接聽 SDK＞範例的一部分。</span><span class="sxs-lookup"><span data-stu-id="197bd-220">This code example is part of the Listen SDK Sample from the OrderServiceImple.cs file.</span></span> <span data-ttu-id="197bd-221">如需詳細資訊，請參閱[接聽範例](http://msdn.microsoft.com/library/1cec0e82-7544-429f-b717-0fc25eb42b7f)。</span><span class="sxs-lookup"><span data-stu-id="197bd-221">For more information, see [Listen Sample](http://msdn.microsoft.com/library/1cec0e82-7544-429f-b717-0fc25eb42b7f).</span></span>  
  
 [!code-csharp[WF_Samples#211](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#211)]
 [!code-vb[WF_Samples#211](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#211)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Load" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="197bd-222">載入之前卸載的工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-222">Loads a previously unloaded workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-223"><xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> 是同步的，如果可以載入工作流程執行個體，<xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> 將在工作流程執行個體載入記憶體並由工作流程執行階段引擎排程後傳回。</span><span class="sxs-lookup"><span data-stu-id="197bd-223"><xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> is synchronous; if the workflow instance can be loaded, <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> will return after the workflow instance has been loaded into memory and scheduled by the workflow runtime engine.</span></span> <span data-ttu-id="197bd-224">執行階段會在持續性服務還原記憶體中的工作流程執行個體後，但是在工作流程執行階段引擎排程執行個體之前引發 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> 事件。</span><span class="sxs-lookup"><span data-stu-id="197bd-224">The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> event after the persistence service has restored the workflow instance in memory, but before the workflow runtime engine schedules the instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-225">下列程式碼範例將示範如何載入之前卸載的 <xref:System.Workflow.Runtime.WorkflowInstance>物件。</span><span class="sxs-lookup"><span data-stu-id="197bd-225">The following example demonstrates how to load a previously unloaded <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#10](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#10)]
 [!code-vb[WF_Samples#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="197bd-226">工作流程執行階段引擎不在執行中。</span><span class="sxs-lookup"><span data-stu-id="197bd-226">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReloadTrackingProfiles">
      <MemberSignature Language="C#" Value="public void ReloadTrackingProfiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReloadTrackingProfiles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReloadTrackingProfiles ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReloadTrackingProfiles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="197bd-227">重新載入此工作流程執行個體的追蹤設定檔。</span><span class="sxs-lookup"><span data-stu-id="197bd-227">Reload the tracking profiles for this workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-228">執行階段追蹤基礎結構將為這個與其追蹤通道關聯的工作流程執行個體，重新載入每個 <xref:System.Workflow.Runtime.Tracking.TrackingProfile>。</span><span class="sxs-lookup"><span data-stu-id="197bd-228">The runtime tracking infrastructure will reload each <xref:System.Workflow.Runtime.Tracking.TrackingProfile> for this workflow instance associated with its tracking channels.</span></span> <span data-ttu-id="197bd-229">如果尚未在暫止狀態中，工作流程會在追蹤設定檔重新載入時由執行階段追蹤基礎結構暫時停止。</span><span class="sxs-lookup"><span data-stu-id="197bd-229">If it is not already in a suspended state, the workflow is temporarily suspended by the runtime tracking infrastructure while the tracking profiles are reloaded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="197bd-230">工作流程執行階段引擎不在執行中。</span><span class="sxs-lookup"><span data-stu-id="197bd-230">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="197bd-231">繼續執行之前暫止的工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-231">Resumes execution of a previously suspended workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-232">主機可以呼叫 <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A> 以繼續執行之前暫止的工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-232">The host can call <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A> to resume execution of a workflow instance that has been previously suspended.</span></span> <span data-ttu-id="197bd-233">如果工作流程執行個體不在暫停狀態中，則不採取任何行動。</span><span class="sxs-lookup"><span data-stu-id="197bd-233">If the workflow instance is not in the suspended state, no action is taken.</span></span> <span data-ttu-id="197bd-234">執行階段會在正要繼續執行工作流程執行個體之前引發 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> 事件。</span><span class="sxs-lookup"><span data-stu-id="197bd-234">The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> event just before execution of the workflow instance is resumed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-235">下列程式碼範例將示範如何呼叫之前暫止的工作流程執行個體上的 Resume。</span><span class="sxs-lookup"><span data-stu-id="197bd-235">The following example demonstrates calling Resume on a previously suspended workflow instance.</span></span>  <span data-ttu-id="197bd-236">這個範例來自＜暫止與結束 SDK＞範例。</span><span class="sxs-lookup"><span data-stu-id="197bd-236">This example is from the Suspend and Terminate SDK sample.</span></span>  <span data-ttu-id="197bd-237">如需詳細資訊，請參閱[暫止與終止範例](http://msdn.microsoft.com/library/f4dffa58-d01e-44fb-b5a1-3b283d2c4517)。</span><span class="sxs-lookup"><span data-stu-id="197bd-237">For more information, see [Suspend and Terminate Sample](http://msdn.microsoft.com/library/f4dffa58-d01e-44fb-b5a1-3b283d2c4517).</span></span>  
  
 [!code-csharp[WF_Samples#172](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#172)]
 [!code-vb[WF_Samples#172](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#172)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="197bd-238">工作流程執行階段引擎不在執行中。</span><span class="sxs-lookup"><span data-stu-id="197bd-238">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="197bd-239">開始執行工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-239">Starts the execution of the workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-240"><xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> 會呼叫此工作流程執行個體根活動上的 <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A>。</span><span class="sxs-lookup"><span data-stu-id="197bd-240"><xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> calls <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> on the root activity of this workflow instance.</span></span> <span data-ttu-id="197bd-241">如果 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> 遇到例外狀況，它會呼叫 <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> 並傳遞例外狀況的 <xref:System.Exception.Message%2A> 屬性當做結束原因，以結束工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-241">If <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> encounters an exception, it terminates the workflow instance by calling <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> with the <xref:System.Exception.Message%2A> property of the exception passed as the reason for the termination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-242">下列程式碼範例將示範如何使用 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> 方法在工作流程主機中啟動 <xref:System.Workflow.Runtime.WorkflowInstance>。</span><span class="sxs-lookup"><span data-stu-id="197bd-242">The following code example demonstrates how you can use the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method to start a <xref:System.Workflow.Runtime.WorkflowInstance> in a workflow host.</span></span> <span data-ttu-id="197bd-243">下列程式碼會建立 <xref:System.Workflow.Runtime.WorkflowRuntime> 的執行個體、加入服務至執行階段，然後示範建立 <xref:System.Workflow.Runtime.WorkflowInstance> 物件的建議方式。</span><span class="sxs-lookup"><span data-stu-id="197bd-243">The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span> <span data-ttu-id="197bd-244">它會建立 <xref:System.Type> 物件，並將它轉換成其中一個與主機關聯的工作流程物件。</span><span class="sxs-lookup"><span data-stu-id="197bd-244">It creates a <xref:System.Type> object and casts it to one of the workflow objects with which the host is associated.</span></span> <span data-ttu-id="197bd-245">程式碼接著藉由呼叫 <xref:System.Workflow.Runtime.WorkflowInstance> 方法和傳遞之前建立的類型給它來初始化 <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>。</span><span class="sxs-lookup"><span data-stu-id="197bd-245">The code next initializes <xref:System.Workflow.Runtime.WorkflowInstance> by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it.</span></span> <span data-ttu-id="197bd-246"><xref:System.Workflow.Runtime.WorkflowInstance> 由 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> 方法呼叫啟動。</span><span class="sxs-lookup"><span data-stu-id="197bd-246">The <xref:System.Workflow.Runtime.WorkflowInstance> is started with the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method call.</span></span>  
  
 <span data-ttu-id="197bd-247">這個程式碼範例是 Program.cs 檔案中＜取消工作流程 SDK＞範例的一部分。</span><span class="sxs-lookup"><span data-stu-id="197bd-247">This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</span></span> <span data-ttu-id="197bd-248">如需詳細資訊，請參閱[取消工作流程](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)。</span><span class="sxs-lookup"><span data-stu-id="197bd-248">For more information, see [Canceling a Workflow](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).</span></span>  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="197bd-249">工作流程執行階段引擎不在執行中。</span><span class="sxs-lookup"><span data-stu-id="197bd-249">The workflow runtime engine is not running.</span></span>  
  
 <span data-ttu-id="197bd-250">-或-</span><span class="sxs-lookup"><span data-stu-id="197bd-250">-or-</span></span>  
  
 <span data-ttu-id="197bd-251">工作流程執行個體已啟動。</span><span class="sxs-lookup"><span data-stu-id="197bd-251">The workflow instance has already been started.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend (string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Suspend(string error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Suspend (error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Suspend(System::String ^ error);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="error"><span data-ttu-id="197bd-252">暫止工作流程執行個體的原因描述。</span><span class="sxs-lookup"><span data-stu-id="197bd-252">A description of the reason for suspending the workflow instance.</span></span></param>
        <summary><span data-ttu-id="197bd-253">暫止工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-253">Suspends the workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-254">工作流程執行個體是以同步方式暫止。</span><span class="sxs-lookup"><span data-stu-id="197bd-254">The workflow instance is suspended in a synchronous manner.</span></span> <span data-ttu-id="197bd-255">如果工作流程執行個體已經暫停，則不採取任何行動，否則工作流程執行階段引擎會暫止工作流程執行個體、引發 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> 事件，並在 `reason` 中傳遞 <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="197bd-255">If the workflow instance is already suspended, no action is taken; otherwise, the workflow runtime engine suspends the workflow instance, raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> event and passes `reason` in a <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="197bd-256"><xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> 不會卸載工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-256"><xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> does not unload the workflow instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-257">下列程式碼範例將示範如何呼叫 <xref:System.Workflow.Runtime.WorkflowInstance> 物件上的 Suspend。</span><span class="sxs-lookup"><span data-stu-id="197bd-257">The following code example demonstrates calling Suspend on a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#9](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#9)]
 [!code-vb[WF_Samples#9](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="197bd-258">工作流程執行階段引擎不在執行中。</span><span class="sxs-lookup"><span data-stu-id="197bd-258">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="public void Terminate (string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Terminate(string error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Terminate (error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Terminate(System::String ^ error);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="error"><span data-ttu-id="197bd-259">結束工作流程執行個體的原因描述。</span><span class="sxs-lookup"><span data-stu-id="197bd-259">A description of the reason for terminating the workflow instance.</span></span></param>
        <summary><span data-ttu-id="197bd-260">以同步方式結束工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-260">Terminates the workflow instance in a synchronous manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-261">工作流程執行個體是以同步方式結束。</span><span class="sxs-lookup"><span data-stu-id="197bd-261">The workflow instance is terminated in a synchronous manner.</span></span> <span data-ttu-id="197bd-262">主機會呼叫 <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> 以結束工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-262">The host calls <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> to terminate the workflow instance.</span></span> <span data-ttu-id="197bd-263">工作流程執行階段引擎會清除記憶體中的工作流程執行個體，並通知持續性服務已清除記憶體中的執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-263">The workflow runtime engine clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory.</span></span> <span data-ttu-id="197bd-264">對 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> 而言，這表示發生終止時，所有該工作流程執行個體的狀態資訊都會從資料庫中刪除。</span><span class="sxs-lookup"><span data-stu-id="197bd-264">For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination.</span></span> <span data-ttu-id="197bd-265">您將無法從之前儲存的保存點重新載入工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-265">You will not be able to reload the workflow instance from a previously stored persistence point.</span></span>  
  
 <span data-ttu-id="197bd-266">清除記憶體內的工作流程執行個體，而且通知持續性服務已終止執行個體後，`Terminate` 方法會引發 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> 事件，並且在包含於 `reason` 中的 <xref:System.Exception.Message%2A> 之 <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> 屬性中傳遞 <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="197bd-266">After the in-memory workflow instance is cleared and the persistence service is informed of the termination, the `Terminate` method raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> event and passes `reason` in the <xref:System.Exception.Message%2A> property of a <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> contained in the <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>.</span></span>  
  
 <span data-ttu-id="197bd-267">`Terminate` 與 <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A> 不同，因為 Terminate 會清除記憶體內的工作流程執行個體並通知持續性服務時，`Abort` 僅清除可以從上次保存點重新啟動之記憶體內的工作流程執行個體。</span><span class="sxs-lookup"><span data-stu-id="197bd-267">`Terminate` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A> in that while Terminate clears the in-memory workflow instance and informs the persistence service of the termination, `Abort` simply clears the in-memory workflow instance, which can then be restarted from the last persistence point.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-268">下列程式碼範例將示範如何呼叫 <xref:System.Workflow.Runtime.WorkflowInstance> 物件上的 Terminate。</span><span class="sxs-lookup"><span data-stu-id="197bd-268">The following code example demonstrates calling Terminate on a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#8](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#8)]
 [!code-vb[WF_Samples#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="197bd-269">工作流程執行階段引擎不在執行中。</span><span class="sxs-lookup"><span data-stu-id="197bd-269">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryUnload">
      <MemberSignature Language="C#" Value="public bool TryUnload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryUnload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.TryUnload" />
      <MemberSignature Language="VB.NET" Value="Public Function TryUnload () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryUnload();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="197bd-270">執行個體暫止或閒置時，將工作流程執行個體從記憶體卸載到持續性存放區中。</span><span class="sxs-lookup"><span data-stu-id="197bd-270">Unloads the workflow instance from memory to the persistence store when the instance is suspended or idle.</span></span></summary>
        <returns>
          <span data-ttu-id="197bd-271">如果工作流程執行個體已卸載則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="197bd-271"><see langword="true" /> if the workflow instance was unloaded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-272">如果工作流程執行個體閒置或暫停，<xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> 會使用持續性服務移除記憶體中的工作流程執行個體，然後將它保存在資料存放區中。</span><span class="sxs-lookup"><span data-stu-id="197bd-272">If the workflow instance is idle or suspended, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> uses the persistence service to remove the workflow instance from memory and persist it to a data store.</span></span> <span data-ttu-id="197bd-273">如果沒有已向 <xref:System.Workflow.Runtime.WorkflowRuntime> 註冊的持續性服務，<xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> 會擲回 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="197bd-273">If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="197bd-274">如果成功保存工作流程執行個體，就會引發執行階段<xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>事件，並傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="197bd-274">If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event, and returns `true`.</span></span> <span data-ttu-id="197bd-275"><xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> 傳回`false`工作流程執行個體已卸載，如果已終止，已中止，或已完成。</span><span class="sxs-lookup"><span data-stu-id="197bd-275"><xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> returns `false` if the workflow instance has already been unloaded, has been terminated, has been aborted, or has already completed.</span></span>  
  
 <span data-ttu-id="197bd-276">主機可以使用 <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> 從閒置的工作流程中回收系統資源。</span><span class="sxs-lookup"><span data-stu-id="197bd-276">The host can use <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> to reclaim system resources from an idle workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-277">下列程式碼範例將示範如何使用 TryUnload 方法在 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> 事件引發時卸載工作流程。</span><span class="sxs-lookup"><span data-stu-id="197bd-277">The following example demonstrates using the TryUnload method to unload a workflow when the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event fires.</span></span> <span data-ttu-id="197bd-278">這個範例是 Program.cs 檔案中＜使用持續性服務 SDK＞範例的一部分。</span><span class="sxs-lookup"><span data-stu-id="197bd-278">This example is from the Using Persistence Services SDK sample, from the Program.cs file.</span></span> <span data-ttu-id="197bd-279">如需詳細資訊，請參閱[使用持續性服務範例](http://msdn.microsoft.com/library/3176b7e7-ae49-4d5c-802b-85032d6ebde6)。</span><span class="sxs-lookup"><span data-stu-id="197bd-279">For more information, see [Using Persistence Services Sample](http://msdn.microsoft.com/library/3176b7e7-ae49-4d5c-802b-85032d6ebde6).</span></span>  
  
 [!code-csharp[WF_Samples#280](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#280)]
 [!code-vb[WF_Samples#280](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#280)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="197bd-280">沒有已經向工作流程執行階段引擎註冊的持續性服務。</span><span class="sxs-lookup"><span data-stu-id="197bd-280">There is no persistence service registered with the workflow runtime engine.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public void Unload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unload ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Unload();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="197bd-281">將工作流程執行個體從記憶體卸載到持續性存放區中。</span><span class="sxs-lookup"><span data-stu-id="197bd-281">Unloads the workflow instance from memory to the persistence store.</span></span> <span data-ttu-id="197bd-282">此呼叫會封鎖到完成目前排程的工作後，或到異動範圍結束為止。</span><span class="sxs-lookup"><span data-stu-id="197bd-282">This call blocks until after the currently scheduled work is finished, or the end of a transaction scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="197bd-283"><xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> 是同步的，也就是說，它會在完成其執行的任何動作後傳回。</span><span class="sxs-lookup"><span data-stu-id="197bd-283"><xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> is synchronous; that is, it returns after completing any action that it performs.</span></span> <span data-ttu-id="197bd-284">如果工作流程執行個體未閒置，則執行階段會等到執行個體可以被中斷為止。</span><span class="sxs-lookup"><span data-stu-id="197bd-284">If the workflow instance is not idle, the runtime waits until the instance can be interrupted.</span></span> <span data-ttu-id="197bd-285">只有在目前排程的工作項目完成後，才能中斷執行個體。這通常發生在目前執行的 Activity 從執行個體的 <xref:System.Workflow.ComponentModel.Activity.Execute%2A> 方法傳回時。</span><span class="sxs-lookup"><span data-stu-id="197bd-285">An instance can only be interrupted after the currently scheduled work item completes; this is typically when the currently running Activity returns from its <xref:System.Workflow.ComponentModel.Activity.Execute%2A> method.</span></span> <span data-ttu-id="197bd-286">但如果執行個體正在執行 <xref:System.Workflow.ComponentModel.TransactionScopeActivity>，則執行個體必須等到交易範圍完成執行後才能被中斷。</span><span class="sxs-lookup"><span data-stu-id="197bd-286">However, if the instance is executing a <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, the transaction scope must complete execution before the instance can be interrupted.</span></span> <span data-ttu-id="197bd-287">請先卸載，然後使用持續性服務移除記憶體中的工作流程執行個體，然後將它保存在資料存放區中。</span><span class="sxs-lookup"><span data-stu-id="197bd-287">Unload then uses the persistence service to remove the workflow instance from memory and persists it to a data store.</span></span> <span data-ttu-id="197bd-288">如果沒有已向 <xref:System.Workflow.Runtime.WorkflowRuntime> 註冊的持續性服務，<xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> 會擲回 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="197bd-288">If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="197bd-289">如果成功保存工作流程執行個體，執行階段會引發 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> 事件。</span><span class="sxs-lookup"><span data-stu-id="197bd-289">If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event.</span></span>  
  
 <span data-ttu-id="197bd-290">主機可以使用 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> 從閒置的工作流程中回收系統資源。</span><span class="sxs-lookup"><span data-stu-id="197bd-290">The host can use <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> to reclaim system resources from an idle workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="197bd-291">下列範例示範呼叫 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> 物件上的 <xref:System.Workflow.Runtime.WorkflowInstance>。</span><span class="sxs-lookup"><span data-stu-id="197bd-291">The following example demonstrates calling <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> on a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#11](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#11)]
 [!code-vb[WF_Samples#11](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="197bd-292">沒有已經向工作流程執行階段引擎註冊的持續性服務。</span><span class="sxs-lookup"><span data-stu-id="197bd-292">There is no persistence service registered with the workflow runtime engine.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowRuntime">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkflowRuntime As WorkflowRuntime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Runtime::WorkflowRuntime ^ WorkflowRuntime { System::Workflow::Runtime::WorkflowRuntime ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowRuntime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="197bd-293">取得此工作流程執行個體的 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />。</span><span class="sxs-lookup"><span data-stu-id="197bd-293">Gets the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> for this workflow instance.</span></span></summary>
        <value><span data-ttu-id="197bd-294"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" />，表示此工作流程執行個體執行時所在的執行環境。</span><span class="sxs-lookup"><span data-stu-id="197bd-294">A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> that represents the execution environment in which this workflow instance is running.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="197bd-295">下列範例將示範如何存取 <xref:System.Workflow.Runtime.WorkflowRuntime> 物件之執行中的 <xref:System.Workflow.Runtime.WorkflowInstance>。</span><span class="sxs-lookup"><span data-stu-id="197bd-295">The following example demonstrates accessing the executing <xref:System.Workflow.Runtime.WorkflowRuntime> of a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#7](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#7)]
 [!code-vb[WF_Samples#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>