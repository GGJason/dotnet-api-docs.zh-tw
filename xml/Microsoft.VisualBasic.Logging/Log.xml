<Type Name="Log" FullName="Microsoft.VisualBasic.Logging.Log">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="73237f80471b93f5a2329bdf91fc2663bba06829" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51890163" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Log" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Log extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.Log" />
  <TypeSignature Language="VB.NET" Value="Public Class Log" />
  <TypeSignature Language="C++ CLI" Value="public ref class Log" />
  <TypeSignature Language="F#" Value="type Log = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供屬性和方法，用於將事件和例外狀況 (Exception) 資訊寫入應用程式的記錄檔接聽程式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.Log`物件提供直接了當的進入點要存取[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]的記錄服務。 `WriteEntry`和`WriteException`方法會將訊息寫入應用程式的記錄檔接聽程式。 接聽程式可以設定由應用程式的組態檔。 如需詳細資訊，請參閱 <<c0> [ 逐步解說： 變更 My.Application.Log 寫入資訊](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)並[使用應用程式記錄檔](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)。  
  
 `My.Application.Log`物件是僅適用於用戶端應用程式。 Web 應用程式，使用`My.Log`。 如需詳細資訊，請參閱<xref:Microsoft.VisualBasic.Logging.AspLog>。  
  
 下表列出與工作的範例`My.Application.Log`物件。  
  
|以|請參閱|  
|--------|---------|  
|事件資訊寫入應用程式的記錄檔接聽程式|[如何：寫入記錄檔訊息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|例外狀況資訊寫入應用程式的記錄檔接聽程式|[如何：記錄例外狀況](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|決定在何處`My.Application.Log`寫入資訊的位置|[逐步解說：判斷 My.Application.Log 寫入資訊的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
   
  
## Examples  
 此範例示範如何使用 `My.Application.Log.WriteEntry` 方法寫入追蹤資訊。 如需詳細資訊，請參閱 <<c0> [ 如何： 寫入記錄訊息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.Logging.Log" /> 類別的新執行個體。</summary>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.Logging.Log" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.Log : string -&gt; Microsoft.VisualBasic.Logging.Log" Usage="new Microsoft.VisualBasic.Logging.Log name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see cref="T:System.String" />. 提供給 <see cref="P:Microsoft.VisualBasic.Logging.Log.TraceSource" /> 屬性物件的名稱。</param>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.Logging.Log" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultFileLogWriter">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultFileLogWriter As FileLogTraceListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::FileLogTraceListener ^ DefaultFileLogWriter { Microsoft::VisualBasic::Logging::FileLogTraceListener ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFileLogWriter : Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.FileLogTraceListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得位在 <see langword="Log" /> 物件之下的 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 物件的檔案。</summary>
        <value>傳回位在 <see langword="Log" /> 物件之下的 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性來判斷目前的組態<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>物件。  
  
 在用戶端應用程式`Log`物件是可透過`My.Application.Log`物件。 在 Web 應用程式`Log`物件是可透過`My.Log`物件。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">疑難排解：記錄檔接聽程式</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeWithDefaultsSinceNoConfigExists">
      <MemberSignature Language="C#" Value="protected internal virtual void InitializeWithDefaultsSinceNoConfigExists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblynewslot virtual instance void InitializeWithDefaultsSinceNoConfigExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub InitializeWithDefaultsSinceNoConfigExists ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void InitializeWithDefaultsSinceNoConfigExists();" />
      <MemberSignature Language="F#" Value="abstract member InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit&#xA;override this.InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit" Usage="log.InitializeWithDefaultsSinceNoConfigExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立新的 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 物件，並將其加入至 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會建立新<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>，將其名稱設定為`FileLog`，並將它設定為記錄訊息嚴重性層級<xref:System.Diagnostics.SourceLevels.Information>和更新版本。 新<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>物件接著會新增至<xref:System.Diagnostics.TraceSource.Listeners%2A>集合。  
  
 <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A>呼叫的方法，如果<xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A>屬性尚未設定。 可以在應用程式的組態檔中設定追蹤來源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="TraceSource">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceSource TraceSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.TraceSource TraceSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceSource As TraceSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceSource ^ TraceSource { System::Diagnostics::TraceSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TraceSource : System.Diagnostics.TraceSource" Usage="Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得位在 <see langword="Log" /> 物件之下的 <see cref="T:System.Diagnostics.TraceSource" /> 物件。</summary>
        <value>傳回位在 <see langword="Log" /> 物件之下的 <see cref="T:System.Diagnostics.TraceSource" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性來判斷目前的組態`Log`物件。  
  
 在用戶端應用程式`Log`物件是可透過`My.Application.Log`物件。 在 Web 應用程式`Log`物件是可透過`My.Log`物件。  
  
 這是進階的成員;它不會顯示在 IntelliSense 中除非您選取**所有** 索引標籤。  
  
 下表列出的工作，包含範例`TraceSource`屬性。  
  
|以|請參閱|  
|--------|---------|  
|取得每個資訊`Log`物件的記錄檔接聽程式。|[疑難排解：記錄檔接聽程式](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)|  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|------------------|---------------|  
|Windows 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows 控制項程式庫|**是**|  
|Web 控制項程式庫|否|  
|Windows 服務|**是**|  
|網站|**是**|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSource" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">疑難排解：記錄檔接聽程式</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEntry">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將訊息寫入至應用程式的記錄檔接聽程式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string -&gt; unit" Usage="log.WriteEntry message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">必要。 要記錄的訊息。 如果 <c>message</c> 為 <see langword="Nothing" />，則會使用空字串。</param>
        <summary>將訊息寫入至應用程式的記錄檔接聽程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry`方法會將訊息寫入應用程式的事件記錄檔接聽程式。  
  
 在用戶端應用程式`Log`物件是可透過`My.Application.Log`物件。 在 Web 應用程式`Log`物件是可透過`My.Log`物件。  
  
 若要了解哪個記錄檔接聽程式接收`WriteEntry`方法的訊息，請參閱[逐步解說： 判斷 My.Application.Log 寫入資訊](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)。 您可以變更預設記錄檔接聽程式。 如需詳細資訊，請參閱[使用應用程式記錄檔](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)。  
  
 對於多載，不會`id`引數，`id`寫入記錄檔由下表定義。  
  
|`severity`|預設值 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 下表列出與工作的範例`WriteEntry`方法。  
  
|以|請參閱|  
|--------|---------|  
|事件資訊寫入應用程式的記錄檔接聽程式|[如何：寫入記錄檔訊息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|決定在何處`Log`寫入資訊的位置|[逐步解說：判斷 My.Application.Log 寫入資訊的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|------------------|---------------|  
|Windows 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows 控制項程式庫|**是**|  
|Web 控制項程式庫|否|  
|Windows 服務|**是**|  
|網站|**是**|  
  
   
  
## Examples  
 此範例示範如何使用 `My.Application.Log.WriteEntry` 方法寫入追蹤資訊。 如需詳細資訊，請參閱 <<c0> [ 如何： 寫入記錄訊息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 此程式碼範例可以只在用戶端應用程式內執行。 變更`My.Application.Log.WriteEntry`至`My.Log.WriteEntry`Web 應用程式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">具有部分信任的程式碼呼叫方法，但要寫入需要完全信任的事件記錄檔接聽程式 (Listener)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">在 Visual Basic 中使用應用程式記錄檔</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">如何：寫入記錄訊息</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">逐步解說：判斷 My.Application.Log 寫入資訊的位置</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType -&gt; unit" Usage="log.WriteEntry (message, severity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
      </Parameters>
      <Docs>
        <param name="message">必要。 要記錄的訊息。 如果 <c>message</c> 為 <see langword="Nothing" />，則會使用空字串。</param>
        <param name="severity">訊息的類型。 預設值為 <see langword="TraceEventType.Information" />。</param>
        <summary>將訊息寫入至應用程式的記錄檔接聽程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry`方法會將訊息寫入應用程式的事件記錄檔接聽程式。  
  
 在用戶端應用程式`Log`物件是可透過`My.Application.Log`物件。 在 Web 應用程式`Log`物件是可透過`My.Log`物件。  
  
 若要了解哪個記錄檔接聽程式接收`WriteEntry`方法的訊息，請參閱[逐步解說： 判斷 My.Application.Log 寫入資訊](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)。 您可以變更預設記錄檔接聽程式。 如需詳細資訊，請參閱[使用應用程式記錄檔](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)。  
  
 對於多載，不會`id`引數，`id`寫入記錄檔由下表定義。  
  
|`severity`|預設值 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 下表列出與工作的範例`WriteEntry`方法。  
  
|以|請參閱|  
|--------|---------|  
|事件資訊寫入應用程式的記錄檔接聽程式|[如何：寫入記錄檔訊息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|決定在何處`Log`寫入資訊的位置|[逐步解說：判斷 My.Application.Log 寫入資訊的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|------------------|---------------|  
|Windows 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows 控制項程式庫|**是**|  
|Web 控制項程式庫|否|  
|Windows 服務|**是**|  
|網站|**是**|  
  
   
  
## Examples  
 此範例示範如何使用 `My.Application.Log.WriteEntry` 方法寫入追蹤資訊。 如需詳細資訊，請參閱 <<c0> [ 如何： 寫入記錄訊息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 此程式碼範例可以只在用戶端應用程式內執行。 變更`My.Application.Log.WriteEntry`至`My.Log.WriteEntry`Web 應用程式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">訊息類型不是其中一個 <see cref="T:System.Diagnostics.TraceEventType" /> 列舉值。</exception>
        <exception cref="T:System.Security.SecurityException">具有部分信任的程式碼呼叫方法，但要寫入需要完全信任的事件記錄檔接聽程式 (Listener)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">在 Visual Basic 中使用應用程式記錄檔</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">如何：寫入記錄訊息</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">逐步解說：判斷 My.Application.Log 寫入資訊的位置</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType * int -&gt; unit" Usage="log.WriteEntry (message, severity, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">必要。 要記錄的訊息。 如果 <c>message</c> 為 <see langword="Nothing" />，則會使用空字串。</param>
        <param name="severity">訊息的類型。 預設值為 <see langword="TraceEventType.Information" />。</param>
        <param name="id">訊息識別項，通常用於相互關聯。 預設與 <c>entryType</c> 相關，如表格中所述。</param>
        <summary>將訊息寫入至應用程式的記錄檔接聽程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry`方法會將訊息寫入應用程式的事件記錄檔接聽程式。  
  
 在用戶端應用程式`Log`物件是可透過`My.Application.Log`物件。 在 Web 應用程式`Log`物件是可透過`My.Log`物件。  
  
 若要了解哪個記錄檔接聽程式接收`WriteEntry`方法的訊息，請參閱[逐步解說： 判斷 My.Application.Log 寫入資訊](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)。 您可以變更預設記錄檔接聽程式。 如需詳細資訊，請參閱[使用應用程式記錄檔](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)。  
  
 對於多載，不會`id`引數，`id`寫入記錄檔由下表定義。  
  
|`severity`|預設值 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 下表列出與工作的範例`WriteEntry`方法。  
  
|以|請參閱|  
|--------|---------|  
|事件資訊寫入應用程式的記錄檔接聽程式|[如何：寫入記錄檔訊息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|決定在何處`Log`寫入資訊的位置|[逐步解說：判斷 My.Application.Log 寫入資訊的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|------------------|---------------|  
|Windows 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows 控制項程式庫|**是**|  
|Web 控制項程式庫|否|  
|Windows 服務|**是**|  
|網站|**是**|  
  
   
  
## Examples  
 此範例示範如何使用 `My.Application.Log.WriteEntry` 方法寫入追蹤資訊。 如需詳細資訊，請參閱 <<c0> [ 如何： 寫入記錄訊息](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 此程式碼範例可以只在用戶端應用程式內執行。 變更`My.Application.Log.WriteEntry`至`My.Log.WriteEntry`Web 應用程式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">訊息類型不是其中一個 <see cref="T:System.Diagnostics.TraceEventType" /> 列舉值。</exception>
        <exception cref="T:System.Security.SecurityException">具有部分信任的程式碼呼叫方法，但要寫入需要完全信任的事件記錄檔接聽程式 (Listener)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">在 Visual Basic 中使用應用程式記錄檔</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">如何：寫入記錄訊息</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">逐步解說：判斷 My.Application.Log 寫入資訊的位置</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteException">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將例外狀況資訊寫入至應用程式的記錄檔接聽程式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception -&gt; unit" Usage="log.WriteException ex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">必要。 要記錄的例外狀況。</param>
        <summary>將例外狀況資訊寫入至應用程式的記錄檔接聽程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException`方法會寫入至應用程式的事件記錄檔接聽程式的例外狀況所包含的資訊。  
  
 在用戶端應用程式`Log`物件是可透過`My.Application.Log`物件。 在 Web 應用程式`Log`物件是可透過`My.Log`物件。  
  
 若要了解哪個記錄檔接聽程式接收`WriteException`方法的訊息，請參閱[逐步解說： 判斷 My.Application.Log 寫入資訊](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)。 您可以變更預設記錄檔接聽程式。 如需詳細資訊，請參閱[使用應用程式記錄檔](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)。  
  
 對於多載，才會`id`引數，寫入記錄檔的識別碼由下表定義。  
  
|`severity`|預設值 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 下表列出與工作的範例`WriteException`方法。  
  
|以|請參閱|  
|--------|---------|  
|例外狀況資訊寫入應用程式的事件記錄檔接聽程式。|[如何：記錄例外狀況](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|判斷 `Log` 寫入資訊的位置。|[逐步解說：判斷 My.Application.Log 寫入資訊的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|------------------|---------------|  
|Windows 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows 控制項程式庫|**是**|  
|Web 控制項程式庫|否|  
|Windows 服務|**是**|  
|網站|**是**|  
  
   
  
## Examples  
 此範例示範如何使用`My.Application.Log.WriteException`記錄例外狀況的方法。 取消 `Dim` 和 `MsgBox` 行的註解，造成 <xref:System.NullReferenceException> 例外狀況。 如需詳細資訊，請參閱 <<c0> [ 如何： 記錄例外狀況](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 此程式碼範例可以只在用戶端應用程式內執行。 變更`My.Application.Log.WriteException`至`My.Log.WriteException`Web 應用程式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.Security.SecurityException">具有部分信任的程式碼呼叫方法，但要寫入需要完全信任的事件記錄檔接聽程式 (Listener)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">在 Visual Basic 中使用應用程式記錄檔</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">如何：在 Visual Basic 中記錄例外狀況</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">逐步解說：判斷 My.Application.Log 寫入資訊的位置</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">必要。 要記錄的例外狀況。</param>
        <param name="severity">訊息的類型。 預設值為 <see cref="F:System.Diagnostics.TraceEventType.Error" />。</param>
        <param name="additionalInfo">要附加至訊息的字串。 預設為空字串。</param>
        <summary>將例外狀況資訊寫入至應用程式的記錄檔接聽程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException`方法會寫入至應用程式的事件記錄檔接聽程式的例外狀況所包含的資訊。  
  
 在用戶端應用程式`Log`物件是可透過`My.Application.Log`物件。 在 Web 應用程式`Log`物件是可透過`My.Log`物件。  
  
 若要了解哪個記錄檔接聽程式接收`WriteException`方法的訊息，請參閱[逐步解說： 判斷 My.Application.Log 寫入資訊](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)。 您可以變更預設記錄檔接聽程式。 如需詳細資訊，請參閱[使用應用程式記錄檔](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)。  
  
 對於多載，才會`id`引數，寫入記錄檔的識別碼由下表定義。  
  
|`severity`|預設值 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 下表列出與工作的範例`WriteException`方法。  
  
|以|請參閱|  
|--------|---------|  
|例外狀況資訊寫入應用程式的事件記錄檔接聽程式。|[如何：記錄例外狀況](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|判斷 `Log` 寫入資訊的位置。|[逐步解說：判斷 My.Application.Log 寫入資訊的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|------------------|---------------|  
|Windows 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows 控制項程式庫|**是**|  
|Web 控制項程式庫|否|  
|Windows 服務|**是**|  
|網站|**是**|  
  
   
  
## Examples  
 此範例示範如何使用`My.Application.Log.WriteException`記錄例外狀況的方法。 取消 `Dim` 和 `MsgBox` 行的註解，造成 <xref:System.NullReferenceException> 例外狀況。 如需詳細資訊，請參閱 <<c0> [ 如何： 記錄例外狀況](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 此程式碼範例可以只在用戶端應用程式內執行。 變更`My.Application.Log.WriteException`至`My.Log.WriteException`Web 應用程式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">訊息類型不是其中一個 <see cref="T:System.Diagnostics.TraceEventType" /> 列舉值。</exception>
        <exception cref="T:System.Security.SecurityException">具有部分信任的程式碼呼叫方法，但要寫入需要完全信任的事件記錄檔接聽程式 (Listener)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">在 Visual Basic 中使用應用程式記錄檔</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">如何：在 Visual Basic 中記錄例外狀況</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">逐步解說：判斷 My.Application.Log 寫入資訊的位置</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string * int -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ex">必要。 要記錄的例外狀況。</param>
        <param name="severity">訊息的類型。 預設值為 <see cref="F:System.Diagnostics.TraceEventType.Error" />。</param>
        <param name="additionalInfo">要附加至訊息的字串。 預設為空字串。</param>
        <param name="id">訊息識別項，通常用於相互關聯。 預設與 <c>entryType</c> 相關，如＜備註＞一節中的表格所述。</param>
        <summary>將例外狀況資訊寫入至應用程式的記錄檔接聽程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException`方法會寫入至應用程式的事件記錄檔接聽程式的例外狀況所包含的資訊。  
  
 在用戶端應用程式`Log`物件是可透過`My.Application.Log`物件。 在 Web 應用程式`Log`物件是可透過`My.Log`物件。  
  
 若要了解哪個記錄檔接聽程式接收`WriteException`方法的訊息，請參閱[逐步解說： 判斷 My.Application.Log 寫入資訊](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)。 您可以變更預設記錄檔接聽程式。 如需詳細資訊，請參閱[使用應用程式記錄檔](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)。  
  
 對於多載，才會`id`引數，寫入記錄檔的識別碼由下表定義。  
  
|`severity`|預設值 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 下表列出與工作的範例`WriteException`方法。  
  
|以|請參閱|  
|--------|---------|  
|例外狀況資訊寫入應用程式的事件記錄檔接聽程式。|[如何：記錄例外狀況](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|判斷 `Log` 寫入資訊的位置。|[逐步解說：判斷 My.Application.Log 寫入資訊的位置](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>專案類型的可用性  
  
|專案類型|可用|  
|------------------|---------------|  
|Windows 應用程式|**是**|  
|類別庫|**是**|  
|主控台應用程式|**是**|  
|Windows 控制項程式庫|**是**|  
|Web 控制項程式庫|否|  
|Windows 服務|**是**|  
|網站|**是**|  
  
   
  
## Examples  
 此範例示範如何使用`My.Application.Log.WriteException`記錄例外狀況的方法。 取消 `Dim` 和 `MsgBox` 行的註解，造成 <xref:System.NullReferenceException> 例外狀況。 如需詳細資訊，請參閱 <<c0> [ 如何： 記錄例外狀況](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)。  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 此程式碼範例可以只在用戶端應用程式內執行。 變更`My.Application.Log.WriteException`至`My.Log.WriteException`Web 應用程式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">訊息類型不是其中一個 <see cref="T:System.Diagnostics.TraceEventType" /> 列舉值。</exception>
        <exception cref="T:System.Security.SecurityException">具有部分信任的程式碼呼叫方法，但要寫入需要完全信任的事件記錄檔接聽程式 (Listener)。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">物件 (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">在 Visual Basic 中使用應用程式記錄檔</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">如何：在 Visual Basic 中記錄例外狀況</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">逐步解說：判斷 My.Application.Log 寫入資訊的位置</related>
      </Docs>
    </Member>
  </Members>
</Type>