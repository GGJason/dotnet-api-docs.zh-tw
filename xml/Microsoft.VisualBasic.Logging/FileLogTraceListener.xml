<Type Name="FileLogTraceListener" FullName="Microsoft.VisualBasic.Logging.FileLogTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c993f49f8ef84e416475e1c4d7f3f97289cbf34e" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34174151" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileLogTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileLogTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class FileLogTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileLogTraceListener : System::Diagnostics::TraceListener" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供簡單的接聽程式，將記錄輸出導向到檔案。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>類別會提供自動的維護功能，以封存記錄檔，如有需要在每日或每個應用程式。 此自動保存功能有助於減少的開發人員和管理員維護責任。  
  
 執行個體<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>可以加入至<xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType>或<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>集合，以重新導向輸出記錄到文字檔。 這個類別的執行個體也可以加入至`My.Application.Log`或`My.Log`（適用於 Web 應用程式） 在 Visual Basic 應用程式。 如需詳細資訊，請參閱[逐步解說： 變更位置 My.Application.Log 寫入資訊](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)`.`  
  
 這個類別的主要功能包括：  
  
1.  *保存功能*。 這個類別所產生的記錄檔會根據基底名稱和日期，以及要在區別記錄檔的後續版本中的記錄檔的數字來命名。 可視需要在建立新的記錄檔。  
  
     明確的檔案名稱的格式，是`baseName`[-`dateStamp`] [-`version`].log，其中：  
  
    -   `baseName`部分是基本的記錄檔名稱，由指定<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>屬性。  
  
    -   `dateStamp`組件具有格式"YYYY-MM-DD"，並會顯示當<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>是<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>或<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>。  
  
    -   如果需要多個記錄檔具有相同`baseName`和`dateStamp`、`version`組件正`Integer`，加入至檔案名稱。  
  
2.  *多個類別執行個體*。 如果執行個體<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>類別寫入正在使用中的檔案：  
  
    -   類別共用檔案，如果另一個執行個體正在使用它<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>相同的處理序中的類別。  
  
    -   類別會建立新的記錄檔，如果另一個處理序正在使用檔案，請使用下一個可用的名稱。  
  
3.  *執行緒安全*。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>類別具備執行緒安全。 這可讓您安全地寫入訊息記錄檔從多個執行緒不使用鎖定。  
  
 **記錄檔位置**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>屬性所接受<xref:Microsoft.VisualBasic.Logging.LogFileLocation>列舉來指定要寫入的記錄檔的一般目錄的其中一個。  
  
-   若要將記錄寫入另一個位置，設定<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>至該位置的屬性。  
  
 **記錄檔名稱**  
  
-   記錄檔的基底的名稱由指定<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>屬性。  
  
-   目前的記錄檔名稱可以從讀取<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>屬性。 在檔案系統，它被衍生自其他幾個屬性和記錄檔的目前狀態。  
  
 **記錄維護**  
  
-   建立新的記錄檔的最小頻率由<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>屬性。 當這個值是<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>或<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>、 每日或每週至少一次建立新的記錄檔和日期戳記就會合併至<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>名稱。  
  
-   記錄檔的大小上限 （以位元組為單位） 由<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>屬性。 如果記錄檔大小超過此大小，其他訊息寫入記錄檔會捨棄並視<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>屬性，擲回例外狀況。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>屬性會決定必須有多少可用空間 （以位元組為單位）。 這有助於確保<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>類別不會耗用所有可用磁碟空間。 使用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>屬性來指定記錄檔的行為，當有將小於<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>位元組可用。  
  
 **記錄檔輸出設定**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A>屬性會指定是否基礎資料流應該自動清除之後每次寫入至記錄檔。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A>屬性會指定是否要將訊息附加至目前的記錄檔，如果允許，或將它們寫入至新的記錄檔。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>屬性會指定要用於記錄檔訊息中的欄位用來分隔字串。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A>屬性會指定要建立新的記錄檔時使用的編碼方式。  
  
 **記錄檔輸出**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>和<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A>方法會將訊息寫入記錄檔。 這些方法會檢查<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>屬性，以及任何現有的記錄檔具有相同的基底名稱，來判斷是否應該建立新的記錄檔。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>方法排清目前在記錄檔的輸出緩衝區中的任何訊息。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>方法會關閉記錄檔，使其可以用於其他處理程序。  
  
 **啟用輸出**  
  
 您必須啟用追蹤或偵錯才能使用追蹤接聽項。 下列語法是特定的編譯器。 如果您使用 C# 或 Visual Basic 以外的編譯器，請參閱編譯器的文件。  
  
-   若要啟用偵錯 C# 中，加入`/d:DEBUG`旗標設為編譯器命令列，當您編譯程式碼，或者您可以加入`#define DEBUG`加入您的檔案頂端。 在 Visual Basic 中，加入`/d:DEBUG=True`編譯器命令列的旗標。  
  
-   若要啟用追蹤，在 C# 中的，加入`/d:TRACE`旗標設為編譯器命令列，當您編譯程式碼，或新增`#define TRACE`加入您的檔案頂端。 在 Visual Basic 中，加入`/d:TRACE=True`編譯器命令列的旗標。  
  
 若要設定接聽程式的層級，編輯您的應用程式的組態檔。 在這個檔案中，您可以加入接聽程式、 設定它的型別和它的參數，方法移除接聽程式，或清除所有先前設定的應用程式的接聽程式。 組態檔應該格式如下列範例所示。  
  
 針對要執行此範例中，您必須提供完整的組件名稱。 如需如何取得完整組件名稱資訊，請參閱[組件名稱](~/docs/framework/app-domains/assembly-names.md)。  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sharedListeners>  
            <add name="FileLog"  
                type="Microsoft.VisualBasic.Logging.FileLogTraceListener,   
                      Microsoft.VisualBasic, Version=8.0.0.0,   
                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   
                      processorArchitecture=MSIL"   
                initializeData="FileLogWriter"/>  
        </sharedListeners>  
    </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 類別的新執行個體，並設定名稱。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>使用預設的名稱，初始化 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會設定的執行個體名稱<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>FileLogTraceListener 的類別。  
  
 您可以存取執行個體名稱，透過<xref:System.Diagnostics.TraceListener.Name%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see langword="String" />。 執行個體物件的名稱。</param>
        <summary>使用提供的名稱，初始化 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會設定的執行個體名稱<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>類別`name`。  
  
 您可以存取的執行個體名稱，以為<xref:System.Diagnostics.TraceListener.Name%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public bool Append { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Append" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberSignature Language="VB.NET" Value="Public Property Append As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Append { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>判斷是否要將輸出附加至目前的檔案，或將其寫入新檔案。</summary>
        <value>
          <see langword="Boolean" />，如果為 <see langword="True" /> 表示會將輸出附加至目前的檔案，如果為 <see langword="False" /> 則表示會將輸出寫入新檔案。 這個屬性的預設設定為 <see langword="True" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A>屬性是`False`，輸出會寫入到新的檔案。 若屬性是`True`，輸出就會附加至目前的檔案，除非：  
  
-   輸出檔案已遭其他處理程序。 在此情況下，新的記錄檔會建立與版本號碼，就會合併至<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>名稱。  
  
-   目前檔案大小大於什麼<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>屬性允許。 在此情況下，額外的訊息會捨棄並視<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>屬性，擲回例外狀況。  
  
-   現有的檔案名稱是根據指定的記錄建立排程過期<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>屬性。 在此情況下，會建立新的記錄檔和日期戳記就會合併至<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>名稱。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指出對記錄檔資料流的寫入過程是否會清除緩衝區。</summary>
        <value>
          <see langword="Boolean" />，如果為 <see langword="True" /> 表示會在每次寫入後清除資料流，否則會緩衝記錄項目並且以更有效率的方式寫入。 這個屬性的預設設定為 <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `False`設定<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A>屬性會提供大部分的應用程式的最佳效能，因為它是更有效率的方式一次將多個訊息寫入記錄檔。 您可以使用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>排清目前在記錄檔中的任何訊息方法的輸出緩衝區。 您也可以使用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>方法，這個方法會隱含地關閉記錄檔之前排清資料流。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      </Docs>
    </Member>
    <Member MemberName="BaseFileName">
      <MemberSignature Language="C#" Value="public string BaseFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定記錄檔的主檔名，該名稱是用來建立完整的記錄檔名稱。</summary>
        <value>
          <see langword="String" />。 記錄檔的主檔名。 預設為應用程式的產品名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>屬性決定記錄檔的基底名稱<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>類別寫入。  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>屬性可讓目前的完整記錄檔名稱。 它會產生根據記錄檔路徑、 基底名稱、 日期和數字來區分從不同版本的記錄檔。 可視需要在建立新的記錄檔。  
  
 明確完整記錄檔名稱的格式，是`path` \\ `baseName`[-`dateStamp`] [-`iteration`].log，其中  
  
-   `path`組件由<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>屬性和屬性值設定為<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>屬性。  
  
-   `baseName`部分是基本的記錄檔名稱，由指定<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>屬性。  
  
-   `dateStamp`組件具有格式"YYYY-MM-DD"，並會顯示當<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>設<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>或<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>。  
  
-   如果需要多個記錄檔具有相同`baseName`和`dateStamp`、`iteration`組件正`Integer`，加入至檔案名稱。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>關閉目前記錄檔的基礎資料流，並釋放與目前資料流關聯的任何資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您不需要呼叫<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>方法明確地因為<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>類別會管理基礎資料流。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomLocation">
      <MemberSignature Language="C#" Value="public string CustomLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomLocation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" /> 屬性設定為 <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" /> 時，取得或設定記錄檔目錄。</summary>
        <value>
          <see langword="String" />，這是記錄檔目錄的名稱。 這個屬性的預設值是使用者的應用程式資料目錄。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>屬性設定，它也會設定<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>屬性<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>。  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>屬性將會擲回例外狀況，如果目錄不能解析。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Delimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來分隔記錄訊息內欄位的分隔符號 (Delimiter)。</summary>
        <value>
          <see langword="String" />，這是用來分隔記錄訊息內之欄位的分隔符號。 這個屬性的預設值為 TAB 字元。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>屬性可讓您變更預設的分隔符號。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiskSpaceExhaustedBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property DiskSpaceExhaustedBehavior As DiskSpaceExhaustedOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption get(); void set(Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>決定當寫入記錄檔而可用的磁碟空間少於 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> 屬性所指定的空間時，所要執行的動作。</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />。 決定當寫入記錄檔而可用的磁碟空間少於 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> 屬性所指定的空間時，或是記錄檔大小大於 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" /> 屬性所允許的大小時，所要執行的動作。 預設值是 <see cref="F:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>屬性設定為<xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>，如果不是保留的磁碟空間不足，會以無訊息方式捨棄記錄訊息。 這是預設行為，並且防止簡單應用程式失敗的磁碟空間不足時。  
  
 更穩固的應用程式可以設定<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>屬性<xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException>，並加入`Try...Catch`區塊寫入記錄檔的所有程式碼周圍。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="True" /> 表示同時釋放 Managed 和 Unmanaged 資源，<see langword="False" /> 則表示只釋放 Unmanaged 資源。</param>
        <summary>關閉基礎資料流，並選擇性地釋放 Managed 資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `disposing` 參數為 `True` 時，這個方法會釋放 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 參考的任何 Managed 物件所掌握的資源。 這個方法會叫用每個參考物件的 `Dispose` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> 可以被其他物件呼叫多次。覆寫 <see langword="Dispose" /> 時，請小心不要參考到先前已在對 <see langword="Dispose" /> 的早期呼叫中被處置 (Dispose) 的物件。這個方法會呼叫<see langword="Dispose" />基底類別方法， <see langword="Dispose" />。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要在建立新記錄檔時使用的編碼方式。</summary>
        <value>
          <see cref="T:System.Text.Encoding" />，這是要在建立新記錄檔時使用的編碼方式。 此屬性的預設值為 <see cref="T:System.Text.UTF8Encoding" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時將文字附加到現有的記錄檔，而不是所指定的編碼方式中使用該檔案的編碼方式<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.Text.UTF8Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除寫入目前記錄檔的基礎資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>方法將所有緩衝的資料寫入至目前的記錄檔。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullLogFileName">
      <MemberSignature Language="C#" Value="public string FullLogFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullLogFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullLogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullLogFileName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前的完整記錄檔名稱。</summary>
        <value>
          <see langword="String" />，這是目前的完整記錄檔名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>屬性可讓目前的完整記錄檔名稱。 它會產生根據記錄檔路徑、 基底名稱、 日期和數字來區分從不同版本的記錄檔。 可視需要在建立新的記錄檔。  
  
 明確完整的記錄檔名稱的格式，是`path` \\ `baseName`[-`dateStamp`] [-`iteration`].log，其中：  
  
-   `path`組件由<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>屬性和屬性值設定為<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>屬性。  
  
-   `baseName`部分是基本的記錄檔名稱，由指定<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>屬性。  
  
-   `dateStamp`組件具有格式 YYYY MM DD，，而且它會顯示當<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>是<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>或<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>。  
  
-   如果需要多個記錄檔具有相同`baseName`和`dateStamp`、`iteration`組件正`Integer`，加入至檔案名稱。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得追蹤接聽項所支援的自訂 XML 組態屬性。</summary>
        <returns>
          <see langword="String" /> 陣列，含有這個接聽程式可辨認的 XML 組態屬性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自訂屬性<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>可用於控制行為的執行個體的 XML 組態檔<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>類別。 使用任何其他屬性會造成組態例外狀況。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.TraceSource.GetSupportedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IncludeHostName">
      <MemberSignature Language="C#" Value="public bool IncludeHostName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeHostName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostName { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指出記錄電腦的主機名稱是否應該包含在輸出中。</summary>
        <value>
          <see langword="Boolean" />。 如果應該包含主機識別項則使用 <see langword="True" />，否則使用 <see langword="False" />。 預設值是 <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用屬性來設定的行為<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>和<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileLocation Location" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As LogFileLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileLocation Location { Microsoft::VisualBasic::Logging::LogFileLocation get(); void set(Microsoft::VisualBasic::Logging::LogFileLocation value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定記錄檔的位置。</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />，這是記錄檔的位置。 預設值是 <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>屬性設定為其中一個預先定義的路徑，由的記錄檔路徑<xref:Microsoft.VisualBasic.Logging.LogFileLocation>列舉值。  
  
|**位置值**|**路徑**|  
|------------------------|--------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>|與格式的所有使用者之間共用之應用程式資料路徑：<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> 一般值`BasePath`是：<br /><br /> C:\Documents and Settings\All Users\Application 資料<br /><br /> 值`CompanyName`， `ProductName`，和`ProductVersion`來自組件。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>|啟動應用程式的可執行檔路徑。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>|具有格式的使用者，應用程式資料路徑：<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> 一般值`BasePath`是：<br /><br /> C:\Documents and Settings\\`username`\Application Data<br /><br /> 值`CompanyName`， `ProductName`，和`ProductVersion`會形成組件。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>|目前的系統暫存資料夾的路徑。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>|如果指定的字串<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>是未清空，然後使用它做為路徑; 否則使用使用者的應用程式資料的路徑。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />
      </Docs>
    </Member>
    <Member MemberName="LogFileCreationSchedule">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileCreationSchedule As LogFileCreationScheduleOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption LogFileCreationSchedule { Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption get(); void set(Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>決定要包含在記錄檔名稱中的日期。</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />。 指出要包含在記錄檔名稱中的日期。 預設值是 <see cref="F:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將指定的其中一個<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>列舉值來<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>屬性來指定要在記錄檔的名稱中包含的日期。  
  
 日期格式為 YYYY-MM-DD 的- 記錄檔名稱的格式資訊，請參閱<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。  
  
|**LogFileCreationSchedule 值**|**日期的記錄檔名稱**|  
|---------------------------------------|-----------------------------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>|將目前的日期包含在記錄檔名稱中。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>|不要在記錄檔名稱中包含日期。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>|在記錄檔名稱中包含當週的第一天。<br /><br /> 一週的開始星期六。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="MaxFileSize">
      <MemberSignature Language="C#" Value="public long MaxFileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxFileSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxFileSize { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定允許的記錄檔大小最大值 (以位元組為單位)。</summary>
        <value>
          <see langword="Long" />。 這是允許的記錄檔大小最大值 (以位元組為單位)。 預設值是 5000000。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性來確定該記錄檔不會變得太大。  
  
 如果記錄檔大小 （以位元組為單位） 大於此屬性值，然後當<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>值而定的類別會嘗試將訊息寫入記錄檔中，會捨棄該訊息和失敗是無訊息或例外狀況就會擲回<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>屬性。 否則，訊息會寫入記錄檔，（以位元組為單位） 的可用磁碟空間數量是否小於<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">當這個屬性設定為小於 1000 的值時。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="ReserveDiskSpace">
      <MemberSignature Language="C#" Value="public long ReserveDiskSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReserveDiskSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ReserveDiskSpace As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReserveDiskSpace { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定將訊息寫入記錄檔前所需的可用磁碟空間總數 (以位元組為單位)。</summary>
        <value>
          <see langword="Long" />。 這是所需的可用磁碟空間總數。 預設值為 10000000。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用這個屬性來確定該記錄檔未完全填滿磁碟。  
  
 如果數量的可用磁碟空間 （以位元組為單位） 小於的值，這個屬性，然後當<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>類別嘗試將訊息寫入記錄檔，會捨棄該訊息和失敗是無訊息或例外狀況就會擲回的值而定 <c2 > <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> 屬性。 否則，訊息會寫入記錄檔，如果記錄檔案大小 （以位元組為單位） 大於<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">當這個屬性設定為小於 0 的值時。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將追蹤資料寫入輸出檔。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> 方法不適合由應用程式程式碼呼叫。 會呼叫這些方法的成員<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>類別來寫入追蹤輸出的資料。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> 物件，包含目前處理程序識別碼、執行緒識別碼與堆疊追蹤資訊。</param>
        <param name="source">叫用這個方法之追蹤來源的名稱。</param>
        <param name="eventType">其中一個 <see cref="T:System.Diagnostics.TraceEventType" /> 列舉值。</param>
        <param name="id">事件的數值識別項。</param>
        <param name="data">要發出的追蹤資料。</param>
        <summary>寫入追蹤資訊、資料物件，及事件資訊至輸出檔或資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法：  
  
1.  格式化輸出的資料和內容資訊。  
  
2.  若有需要，請建立新的記錄檔。  
  
3.  您可以將資訊寫入記錄檔。  
  
 如需有關如何建立新的記錄檔的詳細資訊，請參閱<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。  
  
 下表列出的輸出欄位中出現的順序。 欄位字串所分隔的<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>屬性指定，後面接著行結束字元。  
  
|**欄位**|**輸出的條件**|**描述**|  
|---------------|--------------------------|---------------------|  
|`source`|永遠|`name` 的值。|  
|`severity`|永遠|列舉值名稱`eventType`。|  
|`id`|永遠|`id` 的字串表示。|  
|`message`|永遠|`data` 的字串表示。|  
|`callStack`|當<xref:System.Diagnostics.TraceOptions.Callstack>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|<xref:System.Diagnostics.TraceEventCache.Callstack%2A>屬性`eventCache`。|  
|`CorrelationID`|當<xref:System.Diagnostics.TraceOptions.LogicalOperationStack>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>屬性`eventCache`。|  
|`DateTime`|當<xref:System.Diagnostics.TraceOptions.DateTime>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|字串表示<xref:System.Diagnostics.TraceEventCache.DateTime%2A>屬性`eventCache`。 而異的文化特性用於字串轉換。|  
|`ProcessID`|當<xref:System.Diagnostics.TraceOptions.ProcessId>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|字串表示<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>屬性`eventCache`。 而異的文化特性用於字串轉換。|  
|`ThreadID`|當<xref:System.Diagnostics.TraceOptions.ThreadId>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>屬性`eventCache`。|  
|`Timestamp`|當<xref:System.Diagnostics.TraceOptions.Timestamp>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|字串表示<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>屬性`eventCache`。 而異的文化特性用於字串轉換。|  
|`HostName`|當<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>屬性是`True`。|電腦的名稱。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> 物件，包含目前處理程序識別碼、執行緒識別碼與堆疊追蹤資訊。</param>
        <param name="source">叫用這個方法之追蹤來源的名稱。</param>
        <param name="eventType">其中一個 <see cref="T:System.Diagnostics.TraceEventType" /> 列舉值。</param>
        <param name="id">事件的數值識別項。</param>
        <param name="data">要發出做為資料的物件陣列。</param>
        <summary>將追蹤資訊、資料物件的陣列及事件資訊寫入至輸出檔或資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法：  
  
1.  格式化輸出中的資料和內容資訊  
  
2.  若有需要，建立新的記錄檔，  
  
3.  您可以將資訊寫入記錄檔。  
  
 如需有關如何建立新的記錄檔的詳細資訊，請參閱<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。  
  
 下表列出的輸出欄位中出現的順序。 欄位字串所分隔的<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>屬性指定，後面接著行結束字元。  
  
|**欄位**|**輸出的條件**|**描述**|  
|---------------|--------------------------|---------------------|  
|`source`|永遠|`name` 的值。|  
|`severity`|永遠|列舉值名稱`eventType`。|  
|`id`|永遠|`id` 的字串表示。|  
|`message`|永遠|字串，其中包含每個項目中的字串表示`data`，區隔<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>。|  
|`callStack`|當<xref:System.Diagnostics.TraceOptions.Callstack>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|<xref:System.Diagnostics.TraceEventCache.Callstack%2A>屬性`eventCache`。|  
|`CorrelationID`|當<xref:System.Diagnostics.TraceOptions.LogicalOperationStack>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>屬性`eventCache`。|  
|`DateTime`|當<xref:System.Diagnostics.TraceOptions.DateTime>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|字串表示<xref:System.Diagnostics.TraceEventCache.DateTime%2A>屬性`eventCache`。 而異的文化特性用於字串轉換。|  
|`ProcessID`|當<xref:System.Diagnostics.TraceOptions.ProcessId>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|字串表示<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>屬性`eventCache`。 而異的文化特性用於字串轉換。|  
|`ThreadID`|當<xref:System.Diagnostics.TraceOptions.ThreadId>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>屬性`eventCache`。|  
|`Timestamp`|當<xref:System.Diagnostics.TraceOptions.Timestamp>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|字串表示<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>屬性`eventCache`。 而異的文化特性用於字串轉換。|  
|`HostName`|當<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>屬性是`True`。|電腦的名稱。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將追蹤和事件資訊寫入輸出檔或資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> 方法不適合由應用程式程式碼呼叫。 會呼叫這些方法的成員<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>類別來寫入追蹤輸出的資料。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> 物件，包含目前處理程序識別碼、執行緒識別碼與堆疊追蹤資訊。</param>
        <param name="source">叫用這個方法之追蹤來源的名稱。</param>
        <param name="eventType">其中一個 <see cref="T:System.Diagnostics.TraceEventType" /> 列舉值。</param>
        <param name="id">事件的數值識別項。</param>
        <param name="message">要寫入的訊息。</param>
        <summary>將追蹤資訊、訊息和事件資訊寫入至輸出檔或資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法：  
  
1.  格式化輸出的資料和內容資訊。  
  
2.  若有需要，請建立新的記錄檔。  
  
3.  您可以將資訊寫入記錄檔。  
  
 如需有關如何建立新的記錄檔的詳細資訊，請參閱<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。  
  
 下表列出的輸出欄位以它們出現的順序。 欄位字串所分隔的<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>屬性指定，後面接著行結束字元。  
  
|**欄位**|**輸出的條件**|**描述**|  
|---------------|--------------------------|---------------------|  
|`source`|永遠。|`name` 的值。|  
|`severity`|永遠。|列舉值名稱`eventType`。|  
|`id`|永遠。|`id` 的字串表示。|  
|`message`|永遠。|`message` 的值。|  
|`callStack`|當<xref:System.Diagnostics.TraceOptions.Callstack>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|<xref:System.Diagnostics.TraceEventCache.Callstack%2A>屬性`eventCache`。|  
|`CorrelationID`|當<xref:System.Diagnostics.TraceOptions.LogicalOperationStack>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>屬性`eventCache`。|  
|`DateTime`|當<xref:System.Diagnostics.TraceOptions.DateTime>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|字串表示<xref:System.Diagnostics.TraceEventCache.DateTime%2A>屬性`eventCache`。 而異的文化特性用於字串轉換。|  
|`ProcessID`|當<xref:System.Diagnostics.TraceOptions.ProcessId>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|字串表示<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>屬性`eventCache`。 而異的文化特性用於字串轉換。|  
|`ThreadID`|當<xref:System.Diagnostics.TraceOptions.ThreadId>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>屬性`eventCache`。|  
|`Timestamp`|當<xref:System.Diagnostics.TraceOptions.Timestamp>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|字串表示<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>屬性`eventCache`。 而異的文化特性用於字串轉換。|  
|`HostName`|當<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>屬性是`True`。|電腦的名稱。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> 物件，包含目前處理程序識別碼、執行緒識別碼與堆疊追蹤資訊。</param>
        <param name="source">叫用這個方法之追蹤來源的名稱。</param>
        <param name="eventType">其中一個 <see cref="T:System.Diagnostics.TraceEventType" /> 列舉值。</param>
        <param name="id">事件的數值識別項。</param>
        <param name="format">包含零或多個格式項目的格式字串，它與 <c>args</c> 陣列中的物件相對應。</param>
        <param name="args">
          <see langword="Object" /> 陣列，含有零或多個要格式化的物件。</param>
        <summary>寫入追蹤資訊、格式化的物件陣列，及事件資訊至輸出檔或資料流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法：  
  
1.  格式化輸出的資料和內容資訊。  
  
2.  建立新的新的記錄檔，如有必要。  
  
3.  您可以將資訊寫入記錄檔。  
  
 如需有關如何建立新的記錄檔的詳細資訊，請參閱<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。  
  
 下表列出的輸出欄位以它們出現的順序。 欄位字串所分隔的<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>屬性指定，後面接著行結束字元。  
  
|**欄位**|**輸出的條件**|**描述**|  
|---------------|--------------------------|---------------------|  
|`source`|永遠|`name` 的值。|  
|`severity`|永遠|列舉值名稱`eventType`。|  
|`id`|永遠|`id` 的字串表示。|  
|`message`|永遠|中的資料`args`以格式化`format`字串，對於字串轉換使用文化特性而異。|  
|`callStack`|當<xref:System.Diagnostics.TraceOptions.Callstack>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|<xref:System.Diagnostics.TraceEventCache.Callstack%2A>屬性`eventCache`。|  
|`CorrelationID`|當<xref:System.Diagnostics.TraceOptions.LogicalOperationStack>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>屬性`eventCache`。|  
|`DateTime`|當<xref:System.Diagnostics.TraceOptions.DateTime>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|字串表示<xref:System.Diagnostics.TraceEventCache.DateTime%2A>屬性`eventCache`。 而異的文化特性用於字串轉換。|  
|`ProcessID`|當<xref:System.Diagnostics.TraceOptions.ProcessId>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|字串表示<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>屬性`eventCache`。 而異的文化特性用於字串轉換。|  
|`ThreadID`|當<xref:System.Diagnostics.TraceOptions.ThreadId>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>屬性`eventCache`。|  
|`Timestamp`|當<xref:System.Diagnostics.TraceOptions.Timestamp>設定旗標<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>屬性。|字串表示<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>屬性`eventCache`。 而異的文化特性用於字串轉換。|  
|`HostName`|當<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>屬性是`True`。|電腦的名稱。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <see langword="String" />。 要寫入的自訂訊息。</param>
        <summary>將訊息逐字寫入磁碟，但不含任何其他內容資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A>方法會將特定訊息寫入記錄檔，不含任何額外的內容資訊。  
  
 使用其中一個<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>方法，以在記錄檔輸出中包含的內容資訊。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <see langword="String" />。 要寫入的自訂訊息。</param>
        <summary>將訊息逐字寫入磁碟，後面接著目前的行結束字元，但不含任何其他內容資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A>方法會將特定訊息寫入記錄檔，不含任何額外的內容資訊。  
  
 使用其中一個<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>方法，以在記錄檔輸出中包含的內容資訊。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>