<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="338473ae149afc3abbbba5fe33991b0f472b9e6d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39855094" /></Metadata><TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <TypeSignature Language="F#" Value="type IDispatchMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2ea50-101">定義方法，這些方法可以在服務應用程式中啟用傳入和傳出應用程式訊息的自訂檢查或修改。</span><span class="sxs-lookup"><span data-stu-id="2ea50-101">Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ea50-102">實作 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>，以便在分派要求訊息至作業之前，或在傳回回覆訊息至呼叫端之前，檢查或修改傳入或傳出的應用程式訊息。</span><span class="sxs-lookup"><span data-stu-id="2ea50-102">Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</span></span> <span data-ttu-id="2ea50-103">有非常多的情況都必須在叫用預定的作業之前攔截訊息。</span><span class="sxs-lookup"><span data-stu-id="2ea50-103">There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</span></span> <span data-ttu-id="2ea50-104">例如，您可以記錄傳入的應用程式訊息，或根據訊息標頭執行某項功能。</span><span class="sxs-lookup"><span data-stu-id="2ea50-104">For example, you can log incoming application messages or perform some feature based on a message header.</span></span>  
  
 <span data-ttu-id="2ea50-105">一般而言，服務行為 (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>)、端點行為 (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>) 或合約行為 (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>) 會插入訊息偵測器。</span><span class="sxs-lookup"><span data-stu-id="2ea50-105">Typically, message inspectors are inserted by a service behavior (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), an endpoint behavior (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), or a contract behavior (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span></span> <span data-ttu-id="2ea50-106">這個行為會接著將訊息偵測器新增至 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 集合。</span><span class="sxs-lookup"><span data-stu-id="2ea50-106">The behavior then adds the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span> <span data-ttu-id="2ea50-107">如需有關擴充執行階段行為的詳細資訊，請參閱[擴充 ServiceHost 與服務模型層](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)。</span><span class="sxs-lookup"><span data-stu-id="2ea50-107">For more information about extending the runtime using behaviors, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span></span>  
  
-   <span data-ttu-id="2ea50-108"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 方法會在接收訊息之後但分派該訊息至預定作業之前，啟用自訂行為。</span><span class="sxs-lookup"><span data-stu-id="2ea50-108">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation.</span></span>  
  
-   <span data-ttu-id="2ea50-109"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 方法會在作業回傳之後但傳送回覆之前，啟用自訂行為。</span><span class="sxs-lookup"><span data-stu-id="2ea50-109">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ea50-110">不論是單向作業或是要求-回覆作業，<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 物件永遠會在訊息分派期間於同一點上被呼叫。</span><span class="sxs-lookup"><span data-stu-id="2ea50-110"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ea50-111">下列程式碼範例將示範會在被叫用時將字串寫入主控台的基本 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>。</span><span class="sxs-lookup"><span data-stu-id="2ea50-111">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="2ea50-112">下列程式碼範例將示範會將 <xref:System.ServiceModel.Description.IServiceBehavior>`Inspector` 新增至 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 集合的 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 實作。</span><span class="sxs-lookup"><span data-stu-id="2ea50-112">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="2ea50-113">下列程式碼範例將示範如何使用應用程式組態檔來載入會插入 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 的服務行為。</span><span class="sxs-lookup"><span data-stu-id="2ea50-113">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveRequest :  * System.ServiceModel.IClientChannel * System.ServiceModel.InstanceContext -&gt; obj" Usage="iDispatchMessageInspector.AfterReceiveRequest (request, channel, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="2ea50-114">要求訊息。</span><span class="sxs-lookup"><span data-stu-id="2ea50-114">The request message.</span></span></param>
        <param name="channel"><span data-ttu-id="2ea50-115">傳入通道。</span><span class="sxs-lookup"><span data-stu-id="2ea50-115">The incoming channel.</span></span></param>
        <param name="instanceContext"><span data-ttu-id="2ea50-116">目前的服務執行個體。</span><span class="sxs-lookup"><span data-stu-id="2ea50-116">The current service instance.</span></span></param>
        <summary><span data-ttu-id="2ea50-117">在收到傳入訊息之後但分派該訊息至預定作業之前初始化呼叫。</span><span class="sxs-lookup"><span data-stu-id="2ea50-117">Called after an inbound message has been received but before the message is dispatched to the intended operation.</span></span></summary>
        <returns><span data-ttu-id="2ea50-118">用來與狀態相互關聯的物件。</span><span class="sxs-lookup"><span data-stu-id="2ea50-118">The object used to correlate state.</span></span> <span data-ttu-id="2ea50-119">這個物件會在 <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> 方法中傳回。</span><span class="sxs-lookup"><span data-stu-id="2ea50-119">This object is passed back in the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ea50-120">使用 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 方法，即可檢查或修改傳入訊息、提供訊息的用戶端通道和目前的服務執行個體。</span><span class="sxs-lookup"><span data-stu-id="2ea50-120">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</span></span> <span data-ttu-id="2ea50-121">傳回值可以是您要用來產生相互關聯的任何物件；這個傳回值會在 `correlationState` 方法的 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 參數中傳回給您。</span><span class="sxs-lookup"><span data-stu-id="2ea50-121">The return value can be any object that you want to use for correlation purposes; it is returned to you as the `correlationState` parameter in the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2ea50-122">除非您緩衝整個訊息並建立複本，否則無法使用訊息的本文。</span><span class="sxs-lookup"><span data-stu-id="2ea50-122">You cannot use the body of the message unless you buffer the entire message and make a copy.</span></span> <span data-ttu-id="2ea50-123">如果這樣做，您必須為訊息建立兩份複本：一份用來檢查，而另一份用來覆寫 `request` 參數。</span><span class="sxs-lookup"><span data-stu-id="2ea50-123">If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ea50-124">下列程式碼範例將示範會在被叫用時將字串寫入主控台的基本 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>。</span><span class="sxs-lookup"><span data-stu-id="2ea50-124">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="2ea50-125">下列程式碼範例將示範會將 <xref:System.ServiceModel.Description.IServiceBehavior>`Inspector` 新增至 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 集合的 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 實作。</span><span class="sxs-lookup"><span data-stu-id="2ea50-125">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="2ea50-126">下列程式碼範例將示範如何使用應用程式組態檔來載入會插入 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 的服務行為。</span><span class="sxs-lookup"><span data-stu-id="2ea50-126">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendReply :  * obj -&gt; unit" Usage="iDispatchMessageInspector.BeforeSendReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply"><span data-ttu-id="2ea50-127">回覆訊息。</span><span class="sxs-lookup"><span data-stu-id="2ea50-127">The reply message.</span></span> <span data-ttu-id="2ea50-128">如果作業是單向的，則這個值為 null。</span><span class="sxs-lookup"><span data-stu-id="2ea50-128">This value is null if the operation is one way.</span></span></param>
        <param name="correlationState"><span data-ttu-id="2ea50-129">從 <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> 方法傳回的相互關聯物件。</span><span class="sxs-lookup"><span data-stu-id="2ea50-129">The correlation object returned from the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> method.</span></span></param>
        <summary><span data-ttu-id="2ea50-130">會在作業回傳之後但傳送回覆訊息之前初始化呼叫。</span><span class="sxs-lookup"><span data-stu-id="2ea50-130">Called after the operation has returned but before the reply message is sent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ea50-131">使用 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 方法，即可在傳送傳回訊息之前執行自訂行為。</span><span class="sxs-lookup"><span data-stu-id="2ea50-131">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method to perform custom behavior prior to sending the return message.</span></span> <span data-ttu-id="2ea50-132">`correlationState` 是從 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 方法傳回的物件，而您可以使用這個方法，在傳入和傳出呼叫之間執行相互關聯來支援您的行為。</span><span class="sxs-lookup"><span data-stu-id="2ea50-132">The `correlationState` is the object returned from the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method that you can use to perform correlation between inbound and outbound calls to support your behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ea50-133">下列程式碼範例將示範會在被叫用時將字串寫入主控台的基本 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>。</span><span class="sxs-lookup"><span data-stu-id="2ea50-133">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="2ea50-134">下列程式碼範例將示範會將 <xref:System.ServiceModel.Description.IServiceBehavior>`Inspector` 新增至 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 集合的 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 實作。</span><span class="sxs-lookup"><span data-stu-id="2ea50-134">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="2ea50-135">下列程式碼範例將示範如何使用應用程式組態檔來載入會插入 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 的服務行為。</span><span class="sxs-lookup"><span data-stu-id="2ea50-135">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>