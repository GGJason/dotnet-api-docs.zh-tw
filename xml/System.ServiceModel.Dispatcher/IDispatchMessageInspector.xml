<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b993105bcecb3322ed5684bf4865f5440f8cc008" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30518412" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定義方法，這些方法可以在服務應用程式中啟用傳入和傳出應用程式訊息的自訂檢查或修改。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 實作 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>，以便在分派要求訊息至作業之前，或在傳回回覆訊息至呼叫端之前，檢查或修改傳入或傳出的應用程式訊息。 有非常多的情況都必須在叫用預定的作業之前攔截訊息。 例如，您可以記錄傳入的應用程式訊息，或根據訊息標頭執行某項功能。  
  
 一般而言，服務行為 (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>)、端點行為 (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>) 或合約行為 (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>) 會插入訊息偵測器。 這個行為會接著將訊息偵測器新增至 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 集合。 如需擴充執行階段使用行為的詳細資訊，請參閱[擴充 ServiceHost 與服務模型層](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)。  
  
-   <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 方法會在接收訊息之後但分派該訊息至預定作業之前，啟用自訂行為。  
  
-   <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 方法會在作業回傳之後但傳送回覆之前，啟用自訂行為。  
  
> [!NOTE]
>  不論是單向作業或是要求-回覆作業，<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 物件永遠會在訊息分派期間於同一點上被呼叫。  
  
   
  
## Examples  
 下列程式碼範例將示範會在被叫用時將字串寫入主控台的基本 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>。  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 下列程式碼範例將示範會將 <xref:System.ServiceModel.Description.IServiceBehavior>`Inspector` 新增至 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 集合的 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 實作。  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 下列程式碼範例將示範如何使用應用程式組態檔來載入會插入 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 的服務行為。  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request">要求訊息。</param>
        <param name="channel">傳入通道。</param>
        <param name="instanceContext">目前的服務執行個體。</param>
        <summary>在收到傳入訊息之後但分派該訊息至預定作業之前初始化呼叫。</summary>
        <returns>用來與狀態相互關聯的物件。 這個物件會在 <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> 方法中傳回。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 方法，即可檢查或修改傳入訊息、提供訊息的用戶端通道和目前的服務執行個體。 傳回值可以是您要用來產生相互關聯的任何物件；這個傳回值會在 `correlationState` 方法的 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 參數中傳回給您。  
  
> [!IMPORTANT]
>  除非您緩衝整個訊息並建立複本，否則無法使用訊息的本文。 如果這樣做，您必須為訊息建立兩份複本：一份用來檢查，而另一份用來覆寫 `request` 參數。  
  
   
  
## Examples  
 下列程式碼範例將示範會在被叫用時將字串寫入主控台的基本 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>。  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 下列程式碼範例將示範會將 <xref:System.ServiceModel.Description.IServiceBehavior>`Inspector` 新增至 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 集合的 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 實作。  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 下列程式碼範例將示範如何使用應用程式組態檔來載入會插入 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 的服務行為。  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">回覆訊息。 如果作業是單向的，則這個值為 null。</param>
        <param name="correlationState">從 <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> 方法傳回的相互關聯物件。</param>
        <summary>會在作業回傳之後但傳送回覆訊息之前初始化呼叫。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 方法，即可在傳送傳回訊息之前執行自訂行為。 `correlationState` 是從 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 方法傳回的物件，而您可以使用這個方法，在傳入和傳出呼叫之間執行相互關聯來支援您的行為。  
  
   
  
## Examples  
 下列程式碼範例將示範會在被叫用時將字串寫入主控台的基本 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>。  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 下列程式碼範例將示範會將 <xref:System.ServiceModel.Description.IServiceBehavior>`Inspector` 新增至 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 集合的 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 實作。  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 下列程式碼範例將示範如何使用應用程式組態檔來載入會插入 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 的服務行為。  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>