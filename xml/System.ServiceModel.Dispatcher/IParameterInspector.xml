<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IParameterInspector.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac589566eb5793aa3f3ad4d0a23250acea1ef5b6913.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89566eb5793aa3f3ad4d0a23250acea1ef5b6913</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>Defines the contract implemented by custom parameter inspectors that enables inspection or modification of information prior to and subsequent to calls on either the client or the service.</source>
          <target state="translated">定義可透過自訂參數偵測器實作的合約，您可以在用戶端或服務上進行呼叫前後，使用這個參數偵測器來檢查或修改資訊。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> interface to create a custom parameter inspector that can view and modify the contents of a call both before the call and after the call in either client or service applications.</source>
          <target state="translated">實作 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> 介面，即可建立自訂參數偵測器，以便在用戶端或服務應用程式中進行呼叫前後檢視和修改呼叫的內容。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</source>
          <target state="translated">從用戶端進行傳出呼叫時會先叫用偵測器，然後序列化要求內容，並將結果傳送給服務。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</source>
          <target state="translated">在完成還原序列化回應之後，但在傳回值分派給 Proxy 方法之前，也會呼叫這個偵測器。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation.</source>
          <target state="translated">對服務進行傳入呼叫時，會在完成還原序列化參數之後，但在結果分派至服務作業之前叫用偵測器。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType&gt;</ph> or the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType&gt;</ph> properties to add an <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> implementation to the inspectors collection for a particular operation.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType&gt;</ph> 或 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType&gt;</ph> 屬性，即可將 <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> 實作加入至特定作業的偵測器集合。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> Developers and administrators must ensure that the interaction with other <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> implementations is understood.</source>
          <target state="translated"><bpt id="p1">**</bpt>請注意<ept id="p1">**</ept>開發人員和系統管理員必須確定與其他的互動<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph>可解讀的實作。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>The following code example shows an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> implementation that:</source>
          <target state="translated">下列程式碼範例會示範 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> 實作：</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</source>
          <target state="translated">當服務已經將回應還原序列化或是用戶端已經將要求序列化之後，將作業名稱和傳回值寫入至主控台。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>Writes the operation name to the console after deserializing a response on the client or after a response has been serialized on the service.</source>
          <target state="translated">在用戶端上還原序列化回應之後，或在服務上序列化回應之後，將作業名稱寫入至主控台。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>The following code example shows how to use either <ph id="ph1">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph> to insert <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> objects.</source>
          <target state="translated">下列程式碼範例會示範如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph>、<ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> 或 <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph> 來插入 <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>The name of the invoked operation.</source>
          <target state="translated">叫用的作業名稱。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>Any output objects.</source>
          <target state="translated">任何輸出物件。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>The return value of the operation.</source>
          <target state="translated">作業的傳回值。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>Any correlation state returned from the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /&gt;</ph> method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">從 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /&gt;</ph> 方法傳回的任何相互關聯狀態，或是 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>Called after client calls are returned and before service responses are sent.</source>
          <target state="translated">當用戶端呼叫已傳回後，且在服務回應傳送之前進行呼叫。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</source>
          <target state="translated">從用戶端進行傳出呼叫時會先叫用偵測器，然後序列化要求內容，並將結果傳送給服務。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</source>
          <target state="translated">在完成還原序列化回應之後，但在傳回值分派給 Proxy 方法之前，也會呼叫這個偵測器。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation.</source>
          <target state="translated">對服務進行傳入呼叫時，會在完成還原序列化參數之後，但在結果分派至服務作業之前叫用偵測器。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>The following code example shows an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> implementation that:</source>
          <target state="translated">下列程式碼範例會示範 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> 實作：</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</source>
          <target state="translated">當服務已經將回應還原序列化或是用戶端已經將要求序列化之後，將作業名稱和傳回值寫入至主控台。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>Writes the operation name to the console after deserializing a response on the client or after a response has been serialized on the service.</source>
          <target state="translated">在用戶端上還原序列化回應之後，或在服務上序列化回應之後，將作業名稱寫入至主控台。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>The following code example shows how to use either <ph id="ph1">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph> to insert <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> objects.</source>
          <target state="translated">下列程式碼範例會示範如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph>、<ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> 或 <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph> 來插入 <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>The name of the operation.</source>
          <target state="translated">作業的名稱。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>The objects passed to the method by the client.</source>
          <target state="translated">用戶端傳遞給方法的物件。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>Called before client calls are sent and after service responses are returned.</source>
          <target state="translated">在用戶端呼叫傳送前，且在服務回應傳回之後進行呼叫。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>The correlation state that is returned as the <ph id="ph1">&lt;paramref name="correlationState" /&gt;</ph> parameter in <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;paramref name="correlationState" /&gt;</ph> 中當做 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" /&gt;</ph> 參數傳回的相互關聯狀態。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>Return <ph id="ph1">&lt;see langword="null" /&gt;</ph> if you do not intend to use correlation state.</source>
          <target state="translated">如果您不想要使用相互關聯狀態，請傳回 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</source>
          <target state="translated">從用戶端進行傳出呼叫時會先叫用偵測器，然後序列化要求內容，並將結果傳送給服務。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</source>
          <target state="translated">在完成還原序列化回應之後，但在傳回值分派給 Proxy 方法之前，也會呼叫這個偵測器。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>On inbound calls to a service, the inspector is invoked after the request contents are deserialized and dispatched to the service operation and before the response contents are serialized and sent to the client.</source>
          <target state="translated">對服務進行傳入呼叫時，會在要求內容已還原序列化並分派至服務作業之後，而且在回應內容已序列化並傳送至用戶端之前，叫用偵測器。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>The following code example shows an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> implementation that:</source>
          <target state="translated">下列程式碼範例會示範 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> 實作：</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</source>
          <target state="translated">當服務已經將回應還原序列化或是用戶端已經將要求序列化之後，將作業名稱和傳回值寫入至主控台。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>Writes the operation name to the console after deserializing a response on the client or after a response is serialized on the service.</source>
          <target state="translated">在用戶端上還原序列化回應之後，或在服務上已序列化回應之後，將作業名稱寫入至主控台。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>The following code example shows how to use either <ph id="ph1">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph> to insert <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> objects.</source>
          <target state="translated">下列程式碼範例會示範如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph>、<ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> 或 <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph> 來插入 <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> 物件。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>