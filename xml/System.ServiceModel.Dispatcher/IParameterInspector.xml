<Type Name="IParameterInspector" FullName="System.ServiceModel.Dispatcher.IParameterInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="49ec733d74601a56320493ded4b91bb70244b411" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56760944" /></Metadata><TypeSignature Language="C#" Value="public interface IParameterInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParameterInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IParameterInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IParameterInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IParameterInspector" />
  <TypeSignature Language="F#" Value="type IParameterInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b96c0-101">定義可透過自訂參數偵測器實作的合約，您可以在用戶端或服務上進行呼叫前後，使用這個參數偵測器來檢查或修改資訊。</span><span class="sxs-lookup"><span data-stu-id="b96c0-101">Defines the contract implemented by custom parameter inspectors that enables inspection or modification of information prior to and subsequent to calls on either the client or the service.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b96c0-102">實作 <xref:System.ServiceModel.Dispatcher.IParameterInspector> 介面，即可建立自訂參數偵測器，以便在用戶端或服務應用程式中進行呼叫前後檢視和修改呼叫的內容。</span><span class="sxs-lookup"><span data-stu-id="b96c0-102">Implement the <xref:System.ServiceModel.Dispatcher.IParameterInspector> interface to create a custom parameter inspector that can view and modify the contents of a call both before the call and after the call in either client or service applications.</span></span>  
  
 <span data-ttu-id="b96c0-103">從用戶端進行傳出呼叫時會先叫用偵測器，然後序列化要求內容，並將結果傳送給服務。</span><span class="sxs-lookup"><span data-stu-id="b96c0-103">On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</span></span> <span data-ttu-id="b96c0-104">在完成還原序列化回應之後，但在傳回值分派給 Proxy 方法之前，也會呼叫這個偵測器。</span><span class="sxs-lookup"><span data-stu-id="b96c0-104">The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</span></span>  
  
 <span data-ttu-id="b96c0-105">對服務進行傳入呼叫時，會在完成還原序列化參數之後，但在結果分派至服務作業之前叫用偵測器。</span><span class="sxs-lookup"><span data-stu-id="b96c0-105">On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation.</span></span>  
  
 <span data-ttu-id="b96c0-106">使用 <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> 或 <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> 屬性，即可將 <xref:System.ServiceModel.Dispatcher.IParameterInspector> 實作加入至特定作業的偵測器集合。</span><span class="sxs-lookup"><span data-stu-id="b96c0-106">Use the <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> or the <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> properties to add an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation to the inspectors collection for a particular operation.</span></span>  
  
 <span data-ttu-id="b96c0-107">**附註**開發人員和管理員必須確定與其他互動<xref:System.ServiceModel.Dispatcher.IParameterInspector>了解實作。</span><span class="sxs-lookup"><span data-stu-id="b96c0-107">**Note** Developers and administrators must ensure that the interaction with other <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementations is understood.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b96c0-108">下列程式碼範例會示範 <xref:System.ServiceModel.Dispatcher.IParameterInspector> 實作：</span><span class="sxs-lookup"><span data-stu-id="b96c0-108">The following code example shows an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation that:</span></span>  
  
-   <span data-ttu-id="b96c0-109">當服務已經將回應還原序列化或是用戶端已經將要求序列化之後，將作業名稱和傳回值寫入至主控台。</span><span class="sxs-lookup"><span data-stu-id="b96c0-109">Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</span></span>  
  
-   <span data-ttu-id="b96c0-110">在用戶端上還原序列化回應之後，或在服務上序列化回應之後，將作業名稱寫入至主控台。</span><span class="sxs-lookup"><span data-stu-id="b96c0-110">Writes the operation name to the console after deserializing a response on the client or after a response has been serialized on the service.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="b96c0-111">下列程式碼範例會示範如何使用 <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>、<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> 或 <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> 來插入 <xref:System.ServiceModel.Dispatcher.IParameterInspector> 物件。</span><span class="sxs-lookup"><span data-stu-id="b96c0-111">The following code example shows how to use either <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> or <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> to insert <xref:System.ServiceModel.Dispatcher.IParameterInspector> objects.</span></span>  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterCall">
      <MemberSignature Language="C#" Value="public void AfterCall (string operationName, object[] outputs, object returnValue, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterCall(string operationName, object[] outputs, object returnValue, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterCall (operationName As String, outputs As Object(), returnValue As Object, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ outputs, System::Object ^ returnValue, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member AfterCall : string * obj[] * obj * obj -&gt; unit" Usage="iParameterInspector.AfterCall (operationName, outputs, returnValue, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="outputs" Type="System.Object[]" />
        <Parameter Name="returnValue" Type="System.Object" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="operationName"><span data-ttu-id="b96c0-112">叫用的作業名稱。</span><span class="sxs-lookup"><span data-stu-id="b96c0-112">The name of the invoked operation.</span></span></param>
        <param name="outputs"><span data-ttu-id="b96c0-113">任何輸出物件。</span><span class="sxs-lookup"><span data-stu-id="b96c0-113">Any output objects.</span></span></param>
        <param name="returnValue"><span data-ttu-id="b96c0-114">作業的傳回值。</span><span class="sxs-lookup"><span data-stu-id="b96c0-114">The return value of the operation.</span></span></param>
        <param name="correlationState"><span data-ttu-id="b96c0-115">從 <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> 方法傳回的任何相互關聯狀態，或是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b96c0-115">Any correlation state returned from the <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> method, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b96c0-116">當用戶端呼叫已傳回後，且在服務回應傳送之前進行呼叫。</span><span class="sxs-lookup"><span data-stu-id="b96c0-116">Called after client calls are returned and before service responses are sent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b96c0-117">從用戶端進行傳出呼叫時會先叫用偵測器，然後序列化要求內容，並將結果傳送給服務。</span><span class="sxs-lookup"><span data-stu-id="b96c0-117">On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</span></span> <span data-ttu-id="b96c0-118">在完成還原序列化回應之後，但在傳回值分派給 Proxy 方法之前，也會呼叫這個偵測器。</span><span class="sxs-lookup"><span data-stu-id="b96c0-118">The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</span></span>  
  
 <span data-ttu-id="b96c0-119">對服務進行傳入呼叫時，會在完成還原序列化參數之後，但在結果分派至服務作業之前叫用偵測器。</span><span class="sxs-lookup"><span data-stu-id="b96c0-119">On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b96c0-120">下列程式碼範例會示範 <xref:System.ServiceModel.Dispatcher.IParameterInspector> 實作：</span><span class="sxs-lookup"><span data-stu-id="b96c0-120">The following code example shows an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation that:</span></span>  
  
-   <span data-ttu-id="b96c0-121">當服務已經將回應還原序列化或是用戶端已經將要求序列化之後，將作業名稱和傳回值寫入至主控台。</span><span class="sxs-lookup"><span data-stu-id="b96c0-121">Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</span></span>  
  
-   <span data-ttu-id="b96c0-122">在用戶端上還原序列化回應之後，或在服務上序列化回應之後，將作業名稱寫入至主控台。</span><span class="sxs-lookup"><span data-stu-id="b96c0-122">Writes the operation name to the console after deserializing a response on the client or after a response has been serialized on the service.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="b96c0-123">下列程式碼範例會示範如何使用 <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>、<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> 或 <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> 來插入 <xref:System.ServiceModel.Dispatcher.IParameterInspector> 物件。</span><span class="sxs-lookup"><span data-stu-id="b96c0-123">The following code example shows how to use either <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, or <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> to insert <xref:System.ServiceModel.Dispatcher.IParameterInspector> objects.</span></span>  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeCall">
      <MemberSignature Language="C#" Value="public object BeforeCall (string operationName, object[] inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeCall(string operationName, object[] inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeCall (operationName As String, inputs As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="abstract member BeforeCall : string * obj[] -&gt; obj" Usage="iParameterInspector.BeforeCall (operationName, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="inputs" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="operationName"><span data-ttu-id="b96c0-124">作業的名稱。</span><span class="sxs-lookup"><span data-stu-id="b96c0-124">The name of the operation.</span></span></param>
        <param name="inputs"><span data-ttu-id="b96c0-125">用戶端傳遞給方法的物件。</span><span class="sxs-lookup"><span data-stu-id="b96c0-125">The objects passed to the method by the client.</span></span></param>
        <summary><span data-ttu-id="b96c0-126">在用戶端呼叫傳送前，且在服務回應傳回之後進行呼叫。</span><span class="sxs-lookup"><span data-stu-id="b96c0-126">Called before client calls are sent and after service responses are returned.</span></span></summary>
        <returns><span data-ttu-id="b96c0-127">在 <paramref name="correlationState" /> 中當做 <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" /> 參數傳回的相互關聯狀態。</span><span class="sxs-lookup"><span data-stu-id="b96c0-127">The correlation state that is returned as the <paramref name="correlationState" /> parameter in <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />.</span></span> <span data-ttu-id="b96c0-128">如果您不想要使用相互關聯狀態，請傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b96c0-128">Return <see langword="null" /> if you do not intend to use correlation state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b96c0-129">從用戶端進行傳出呼叫時會先叫用偵測器，然後序列化要求內容，並將結果傳送給服務。</span><span class="sxs-lookup"><span data-stu-id="b96c0-129">On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</span></span> <span data-ttu-id="b96c0-130">在完成還原序列化回應之後，但在傳回值分派給 Proxy 方法之前，也會呼叫這個偵測器。</span><span class="sxs-lookup"><span data-stu-id="b96c0-130">The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</span></span>  
  
 <span data-ttu-id="b96c0-131">對服務進行傳入呼叫時，會在要求內容已還原序列化並分派至服務作業之後，而且在回應內容已序列化並傳送至用戶端之前，叫用偵測器。</span><span class="sxs-lookup"><span data-stu-id="b96c0-131">On inbound calls to a service, the inspector is invoked after the request contents are deserialized and dispatched to the service operation and before the response contents are serialized and sent to the client.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b96c0-132">下列程式碼範例會示範 <xref:System.ServiceModel.Dispatcher.IParameterInspector> 實作：</span><span class="sxs-lookup"><span data-stu-id="b96c0-132">The following code example shows an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation that:</span></span>  
  
-   <span data-ttu-id="b96c0-133">當服務已經將回應還原序列化或是用戶端已經將要求序列化之後，將作業名稱和傳回值寫入至主控台。</span><span class="sxs-lookup"><span data-stu-id="b96c0-133">Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</span></span>  
  
-   <span data-ttu-id="b96c0-134">在用戶端上還原序列化回應之後，或在服務上已序列化回應之後，將作業名稱寫入至主控台。</span><span class="sxs-lookup"><span data-stu-id="b96c0-134">Writes the operation name to the console after deserializing a response on the client or after a response is serialized on the service.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="b96c0-135">下列程式碼範例會示範如何使用 <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>、<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> 或 <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> 來插入 <xref:System.ServiceModel.Dispatcher.IParameterInspector> 物件。</span><span class="sxs-lookup"><span data-stu-id="b96c0-135">The following code example shows how to use either <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> or <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> to insert <xref:System.ServiceModel.Dispatcher.IParameterInspector> objects.</span></span>  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>