<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IClientMessageInspector.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b72d1feefd5799d09bf0c4a9e11586ef9f36a7d225d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1feefd5799d09bf0c4a9e11586ef9f36a7d225d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>Defines a message inspector object that can be added to the <ph id="ph1">&lt;see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /&gt;</ph> collection to view or modify messages.</source>
          <target state="translated">定義訊息偵測器物件，您可以將這個物件加入至 <ph id="ph1">&lt;see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /&gt;</ph> 集合以檢視或修改訊息。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector&gt;</ph> interface and add it to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A&gt;</ph> collection to inspect or modify messages as they pass through a WCF client object.</source>
          <target state="translated">實作<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector&gt;</ph>介面，並將它加入至<ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A&gt;</ph>來檢查或修改訊息通過的 WCF 用戶端物件的集合。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>For details, see <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph>.</source>
          <target state="translated">如需詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>The following code example shows an implementation that writes strings to the console when the implementation is called.</source>
          <target state="translated">下列程式碼範例將示範會在被呼叫時將字串寫入主控台的實作。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>The following code example shows how to use an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> to insert the client message inspector in the client endpoint.</source>
          <target state="translated">下列程式碼範例將示範如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> 將用戶端訊息偵測器插入到用戶端端點。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</source>
          <target state="translated">最後，下列程式碼範例將示範如何將用戶端組態檔修改成配合特定端點來使用端點行為。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The message to be transformed into types and handed back to the client application.</source>
          <target state="translated">要轉換成各種型別並交還給用戶端應用程式的訊息。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Correlation state data.</source>
          <target state="translated">相互關聯狀態資料。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.</source>
          <target state="translated">啟用在收到回覆訊息之後但在將它傳遞回用戶端應用程式之前的訊息檢查或修改。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A&gt;</ph> to inspect or modify a reply message after it has been received by the WCF client object but before it is deserialized into objects that are returned to the client application.</source>
          <target state="translated">實作<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A&gt;</ph>來檢查或修改之後由 WCF 用戶端物件，但其還原序列化為物件，會傳回給用戶端應用程式之前收到的回覆訊息。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The <ph id="ph1">`correlationState`</ph> is the object returned by the user when <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> is called for this message.</source>
          <target state="translated"><ph id="ph1">`correlationState`</ph> 是使用者針對這個訊息呼叫 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> 時所傳回的物件。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The best practice is to make this a <ph id="ph1">&lt;xref:System.Guid?displayProperty=nameWithType&gt;</ph> to ensure that no two <ph id="ph2">`correlationState`</ph> objects are the same.</source>
          <target state="translated">最好是為這個物件建立 <ph id="ph1">&lt;xref:System.Guid?displayProperty=nameWithType&gt;</ph>，以確保不會出現兩個相同的 <ph id="ph2">`correlationState`</ph> 物件。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows an implementation that writes strings to the console when the implementation is called.</source>
          <target state="translated">下列程式碼範例將示範會在被呼叫時將字串寫入主控台的實作。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows how to use an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> to insert the client message inspector in the client endpoint.</source>
          <target state="translated">下列程式碼範例將示範如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> 將用戶端訊息偵測器插入到用戶端端點。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</source>
          <target state="translated">最後，下列程式碼範例將示範如何將用戶端組態檔修改成配合特定端點來使用端點行為。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The message to be sent to the service.</source>
          <target state="translated">要傳送至服務的訊息。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The WCF client object channel.</source>
          <target state="translated">WCF 用戶端物件通道。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>Enables inspection or modification of a message before a request message is sent to a service.</source>
          <target state="translated">啟用在向服務傳送要求訊息之前的訊息檢查或修改。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The object that is returned as the <ph id="ph1">&lt;paramref name="correlationState" /&gt;</ph> argument of the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">當作 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /&gt;</ph> 方法之 <ph id="ph1">&lt;paramref name="correlationState" /&gt;</ph> 引數傳回的物件。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>This is <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no correlation state is used.</source>
          <target state="translated">如果未使用任何相互關聯狀態，這會是 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The best practice is to make this a <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> to ensure that no two <ph id="ph2">&lt;paramref name="correlationState" /&gt;</ph> objects are the same.</source>
          <target state="translated">最好是為這個物件建立 <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph>，以確保不會出現兩個相同的 <ph id="ph2">&lt;paramref name="correlationState" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> to inspect or modify a request message before it is sent.</source>
          <target state="translated">實作 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph>，以便在傳送要求訊息之前檢查或修改它。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The following code example shows an implementation that writes strings to the console when the implementation is called.</source>
          <target state="translated">下列程式碼範例將示範會在被呼叫時將字串寫入主控台的實作。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The following code example shows how to use an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> to insert the client message inspector in the client endpoint.</source>
          <target state="translated">下列程式碼範例將示範如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> 將用戶端訊息偵測器插入到用戶端端點。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</source>
          <target state="translated">最後，下列程式碼範例將示範如何將用戶端組態檔修改成配合特定端點來使用端點行為。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>