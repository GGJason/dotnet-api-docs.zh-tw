<Type Name="IInstanceContextProvider" FullName="System.ServiceModel.Dispatcher.IInstanceContextProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ff4b074b6c966da50efdc237896ab0ef6b460927" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37455192" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInstanceContextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceContextProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceContextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceContextProvider" />
  <TypeSignature Language="F#" Value="type IInstanceContextProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>實作此類別，即可參與建立或選擇 <see cref="T:System.ServiceModel.InstanceContext" /> 物件，特別是用來啟用共用工作階段。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 實作 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> 介面，即可為系統提供適當的 <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> 物件。 一般而言，實作這個介面是為了支援共用工作階段、啟用服務執行個體集區、控制服務執行個體的存留時間，或是群組用戶端之間的內容。  
  
 例如，若要實作共用，您可以插入自訂 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> 來決定讓用戶端中的哪一個工作階段或呼叫與哪一個 <xref:System.ServiceModel.InstanceContext> 物件產生關聯。 如需示範共用執行個體內容的範例，請參閱 < [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)。  
  
> [!NOTE]
>  當<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider>插入至 Windows Communication Foundation (WCF)，控制建立的一般屬性<xref:System.ServiceModel.InstanceContext>物件 (<xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType>屬性) 不會再檢查，而且沒有任何作用。  
  
 有一個較為通用的機制是 <xref:System.ServiceModel.InstanceContext>，您可以在建立 (例如，附加自訂擴充至每個 <xref:System.ServiceModel.InstanceContext>) 時，透過此介面初始化 <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType> 物件。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExistingInstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.InstanceContext GetExistingInstanceContext(class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::InstanceContext ^ GetExistingInstanceContext(System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member GetExistingInstanceContext : System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; System.ServiceModel.InstanceContext" Usage="iInstanceContextProvider.GetExistingInstanceContext (message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="message">傳入訊息。</param>
        <param name="channel">收到訊息的通道。</param>
        <summary>當收到新的訊息時呼叫。</summary>
        <returns>可用來處理訊息的 <see cref="T:System.ServiceModel.InstanceContext" /> 物件；傳回 <see langword="null" /> 時會指示 WCF 建立新的 <see cref="T:System.ServiceModel.InstanceContext" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在收到訊息時，便會呼叫 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> 方法。 傳回要用來處理訊息的 <xref:System.ServiceModel.InstanceContext> 物件，或者傳回 `null`。 若是`null`，WCF 會建立新<xref:System.ServiceModel.InstanceContext>物件的訊息，然後呼叫<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A>方法。  
  
 如果您傳回 `null`，新的 <xref:System.ServiceModel.InstanceContext> 物件會通過節流系統，並遞增 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType> 的計數。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeInstanceContext">
      <MemberSignature Language="C#" Value="public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeInstanceContext(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeInstanceContext(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member InitializeInstanceContext : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; unit" Usage="iInstanceContextProvider.InitializeInstanceContext (instanceContext, message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="instanceContext">新的 <see cref="T:System.ServiceModel.InstanceContext" /> 物件。</param>
        <param name="message">傳入訊息。</param>
        <param name="channel">收到訊息的通道。</param>
        <summary>當 <see langword="null" /> 方法傳回 <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> 時進行呼叫。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> 傳回 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> 而建立新的 `null` 物件時進行呼叫 <xref:System.ServiceModel.InstanceContext>。 呼叫這個方法的目的是要通知您新的 <xref:System.ServiceModel.InstanceContext> 已建立。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member IsIdle : System.ServiceModel.InstanceContext -&gt; bool" Usage="iInstanceContextProvider.IsIdle instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">被視為閒置的 <see cref="T:System.ServiceModel.InstanceContext" /> 物件。</param>
        <summary>當所有 <see cref="T:System.ServiceModel.InstanceContext" /> 活動完成時進行呼叫，以便實作器可以防止 <see cref="T:System.ServiceModel.InstanceContext" /> 被回收。</summary>
        <returns>如果 Windows Communication Foundation (WCF) 要關閉並回收 <see cref="T:System.ServiceModel.InstanceContext" /> 物件，而且要調整 <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" /> 的值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> 關閉並回收閒置 WCF 時，會呼叫<xref:System.ServiceModel.InstanceContext>物件，讓您可以執行階段通知是否要繼續執行此作業。  
  
 如需示範共用執行個體內容的範例，請參閱 < [InstanceContextSharing](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyIdle">
      <MemberSignature Language="C#" Value="public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyIdle(class System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyIdle(System::ServiceModel::Dispatcher::InstanceContextIdleCallback ^ callback, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member NotifyIdle : System.ServiceModel.Dispatcher.InstanceContextIdleCallback * System.ServiceModel.InstanceContext -&gt; unit" Usage="iInstanceContextProvider.NotifyIdle (callback, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> 物件，這個物件會在即將關閉和回收 <see cref="T:System.ServiceModel.InstanceContext" /> 物件時通知 WCF。</param>
        <param name="instanceContext">目前的 <see cref="T:System.ServiceModel.InstanceContext" />。</param>
        <summary>當 <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> 方法傳回 <see langword="false" /> 時進行呼叫，以便實作器能夠在 <see cref="T:System.ServiceModel.InstanceContext" /> 物件完成時提供回呼來通知 WCF。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A>方法時，會呼叫<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>方法會傳回`false`可讓您提供與 WCF<xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType>物件，您用來通知執行階段，<xref:System.ServiceModel.InstanceContext>已完成其工作。 當<xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType>物件通知執行階段所<xref:System.ServiceModel.InstanceContext>已完成其工作時，WCF 會呼叫<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>一次一次。 這個循環會一直持續，直到 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> 傳回 `true` 而該內容已關閉並回收為止。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>