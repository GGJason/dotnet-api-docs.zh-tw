<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f7cbf-101">宣告為 Windows Communication Foundation (WCF) 服務提供服務物件或回收服務物件的方法。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-101">Declares methods that provide a service object or recycle a service object for a Windows Communication Foundation (WCF) service.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7cbf-102">實作 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 介面，以便在 <xref:System.ServiceModel.InstanceContext> 物件要求或處置某個服務物件時控制服務物件的建立和回收。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-102">Implement the <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface to control the creation and recycling of service objects when one is requested or disposed by an <xref:System.ServiceModel.InstanceContext> object.</span></span>  
  
 <span data-ttu-id="f7cbf-103">在實作 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 介面之後，您必須使用端點行為 (<xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> 物件) 或合約行為 (<xref:System.ServiceModel.Description.IEndpointBehavior> 物件)，將您的自訂執行個體提供者物件指派給 <xref:System.ServiceModel.Description.IContractBehavior> 屬性。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-103">Once the <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface is implemented, you must assign your custom instance provider object to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> property using either an endpoint behavior (a <xref:System.ServiceModel.Description.IEndpointBehavior> object) or a contract behavior (a <xref:System.ServiceModel.Description.IContractBehavior> object).</span></span>  
  
 <span data-ttu-id="f7cbf-104">如果插入機制是端點行為，您也可以實作可以透過組態檔來插入自訂行為的 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> 物件。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-104">If the insertion mechanism is an endpoint behavior you can also implement a <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> object that can insert your custom behavior using a configuration file.</span></span> <span data-ttu-id="f7cbf-105">如果插入機制是合約行為，您可以在開啟服務主機之前以程式設計方式插入行為，或實作自訂屬性 </span><span class="sxs-lookup"><span data-stu-id="f7cbf-105">If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute.</span></span> <span data-ttu-id="f7cbf-106">(如需合約行為方法的範例，請參閱＜範例＞一節)。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-106">(For an example of the contract behavior approach, see the Example section.)</span></span>  
  
 <span data-ttu-id="f7cbf-107"><xref:System.ServiceModel.Dispatcher.IInstanceProvider> 有兩個方法：<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> 和 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-107"><xref:System.ServiceModel.Dispatcher.IInstanceProvider> has two methods, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> and <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</span></span> <span data-ttu-id="f7cbf-108">實作這些方法時通常是為了使用非預設的建構函式 (Constructor) 建立服務物件，或初始化或處置 (Dispose) 某種與物件的存留期 (Lifetime) 有關的狀態。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-108">These methods are typically implemented to create service objects using a non-default constructor or to initialize or dispose of some state related to the lifetime of the object.</span></span> <span data-ttu-id="f7cbf-109">服務物件共用便是自訂 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 功能的一個例子。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-109">Service object pooling is one example of custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider> functionality.</span></span>  
  
 <span data-ttu-id="f7cbf-110">一般來說，<xref:System.ServiceModel.InstanceContext> 會在初次建立 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> 時叫用 <xref:System.ServiceModel.InstanceContext>，並在 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> 關閉時叫用 <xref:System.ServiceModel.InstanceContext> 方法。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-110">Typically, the <xref:System.ServiceModel.InstanceContext> invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> when the <xref:System.ServiceModel.InstanceContext> is first created and invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method when the <xref:System.ServiceModel.InstanceContext> is closed.</span></span>  
  
 <span data-ttu-id="f7cbf-111">有兩種方法會造成 <xref:System.ServiceModel.InstanceContext> 物件在 <xref:System.ServiceModel.InstanceContext> 關閉之前釋放服務物件。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-111">There are two ways to cause an <xref:System.ServiceModel.InstanceContext> object to release a service object before the <xref:System.ServiceModel.InstanceContext> is closed.</span></span> <span data-ttu-id="f7cbf-112">第一種方法是將 <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> 設定為 <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> 或 <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-112">The first method is to set the <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> to <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> or <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>.</span></span> <span data-ttu-id="f7cbf-113">第二種方法是呼叫 <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-113">The second method is to call the <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> method.</span></span> <span data-ttu-id="f7cbf-114">如果完成這項操作，<xref:System.ServiceModel.InstanceContext> 會在發送器的執行個體提供者上呼叫 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-114">If this is done, the <xref:System.ServiceModel.InstanceContext> calls the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method on the dispatcher's instance provider.</span></span> <span data-ttu-id="f7cbf-115">如果新的訊息抵達時釋放執行個體之後，WCF 會建立新的執行個體使用<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-115">If a new message arrives after the instance has been released, WCF creates a new instance using the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7cbf-116">如果服務的 <xref:System.ServiceModel.InstanceContextMode> 是 <xref:System.ServiceModel.InstanceContextMode.Single>，即使使用者沒有提供已知的服務物件，系統也不會呼叫 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> 或 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> 方法，除非使用者直接呼叫 <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>，然後再呼叫 <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-116">If the <xref:System.ServiceModel.InstanceContextMode> of the service is <xref:System.ServiceModel.InstanceContextMode.Single>, the system does not call the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> or <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> methods even when the user did not provide a well-known service object unless the user directly calls <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> and then calls <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7cbf-117">下列程式碼範例會示範如何實作提供「單一」行為的 <xref:System.ServiceModel.Dispatcher.IInstanceProvider>，它會一律傳回相同的服務執行個體，而且不會加以回收。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-117">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="f7cbf-118">下列程式碼範例會示範如何實作會實作 <xref:System.ServiceModel.Description.IContractBehavior> 的自訂屬性，以插入自訂服務執行個體提供者。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-118">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="f7cbf-119">它也會實作 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，這個屬性會結合使用特定合約。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-119">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f7cbf-120">傳回服務物件。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-120">Returns a service object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="f7cbf-121">目前的 <see cref="T:System.ServiceModel.InstanceContext" />。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-121">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <summary><span data-ttu-id="f7cbf-122">傳回提供給指定的 <see cref="T:System.ServiceModel.InstanceContext" /> 物件的服務物件。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-122">Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="f7cbf-123">使用者定義的服務物件。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-123">A user-defined service object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7cbf-124">使用<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29>方法，以控制 WCF 服務接收時若嘗試建立一個新的實際服務物件。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-124">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> method to control the exact service object that a WCF service receives when it attempts to create a new one.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7cbf-125">下列程式碼範例會示範如何實作提供「單一」行為的 <xref:System.ServiceModel.Dispatcher.IInstanceProvider>，它會一律傳回相同的服務執行個體，而且不會加以回收。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-125">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="f7cbf-126">下列程式碼範例會示範如何實作會實作 <xref:System.ServiceModel.Description.IContractBehavior> 的自訂屬性，以插入自訂服務執行個體提供者。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-126">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="f7cbf-127">它也會實作 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，這個屬性會結合使用特定合約。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-127">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="f7cbf-128">目前的 <see cref="T:System.ServiceModel.InstanceContext" />。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-128">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <param name="message"><span data-ttu-id="f7cbf-129">觸發建立服務物件的訊息。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-129">The message that triggered the creation of a service object.</span></span></param>
        <summary><span data-ttu-id="f7cbf-130">傳回提供給指定的 <see cref="T:System.ServiceModel.InstanceContext" /> 物件的服務物件。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-130">Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="f7cbf-131">服務物件。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-131">The service object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7cbf-132">使用<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29>方法，以控制 WCF 服務接收時若嘗試建立一個新的實際服務物件。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-132">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> method to control the exact service object that a WCF service receives when it attempts to create a new one.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7cbf-133">下列程式碼範例會示範如何實作提供「單一」行為的 <xref:System.ServiceModel.Dispatcher.IInstanceProvider>，它會一律傳回相同的服務執行個體，而且不會加以回收。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-133">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="f7cbf-134">下列程式碼範例會示範如何實作會實作 <xref:System.ServiceModel.Description.IContractBehavior> 的自訂屬性，以插入自訂服務執行個體提供者。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-134">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="f7cbf-135">它也會實作 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，這個屬性會結合使用特定合約。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-135">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="f7cbf-136">服務的執行個體內容。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-136">The service's instance context.</span></span></param>
        <param name="instance"><span data-ttu-id="f7cbf-137">要回收的服務物件。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-137">The service object to be recycled.</span></span></param>
        <summary><span data-ttu-id="f7cbf-138">在 <see cref="T:System.ServiceModel.InstanceContext" /> 物件回收服務物件時呼叫。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-138">Called when an <see cref="T:System.ServiceModel.InstanceContext" /> object recycles a service object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7cbf-139">使用 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> 方法，即可在服務回收服務物件時執行某種自訂資源處置或其他的回收自訂。</span><span class="sxs-lookup"><span data-stu-id="f7cbf-139">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method to perform some custom resource disposal or other recycling customization when a service recycles a service object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>