<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d99445906f7000f567c08da21e17ff96cb11451f" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37615913" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <TypeSignature Language="F#" Value="type IInstanceProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>宣告為 Windows Communication Foundation (WCF) 服務提供服務物件或回收服務物件的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 實作 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 介面，以便在 <xref:System.ServiceModel.InstanceContext> 物件要求或處置某個服務物件時控制服務物件的建立和回收。  
  
 在實作 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 介面之後，您必須使用端點行為 (<xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> 物件) 或合約行為 (<xref:System.ServiceModel.Description.IEndpointBehavior> 物件)，將您的自訂執行個體提供者物件指派給 <xref:System.ServiceModel.Description.IContractBehavior> 屬性。  
  
 如果插入機制是端點行為，您也可以實作可以透過組態檔來插入自訂行為的 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> 物件。 如果插入機制是合約行為，您可以在開啟服務主機之前以程式設計方式插入行為，或實作自訂屬性  (如需合約行為方法的範例，請參閱＜範例＞一節)。  
  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 有兩個方法：<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> 和 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>。 實作這些方法時通常是為了使用非預設的建構函式 (Constructor) 建立服務物件，或初始化或處置 (Dispose) 某種與物件的存留期 (Lifetime) 有關的狀態。 服務物件共用便是自訂 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 功能的一個例子。  
  
 一般來說，<xref:System.ServiceModel.InstanceContext> 會在初次建立 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> 時叫用 <xref:System.ServiceModel.InstanceContext>，並在 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> 關閉時叫用 <xref:System.ServiceModel.InstanceContext> 方法。  
  
 有兩種方法會造成 <xref:System.ServiceModel.InstanceContext> 物件在 <xref:System.ServiceModel.InstanceContext> 關閉之前釋放服務物件。 第一種方法是將 <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> 設定為 <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> 或 <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>。 第二種方法是呼叫 <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> 方法。 如果完成這項操作，<xref:System.ServiceModel.InstanceContext> 會在發送器的執行個體提供者上呼叫 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> 方法。 如果執行個體釋出之後，新的訊息抵達時，WCF 會建立新的執行個體使用<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>方法。  
  
> [!NOTE]
>  如果服務的 <xref:System.ServiceModel.InstanceContextMode> 是 <xref:System.ServiceModel.InstanceContextMode.Single>，即使使用者沒有提供已知的服務物件，系統也不會呼叫 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> 或 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> 方法，除非使用者直接呼叫 <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>，然後再呼叫 <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>。  
  
   
  
## Examples  
 下列程式碼範例會示範如何實作提供「單一」行為的 <xref:System.ServiceModel.Dispatcher.IInstanceProvider>，它會一律傳回相同的服務執行個體，而且不會加以回收。  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 下列程式碼範例會示範如何實作會實作 <xref:System.ServiceModel.Description.IContractBehavior> 的自訂屬性，以插入自訂服務執行個體提供者。 它也會實作 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，這個屬性會結合使用特定合約。  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回服務物件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext -&gt; obj" Usage="iInstanceProvider.GetInstance instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">目前的 <see cref="T:System.ServiceModel.InstanceContext" /> 物件。</param>
        <summary>傳回提供給指定的 <see cref="T:System.ServiceModel.InstanceContext" /> 物件的服務物件。</summary>
        <returns>使用者定義的服務物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29>方法，以控制 WCF 服務接收時它會嘗試建立一個新的實際服務物件。  
  
   
  
## Examples  
 下列程式碼範例會示範如何實作提供「單一」行為的 <xref:System.ServiceModel.Dispatcher.IInstanceProvider>，它會一律傳回相同的服務執行個體，而且不會加以回收。  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 下列程式碼範例會示範如何實作會實作 <xref:System.ServiceModel.Description.IContractBehavior> 的自訂屬性，以插入自訂服務執行個體提供者。 它也會實作 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，這個屬性會結合使用特定合約。  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message -&gt; obj" Usage="iInstanceProvider.GetInstance (instanceContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext">目前的 <see cref="T:System.ServiceModel.InstanceContext" /> 物件。</param>
        <param name="message">觸發建立服務物件的訊息。</param>
        <summary>傳回提供給指定的 <see cref="T:System.ServiceModel.InstanceContext" /> 物件的服務物件。</summary>
        <returns>服務物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29>方法，以控制 WCF 服務接收時它會嘗試建立一個新的實際服務物件。  
  
   
  
## Examples  
 下列程式碼範例會示範如何實作提供「單一」行為的 <xref:System.ServiceModel.Dispatcher.IInstanceProvider>，它會一律傳回相同的服務執行個體，而且不會加以回收。  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 下列程式碼範例會示範如何實作會實作 <xref:System.ServiceModel.Description.IContractBehavior> 的自訂屬性，以插入自訂服務執行個體提供者。 它也會實作 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>，這個屬性會結合使用特定合約。  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : System.ServiceModel.InstanceContext * obj -&gt; unit" Usage="iInstanceProvider.ReleaseInstance (instanceContext, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext">服務的執行個體內容。</param>
        <param name="instance">要回收的服務物件。</param>
        <summary>在 <see cref="T:System.ServiceModel.InstanceContext" /> 物件回收服務物件時呼叫。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> 方法，即可在服務回收服務物件時執行某種自訂資源處置或其他的回收自訂。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>