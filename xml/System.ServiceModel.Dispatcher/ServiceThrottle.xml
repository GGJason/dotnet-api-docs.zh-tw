<Type Name="ServiceThrottle" FullName="System.ServiceModel.Dispatcher.ServiceThrottle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="64cce57aa8fb280734af6c45b027060aaa599b61" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37454886" /></Metadata><TypeSignature Language="C#" Value="public sealed class ServiceThrottle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ServiceThrottle extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ServiceThrottle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ServiceThrottle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceThrottle sealed" />
  <TypeSignature Language="F#" Value="type ServiceThrottle = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>控制服務輸送量，以便最佳化可用性和效能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.Dispatcher.ServiceThrottle>，即可調整服務的效能特性。 為服務設定 <xref:System.ServiceModel.Dispatcher.ServiceThrottle> 的最簡易方式是使用 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior>，尤其是從應用程式組態檔中進行設定。  
  
 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentCalls%2A> 屬性會指定在 <xref:System.ServiceModel.ServiceHost> 物件中所有發送器物件上主動處理訊息的數目上限。  
  
 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A> 屬性會指定服務中 <xref:System.ServiceModel.InstanceContext> 物件的數目上限。  
  
 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentSessions%2A> 屬性會指定 <xref:System.ServiceModel.ServiceHost> 可以接受的工作階段數目上限。  
  
> [!NOTE]
>  當第一個呼叫、<xref:System.ServiceModel.InstanceContext> 或工作階段佇列排入等候清單 (Waitlist) 時，就會寫入追蹤。 第一個追蹤會寫入成為警告。  
  
   
  
## Examples  
 下列程式碼範例將示範參考應用程式組態檔內 <xref:System.ServiceModel.Dispatcher.ServiceThrottle> 的典型 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior> 用法。 在此情況下，所指定的值一次最多會建立一個訊息處理 (從一個連線到一個 <xref:System.ServiceModel.InstanceContext>)。 實際用法必須取決於經驗。  
  
 [!code-xml[ServiceThrottlingBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/servicethrottlingbehavior/cs/hostapplication.exe.config#3)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="MaxConcurrentCalls">
      <MemberSignature Language="C#" Value="public int MaxConcurrentCalls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxConcurrentCalls" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentCalls" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxConcurrentCalls As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxConcurrentCalls { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxConcurrentCalls : int with get, set" Usage="System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentCalls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定在 <see cref="T:System.ServiceModel.ServiceHost" /> 中的所有發送器物件上主動處理訊息的數目上限。</summary>
        <value>在服務內作用中訊息的上限。 預設為 16 * 電腦上的處理器數目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentCalls%2A> 屬性會指定在 <xref:System.ServiceModel.ServiceHost> 物件中所有發送器物件上主動處理訊息的數目上限。 每個通道可以有一個暫止的訊息不會計算的值，<xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentCalls%2A>直到 Windows Communication Foundation (WCF) 開始處理它。  
  
> [!NOTE]
>  每當超過這個屬性值時，就會寫入至追蹤。  
  
   
  
## Examples  
 下列程式碼範例將示範參考應用程式組態檔內 <xref:System.ServiceModel.Dispatcher.ServiceThrottle> 的典型 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior> 用法。 在此情況下，所指定的值一次最多會建立一個訊息處理 (從一個連線到一個 <xref:System.ServiceModel.InstanceContext>)。 實際用法必須取決於經驗。  
  
 [!code-xml[ServiceThrottlingBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/servicethrottlingbehavior/cs/hostapplication.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxConcurrentInstances">
      <MemberSignature Language="C#" Value="public int MaxConcurrentInstances { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxConcurrentInstances" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxConcurrentInstances As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxConcurrentInstances { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxConcurrentInstances : int with get, set" Usage="System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定可以同時執行服務物件的數目上限。</summary>
        <value>同時存在服務中的 <see cref="T:System.ServiceModel.InstanceContext" /> 物件數目上限。 預設值為最大並行呼叫 + 最大並行工作階段。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A> 屬性會指定服務中 <xref:System.ServiceModel.InstanceContext> 物件的數目上限。 請務必牢記 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A> 屬性和 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> 屬性之間的關聯性。 如果<xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A>是<xref:System.ServiceModel.InstanceContextMode.PerSession>產生的值是工作階段總數。 如果 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> 是 <xref:System.ServiceModel.InstanceContextMode.PerCall>，則產生的值是同時呼叫的數目。 如果訊息在已有最大數目的 <xref:System.ServiceModel.InstanceContext> 物件存在時抵達，則會保留該訊息，直到 <xref:System.ServiceModel.InstanceContext> 物件關閉為止。  
  
> [!NOTE]
>  每當超過這個屬性值時，就會寫入至追蹤。 第一個追蹤會寫入成為警告。  
  
   
  
## Examples  
 下列程式碼範例將示範參考應用程式組態檔內 <xref:System.ServiceModel.Dispatcher.ServiceThrottle> 的典型 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior> 用法。 在此情況下，所指定的值一次最多會建立一個訊息處理 (從一個連線到一個 <xref:System.ServiceModel.InstanceContext>)。 實際用法必須取決於經驗。  
  
 [!code-xml[ServiceThrottlingBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/servicethrottlingbehavior/cs/hostapplication.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxConcurrentSessions">
      <MemberSignature Language="C#" Value="public int MaxConcurrentSessions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxConcurrentSessions" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentSessions" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxConcurrentSessions As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxConcurrentSessions { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxConcurrentSessions : int with get, set" Usage="System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentSessions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指定 <see cref="T:System.ServiceModel.ServiceHost" /> 物件一次可以接受的工作階段數目上限。</summary>
        <value>服務主機接受工作階段的數目上限。 預設值是 100 * 處理器的電腦數目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentSessions%2A> 屬性會指定 <xref:System.ServiceModel.ServiceHost> 可以接受的通道數目上限。 每個接聽程式物件可以有一個暫止通道不會計算的值， <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentSessions%2A> WCF 接受通道並開始處理訊息之前。 這個屬性在運用工作階段的案例中最為有用。  
  
> [!NOTE]
>  每當超過這個屬性值時，就會寫入至追蹤。 第一個追蹤會寫入成為警告。  
  
 如需有關工作階段的詳細資訊，請參閱[使用工作階段的](~/docs/framework/wcf/using-sessions.md)。  
  
 一般而言，使用 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentSessions%2A?displayProperty=nameWithType> 屬性便可設定這個屬性。  
  
   
  
## Examples  
 下列程式碼範例將示範參考應用程式組態檔內 <xref:System.ServiceModel.Dispatcher.ServiceThrottle> 的典型 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior> 用法。 在此情況下，所指定的值一次最多會建立一個訊息處理 (從一個連線到一個 <xref:System.ServiceModel.InstanceContext>)。 實際用法必須取決於經驗。  
  
 [!code-xml[ServiceThrottlingBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/servicethrottlingbehavior/cs/hostapplication.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>