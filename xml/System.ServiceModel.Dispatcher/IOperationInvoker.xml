<Type Name="IOperationInvoker" FullName="System.ServiceModel.Dispatcher.IOperationInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3b0a2f00ea9c6966297f977571140e1f0ed068b3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30517352" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IOperationInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOperationInvoker" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IOperationInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOperationInvoker" />
  <TypeSignature Language="C++ CLI" Value="public interface class IOperationInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="efe6e-101">宣告方法，這些方法會接受自訊息擷取的物件和參數陣列，使用這些參數對該物件叫用方法，然後傳回該方法的傳回值和輸出參數。</span>
      <span class="sxs-lookup">
        <span data-stu-id="efe6e-101">Declares methods that take an object and an array of parameters extracted from a message, invoke a method on that object with those parameters, and return the method's return value and output parameters.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efe6e-102">實作 <xref:System.ServiceModel.Dispatcher.IOperationInvoker> 介面，以便控制由不具型別物件及參數陣列到該物件上強型別方法呼叫的轉換。</span><span class="sxs-lookup"><span data-stu-id="efe6e-102">Implement the <xref:System.ServiceModel.Dispatcher.IOperationInvoker> interface to control the conversion from an untyped object and array of parameters to a strongly-typed method call on that object.</span></span> <span data-ttu-id="efe6e-103">它具有同步的 <xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A> 方法，這個方法會接受執行個體和一組型別物件的輸入，並傳回物件和一組型別物件的輸出。</span><span class="sxs-lookup"><span data-stu-id="efe6e-103">It has a synchronous <xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A> method, which takes an instance and set of inputs of type object and returns an object and a set of outputs of type object.</span></span> <span data-ttu-id="efe6e-104">它還有 <xref:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin%2A> 和 <xref:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd%2A> 變體。</span><span class="sxs-lookup"><span data-stu-id="efe6e-104">It also has a <xref:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin%2A> and <xref:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd%2A> variant.</span></span>  <span data-ttu-id="efe6e-105"><xref:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous%2A> 屬性會指定應該使用同步或非同步的方法。</span><span class="sxs-lookup"><span data-stu-id="efe6e-105">The <xref:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous%2A> property specifies whether the synchronous or asynchronous method should be used.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AllocateInputs">
      <MemberSignature Language="C#" Value="public object[] AllocateInputs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] AllocateInputs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs" />
      <MemberSignature Language="VB.NET" Value="Public Function AllocateInputs () As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ AllocateInputs();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="efe6e-106">傳回參數物件的 <see cref="T:System.Array" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-106">Returns an <see cref="T:System.Array" /> of parameter objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="efe6e-107">要用來做為作業之引數的參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-107">The parameters that are to be used as arguments to the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efe6e-108">實作此項以傳回作業的參數陣列。</span><span class="sxs-lookup"><span data-stu-id="efe6e-108">Implement this to return an array of parameters for the operation.</span></span> <span data-ttu-id="efe6e-109">當呼叫 <xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A> 時，這個陣列會由格式器填滿，並且傳遞回到啟動程式。</span><span class="sxs-lookup"><span data-stu-id="efe6e-109">This array is filled by the formatter and passed back to the invoker when <xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A> is called.</span></span>  
  
 ]]></format>
        </remarks>
        <threadsafe>
          <span data-ttu-id="efe6e-110">這個方法的實作必須配置上的每個呼叫的輸入的陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-110">An implementation of this method must allocate the input array on every call.</span>
          </span>
          <span data-ttu-id="efe6e-111">傳回同一個陣列的多個呼叫可能會導致無法預期的行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-111">Returning the same array for multiple calls can result in unpredictable behavior.</span>
          </span>
        </threadsafe>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (object instance, object[] inputs, out object[] outputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(object instance, object[] inputs, [out] object[]&amp; outputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (instance As Object, inputs As Object(), ByRef outputs As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Object ^ instance, cli::array &lt;System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] cli::array &lt;System::Object ^&gt; ^ % outputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="inputs" Type="System.Object[]" />
        <Parameter Name="outputs" Type="System.Object[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="efe6e-112">要叫用的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-112">The object to be invoked.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="efe6e-113">方法的輸入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-113">The inputs to the method.</span>
          </span>
        </param>
        <param name="outputs">
          <span data-ttu-id="efe6e-114">方法的輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-114">The outputs from the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="efe6e-115">從執行個體和一組輸入物件，傳回物件和一組輸出物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-115">Returns an object and a set of output objects from an instance and set of input objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="efe6e-116">傳回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-116">The return value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeBegin">
      <MemberSignature Language="C#" Value="public IAsyncResult InvokeBegin (object instance, object[] inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult InvokeBegin(object instance, object[] inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeBegin (instance As Object, inputs As Object(), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ InvokeBegin(System::Object ^ instance, cli::array &lt;System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="inputs" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="efe6e-117">要叫用的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-117">The object to be invoked.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="efe6e-118">方法的輸入。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-118">The inputs to the method.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="efe6e-119">非同步的回呼物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-119">The asynchronous callback object.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="efe6e-120">關聯的狀態資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-120">Associated state data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="efe6e-121">
            <see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" /> 方法的非同步實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-121">An asynchronous implementation of the <see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="efe6e-122">用來完成非同步呼叫的 <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-122">A <see cref="T:System.IAsyncResult" /> used to complete the asynchronous call.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEnd">
      <MemberSignature Language="C#" Value="public object InvokeEnd (object instance, out object[] outputs, IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeEnd(object instance, [out] object[]&amp; outputs, class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeEnd (instance As Object, ByRef outputs As Object(), result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeEnd(System::Object ^ instance, [Runtime::InteropServices::Out] cli::array &lt;System::Object ^&gt; ^ % outputs, IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="outputs" Type="System.Object[]&amp;" RefType="out" />
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="efe6e-123">叫用的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-123">The object invoked.</span>
          </span>
        </param>
        <param name="outputs">
          <span data-ttu-id="efe6e-124">方法的輸出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-124">The outputs from the method.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="efe6e-125">
            <see cref="T:System.IAsyncResult" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-125">The <see cref="T:System.IAsyncResult" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="efe6e-126">非同步結束方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-126">The asynchronous end method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="efe6e-127">傳回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-127">The return value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronous">
      <MemberSignature Language="C#" Value="public bool IsSynchronous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronous" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronous As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronous { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="efe6e-128">取得值，這個值會指定發送器要呼叫 <see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" /> 方法或是 <see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-128">Gets a value that specifies whether the <see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" /> or <see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)" /> method is called by the dispatcher.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="efe6e-129">如果發送器叫用同步作業，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="efe6e-129">
              <see langword="true" /> if the dispatcher invokes the synchronous operation; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efe6e-130">根據預設，預設的啟動程式會將訊息發送到同步作業。</span><span class="sxs-lookup"><span data-stu-id="efe6e-130">The default invoker dispatches messages to the synchronous operation by default.</span></span> <span data-ttu-id="efe6e-131">這個值會由發送器快取，因此不應在實作 <xref:System.ServiceModel.Dispatcher.IOperationInvoker> 之物件的存留期 (Lifetime) 加以變更。</span><span class="sxs-lookup"><span data-stu-id="efe6e-131">This value is cached by the dispatcher and therefore should not change over the lifetime of the object that implements <xref:System.ServiceModel.Dispatcher.IOperationInvoker>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>