<Type Name="IInteractiveChannelInitializer" FullName="System.ServiceModel.Dispatcher.IInteractiveChannelInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a28ea60b8469e9308d63b77db761ba0f74156d33" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37455127" /></Metadata><TypeSignature Language="C#" Value="public interface IInteractiveChannelInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInteractiveChannelInitializer" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInteractiveChannelInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInteractiveChannelInitializer" />
  <TypeSignature Language="F#" Value="type IInteractiveChannelInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f5535-101">定義方法，這些方法可讓用戶端應用程式顯示使用者介面，以便在建立通道之前收集身分識別資訊。</span><span class="sxs-lookup"><span data-stu-id="f5535-101">Defines the methods that enable a client application to display a user interface to collect identity information prior to creating the channel.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5535-102">實作 <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer> 介面來讓用戶端應用程式顯示使用者介面，以供應用程式的使用者在開啟通道之前用來建立或選取認證。</span><span class="sxs-lookup"><span data-stu-id="f5535-102">Implement the <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer> interface to enable a client application to display a user interface that enables the user of the application to create or select the credentials prior to opening a channel.</span></span>  
  
 <span data-ttu-id="f5535-103">為了實作 <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>，此時要在 <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI%2A?displayProperty=nameWithType> 中執行下列步驟：</span><span class="sxs-lookup"><span data-stu-id="f5535-103">To implement <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>, perform the following steps in <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI%2A?displayProperty=nameWithType>:</span></span>  
  
1.  <span data-ttu-id="f5535-104">提示使用者並取得適當的 <xref:System.Net.NetworkCredential?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="f5535-104">Prompt the user and obtain an appropriate <xref:System.Net.NetworkCredential?displayProperty=nameWithType>.</span></span>  
  
2.  <span data-ttu-id="f5535-105">將自訂通道參數物件加入至在 <xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=nameWithType> 物件上以 <xref:System.ServiceModel.IClientChannel> 的型別參數呼叫 <xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=nameWithType> 方法所傳回的集合。</span><span class="sxs-lookup"><span data-stu-id="f5535-105">Add a custom channel parameter object to the collection returned by the <xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=nameWithType> method on the <xref:System.ServiceModel.IClientChannel> object with a type parameter of <xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f5535-106">自訂的 <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=nameWithType> 會使用這個通道參數物件來建立通道的安全性權杖。</span><span class="sxs-lookup"><span data-stu-id="f5535-106">This channel parameter object is used by the custom <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=nameWithType> to establish the security tokens for the channel.</span></span>  
  
3.  <span data-ttu-id="f5535-107">傳回。</span><span class="sxs-lookup"><span data-stu-id="f5535-107">Return.</span></span>  
  
 <span data-ttu-id="f5535-108">為了插入 <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>，此時要：</span><span class="sxs-lookup"><span data-stu-id="f5535-108">To insert <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>:</span></span>  
  
1.  <span data-ttu-id="f5535-109">覆寫 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A?displayProperty=nameWithType> 類別上的 <xref:System.ServiceModel.Description.ClientCredentials?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="f5535-109">Override the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A?displayProperty=nameWithType> method on the <xref:System.ServiceModel.Description.ClientCredentials?displayProperty=nameWithType> class.</span></span>  
  
2.  <span data-ttu-id="f5535-110">使用該方法來判定端點是否需要 <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>，如果需要，則將 <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer> 加入至 <xref:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers%2A?displayProperty=nameWithType> 集合。</span><span class="sxs-lookup"><span data-stu-id="f5535-110">In that method, determine whether the endpoint requires an <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer> and if so, add the <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer> to the <xref:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers%2A?displayProperty=nameWithType> collection.</span></span>  
  
 <span data-ttu-id="f5535-111">應用程式開發人員可以透過兩種方式來使用插入的 <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>。</span><span class="sxs-lookup"><span data-stu-id="f5535-111">There are two ways application developers can make use of an inserted <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>.</span></span> <span data-ttu-id="f5535-112">用戶端應用程式可以呼叫<xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=nameWithType>或是<xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=nameWithType>（或非同步版本） 在開啟通道之前 (*明確*方法) 或只是呼叫第一項作業 (*隱含*方法)。</span><span class="sxs-lookup"><span data-stu-id="f5535-112">The client application can call either <xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=nameWithType> or <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=nameWithType> (or an asynchronous version) prior to opening the channel (the *explicit* approach) or simply call the first operation (the *implicit* approach).</span></span>  
  
 <span data-ttu-id="f5535-113">如果使用隱含方式，應用程式就必須在 <xref:System.ServiceModel.ClientBase%601> 或 <xref:System.ServiceModel.IClientChannel> 擴充上呼叫第一項作業。</span><span class="sxs-lookup"><span data-stu-id="f5535-113">If using the implicit approach, the application must call the first operation on an <xref:System.ServiceModel.ClientBase%601> or <xref:System.ServiceModel.IClientChannel> extension.</span></span> <span data-ttu-id="f5535-114">如果呼叫第一項作業以外的任何作業，就會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f5535-114">If it calls anything other than the first operation, an exception is thrown.</span></span>  
  
 <span data-ttu-id="f5535-115">如果使用明確方式，應用程式必須依照順序執行下列步驟：</span><span class="sxs-lookup"><span data-stu-id="f5535-115">If using the explicit approach, the application must perform the following steps in order:</span></span>  
  
1.  <span data-ttu-id="f5535-116">呼叫 <xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=nameWithType> 或 <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=nameWithType> (或非同步版本)。</span><span class="sxs-lookup"><span data-stu-id="f5535-116">Call either <xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=nameWithType> or <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=nameWithType> (or an asynchronous version).</span></span>  
  
2.  <span data-ttu-id="f5535-117">當初始設定式已回傳時，在 <xref:System.ServiceModel.ICommunicationObject.Open%2A> 物件或是 <xref:System.ServiceModel.IClientChannel> 屬性傳回的 <xref:System.ServiceModel.IClientChannel> 物件上呼叫 <xref:System.ServiceModel.ClientBase%601.InnerChannel%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="f5535-117">When the initializers have returned, call either the <xref:System.ServiceModel.ICommunicationObject.Open%2A> method on the <xref:System.ServiceModel.IClientChannel> object or on the <xref:System.ServiceModel.IClientChannel> object returned from the <xref:System.ServiceModel.ClientBase%601.InnerChannel%2A?displayProperty=nameWithType> property.</span></span>  
  
3.  <span data-ttu-id="f5535-118">呼叫作業。</span><span class="sxs-lookup"><span data-stu-id="f5535-118">Call operations.</span></span>  
  
 <span data-ttu-id="f5535-119">建議您採用明確方式來處理使用者介面的產品等級應用程式控制。</span><span class="sxs-lookup"><span data-stu-id="f5535-119">It is recommended that production-quality applications control of the user-interface process by adopting the explicit approach.</span></span>  
  
 <span data-ttu-id="f5535-120">使用隱含方式的應用程式會叫用使用者介面初始設定式，但若應用程式的使用者無法在繫結的傳送逾時期限之內回應，當使用者介面傳回時就會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f5535-120">Applications that use the implicit approach invoke the user-interface initializers, but if the user of the application fails to respond within the send timeout period of the binding, an exception is thrown when the user interface returns.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BeginDisplayInitializationUI">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginDisplayInitializationUI (System.ServiceModel.IClientChannel channel, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginDisplayInitializationUI(class System.ServiceModel.IClientChannel channel, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginDisplayInitializationUI (channel As IClientChannel, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginDisplayInitializationUI(System::ServiceModel::IClientChannel ^ channel, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginDisplayInitializationUI : System.ServiceModel.IClientChannel * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInteractiveChannelInitializer.BeginDisplayInitializationUI (channel, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="channel"><span data-ttu-id="f5535-121">用戶端通道。</span><span class="sxs-lookup"><span data-stu-id="f5535-121">The client channel.</span></span></param>
        <param name="callback"><span data-ttu-id="f5535-122">回呼物件。</span><span class="sxs-lookup"><span data-stu-id="f5535-122">The callback object.</span></span></param>
        <param name="state"><span data-ttu-id="f5535-123">任何狀態資料。</span><span class="sxs-lookup"><span data-stu-id="f5535-123">Any state data.</span></span></param>
        <summary><span data-ttu-id="f5535-124">要開始使用使用者介面來取得認證資訊的非同步呼叫。</span><span class="sxs-lookup"><span data-stu-id="f5535-124">An asynchronous call to begin using a user interface to obtain credential information.</span></span></summary>
        <returns><span data-ttu-id="f5535-125">要在處理完成時用於回呼的 <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="f5535-125">The <see cref="T:System.IAsyncResult" /> to use to call back when processing has completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5535-126">為了實作 <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>，此時要在 <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI%2A?displayProperty=nameWithType> 中執行下列步驟：</span><span class="sxs-lookup"><span data-stu-id="f5535-126">To implement <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>, perform the following steps in <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI%2A?displayProperty=nameWithType>:</span></span>  
  
1.  <span data-ttu-id="f5535-127">以適當的方式提示使用者，並取得適當的 <xref:System.Net.NetworkCredential?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="f5535-127">Prompt the user in what way you see fit and obtain an appropriate <xref:System.Net.NetworkCredential?displayProperty=nameWithType>.</span></span>  
  
2.  <span data-ttu-id="f5535-128">將自訂通道參數物件加入至在 <xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=nameWithType> 物件上以 <xref:System.ServiceModel.IClientChannel> 的型別參數呼叫 <xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=nameWithType> 方法所傳回的集合。</span><span class="sxs-lookup"><span data-stu-id="f5535-128">Add a custom channel parameter object to the collection returned by the <xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=nameWithType> method on the <xref:System.ServiceModel.IClientChannel> object with a type parameter of <xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f5535-129">自訂的 <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=nameWithType> 會使用這個通道參數物件來建立通道的安全性權杖。</span><span class="sxs-lookup"><span data-stu-id="f5535-129">This channel parameter object is used by the custom <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=nameWithType> to establish the security tokens for the channel.</span></span>  
  
3.  <span data-ttu-id="f5535-130">傳回。</span><span class="sxs-lookup"><span data-stu-id="f5535-130">Return.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndDisplayInitializationUI">
      <MemberSignature Language="C#" Value="public void EndDisplayInitializationUI (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndDisplayInitializationUI(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.EndDisplayInitializationUI(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndDisplayInitializationUI (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndDisplayInitializationUI(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndDisplayInitializationUI : IAsyncResult -&gt; unit" Usage="iInteractiveChannelInitializer.EndDisplayInitializationUI result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="f5535-131"><see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="f5535-131">The <see cref="T:System.IAsyncResult" />.</span></span></param>
        <summary><span data-ttu-id="f5535-132">在 <see cref="M:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)" /> 完成後呼叫。</span><span class="sxs-lookup"><span data-stu-id="f5535-132">Called when the <see cref="M:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)" /> has finished.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>