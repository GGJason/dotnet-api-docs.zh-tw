<Type Name="IErrorHandler" FullName="System.ServiceModel.Dispatcher.IErrorHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="41128fffa174639782f95028f498996c755285af" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37615952" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IErrorHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IErrorHandler" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IErrorHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IErrorHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IErrorHandler" />
  <TypeSignature Language="F#" Value="type IErrorHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="2b0d5-101">可讓實作器控制傳回到呼叫端的錯誤訊息，並選擇性地執行自訂錯誤處理，例如記錄。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2b0d5-101">Allows an implementer to control the fault message returned to the caller and optionally perform custom error processing such as logging.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b0d5-102">若要明確控制應用程式的行為，擲回例外狀況時，請實作<xref:System.ServiceModel.Dispatcher.IErrorHandler>介面，並將它加入<xref:System.ServiceModel.Dispatcher.ChannelDispatcher>的<xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-102">To explicitly control the behavior of the application when an exception is thrown, implement the <xref:System.ServiceModel.Dispatcher.IErrorHandler> interface and add it to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>’s <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span> <span data-ttu-id="2b0d5-103"><xref:System.ServiceModel.Dispatcher.IErrorHandler> 可讓您明確地控制產生的 SOAP 錯誤，決定是否要將它傳送回用戶端，以及執行相關的工作 (例如，記錄)。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-103"><xref:System.ServiceModel.Dispatcher.IErrorHandler> enables you to explicitly control the SOAP fault generated, decide whether to send it back to the client, and perform associated tasks, such as logging.</span></span> <span data-ttu-id="2b0d5-104">錯誤處理常式會依其加入至 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 屬性的順序進行呼叫。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-104">Error handlers are called in the order in which they were added to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span>  
  
 <span data-ttu-id="2b0d5-105">實作 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 方法，即可控制傳回到用戶端的錯誤訊息。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-105">Implement the <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method to control the fault message that is returned to the client.</span></span>  
  
 <span data-ttu-id="2b0d5-106">實作 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 方法，即可確認錯誤相關行為，其中包括記錄錯誤、確保 Fail Fast (失敗時，即刻傳回錯誤訊息，然後才停止)、關閉應用程式等。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-106">Implement the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method to ensure error-related behaviors, including error logging, assuring a fail fast, shutting down the application, and so on.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b0d5-107">因為 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 方法可從許多不同地方呼叫，所以不保證此方法會在哪一個執行緒上呼叫。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-107">Because the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method can be called from many different places there are no guarantees made about which thread the method is called on.</span></span> <span data-ttu-id="2b0d5-108">請不要依賴作業執行緒上呼叫的 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-108">Do not depend on <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method being called on the operation thread.</span></span>  
  
 <span data-ttu-id="2b0d5-109">在傳送回應訊息之前，會先呼叫所有的 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 實作。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-109">All <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementations are called first, prior to sending a response message.</span></span> <span data-ttu-id="2b0d5-110">在呼叫並回傳所有的 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 實作之後，以及在 `fault` 不是 `null` 時，就會根據作業合約將該訊息傳送回用戶端。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-110">When all <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementations have been called and return, and if `fault` is non-`null`, it is sent back to the client according to the operation contract.</span></span> <span data-ttu-id="2b0d5-111">在呼叫所有實作之後，如果 `fault` 為 `null`，則會由 <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> 屬性值來控制回應訊息。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-111">If `fault` is `null` after all implementations have been called, the response message is controlled by the <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> property value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b0d5-112">例外狀況可能會在呼叫所有 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 實作，而且將回應訊息傳送至通道之後發生。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-112">Exceptions can occur after all <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementations are called and a response message is handed to the channel.</span></span> <span data-ttu-id="2b0d5-113">如果通道例外狀況 （例如，將訊息序列化的困難）<xref:System.ServiceModel.Dispatcher.IErrorHandler>物件會收到通知。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-113">If a channel exception occurs (for example, difficulty serializing the message) <xref:System.ServiceModel.Dispatcher.IErrorHandler> objects are notified.</span></span> <span data-ttu-id="2b0d5-114">在此情況下，您應該仍然要確定您的開發環境會攔截，並向您顯示這類例外狀況或利用追蹤功能來發現此問題。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-114">In this case, you should still make sure that your development environment catches and displays such exceptions to you or makes use of tracing to discover the problem.</span></span> <span data-ttu-id="2b0d5-115">如需有關追蹤的詳細資訊，請參閱 <<c0> [ 使用疑難排解您的應用程式追蹤](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md)。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-115">For more information about tracing, see [Using Tracing to Troubleshoot Your Application](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md).</span></span>  
  
 <span data-ttu-id="2b0d5-116">在傳送回應訊息之後，會依照相同順序呼叫所有的 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 實作。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-116">After the response message has been sent, all <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> implementations are called in the same order.</span></span>  
  
 <span data-ttu-id="2b0d5-117">一般而言，<xref:System.ServiceModel.Dispatcher.IErrorHandler> 實作會加入至服務 (若是雙工通訊，則為用戶端) 上的 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 屬性。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-117">Typically, an <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation is added to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property on the service (and the client in the case of duplex communication).</span></span>  
  
 <span data-ttu-id="2b0d5-118">您可以藉由實作某種行為 (<xref:System.ServiceModel.Dispatcher.IErrorHandler>、<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>、<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> 或 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> 物件)，將 <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType> 加入至執行階段，並且從組態檔中或透過自訂屬性，以程式設計方式使用該行為來附加您的 <xref:System.ServiceModel.Dispatcher.IErrorHandler>。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-118">You can add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> to the runtime by implementing a behavior (either an <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>, or <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType> object) and use the behavior programmatically, from a configuration file or with a custom attribute to attach your <xref:System.ServiceModel.Dispatcher.IErrorHandler>.</span></span>  
  
 <span data-ttu-id="2b0d5-119">如需使用行為來修改執行階段的詳細資訊，請參閱[設定和擴充執行階段行為](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-119">For more information about using behaviors to modify the runtime, see [Configuring and Extending the Runtime with Behaviors](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b0d5-120">下列程式碼範例將示範實作 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 的服務，當服務方法擲回 Managed 例外狀況時，這個實作只會傳回 <xref:System.ServiceModel.FaultException%601> 類型的 `GreetingFault`。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-120">The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.</span></span>  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 <span data-ttu-id="2b0d5-121">下列程式碼範例示範如何使用服務行為，將 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 實作加入至 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 屬性。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-121">The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="2b0d5-122">下列程式碼範例示範如何使用應用程式組態檔，將服務設定為載入服務行為。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-122">The following code example shows how to configure the service to load the service behavior using an application configuration file.</span></span> <span data-ttu-id="2b0d5-123">如需如何在組態檔中公開服務行為的詳細資訊，請參閱 <xref:System.ServiceModel.Description.IServiceBehavior>。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-123">For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.</span></span>  

 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="HandleError">
      <MemberSignature Language="C#" Value="public bool HandleError (Exception error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception error) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Function HandleError (error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public bool HandleError (Exception exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception exception) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" FrameworkAlternate="xamarinmac-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="error">To be added.</param>
        <param name="exception">To be added.</param>
        <summary>
          <span data-ttu-id="2b0d5-124">啟用錯誤相關處理並傳回值，指出發送器是否會在某些情況下，中止工作階段和執行個體內容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b0d5-124">Enables error-related processing and returns a value that indicates whether the dispatcher aborts the session and the instance context in certain cases.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2b0d5-125">如果 Windows Communication Foundation (WCF) 不應中止工作階段 (如果有的話) 和執行個體內容 (如果執行個體內容不是 <see cref="F:System.ServiceModel.InstanceContextMode.Single" />)，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b0d5-125">
              <see langword="true" /> if Windows Communication Foundation (WCF) should not abort the session (if there is one) and instance context if the instance context is not <see cref="F:System.ServiceModel.InstanceContextMode.Single" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2b0d5-126">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b0d5-126">The default is <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b0d5-127">使用 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 方法，即可實作錯誤相關行為，例如錯誤記錄、系統通知、關閉應用程式等，並傳回指定例外狀況是否已適當處理的值。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-127">Use the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method to implement error-related behaviors such as error logging, system notifications, shutting down the application, and so on, and return a value that specifies whether the exception has been handled appropriately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b0d5-128">因為 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 方法可從許多不同地方呼叫，所以不保證此方法會在哪一個執行緒上呼叫。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-128">Because the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method can be called from many different places there are no guarantees made about which thread the method is called on.</span></span> <span data-ttu-id="2b0d5-129">請不要依賴作業執行緒上呼叫的 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-129">Do not depend on <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method being called on the operation thread.</span></span>  
  
 <span data-ttu-id="2b0d5-130">所有 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 實作都會被呼叫。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-130">All <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementations are called.</span></span> <span data-ttu-id="2b0d5-131">根據預設 (當傳回值是`false`)，如果沒有發生例外狀況，發送器會中止任何工作階段，並中止<xref:System.ServiceModel.InstanceContext>如果<xref:System.ServiceModel.InstanceContextMode>以外的任何項目是<xref:System.ServiceModel.InstanceContextMode.Single>。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-131">By default (when the return value is `false`), if there is an exception, the dispatcher aborts any session and aborts the <xref:System.ServiceModel.InstanceContext> if the <xref:System.ServiceModel.InstanceContextMode> is anything other than <xref:System.ServiceModel.InstanceContextMode.Single>.</span></span>  <span data-ttu-id="2b0d5-132">然後例外狀況會視為未處理，而任何狀態都會視為已損毀。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-132">The exception is then considered unhandled and any state is considered corrupt.</span></span>  
  
 <span data-ttu-id="2b0d5-133">從 `true` 傳回 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>，以防止這個預設行為。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-133">Return `true` from <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> to prevent this default behavior.</span></span> <span data-ttu-id="2b0d5-134">如果任何錯誤處理常式傳回`true`它會指示 WCF，並安全地繼續使用與失敗的要求相關聯的狀態。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-134">If any error handler returns `true` it instructs WCF that it is safe to continue using state associated with the failed request.</span></span>  
  
 <span data-ttu-id="2b0d5-135">如果錯誤處理常式沒有從 `true` 方法傳回 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>，則例外狀況會被視為尚未處理，而且會套用預設回應，因而可能會在工作階段通道上進行通訊時，或在 <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> 屬性未設定為 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> 時，產生中止的 <xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType> 和通道。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-135">If no error handler returns `true` from the <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> method the exception is considered unhandled and the default response applies, potentially resulting in an aborted <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> and channel when communicating on a session channel or the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property is not set to <xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2b0d5-136">`error` 參數永遠不會是 `null`，而且會包含已擲回的例外狀況物件。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-136">The `error` parameter is never `null` and contains the exception object that was thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b0d5-137">下列程式碼範例將示範實作 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 的服務，當服務方法擲回 Managed 例外狀況時，這個實作只會傳回 <xref:System.ServiceModel.FaultException%601> 類型的 `GreetingFault`。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-137">The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.</span></span>  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 <span data-ttu-id="2b0d5-138">下列程式碼範例示範如何使用服務行為，將 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 實作加入至 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 屬性。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-138">The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="2b0d5-139">下列程式碼範例示範如何使用應用程式組態檔，將服務設定為載入服務行為。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-139">The following code example shows how to configure the service to load the service behavior using an application configuration file.</span></span> <span data-ttu-id="2b0d5-140">如需如何在組態檔中公開服務行為的詳細資訊，請參閱 <xref:System.ServiceModel.Description.IServiceBehavior>。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-140">For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvideFault">
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception error, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProvideFault (error As Exception, version As MessageVersion, ByRef fault As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ error, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception exception, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception exception, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" FrameworkAlternate="xamarinmac-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ exception, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion *  -&gt; unit" Usage="iErrorHandler.ProvideFault (exception, version, fault)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="version" Type="System.ServiceModel.Channels.MessageVersion" Index="1" />
        <Parameter Name="fault" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" Index="2" />
      </Parameters>
      <Docs>
        <param name="error">To be added.</param>
        <param name="exception">To be added.</param>
        <param name="version">
          <span data-ttu-id="2b0d5-141">訊息的 SOAP 版本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b0d5-141">The SOAP version of the message.</span>
          </span>
        </param>
        <param name="fault">
          <span data-ttu-id="2b0d5-142">
            <see cref="T:System.ServiceModel.Channels.Message" /> 物件，這個物件會在雙工通訊模式下傳回到用戶端或服務。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b0d5-142">The <see cref="T:System.ServiceModel.Channels.Message" /> object that is returned to the client, or service, in the duplex case.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b0d5-143">啟用建立由服務方法發生之例外狀況所傳回的自訂 <see cref="T:System.ServiceModel.FaultException`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b0d5-143">Enables the creation of a custom <see cref="T:System.ServiceModel.FaultException`1" /> that is returned from an exception in the course of a service method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b0d5-144">實作 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 方法，即可建立傳回到用戶端的自訂錯誤訊息。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-144">Implement the <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method to create a custom fault message that is returned to the client.</span></span>  <span data-ttu-id="2b0d5-145"><xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>方法一律會保留作業，除了當 WCF 執行階段會辨識為特別嚴重的例外狀況和例外狀況本身會重新擲回的例外狀況的呼叫。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-145">The <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method will always be called for exceptions that leave operations, except when the WCF runtime recognizes the exception as especially fatal and rethrows the exception itself.</span></span> <span data-ttu-id="2b0d5-146">在呼叫所有 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 實作之後，就會將錯誤訊息傳送回用戶端 (如果 `fault` 不是 `null`)。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-146">When all <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> implementations have been called, the fault message is sent back to the client (if `fault` is non-`null`).</span></span> <span data-ttu-id="2b0d5-147">如果`fault`參數是`null`則預設的 fault 會傳送至用戶端。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-147">If the `fault` parameter is `null` the default fault is sent to the client.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b0d5-148">在使用這個方法的期間，可以從 <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType> 屬性取得導致處理錯誤的傳入訊息。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-148">The inbound message that caused the processing error is available during this method from the <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b0d5-149">因為 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 方法可從許多不同地方呼叫，所以不保證此方法會在哪一個執行緒上呼叫。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-149">Because the <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method can be called from many different places there are no guarantees made about which thread the method is called on.</span></span> <span data-ttu-id="2b0d5-150">請不要依賴作業執行緒上呼叫的 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-150">Do not depend on <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> method being called on the operation thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b0d5-151">下列程式碼範例將示範實作 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 的服務，當服務方法擲回 Managed 例外狀況時，這個實作只會傳回 <xref:System.ServiceModel.FaultException%601> 類型的 `GreetingFault`。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-151">The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.</span></span>  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 <span data-ttu-id="2b0d5-152">下列程式碼範例示範如何使用服務行為，將 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 實作加入至 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 屬性。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-152">The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="2b0d5-153">下列程式碼範例示範如何使用應用程式組態檔，將服務設定為載入服務行為。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-153">The following code example shows how to configure the service to load the service behavior using an application configuration file.</span></span> <span data-ttu-id="2b0d5-154">如需如何在組態檔中公開服務行為的詳細資訊，請參閱 <xref:System.ServiceModel.Description.IServiceBehavior>。</span><span class="sxs-lookup"><span data-stu-id="2b0d5-154">For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>