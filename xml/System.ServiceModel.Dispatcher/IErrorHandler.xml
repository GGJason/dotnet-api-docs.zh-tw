<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IErrorHandler.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52f4c525f8c28ef846dc25e8b65ba94dc1081f6d2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f4c525f8c28ef846dc25e8b65ba94dc1081f6d2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Allows an implementer to control the fault message returned to the caller and optionally perform custom error processing such as logging.</source>
          <target state="translated">可讓實作器控制傳回到呼叫端的錯誤訊息，並選擇性地執行自訂錯誤處理，例如記錄。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>To explicitly control the behavior of the application when an exception is thrown, implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> interface and add it to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph>’s <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">若要明確控制應用程式的行為，擲回例外狀況時，請實作<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph>介面，並將它加入至<ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher&gt;</ph>的<ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> enables you to explicitly control the SOAP fault generated, decide whether to send it back to the client, and perform associated tasks, such as logging.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> 可讓您明確地控制產生的 SOAP 錯誤，決定是否要將它傳送回用戶端，以及執行相關的工作 (例如，記錄)。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Error handlers are called in the order in which they were added to the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">錯誤處理常式會依其加入至 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> 屬性的順序進行呼叫。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method to control the fault message that is returned to the client.</source>
          <target state="translated">實作 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> 方法，即可控制傳回到用戶端的錯誤訊息。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method to ensure error-related behaviors, including error logging, assuring a fail fast, shutting down the application, and so on.</source>
          <target state="translated">實作 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> 方法，即可確認錯誤相關行為，其中包括記錄錯誤、確保 Fail Fast (失敗時，即刻傳回錯誤訊息，然後才停止)、關閉應用程式等。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Because the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method can be called from many different places there are no guarantees made about which thread the method is called on.</source>
          <target state="translated">因為 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> 方法可從許多不同地方呼叫，所以不保證此方法會在哪一個執行緒上呼叫。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Do not depend on <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method being called on the operation thread.</source>
          <target state="translated">請不要依賴作業執行緒上呼叫的 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>All <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations are called first, prior to sending a response message.</source>
          <target state="translated">在傳送回應訊息之前，會先呼叫所有的 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> 實作。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>When all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations have been called and return, and if <ph id="ph2">`fault`</ph> is non-<ph id="ph3">`null`</ph>, it is sent back to the client according to the operation contract.</source>
          <target state="translated">在呼叫並回傳所有的 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> 實作之後，以及在 <ph id="ph2">`fault`</ph> 不是 <ph id="ph3">`null`</ph> 時，就會根據作業合約將該訊息傳送回用戶端。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>If <ph id="ph1">`fault`</ph> is <ph id="ph2">`null`</ph> after all implementations have been called, the response message is controlled by the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> property value.</source>
          <target state="translated">在呼叫所有實作之後，如果 <ph id="ph1">`fault`</ph> 為 <ph id="ph2">`null`</ph>，則會由 <ph id="ph3">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType&gt;</ph> 屬性值來控制回應訊息。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Exceptions can occur after all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations are called and a response message is handed to the channel.</source>
          <target state="translated">例外狀況可能會在呼叫所有 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> 實作，而且將回應訊息傳送至通道之後發生。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>If a channel exception occurs (for example, difficulty serializing the message) <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> objects are notified.</source>
          <target state="translated">如果通道例外狀況 （例如，無法序列化訊息）<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph>物件會收到通知。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>In this case, you should still make sure that your development environment catches and displays such exceptions to you or makes use of tracing to discover the problem.</source>
          <target state="translated">在此情況下，您應該仍然要確定您的開發環境會攔截，並向您顯示這類例外狀況或使用追蹤來發現此問題。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>For more information about tracing, see <bpt id="p1">[</bpt>Using Tracing to Troubleshoot Your Application<ept id="p1">](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md)</ept>.</source>
          <target state="translated">如需有關追蹤的詳細資訊，請參閱<bpt id="p1">[</bpt>使用追蹤疑難排解您的應用程式<ept id="p1">](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md)</ept>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>After the response message has been sent, all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> implementations are called in the same order.</source>
          <target state="translated">在傳送回應訊息之後，會依照相同順序呼叫所有的 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> 實作。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>Typically, an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementation is added to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property on the service (and the client in the case of duplex communication).</source>
          <target state="translated">一般而言，<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> 實作會加入至服務 (若是雙工通訊，則為用戶端) 上的 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> 屬性。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>You can add the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> to the runtime by implementing a behavior (either an <ph id="ph2">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph> object) and use the behavior programmatically, from a configuration file or with a custom attribute to attach your <ph id="ph6">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph>.</source>
          <target state="translated">您可以藉由實作某種行為 (<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph>、<ph id="ph2">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph>、<ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> 或 <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType&gt;</ph> 物件)，將 <ph id="ph5">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph> 加入至執行階段，並且從組態檔中或透過自訂屬性，以程式設計方式使用該行為來附加您的 <ph id="ph6">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>For more information about using behaviors to modify the runtime, see <bpt id="p1">[</bpt>Configuring and Extending the Runtime with Behaviors<ept id="p1">](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)</ept>.</source>
          <target state="translated">如需使用行為來修改執行階段的詳細資訊，請參閱<bpt id="p1">[</bpt>設定與擴充執行階段行為<ept id="p1">](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>The following code example demonstrates a service that implements <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> that returns only <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph3">`GreetingFault`</ph> when a service method throws a managed exception.</source>
          <target state="translated">下列程式碼範例將示範實作 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> 的服務，當服務方法擲回 Managed 例外狀況時，這個實作只會傳回 <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> 類型的 <ph id="ph3">`GreetingFault`</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>The following code example shows how to use a service behavior to add the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementation to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">下列程式碼範例示範如何使用服務行為，將 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> 實作加入至 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> 屬性。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>The following code example shows how to configure the service to load the service behavior using an application configuration file.</source>
          <target state="translated">下列程式碼範例示範如何使用應用程式組態檔，將服務設定為載入服務行為。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IErrorHandler">
          <source>For more details about how to expose a service behavior in a configuration file, see <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</source>
          <target state="translated">如需如何在組態檔中公開服務行為的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Enables error-related processing and returns a value that indicates whether the dispatcher aborts the session and the instance context in certain cases.</source>
          <target state="translated">啟用錯誤相關處理並傳回值，指出發送器是否會在某些情況下，中止工作階段和執行個體內容。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> should not abort the session (if there is one) and instance context if the instance context is not <ph id="ph3">&lt;see cref="F:System.ServiceModel.InstanceContextMode.Single" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 不應中止工作階段 (如果有的話) 和執行個體內容 (如果執行個體內容不是 <ph id="ph3">&lt;see cref="F:System.ServiceModel.InstanceContextMode.Single" /&gt;</ph>)，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method to implement error-related behaviors such as error logging, system notifications, shutting down the application, and so on, and return a value that specifies whether the exception has been handled appropriately.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> 方法，即可實作錯誤相關行為，例如錯誤記錄、系統通知、關閉應用程式等，並傳回指定例外狀況是否已適當處理的值。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Because the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method can be called from many different places there are no guarantees made about which thread the method is called on.</source>
          <target state="translated">因為 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> 方法可從許多不同地方呼叫，所以不保證此方法會在哪一個執行緒上呼叫。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Do not depend on <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method being called on the operation thread.</source>
          <target state="translated">請不要依賴作業執行緒上呼叫的 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>All <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementations are called.</source>
          <target state="translated">所有 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> 實作都會被呼叫。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>By default (when the return value is <ph id="ph1">`false`</ph>), if there is an exception, the dispatcher aborts any session and aborts the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> if the <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> is anything other than <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>.</source>
          <target state="translated">根據預設 (當傳回值是<ph id="ph1">`false`</ph>)，如果沒有發生例外狀況，發送器會中止任何工作階段，並中止<ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>如果<ph id="ph3">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph>以外的任何項目是<ph id="ph4">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The exception is then considered unhandled and any state is considered corrupt.</source>
          <target state="translated">然後例外狀況會視為未處理，而任何狀態都會視為已損毀。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>Return <ph id="ph1">`true`</ph> from <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> to prevent this default behavior.</source>
          <target state="translated">從 <ph id="ph1">`true`</ph> 傳回 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph>，以防止這個預設行為。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>If any error handler returns <ph id="ph1">`true`</ph> it instructs <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> that it is safe to continue using state associated with the failed request.</source>
          <target state="translated">如果任何錯誤處理常式傳回 <ph id="ph1">`true`</ph>，它會指示 <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 可安全地繼續使用與失敗要求相關聯的狀態。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>If no error handler returns <ph id="ph1">`true`</ph> from the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph> method the exception is considered unhandled and the default response applies, potentially resulting in an aborted <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType&gt;</ph> and channel when communicating on a session channel or the <ph id="ph4">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> property is not set to <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果錯誤處理常式沒有從 <ph id="ph1">`true`</ph> 方法傳回 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A&gt;</ph>，則例外狀況會被視為尚未處理，而且會套用預設回應，因而可能會在工作階段通道上進行通訊時，或在 <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType&gt;</ph> 屬性未設定為 <ph id="ph4">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> 時，產生中止的 <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType&gt;</ph> 和通道。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The <ph id="ph1">`error`</ph> parameter is never <ph id="ph2">`null`</ph> and contains the exception object that was thrown.</source>
          <target state="translated"><ph id="ph1">`error`</ph> 參數永遠不會是 <ph id="ph2">`null`</ph>，而且會包含已擲回的例外狀況物件。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The following code example demonstrates a service that implements <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> that returns only <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph3">`GreetingFault`</ph> when a service method throws a managed exception.</source>
          <target state="translated">下列程式碼範例將示範實作 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> 的服務，當服務方法擲回 Managed 例外狀況時，這個實作只會傳回 <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> 類型的 <ph id="ph3">`GreetingFault`</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The following code example shows how to use a service behavior to add the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementation to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">下列程式碼範例示範如何使用服務行為，將 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> 實作加入至 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> 屬性。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>The following code example shows how to configure the service to load the service behavior using an application configuration file.</source>
          <target state="translated">下列程式碼範例示範如何使用應用程式組態檔，將服務設定為載入服務行為。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)">
          <source>For more details about how to expose a service behavior in a configuration file, see <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</source>
          <target state="translated">如需如何在組態檔中公開服務行為的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The SOAP version of the message.</source>
          <target state="translated">訊息的 SOAP 版本。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> object that is returned to the client, or service, in the duplex case.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> 物件，這個物件會在雙工通訊模式下傳回到用戶端或服務。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>Enables the creation of a custom <ph id="ph1">&lt;see cref="T:System.ServiceModel.FaultException`1" /&gt;</ph> that is returned from an exception in the course of a service method.</source>
          <target state="translated">啟用建立由服務方法發生之例外狀況所傳回的自訂 <ph id="ph1">&lt;see cref="T:System.ServiceModel.FaultException`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method to create a custom fault message that is returned to the client.</source>
          <target state="translated">實作 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> 方法，即可建立傳回到用戶端的自訂錯誤訊息。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method will always be called for exceptions that leave operations, except when the WCF runtime recognizes the exception as especially fatal and rethrows the exception itself.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph>一律會保留作業，除了當 WCF 執行階段會辨識為特別嚴重的例外狀況和例外狀況本身會重新擲回的例外狀況的呼叫方法。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>When all <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> implementations have been called, the fault message is sent back to the client (if <ph id="ph2">`fault`</ph> is non-<ph id="ph3">`null`</ph>).</source>
          <target state="translated">在呼叫所有 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> 實作之後，就會將錯誤訊息傳送回用戶端 (如果 <ph id="ph2">`fault`</ph> 不是 <ph id="ph3">`null`</ph>)。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>If the <ph id="ph1">`fault`</ph> parameter is <ph id="ph2">`null`</ph> the default fault is sent to the client.</source>
          <target state="translated">如果<ph id="ph1">`fault`</ph>參數是<ph id="ph2">`null`</ph>預設錯誤傳送到用戶端。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The inbound message that caused the processing error is available during this method from the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">在使用這個方法的期間，可以從 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType&gt;</ph> 屬性取得導致處理錯誤的傳入訊息。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>Because the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method can be called from many different places there are no guarantees made about which thread the method is called on.</source>
          <target state="translated">因為 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> 方法可從許多不同地方呼叫，所以不保證此方法會在哪一個執行緒上呼叫。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>Do not depend on <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> method being called on the operation thread.</source>
          <target state="translated">請不要依賴作業執行緒上呼叫的 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The following code example demonstrates a service that implements <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> that returns only <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of type <ph id="ph3">`GreetingFault`</ph> when a service method throws a managed exception.</source>
          <target state="translated">下列程式碼範例將示範實作 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> 的服務，當服務方法擲回 Managed 例外狀況時，這個實作只會傳回 <ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> 類型的 <ph id="ph3">`GreetingFault`</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The following code example shows how to use a service behavior to add the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> implementation to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> property.</source>
          <target state="translated">下列程式碼範例示範如何使用服務行為，將 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IErrorHandler&gt;</ph> 實作加入至 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A&gt;</ph> 屬性。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>The following code example shows how to configure the service to load the service behavior using an application configuration file.</source>
          <target state="translated">下列程式碼範例示範如何使用應用程式組態檔，將服務設定為載入服務行為。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
          <source>For more details about how to expose a service behavior in a configuration file, see <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>.</source>
          <target state="translated">如需如何在組態檔中公開服務行為的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>