<Type Name="IErrorHandler" FullName="System.ServiceModel.Dispatcher.IErrorHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5abe47d685a48a50730ead6e4da1cc6da5e45d5e" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57950495" /></Metadata><TypeSignature Language="C#" Value="public interface IErrorHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IErrorHandler" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IErrorHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IErrorHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IErrorHandler" />
  <TypeSignature Language="F#" Value="type IErrorHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>可讓實作器控制傳回到呼叫端的錯誤訊息，並選擇性地執行自訂錯誤處理，例如記錄。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要明確控制應用程式的行為，擲回例外狀況時，請實作<xref:System.ServiceModel.Dispatcher.IErrorHandler>介面，並將它加入<xref:System.ServiceModel.Dispatcher.ChannelDispatcher>的<xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>屬性。 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 可讓您明確地控制產生的 SOAP 錯誤，決定是否要將它傳送回用戶端，以及執行相關的工作 (例如，記錄)。 錯誤處理常式會依其加入至 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 屬性的順序進行呼叫。  
  
 實作 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 方法，即可控制傳回到用戶端的錯誤訊息。  
  
 實作 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 方法，即可確認錯誤相關行為，其中包括記錄錯誤、確保 Fail Fast (失敗時，即刻傳回錯誤訊息，然後才停止)、關閉應用程式等。  
  
> [!NOTE]
>  因為 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 方法可從許多不同地方呼叫，所以不保證此方法會在哪一個執行緒上呼叫。 請不要依賴作業執行緒上呼叫的 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 方法。  
  
 在傳送回應訊息之前，會先呼叫所有的 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 實作。 在呼叫並回傳所有的 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 實作之後，以及在 `fault` 不是 `null` 時，就會根據作業合約將該訊息傳送回用戶端。 在呼叫所有實作之後，如果 `fault` 為 `null`，則會由 <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> 屬性值來控制回應訊息。  
  
> [!NOTE]
>  例外狀況可能會在呼叫所有 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 實作，而且將回應訊息傳送至通道之後發生。 如果通道例外狀況 （例如，將訊息序列化的困難）<xref:System.ServiceModel.Dispatcher.IErrorHandler>物件會收到通知。 在此情況下，您應該仍然要確定您的開發環境會攔截，並向您顯示這類例外狀況或利用追蹤功能來發現此問題。 如需有關追蹤的詳細資訊，請參閱 <<c0> [ 使用疑難排解您的應用程式追蹤](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md)。  
  
 在傳送回應訊息之後，會依照相同順序呼叫所有的 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 實作。  
  
 一般而言，<xref:System.ServiceModel.Dispatcher.IErrorHandler> 實作會加入至服務 (若是雙工通訊，則為用戶端) 上的 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 屬性。  
  
 您可以藉由實作某種行為 (<xref:System.ServiceModel.Dispatcher.IErrorHandler>、<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>、<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> 或 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> 物件)，將 <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType> 加入至執行階段，並且從組態檔中或透過自訂屬性，以程式設計方式使用該行為來附加您的 <xref:System.ServiceModel.Dispatcher.IErrorHandler>。  
  
 如需使用行為來修改執行階段的詳細資訊，請參閱[設定和擴充執行階段行為](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)。  
  
   
  
## Examples  
 下列程式碼範例將示範實作 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 的服務，當服務方法擲回 Managed 例外狀況時，這個實作只會傳回 <xref:System.ServiceModel.FaultException%601> 類型的 `GreetingFault`。  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 下列程式碼範例示範如何使用服務行為，將 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 實作加入至 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 屬性。  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 下列程式碼範例示範如何使用應用程式組態檔，將服務設定為載入服務行為。 如需如何在組態檔中公開服務行為的詳細資訊，請參閱 <xref:System.ServiceModel.Description.IServiceBehavior>。  

 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="HandleError">
      <MemberSignature Language="C#" Value="public bool HandleError (Exception error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception error) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function HandleError (error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="public bool HandleError (Exception exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception exception) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError error" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError exception" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="error">在處理期間擲回的例外狀況。</param>
        <param name="exception">在處理期間擲回的例外狀況。</param>
        <summary>啟用錯誤相關處理並傳回值，指出發送器是否會在某些情況下，中止工作階段和執行個體內容。</summary>
        <returns>如果 Windows Communication Foundation (WCF) 不應中止工作階段 (如果有的話) 和執行個體內容 (如果執行個體內容不是 <see cref="F:System.ServiceModel.InstanceContextMode.Single" />)，則為 <see langword="true" />；否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 方法，即可實作錯誤相關行為，例如錯誤記錄、系統通知、關閉應用程式等，並傳回指定例外狀況是否已適當處理的值。  
  
> [!NOTE]
>  因為 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 方法可從許多不同地方呼叫，所以不保證此方法會在哪一個執行緒上呼叫。 請不要依賴作業執行緒上呼叫的 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 方法。  
  
 所有 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 實作都會被呼叫。 根據預設 (當傳回值是`false`)，如果沒有發生例外狀況，發送器會中止任何工作階段，並中止<xref:System.ServiceModel.InstanceContext>如果<xref:System.ServiceModel.InstanceContextMode>以外的任何項目是<xref:System.ServiceModel.InstanceContextMode.Single>。  然後例外狀況會視為未處理，而任何狀態都會視為已損毀。  
  
 從 `true` 傳回 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>，以防止這個預設行為。 如果任何錯誤處理常式傳回`true`它會指示 WCF，並安全地繼續使用與失敗的要求相關聯的狀態。  
  
 如果錯誤處理常式沒有從 `true` 方法傳回 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>，則例外狀況會被視為尚未處理，而且會套用預設回應，因而可能會在工作階段通道上進行通訊時，或在 <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> 屬性未設定為 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> 時，產生中止的 <xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType> 和通道。  
  
 `error` 參數永遠不會是 `null`，而且會包含已擲回的例外狀況物件。  
  
   
  
## Examples  
 下列程式碼範例將示範實作 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 的服務，當服務方法擲回 Managed 例外狀況時，這個實作只會傳回 <xref:System.ServiceModel.FaultException%601> 類型的 `GreetingFault`。  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 下列程式碼範例示範如何使用服務行為，將 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 實作加入至 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 屬性。  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 下列程式碼範例示範如何使用應用程式組態檔，將服務設定為載入服務行為。 如需如何在組態檔中公開服務行為的詳細資訊，請參閱 <xref:System.ServiceModel.Description.IServiceBehavior>。  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvideFault">
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception error, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProvideFault (error As Exception, version As MessageVersion, ByRef fault As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ error, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception exception, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception exception, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ exception, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion *  -&gt; unit" Usage="iErrorHandler.ProvideFault (error, version, fault)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion *  -&gt; unit" Usage="iErrorHandler.ProvideFault (exception, version, fault)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="version" Type="System.ServiceModel.Channels.MessageVersion" Index="1" />
        <Parameter Name="fault" Type="System.ServiceModel.Channels.Message" RefType="ref" Index="2" />
      </Parameters>
      <Docs>
        <param name="error">在服務作業過程中擲回的 <see cref="T:System.Exception" /> 物件。</param>
        <param name="exception">在服務作業過程中擲回的 <see cref="T:System.Exception" /> 物件。</param>
        <param name="version">訊息的 SOAP 版本。</param>
        <param name="fault"><see cref="T:System.ServiceModel.Channels.Message" /> 物件，這個物件會在雙工通訊模式下傳回到用戶端或服務。</param>
        <summary>啟用建立由服務方法發生之例外狀況所傳回的自訂 <see cref="T:System.ServiceModel.FaultException`1" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 實作 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 方法，即可建立傳回到用戶端的自訂錯誤訊息。  <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>方法一律會保留作業，除了當 WCF 執行階段會辨識為特別嚴重的例外狀況和例外狀況本身會重新擲回的例外狀況的呼叫。 在呼叫所有 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 實作之後，就會將錯誤訊息傳送回用戶端 (如果 `fault` 不是 `null`)。 如果`fault`參數是`null`則預設的 fault 會傳送至用戶端。  
  
> [!NOTE]
>  在使用這個方法的期間，可以從 <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType> 屬性取得導致處理錯誤的傳入訊息。  
  
> [!NOTE]
>  因為 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 方法可從許多不同地方呼叫，所以不保證此方法會在哪一個執行緒上呼叫。 請不要依賴作業執行緒上呼叫的 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 方法。  
  
   
  
## Examples  
 下列程式碼範例將示範實作 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 的服務，當服務方法擲回 Managed 例外狀況時，這個實作只會傳回 <xref:System.ServiceModel.FaultException%601> 類型的 `GreetingFault`。  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 下列程式碼範例示範如何使用服務行為，將 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 實作加入至 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 屬性。  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 下列程式碼範例示範如何使用應用程式組態檔，將服務設定為載入服務行為。 如需如何在組態檔中公開服務行為的詳細資訊，請參閱 <xref:System.ServiceModel.Description.IServiceBehavior>。  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>