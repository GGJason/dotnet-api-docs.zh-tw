<Type Name="ExceptionHandler" FullName="System.ServiceModel.Dispatcher.ExceptionHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="71aac6188e9d86d42129e5847fd1f20037bf1552" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36415605" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExceptionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ExceptionHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExceptionHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandler abstract" />
  <TypeSignature Language="F#" Value="type ExceptionHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="1e334-101">擴充 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 類別，建立 Windows Communication Foundation (WCF) 執行階段中所發生未處理之例外狀況的例外處理常式。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1e334-101">Extend the <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> class to create an exception handler for unhandled exceptions that occur within the Windows Communication Foundation (WCF) runtime.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e334-102">擴充 <xref:System.ServiceModel.Dispatcher.ExceptionHandler> 類別並覆寫 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 方法，以判定例外狀況是否應該結束應用程式。</span><span class="sxs-lookup"><span data-stu-id="1e334-102">Extend the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and override the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method to determine whether an exception should terminate the application.</span></span> <span data-ttu-id="1e334-103">然後建立您的自訂的新執行個體<xref:System.ServiceModel.Dispatcher.ExceptionHandler>類別，並將它指派給靜態<xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A>或<xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A>屬性，再建立 WCF 用戶端或服務。</span><span class="sxs-lookup"><span data-stu-id="1e334-103">Then create a new instance of your custom <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and assign it to the static <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> or <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property prior to creating WCF clients or services.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e334-104">下列程式碼範例將示範會覆寫 <xref:System.ServiceModel.Dispatcher.ExceptionHandler> 方法的 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 抽象類別 (Abstract Class) 實作。</span><span class="sxs-lookup"><span data-stu-id="1e334-104">The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.</span></span>  
  
 [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]
 [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  
  
 <span data-ttu-id="1e334-105">下列程式碼範例示範如何啟用自訂`MyExceptionHandler`WCF 執行階段中發生未處理例外狀況。</span><span class="sxs-lookup"><span data-stu-id="1e334-105">The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the WCF runtime.</span></span>  
  
 [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]
 [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1e334-106">初始化 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e334-106">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysHandle">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlwaysHandle As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AlwaysHandle { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlwaysHandle : System.ServiceModel.Dispatcher.ExceptionHandler" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e334-107">取得處理所有例外狀況的 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e334-107">Gets an instance of <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> that handles all exceptions.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e334-108">
            <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 物件，這個物件會為所有例外狀況傳回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e334-108">An <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that returns <see langword="true" /> for all exceptions.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousThreadExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AsynchronousThreadExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AsynchronousThreadExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsynchronousThreadExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e334-109">取得或設定應用程式定義域的目前 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e334-109">Gets or sets the current <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementation for the application domain.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e334-110">指派自訂<see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />未處理的物件，可接收非同步 Windows Communication Foundation (WCF) 執行緒上發生的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e334-110">Assign a custom <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that receives unhandled exceptions that occur on asynchronous Windows Communication Foundation (WCF) threads.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e334-111">根據預設，<xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A>屬性是`null`，並在非同步 WCF 執行緒的未處理例外狀況終止應用程式。</span><span class="sxs-lookup"><span data-stu-id="1e334-111">By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> property is `null`, and unhandled exceptions on asynchronous WCF threads terminate the application.</span></span>  <span data-ttu-id="1e334-112">將這個屬性設定為 <xref:System.ServiceModel.Dispatcher.ExceptionHandler> 物件，便可接收和回應這些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="1e334-112">Set this property to an <xref:System.ServiceModel.Dispatcher.ExceptionHandler> object to receive and react to these exceptions.</span></span>  
  
 <span data-ttu-id="1e334-113">如果未處理的例外狀況發生於非同步 WCF 執行緒上，到達這個處理常式可能會危害的應用程式定義域的狀態。</span><span class="sxs-lookup"><span data-stu-id="1e334-113">If an unhandled exception occurs on an asynchronous WCF thread and reaches this handler, the state of the application domain may be compromised.</span></span>  <span data-ttu-id="1e334-114"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 不應該傳回`true`這些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="1e334-114"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> should not return `true` for these exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="public abstract bool HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool HandleException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="abstract member HandleException : Exception -&gt; bool" Usage="exceptionHandler.HandleException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="1e334-115">例外狀況發生在 Windows Communication Foundation (WCF) 執行階段中，而這可能會終止應用程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e334-115">The exception the occurred within the Windows Communication Foundation (WCF) runtime and which may terminate the application.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e334-116">在衍生類別中覆寫時，如果例外狀況已處理，則傳回 <see langword="true" />，如果應該重新擲回例外狀況並結束應用程式，則傳回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e334-116">When overridden in a derived class, returns <see langword="true" /> if the exception has been handled, or <see langword="false" /> if the exception should be rethrown and the application terminated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e334-117">如果已處理例外狀況，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e334-117">
              <see langword="true" /> if the exception has been handled; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e334-118">如果已處理例外狀況，<xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 屬性會傳回 `true`。</span><span class="sxs-lookup"><span data-stu-id="1e334-118">The <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> property returns `true` if the exception has been handled.</span></span> <span data-ttu-id="1e334-119">如果是傳回 `false` 或擲回不同的例外狀況，則會重新擲回原始例外狀況。</span><span class="sxs-lookup"><span data-stu-id="1e334-119">If it returns `false` or throws a different exception, the original exception is rethrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e334-120">下列程式碼範例將示範會覆寫 <xref:System.ServiceModel.Dispatcher.ExceptionHandler> 方法的 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 抽象類別 (Abstract Class) 實作。</span><span class="sxs-lookup"><span data-stu-id="1e334-120">The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.</span></span>  
  
  
  
 <span data-ttu-id="1e334-121">下列程式碼範例示範如何啟用自訂`MyExceptionHandler`WCF 執行階段中發生未處理例外狀況。</span><span class="sxs-lookup"><span data-stu-id="1e334-121">The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the WCF runtime.</span></span>  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TransportExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ TransportExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransportExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e334-122">取得或設定應用程式定義域的目前傳輸 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e334-122">Gets or sets the current transport <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementation for the application domain.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e334-123">自訂<see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />物件，可接收未處理的全域 Windows Communication Foundation (WCF) 傳輸中發生的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e334-123">A custom <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that receives unhandled exceptions that occur within the global Windows Communication Foundation (WCF) transports.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e334-124">根據預設，<xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A>屬性設定的值為<xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>，導致要忽略的 WCF 傳輸內未處理的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="1e334-124">By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property is set to the value of <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, causing unhandled exceptions within WCF transports to be ignored.</span></span>  <span data-ttu-id="1e334-125">將這個屬性為 <xref:System.ServiceModel.Dispatcher.ExceptionHandler> 的執行個體來接收和回應這些例外狀況。</span><span class="sxs-lookup"><span data-stu-id="1e334-125">Set this property to an instance of <xref:System.ServiceModel.Dispatcher.ExceptionHandler> to receive and react to these exceptions.</span></span>  
  
 <span data-ttu-id="1e334-126">如果未處理的例外狀況發生內的全域 WCF 傳輸，而且到達這個處理常式，所以可能受到危害的應用程式定義域的狀態。</span><span class="sxs-lookup"><span data-stu-id="1e334-126">If an unhandled exception occurs within a global WCF transport and reaches this handler, there is a possibility that the state of the application domain is compromised.</span></span> <span data-ttu-id="1e334-127"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 可以傳回`false`這些例外狀況，將應用程式終止。</span><span class="sxs-lookup"><span data-stu-id="1e334-127"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> can return `false` for these exceptions to cause the application to be terminated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>