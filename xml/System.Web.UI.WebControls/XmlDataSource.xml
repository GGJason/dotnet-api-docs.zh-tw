<Type Name="XmlDataSource" FullName="System.Web.UI.WebControls.XmlDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="80a8abd56617d8c6d6e4f6c130871ad90ce06595" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55343076" /></Metadata><TypeSignature Language="C#" Value="public class XmlDataSource : System.Web.UI.HierarchicalDataSourceControl, System.ComponentModel.IListSource, System.Web.UI.IDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDataSource extends System.Web.UI.HierarchicalDataSourceControl implements class System.ComponentModel.IListSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.XmlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDataSource&#xA;Inherits HierarchicalDataSourceControl&#xA;Implements IDataSource, IListSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDataSource : System::Web::UI::HierarchicalDataSourceControl, System::ComponentModel::IListSource, System::Web::UI::IDataSource" />
  <TypeSignature Language="F#" Value="type XmlDataSource = class&#xA;    inherit HierarchicalDataSourceControl&#xA;    interface IDataSource&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HierarchicalDataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Transforming")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DataFile")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示資料繫結控制項的 XML 資料來源。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本主題內容：  
  
-   [簡介](#introduction)  
  
-   [XML 資料來源](#source_of_xml_data)  
  
-   [更新的 XML 資料](#updating_xml_data)  
  
-   [指定的 XSL 轉換](#specifying_an_xsl_transformation)  
  
-   [使用 XPath 運算式進行篩選](#filtering_using_an_xpath_expression)  
  
-   [快取](#caching)  
  
-   [其他功能](#additional_features)  
  
-   [資料檢視物件](#data_view_object)  
  
-   [宣告式語法](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>簡介  
 <xref:System.Web.UI.WebControls.XmlDataSource>控制項是逐一呈現資料繫結控制項的 XML 資料的資料來源控制項。 <xref:System.Web.UI.WebControls.XmlDataSource>控制項可用的資料繫結控制項中顯示階層式和表格式資料。 <xref:System.Web.UI.WebControls.XmlDataSource>控制項通常會用來顯示在唯讀案例中的階層式 XML 資料。 因為<xref:System.Web.UI.WebControls.XmlDataSource>控制項延伸<xref:System.Web.UI.HierarchicalDataSourceControl>類別，它使用階層式資料。 <xref:System.Web.UI.WebControls.XmlDataSource>控制也會實作<xref:System.Web.UI.IDataSource>介面，並搭配表格式清單樣式、 資料或。  
  
> [!NOTE]
>  基於安全考量，沒有任何<xref:System.Web.UI.WebControls.XmlDataSource>控制項屬性儲存在檢視狀態。 因為它是在用戶端上的檢視狀態的內容進行解碼技術上可行，儲存的資料結構或其內容的機密資訊可能會讓您暴露資訊洩漏威脅。 請注意，如果您要儲存的資訊，例如<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>屬性在檢視狀態中，您可以啟用加密來保護內容，藉由設定<xref:System.Web.UI.Page.ViewStateEncryptionMode%2A>上`@ Page`指示詞。  
  
 頁面上，開發人員使用<xref:System.Web.UI.WebControls.XmlDataSource>控制項來顯示 XML 資料使用資料繫結控制項。  
  
<a name="source_of_xml_data"></a>   
## <a name="sources-of-xml-data"></a>XML 資料來源  
 <xref:System.Web.UI.WebControls.XmlDataSource>通常會從 XML 檔案，以指定的載入 XML 資料<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性。 您也可以直接由資料來源控制項在表單中使用字串儲存 XML 資料<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性。 如果您想要轉換的 XML 資料，顯示資料繫結控制項之前，您可以提供 Extensible Stylesheet Language (XSL) 樣式表轉換。 因為 XML 資料中，您通常載入樣式表檔案中，由<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性，但您也可以儲存它以字串形式直接使用<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>屬性。  
  
<a name="updating_xml_data"></a>   
## <a name="updating-xml-data"></a>更新的 XML 資料  
 <xref:System.Web.UI.WebControls.XmlDataSource>控制項常用的唯讀資料案例的資料繫結控制項的 XML 資料的顯示位置。 不過，您也可以使用<xref:System.Web.UI.WebControls.XmlDataSource>編輯 XML 資料的控制項。 若要編輯的 XML 資料，請呼叫<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>方法來擷取<xref:System.Xml.XmlDataDocument>是 XML 資料的記憶體中表示的物件。 您可以使用所公開的物件模型<xref:System.Xml.XmlDataDocument>和<xref:System.Xml.XmlNode>它包含或使用 XPath 篩選運算式來操作文件中的資料物件。 當您已變更的 XML 資料的記憶體中表示時，您可以將它儲存到磁碟，然後呼叫<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。  
  
 若要編輯的功能有些限制<xref:System.Web.UI.WebControls.XmlDataSource>控制項：  
  
-   XML 資料必須載入從 XML 檔案所指出<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性，不是從 XML 中指定的內嵌<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性。  
  
-   中可以指定任何 XSLT 轉換<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>或<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性。  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法不會處理儲存作業並行處理不同的要求。 透過 XML 檔案時，如果要編輯多個使用者<xref:System.Web.UI.WebControls.XmlDataSource>，所有的使用者正在使用相同的資料不保證。 此外，也可以針對<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>因為這些相同的並行處理問題而失敗的作業。  
  
<a name="specifying_an_xsl_transformation"></a>   
## <a name="specifying-an-xsl-transformation"></a>指定的 XSL 轉換  
 執行 XML 資料的常見作業將它轉從一種 XML 資料集變成另一個。 <xref:System.Web.UI.WebControls.XmlDataSource>控制項支援使用 XML 轉換<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>並<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性，指定要傳遞至資料繫結控制項之前，套用至 XML 資料的 XSL 樣式表，而<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>屬性，可讓您動態 XSLT 樣式表引數提供給可供轉換期間的 XSL 樣式表。 如果您指定篩選運算式使用 XPath<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>屬性，它會套用轉換之後。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.XmlDataSource>類別會使用已被取代<xref:System.Xml.Xsl.XslTransform>類別執行 XSL 轉換。 如果您想要使用以後所導入的樣式表功能<xref:System.Xml.Xsl.XslTransform>類別已被取代，以手動方式將轉換套用使用<xref:System.Xml.Xsl.XslCompiledTransform>類別。  
  
<a name="filtering_using_an_xpath_expression"></a>   
## <a name="filtering-using-an-xpath-expression"></a>使用 XPath 運算式進行篩選  
 根據預設，<xref:System.Web.UI.WebControls.XmlDataSource>控制項載入所識別的 XML 檔案中的所有 XML 資料<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性或找到的內嵌在<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性，但您可以篩選使用 XPath 運算式的資料。 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>屬性支援的 XPath 語法篩選器，會套用之後已經載入及轉換 XML 資料。  
  
<a name="caching"></a>   
## <a name="caching"></a>快取  
 基於效能目的，啟用快取<xref:System.Web.UI.WebControls.XmlDataSource>預設的控制項。 開啟及讀取伺服器上的 XML 檔案，每次要求頁面，可以減少您的應用程式的效能。 快取可讓您的伺服器，但代價是 Web 伺服器上的記憶體上減少的處理負載在大部分情況下，這會是理想的取捨。 <xref:System.Web.UI.WebControls.XmlDataSource>自動快取資料時<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>屬性設定為`true`，和<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>屬性設定為快取會儲存資料，快取失效之前的秒數。 您可以使用<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>進一步微調資料來源控制項的快取行為。  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>其他功能  
 下表列出支援的其他功能<xref:System.Web.UI.WebControls.XmlDataSource>控制項。  
  
|功能|描述|  
|----------------|-----------------|  
|排序|不支援<xref:System.Web.UI.WebControls.XmlDataSource>控制項。|  
|篩選|<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>屬性可用來篩選使用適當的 XPath 運算式的 XML 資料。|  
|分頁|不支援<xref:System.Web.UI.WebControls.XmlDataSource>控制項。|  
|Updating|支援的操作<xref:System.Xml.XmlDataDocument>直接然後呼叫<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。|  
|Deleting|支援的操作<xref:System.Xml.XmlDataDocument>直接然後呼叫<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。|  
|插入|支援的操作<xref:System.Xml.XmlDataDocument>直接然後呼叫<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。|  
|快取|使用預設的情況下，啟用<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>屬性設定為 0 （無限） 和<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>。|  
  
<a name="data_view_object"></a>   
## <a name="data-view-object"></a>資料檢視物件  
 因為<xref:System.Web.UI.WebControls.XmlDataSource>控制項支援顯示階層式資料的資料繫結控制項，以及顯示表格式資料控制項、 資料來源控制項支援多種類型的資料來源檢視物件，其基礎的 XML 資料上。 <xref:System.Web.UI.WebControls.XmlDataSource>控制項會擷取的單一具名<xref:System.Web.UI.WebControls.XmlDataSourceView>顯示表格式資料的資料繫結控制項搭配使用時的物件。 <xref:System.Web.UI.IDataSource.GetViewNames%2A>方法會識別此單一具名檢視。 顯示階層式資料的資料繫結控制項搭配使用時<xref:System.Web.UI.WebControls.XmlDataSource>控制項會擷取<xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView>任何唯一的階層式路徑傳遞給<xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A>方法。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>宣告式語法  
  
```  
<asp:XmlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    DataFile="string"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnTransforming="Transforming event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    TransformArgumentList="string"  
    TransformFile="string"  
    Visible="True|False"  
    XPath="string"  
>  
    <Data>string</Data>  
    <Transform>string</Transform>  
</asp:XmlDataSource>  
```  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>用來控制<xref:System.Web.UI.WebControls.TreeView>控制項來顯示從範例 XML 檔的 XML 資料。 第二個範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>樣板化控制項<xref:System.Web.UI.WebControls.Repeater>控制項來顯示 XML 資料。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>用來控制<xref:System.Web.UI.WebControls.TreeView>控制項來顯示 XML 資料。 <xref:System.Web.UI.WebControls.XmlDataSource>從所識別的 XML 檔案載入 XML 資料<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 在程式碼範例中的 XML 檔案具有下列資料：  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>樣板化控制項<xref:System.Web.UI.WebControls.Repeater>控制項來顯示 XML 資料。 <xref:System.Web.UI.WebControls.Repeater>控制項使用 XPath 資料繫結運算式來繫結至資料的項目內的 XML 文件的<xref:System.Web.UI.WebControls.XmlDataSource>表示。 如需詳細資訊`XPath`並`XPathSelect`資料繫結語法，請參閱<xref:System.Web.UI.XPathBinder>類別。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/CS/xmlds14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/VB/xmlds14vb.aspx#1)]  
  
 在程式碼範例中的 XML 檔案具有下列資料：  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>John</firstn>  
         <lastn>Smith</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料來源控制項快取其所擷取之資料的時間長度 (以秒為單位)。</summary>
        <value><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項快取資料擷取作業結果的秒數。 預設值為 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource>控制項自動快取資料，則規定如下時：  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 屬性設定為 `true`。  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>屬性設為大於 0，表示快取會儲存資料，快取失效之前的秒數。  
  
 對任何變更<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性或包含 XML 資料檔案的內容會導致快取失效。  
  
 根據預設，<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>屬性設定為 0，表示無限期的快取，和資料來源會快取資料，直到它相依於 XML 檔案變更時。  
  
 快取的行為受到持續時間的組合和<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設定。 如果<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設定為<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>，則<xref:System.Web.UI.WebControls.XmlDataSource>控制快取資料的第一個資料擷取作業、 保留在記憶體中所指定的時間長度<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>，並使它失效之後的時間結束為止。 然後會在下一項作業時重新整理快取。 如果<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設為<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>，資料來源控制項快取上第一次的資料擷取作業的資料，但它會保留在每個後續的作業時的快取的時間範圍會重設。 如果沒有任何活動一段時間等於快取只過期<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>自上次擷取的資料。  
  
   
  
## Examples  
 下列程式碼範例示範如何啟用快取時使用<xref:System.Web.UI.WebControls.XmlDataSource>控制項來顯示 XML 檔案中包含的資料。 已啟用快取時<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>屬性設定為`true`而<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>設為資料來源控制項快取資料的秒數。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 在程式碼範例中的 XML 檔案具有下列資料：  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定快取期限原則，當與快取期間組合時，用來描述資料來源控制項所使用之快取的快取行為。</summary>
        <value>其中一個 <see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 值。 預設的快取到期原則設定是 <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 快取的行為由多種<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設定。 如果<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設定為<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>，則<xref:System.Web.UI.WebControls.XmlDataSource>快取資料的第一個資料擷取作業、 保留在記憶體中所指定的時間長度<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>，並使它失效之後的時間結束為止。 然後會在下一項作業時重新整理快取。 如果<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設為<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>，資料來源控制項快取上第一次的資料擷取作業的資料，但它會保留在每個後續的作業時的快取的時間範圍會重設。 快取逾期，只有當沒有任何活動一段時間等於<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>自上次擷取的資料。  
  
   
  
## Examples  
 下列程式碼範例示範如何啟用快取時使用<xref:System.Web.UI.WebControls.XmlDataSource>控制項來顯示 XML 檔案中包含的資料。 已啟用快取時<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>屬性設定為`true`而<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>設為資料來源控制項快取資料的秒數。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 在程式碼範例中的 XML 檔案具有下列資料：  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyContext">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyContext As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyContext { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyContext : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定來自檢視狀態之資料來源控制項的快取索引鍵值，或是將快取索引鍵加入檢視狀態中。</summary>
        <value>快取索引鍵的值；如果快取索引鍵不在檢視狀態中，則為空字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext%2A>屬性可讓您以手動方式建立的快取索引鍵<xref:System.Web.UI.WebControls.XmlDataSource>控制項。 這是必要的只有當您要指定包含 XML 或 XSLT 的資料，而不是指定的檔案，其中包含資料控制項的物件。 當您將資料指派至控制項時，資料是不會用來產生快取索引鍵。 相反地，您必須手動產生唯一的快取索引鍵如果您打算更新的資料物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定使用者定義的索引鍵相依性，這個索引鍵相依性連結至資料來源控制項所建立的所有資料快取物件。 索引鍵過期時，所有快取物件都會明確過期。</summary>
        <value>索引鍵，識別 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項建立的所有快取物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource>控制項支援的資料快取。 快取資料，雖然<xref:System.Web.UI.WebControls.XmlDataSource>擷取資料，從快取，而不是從基礎資料檔案。 當快取過期時，它會從基礎檔案擷取資料，並重新快取資料。  
  
 您可以設定<xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>屬性，以建立所建立的所有快取項目之間的相依性<xref:System.Web.UI.WebControls.XmlDataSource>控制項和索引鍵。 您還可以索引鍵過期，使所有快取項目以程式設計方式失效在任何時間。  
  
 因為用來建立的屬性<xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>，就可以多個<xref:System.Web.UI.WebControls.XmlDataSource>控制項可以使用相同的快取，讓他們可以在這裡從相同的 XML 檔案載入相同的資料和轉換檔案並具有相同的案例中<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>並<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設定。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual string Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Data { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Data : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料來源控制項繫結至的 XML 資料區塊。</summary>
        <value><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項繫結至的內嵌 XML 資料字串。 預設值為 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在宣告式的情況下，<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性會指定為多行的內部屬性的<xref:System.Web.UI.WebControls.XmlDataSource>物件。 內部屬性適用於 XML 資料，因為它可讓您以任何方式將 XML 資料格式化，並忽略的字元填補的問題，例如填補引號字元。  
  
 如果兩個<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>並<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>設定的屬性，<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性會優先，並用 XML 檔案中的資料而非 XML 資料中指定<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性。  
  
 如果您變更的值<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性，<xref:System.Web.UI.IDataSource.DataSourceChanged>就會引發事件。 如果已啟用快取，而且您變更的值<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>，快取失效。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>控制項來顯示所包含的內嵌 XML 資料<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性<xref:System.Web.UI.WebControls.TreeView>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/CS/xmlds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/VB/xmlds10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此文件正在載入。</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="DataFile">
      <MemberSignature Language="C#" Value="public virtual string DataFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定資料來源繫結至的 XML 檔案名稱。</summary>
        <value>XML 檔案的絕對實體路徑或相對路徑，這個檔案包含 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項所表示的資料。 預設值為 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果兩個<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>並<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>設定的屬性，<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性會優先，並用 XML 檔案中的資料而非 XML 資料中指定<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性。  
  
 如果您變更的值<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性，<xref:System.Web.UI.IDataSource.DataSourceChanged>就會引發事件。 如果已啟用快取，而且您變更的值<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>，快取失效。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>控制項來顯示所含的檔案中 XML 資料<xref:System.Web.UI.WebControls.TreeView>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 在程式碼範例中的 XML 檔案具有下列資料：  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此文件正在載入。</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項是否啟用了資料快取。</summary>
        <value>如果啟用了資料來源控制項的資料快取則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource>控制項自動快取資料時<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>屬性設定為`true`。 根據預設，<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>屬性設定為 0，表示無限期的快取，和資料來源會快取資料，直到它相依於 XML 檔案變更時。 如果您將設定<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>屬性大於 0 的值，快取會儲存資料，許多秒，然後再擷取新的集。  
  
 如果<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>屬性設定為`true`而<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>屬性設定，快取項目不會自動會失效時變更轉換引數清單中的參數。 在此情況下，您必須撰寫程式碼，以確認所設定的快取<xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何啟用快取時使用<xref:System.Web.UI.WebControls.XmlDataSource>控制項來顯示 XML 檔案中包含的資料。 已啟用快取時<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>屬性設定為`true`而<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>設為資料來源控制項快取資料的秒數。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 在程式碼範例中的 XML 檔案具有下列資料：  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetHierarchicalView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.HierarchicalDataSourceView GetHierarchicalView(string viewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetHierarchicalView (viewPath As String) As HierarchicalDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::HierarchicalDataSourceView ^ GetHierarchicalView(System::String ^ viewPath);" />
      <MemberSignature Language="F#" Value="override this.GetHierarchicalView : string -&gt; System.Web.UI.HierarchicalDataSourceView" Usage="xmlDataSource.GetHierarchicalView viewPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HierarchicalDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewPath">XPath 運算式，識別從中建置目前階層式檢視的節點。</param>
        <summary>取得 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項的資料來源檢視物件。 <paramref name="viewPath" /> 參數可以是 XPath 運算式。</summary>
        <returns>傳回 <see cref="T:System.Web.UI.WebControls.XmlHierarchicalDataSourceView" /> 物件，表示由 <paramref name="viewPath" /> 所識別之資料節點開始的單一資料檢視。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以呼叫<xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A>方法來擷取<xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.XmlDataSource>控制項。 如果您指定`viewPath`值，<xref:System.Web.UI.WebControls.XmlDataSource>控制項會傳回資料來源檢視物件，代表所識別的節點上的檢視`viewPath`，以及其所有子節點。 如果您設定`viewPath`要<xref:System.String.Empty?displayProperty=nameWithType>，則<xref:System.Web.UI.WebControls.XmlDataSource>控制檢查<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>屬性來判斷用來建置資料來源檢視的根節點。 如果<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>設定屬性，則<xref:System.Web.UI.WebControls.XmlDataSource>控制項將使用它來傳回在相同的資料來源檢視方式`viewPath`運算式的使用方式。 如果<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>未設定屬性，<xref:System.Web.UI.WebControls.XmlDataSource>控制項傳回 XML 資料中的所有資料節點的檢視。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlDocument">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument GetXmlDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlDocument GetXmlDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlDocument () As XmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlDocument ^ GetXmlDocument();" />
      <MemberSignature Language="F#" Value="member this.GetXmlDocument : unit -&gt; System.Xml.XmlDocument" Usage="xmlDataSource.GetXmlDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將 XML 資料直接從基礎資料儲存區或從快取中載入記憶體，然後以 <see cref="T:System.Xml.XmlDataDocument" /> 物件的形式傳回它。</summary>
        <returns><see cref="T:System.Xml.XmlDataDocument" /> 物件，表示在 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 屬性中指定的 XML，或 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 屬性所識別之檔案中的 XML，並且已套用任何轉換和 <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" /> 查詢。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>直接存取基礎 XML 資料的記憶體中表示的方法。  
  
 您可以操作傳回<xref:System.Xml.XmlDataDocument>物件，然後呼叫<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>保存您對所指定的 XML 檔案<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性。 必須符合幾項需求<xref:System.Xml.XmlDataDocument>已成功儲存物件。 如需詳細資訊，請參閱 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 方法。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>用來控制<xref:System.Web.UI.WebControls.TreeView>控制項來顯示和編輯 XML 檔案中所包含的 XML 資料。 第二個範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>樣板化控制項<xref:System.Web.UI.WebControls.Repeater>控制項來顯示和編輯 XML 檔案中所包含的 XML 資料。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>用來控制<xref:System.Web.UI.WebControls.TreeView>控制項來顯示和編輯 XML 檔案中所包含的 XML 資料。 資料在記憶體中使用操作<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>方法，每次您選取<xref:System.Web.UI.WebControls.TreeView> 節點，並再儲存到 XML 檔案。 最後，<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>上呼叫<xref:System.Web.UI.WebControls.TreeView>控制項來重新整理其顯示的資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>樣板化控制項<xref:System.Web.UI.WebControls.Repeater>控制項來顯示和編輯 XML 檔案中所包含的 XML 資料。 如上述範例中，使用資料操作中使用記憶體<xref:System.Xml.XmlDataDocument>擷取<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>方法。 最後，<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>上呼叫<xref:System.Web.UI.WebControls.TreeView>控制項來重新整理其顯示的資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 程式碼範例中的 XML 檔案具有下列資料：  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定了 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 屬性的 URL，不過，<see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項沒有 Web 資源的正確使用權限。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 屬性指定 URL，然而，它不是 HTTP 的 URL。  
  
-或- 
在使用 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項之前，設計工具未正確對應設計階段相對路徑。  
  
-或- 
同時啟用快取和用戶端模擬。 啟用用戶端模擬時，<see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項不支援快取。</exception>
        <exception cref="T:System.Web.HttpException">對 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 屬性指定之路徑的存取遭拒絕。</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.Save" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      </Docs>
    </Member>
    <Member MemberName="OnTransforming">
      <MemberSignature Language="C#" Value="protected virtual void OnTransforming (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTransforming(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTransforming (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTransforming(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTransforming : EventArgs -&gt; unit&#xA;override this.OnTransforming : EventArgs -&gt; unit" Usage="xmlDataSource.OnTransforming e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>在 <see cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" /> 控制項對其 XML 資料執行 XSLT 轉換之前，引發 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需如何處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>用來控制<xref:System.Web.UI.WebControls.TreeView>控制項來顯示轉換 XML 資料。 將 XML 轉換會使用所指示的樣式表<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性。 此外，樣式表會使用傳遞至資料來源控制項中的轉換引數<xref:System.Xml.Xsl.XsltArgumentList>物件在執行階段。 在程式碼範例示範如何傳遞<xref:System.Xml.Xsl.XsltArgumentList>資料來源控制項所處理的物件<xref:System.Web.UI.WebControls.XmlDataSource.Transforming>事件和自訂事件處理常式，方法的名稱以識別為<xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A>方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 在程式碼範例中的 XML 檔案具有下列資料：  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 使用下列樣式表時，會將 XML 轉換。  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>當覆寫<see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />衍生類別時，請務必呼叫<see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />方法的基底類別，好讓註冊的委派可接收事件。</para></block>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.Save" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; unit" Usage="xmlDataSource.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 屬性已設定，儲存 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 控制項目前存放在記憶體中的 XML 資料到磁碟中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然<xref:System.Web.UI.WebControls.XmlDataSource>控制項通常會用於唯讀資料繫結案例，您可以使用<xref:System.Web.UI.WebControls.XmlDataSource>編輯基礎 XML 資料檔中的 XML 資料的控制項。 在這些情況下，從 XML 檔案載入 XML 資料<xref:System.Web.UI.WebControls.XmlDataSource>控制項。 您修改<xref:System.Xml.XmlDataDocument>中使用記憶體<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>方法，並再儲存到 XML 資料檔，藉由呼叫<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。 符合下列條件時，就能實現此可編輯的 XML 案例：  
  
-   從所指定的 XML 檔案載入 XML 資料<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性，不是從內嵌 XML 資料中指定<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性。  
  
-   中指定任何 XSLT 轉換<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>或<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性。  
  
 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法不會處理儲存作業並行處理不同的要求。 透過 XML 檔案時，如果要編輯多個使用者<xref:System.Web.UI.WebControls.XmlDataSource>控制項，則所有使用者都正在使用相同的資料不保證。 此外，也可以針對<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>因為這些相同的並行處理問題而失敗的作業。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>用來控制<xref:System.Web.UI.WebControls.TreeView>控制項來顯示和編輯 XML 檔案中所包含的 XML 資料。 第二個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>樣板化控制項<xref:System.Web.UI.WebControls.Repeater>控制項來顯示和編輯 XML 檔案中所包含的 XML 資料。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>用來控制<xref:System.Web.UI.WebControls.TreeView>控制項來顯示和編輯 XML 檔案中所包含的 XML 資料。 資料在記憶體中使用操作<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>方法，每次您選取<xref:System.Web.UI.WebControls.TreeView> 節點，並再儲存到 XML 檔案。 最後，<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>上呼叫<xref:System.Web.UI.WebControls.TreeView>控制項來重新整理其顯示的資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>樣板化控制項<xref:System.Web.UI.WebControls.Repeater>控制項來顯示和編輯 XML 檔案中所包含的 XML 資料。 如上述範例中，使用資料操作中使用記憶體<xref:System.Xml.XmlDataDocument>物件擷取<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>方法。 最後，<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>上呼叫<xref:System.Web.UI.WebControls.TreeView>控制項來重新整理其顯示的資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 程式碼範例中的 XML 檔案具有下列資料：  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XML 資料是使用 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 屬性 (而不是 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 屬性) 載入的。  
  
-或- 
指定了 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 屬性的 URL，不過，<see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項沒有 Web 資源的正確使用權限。</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 屬性指定 URL，然而，它不是 HTTP 的 URL。  
  
-或- 
在使用 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項之前，設計工具未正確對應設計階段相對路徑。</exception>
        <exception cref="T:System.Web.HttpException">對 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 屬性指定之路徑的存取遭拒絕。</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</summary>
        <value>如果集合為 <see cref="T:System.Collections.IList" /> 物件的集合，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 它可用時，才<xref:System.Web.UI.WebControls.XmlDataSource>執行個體轉換成<xref:System.ComponentModel.IListSource>介面。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IListSource.GetList" />。</summary>
        <returns>物件，實作可繫結至資料來源的 <see cref="T:System.Collections.IList" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 它可用時，才<xref:System.Web.UI.WebControls.XmlDataSource>執行個體轉換成<xref:System.ComponentModel.IListSource>介面。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.DataSourceChanged">
      <MemberSignature Language="C#" Value="event EventHandler System.Web.UI.IDataSource.DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler System.Web.UI.IDataSource.DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Custom Event DataSourceChanged As EventHandler Implements System.Web.UI.IDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.IDataSource.DataSourceChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如需這個成員的說明，請參閱 <see cref="E:System.Web.UI.IDataSource.DataSourceChanged" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 它可用時，才<xref:System.Web.UI.WebControls.XmlDataSource>執行個體轉換成<xref:System.Web.UI.IDataSource>介面。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetView">
      <MemberSignature Language="C#" Value="System.Web.UI.DataSourceView IDataSource.GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.DataSourceView System.Web.UI.IDataSource.GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetView (viewName As String) As DataSourceView Implements IDataSource.GetView" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Web::UI::DataSourceView ^ System.Web.UI.IDataSource.GetView(System::String ^ viewName) = System::Web::UI::IDataSource::GetView;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">要擷取的檢視名稱。 如果 <see cref="F:System.String.Empty" /> 已指定，則會擷取 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項的預設檢視。</param>
        <summary>取得與資料來源控制項關聯的具名資料來源檢視。</summary>
        <returns>傳回與 <see cref="T:System.Web.UI.WebControls.XmlDataSourceView" /> 控制項關聯的具名 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 物件。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetViewNames">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IDataSource.GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.Web.UI.IDataSource.GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Function GetViewNames () As ICollection Implements IDataSource.GetViewNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.Web.UI.IDataSource.GetViewNames() = System::Web::UI::IDataSource::GetViewNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如需這個成員的說明，請參閱 <see cref="M:System.Web.UI.IDataSource.GetViewNames" />。</summary>
        <returns>物件，實作包含名稱的 <see cref="T:System.Collections.ICollection" />，表示與 <see cref="T:System.Web.UI.IDataSource" /> 物件關聯的檢視物件清單。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 它可用時，才<xref:System.Web.UI.WebControls.XmlDataSource>執行個體轉換成<xref:System.Web.UI.IDataSource>介面。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual string Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Transform" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Transform As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Transform { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定可延伸樣式表語言 (XSL) 資料的區塊，該資料會定義要在 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項所管理的 XML 資料上執行的 XSLT 轉換。</summary>
        <value>內嵌 XSL 字串，定義 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 或 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 屬性中所含資料所要執行的 XML 轉換。 預設值為 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在宣告式的情況下，<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>屬性會指定為多行的內部屬性的<xref:System.Web.UI.WebControls.XmlDataSource>物件。 內部屬性適用於 XSL 樣式表的資料，因為它可讓您格式化樣式表以任何方式，並忽略字元填補問題，例如填補引號字元。  
  
 如果兩個<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>並<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>設定的屬性，<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性會優先，並用的 XSL 樣式表檔案 (.xsl) 中的資料而不是在指定的樣式表項目<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>屬性。 如果使用設定 XPath 運算式<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>屬性，它會在轉換 XML 資料之後，套用。  
  
 如果您變更的值<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>屬性，<xref:System.Web.UI.IDataSource.DataSourceChanged>就會引發事件。 如果已啟用快取，而且您變更的值<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>，快取失效。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.XmlDataSource>類別會使用已被取代<xref:System.Xml.Xsl.XslTransform>類別執行 XSL 轉換。 如果您想要使用以後所導入的樣式表功能<xref:System.Xml.Xsl.XslTransform>類別已被取代，以手動方式將轉換套用使用<xref:System.Xml.Xsl.XslCompiledTransform>類別。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>樣板化控制項<xref:System.Web.UI.WebControls.Repeater>控制項來顯示轉換 XML 資料。 樣式表進行轉換是透過內嵌方式定義<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>資料來源控制項的屬性。  
  
  
  
 在程式碼範例中的 XML 檔案具有下列資料：  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>Todd</firstn>  
         <lastn>Rowe</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此文件正在載入。</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="TransformArgumentList">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XsltArgumentList TransformArgumentList" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformArgumentList As XsltArgumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Xsl::XsltArgumentList ^ TransformArgumentList { System::Xml::Xsl::XsltArgumentList ^ get(); void set(System::Xml::Xsl::XsltArgumentList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformArgumentList : System.Xml.Xsl.XsltArgumentList with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltArgumentList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>提供 XSLT 引數的清單，這些引數與 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> 或 <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> 屬性所定義的樣式表搭配使用，以執行 XML 資料的轉換。</summary>
        <value><see cref="T:System.Xml.Xsl.XsltArgumentList" /> 物件，包含 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項載入 XML 資料時，要套用至該 XML 資料的 XSLT 參數和物件。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>屬性時<xref:System.Web.UI.WebControls.XmlDataSource.Transforming>就會引發事件，以確保 XSLT 參數可在 XSLT 轉換套用至 XML 資料的時間。  
  
 如果<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>屬性設定為`true`而<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>屬性設定，快取項目不會自動會失效時變更轉換引數清單中的參數。 在此情況下，您必須撰寫程式碼，以確認所設定的快取<xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>與<xref:System.Web.UI.WebControls.TreeView>控制項來顯示轉換 XML 資料。 將 XML 轉換會使用所指示的樣式表<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性。 此外，樣式表會使用傳遞至資料來源控制項中的轉換引數<xref:System.Xml.Xsl.XsltArgumentList>在執行階段的物件。 在程式碼範例示範如何傳遞<xref:System.Xml.Xsl.XsltArgumentList>至資料來源控制項，藉由處理<xref:System.Web.UI.WebControls.XmlDataSource.Transforming>與自訂事件處理常式的事件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 在程式碼範例中的 XML 檔案具有下列資料：  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 XML 資料的轉換會使用下列樣式表。  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="TransformFile">
      <MemberSignature Language="C#" Value="public virtual string TransformFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransformFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TransformFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定可延伸樣式表語言 (XSL) 檔案 (.xsl) 的檔名，該檔案會定義要在 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 控制項所管理的 XML 資料上執行的 XSLT 轉換。</summary>
        <value>XSL 樣式表檔案的絕對實體路徑或相對路徑，這個檔案定義 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 或 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 屬性所含資料所要執行的 XML 轉換。 預設值為 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果兩個<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>並<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>設定的屬性，<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性會優先，並用的 XSL 樣式表檔案 (.xsl) 中的資料而不是在指定的樣式表項目<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>屬性。 如果使用設定 XPath 運算式<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>屬性，它會在轉換 XML 資料之後，套用。  
  
 如果您變更的值<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>屬性，<xref:System.Web.UI.IDataSource.DataSourceChanged>就會引發事件。 如果已啟用快取，而且您變更的值<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>，快取失效。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.XmlDataSource>類別會使用已被取代<xref:System.Xml.Xsl.XslTransform>類別執行 XSL 轉換。 如果您想要使用以後所導入的樣式表功能<xref:System.Xml.Xsl.XslTransform>類別已被取代，以手動方式將轉換套用使用<xref:System.Xml.Xsl.XslCompiledTransform>類別。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>控制項和<xref:System.Web.UI.WebControls.TreeView>控制項來顯示轉換 Web form 上的 XML 資料。 使用樣式表，以執行轉換<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性。 您可以選擇性地提供轉換引數，樣式表使用<xref:System.Xml.Xsl.XsltArgumentList>。 如需詳細資訊，請參閱 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 屬性 (Property)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/CS/xmlds5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/VB/xmlds5vb.aspx#1)]  
  
 在程式碼範例中的 XML 檔案具有下列資料：  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 執行 XML 轉換的 XSL 樣式表具有下列結構：  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
     </xsl:attribute>  
     <xsl:attribute name="price">  
       <xsl:value-of select="price"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此文件正在載入。</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="Transforming">
      <MemberSignature Language="C#" Value="public event EventHandler Transforming;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Transforming" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Transforming As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Transforming;" />
      <MemberSignature Language="F#" Value="member this.Transforming : EventHandler " Usage="member this.Transforming : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> 屬性所定義或 <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> 屬性所識別的樣式表套用至 XML 資料之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.XmlDataSource.Transforming>事件以設定<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>屬性<xref:System.Xml.Xsl.XsltArgumentList>物件之前<xref:System.Web.UI.WebControls.XmlDataSource>控制項執行 XML 轉換。  
  
 如需如何處理事件的詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>用來控制<xref:System.Web.UI.WebControls.TreeView>控制項來顯示轉換 XML 資料。 將 XML 轉換會使用所指示的樣式表<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性。 此外，樣式表會使用傳遞至資料來源控制項中的轉換引數<xref:System.Xml.Xsl.XsltArgumentList>在執行階段。 在程式碼範例示範如何傳遞<xref:System.Xml.Xsl.XsltArgumentList>物件所處理的資料來源控制項<xref:System.Web.UI.WebControls.XmlDataSource.Transforming>與自訂事件處理常式的事件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 在程式碼範例中的 XML 檔案具有下列資料：  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 XML 資料的轉換會使用下列樣式表：  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public virtual string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定要套用至下列 XML 資料的 XPath 運算式：<see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 屬性包含的 XML 資料，或 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 屬性所表示之 XML 檔案包含的 XML 資料。</summary>
        <value>字串，表示可用來篩選下列資料的 XPath 運算式：<see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 屬性包含的資料，或 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 屬性所表示之 XML 檔案包含的資料。 預設值為 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需有關 XPath 資料繫結運算式的詳細資訊，請參閱 <<c0> [ 表格式控制項繫結至 XmlDataSource 控制項](https://msdn.microsoft.com/library/d6bf202f-6454-45fd-9424-e17f6c7eafe8)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.XmlDataSource>樣板化控制項<xref:System.Web.UI.WebControls.Repeater>控制項來顯示已使用 XPath 運算式篩選的 XML 資料。 在此範例中，XPath 語法用來篩選的 XML 資料時<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>資料來源控制項的屬性設定，而且也會繫結的項目<xref:System.Web.UI.WebControls.Repeater>至 XML 資料的控制項範本。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/CS/xmlds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/VB/xmlds8vb.aspx#1)]  
  
 在程式碼範例中的 XML 檔案具有下列資料：  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此文件正在載入。</exception>
      </Docs>
    </Member>
  </Members>
</Type>