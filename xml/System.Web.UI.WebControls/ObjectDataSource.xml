<Type Name="ObjectDataSource" FullName="System.Web.UI.WebControls.ObjectDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fab33d8ebbc73e4028e4c915742468326c153117" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30600782" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectDataSource extends System.Web.UI.DataSourceControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.ObjectDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectDataSource&#xA;Inherits DataSourceControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectDataSource : System::Web::UI::DataSourceControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("TypeName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ObjectDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示向多層 Web 應用程式架構中資料繫結控制項提供資料的商務物件 (Business Object)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本主題內容：  
  
-   [簡介](#introduction)  
  
-   [用途](#purpose)  
  
-   [擷取資料](#retrieving_data)  
  
-   [執行資料作業](#performing_data_operations)  
  
-   [篩選資料](#filtering_data)  
  
-   [快取](#caching)  
  
-   [功能](#features)  
  
-   [資料檢視](#data_view)  
  
-   [使用 LINQ to SQL](#using_linq_to_sql)  
  
-   [宣告式語法](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>簡介  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制的運作方式與您所建立的類別。 建立方法，擷取並更新資料，而且您提供的這些方法的名稱<xref:System.Web.UI.WebControls.ObjectDataSource>標記中的控制項。 轉譯或回傳的處理期間<xref:System.Web.UI.WebControls.ObjectDataSource>呼叫您指定的方法。  
  
 沒有任何視覺化呈現<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 如此一來，<xref:System.Web.UI.WebControls.ObjectDataSource>不支援例如 visual 功能<xref:System.Web.UI.DataSourceControl.EnableTheming%2A>或<xref:System.Web.UI.DataSourceControl.SkinID%2A>屬性。  
  
<a name="purpose"></a>   
## <a name="purpose"></a>用途  
 將展示層與商務邏輯，而封裝商務物件的商務邏輯非常常見的應用程式設計作法。 這些商務物件會形成之間展示層和資料層，產生三層式應用程式架構的不同層級。 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項可讓開發人員可以使用 ASP.NET 資料來源控制項，同時保留其三層式應用程式架構。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項使用反映來建立商務物件的執行個體，並呼叫方法以擷取、 更新、 插入和刪除資料。 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性會識別類別的名稱，<xref:System.Web.UI.WebControls.ObjectDataSource>搭配。 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項建立並終結每個方法呼叫類別的執行個體，其並未持有物件在記憶體中的 Web 要求的存留期。 如果您使用的商務物件需要許多資源，或因建立和終結耗費資源，這是一個重要的考量。 使用高度耗費資源的物件可能不是最佳的設計選擇，但您可以使用，以控制物件的生命週期<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。  
  
> [!NOTE]
>  所識別的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性可以是執行個體方法或`static`(`Shared`在 Visual Basic 中) 的方法。 如果方法都是`static`(`Shared`在 Visual Basic 中)，無法建立商務物件的執行個體，而<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>不引發事件。  
  
<a name="retrieving_data"></a>   
## <a name="retrieving-data"></a>擷取資料  
 若要從商務物件擷取資料，設定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性來擷取資料之方法的名稱。 如果此方法不會傳回<xref:System.Collections.IEnumerable>或<xref:System.Data.DataSet>物件，該物件會包裝在執行階段<xref:System.Collections.IEnumerable>集合。 如果方法簽章有參數，您可以加入<xref:System.Web.UI.WebControls.Parameter>物件加入至<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合，然後將它們加入您想要傳遞至方法所指定的值繫結<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。 為了讓<xref:System.Web.UI.WebControls.ObjectDataSource>控制要使用的參數，參數必須符合的名稱和方法簽章中參數的型別。 如需詳細資訊，請參閱[ObjectDataSource 控制項配合使用參數](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項擷取資料時<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法呼叫。 這個方法會提供以程式設計方式存取所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。 所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性會自動呼叫繫結至控制項<xref:System.Web.UI.WebControls.ObjectDataSource>時其`DataBind`方法呼叫。 如果您設定`DataSourceID`資料繫結控制項的屬性，控制項自動繫結至資料來源的資料，視需要。 設定`DataSourceID`屬性是建議的方法繫結<xref:System.Web.UI.WebControls.ObjectDataSource>資料繫結控制項的控制項。 或者，您可以設定`DataSource`屬性，但接著您必須明確地呼叫`DataBind`資料繫結控制項的方法。 您可以呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>以程式設計方式在任何時間，以擷取資料的方法。  
  
 如需資料繫結控制項繫結至資料來源控制項的詳細資訊，請參閱[繫結至資料使用資料來源控制項](http://msdn.microsoft.com/library/e41adfff-8fb8-449e-9cd1-9bd49788c5f7)。  
  
<a name="performing_data_operations"></a>   
## <a name="performing-data-operations"></a>執行資料作業  
 根據商務的功能物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項使用，您可以執行資料作業，例如更新、 插入和刪除。 若要執行這些資料作業，設定適當的方法名稱和任何您想要執行的作業相關聯的參數。 例如，更新作業中，設定<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性名稱的商務物件方法會執行更新，並將任何必要的參數來<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。 如果<xref:System.Web.UI.WebControls.ObjectDataSource>控制項是與資料繫結控制項產生關聯，會將參數加入資料繫結控制項。 在此情況下，您需要確定方法的參數名稱相符的資料繫結控制項中的欄位名稱。 在執行更新時<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>呼叫方法時，可以明確地您的程式碼也會自動由資料繫結控制項。 遵循相同的一般模式<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>作業。 商務物件會假設為會執行這些類型的資料作業的一筆記錄一次而批次處理。  
  
<a name="filtering_data"></a>   
## <a name="filtering-data"></a>篩選資料  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項可以篩選所擷取的資料<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性，如果資料以傳回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>物件。 您可以設定<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性，即可篩選運算式所使用的格式字串的語法，以及將值繫結至參數中指定的運算式中<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合。  
  
<a name="caching"></a>   
## <a name="caching"></a>快取  
 雖然<xref:System.Web.UI.WebControls.ObjectDataSource>不會保留執行個體在多個要求的商務物件，它可以快取的呼叫所識別的方法結果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。 當資料快取，後續呼叫時<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法會傳回快取的資料，而不要建立商務物件，然後呼叫其<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>使用反映。 快取可讓您避免建立物件，然後呼叫其資料方法，但會犧牲記憶體，在 Web 伺服器上。 <xref:System.Web.UI.WebControls.ObjectDataSource>自動快取資料時<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>屬性設定為`true`，而<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性設定為快取會儲存資料快取會捨棄之前的秒數。 您也可以指定<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>屬性和選用<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>屬性。 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項可讓您快取所有類型的資料，但您應該不會快都取保留資源或無法共用服務的多個要求的狀態的物件 (例如，開啟<xref:System.Data.SqlClient.SqlDataReader>物件)，因為相同的執行個體的物件將用於服務的多個要求。  
  
<a name="features"></a>   
## <a name="features"></a>功能  
 下表描述的功能<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
|功能|需求|  
|----------------|------------------|  
|選取|設定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>公司名稱的屬性物件中選取的資料，方法，並包括任何必要的參數中<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合以程式設計方式或使用資料繫結控制項。|  
|排序|設定<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>屬性中的參數名稱<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>帶有排序準則的方法。|  
|篩選|設定<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性篩選運算式，並選擇性地加入任何參數，以便<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合來篩選的資料時<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法呼叫。 所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性必須傳回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>。|  
|分頁|支援資料來源分頁，如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>方法包含要擷取的記錄數目上限和要擷取的第一個記錄索引的參數。 這些參數的名稱必須在設定<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>屬性，分別。 資料繫結控制項可能會執行分頁本身，即使<xref:System.Web.UI.WebControls.ObjectDataSource>控制項不支援直接在所指定的方法中的分頁<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。 資料繫結控制項，可以執行這項操作的需求是所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性傳回物件，用於實作<xref:System.Collections.ICollection>介面。|  
|Updating|設定<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性設為名稱的商務物件方法會更新資料，並包括任何必要的參數中<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。|  
|Deleting|設定<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性設為名稱的商務物件方法或函式會刪除資料，並包括任何必要的參數中<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合。|  
|插入|設定<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>屬性設為名稱的商務物件方法或函式插入資料，並包括任何必要的參數中<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合。|  
|快取|設定<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>屬性`true`，而<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>根據您想要針對您快取資料的快取行為的屬性。|  
  
> [!NOTE]
>  當您使用<xref:System.Web.UI.WebControls.ObjectDataSource>類別用來更新或插入資料，會在用戶端輸入的字串不自動轉換從用戶端文化特性格式為伺服器的文化特性格式。 例如，用戶端文化特性可能會與日期格式，指定 DD/MM/YYYY，而且在伺服器上的日期格式可能 MM/DD/YYYY。 在此情況下，會在輸入 2009 年 10 月 5 日<xref:System.Web.UI.WebControls.TextBox>為 2009 年 5 月 10 日的控制項，但是會被解譯為 2009 年 10 日。 2009 年 10 月 15 日會輸入為 15/10/2009年，成為無效的日期會遭到拒絕。  
  
<a name="data_view"></a>   
## <a name="data-view"></a>資料檢視  
 如同所有的資料來源控制項<xref:System.Web.UI.WebControls.ObjectDataSource>控制項是相關聯的資料來源檢視類別。 雖然<xref:System.Web.UI.WebControls.ObjectDataSource>控制項是網頁開發人員用來處理資料的介面<xref:System.Web.UI.WebControls.ObjectDataSourceView>類別是資料繫結控制項所使用的介面。 此外，<xref:System.Web.UI.WebControls.ObjectDataSourceView>類別說明資料來源控制項的功能，並執行實際工作。 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項有只有一個相關聯<xref:System.Web.UI.WebControls.ObjectDataSourceView>，一律會命名為`DefaultView`。 雖然<xref:System.Web.UI.WebControls.ObjectDataSourceView>物件由<xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A>方法，其屬性和方法的許多包裝，且直接以公開<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 在幕後<xref:System.Web.UI.WebControls.ObjectDataSourceView>物件執行所有的資料作業，包括擷取、 插入、 更新、 刪除、 篩選和排序資料。 如需詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSourceView>。  
  
<a name="using_linq_to_sql"></a>   
## <a name="using-linq-to-sql"></a>使用 LINQ to SQL  
 您可以使用<xref:System.Web.UI.WebControls.ObjectDataSource>與 LINQ to SQL 類別的控制項。 若要這樣做，您將<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性設為資料內容類別的名稱。 您也設定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>執行對應作業的資料內容類別中方法的方法。 您必須建立事件處理常式<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>才能取消資料內容類別的處置事件。 這是必要步驟，因為 LINQ to SQL 支援延後的執行，而<xref:System.Web.UI.WebControls.ObjectDataSource>控制項嘗試處置之後選取作業的資料內容。 如需如何建立 LINQ to SQL 類別的詳細資訊，請參閱[How to： 建立 LINQ to SQL 類別，在 Web 專案](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。 如需如何取消資料內容類別的處置的範例，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。  
  
## <a name="using-the-entity-framework"></a>使用 Entity Framework  
 您也可以使用<xref:System.Web.UI.WebControls.ObjectDataSource>與 Entity Framework 的控制項。 如需詳細資訊，請參閱[使用 Entity Framework 和 ObjectDataSource 控制項](http://go.microsoft.com/fwlink/?LinkId=209117)。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>宣告式語法  
  
```  
<asp:ObjectDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    ConflictDetection="OverwriteChanges|CompareAllValues"  
    ConvertNullToDBNull="True|False"  
    DataObjectTypeName="string"  
    DeleteMethod="string"  
    EnableCaching="True|False"  
    EnablePaging="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    FilterExpression="string"  
    ID="string"  
    InsertMethod="string"  
    MaximumRowsParameterName="string"  
    OldValuesParameterFormatString="string"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnFiltering="Filtering event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnObjectCreated="ObjectCreated event handler"  
    OnObjectCreating="ObjectCreating event handler"  
    OnObjectDisposing="ObjectDisposing event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    runat="server"  
    SelectCountMethod="string"  
    SelectMethod="string"  
    SkinID="string"  
    SortParameterName="string"  
    SqlCacheDependency="string"  
    StartRowIndexParameterName="string"  
    TypeName="string"  
    UpdateMethod="string"  
    Visible="True|False"  
>  
        <DeleteParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </DeleteParameters>  
        <FilterParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </FilterParameters>  
        <InsertParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </InsertParameters>  
        <SelectParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </SelectParameters>  
        <UpdateParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </UpdateParameters>  
</asp:ObjectDataSource>  
```  
  
   
  
## Examples  
 本主題隨附了含有原始程式碼的 Visual Studio Web 站台專案：[下載](http://code.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=aspnetmsdnexamples&DownloadId=14838)。  
  
 此區段會顯示<xref:System.Web.UI.WebControls.ObjectDataSource>.aspx 在標記中，頁面上，它指出它所使用的商務物件。 此範例是.aspx 網頁。 它包含<xref:System.Web.UI.WebControls.GridView>繫結至控制項<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項標記指定的商務物件的名稱和呼叫以擷取資料的商務物件方法的名稱。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 下列範例顯示的商務物件<xref:System.Web.UI.WebControls.ObjectDataSource>.aspx 頁面中的控制項使用。 (許多其他<xref:System.Web.UI.WebControls.ObjectDataSource>程式碼範例也使用此商務物件。)此範例包含下列兩個基本類別：  
  
-   `EmployeeLogic`類別是商務邏輯類別<xref:System.Web.UI.WebControls.ObjectDataSource>使用。  
  
-   `NorthwindEmployee`類別會定義所傳回的資料物件`GetAllEmployees`方法`EmployeeLogic`類別。  
  
 額外`NorthwindDataException`提供類別是為了方便起見。  
  
 這組範例類別搭配使用 Microsoft SQL Server 和 Microsoft Access Northwind Traders 資料庫。 如需完整的工作範例，您必須編譯並與.aspx 頁面提供的範例，會使用這些類別。 如需如何安裝 Northwind Traders 資料庫資訊，請參閱[如何： 安裝範例資料庫](http://msdn.microsoft.com/library/ed1291f6-604c-4972-ae22-0345c6dea12e)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.IDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
    <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource (string typeName, string selectMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, string selectMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String, selectMethod As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSource(System::String ^ typeName, System::String ^ selectMethod);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="selectMethod" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 使用之類別的名稱。</param>
        <param name="selectMethod">
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 叫用 (Invoke) 以擷取資料之方法或函式的名稱。</param>
        <summary>使用指定的型別名稱和資料擷取方法名稱，初始化 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值`typeName`參數可以是位於 Bin 或 App_Code 目錄中的程式碼的不完整的類型或全域組件快取中註冊的程式碼的完整限定的類型名稱。 如果您使用全域組件快取，您必須加入至適當的參考`assemblies`Machine.config 或 Web.config 組態檔的區段。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料來源控制項快取 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 屬性擷取之資料的時間長度 (以秒為單位)。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 快取 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 屬性引動之結果的秒數。 預設值為 0。 值不能為負。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援的資料快取。 雖然快取資料，則呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法擷取資料，從快取，而不是從商務物件<xref:System.Web.UI.WebControls.ObjectDataSource>搭配。 當快取到期時，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法從商務物件，擷取資料，並再次快取資料。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項會自動快取資料時<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>屬性設定為`true`和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性設定為值大於 0，表示快取，儲存資料快取項目之前的秒數會被捨棄。 值為 0 指出無限長的快取。  
  
 持續時間的組合調整快取和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>設定。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>值<xref:System.Web.UI.WebControls.ObjectDataSource>會快取資料上的第一個呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法並保留它在記憶體中的最多的時間所指定的量<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性。 如果需要記憶體，可能釋放資料持續時間的時間之前。 然後會在下一個呼叫會重新整理快取<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>值，資料來源控制項會快取資料上的第一個呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法，但卻會重設為其保留每個後續呼叫上的快取的時間間隔<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 快取逾期相當的時間沒有活動是否<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性自上次呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何<xref:System.Web.UI.WebControls.ObjectDataSource>物件支援快取。 第二個程式碼範例示範如何實作包裝函式方法會傳回<xref:System.Data.DataSet>物件啟用快取與<xref:System.Web.UI.WebControls.ObjectDataSource>物件。  
  
 下列程式碼範例示範如何<xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援快取。 若要啟用快取，您必須實作的方法，擷取資料，以識別<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性，來傳回資料當做<xref:System.Data.DataSet>物件。 在此範例中，<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>屬性設定為`true`，而<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>屬性設定。 <xref:System.Web.UI.WebControls.ObjectDataSource>會快取所傳回的資料<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>30 秒的屬性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]  
  
 下列程式碼範例示範如何實作包裝函式方法會傳回<xref:System.Data.DataSet>物件啟用快取與<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 中的基底實作`EmployeeLogic`類別`GetAllEmployees`方法會傳回<xref:System.Collections.ArrayList>物件。 而不是重構物件完全使用<xref:System.Web.UI.WebControls.ObjectDataSource>Web Form 網頁上，包裝函式方法名為`GetAllEmployeesAsDataSet`加入傳回一組`NorthwindEmployee`資料做為<xref:System.Data.DataSet>。  
  
 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Web.UI.WebControls.ObjectDataSource>類別。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定快取到期行為，當與持續期間搭配使用時，用來描述資料來源控制項所使用的快取行為。</summary>
        <value>其中一個 <see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 值。 預設值為 <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援的資料快取。 雖然快取資料，則呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法擷取資料，從快取，而不是從商務物件<xref:System.Web.UI.WebControls.ObjectDataSource>搭配。 當快取到期時，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法從商務物件，擷取資料，並再次快取資料。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項會自動快取資料時<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>屬性設定為`true`和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性設定為值大於 0，表示快取，儲存資料快取項目之前的秒數會被捨棄。 值為 0 表示無限長快取期間。  
  
 持續時間的組合調整快取和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>設定。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>值<xref:System.Web.UI.WebControls.ObjectDataSource>會快取資料上的第一個呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法並保留它在記憶體中的最多的時間所指定的量<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性。 如果需要記憶體，可能釋放資料持續時間的時間之前。 然後會在下一個呼叫會重新整理快取<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>值，資料來源控制項會快取資料上的第一個呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法，但卻會重設為其保留快取中的每個後續呼叫的時間間隔<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 快取逾期相當的時間沒有活動是否<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性自上次呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何<xref:System.Web.UI.WebControls.ObjectDataSource>物件支援篩選和快取。 第二個程式碼範例示範如何實作包裝函式方法會傳回<xref:System.Data.DataSet>物件，讓快取和使用篩選<xref:System.Web.UI.WebControls.ObjectDataSource>物件。  
  
 下列程式碼範例示範如何<xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援篩選和快取。 若要啟用篩選和快取，您必須實作的方法，擷取資料，以識別<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性，來傳回資料當做<xref:System.Data.DataSet>物件。 在此範例中，啟用快取因為`EmployeeLogic`物件傳回資料做為<xref:System.Data.DataSet>、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>屬性設定為`true`，而<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>屬性設定。 <xref:System.Web.UI.WebControls.ObjectDataSource>會快取所傳回的資料<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>30 秒的屬性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]  
  
 下列程式碼範例示範如何實作包裝函式方法會傳回<xref:System.Data.DataSet>物件，讓快取和使用篩選<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 中的基底實作`EmployeeLogic`類別`GetAllEmployees`方法會傳回<xref:System.Collections.ArrayList>。 而不是重構物件完全使用<xref:System.Web.UI.WebControls.ObjectDataSource>Web Form 網頁上，包裝函式方法名為`GetAllEmployeesAsDataSet`加入傳回一組`NorthwindEmployee`資料做為<xref:System.Data.DataSet>。 這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Web.UI.WebControls.ObjectDataSource>類別。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定使用者定義的索引鍵相依性，連結至資料來源控制項所建立的所有資料快取物件。</summary>
        <value>索引鍵，識別 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 建立的所有快取物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>屬性可以設定為任何任意字串值。  
  
 當索引鍵過期時，所有快取的物件也會明確過期。 這可讓您使快取項目所建立的<xref:System.Web.UI.WebControls.ObjectDataSource>從自己的網頁程式碼以程式設計的方式。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援的資料快取。 雖然快取資料，則呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法擷取資料，從快取，而不是從商務物件<xref:System.Web.UI.WebControls.ObjectDataSource>搭配。 當快取到期時，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法從商務物件，擷取資料，並再次快取資料。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項會自動快取資料時<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>屬性設定為`true`和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性設定為值大於 0，表示快取，儲存資料快取項目之前的秒數會被捨棄。 值為 0 指出無限長的快取。  
  
 您可以設定<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>屬性以建立所建立的所有快取項目之間的相依性<xref:System.Web.UI.WebControls.ObjectDataSource>控制項和索引鍵。 您可能會過期的快取項目以程式設計方式在任何時間索引鍵設定為已過期。 使用過期的索引鍵<xref:System.Web.Caching.Cache.Remove%2A?displayProperty=nameWithType>與目前的方法<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>做為參數的值。  
  
 唯一的快取項目建立的每個組合<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>屬性。 多個<xref:System.Web.UI.WebControls.ObjectDataSource>控制項可以使用相同的快取項目在案例中使用相同的型別、 方法和參數的資料載入其中。  
  
   
  
## Examples  
 下列三個範例顯示 Web 網頁、 程式碼後置頁面類別和從 Northwind 資料庫中的 [員工] 資料表中擷取記錄的資料存取類別。  
  
 第一個範例顯示包含兩個的 Web 網頁<xref:System.Web.UI.WebControls.ObjectDataSource>控制項<xref:System.Web.UI.WebControls.DropDownList>控制項和<xref:System.Web.UI.WebControls.DetailsView>控制項。 第一個<xref:System.Web.UI.WebControls.ObjectDataSource>控制項和<xref:System.Web.UI.WebControls.DropDownList>控制項用來擷取並顯示資料庫中的員工名稱。 第二個<xref:System.Web.UI.WebControls.ObjectDataSource>控制項和<xref:System.Web.UI.WebControls.DetailsView>控制項用來擷取及顯示員工記錄所選取的使用者。  
  
 啟用快取<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 因此，每一筆記錄會擷取從資料庫一次。 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>屬性設定為"EmployeeDetails"，但任何字串值可做為索引鍵。 網頁也包括<xref:System.Web.UI.WebControls.Button>使用者可以按一下過期的快取的資料的控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]  
  
 第二個範例顯示的處理常式<xref:System.Web.UI.Control.Load>事件和處理常式<xref:System.Web.UI.WebControls.Button.Click>事件<xref:System.Web.UI.WebControls.Button>控制項。 <xref:System.Web.UI.Control.Load>事件處理常式建立快取項目的索引鍵設定為<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>值。 <xref:System.Web.UI.WebControls.Button.Click>事件處理常式中移除快取項目索引鍵是否等於<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>值。 當移除快取項目時，相依於索引鍵的所有快取的資料已過期。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]  
  
 第三個範例會顯示與 Northwind 資料庫互動的資料存取類別。 類別會使用 LINQ 查詢 [員工] 資料表。 這個範例需要 LINQ to SQL 類別表示 Northwind 資料庫的 Employees 資料表。 如需詳細資訊，請參閱[How to： 建立 LINQ to SQL 類別，在 Web 專案](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，判斷是只有新值傳遞至 <see langword="Update" /> 方法，還是舊值和新值都傳遞至 <see langword="Update" /> 方法。</summary>
        <value>其中一個 <see cref="T:System.Web.UI.ConflictOptions" /> 值。 預設值為 <see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會決定是否要將舊的和新值的參數套用至所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性。 比方說，如果該方法是由指定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性會傳回<xref:System.Data.DataTable>控制項與資料行`Name`和`Number`，和<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions.OverwriteChanges> 欄位中，會針對建立參數`Name`和`Number`如`Update`方法。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions.CompareAllValues>值的建立參數`Name`， `Number`， `original_Name`，和`original_Number`。 (取決於原始值參數的完整名稱<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>屬性。)<xref:System.Web.UI.WebControls.ObjectDataSource>然後判斷方法，是否在指定<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性具有相符的參數。  
  
 並行存取控制是用來控制如何讀取和多個用戶端存取和管理相同的資料時，存放區中變更資料的資料存放區的技術。 例如，一個用戶端讀取資料並呈現給使用者，而另一個用戶端讀取相同的資料並呈現給不同的使用者。 如果兩個使用者更新的資料，並送出至資料存放區，可能會發生非預期的結果，因為兩個用戶端可能會提供不同的值為相同的資料。 這被視為衝突。 藉由設定<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>屬性<xref:System.Web.UI.ConflictOptions.CompareAllValues>值`Update`方法可以再比較原始資料來源，以便偵測衝突，並視需要處理這類舊的和新值。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
      </Docs>
    </Member>
    <Member MemberName="ConvertNullToDBNull">
      <MemberSignature Language="C#" Value="public bool ConvertNullToDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertNullToDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertNullToDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertNullToDBNull { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出傳遞至更新、傳入或刪除作業的 <see cref="T:System.Web.UI.WebControls.Parameter" /> 值是否由 <see cref="F:System.DBNull.Value" /> 控制項自動從 <see langword="null" /> 轉換為 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 值。</summary>
        <value>
          如果 <see cref="T:System.Web.UI.WebControls.Parameter" /> 物件中傳遞至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控制項的任何 <see langword="true" /> 值會自動轉換成 <see cref="F:System.DBNull.Value" /> 值，則為 <see langword="null" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不會將轉換`null`至<xref:System.DBNull.Value>值會在執行階段發生錯誤。 使用<xref:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull%2A>屬性，指出是否<xref:System.Web.UI.WebControls.Parameter>值傳遞給更新、 插入或刪除作業會自動轉換從`null`至<xref:System.DBNull.Value>值<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DBNull.Value" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="DataObjectTypeName">
      <MemberSignature Language="C#" Value="public string DataObjectTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataObjectTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataObjectTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataObjectTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定類別的名稱，<see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控制項會將該類別用於更新、插入或刪除資料作業中的參數，而不會從資料繫結控制項傳遞個別的值。</summary>
        <value>部分或完整類別名稱，識別 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 可做為參數用於 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />、<see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 或 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 作業的物件型別。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 而不是指定數個參數傳遞給<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法，您可以建立數個資料欄位值彙總的一個物件。 這一個物件會傳遞至方法，而不是數個參數。  
  
 預設行為<xref:System.Web.UI.WebControls.ObjectDataSource>繫結至資料繫結控制項的控制項時，就會建立資料繫結控制項<xref:System.Web.UI.WebControls.Parameter>資料來源中的每個參數的物件。 如果商務物件有許多欄位，則產生的方法也會有許多欄位。 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性可讓您指定的類型具有每個資料欄位的屬性。 然後，而不是將數個參數傳遞給方法，執行階段會建立一個物件，並設定其所有屬性。 此物件會加入至方法呼叫的參數集合。  
  
 所指定的型別<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性必須有預設建構函式沒有參數，所以<xref:System.Web.UI.WebControls.ObjectDataSource>控制項可以建立類型的執行個體。 類型也必須具有可設定屬性，可讓<xref:System.Web.UI.WebControls.ObjectDataSource>控制項將填入該物件會從資料繫結控制項的值。 屬性名稱<xref:System.Web.UI.WebControls.ObjectDataSource>控制項應完全符合傳遞的資料繫結控制項的值的參數名稱。  
  
 當<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性設定和<xref:System.Web.UI.WebControls.ObjectDataSource>控制項已資料繫結控制項，所指定的方法相關聯<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性必須各有一個中所指定之類型參數<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions.OverwriteChanges>值所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性必須有一個參數中指定之型別的<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions.CompareAllValues>值所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性必須有兩個參數中指定之型別的<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性。 第一個參數包含的原始值。第二個參數會包含新值。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>相關聯<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
   
  
## Examples  
 這個區段包含兩個程式碼範例。 第一個程式碼範例示範如何實作的型別，將所有參數值都結合成一個物件，使用<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性。 第二個程式碼範例顯示使用兩個類別中的第一個程式碼範例所使用的網頁。  
  
 下列程式碼範例示範如何實作的型別，將所有參數值都結合成一個物件，使用<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性。 Select 方法的`AggregateData`類別會傳回<xref:System.Data.DataTable>物件具有兩個資料行名為`Name`和`Number`。 同樣地，`NewData`類別會定義兩個讀取/寫入屬性，`Name`和`Number`。 `Insert`方法`AggregateData`類別接受一個參數的型別`NewData`。 `TypeName`屬性<xref:System.Web.UI.WebControls.ObjectDataSource>設`AggregateData`和<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性設定為`NewData`。  
  
 [!code-csharp[ObjectDataSourceDataObjectTypeName#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateData.cs#2)]
 [!code-vb[ObjectDataSourceDataObjectTypeName#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateData.vb#2)]  
  
 下列程式碼範例顯示使用兩個類別中先前的程式碼範例所使用的網頁。  
  
 [!code-aspx-csharp[ObjectDataSourceDataObjectTypeName#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateDataPageCS.aspx#1)]
 [!code-aspx-vb[ObjectDataSourceDataObjectTypeName#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateDataPageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>藉由呼叫由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> 屬性所識別的方法，同時使用 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" /> 集合中的任何參數，執行刪除作業。</summary>
        <returns>如果在 <see cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows" /> 事件中設定了 <see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" /> 的 <see cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" /> 屬性，則為表示從基礎資料存放區刪除之資料列數目的值，否則為 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 之前<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>執行作業時，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件檢查參數的值，並執行任何前置處理之前<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>作業。 若要執行刪除作業<xref:System.Web.UI.WebControls.ObjectDataSourceView>物件使用反映來建立物件所識別的執行個體<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性。 然後它會呼叫的方法，由<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>使用所有相關聯的屬性<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>屬性。 如果刪除參數來自相關聯的資料繫結控制項時，參數的名稱會根據建立<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>屬性。 之後<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>作業完成時，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>事件。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>檢查任何傳回值、 輸出參數，以及例外狀況，以及執行的任何後續處理的事件。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法會委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
## <a name="data-bound-controls"></a>資料繫結控制項  
 當<xref:System.Web.UI.WebControls.ObjectDataSource>與相關聯控制項的資料繫結控制項，例如<xref:System.Web.UI.WebControls.GridView>控制項，不需要呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>從網頁程式碼的方法。 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法叫用資料繫結控制項來直接改為。  
  
 如需參數合併、 物件存留期，以及方法解析的詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Deleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 作業已經完成時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>事件來檢查傳回值或輸出參數的值，或是判斷是否發生例外狀況之後<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>作業已完成。 傳回值，輸出參數和例外狀況處理屬性都是從<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>與事件相關聯的物件。  
  
 您可以使用<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>物件從已刪除的資料列數目傳回<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法。 若要這樣做，請設定<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>屬性。 如果您從所指定的方法傳回已刪除的資料列數目<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性值是可從<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>物件。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的物件和<xref:System.Web.UI.WebControls.GridView>控制項刪除資料。 第二個程式碼範例顯示`EmployeeLogic`第一個程式碼範例中使用的類別。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的控制和<xref:System.Web.UI.WebControls.GridView>控制項刪除資料。 一開始，<xref:System.Web.UI.WebControls.GridView>控制項會顯示一組使用的方法，由所指定的所有員工<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性來擷取資料的`EmployeeLogic`物件。 因為<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>屬性設定為`true`、<xref:System.Web.UI.WebControls.GridView>控制自動顯示**刪除** 按鈕。  
  
 如果您按一下**刪除**使用所指定的方法來執行刪除作業 按鈕，<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性和任何參數中指定的<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合。 在此程式碼範例中，也會執行一些前置處理和後置處理步驟。 `NorthwindEmployeeDeleting`委派呼叫以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件之前執行作業和`NorthwindEmployeeDeleted`委派呼叫以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>後作業完成執行例外狀況處理的事件。 在此程式碼範例中，如果`NorthwindDataException`會擲回，它由`NorthwindEmployeeDeleted`方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 下列程式碼範例示範`EmployeeLogic`上述程式碼範例中使用的類別。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteMethod">
      <MemberSignature Language="C#" Value="public string DeleteMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控制項叫用以刪除資料之方法或函式的名稱。</summary>
        <value>字串，表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用於刪除資料之方法或函式的名稱。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 商務物件會假設為一次，而不是批次中刪除資料的一筆記錄。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 請確定參數名稱設定為<xref:System.Web.UI.WebControls.ObjectDataSource>控制<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合符合 select 方法所傳回的資料行名稱。  
  
## <a name="object-lifetime"></a>物件存留期  
 所識別的方法<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性可以是執行個體方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果是執行個體方法，建立及終結每次商務物件<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>呼叫屬性。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件，以使用之前的商務物件<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>呼叫屬性。 您也可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>之後，就會引發的事件<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>呼叫屬性。 如果實作的商務物件<xref:System.IDisposable>介面，<xref:System.IDisposable.Dispose%2A>方法會終結物件之前呼叫。 如果該方法是`static`(`Shared`在 Visual Basic 中) 方法，不會建立商務物件，而且您無法處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。  
  
## <a name="parameter-merging"></a>合併的參數  
 若要加入參數<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>三個來源的集合：  
  
-   從資料繫結控制項，在執行階段。  
  
-   從`DeleteParameters`項目，以宣告方式。  
  
-   從`Deleting`方法，以宣告方式。  
  
 首先，將資料繫結控制項所產生的任何參數加入至<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合。 例如，如果<xref:System.Web.UI.WebControls.ObjectDataSource>控制項繫結至<xref:System.Web.UI.WebControls.GridView>具有資料行的控制`Name`和`Number`，參數`Name`和`Number`加入至集合。 完整名稱的參數取決於<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>屬性。 這些參數的資料類型是`string`。 下一步，參數中所列`DeleteParameters`加入項目。 如果中的參數`DeleteParameters`找到項目具有相同名稱做為參數已經在<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>修改集合，現有的參數符合參數中指定`DeleteParameters`項目。 一般而言，這用來修改參數中的資料類型。 最後，您可以透過程式設計方式加入和移除參數中的<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件之前發生<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法執行。 會合併這些參數之後，就會解決方法。 在下一節討論方法解析。  
  
## <a name="method-resolution"></a>方法解析  
 當<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>呼叫方法時，資料繫結控制項，以宣告方式中所建立的參數的資料欄位`DeleteParameters`項目，並已加入的參數<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>所有合併事件處理常式。 （如需詳細資訊，請參閱上一節）。<xref:System.Web.UI.WebControls.ObjectDataSource>物件會嘗試尋找要呼叫的方法。 首先，它會尋找名稱中指定的一或多個方法<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性。 如果找到相符項目，<xref:System.InvalidOperationException>擲回例外狀況。 如果找到相符項目，則會尋找相符的參數名稱。 例如，假設由所指定的型別<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性有兩個方法，名為`DeleteARecord`。 一個`DeleteARecord`具有一個參數， `ID`，和其他`DeleteARecord`有兩個參數，`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合具有名為只有一個參數`ID`、`DeleteARecord`方法只`ID`參數呼叫。 參數的型別不會檢查在解析方法。 參數的順序不重要。  
  
 如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性設定，方法解決了不同的方式。 <xref:System.Web.UI.WebControls.ObjectDataSource>中指定名稱的方法會尋找<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>採用一個參數類型的屬性中指定<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性。 在此情況下，參數的名稱並不重要。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的物件和<xref:System.Web.UI.WebControls.GridView>控制項刪除資料。 第二個程式碼範例顯示`EmployeeLogic`第一個程式碼範例中使用的類別。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的控制和<xref:System.Web.UI.WebControls.GridView>控制項刪除資料。 一開始，<xref:System.Web.UI.WebControls.GridView>控制項會顯示一組使用的方法，由所指定的所有員工<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性來擷取資料的`EmployeeLogic`物件。 因為<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>屬性設定為`true`、<xref:System.Web.UI.WebControls.GridView>控制自動顯示**刪除** 按鈕。  
  
 如果您按一下**刪除**使用所指定的方法來執行刪除作業 按鈕，<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性和任何參數中指定的<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合。 在此程式碼範例中，也會執行一些前置處理和後置處理步驟。 `NorthwindEmployeeDeleting`委派呼叫以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>前執行的作業時，事件和`NorthwindEmployeeDeleted`委派呼叫以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>後作業完成執行例外狀況處理的事件。 在此範例中，如果`NorthwindDataException`會擲回，它由`NorthwindDataException`委派。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 下列程式碼範例示範`EmployeeLogic`上述程式碼範例中使用的類別。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得包含 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> 方法所用參數的參數集合。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" />，包含 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> 方法所使用的參數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名稱和參數中所包含的型別<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合的名稱和型別中的參數，必須符合<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>方法簽章。 參數名稱會受到<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>屬性而且有區分大小寫。 集合中的參數取決於資料中的資料繫結控制項以宣告方式，指定的參數和以程式設計方式加入的參數。 如需詳細資訊，請參閱 「 參數合併 」，在<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>和[ObjectDataSource 控制項配合使用參數](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>屬性擷取<xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A>屬性所包含的<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 如需參數合併、 物件存留期，以及方法解析的詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的物件和<xref:System.Web.UI.WebControls.GridView>控制項刪除資料。 第二個程式碼範例顯示`EmployeeLogic`第一個程式碼範例中使用的類別。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的控制和<xref:System.Web.UI.WebControls.GridView>控制項刪除資料。 一開始，<xref:System.Web.UI.WebControls.GridView>控制項會顯示一組使用的方法，由所指定的所有員工<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性來擷取資料的`EmployeeLogic`物件。 因為<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>屬性設定為`true`、<xref:System.Web.UI.WebControls.GridView>控制自動顯示**刪除** 按鈕。  
  
 如果您按一下**刪除** 按鈕，<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>具有兩個參數呼叫事件。 一個參數， `EmpID`，來自<xref:System.Web.UI.WebControls.DataGrid>控制項，然後根據<xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A>屬性。 另一個參數是來自宣告式<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>屬性。 `EmployeeLogic`類別多載`DeleteEmployee`方法。 一個多載會採用`NorthwindEmployee`參數和另一個接受<xref:System.Int32>參數名為`anID`。 在<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件、 中的項目<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>屬性調整為包含名為只有一個參數`anID`從值`original_EmpID`。 此事件處理常式存在時，比對`DeleteEmployee`方法呼叫。  
  
 下列程式碼範例示範顯示的 Web 網頁<xref:System.Web.UI.WebControls.DataGrid>控制項，並處理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/objds11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/objds11vb.aspx#1)]  
  
 下列程式碼範例示範`EmployeeLogic`上述程式碼範例中使用的類別。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_11#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/northwindemployee11.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/northwindemployee11.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Deleting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 作業之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件以執行特定應用程式，來驗證參數的值，或變更之前的參數值的其他初始化<xref:System.Web.UI.WebControls.ObjectDataSource>控制項執行刪除作業。 參數是可做為<xref:System.Collections.IDictionary>所存取的集合<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>屬性，由<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>物件。  
  
 您可以藉由設定取消刪除作業<xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>至`true`。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的物件和<xref:System.Web.UI.WebControls.GridView>控制項刪除資料。 第二個程式碼範例顯示`EmployeeLogic`第一個程式碼範例中使用的類別。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的控制和<xref:System.Web.UI.WebControls.GridView>控制項刪除資料。 一開始，<xref:System.Web.UI.WebControls.GridView>控制項會顯示一組使用的方法，由所指定的所有員工<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性來擷取資料的`EmployeeLogic`物件。 因為<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>屬性設定為`true`、<xref:System.Web.UI.WebControls.GridView>控制自動顯示**刪除** 按鈕。  
  
 如果您按一下**刪除**使用所指定的方法來執行刪除作業 按鈕，<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性和任何參數中指定的<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合。 在此程式碼範例中，也會執行一些前置處理和後置處理步驟。 `NorthwindEmployeeDeleting`委派呼叫以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>前執行的作業時，事件和`NorthwindEmployeeDeleted`委派呼叫以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>後作業完成執行例外狀況處理的事件。 在此程式碼範例中，如果`NorthwindDataException`會擲回，它由`NorthwindEmployeeDeleted`方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 下列程式碼範例示範`EmployeeLogic`上述程式碼範例中使用的類別。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控制項是否啟用了資料快取。</summary>
        <value>
          如果啟用了資料來源控制項的資料快取則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援的資料快取。 雖然快取資料，則呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法會擷取快取中的資料而非<xref:System.Web.UI.WebControls.ObjectDataSource>建立商務物件的執行個體，然後呼叫其資料的方法。 當快取到期時，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法從商務物件，擷取資料，並再次快取資料。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項會自動快取資料時<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>屬性設定為`true`和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性設定為值大於 0，表示快取，儲存資料快取項目之前的秒數會被捨棄。 值為 0 指出無限長的快取。  
  
   
  
## Examples  
 下列三個範例顯示 Web 網頁、 程式碼後置頁面類別和從 Northwind 資料庫中的 [員工] 資料表中擷取記錄的資料存取類別。  
  
 第一個範例顯示包含兩個的 Web 網頁<xref:System.Web.UI.WebControls.ObjectDataSource>控制項<xref:System.Web.UI.WebControls.DropDownList>控制項和<xref:System.Web.UI.WebControls.DetailsView>控制項。 第一個<xref:System.Web.UI.WebControls.ObjectDataSource>控制項和<xref:System.Web.UI.WebControls.DropDownList>控制項用來擷取並顯示資料庫中的員工名稱。 第二個<xref:System.Web.UI.WebControls.ObjectDataSource>控制項和<xref:System.Web.UI.WebControls.DetailsView>控制項用來擷取及顯示員工記錄所選取的使用者。  
  
 啟用快取<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 因此，每一筆記錄會擷取從資料庫一次。 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>屬性設定為"EmployeeDetails"，但任何字串值可做為索引鍵。 網頁也包括<xref:System.Web.UI.WebControls.Button>使用者可以按一下過期的快取的資料的控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]  
  
 第二個範例顯示的處理常式<xref:System.Web.UI.Control.Load>事件和處理常式<xref:System.Web.UI.WebControls.Button.Click>事件<xref:System.Web.UI.WebControls.Button>控制項。 <xref:System.Web.UI.Control.Load>事件處理常式建立快取項目的索引鍵設定為<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>值。 <xref:System.Web.UI.WebControls.Button.Click>事件處理常式中移除快取項目索引鍵是否等於<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A>值。 當移除快取項目時，相依於索引鍵的所有快取的資料已過期。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]  
  
 第三個範例會顯示與 Northwind 資料庫互動的資料存取類別。 類別會使用 LINQ 查詢 [員工] 資料表。 這個範例需要 LINQ to SQL 類別表示 Northwind 資料庫的 Employees 資料表。 如需詳細資訊，請參閱[How to： 建立 LINQ to SQL 類別，在 Web 專案](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" /> 屬性指定的方法傳回 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 時，<see cref="T:System.Data.Common.DbDataReader" /> 屬性會設為 <see langword="true" />。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="EnablePaging">
      <MemberSignature Language="C#" Value="public bool EnablePaging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePaging" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePaging As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePaging { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出資料來源控制項是否支援對其擷取的資料集進行分頁。</summary>
        <value>
          如果資料來源控制項支援對其擷取的資料進行分頁則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由分頁<xref:System.Web.UI.WebControls.ObjectDataSource>控制項由設定<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSource>和 select 方法定義中的商務物件，以適當的參數。 當<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>屬性設定為`true`、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合包含兩個額外的參數，要求第一個資料列和要求的資料列數目。 這兩個參數的命名方式所定義<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>屬性。 `Select`方法應傳回的資料列，指定索引處開始要求的數目。 因為資料可能不完整地分配依頁面大小，最後一頁可能會包含較少的資料列。 因此，要求資料列數目是實際上會傳回的資料列的最大數目。  
  
 資料繫結控制項相關聯的資料繫結控制項上啟用分頁時，呼叫`Select`方法的起始索引和所需的資料列數目。 此外，如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性設定，將資料繫結控制項之前呈現頁面巡覽區控制項，呼叫的方法。 例如，如果<xref:System.Web.UI.WebControls.GridView>控制項具有分頁的頁面大小為 5，而且由所指定的方法已啟用<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性傳回 20，只有 4 頁會顯示在頁面巡覽區。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>物件。  
  
   
  
## Examples  
 下列三個範例顯示 Web 網頁、 程式碼後置頁面類別和資料存取類別，可讓使用者能夠選取的多少筆記錄會顯示在頁面。  
  
 網頁包含<xref:System.Web.UI.WebControls.ObjectDataSource>控制項<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>屬性設定為`true`。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性設定為在查詢中傳回的總記錄數的方法名稱。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>屬性和<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>屬性都設為 Select 方法中使用參數的名稱。 這個頁面也包含<xref:System.Web.UI.WebControls.DropDownList>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 第二個範例顯示的處理常式<xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType>事件<xref:System.Web.UI.WebControls.DropDownList>控制項。 處理常式集合中的程式碼<xref:System.Web.UI.WebControls.GridView.PageSize%2A>使用者選取的屬性。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 第三個範例會顯示 Customers 資料表中擷取資料的資料存取類別。 它包含方法，名為`GetSubsetOfEmployees`，這指派給<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 此範例也會包含名為的方法`GetEmployeeCount`，這指派給<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 類別會使用 LINQ 查詢的 Customers 資料表。 這個範例需要 LINQ to SQL 類別代表 Customers 資料表與 Northwind 資料庫。 如需詳細資訊，請參閱[How to： 建立 LINQ to SQL 類別，在 Web 專案](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定呼叫 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 屬性所指定之方法時套用的篩選條件運算式。</summary>
        <value>表示使用 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 屬性識別之方法或函式擷取資料時，所套用之篩選條件運算式的字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援篩選的資料時，才<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法會傳回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>物件。  
  
 用於語法<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性是格式字串樣式的運算式。 篩選運算式語法是相同的語法可接受的<xref:System.Data.DataColumn.Expression%2A>屬性。 如果您加入參數，以便<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合，您也可以包含格式字串的預留位置。 例如，包含`"{0}"`中替換參數值的運算式。 根據中的參數索引來取代預留位置<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合。  
  
 您可以包含在參數<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性。 如果參數類型是字串或字元類型，請使用單引號括住參數。 如果參數是數值類型，就不需要引號。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合包含的參數，會評估中找到的預留位置<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
> [!NOTE]
>  您應該先驗證您從用戶端接收任何篩選參數值。 執行階段只會取代篩選條件運算式的參數值並將其以套用<xref:System.Data.DataSet>或<xref:System.Data.DataTable>所傳回的物件<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 如果您使用<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性作為安全性考量，以限制所傳回的篩選發生之前，您必須驗證的參數值的項目數目。  
  
   
  
## Examples  
 下列程式碼範例示範如何顯示篩選的資料使用<xref:System.Web.UI.WebControls.ObjectDataSource>來自中介層商務物件擷取資料的控制項和<xref:System.Web.UI.WebControls.GridView>控制項來顯示結果。 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項可以篩選資料，只時擷取資料的方法會擷取為<xref:System.Data.DataSet>或<xref:System.Data.DataTable>物件。 基於這個理由，<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性會識別擷取資料的商務物件方法<xref:System.Data.DataSet>。  
  
 程式碼範例包含<xref:System.Web.UI.WebControls.TextBox>控制項，<xref:System.Web.UI.WebControls.GridView>控制項，<xref:System.Web.UI.WebControls.ObjectDataSource>控制項和**送出** 按鈕。 根據預設，<xref:System.Web.UI.WebControls.TextBox>會填入其中一個 Northwind Traders 員工的名稱。 <xref:System.Web.UI.WebControls.GridView>顯示員工中的名稱所識別的相關資訊<xref:System.Web.UI.WebControls.TextBox>。 若要擷取另一位員工的資料，請輸入中的員工的完整名稱<xref:System.Web.UI.WebControls.TextBox>，然後按一下 [**送出**] 按鈕。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性會指定用來篩選所指定之方法所擷取的資料運算式<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。 它會使用參數預留位置中所包含的參數進行評估之<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合。 在此範例中，參數預留位置會受限於單一引號因為參數類型是可能含有空格的字串類型。 如果參數的型別是數值或日期類型，不需要繫結的引號。  
  
> [!IMPORTANT]
>  這個範例有一個可接受使用者輸入的文字方塊，這可能會造成安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 下列程式碼範例提供上述的程式碼範例使用的中介層商務物件的範例。 程式碼範例是由兩個基本類別所組成：  
  
-   `EmployeeLogic`類別，這是封裝商務邏輯的類別。  
  
-   `NorthwindEmployee`類別，這是包含只需要以載入保存資料與資料層的基本功能的模型類別。  
  
 為了簡單起見，`EmployeeLogic`類別會建立一組靜態的資料，而非從資料層擷取資料。 它也很有用的此範例中，因為此範例依賴您提供示範篩選 Northwind Traders 員工的完整名稱。 如需完整的工作範例，您必須編譯，並使用這些類別提供的 Web Form 程式碼範例。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">已設定 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 屬性，但 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 方法沒有傳回 <see cref="T:System.Data.DataSet" /> 或 <see cref="T:System.Data.DataTable" />。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As ObjectDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在篩選作業之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.ObjectDataSource.Filtering>事件以執行驗證作業篩選參數值之前<xref:System.Web.UI.WebControls.ObjectDataSource>控制項執行篩選作業。 您可以取消選取的作業，藉由設定<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs>至`true`。 引發事件時，才<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性設定。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Filtering?displayProperty=nameWithType>事件委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=nameWithType>事件<xref:System.Web.UI.WebControls.ObjectDataSourceView>相關聯<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
> [!IMPORTANT]
>  您應該先驗證您從用戶端接收任何篩選參數值。 執行階段只會取代篩選條件運算式的參數值並將其以套用<xref:System.Data.DataSet>或<xref:System.Data.DataTable>所傳回的物件<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 如果您使用<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性作為安全性考量，以限制所傳回的篩選發生之前，您必須驗證的參數值的項目數目。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 字串中任何參數替代符號關聯的參數集合。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" />，其中所包含的一組參數，與在 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 屬性中找到的任何參數預留位置相關聯。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援篩選的資料時，才<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法會傳回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>物件。  
  
 用於語法<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>是格式字串樣式的運算式。 篩選運算式語法是相同的語法可接受的<xref:System.Data.DataColumn.Expression%2A>屬性。 如果您加入參數，以便<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合，您也可以包含格式字串的預留位置。 例如，包含`"{0}"`中替換參數值的運算式。 根據中的參數索引來取代預留位置<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合。  
  
 您可以包含在參數<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性。 如果參數是字串或字元類型，請使用單引號括住參數。 如果參數是數值類型，就不需要引號。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>屬性擷取<xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A>屬性所包含的<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何顯示篩選的資料使用<xref:System.Web.UI.WebControls.ObjectDataSource>來自中介層商務物件擷取資料的物件和<xref:System.Web.UI.WebControls.GridView>控制項來顯示結果。 第二個程式碼範例提供第一個程式碼範例中使用的中介層商務物件的範例。  
  
 下列程式碼範例示範如何顯示篩選的資料使用<xref:System.Web.UI.WebControls.ObjectDataSource>來自中介層商務物件擷取資料的控制項和<xref:System.Web.UI.WebControls.GridView>控制項來顯示結果。 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項可以篩選資料，只時擷取資料的方法會擷取為<xref:System.Data.DataSet>或<xref:System.Data.DataTable>物件。 基於這個理由，<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性會識別擷取資料的商務物件方法<xref:System.Data.DataSet>。  
  
 程式碼範例包含<xref:System.Web.UI.WebControls.TextBox>控制項，<xref:System.Web.UI.WebControls.GridView>控制項，<xref:System.Web.UI.WebControls.ObjectDataSource>控制項和**送出** 按鈕。 根據預設，<xref:System.Web.UI.WebControls.TextBox>會填入其中一個 Northwind Traders 員工的名稱。 <xref:System.Web.UI.WebControls.GridView>顯示員工中的名稱所識別的相關資訊<xref:System.Web.UI.WebControls.TextBox>。 中要擷取資料的另一位員工， <xref:System.Web.UI.WebControls.TextBox>，輸入員工的完整名稱，然後按一下**送出** 按鈕。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性會指定用來篩選所擷取的資料運算式<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。 它會使用參數預留位置中所包含的參數進行評估之<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合。 在此範例中，參數預留位置會受限於單一引號因為參數類型是可能含有空格的字串類型。 如果參數的型別是數值或日期類型，不需要繫結的引號。 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合包含一個參數，<xref:System.Web.UI.WebControls.FormParameter>物件繫結至<xref:System.Web.UI.WebControls.TextBox>控制項。  
  
> [!IMPORTANT]
>  您應該先驗證您從用戶端接收任何篩選參數值。 執行階段只會取代篩選條件運算式的參數值並將其以套用<xref:System.Data.DataView>所傳回的物件<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。 如果您使用<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性作為安全性考量，以限制所傳回的篩選發生之前，您必須驗證的參數值的項目數目。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 下列程式碼範例提供上述的程式碼範例使用的中介層商務物件的範例。 程式碼範例是由兩個基本類別所組成：  
  
-   `EmployeeLogic`類別，這是封裝商務邏輯的類別。  
  
-   `NorthwindEmployee`類別，這是包含只需要以載入保存資料與資料層的基本功能的模型類別。  
  
 為了簡單起見，`EmployeeLogic`類別會建立一組靜態的資料，而非從資料層擷取資料。 它也很有用的此範例中，因為此範例依賴您提供示範篩選 Northwind Traders 員工的完整名稱。 如需完整的工作範例，您必須編譯，並使用這些類別提供的 Web Form 程式碼範例。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">您設定了 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 屬性，但 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 方法沒有傳回 <see cref="T:System.Data.DataSet" /> 或 <see cref="T:System.Data.DataTable" />。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">要擷取的檢視名稱。 因為 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 只支援一個檢視，所以會忽略 <c>viewName</c>。</param>
        <summary>擷取與資料來源控制項關聯的具名資料來源檢視。</summary>
        <returns>與 <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> 關聯之名為 <see langword="DefaultView" /> 的 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援只有一個資料來源檢視。 如同所有的資料來源檢視物件，<xref:System.Web.UI.WebControls.ObjectDataSourceView>相關聯的資料，原始檔控制定義其功能、 執行所有的工作是為了從基礎資料存放區中，擷取資料並執行排序，這類的作業插入、 刪除和更新。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A>方法是由資料繫結控制項，呼叫不是由網頁程式碼。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定的 <paramref name="viewName" /> 為 <see langword="null" /> 或其他非 <see langword="DefaultView" /> 的名稱。</exception>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>擷取名稱集合，表示與 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件關聯的檢視物件清單。</summary>
        <returns>
          <see cref="T:System.Collections.ICollection" />，包含與 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 關聯的檢視名稱。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援只有一個檢視中，名為`DefaultView`，其基礎資料。 <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A>方法會傳回此一檢視名稱的單一項目集合。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A>方法是由資料繫結控制項，呼叫不是由網頁程式碼。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>藉由呼叫由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> 屬性所識別的方法，和 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" /> 集合中的任何參數，執行插入作業。</summary>
        <returns>表示插入基礎資料儲存之資料列數目的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 之前<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>執行作業時，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件檢查參數的值，並執行任何前置處理之前<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>作業。 若要執行插入作業，<xref:System.Web.UI.WebControls.ObjectDataSourceView>物件使用反映來建立物件所識別的執行個體<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性。 然後它會呼叫的方法，由<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>使用所有相關聯的屬性<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>屬性。 之後<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>作業完成時，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>事件。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>檢查任何傳回值、 輸出參數，以及例外狀況，以及執行的任何後續處理的事件。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>方法會委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>相關聯<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 如需參數合併、 物件存留期，以及方法解析的詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>。  
  
## <a name="data-bound-controls"></a>資料繫結控制項  
 當<xref:System.Web.UI.WebControls.ObjectDataSource>物件相關聯的資料繫結控制項，例如<xref:System.Web.UI.WebControls.GridView>控制項，不需要呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>從網頁程式碼的方法。 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>方法叫用資料繫結控制項來直接改為。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Inserted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" /> 作業已經完成時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>事件來檢查傳回值或輸出參數的值，或是判斷是否發生例外狀況之後<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>作業已完成。 傳回值，輸出參數和例外狀況處理屬性都是從<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>與事件相關聯的物件。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Inserting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" /> 作業之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件以執行特定應用程式，來驗證參數的值，或變更之前的參數值的其他初始化<xref:System.Web.UI.WebControls.ObjectDataSource>控制項執行插入作業。 參數是可做為<xref:System.Collections.IDictionary>所存取的集合<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>屬性，由<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>物件。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的物件和<xref:System.Web.UI.WebControls.DetailsView>控制項以插入資料。 第二個程式碼範例提供第一個程式碼範例中使用的中介層商務物件的範例。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的控制和<xref:System.Web.UI.WebControls.DetailsView>控制項以插入資料。 一開始，<xref:System.Web.UI.WebControls.DetailsView>顯示新`NorthwindEmployee`記錄，以及自動產生**插入** 按鈕。 資料輸入的欄位之後<xref:System.Web.UI.WebControls.DetailsView>控制，請按一下**插入** 按鈕。 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>屬性會識別哪一種方法執行插入作業。  
  
 在此範例中，`UpdateEmployeeInfo`方法用來執行插入; 不過，它需要`NorthwindEmployee`來插入資料的參數。 基於這個理由，集合的字串，<xref:System.Web.UI.WebControls.DetailsView>控制項將會自動是不夠的。 `NorthwindEmployeeInserting`委派<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler>處理物件<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件可讓您操作之前輸入的參數和<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>作業會繼續進行。 因為`UpdateEmployeeInfo`方法需要`NorthwindEmployee`物件做為參數，其中會使用字串集合來建立並加入至<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>使用參數名稱的集合 (`ne`) 該方法所預期。 使用現有的中介層物件做為資料來源，具有類型和方法不是特別針對搭配使用時，您可能會執行這些步驟<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 當<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>執行作業時，所識別的方法<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>呼叫屬性。 如果`Insert`物件的方法有包含參數，參數的方法簽章<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合必須包含其名稱符合的方法簽章參數的參數<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>方法順利完成。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]  
  
 下列程式碼範例提供上述的程式碼範例使用的中介層商務物件的範例。 程式碼範例是由兩個基本類別所組成：  
  
-   `EmployeeLogic`類別，這是無狀態的類別封裝商務邏輯。  
  
-   `NorthwindEmployee`類別，這是包含只需要以載入保存資料與資料層的基本功能的模型類別。  
  
 額外`NorthwindDataException`提供類別是為了方便起見。 如需完整的工作範例，您必須編譯，並使用這些類別。 `UpdateEmployeeInfo`方法未完全實作，因此您會將資料插入 Northwind Traders 資料庫時嘗試使用這個範例。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertMethod">
      <MemberSignature Language="C#" Value="public string InsertMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控制項叫用以插入資料之方法或函式的名稱。</summary>
        <value>字串，表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用於插入資料之方法或函式的名稱。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 商務物件會假設為一次，而不是批次中插入一筆記錄的資料。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>物件。  
  
## <a name="object-lifetime"></a>物件存留期  
 所識別的方法<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>屬性可以是執行個體方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果執行個體方法，商務物件建立和終結所指定之方法的每次<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>呼叫屬性。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件，以使用之前的商務物件<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>呼叫屬性。 您也可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>所指定的方法之後，就會引發的事件<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>呼叫屬性。 如果實作的商務物件<xref:System.IDisposable>介面，<xref:System.IDisposable.Dispose%2A>方法會終結物件之前呼叫。 如果該方法是`static`(`Shared`在 Visual Basic 中)，不會建立商務物件，而且您無法處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。  
  
## <a name="parameter-merging"></a>合併的參數  
 若要加入參數<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>三個來源的集合：  
  
-   從資料繫結控制項，在執行階段。  
  
-   從`InsertParameters`項目，以宣告方式。  
  
-   從`Inserting`方法，以程式設計的方式。  
  
 首先，將資料繫結控制項所產生的任何參數加入至<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合。 例如，如果<xref:System.Web.UI.WebControls.ObjectDataSource>控制項繫結至<xref:System.Web.UI.WebControls.GridView>具有資料行的控制`Name`和`Number`，參數`Name`和`Number`加入至集合。 這些參數的資料類型是`string`。 下一步，參數中所列`InsertParameters`加入項目。 如果中的參數`InsertParameters`找到項目具有相同名稱做為參數已經在<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>修改集合，現有的參數符合參數中指定`InsertParameters`項目。 一般而言，這用來修改參數中的資料類型。 最後，您可以透過程式設計方式加入和移除參數中的<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件之前發生<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>方法執行。 會合併這些參數之後，就會解決方法。 在下一節討論方法解析。  
  
> [!IMPORTANT]
>  您應該驗證您從用戶端接收任何參數值。 執行階段只會替代參數值到<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>屬性。  
  
## <a name="method-resolution"></a>方法解析  
 當<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>呼叫方法時，資料繫結控制項，以宣告方式中所建立的參數的資料欄位`InsertParameters`項目，並已加入的參數<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>所有合併事件處理常式。 （如需詳細資訊，請參閱上一節）。<xref:System.Web.UI.WebControls.ObjectDataSource>物件會嘗試尋找要呼叫的方法。 首先，它會尋找名稱中指定的一或多個方法<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>屬性。 如果找到相符項目，<xref:System.InvalidOperationException>擲回例外狀況。 如果找到相符項目，則會尋找相符的參數名稱。 例如，假設由所指定的型別<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性有兩個方法，名為`InsertARecord`。 一個`InsertARecord`具有一個參數， `ID`，和其他`InsertARecord`有兩個參數，`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合具有名為只有一個參數`ID`、`InsertARecord`方法只`ID`參數呼叫。 參數的型別不會檢查在解析方法。 參數的順序不重要。  
  
 如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性設定，方法解決了不同的方式。 <xref:System.Web.UI.WebControls.ObjectDataSource>中指定名稱的方法會尋找<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>採用一個參數類型的屬性中指定<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性。 在此情況下，參數的名稱並不重要。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的物件和<xref:System.Web.UI.WebControls.DetailsView>控制項以插入資料。 第二個程式碼範例提供第一個程式碼範例中使用的中介層商務物件的範例。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的控制和<xref:System.Web.UI.WebControls.DetailsView>控制項以插入資料。 一開始，<xref:System.Web.UI.WebControls.DetailsView>顯示新`NorthwindEmployee`記錄，以及自動產生**插入** 按鈕。 資料輸入的欄位之後<xref:System.Web.UI.WebControls.DetailsView>控制，請按一下**插入** 按鈕。 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>屬性會識別哪一種方法執行插入作業。  
  
 在此範例中，`UpdateEmployeeInfo`方法用來執行插入; 不過，它需要`NorthwindEmployee`來插入資料的參數。 基於這個理由，集合的字串，<xref:System.Web.UI.WebControls.DetailsView>控制項將會自動是不夠的。 `NorthwindEmployeeInserting`委派<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler>處理物件<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件可讓您操作之前輸入的參數和<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>作業會繼續進行。 因為`UpdateEmployeeInfo`方法需要`NorthwindEmployee`物件做為參數，其中會使用字串集合來建立並加入至<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>使用參數名稱的集合 (`ne`) 該方法所預期。 使用現有的中介層物件做為資料來源，具有類型和方法不是特別針對搭配使用時，您可能會執行這些步驟<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 當<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>執行作業時，所識別的方法<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>呼叫屬性。 如果`Insert`物件的方法有包含參數，參數的方法簽章<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合必須包含其名稱符合的方法簽章參數的參數<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>方法順利完成。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]  
  
 下列程式碼範例提供上述的程式碼範例使用的中介層商務物件的範例。 程式碼範例是由兩個基本類別所組成：  
  
-   `EmployeeLogic`類別，這是無狀態的類別封裝商務邏輯。  
  
-   `NorthwindEmployee`類別，這是包含只需要以載入保存資料與資料層的基本功能的模型類別。  
  
 額外`NorthwindDataException`提供類別是為了方便起見。 如需完整的工作範例，您必須編譯，並使用這些類別。 `UpdateEmployeeInfo`方法未完全實作，因此您會將資料插入 Northwind Traders 資料庫時嘗試使用這個範例。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得包含 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> 屬性所使用參數的參數集合。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" />，包含 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> 屬性識別之方法所使用的參數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名稱和參數中所包含的型別<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合的名稱和型別中的參數，必須符合<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>屬性簽章。 參數名稱會區分大小寫。 使用提供的參數，例如資料繫結控制項時<xref:System.Web.UI.WebControls.GridView>和<xref:System.Web.UI.WebControls.DetailsView>控制項<xref:System.Web.UI.WebControls.ObjectDataSource>控制項自動合併之參數的集合中已明確指定任何參數資料繫結控制項所提供。 這是很重要，因為資料繫結控制項一律提供做為其參數<xref:System.String>類型，而且如果方法簽章包含數值或日期類型，您必須明確地包含在參數<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>具有正確的類型集合。 否則，<xref:System.Web.UI.WebControls.ObjectDataSource>控制項嘗試轉換成根據集合中的參數所定義的型別參數。 如需詳細資訊，請參閱[ObjectDataSource 控制項配合使用參數](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>屬性擷取<xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A>屬性所包含的<xref:System.Web.UI.WebControls.ObjectDataSourceView>相關聯<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 如需參數合併、 物件存留期，以及方法解析的詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的物件和<xref:System.Web.UI.WebControls.DetailsView>控制項以插入資料。 第二個程式碼範例提供的範例實作`Insert`第一個程式碼範例中使用的方法。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的控制和<xref:System.Web.UI.WebControls.DetailsView>控制項以插入資料。 一開始，<xref:System.Web.UI.WebControls.DetailsView>顯示文字方塊中，您可以在此輸入新的資料`NorthwindEmployee`記錄，以及自動產生**插入** 按鈕。 資料輸入的欄位之後<xref:System.Web.UI.WebControls.DetailsView>控制，請按一下**插入** 按鈕。 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>屬性會識別哪一種方法執行插入作業。  
  
 如果您按一下**插入**按鈕時，作業會執行使用的方法，由指定<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>屬性和任何參數中指定的<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合。 在此程式碼範例中，一個參數指定<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合對應至監督員的識別碼。 這是因為即使 ID 會顯示在<xref:System.Web.UI.WebControls.GridView.Rows%2A>集合<xref:System.Web.UI.WebControls.DetailsView>控制項作為<xref:System.Web.UI.WebControls.BoundField>物件，它會傳遞為字串<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 明確地將它加入<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合<xref:System.Web.UI.WebControls.Parameter.Type%2A>屬性設定為<xref:System.TypeCode.Int32>值，它會傳遞正確<xref:System.Web.UI.WebControls.ObjectDataSource>給方法的<xref:System.Int32>，而不是做為字串。  
  
 當<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>執行作業時，所識別的方法<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>呼叫屬性。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>物件的方法有包含參數，參數的方法簽章<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合必須包含具有符合的方法簽章參數名稱的參數<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>方法順利完成。  
  
> [!IMPORTANT]
>  您應該驗證您從用戶端接收任何參數值。 執行階段只會替代參數值到<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>屬性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/objds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/objds8vb.aspx#1)]  
  
 下列程式碼範例提供的範例實作`Insert`先前的程式碼範例會使用的方法。 `InsertNewEmployeeWrapper`方法加入至`EmployeeLogic`中提供的中介層物件<xref:System.Web.UI.WebControls.ObjectDataSource>以便更輕鬆地使用物件類別概觀<xref:System.Web.UI.WebControls.ObjectDataSource>在 Web 案例中，而不大幅重寫為實際的控制項商務邏輯。  
  
 若要執行範例時，您必須擁有`NorthwindEmployee`中提供的類別<xref:System.Web.UI.WebControls.ObjectDataSource>類別概觀。 此範例說明如何將連接<xref:System.Web.UI.WebControls.ObjectDataSource>來取得新的資料庫記錄中的資料，使用參數的商務物件方法。 此範例不會新增記錄至資料庫，因為`Save`方法`NorthwindEmployee`類別不包含程式碼以更新資料庫。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_8#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/northwindemployee8.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/northwindemployee8.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">物件，含有控制項的已儲存檢視狀態值。</param>
        <summary>載入先前儲存的 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控制項檢視狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法主要供.NET Framework 基礎結構，並不是直接從您的程式碼使用。 不過，控制項開發人員可以覆寫這個方法，以指定自訂的伺服器控制項如何還原其檢視狀態。 如需詳細資訊，請參閱[ASP.NET 狀態管理概觀](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce)。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.LoadViewState%2A>方法用來載入先前儲存的檢視狀態的<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" />擴充時，方法使用主要由控制項開發人員<see cref="T:System.Web.UI.WebControls.ObjectDataSource" />控制項。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MaximumRowsParameterName">
      <MemberSignature Language="C#" Value="public string MaximumRowsParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MaximumRowsParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumRowsParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MaximumRowsParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("maximumRows")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定商務物件資料擷取方法參數的名稱，用於指出為資料來源分頁支援所擷取的資料錄數目。</summary>
        <value>用於指出要擷取之資料錄數目的 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 參數名稱。 預設值是<c>"maximumRows"</c>。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>屬性用來支援資料來源分頁。 如需分頁會受到<xref:System.Web.UI.WebControls.ObjectDataSource>控制，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
   
  
## Examples  
 下列三個範例顯示 Web 網頁、 程式碼後置頁面類別和資料存取類別，可讓使用者能夠選取的多少筆記錄會顯示在頁面。  
  
 網頁包含<xref:System.Web.UI.WebControls.ObjectDataSource>控制項<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>屬性設定為`true`。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性設定為在查詢中傳回的總記錄數的方法名稱。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>屬性和<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>屬性都設為 Select 方法中使用參數的名稱。 這個頁面也包含<xref:System.Web.UI.WebControls.DropDownList>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 第二個範例顯示的處理常式<xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType>事件<xref:System.Web.UI.WebControls.DropDownList>控制項。 處理常式集合中的程式碼<xref:System.Web.UI.WebControls.GridView.PageSize%2A>使用者選取的屬性。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 第三個範例會顯示 Customers 資料表中擷取資料的資料存取類別。 它包含方法，名為`GetSubsetOfEmployees`，這指派給<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 此範例也會包含名為的方法`GetEmployeeCount`，這指派給<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 類別會使用 LINQ 查詢的 Customers 資料表。 這個範例需要 LINQ to SQL 類別代表 Customers 資料表與 Northwind 資料庫。 如需詳細資訊，請參閱[How to： 建立 LINQ to SQL 類別，在 Web 專案](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="ObjectCreated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectCreated As ObjectDataSourceObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceObjectEventHandler ^ ObjectCreated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在建立 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> 屬性識別的物件之後發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>商務物件上呼叫其他方法的事件設定屬性，或執行其他特有之前的商務物件的初始化<xref:System.Web.UI.WebControls.ObjectDataSource>物件呼叫商務物件資料的方法來執行資料作業. 存取物件的參考<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>屬性，由<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>物件。  
  
 如果識別來執行資料作業的方法是`static`(`Shared`在 Visual Basic 中)，則<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>永遠不會引發事件。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
      </Docs>
    </Member>
    <Member MemberName="ObjectCreating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectCreating As ObjectDataSourceObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceObjectEventHandler ^ ObjectCreating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在建立 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> 屬性識別的物件之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果識別來執行資料作業的方法是`static`(`Shared`在 Visual Basic 中)，則<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>永遠不會引發事件。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項會自動呼叫的商務物件來建立使用反映它的執行個體的預設建構函式。 處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件，以明確地呼叫另一個建構函式，並將結果儲存至的物件執行個體設定<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>屬性相關聯的<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>物件。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的物件和<xref:System.Web.UI.WebControls.GridView>控制項來顯示資訊。 第二個程式碼範例提供第一個程式碼範例中使用的中介層商務物件。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的控制和<xref:System.Web.UI.WebControls.GridView>控制項來顯示資訊。 您可能使用非常昂貴的 Web 網頁執行每一資料作業 （依據時間或資源） 建立的商務物件。 其中一種方式使用高度耗費資源的物件可能要一次，建立它的執行個體，並快取將在後續的作業，而不是建立及終結針對每個資料作業。  
  
> [!NOTE]
>  在實際執行應用程式中，多個要求可能會同時使用相同的執行個體。 因此，物件必須實作以執行緒安全的方式。  
  
 這個程式碼範例會示範這個模式。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件，請先檢查物件的快取，並只能建立物件的執行個體，如果其中一個已快取。 然後，處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>快取供日後使用，而不是終結該商務物件的事件。 在此程式碼範例中，<xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=nameWithType>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs>物件設定為`true`導向<xref:System.Web.UI.WebControls.ObjectDataSource>不呼叫<xref:System.IDisposable.Dispose%2A>物件上的方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]  
  
 下列程式碼範例提供上述的程式碼範例會使用的範例中介層商務物件。 程式碼範例包含的基本商務物件，定義`EmployeeLogic`類別，這是可設定狀態的類別封裝商務邏輯。 如需完整的工作範例，您必須編譯此程式碼做為程式庫，並使用這些類別，從 ASP.NET 網頁 （.aspx 檔）。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnObjectCreating(System.Web.UI.WebControls.ObjectDataSourceEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      </Docs>
    </Member>
    <Member MemberName="ObjectDisposing">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectDisposing As ObjectDataSourceDisposingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceDisposingEventHandler ^ ObjectDisposing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在捨棄 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> 屬性識別的物件之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>商務物件的執行個體就會捨棄之前，一律會引發事件。 如果實作的商務物件<xref:System.IDisposable>介面，<xref:System.IDisposable.Dispose%2A>方法呼叫之後會引發這個事件。  
  
 處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件物件上呼叫其他方法設定屬性，或執行清理之前終結物件的特定物件。 存取物件的參考<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>屬性，由<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>物件。  
  
 當您使用<xref:System.Web.UI.WebControls.ObjectDataSource>控制項 linq to SQL 類別中，您必須取消處理常式中的資料內容類別的處置<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。 這是必要步驟，因為 LINQ to SQL 支援延後的執行，而<xref:System.Web.UI.WebControls.ObjectDataSource>控制項嘗試處置之後選取作業的資料內容。  
  
 如需如何處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的物件和<xref:System.Web.UI.WebControls.GridView>控制項來顯示資訊。 第二個程式碼範例提供第一個程式碼範例中使用的中介層商務物件。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.ObjectDataSource>的商務物件的控制和<xref:System.Web.UI.WebControls.GridView>控制項來顯示資訊。 您可能使用非常昂貴的 Web 網頁執行每一資料作業 （依據時間或資源） 建立的商務物件。 其中一種方式使用高度耗費資源的物件可能要一次，建立它的執行個體，並快取將在後續的作業，而不是建立及終結針對每個資料作業。 這個範例會示範這個模式。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件，請先檢查物件的快取，並只能建立執行個體，如果其中一個已快取。 然後，處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>快取供日後使用，而不是終結該商務物件的事件。 在此程式碼範例中，<xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=nameWithType>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs>物件設定為`true`導向<xref:System.Web.UI.WebControls.ObjectDataSource>不呼叫<xref:System.IDisposable.Dispose%2A>物件上的方法。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]  
  
 下列程式碼範例提供上述的程式碼範例會使用的範例中介層商務物件。 程式碼範例包含的基本商務物件，定義`EmployeeLogic`類別，這是可設定狀態的類別封裝商務邏輯。 如需完整的工作範例，您必須編譯此程式碼做為程式庫，並使用這些類別，從 ASP.NET 網頁 （.aspx 檔）。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]  
  
 下列範例示範如何處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件時使用<xref:System.Web.UI.WebControls.ObjectDataSource>與 LINQ to SQL 類別的控制項。  
  
```vb  
Public Sub ExampleObjectDisposing(ByVal sender As Object, _   
        ByVal e As ObjectDataSourceDisposingEventArgs)  
    e.Cancel = True  
End Sub  
```  
  
```csharp  
public void ExampleObjectDisposing(object sender,   
        ObjectDataSourceDisposingEventArgs e)  
{  
    e.Cancel = true;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定格式字串，套用至傳遞給 <see langword="Delete" /> 或 <see langword="Update" /> 方法之原始值的參數名稱。</summary>
        <value>字串，表示套用至傳遞給 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 或 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 方法之任何 <paramref name="oldValues" /> 或索引鍵參數名稱的格式字串。 預設值是<c>"{0}"</c>，這表示參數名稱都是欄位名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>屬性套用至主索引鍵，例如識別與`DataKeyNames`屬性的資料繫結控制項，或在刪除和更新案例其中<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions.CompareAllValues>值，以及一組原始的值會傳遞至對應的資料方法中。  
  
 以下是兩個常見的案例，您可能會在其中變更<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>屬性：  
  
-   您可能想要變更屬性，以區別舊的和新值更新。 當<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions.CompareAllValues>值參數的原始和新的值都會加入<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。 而格式化的字串，不會為每個資料欄位建立具有相同名稱的兩個參數。 藉由變更原始值參數的名稱，您可以比較原始資料來源偵測衝突，並比較索引鍵值的資料。  
  
-   有些視覺化設計工具會實作特定的命名配置，針對原始值和索引鍵。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>將 <see cref="E:System.Web.UI.Page.LoadComplete" /> 事件處理常式加入包含 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控制項的網頁。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.OnInit%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" />方法在衍生類別中，請務必呼叫<see cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />方法的基底類別，使已註冊的委派能接收到事件。</para>
        </block>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ParsingCulture">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ParsingCulture ParsingCulture" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ParsingCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ParsingCulture As ParsingCulture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParsingCulture ParsingCulture { System::Web::UI::WebControls::ParsingCulture get(); void set(System::Web::UI::WebControls::ParsingCulture value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParsingCulture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出在將字串值轉換成實際的屬性型別，以建構 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" /> 所表示的型別物件時，使用何種文化特性資訊。</summary>
        <value>文化特性資訊。 預設值是 <see cref="F:System.Web.UI.WebControls.ParsingCulture.Invariant" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>儲存 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控制項的狀態。</summary>
        <returns>傳回伺服器控制項的目前檢視狀態；如果沒有與控制項關聯的檢視狀態，則會傳回 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Function Select () As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>藉由呼叫 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 屬性所識別的方法，同時使用 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" /> 集合中的參數，從基礎資料儲存擷取資料。</summary>
        <returns>資料列的 <see cref="T:System.Collections.IEnumerable" /> 清單。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定的方法可能會有任何方法簽章，但它必須傳回或衍生自其中一個類型中的下列資料表列出<xref:System.Web.UI.WebControls.ObjectDataSource>能夠成功呼叫它的控制項。  
  
|傳回型別|動作|  
|-----------------|------------|  
|<xref:System.Collections.IEnumerable>|<xref:System.Collections.IEnumerable>傳回<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Data.DataTable>|A<xref:System.Data.DataView>建立使用<xref:System.Data.DataTable>，並由傳回<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Data.DataView>|<xref:System.Data.DataView>傳回<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Data.DataSet>|第一個<xref:System.Data.DataTable>的<xref:System.Data.DataSet>擷取和<xref:System.Data.DataView>建立並傳回<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Object>|物件會包裝在一個項目<xref:System.Collections.IEnumerable>集合，並由傳回<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
  
 所識別的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性可以是執行個體方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果是執行個體方法，商務物件會建立，並且由所指定的方法終結每次<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>呼叫屬性時，不同之處在於相同的執行個體用來呼叫的方法所指定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性和所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性。 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法會傳回<xref:System.Collections.IEnumerable>介面。 不過，若要啟用快取和篩選案例，傳回的值必須是<xref:System.Data.DataSet>物件。 雖然<xref:System.Data.DataSet>類別未實作<xref:System.Collections.IEnumerable>介面，<xref:System.Web.UI.WebControls.ObjectDataSource>控制項自動擷取預設<xref:System.Data.DataView>控制，它會實作<xref:System.Collections.IEnumerable>。  
  
 之前<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>執行作業時，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件檢查參數的值，並執行任何前置處理之前<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>作業。 若要執行資料擷取作業，<xref:System.Web.UI.WebControls.ObjectDataSourceView>物件使用反映來建立物件所識別的執行個體<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性。 然後它會呼叫的方法，由<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>使用所有相關聯的屬性<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>屬性。 之後<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>作業完成時，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>檢查任何傳回值、 輸出參數，以及例外狀況，以及執行的任何後續處理的事件。  
  
 如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性會傳回<xref:System.Data.DataSet>， <xref:System.Data.DataTable>，或<xref:System.Data.DataView>物件和快取已啟用，<xref:System.Web.UI.WebControls.ObjectDataSource>擷取的資料，並將資料儲存至快取期間<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>作業。 快取，已捨棄，或重新整理會根據建立指定之組合的快取行為<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>屬性。  
  
 如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性會傳回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>物件，和<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>指定屬性，它會與任何提供評估<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>屬性和結果篩選條件會套用到期間資料清單<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>作業。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法會委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>相關聯<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 如需參數合併、 物件存留期，以及方法解析的詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。  
  
## <a name="data-bound-controls"></a>資料繫結控制項  
 當<xref:System.Web.UI.WebControls.ObjectDataSource>與相關聯控制項的資料繫結控制項，例如<xref:System.Web.UI.WebControls.GridView>控制項，不需要呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>從網頁程式碼的方法。 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法叫用資料繫結控制項來直接改為。  
  
   
  
## Examples  
 如需程式碼範例，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCountMethod">
      <MemberSignature Language="C#" Value="public string SelectCountMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCountMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCountMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCountMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控制項叫用以擷取資料列計數之方法或函式的名稱。</summary>
        <value>字串，表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用於擷取資料列計數之方法或函式的名稱。 此方法必須傳回整數 (<see cref="T:System.Int32" />)。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性會識別用來擷取總計資料列計數，以支援資料來源分頁的商務物件方法。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>才會評估屬性<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>屬性設定為`true`。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 如需分頁會受到<xref:System.Web.UI.WebControls.ObjectDataSource>控制，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。  
  
   
  
## Examples  
 下列三個範例顯示 Web 網頁、 程式碼後置頁面類別和資料存取類別，可讓使用者能夠選取的多少筆記錄會顯示在頁面。  
  
 網頁包含<xref:System.Web.UI.WebControls.ObjectDataSource>控制項<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>屬性設定為`true`。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性設定為在查詢中傳回的總記錄數的方法名稱。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>屬性和<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>屬性都設為 Select 方法中使用參數的名稱。 這個頁面也包含<xref:System.Web.UI.WebControls.DropDownList>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 第二個範例顯示的處理常式<xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType>事件<xref:System.Web.UI.WebControls.DropDownList>控制項。 處理常式集合中的程式碼<xref:System.Web.UI.WebControls.GridView.PageSize%2A>使用者選取的屬性。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 第三個範例會顯示 Customers 資料表中擷取資料的資料存取類別。 它包含方法，名為`GetSubsetOfEmployees`，這指派給<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 此範例也會包含名為的方法`GetEmployeeCount`，這指派給<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 類別會使用 LINQ 查詢的 Customers 資料表。 這個範例需要 LINQ to SQL 類別代表 Customers 資料表與 Northwind 資料庫。 如需詳細資訊，請參閱[How to： 建立 LINQ to SQL 類別，在 Web 專案](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanRetrieveTotalRowCount" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Selected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 作業已經完成時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件來檢查傳回值或輸出參數的值，或是判斷是否發生例外狀況之後<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>作業已完成。 傳回值，輸出參數和例外狀況處理屬性都是從<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>與事件相關聯的物件。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列三個範例顯示 Web 網頁、 程式碼後置頁面類別和資料存取類別，可讓使用者擷取並更新 Northwind 資料庫中的 [員工] 資料表中的記錄。  
  
 第一個範例顯示包含兩個的 Web 網頁<xref:System.Web.UI.WebControls.ObjectDataSource>控制項<xref:System.Web.UI.WebControls.DropDownList>控制項和<xref:System.Web.UI.WebControls.DetailsView>控制項。 第一個<xref:System.Web.UI.WebControls.ObjectDataSource>控制項和<xref:System.Web.UI.WebControls.DropDownList>控制項用來擷取並顯示資料庫中的員工名稱。 第二個<xref:System.Web.UI.WebControls.ObjectDataSource>控制項和<xref:System.Web.UI.WebControls.DetailsView>控制項用來擷取、 顯示和修改所選取的使用者的員工記錄的資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 第二個範例示範處理常式<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>和<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件處理常式會序列化物件，包含從 Employee 資料表中擷取的資料。 已序列化的物件會儲存在檢視狀態。 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件處理常式會還原序列化的物件包含正在更新的資料記錄的原始資料的檢視狀態。 Update 方法，包含原始資料的物件會傳遞做為參數。 原始的資料必須傳遞至資料庫，使它可以用來檢查是否已由其他處理序修改資料。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 第三個範例會顯示與 Northwind 資料庫互動的資料存取類別。 類別會使用 LINQ 查詢並更新 [員工] 資料表。 這個範例需要 LINQ to SQL 類別代表 Northwind 資料庫與 Employees 資料表。 如需詳細資訊，請參閱[How to： 建立 LINQ to SQL 類別，在 Web 專案](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As ObjectDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 作業之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件以執行特定應用程式，來驗證參數的值，或變更之前的參數值的其他初始化<xref:System.Web.UI.WebControls.ObjectDataSource>控制項執行資料擷取作業。 參數是可做為<xref:System.Collections.IDictionary>所存取的集合<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>屬性，由<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>物件。  
  
 這個事件可以引發兩次的單一呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法，如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性設定。 <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs>物件用來判斷是否選取已呼叫以擷取資料，或擷取計數。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public string SelectMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控制項叫用以擷取資料之方法或函式的名稱。</summary>
        <value>字串，表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用於擷取資料之方法或函式的名稱。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定的方法可以有任何方法簽章，但它必須傳回一個顯示的下列資料表中的型別<xref:System.Web.UI.WebControls.ObjectDataSource>能夠成功呼叫它的控制項。  
  
|傳回類型|動作|  
|-----------------|------------|  
|<xref:System.Collections.IEnumerable>|<xref:System.Collections.IEnumerable>傳回<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Data.DataTable>|A<xref:System.Data.DataView>使用建立<xref:System.Data.DataTable>，並由傳回<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Data.DataView>|A<xref:System.Data.DataView>傳回<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Data.DataSet>|第一個<xref:System.Data.DataTable>的<xref:System.Data.DataSet>擷取時，與<xref:System.Data.DataView>建立並傳回<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
|<xref:System.Object>|物件會包裝在一個項目<xref:System.Collections.IEnumerable>集合，並由傳回<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。|  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 當您使用<xref:System.Web.UI.WebControls.ObjectDataSource>類別若要刪除或更新資料，請確定參數名稱設定為<xref:System.Web.UI.WebControls.ObjectDataSource>控制<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合或<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合符合 select 方法所傳回的資料行名稱.  
  
## <a name="object-lifetime"></a>物件存留期  
 所識別的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性可以是執行個體方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果是執行個體方法，商務物件會建立，並且由所指定的方法終結每次<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>呼叫屬性。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件，以使用商務物件由所指定的方法之前<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>呼叫屬性。 您也可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>所指定的方法之後，就會引發的事件<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>呼叫屬性。 如果實作的商務物件<xref:System.IDisposable>介面，<xref:System.IDisposable.Dispose%2A>方法會終結物件之前呼叫。 如果該方法是`static`(`Shared`在 Visual Basic 中)，不會建立商務物件，而且您無法處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。  
  
## <a name="parameter-merging"></a>合併的參數  
 若要加入參數<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合，從下列來源：  
  
-   以宣告方式從`SelectParameters`項目。  
  
-   以程式設計方式從`Selecting`方法。  
  
 首先，在列出參數`SelectParameters`加入項目。 第二，以程式設計方式加入和移除參數<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件之前發生<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法執行。 會合併這些參數之後，就會解決方法。 在下一節討論方法解析。  
  
> [!IMPORTANT]
>  您應該驗證您從用戶端接收任何參數值。 執行階段只會替代參數值到<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。  
  
## <a name="method-resolution"></a>方法解析  
 當<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>呼叫方法時，資料繫結控制項，以宣告方式中所建立的參數的資料欄位`SelectParameters`項目，並已加入的參數<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>所有合併事件處理常式。 （如需詳細資訊，請參閱上一節）。<xref:System.Web.UI.WebControls.ObjectDataSource>控制然後嘗試尋找要呼叫的方法。 首先，它會尋找名稱中指定的一或多個方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。 如果找到相符項目，<xref:System.InvalidOperationException>擲回例外狀況。 如果找到相符項目，則會尋找相符的參數名稱。 例如，假設由所指定的型別<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性有兩個方法，名為`SelectARecord`。 一個`SelectARecord`具有一個參數， `ID`，和其他`SelectARecord`有兩個參數，`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合具有名為只有一個參數`ID`、`SelectARecord`方法只`ID`參數呼叫。 參數的型別不會檢查在解析方法。 參數的順序不重要。  
  
 如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性設定，方法解決了不同的方式。 <xref:System.Web.UI.WebControls.ObjectDataSource>中指定名稱的方法會尋找<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>採用一個參數類型的屬性中指定<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性。 在此情況下，參數的名稱並不重要。  
  
   
  
## Examples  
 下列程式碼範例示範如何<xref:System.Web.UI.WebControls.GridView>控制項可以顯示資料使用<xref:System.Web.UI.WebControls.ObjectDataSource>Web Form 網頁上的控制項。 <xref:System.Web.UI.WebControls.ObjectDataSource>識別部分或完整限定的類別名稱及其<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性和方法，呼叫以擷取資料以其<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。 在執行階段，建立物件，並使用反映來呼叫方法。 <xref:System.Web.UI.WebControls.GridView>控制項列舉<xref:System.Collections.IEnumerable>所指定之方法所傳回的集合<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性，並顯示資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得參數的集合，這些參數是由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 屬性指定的方法所使用。</summary>
        <value>參數的集合，這些參數是由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 屬性指定的方法所使用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>屬性會取得<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 加入參數，以便<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合中的以宣告方式依使用`SelectParameters`項目或以程式設計方式中的處理常式<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件。 在執行階段，參數會列在`SelectParameters`項目會先加入至集合。 然後加入或移除的處理常式集合中的參數<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>之前引發事件<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法執行。  
  
 之前<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>執行方法時，名稱和參數中所包含的型別<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合必須符合所指定之方法的簽章<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。 例如，如果名為 select 方法`GetEmployeesByStateAndAge`採用`string`和整數做為參數，<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合必須包含兩個參數。 第一個參數必須解析成字串，而且第二個參數必須解析成整數。 這兩個參數可以指定在標記中`SelectParameters`項目。 或者，也可以加入<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>加入事件處理常式或一個參數標記，而且可以透過程式設計方式加入另一個。  
  
 如需詳細資訊，請參閱[ObjectDataSource 控制項配合使用參數](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)和<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod>屬性。  
  
> [!IMPORTANT]
>  在程式碼<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件處理常式或所指定的方法中<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性，請確定您驗證接收自用戶端的任何參數值。  
  
   
  
## Examples  
 下列程式碼範例示範如何擷取單一資料記錄使用<xref:System.Web.UI.WebControls.ObjectDataSource>控制，並顯示在<xref:System.Web.UI.WebControls.DetailsView>控制項。 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項擷取特定員工記錄藉由呼叫`GetEmployee`方法`EmployeeLogic`類別。 `GetEmployee`方法要求員工識別碼參數。 <xref:System.Web.UI.WebControls.ObjectDataSource>控制使用`QueryStringParameter`建立標記中的項目<xref:System.Web.UI.WebControls.QueryStringParameter>物件，將從 URL 擷取指定的查詢字串參數的值，並將它傳遞給`GetEmployee`方法。  
  
 其他參數類別可以用來擷取其他來源，例如控制項屬性、 表單欄位、 cookie、 ASP.NET 設定檔資料或工作階段狀態的值。 您也可以使用標記中定義以硬式編碼值傳遞給 select 方法的參數物件。 如需可用的參數類別的詳細資訊，請參閱[使用參數與篩選的資料來源控制項](http://msdn.microsoft.com/library/88622d04-2989-484e-93fe-594cd98dcf5f)。  
  
 若要執行此範例中，您需要下列項目：  
  
-   網站具有名為連線字串`NorthwindConnection`連接至 Northwind Traders 資料庫。 如需詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource>類別概觀。  
  
-   `EmployeeLogic`類別做為其中一個程式碼範例顯示<xref:System.Web.UI.WebControls.ObjectDataSource>類別概觀。 將類別檔案必須位於 App_Code 資料夾中。  
  
-   範例程式碼可以執行的.aspx 網頁。 如果您要求的頁面不含查詢字串參數，則會顯示錯誤訊息。 如果您要求的頁面使用的查詢字串，例如`?empid=1`.aspx 檔案的名稱之後, 您會看到詳細資料要求的員工。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/CS/objds3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/VB/objds3vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定商務物件的名稱，<see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 參數使用該名稱指定資料來源排序支援的排序運算式。</summary>
        <value>方法參數的名稱，用於指出要用於排序資料的參數。 預設為空字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>屬性用來支援資料來源排序。 當<xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>上設定屬性<xref:System.Web.UI.DataSourceSelectArguments>物件，並傳遞至<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法，<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>值識別的參數名稱<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>，據此排序資料的商務物件方法。  
  
 如果<xref:System.Web.UI.WebControls.ObjectDataSource>與資料繫結控制項，會傳遞至以逗號分隔的欄位值的形式，後面加上此參數採用的值相關聯`"ASC"`或`"DESC"`。 例如，在遞增排序的值`Name`會`"Name ASC"`。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何實作支援排序的型別。 第二個程式碼範例示範如何實作的排序運算式。  
  
 下列程式碼範例示範如何實作支援排序的型別。 `SelectMethod`的`SortingData`類別接受參數， `sortExpression`。 傳遞至字串`SelectMethod`用於<xref:System.Data.DataView.Sort%2A>屬性<xref:System.Data.DataView>所傳回的物件`SelectMethod`。  
  
 [!code-csharp[ObjectDataSourceSorting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingData.cs#1)]
 [!code-vb[ObjectDataSourceSorting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingData.vb#1)]  
  
 下列程式碼範例示範如何實作的排序運算式。 Web 網頁中的程式碼建立的執行個體<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性設定為`SortingData`和<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>屬性設定為`sortExpression`。 <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A>屬性<xref:System.Web.UI.WebControls.GridView>控制設為  `true`。 當使用者按一下**排序**按鈕、 欄位名稱`Name`或`Number`，傳遞至`SelectMethod`排序參數中。  
  
 [!code-aspx-csharp[ObjectDataSourceSorting#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingDataExample.aspx#2)]
 [!code-aspx-vb[ObjectDataSourceSorting#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingDataExampleVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanSort" />
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SqlCacheDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SqlCacheDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定以分號分隔的字串，表示用於 Microsoft SQL Server 快取相依性的資料庫和資料表。</summary>
        <value>字串，表示用於 SQL Server 快取相依性的資料庫和資料表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援選擇性的到期原則為基礎的<xref:System.Web.Caching.SqlCacheDependency>（服務必須設定為資料庫伺服器） 的資料快取的物件。  
  
 SQL Server 支援兩種機制，快取無效： 輪詢和通知。 每一種機制具有不同的語法為<xref:System.Web.Caching.SqlCacheDependency>物件。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>支援只有輪詢。 <xref:System.Web.Caching.SqlCacheDependency>字串用來建立<xref:System.Data.SqlClient.SqlDependency>物件傳遞至<xref:System.Data.Common.DbCommand>建構函式之前<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>執行方法。 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>字串會識別資料庫和資料表，根據所使用的相同格式`@ Page`指示詞，其中字串的第一個部分是 SQL Server 資料庫的連接字串，後面接著冒號分隔符號和最後名稱資料庫資料表 (例如， `"connectionstring1:table1"`)。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>屬性相依於多個資料表，連接字串和資料表名稱組以分號分隔 (例如， `"connectionstring1:table1";connectionstring2:table2"`)。  
  
 若要支援通知，您必須撰寫的快取邏輯中的實作您<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性及處理建構<xref:System.Web.Caching.SqlCacheDependency>程式碼中的物件。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何建立 SQL Server 的快取相依性，並設定<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSource>物件。 第二個程式碼範例示範如何實作包裝函式方法會傳回<xref:System.Data.DataSet>物件，讓快取和使用篩選<xref:System.Web.UI.WebControls.ObjectDataSource>物件。  
  
 下列程式碼範例示範如何建立 SQL Server 的快取相依性，並設定<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 在此範例中，資料庫會輪詢每隔 120 秒。 如果 Northwind Traders 員工中的資料表格變更期間的時間、 快取的任何資料<xref:System.Web.UI.WebControls.ObjectDataSource>控制和顯示<xref:System.Web.UI.WebControls.GridView>控制項已過期，而且新的資料集擷取下一個頁面要求上。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/CS/objds7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/VB/objds7vb.aspx#1)]  
  
 下列程式碼範例示範如何實作包裝函式方法會傳回<xref:System.Data.DataSet>物件，讓快取和使用篩選<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 中的基底實作`EmployeeLogic`類別`GetAllEmployees`方法會傳回<xref:System.Collections.ArrayList>物件。 而不是重構物件完全使用<xref:System.Web.UI.WebControls.ObjectDataSource>Web Form 網頁上，包裝函式方法名為`GetAllEmployeesAsDataSet`加入傳回一組`NorthwindEmployee`資料做為<xref:System.Data.DataSet>。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="StartRowIndexParameterName">
      <MemberSignature Language="C#" Value="public string StartRowIndexParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StartRowIndexParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property StartRowIndexParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StartRowIndexParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("startRowIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料擷取方法參數的名稱，用於指出為資料來源分頁支援所擷取之第一個資料錄的識別項的值。</summary>
        <value>用於指出要擷取之第一個資料錄的商務物件方法參數名稱。 參數必須傳回整數值。 預設值是<c>"startRowIndex"</c>。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>屬性用來支援資料來源分頁。 如需分頁會受到<xref:System.Web.UI.WebControls.ObjectDataSource>控制，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
   
  
## Examples  
 下列三個範例顯示 Web 網頁、 程式碼後置頁面類別和資料存取類別，可讓使用者能夠選取的多少筆記錄會顯示在頁面。  
  
 網頁包含<xref:System.Web.UI.WebControls.ObjectDataSource>控制項<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>屬性設定為`true`。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性設定為在查詢中傳回的總記錄數的方法名稱。 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>屬性和<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>屬性都設為 Select 方法中使用參數的名稱。 這個頁面也包含<xref:System.Web.UI.WebControls.DropDownList>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 第二個範例顯示的處理常式<xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType>事件<xref:System.Web.UI.WebControls.DropDownList>控制項。 處理常式集合中的程式碼<xref:System.Web.UI.WebControls.GridView.PageSize%2A>使用者選取的屬性。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 第三個範例會顯示 Customers 資料表中擷取資料的資料存取類別。 它包含方法，名為`GetSubsetOfEmployees`，這指派給<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 此範例也會包含名為的方法`GetEmployeeCount`，這指派給<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。 類別會使用 LINQ 查詢的 Customers 資料表。 這個範例需要 LINQ to SQL 類別代表 Customers 資料表與 Northwind 資料庫。 如需詳細資訊，請參閱[How to： 建立 LINQ to SQL 類別，在 Web 專案](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>追蹤 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控制項的檢視狀態變更，讓這些變更能夠儲存在 <see cref="T:System.Web.UI.StateBag" /> 物件中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.TrackViewState%2A>標示的起點開始追蹤並儲存變更至控制項的檢視狀態物件的一部分，會覆寫方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件表示之類別的名稱。</summary>
        <value>部分或完整類別名稱 (Fully Qualified Class Name)，識別 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 表示的物件型別。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要建立物件的執行個體<xref:System.Web.UI.WebControls.ObjectDataSource>控制項繫結至、 控制項使用反映來載入執行階段的型別名稱識別的型別。 因此，值<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性可以是位於 Bin 或 App_Code 目錄中的程式碼的不完整的類型或全域組件快取中註冊的程式碼的完整限定的類型名稱。 如果您使用全域組件快取，您必須加入至適當的參考`assemblies`Machine.config 或 Web.config 檔案區段。  
  
 類型必須有預設建構函式，除非您處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>自行建立它的執行個體的事件。 每次呼叫建立類型的執行個體<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法，如果型別上的方法成員方法。 如果方法不會建立執行個體`static`(`Shared`在 Visual Basic 中)。 如果類型實作<xref:System.IDisposable>介面，<xref:System.IDisposable.Dispose%2A>方法會終結物件之前呼叫。  
  
   
  
## Examples  
 下列程式碼範例示範如何<xref:System.Web.UI.WebControls.GridView>控制項可以顯示資料，使用<xref:System.Web.UI.WebControls.ObjectDataSource>Web Form 網頁上的控制項。 <xref:System.Web.UI.WebControls.ObjectDataSource>識別部分或完整限定的類別名稱及其<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性和方法，呼叫以擷取資料以其<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。 在執行階段，建立物件，並使用反映來呼叫方法。 <xref:System.Web.UI.WebControls.GridView>控制項列舉<xref:System.Collections.IEnumerable>所傳回的集合<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性，並顯示資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 下列範例顯示類別<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性值參考。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      <MemberSignature Language="VB.NET" Value="Public Function Update () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>藉由呼叫由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> 屬性所識別的方法，同時使用 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" /> 集合中的任何參數，執行更新作業。</summary>
        <returns>表示基礎資料儲存中更新之資料列數目的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 商務物件會假設為一次，而不是批次中更新資料的一筆記錄。  
  
 之前<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>執行作業時，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件檢查參數的值，並執行任何前置處理之前<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>作業。 若要執行更新作業，<xref:System.Web.UI.WebControls.ObjectDataSourceView>物件使用反映來建立物件所識別的執行個體<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性。 然後它會呼叫的方法，由<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>使用所有相關聯的屬性<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>屬性。 之後<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>作業完成時，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>事件。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>檢查任何傳回值、 輸出參數，以及例外狀況，以及執行的任何後續處理的事件。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>方法會委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>相關聯<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 如需參數合併、 物件存留期，以及方法解析的詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。  
  
> [!IMPORTANT]
>  您應該驗證您從用戶端接收任何參數值。 執行階段只會替代參數值到<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性。  
  
## <a name="data-bound-controls"></a>資料繫結控制項  
 當<xref:System.Web.UI.WebControls.ObjectDataSource>與相關聯控制項的資料繫結控制項，例如<xref:System.Web.UI.WebControls.GridView>控制項，不需要呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>從網頁程式碼的方法。 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>方法叫用資料繫結控制項來直接改為。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.DropDownList>控制項，<xref:System.Web.UI.WebControls.TextBox>控制項，以及數個<xref:System.Web.UI.WebControls.ObjectDataSource>物件來更新資料。 第二個程式碼範例顯示`EmployeeLogic`第一個程式碼範例中使用的類別。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.DropDownList>控制項，<xref:System.Web.UI.WebControls.TextBox>控制項，以及數個<xref:System.Web.UI.WebControls.ObjectDataSource>控制項更新資料。 <xref:System.Web.UI.WebControls.DropDownList>顯示 Northwind 員工的名稱時<xref:System.Web.UI.WebControls.TextBox>控制項可用來輸入和更新位址資訊。 因為<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合包含<xref:System.Web.UI.WebControls.ControlParameter>物件繫結至選取的值<xref:System.Web.UI.WebControls.DropDownList>，引發按鈕<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>員工選取之後，才啟用作業。  
  
> [!IMPORTANT]
>  這個範例有一個可接受使用者輸入的文字方塊，這可能會造成安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]  
  
 下列程式碼範例示範`EmployeeLogic`上述程式碼範例中使用的類別。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Updated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 作業已經完成時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>事件來檢查傳回值或輸出參數的值，或是判斷是否發生例外狀況之後<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>作業已完成。 傳回值，輸出參數和例外狀況處理屬性都是從<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>與事件相關聯的物件。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateMethod">
      <MemberSignature Language="C#" Value="public string UpdateMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 控制項叫用以更新資料之方法或函式的名稱。</summary>
        <value>字串，表示 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 用於更新資料之方法或函式的名稱。 預設為空字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource>控制項假設的方法，由<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性會執行更新一次，而不是批次中。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 請確定參數名稱設定為<xref:System.Web.UI.WebControls.ObjectDataSource>控制<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合符合 select 方法所傳回的資料行名稱。  
  
## <a name="object-lifetime"></a>物件存留期  
 所識別的方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性可以是執行個體方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果是執行個體方法，商務物件會建立，並且由所指定的方法終結每次<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>呼叫屬性。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件，以使用商務物件由所指定的方法之前<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>呼叫屬性。 您也可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>所指定的方法之後，就會引發的事件<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>呼叫屬性。 如果實作的商務物件<xref:System.IDisposable>介面，<xref:System.IDisposable.Dispose%2A>方法會終結物件之前呼叫。 如果該方法是`static`(`Shared`在 Visual Basic 中)，不會建立商務物件，而且您無法處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。  
  
## <a name="parameter-merging"></a>合併的參數  
 若要加入參數<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>三個來源的集合：  
  
-   從資料繫結控制項，在執行階段。  
  
-   從`UpdateParameters`項目，以宣告方式。  
  
-   從<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件處理常式，以程式設計的方式。  
  
 首先，將資料繫結控制項所產生的任何參數加入至<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。 例如，如果<xref:System.Web.UI.WebControls.ObjectDataSource>控制項繫結至<xref:System.Web.UI.WebControls.GridView>具有資料行的控制`Name`和`Number`，參數`Name`和`Number`加入至集合。 完整名稱的參數取決於<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>屬性。 這些參數的資料類型是`string`。 下一步，參數中所列`UpdateParameters`加入項目。 如果中的參數`UpdateParameters`找到項目具有相同名稱做為參數已經在<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>修改集合，現有的參數符合參數中指定`UpdateParameters`項目。 一般而言，這用來修改參數中的資料類型。 最後，您可以透過程式設計方式加入和移除參數中的<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件之前發生<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>方法執行。 會合併這些參數之後，就會解決方法。 在下一節討論方法解析。  
  
> [!IMPORTANT]
>  您應該驗證您從用戶端接收任何參數值。 執行階段只會替代參數值到<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性。  
  
## <a name="method-resolution"></a>方法解析  
 當<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>呼叫方法時，資料繫結控制項，以宣告方式中所建立的參數的資料欄位`UpdateParameters`項目，並已加入的參數<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>所有合併事件處理常式。 （如需詳細資訊，請參閱上一節）。<xref:System.Web.UI.WebControls.ObjectDataSource>控制然後嘗試尋找要呼叫的方法。 首先，它會尋找名稱中指定的一或多個方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性。 如果找到相符項目，<xref:System.InvalidOperationException>擲回例外狀況。 如果找到相符項目，則會尋找相符的參數名稱。 例如，假設由所指定的型別<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性有兩個方法，名為`UpdateARecord`。 一個`UpdateARecord`具有一個參數， `ID`，和其他`UpdateARecord`有兩個參數，`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合具有名為只有一個參數`ID`、`UpdateARecord`方法只`ID`參數呼叫。 參數的型別不會檢查在解析方法。 參數的順序不重要。  
  
 如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性設定，方法解決了不同的方式。 <xref:System.Web.UI.WebControls.ObjectDataSource>中指定名稱的方法會尋找<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>採用一個參數類型的屬性中指定<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性。 在此情況下，參數的名稱並不重要。  
  
   
  
## Examples  
 下列三個範例顯示 Web 網頁、 程式碼後置頁面類別和資料存取類別，可讓使用者擷取並更新 Northwind 資料庫中的 [員工] 資料表中的記錄。  
  
 第一個範例顯示包含兩個的 Web 網頁<xref:System.Web.UI.WebControls.ObjectDataSource>控制項<xref:System.Web.UI.WebControls.DropDownList>控制項和<xref:System.Web.UI.WebControls.DetailsView>控制項。 第一個<xref:System.Web.UI.WebControls.ObjectDataSource>控制項和<xref:System.Web.UI.WebControls.DropDownList>控制項用來擷取並顯示資料庫中的員工名稱。 第二個<xref:System.Web.UI.WebControls.ObjectDataSource>控制項和<xref:System.Web.UI.WebControls.DetailsView>控制項用來擷取、 顯示和修改所選取的使用者的員工記錄的資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 第二個範例示範處理常式<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>和<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件處理常式會序列化物件，包含從 Employee 資料表中擷取的資料。 已序列化的物件會儲存在檢視狀態。 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件處理常式會還原序列化的物件包含正在更新的資料記錄的原始資料的檢視狀態。 Update 方法，包含原始資料的物件會傳遞做為參數。 原始的資料必須傳遞至資料庫，使它可以用來檢查是否已由其他處理序修改資料。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 第三個範例會顯示與 Northwind 資料庫互動的資料存取類別。 類別會使用 LINQ 查詢並更新 [員工] 資料表。 這個範例需要 LINQ to SQL 類別代表 Northwind 資料庫與 Employees 資料表。 如需詳細資訊，請參閱[How to： 建立 LINQ to SQL 類別，在 Web 專案](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得參數集合，包含 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> 屬性指定之方法所使用的參數。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" />，包含由 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> 屬性指定之方法所使用的參數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名稱和參數中所包含的型別<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合的名稱和型別中的參數，必須符合<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>方法簽章。 參數名稱會受到<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>屬性而且有區分大小寫。 集合中的參數取決於資料繫結控制項，以宣告方式，指定的參數和以程式設計方式加入的參數中的資料。 如需詳細資訊，請參閱中的 「 合併參數 」 一節<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>和[ObjectDataSource 控制項配合使用參數](http://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>屬性擷取<xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A>屬性所包含的<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。  
  
 如需參數合併、 物件存留期，以及方法解析的詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。  
  
> [!IMPORTANT]
>  您應該驗證您從用戶端接收任何參數值。 執行階段只會替代參數值到<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.DropDownList>控制項，<xref:System.Web.UI.WebControls.TextBox>控制項，以及數個<xref:System.Web.UI.WebControls.ObjectDataSource>物件來更新資料。 第二個程式碼範例顯示`EmployeeLogic`第一個程式碼範例中使用的類別。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.DropDownList>控制項，<xref:System.Web.UI.WebControls.TextBox>控制項，以及數個<xref:System.Web.UI.WebControls.ObjectDataSource>控制項更新資料。 <xref:System.Web.UI.WebControls.DropDownList>顯示 Northwind 員工的名稱時<xref:System.Web.UI.WebControls.TextBox>控制項可用來輸入和更新位址資訊。 因為<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合包含<xref:System.Web.UI.WebControls.ControlParameter>繫結到選取的值的<xref:System.Web.UI.WebControls.DropDownList>，引發按鈕<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>員工選取之後，才啟用作業。  
  
> [!IMPORTANT]
>  這個範例有一個可接受使用者輸入的文字方塊，這可能會造成安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]  
  
 下列程式碼範例示範`EmployeeLogic`上述程式碼範例中使用的類別。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Updating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 作業之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件以執行特定應用程式，來驗證參數的值，或變更之前的參數值的其他初始化<xref:System.Web.UI.WebControls.ObjectDataSource>控制項執行更新作業。 參數是可做為<xref:System.Collections.IDictionary>所存取的集合<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>屬性，由<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>物件。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列三個範例顯示 Web 網頁、 程式碼後置頁面類別和資料存取類別，可讓使用者擷取並更新 Northwind 資料庫中的 [員工] 資料表中的記錄。  
  
 第一個範例顯示包含兩個的 Web 網頁<xref:System.Web.UI.WebControls.ObjectDataSource>控制項<xref:System.Web.UI.WebControls.DropDownList>控制項和<xref:System.Web.UI.WebControls.DetailsView>控制項。 第一個<xref:System.Web.UI.WebControls.ObjectDataSource>控制項和<xref:System.Web.UI.WebControls.DropDownList>控制項用來擷取並顯示資料庫中的員工名稱。 第二個<xref:System.Web.UI.WebControls.ObjectDataSource>控制項和<xref:System.Web.UI.WebControls.DetailsView>控制項用來擷取、 顯示和修改所選取的使用者的員工記錄的資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 第二個範例示範處理常式<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>和<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件處理常式會序列化物件，包含從 Employee 資料表中擷取的資料。 已序列化的物件會儲存在檢視狀態。 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件處理常式會還原序列化的物件包含正在更新的資料記錄的原始資料的檢視狀態。 Update 方法，包含原始資料的物件會傳遞做為參數。 原始的資料必須傳遞至資料庫，使它可以用來檢查是否已由其他處理序修改資料。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 第三個範例會顯示與 Northwind 資料庫互動的資料存取類別。 類別會使用 LINQ 查詢並更新 [員工] 資料表。 這個範例需要 LINQ to SQL 類別代表 Northwind 資料庫與 Employees 資料表。 如需詳細資訊，請參閱[How to： 建立 LINQ to SQL 類別，在 Web 專案](http://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
  </Members>
</Type>