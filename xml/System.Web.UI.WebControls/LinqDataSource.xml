<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dfda2c90a9c0a214d662eabe4e4583f819e9bbb3" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37592718" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit ContextDataSource&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.5">System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ContextTypeName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>在 ASP.NET 網頁中透過標記文字啟用 Language-Integrated Query (LINQ)，以從資料物件擷取和修改資料。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本主題內容：  
  
-   [簡介](#introduction)  
  
-   [作業的順序](#order_of_operations)  
  
-   [排序資料](#ordering_data)  
  
-   [分組資料](#grouping_data)  
  
-   [資料修改](#data_modifications)  
  
-   [在執行階段的評估值](#evaluating_value_at_run_time)  
  
-   [使用預存程序](#working_with_stored_procedures)  
  
-   [宣告式語法](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>簡介  
 Language Integrated Query (LINQ) 是定義一組查詢運算子，可讓在任何以宣告方式表示周遊、 篩選和投射作業的查詢語法。以.NET 為基礎的程式設計語言。 資料物件可以是記憶體中資料收集或表示資料庫資料的物件。 您可以擷取或修改的資料，而不需要撰寫 SQL 命令，針對每個作業。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource>控制項可讓您在 ASP.NET 網頁中使用 LINQ，藉由設定屬性以標記文字。 <xref:System.Web.UI.WebControls.LinqDataSource>控制項會用來自動產生資料命令的 LINQ to SQL。 如需有關 LINQ to SQL 的詳細資訊，請參閱 < [LINQ to SQL](http://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655)。  
  
 當您要從記憶體中的資料集合中擷取資料時，您設定<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>類別，其中包含資料集合的屬性。 您設定<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性或欄位傳回的資料集合的屬性。 比方說，您可能會有類別，名為`Person`，其中包含一個名為屬性`FavoriteCities`所傳回的字串值陣列。 在此情況下，您設定<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性，以`Person`並設定<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性設`FavoriteCities`。  
  
 當您查詢資料庫時，您必須先建立代表資料庫與資料表的實體類別。 您可以使用[!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)]或 SqlMetal.exe 公用程式來產生這些類別。 然後，您設定<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性，以代表資料庫的類別，並設定<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性，以代表資料庫資料表的內容。  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a>作業的順序  
 <xref:System.Web.UI.WebControls.LinqDataSource>控制項適用於資料作業順序如下：  
  
1.  位置 （指定要傳回的資料記錄）。  
  
2.  Order By （排序）。  
  
3.  Group By （共用的值彙總的資料記錄） 中。  
  
4.  依 （排序分組的資料） 中的群組。  
  
5.  選取 （指定哪些欄位或屬性傳回）。  
  
6.  自動排序 （由使用者選取的屬性排序資料記錄）。  
  
7.  自動頁面 （擷取使用者所選取的資料記錄的子集）。  
  
 您可以將條件加入至<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>來篩選從查詢傳回的資料記錄的屬性。 如果<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>未設定屬性，<xref:System.Web.UI.WebControls.LinqDataSource>控制從資料物件擷取每一筆記錄。  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a>排序資料  
 您使用<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性來指定從傳回的資料，排序所依據的屬性名稱。  
  
> [!NOTE]
>  當您使用<xref:System.Web.UI.WebControls.LinqDataSource>用來控制[!INCLUDE[ss2k](~/includes/ss2k-md.md)]或[!INCLUDE[ssEW](~/includes/ssew-md.md)]並<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>屬性設定為`true`，您必須提供值，以在<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性。 根據預設，<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>屬性是`true`。 如果您將值指派給<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性，您必須也包含所有 identity 資料行在查詢中傳回的屬性清單中。  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a>分組資料  
 您使用<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性，以指定哪一個屬性用來合併具有相同值的資料記錄。 分組資料，您可以包含`Key`並`It`，以動態方式建立所在內容，在<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性。 `Key`屬性是用來將資料分組一個或多個屬性的值。 例如，如果您依屬性分組`Category`，則`Key`屬性會包含中的所有唯一值`Category`屬性。 `It`屬性參考的資料群組中的個別記錄的集合。 您可以反覆`It`屬性，以擷取分組作業中已合併的個別記錄。 例如，如果您依屬性分組`Category`，則`It`屬性包含所有共用常見值中的個別記錄`Category`屬性。  
  
 您使用<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>屬性來指定要用來排序群組的資料的屬性。 當您在群組資料，<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性會指定如何排序分組的資料內的個別記錄。  
  
 根據預設，<xref:System.Web.UI.WebControls.LinqDataSource>控制從資料物件擷取所有屬性的值。 您使用<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性來指定要傳回如果您想要使用 可用的屬性子集的屬性。 選取的作業會套用之後 Where、 Order By 和 Group By 作業。 因此，如果您在 Select 子句中建立的別名，別名無法使用。 在其他子句  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a>資料修改  
 您可以指定是否啟用資料修改，以利用<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>， <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>，和<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>屬性。 修改資料的使用者介面<xref:System.Web.UI.WebControls.LinqDataSource>控制項通常會提供透過資料繫結控制項，例如<xref:System.Web.UI.WebControls.DetailsView>控制項。 除了設定<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>， <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>，或<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>到`true`，啟用自動的資料修改所需的下列條件：  
  
-   <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性無法指派值。  
  
-   <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性無法指派值。  
  
-   指派給類別<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性必須衍生自<xref:System.Data.Linq.DataContext>。  
  
-   指派給屬性<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性必須衍生自<xref:System.Data.Linq.Table%601>。  
  
 您可以限制有兩種資料繫結控制項中所顯示的屬性。 您可以設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性的子集屬性，也可以定義資料繫結控制項的欄位加上<xref:System.Web.UI.WebControls.DataControlField>控制項。 不過，如果您將設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性，表示無法啟用自動更新、 插入和刪除作業。 如果您想要啟用自動的資料修改，當您使用的可用屬性子集，請勿設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性。 相反地，從資料物件擷取所有屬性，並管理要顯示哪些使用資料繫結控制項。 當您使用<xref:System.Web.UI.WebControls.DetailsView>控制項或<xref:System.Web.UI.WebControls.GridView>控制項，您也必須設定<xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>或是<xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>屬性，以`false`。 這可防止自動包括按鈕來編輯和刪除資料的資料繫結控制項。 不會顯示在資料繫結控制項中的任何值會儲存在檢視狀態。 它們不變時傳遞至資料來源執行資料更新。  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a>在執行階段的評估值  
 如果您有要在執行階段排序，評估值篩選，或群組值，您可以將參數加入至<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>， <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>， <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>，或<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>集合。  
  
 如果您想要指定預設值，您可以新增參數至<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>集合。  
  
 如果您想要檢查或修改值，執行資料作業之前，您可以處理<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>， <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>， <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>，或<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。 若要取消資料作業，或檢查您根據使用者輸入的資料類別中設定屬性時，所發生的驗證錯誤，您也可以處理這些事件。  
  
 若要在資料作業完成之後，請檢查值，處理<xref:System.Web.UI.WebControls.LinqDataSource.Deleted>， <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>， <xref:System.Web.UI.WebControls.LinqDataSource.Selected>，或<xref:System.Web.UI.WebControls.LinqDataSource.Updated>事件。  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a>使用預存程序  
 您使用<xref:System.Web.UI.WebControls.LinqDataSource>來擷取預存程序中的資料，藉由建立的事件處理常式的控制項<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。 在事件處理常式中，您呼叫方法表示預存程序的資料內容類別中，並將結果設<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>屬性<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>物件。 如果您想要啟用自動更新、 插入和刪除作業的資料，從方法傳回的型別必須符合在指定的型別<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性。 如需建立資料內容方法的詳細資訊，請參閱 <<c0> [ 如何： 對應至預存程序和函式 （O/R 設計工具） 建立 DataContext 方法](http://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a)。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>宣告式語法  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 下列範例所示<xref:System.Web.UI.WebControls.LinqDataSource>會從名為實體類別擷取資料的控制項`Products`。 實體類別已產生使用[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]或 SqlMetal.exe 公用程式。 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性設定為傳回有一個值的記錄`Price`大於 50 的屬性。 A<xref:System.Web.UI.WebControls.GridView>控制項繫結至<xref:System.Web.UI.WebControls.LinqDataSource>控制項來顯示資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 下列範例所示<xref:System.Web.UI.WebControls.LinqDataSource>控制項，可讓使用者更新、 刪除和插入資料來源中的記錄。 A<xref:System.Web.UI.WebControls.DetailsView>控制項繫結至<xref:System.Web.UI.WebControls.LinqDataSource>控制項，並可讓使用者查看和修改資料。 請注意，不含 SQL 命令，才能選取、 更新、 刪除或插入記錄。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 下列範例顯示的事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>所設定的資料物件的事件會根據在網頁中的值。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 下列範例所示<xref:System.Web.UI.WebControls.LinqDataSource>控制項設定的兩個資料行的群組。 `Key`屬性會參考具有兩個屬性的物件`ProductCategory`和`Color`。 所表示之物件`It`是已重新命名 （別名） `Products`。 已重新命名`Products`物件包含在群組中的個別記錄的集合。 每個執行個體包含所有資料行，從`Products`資料表。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 下列範例示範兩個<xref:System.Web.UI.WebControls.ListView>控制項顯示資料的<xref:System.Web.UI.WebControls.LinqDataSource>在上述範例中的控制項。 一<xref:System.Web.UI.WebControls.ListView>控制項會顯示群組的資料，以及其他<xref:System.Web.UI.WebControls.ListView>控制項會顯示個別產品屬於該群組的名稱。 巢狀的資料繫結控制項的<xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A>屬性設定為`Products`，這是別名`It`物件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateOrderByClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控制項是否會根據 <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" /> 集合中的值，動態建立 ORDER BY 子句。</summary>
        <value>
          <see langword="true" /> 如果<see cref="T:System.Web.UI.WebControls.LinqDataSource" />控制項會建立 Order By 子句，否則<see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您設定<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>屬性，以`true`，則<xref:System.Web.UI.WebControls.LinqDataSource>控制項會動態建立 Order By 子句中的值為基礎的<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>集合。 <xref:System.Web.UI.WebControls.LinqDataSource>控制項第一個參數所排序的資料，然後另外排序每個額外參數的資料。 參數包含`null`或 Order By 子句中不包含空值。  
  
 您未設定<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性時<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>設定為`true`，因為剖析器會動態建立 Order By 子句。 <xref:System.Web.UI.WebControls.LinqDataSource>控制項時擲回例外狀況<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>設為`true`而<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性會被指派值。  
  
   
  
## Examples  
 下列範例所示<xref:System.Web.UI.WebControls.LinqDataSource>用來控制<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>設定為`true`。 參數包含在<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>從選取的排序依據之屬性的資料名稱的使用者的集合<xref:System.Web.UI.WebControls.DropDownList>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateWhereClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控制項是否根據 <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> 集合中所定義的值動態地建立 Where 子句。</summary>
        <value>如果 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控制項要建立 Where 子句則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您設定<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>屬性，以`true`，則<xref:System.Web.UI.WebControls.LinqDataSource>控制項會動態建立 Where 子句中的參數<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合。 您將新增至每個參數<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合必須有其<xref:System.Web.UI.WebControls.Parameter.Name%2A>屬性設定為符合所查詢資料物件中的屬性的值。 自動產生子句會檢查是否在指定的值<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合等於資料物件中的相符屬性的值。 如果您提供多個參數，與邏輯連結參數`AND`作業。 參數包含`null`或空值不包含在 Where 子句。  
  
 自動產生<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>子句可以只測試是否相等，並可以連結參數只能搭配`AND`作業。 未設定<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>屬性，以`true`如果您必須新增不會測試是否相等的條件，或如果您有關聯的參數`OR`作業。 您可以完成這些工作，藉由設定<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>屬性，以`false`並加入中的預留位置<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性中每個參數<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合。 在 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性，與每個預留位置名稱前加上 @ 符號。  
  
 您未設定<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性時<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>屬性是`true`，因為剖析器會動態建立 Where 子句。 <xref:System.Web.UI.WebControls.LinqDataSource>控制項時擲回例外狀況<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>屬性是`true`而<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性會被指派值。  
  
   
  
## Examples  
 下列範例所示<xref:System.Web.UI.WebControls.LinqDataSource>用來控制<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>設定為`true`。 A<xref:System.Web.UI.WebControls.GridView>控制項繫結至<xref:System.Web.UI.WebControls.LinqDataSource>控制項來顯示從查詢傳回的資料。 A<xref:System.Web.UI.WebControls.DropDownList>也就是包含控制項填入三個值。 參數包含在<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>具有名稱設定為集合`Category,`會比對其中一個資料物件的屬性。 其<xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A>屬性設定為識別碼<xref:System.Web.UI.WebControls.DropDownList>控制項。 <xref:System.Web.UI.WebControls.LinqDataSource>控制項會自動建立<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>來篩選記錄的屬性，根據使用者從選取的值<xref:System.Web.UI.WebControls.DropDownList>控制項。 查詢會傳回記錄其`Category`屬性會比對使用者已從選取的值<xref:System.Web.UI.WebControls.DropDownList>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPage : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控制項是否支援在執行階段完整瀏覽資料的區段。</summary>
        <value>如果使用者可以分頁瀏覽資料，則為 <see langword="true" />；否則為 <see langword="false" />。 預設值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>屬性，以`true`若要啟用中的分頁<xref:System.Web.UI.WebControls.LinqDataSource>控制項。 若要讓使用者逐頁查看資料，連線提供介面，用於分頁的資料繫結控制項<xref:System.Web.UI.WebControls.LinqDataSource>控制項。 當<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>屬性設定為`true`，則<xref:System.Web.UI.WebControls.LinqDataSource>控制項擷取資料繫結控制項中的一個頁面足以記錄。 它會使用<xref:System.Linq.Enumerable.Skip%2A>和<xref:System.Linq.Enumerable.Take%2A>方法來擷取目前頁面的記錄。  
  
   
  
## Examples  
 下列範例所示<xref:System.Web.UI.WebControls.LinqDataSource>用來控制<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>屬性設定為`true`並<xref:System.Web.UI.WebControls.GridView>繫結至控制項<xref:System.Web.UI.WebControls.LinqDataSource>控制項。 <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A>的屬性<xref:System.Web.UI.WebControls.GridView>控制設為 `true`提供介面，讓使用者逐頁查看資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSort : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控制項是否支援在執行階段排序資料。</summary>
        <value>如果使用者可以排序資料，則為 <see langword="true" />；否則為 <see langword="false" />。 預設值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource>控制項支援兩種方法來排序資料。 您可以使用<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>若要啟用執行階段排序的屬性，或者您可以設定<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性可定義在設計階段的排序。  
  
 設定<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>屬性，以`true`以啟用排序<xref:System.Web.UI.WebControls.LinqDataSource>為基礎的排序運算式，從資料繫結控制項的控制項。 資料繫結控制項提供介面，讓使用者在執行階段選取用來排序的屬性。  
  
 您可以透過程式設計方式設定藉由設定傳回資料的順序<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>到用來排序屬性的屬性。 當<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性設定為屬性和<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>屬性是`true`，從資料繫結控制項的排序運算式會在運算式之後套用<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性。 因此，這會決定最終排序資料。  
  
   
  
## Examples  
 下列範例所示<xref:System.Web.UI.WebControls.LinqDataSource>用來控制<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>屬性設定為`true`並<xref:System.Web.UI.WebControls.GridView>繫結至控制項<xref:System.Web.UI.WebControls.LinqDataSource>控制項。 <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A>的屬性<xref:System.Web.UI.WebControls.GridView>控制設為 `true`提供介面，讓使用者排序資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberSignature Language="F#" Value="member this.ContextCreated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.ContextCreated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在建立內容型別物件的執行個體之後發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>來檢查內容型別物件，或檢查建立物件時引發的例外狀況的事件。 擷取內容型別物件，從<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>屬性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>與此事件相關聯的物件。 擷取從資料作業期間引發的例外狀況<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性。  
  
 內容型別物件在 select、 update、 insert 和刪除作業期間建立，並會在要求中重複使用。  
  
 沒有時不會引發此事件一次。 這是當您以程式設計方式設定<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>屬性的物件期間<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。 額外的條件時，不需要原始值儲存在檢視狀態或中的物件<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>屬性會實作<xref:System.Data.Linq.ITable>介面。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberSignature Language="F#" Value="member this.ContextCreating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " Usage="member this.ContextCreating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在建立內容型別物件的執行個體之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，<xref:System.Web.UI.WebControls.LinqDataSource>控制項會建立中所指定類型的執行個體<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性。 <xref:System.Web.UI.WebControls.LinqDataSource>控制呼叫來建立物件的執行個體的資料內容物件的預設建構函式。 可能是您必須使用非預設建構函式，或您必須建立不同的物件中所指定從<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性。 在此情況下，您必須處理<xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating>事件，並以手動方式建立資料內容物件。  
  
 選取、 更新、 插入和刪除作業期間，會建立內容型別物件。  
  
 沒有時不會引發此事件一次。 這是當您以程式設計方式設定<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>屬性中的事件處理常式的物件<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。 額外的條件時，不需要原始值儲存在檢視狀態或中的物件<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>屬性會實作<xref:System.Data.Linq.ITable>介面。  
  
   
  
## Examples  
 下列範例示範如何使用非預設建構函式期間建立的資料內容物件<xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating>事件。 此程式碼指派到物件<xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A>屬性。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberSignature Language="F#" Value="member this.ContextDisposing : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " Usage="member this.ContextDisposing : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在處置內容型別物件之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您處理<xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing>手動處置物件，或執行清理之前終結物件的特定物件的事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextTypeName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定型別的名稱，該型別所包含之屬性的值具有您要擷取的資料。</summary>
        <value>要從中擷取資料的類別名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您使用<xref:System.Web.UI.WebControls.LinqDataSource>控制項從記憶體中的資料集合或資料庫擷取資料，您必須指定兩個屬性。 第一個是代表資料來源的資料內容類別。 第二個是包含資料的資料內容類別中的屬性。 您設定<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性的名稱之資料內容類別，以及設定<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>資料集合，其中包含資料的屬性。  
  
 例如，當您從資料庫擷取資料，設定<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性，以代表資料庫類別的名稱。 也設定<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性，以代表資料庫中的資料表的內容。 若要從資料庫產生的類別，使用[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]或 SqlMetal.exe 公用程式，以自動產生這些類別。  
  
 當您從記憶體中的資料集合，例如陣列擷取資料時，設定<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>包含陣列屬性的類別名稱的屬性。 然後設定<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性，以取得陣列的屬性。  
  
 若要啟用自動更新，插入或刪除作業，透過<xref:System.Web.UI.WebControls.LinqDataSource>控制項，指派給類別<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性必須衍生自<xref:System.Data.Linq.DataContext>。 此外，將屬性指派給<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性必須衍生自<xref:System.Data.Linq.Table%601>。 如果您不需要啟用自動更新、 插入或刪除作業，您可以指派任何類型的類別名稱<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性。  
  
 如需有關如何從類別的執行個體中選取資料的資訊，請參閱<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>屬性。  
  
   
  
## Examples  
 下列範例示範如何設定<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性，以包含字串陣列的類別。 它也會示範如何將屬性設定為類別 (所產生[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)])，表示資料庫。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 名為的類別`ExampleDataContext`，表示資料庫資料表不會顯示在此範例中。 此範例正常運作，您必須建立這個類別加上具名的 Example.dbml 並拖曳資料表名為到電影的 LINQ 到 SQL 類別[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]。 類別，名為`ExampleDataContext`屬性，名為`Movies`產生。  
  
 下列範例顯示名為的類別`MovieLibrary`，用來參考之<xref:System.Web.UI.WebControls.LinqDataSource>控制項。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberSignature Language="F#" Value="override this.CreateQueryableView : unit -&gt; System.Web.UI.WebControls.QueryableDataSourceView" Usage="linqDataSource.CreateQueryableView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回可查詢的檢視。</summary>
        <returns>可查詢的檢視。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberSignature Language="F#" Value="abstract member CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView&#xA;override this.CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView" Usage="linqDataSource.CreateView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立與這個控制項關聯之 <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> 類別的新執行個體。</summary>
        <returns>做為資料繫結控制項介面的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要提供自訂檢視，您可以覆寫這個方法在衍生類別中。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Delete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">要刪除之資料錄的資料列索引鍵值。</param>
        <param name="oldValues">評估以偵測資料衝突的資料列值。</param>
        <summary>執行刪除作業。</summary>
        <returns>刪除作業所影響的資料錄數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，您就不必呼叫<xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>從您的程式碼的方法。 當您使用<xref:System.Web.UI.WebControls.LinqDataSource>與資料繫結控制項，將資料繫結控制項的控制項將會自動呼叫<xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>方法，當使用者採取動作來刪除記錄。 明確地呼叫<xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>方法，當您想要建立自己的程序，刪除資料。 例如，您可以呼叫<xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A>根據外的資料繫結控制項的事件的方法，當您想要刪除的記錄。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Deleted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在刪除作業完成時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.LinqDataSource.Deleted>事件攔截任何例外狀況，從刪除作業，或在作業完成之後，請檢查輸出參數。 您可以擷取輸出參數，從<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>傳遞至事件處理常式的物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 類別不使用這個屬性。</summary>
        <value>參數的集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " Usage="member this.Deleting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在刪除作業之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>事件，以便驗證被刪除，以檢查是否有從資料類別，來變更值，以刪除作業之前，或取消刪除作業的資料驗證錯誤的物件。 <xref:System.Web.UI.WebControls.LinqDataSource>控制傳遞<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>物件的事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>事件。 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>物件包含的資料將會被刪除，並可讓您取消刪除作業。 如果資料類別會擲回<xref:System.Web.UI.WebControls.LinqDataSourceValidationException>例外狀況<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>物件包含在該例外狀況<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A>屬性。  
  
 如果事件處理常式中擲回例外狀況<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>事件，您必須處理該事件處理常式中的例外狀況。 例外狀況不會傳遞至事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Deleted>事件 (透過<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>物件)。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性包含之後，會擲回的例外狀況<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>事件。  
  
   
  
## Examples  
 下列範例顯示的事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>事件。 程式碼取消刪除作業中的屬性為基礎<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A>屬性和值，以從網頁。 在範例中，當`OnSale`屬性設定為`true`，使用者必須選取<xref:System.Web.UI.WebControls.CheckBox>確認應該刪除記錄的控制項。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDelete : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示是否可以透過 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控制項刪除資料錄。</summary>
        <value>如果已啟用自動刪除作業則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>屬性，以`true`當您想讓使用者可以刪除資料錄透過<xref:System.Web.UI.WebControls.LinqDataSource>控制項。 當<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>已`true`，則<xref:System.Web.UI.WebControls.LinqDataSource>控制項用來自動建立命令以刪除資料的 LINQ to SQL。 您必須包含的介面可讓使用者選取的記錄，若要刪除，例如<xref:System.Web.UI.WebControls.DetailsView>控制項。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource>控制項不支援自動刪除作業時<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性或<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性設定。 在此情況下，<xref:System.Web.UI.WebControls.LinqDataSource>控制項會擲回例外狀況，如果嘗試刪除作業。  
  
   
  
## Examples  
 下列範例所示<xref:System.Web.UI.WebControls.LinqDataSource>控制項，其<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>設定為`true`。 A<xref:System.Web.UI.WebControls.DetailsView>控制項顯示資料，並建立可讓使用者刪除的資料記錄的按鈕。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableInsert : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示是否可以透過 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控制項插入資料錄。</summary>
        <value>如果已啟用自動插入作業則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>屬性，以`true`當您想讓使用者能夠插入新的資料記錄，透過<xref:System.Web.UI.WebControls.LinqDataSource>控制項。 當<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>是`true`，則<xref:System.Web.UI.WebControls.LinqDataSource>控制項用來自動建立命令以插入資料的 LINQ to SQL。 您必須包含的介面可讓使用者插入新的記錄，例如<xref:System.Web.UI.WebControls.DetailsView>控制項。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource>控制項不支援自動插入作業時<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性或<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性設定。 在此情況下，<xref:System.Web.UI.WebControls.LinqDataSource>控制項會擲回例外狀況，如果嘗試插入作業。  
  
   
  
## Examples  
 下列範例所示<xref:System.Web.UI.WebControls.LinqDataSource>控制項，其<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>設定為`true`。 A<xref:System.Web.UI.WebControls.DetailsView>控制項顯示的資料，並顯示一個按鈕，切換插入的模式，使用者可建立並儲存新記錄的控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableObjectTracking : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示是否追蹤資料內容物件的變更。</summary>
        <value>如果要追蹤資料內容物件的變更，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A>從 LINQ 到 SQL 資料內容物件中選取資料時，才會使用屬性。  
  
 當您與唯讀資料互動時，設定<xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A>屬性設`false`改善效能，因為資料不會快取來判斷是否已變更。 不過，它也會停用延後的查詢執行。 此屬性必須設為`true`如果您想要使用延後的查詢執行。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableUpdate : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示是否可以透過 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 控制項更新資料錄。</summary>
        <value>如果已啟用自動更新作業則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>屬性，以`true`當您想讓使用者能夠使用更新資料錄<xref:System.Web.UI.WebControls.LinqDataSource>控制項。 當<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>已`true`，則<xref:System.Web.UI.WebControls.LinqDataSource>控制項用來自動建立命令以更新資料的 LINQ to SQL。 您必須包含的介面可讓使用者更新一筆記錄，例如<xref:System.Web.UI.WebControls.DetailsView>控制項。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource>控制項不支援自動更新作業時<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性或<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性設定。 在此情況下，<xref:System.Web.UI.WebControls.LinqDataSource>控制項會擲回例外狀況，如果嘗試更新作業。  
  
   
  
## Examples  
 下列範例所示<xref:System.Web.UI.WebControls.LinqDataSource>控制項，其<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>設定為`true`。 A<xref:System.Web.UI.WebControls.DetailsView>控制項顯示的資料及建立讓使用者得以更新資料錄的按鈕。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="linqDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="linqDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值指定用於對擷取的資料進行分組的屬性。</summary>
        <value>字串，用來建立 Group By 子句。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您使用<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性來指定合併具有相同值的資料記錄會使用哪些屬性。 例如，如果您設定<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性，以`Name`中的所有記錄的查詢具有相同`Name`屬性值傳回成單一彙總記錄。  
  
 您可以指派多個屬性<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>住中的所有屬性的屬性`new`函式，並使用逗號分隔每個屬性。 例如，若依屬性群組要`Name`，然後`Category`，將<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性設`new(Name, Category)`。  
  
 屬性中用來分組的值會傳回產生的屬性，名為透過`Key`。 您包含`Key`屬性中的<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>擷取群組的值的屬性。 您可以設定`Key`屬性，以使用別名`As`關鍵字，但您不需要使用別名。 例如，您可能會設定<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性至屬性，名為`Category`。 您可以擷取從合併的值`Category`屬性，藉由設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性設`new(Key As ProductCategory)`。  
  
 您可以存取在群組中的個別記錄包括`It`屬性中的<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性。 `It`屬性包含的共用中的群組屬性的值的記錄集合。 您可以反覆`It`屬性來擷取個別的記錄。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性通常會搭配彙總方法。 您可以使用下列彙總方法：  
  
-   `Count()`  
  
-   `Average(` *資料行* `)`  
  
-   `Sum(` *資料行* `)`  
  
-   `Max(` *資料行* `)`  
  
-   `Min(` *資料行* `)`  
  
-   `Where(` *條件* `)`  
  
-   `Any()`  
  
-   `All(` *條件* `)`  
  
 如需詳細資訊，請參閱 < [NIB: LinqDataSource Web Server Control Overview](http://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136)並[如何： 群組和彙總的資料使用 LinqDataSource 控制項](http://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af)。  
  
   
  
## Examples  
 下列範例所示<xref:System.Web.UI.WebControls.LinqDataSource>屬性，名為依據群組傳回的資料控制項`Category`。 它會傳回共用的值，並計算平均的價格為群組的記錄。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 下列範例所示<xref:System.Web.UI.WebControls.LinqDataSource>控制項設定的兩個資料行的群組。 `Key`屬性會參考具有兩個屬性的物件`ProductCategory`和`Color`。 所表示之物件`It`已重新命名`Products`。 已重新命名`Products`物件包含的群組中的個別記錄集合，而每個執行個體包含從 Products 資料表的所有資料行。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 下列範例示範兩個<xref:System.Web.UI.WebControls.ListView>來顯示將資料從控制項<xref:System.Web.UI.WebControls.LinqDataSource>在上述範例中的控制項。 一<xref:System.Web.UI.WebControls.ListView>控制項會顯示群組的資料和其他<xref:System.Web.UI.WebControls.ListView>控制項會顯示個別產品屬於該群組的名稱。 巢狀的資料繫結控制項的<xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A>屬性設定為`Products`，這是別名`It`物件。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GroupByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用於建立 Group By 子句的參數集合。</summary>
        <value>用來建立 Group By 子句的參數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource>控制項使用中的參數<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>集合，以在執行階段建立 Group By 子句。 通常您不會使用<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>來分組資料的集合。 相反地，您可以使用<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性。 您使用<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>集合時，才在 Group By 子句中的值必須在執行階段設定，以及該值不是屬性名稱。 例如，使用<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>集合來分組資料根據`LastName`資料記錄中的屬性值等於使用者所提供的值。  
  
 如果您要依屬性分組資料，而且該屬性不需要在執行階段進行設定，您可以定義中的 [群組] 屬性<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性。 例如，若要從資料庫資料表中傳回的值分組`LastName`，將<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>至"LastName"，不含任何參數。 如果您想要動態群組資料屬性，建立的事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件和自訂<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>所需的屬性。  
  
 您無法指派屬性的名稱做為參數的值<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>集合。 新增參數<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>集合，當您想要新增條件，以<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>必須在執行階段設定的屬性。  
  
 若要設定值，在<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>集合中，您指派給每個參數的名稱，然後再新增內某個預留位置<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性的具名參數。 在 Group By 子句中前, 加上每一參數名稱以 @ 符號。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="member this.Insert : System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Insert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">要插入資料來源的資料列值。</param>
        <summary>執行插入作業。</summary>
        <returns>插入作業所影響的資料列數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，您就不必呼叫<xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>從您的程式碼的方法。 資料繫結控制項將會自動呼叫<xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>方法，當使用者採取動作來插入新的記錄。 明確地呼叫<xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>方法，當您想要建立自己的程序插入資料。  
  
   
  
## Examples  
 下列範例示範如何以程式設計方式於使用者按一下按鈕之後，資料來源中插入新的記錄。 程式碼會傳遞<xref:System.Collections.Specialized.ListDictionary>物件，其中包含預設值來<xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A>方法。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 下列範例顯示上一個範例的標記。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Inserted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在插入作業完成時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>事件攔截任何例外狀況，從 插入作業，或在插入作業完成之後，請檢查的值。 您可以擷取新的值，透過<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>傳遞至事件處理常式的物件。 例如，您可以使用<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>擷取新的資料記錄的資料庫所產生的識別屬性的物件。  
  
   
  
## Examples  
 下列範例示範如何建立事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>檢查例外狀況，並擷取新資料錄的識別屬性的事件。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " Usage="member this.Inserting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在插入作業之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>事件，以便驗證要插入、 檢查來自資料類別，並將值插入作業之前，變更或取消插入作業的資料驗證錯誤的物件。 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>物件傳遞至事件處理常式，此事件報告功能包含在資料來源中插入新的物件。  
  
 如果插入作業期間，發生驗證錯誤<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>物件包含的資料類別所擲回驗證例外狀況。 如果要插入的值不符合在資料類別中，屬性的型別，或如果它未通過自訂驗證檢查，就會發生驗證錯誤。 中的事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>事件，您可以擷取驗證例外狀況並採取適當動作。  
  
 如果事件處理常式中擲回例外狀況<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>事件，您必須處理該事件處理常式中的例外狀況。 例外狀況不會傳遞至事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>事件 (透過<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>物件)。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性包含之後，會擲回的例外狀況<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>事件。  
  
   
  
## Examples  
 下列範例顯示的事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>修改資料之前插入作業的事件。 從物件<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A>屬性會轉換名為的型別`Product`。 `DateModified`屬性`Product`物件設定為目前的日期和時間。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 下列範例顯示的事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>擷取驗證例外狀況的事件。  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 前一個範例會擷取驗證例外狀況。 如果值不符合屬性類型，可能會擲回例外狀況。 它可能也會擲回類似下列範例中的自訂檢查。 `OnAgeChanging`方法會檢查數目`Age`屬性不是負數。  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得插入作業期間所使用的參數集合。</summary>
        <value>插入作業期間所使用的參數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常會在插入作業所需的值會傳遞至<xref:System.Web.UI.WebControls.LinqDataSource>資料繫結控制項的控制項。 插入參數，當您想要提供的預設值或定義是否將空的值，您指定`null`。 您不必針對每個值插入，僅為使用者未提供值時，必須處理的值提供的參數。  
  
 您在中提供的值<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>集合僅適用於使用資料來源中定義的但未繫結中的資料控制項欄位。 例如，假設資料庫資料表有資料行名稱、 地址和郵遞區號，名為但<xref:System.Web.UI.WebControls.ListView>繫結至資料表的控制項繫結只以名稱和地址欄位。 中的值<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>集合將只用於 [郵遞區號] 欄位。 它們不會用於名稱和地址 欄位。 這是，則為 true，即使那些欄位輸入任何值。 如果資料中的所有欄位的資料繫結控制項的自動產生欄位來源，從任何值<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>將用於集合。  
  
   
  
## Examples  
 下列範例所示<xref:System.Web.UI.WebControls.LinqDataSource>控制項以提供預設值中的參數<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>集合。 如果使用者未提供的值`Category`屬性，參數所提供的預設值儲存在資料庫中。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="linqDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="linqDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">事件資料。</param>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 物件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUnload : EventArgs -&gt; unit&#xA;override this.OnUnload : EventArgs -&gt; unit" Usage="linqDataSource.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" /> 物件。</param>
        <summary>引發 <see cref="E:System.Web.UI.Control.Unload" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值指定用於對擷取之資料進行排序的欄位。</summary>
        <value>字串，用來建立 Order By 子句。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您使用<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性來指定要用來排序傳回的資料中的哪些屬性。 排序資料的屬性必須存在於原始資料來源，但它並沒有包含在<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性。 您可以加上空格並`Ascending`， `ASC`， `Descending`，或`DESC`中的屬性<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>字串來指定如何傳回已排序的資料。  
  
 您可以提供多個屬性在<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>使用逗號分隔每個屬性的屬性。 比方說，要依具名的屬性`LastName`並`FirstName`，將<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>"LastName、 FirstName 」 的屬性。  
  
> [!NOTE]
>  當您使用<xref:System.Web.UI.WebControls.LinqDataSource>用來控制[!INCLUDE[ss2k](~/includes/ss2k-md.md)]或[!INCLUDE[ssEW](~/includes/ssew-md.md)]並<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>屬性設定為`true`，您必須提供值，以在<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性。 根據預設，<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>屬性是`true`。 如果您將值指派給<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性，您必須也包含所有 identity 資料行在查詢中傳回的屬性清單中。  
  
 如果<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>屬性設定為`true`，在資料繫結控制項可以將排序運算式，以傳遞<xref:System.Web.UI.WebControls.LinqDataSource>控制項在執行階段。 <xref:System.Web.UI.WebControls.LinqDataSource>可控制在套用之後，會套用從資料繫結控制項的排序運算式<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性。 因此，會傳回資料的排序運算式根據從資料繫結控制項。  
  
   
  
## Examples  
 下列範例會傳回以反向字母順序，根據值的資料`Category`屬性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用於建立 Order By 子句的參數集合。</summary>
        <value>用於建立 Order By 子句的參數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource>控制項使用中的參數<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>集合，以在執行階段建立 Order By 子句。 您的設定通常<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>屬性，以`true`當您將參數加入至<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>集合。 當<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>屬性設定為`true`，在每個參數<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>集合加入 Order By 子句中指定的序列中<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>集合。 當<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>屬性是`true`，因為它們會依序套用，而且不會對應到預留位置顯示為沒有參數。  
  
 如果您沒有在 Order By 子句中的執行階段設定值，您不必使用<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>集合。 您可以定義要用於排序的資料中的欄位<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性。 例如，若要從資料庫資料表中傳回值依排序`LastName`，將<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>至"LastName"，不含任何參數。  
  
 您可以在 設定參數<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>集合中預留位置的參數搭<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性，但這種方法具有有限的應用程式。 當您使用這種方法中的參數<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>集合無法表示資料行名稱。 您可以將參數設定值，然後比較該數值到屬性中的值。 例如，您可以排序依據屬性中的值是否小於參數所表示的執行階段值的資料。  
  
   
  
## Examples  
 下列範例顯示將 <xref:System.Web.UI.WebControls.LinqDataSource> 屬性設定為 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 的 `true` 控制項。 參數包含在<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>從選取的排序依據之屬性的資料名稱的使用者的集合<xref:System.Web.UI.WebControls.DropDownList>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用於排序分組資料的欄位。</summary>
        <value>字串，用來建立 Order Groups By 子句。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您使用<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>屬性來指定如何排序群組的資料。 例如，您可以依分組`CategoryID`屬性，然後排序每個類別目錄識別碼分組的平均`Price`屬性。  
  
 您可以設定<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>屬性只有在已分組的資料時。 如果您設定<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>屬性未設定<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性，<xref:System.Web.UI.WebControls.LinqDataSource>控制項會擲回例外狀況。  
  
 用來排序資料的屬性必須是此屬性，用來分組資料或在群組資料的彙總函式的結果。 若要指定資料的排序方式，加入一個空格和"Ascending"、"ASC"、 「 遞減 」 或"DESC"的字串中的屬性名稱<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>字串。  
  
 您可以指定多個屬性在<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>屬性。 使用逗號分隔每個屬性。  
  
   
  
## Examples  
 下列範例顯示如何群組資料的使用兩個屬性，以及如何使用其中一個屬性排序分組的資料。 名為資料表中的資料`Products`藉由使用名為的屬性分組`CategoryID`和`Discontinued`。 分組的資料會依照`CategoryID`屬性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 下列範例會示範如何用來分組資料的屬性，以及如何排序它所依據的彙總函式的結果。 將資料從`Products`資料表會依使用`CategoryID`屬性。 排序依據的平均值`UnitPrice`每個群組內的屬性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用來建立 Order Groups By 子句的參數集合。</summary>
        <value>用來建立 Order Groups By 子句的參數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource>控制項使用中的參數<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>來建立 Order Groups By 子句在執行階段的集合。  
  
 您新增值以<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>只有當您必須在 Order Groups By 子句中的執行階段設定值的集合。 您可以定義用來排序資料所使用的欄位<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>屬性。  
  
 您可以在 設定參數<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>集合中預留位置的參數搭<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>屬性。 不過，當您使用這種方法中的參數<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>集合無法表示資料行名稱，還必須有值。 您可以將參數設定值，然後比較該屬性的值。 例如，您可以排序依據屬性中的值是否小於參數所表示的執行階段值的資料。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="linqDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Select : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定屬性以及擷取之資料中包含的計算值。</summary>
        <value>用於建立 Select 子句的字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您未設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性，<xref:System.Web.UI.WebControls.LinqDataSource>控制從資料物件擷取所有的屬性 （資料行）。 您使用<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性從物件擷取屬性的子集，或擷取資料時，計算新值。  
  
 您指定要擷取所設定的屬性<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>您想要在傳回的資料中包含的屬性名稱的屬性。  
  
 如果您從資料物件，擷取屬性的子集<xref:System.Web.UI.WebControls.LinqDataSource>控制項會動態建立類別，其中包含您在中指定的屬性<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性。 如果您計算都不是資料物件中的屬性的屬性，也會動態建立類別。 在這些情況下，從查詢傳回的物件不是類別中所指定的執行個體<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性。 相反地，您必須使用`new`方法中的<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>表示新的類別從查詢傳回的屬性。 例如，若要只傳回`FirstName`並`LastName`屬性的物件，包含多個這些屬性，設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性設`new(FirstName, LastName)`。 <xref:System.Web.UI.WebControls.LinqDataSource>控制項要以動態方式建立新的類別中所指定`new`方法。  
  
 您可以使用`As`關鍵字來將別名指派給選取的值。 如果您指派別名時，您必須包含中的別名屬性`new`方法。 繫結至結果的任何資料繫結控制項<xref:System.Web.UI.WebControls.LinqDataSource>控制項必須由別名所參考屬性。 比方說，如果您設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性，以`new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`，將資料繫結控制項可以存取兩個屬性，`SalesRegion`和`RevenueThousands`。  
  
 您使用`new`函式中<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>根據條件的屬性如下表所示。  
  
|選用版|使用新的|範例|  
|------------|----------------|-------------|  
|單一屬性。|`new` 不需要。|`Select="Category"`|  
|多個屬性。|`new` 所需。|`Select="new(Cateogry, Name)"`|  
|單一或多個有別名的屬性。|`new` 所需。|`Select="new(Category As CategoryGroup)"`|  
  
 如果您想要啟用自動的資料修改，但不是想顯示從資料物件的所有屬性，請勿設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性。 相反地，管理透過資料繫結控制項顯示。 當您使用<xref:System.Web.UI.WebControls.DetailsView>控制項或<xref:System.Web.UI.WebControls.GridView>控制項，您也必須設定<xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>或<xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>屬性設`false`。 不會顯示在資料繫結控制項中的任何值會儲存在檢視狀態。 它們不變時傳遞至資料來源執行資料更新。  
  
 分組資料的查詢中，您可以包含在彙總方法<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性。 您可以使用下列彙總方法：  
  
-   `Count()`  
  
-   `Average(` *資料行* `)`  
  
-   `Sum(` *資料行* `)`  
  
-   `Max(` *資料行* `)`  
  
-   `Min(` *資料行* `)`  
  
-   `Where(` *條件* `)`  
  
-   `Any()`  
  
-   `All(` *條件* `)`  
  
 如需詳細資訊，請參閱 < [NIB: LinqDataSource Web Server Control Overview](http://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136)並[如何： 群組和彙總的資料使用 LinqDataSource 控制項](http://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af)。  
  
 分組資料，您可以包含`Key`並`It`，以動態方式建立所在內容，在<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性。 `Key`屬性是用來將資料分組一個或多個屬性的值。 例如，如果您依屬性分組`Category`，則`Key`屬性會包含在每個唯一值`Category`屬性。 `It`屬性參考的資料群組中的個別記錄的集合。 您可以反覆`It`屬性，以擷取分組作業中已合併的個別記錄。 例如，如果您依屬性分組`Category`，則`It`屬性包含所有共用常見值中的個別記錄`Category`屬性。  
  
 如果您納入`It`中的關鍵字<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性將資料分組時，您必須將指派的別名`It`關鍵字。 <xref:System.Web.UI.WebControls.LinqDataSource>控制項將會擲回例外狀況，如果`It`沒有別名。 您可以指派至別名`Key`關鍵字，但這並非必要。  
  
   
  
## Examples  
 下列範例示範如何設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>資料物件中的屬性子集的屬性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 下列範例顯示如何擷取已用來分組資料的屬性中的值，以及擷取群組的資料錄的平均值。 `Key`關鍵字包含曾經用於分組資料的屬性。 在此範例中，`Key`將包含共用的值從`ProductCategory`屬性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Selected : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在資料擷取作業完成時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.LinqDataSource.Selected>攔截任何例外狀況，從資料擷取作業，或擷取作業完成之後，請檢查資料物件的事件。 物件是可從<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>傳遞至事件處理常式的物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " Usage="member this.Selecting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在資料擷取作業之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件，執行下列工作：  
  
-   修改的資料擷取的參數。  
  
-   以程式設計方式產生的查詢。  
  
-   修改用於排序或分頁的值。  
  
-   執行自訂排序或分頁。  
  
-   取消資料擷取作業。  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>本項目中包含資料擷取作業的參數傳遞至事件處理常式的物件。 您可以修改中的參數<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件處理常式之前執行的查詢，或您可以建立新的結果集，並將其指派給<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>屬性。  
  
 您可以實作自訂的排序或分頁處理常式中，針對此事件可能會受到繫結至控制項的能力<xref:System.Web.UI.WebControls.LinqDataSource>。 例如，當資料行標頭<xref:System.Web.UI.WebControls.GridView>按一下控制項時，控制項就會執行自動排序這可能會覆寫任何排序您建立在事件處理常式。  
  
 如果事件處理常式中擲回例外狀況<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件，您必須處理該事件處理常式中的例外狀況。 例外狀況不會傳遞至事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Selected>事件 (透過<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>物件)。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性包含之後，會擲回的例外狀況<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。  
  
   
  
## Examples  
 下列範例顯示的事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。 處理常式會建立查詢來擷取值，從網頁中的字串值的陣列。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 下列範例示範如何指派<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>方法，表示預存程序傳回之物件的屬性。  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得擷取資料作業期間所使用的參數集合。</summary>
        <value>用於建立 Select 子句的參數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource>控制項使用中的參數<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>在執行階段建立 Select 子句的集合。 新增參數<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>當您想要在 Select 子句中使用執行階段值的集合。 比方說，您可以在其中加入參數來<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>來代表使用者的設定檔中的屬性集合。 您接著可以來計算新的值從資料來源使用該屬性和值。  
  
 如果您沒有在 Select 子句中的執行階段設定值，您不必使用<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>集合。 您可以定義要擷取的屬性<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性。 例如，若要傳回`FirstName`並`LastName`值從資料庫資料表時，設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>"Firstname，LastName"未包含任何參數。  
  
 若要設定值，在<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>集合，您可以加入內某個預留位置<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>為具名參數的屬性。 在 Select 子句中前, 加上每一參數名稱以 @ 符號。  
  
 您無法使用中的參數<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>來表示屬性名稱的集合。 若要以動態方式設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>的屬性名稱的屬性建立的事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件和自訂<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>所需的屬性。  
  
   
  
## Examples  
 下列範例示範如何使用使用者提供的值來計算傳回的資料中的值。 使用者可以在文字方塊中的製造天數表示輸入的值。 該值除以代表天來製造產品的數目的資料庫中的值。 傳回的值，表示在指定天數期間可以製造的產品。 使用者的輸入包含在 Select 命令，透過<xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A>集合。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreOriginalValuesInViewState : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示資料來源的資料是否應在檢視狀態中進行儲存，以確定在更新或刪除資料前，資料未由另一個處理序變更。</summary>
        <value>如果在檢視狀態中儲存值則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，當更新和刪除作業已啟用，<xref:System.Web.UI.WebControls.LinqDataSource>控制項檢視狀態的所有記錄會儲存原始值。 <xref:System.Web.UI.WebControls.LinqDataSource>控制項儲存的所有主索引鍵的值，以及所有屬性未都標記為`UpdateCheck.Never`在`Column`屬性。 您設定`UpdateCheck`的屬性`Column`屬性中[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]。  
  
 LINQ to SQL 會更新或刪除資料之前，它會檢查在檢視狀態資料來源中的目前值的值。 如果值不相符，已變更的資料來源的記錄。 在此情況下，LINQ to SQL 會擲回例外狀況並不繼續更新或刪除作業。 如需有關 LINQ to SQL 的詳細資訊，請參閱 < [LINQ to SQL](http://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655)。  
  
 儲存原始值在檢視狀態可能會造成頁面大小變得不必要地大，而且可以公開給惡意使用者的機密資料。 您可以停用儲存檢視狀態中的值，藉由設定<xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A>屬性設`false`。 如果您這麼做，您必須提供自己的方式，以確定資料已無法變更。 如果您設定<xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A>屬性設`false`，原始的值不會保存在資料繫結控制項的檢視狀態。 在此情況下，LINQ to SQL 無法驗證資料的完整性。 LINQ to SQL 將會擲回例外狀況，指出資料衝突，即使資料來源中的資料實際變更。  
  
 如果基礎資料來源包含時間戳記欄位，就會自動更新在更新期間，您可以只將該值儲存在檢視狀態。 在此情況下，實體類別中的時間戳記屬性設為`IsVersion=true`和所有屬性都會都設為`UpdateCheck.Never`。 因為每次變更時，該記錄中的資料，時間戳記欄位會自動更新資料庫，LINQ to SQL 會決定從該值如果資料已變更。 這有助於減少的檢視狀態大小，並會公開任何機密資料。 LINQ to SQL 會檢查資料一致性藉由在檢視中比較時間戳記值與資料庫中的時間戳記值的狀態。 如需詳細資訊，請參閱 <<c0> [ 逐步解說： 使用時間戳記與檢查資料完整性 LinqDataSource 控制項](http://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System.Web.DynamicData.IDynamicDataSource.ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如需這個成員的說明，請參閱 <see cref="T:System.Web.DynamicData.IDynamicDataSource" />。</summary>
        <value>與此類別關聯的型別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Web.UI.WebControls.LinqDataSource> 執行個體轉換成 <xref:System.Web.DynamicData.IDynamicDataSource> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System.Web.DynamicData.IDynamicDataSource.EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如需這個成員的說明，請參閱 <see cref="T:System.Web.DynamicData.IDynamicDataSource" />。</summary>
        <value>實體的名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Web.UI.WebControls.LinqDataSource> 執行個體轉換成 <xref:System.Web.DynamicData.IDynamicDataSource> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TableName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料內容類別中屬性或欄位的名稱，這個類別表示資料集合。</summary>
        <value>包含屬性名稱的字串，該屬性包含資料集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性名稱的屬性或欄位，表示您想要擷取的資料。 當您要連接至資料庫資料表中時，屬性的名稱通常是資料表的名稱相同。 當您要連接到記憶體中的資料集合時，設定<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性的屬性或欄位傳回的資料集合的名稱。  
  
 您可以指派此屬性會傳回任何類型，<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>擷取作業的屬性。 如果由屬性所表示之物件不會實作<xref:System.Collections.IEnumerable>，則<xref:System.Web.UI.WebControls.LinqDataSource>控制項將會自動包裝物件的執行個體中<xref:System.Collections.IEnumerable>物件。  
  
 若要啟用自動更新、 插入或刪除作業，就會指派給類別<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性必須衍生自<xref:System.Data.Linq.DataContext>，並將屬性指派給<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性必須衍生自<xref:System.Data.Linq.Table%601>。  
  
 如需有關如何從類別的執行個體中選取資料的資訊，請參閱<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>屬性。  
  
   
  
## Examples  
 下列範例示範兩個<xref:System.Web.UI.WebControls.LinqDataSource>控制項。 其中一<xref:System.Web.UI.WebControls.LinqDataSource>控制項，<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性設定為類別中的屬性。 該屬性會傳回字串陣列。 在另<xref:System.Web.UI.WebControls.LinqDataSource>控制項，<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性設定為表示資料庫資料表的屬性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 名為的類別`ExampleDataContext`，表示資料庫資料表不會顯示在此範例中。 此範例正常運作，您必須建立這個類別加入 LINQ to SQL 類別具名的 Example.dbml 並拖曳資料表名為影片到[!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]。 類別，名為`ExampleDataContext`屬性，名為`Movies`產生。  
  
 下列範例顯示名為的類別`MovieLibrary`，用來參考之<xref:System.Web.UI.WebControls.LinqDataSource>控制項。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="linqDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Update (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">要更新之資料錄的資料列索引鍵值。</param>
        <param name="values">要在資料來源中更新的資料列值。</param>
        <param name="oldValues">評估以偵測資料衝突的資料列值。</param>
        <summary>執行更新作業。</summary>
        <returns>更新作業所影響的資料錄數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，您就不必呼叫<xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>從您的程式碼的方法。 資料繫結控制項將會自動呼叫<xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>方法，當使用者採取動作來更新記錄。 明確地呼叫<xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>方法，當您想要建立自己的程序來更新資料。  
  
   
  
## Examples  
 下列範例示範如何在使用者按一下按鈕之後，以程式設計方式更新資料來源中的記錄。 程式碼會傳遞<xref:System.Collections.Specialized.ListDictionary>物件，其中包含金鑰值，<xref:System.Collections.Specialized.ListDictionary>物件，其中包含原始的值，以及<xref:System.Collections.Specialized.ListDictionary>物件，其中包含新的值來<xref:System.Web.UI.WebControls.LinqDataSource.Update%2A>方法。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 下列範例顯示上一個範例的標記。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Updated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在更新作業完成時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.LinqDataSource.Updated>事件，以攔截任何例外狀況，更新作業，或若要檢查的值更新作業完成之後，輸出參數。 輸出參數都是從<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>傳遞至事件處理常式的物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 類別不使用這個集合。</summary>
        <value>參數的集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " Usage="member this.Updating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在更新作業之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件，以便驗證更新，以檢查是否有從資料類別，並將值更新作業之前，變更或取消更新作業的資料驗證錯誤的物件。 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>傳遞至事件處理常式的物件包含原始物件，以及更新的物件。  
  
 如果在更新作業期間發生驗證錯誤<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>物件包含的資料類別所擲回驗證例外狀況。 如果要更新的值不符合在資料類別中，屬性的型別，或如果它未通過自訂驗證檢查，就會發生驗證錯誤。 中的事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件，您可以擷取驗證例外狀況並採取適當動作。  
  
 如果事件處理常式中擲回例外狀況<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件，您必須處理該事件處理常式中的例外狀況。 例外狀況不會傳遞至事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Updated>事件 (透過<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>物件)。 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性包含之後，會擲回的例外狀況<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。  
  
   
  
## Examples  
 下列範例顯示的事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。 程式碼比較屬性與<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A>屬性和<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>屬性，以查看是否已變更的值。 如果值已變更，值為<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>屬性設定為`true`。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 下列範例顯示的事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Updating>擷取驗證例外狀況的事件。  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 前一個範例會擷取驗證例外狀況。 如果值不符合屬性類型，可能會擲回例外狀況。 它可能也會擲回類似下列範例中的自訂檢查。 `OnAgeChanging`方法會檢查數目`Age`屬性不是負數。  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Where : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值指定針對要併入擷取之資料的資料錄，必須為 true 的條件。</summary>
        <value>用於建立 Where 子句的字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您使用<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性來指定要從查詢中傳回之記錄的條件。 語法<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性是 LINQ Where 子句在 C# 中的語法相同。  
  
 您指定的運算式，結果為布林值，如果運算式評估為`true`對於給定的資料列，該資料列包含在結果集中。 運算式包含資料行名稱、 比較運算子和值比較，如下列範例所示：  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 若要指定多個由邏輯連結的運算式`AND`或`OR`操作員，您可使用`&&`做為邏輯 AND 運算子和`||`做為邏輯 OR 運算子，如下列範例所示：  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 如果您想要測試對常值字串屬性，常值字串值必須用雙引號括住。 若要在標記中這樣做，請將<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>子句值以單引號，如下列範例所示：  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 若要測試程式碼中的常值字串值，請使用適用於以插入雙引號括住，如下列範例所示所使用的語言逸出字元：  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 如果您想要測試字串是否大於或小於另一個字串，您必須使用的方法<xref:System.String>類別，而不是使用`<`或`>`運算子的資料行名稱的字串值之間。 下列範例會示範如何選取的類別，有值小於、 小於或等於資料列，大於或大於或等於 「 體育 」:  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 您也可以使用其他方法<xref:System.String>類別，例如<xref:System.String.StartsWith%2A>， <xref:System.String.EndsWith%2A>，和<xref:System.String.Contains%2A>。 如需如何比較字串的詳細資訊，請參閱[比較的字串](~/docs/standard/base-types/comparing.md)。 如需有關 Where 子句語法，請參閱[C# 運算子](http://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43)和[其中子句](~/docs/csharp/language-reference/keywords/where-clause.md)。  
  
 除了您定義當您建立網頁的靜態值為基礎的篩選，您可以篩選根據在執行階段評估的動態值。 在此情況下，您可以包含中的具名的參數<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性做為值的預留位置。 您再新增具有相符名稱的參數，<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合。  
  
 或者，您可以設定<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>屬性，以`true`並定義中的參數<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合。 當<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A>屬性是`true`，您就不必在包括中的具名的參數<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性。 相反地，<xref:System.Web.UI.WebControls.LinqDataSource>控制項會自動產生 Where 子句中的參數從<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>屬性。  
  
 如需如何篩選資料的詳細資訊，請參閱[逐步解說： 選取和篩選 LinqDataSource 與 GridView 控制項的資料子集](http://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)。  
  
   
  
## Examples  
 下列範例示範如何篩選查詢，根據靜態條件所傳回的資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 下列範例示範如何根據篩選資料在執行階段由使用者提供的值。 在此範例中<xref:System.Web.UI.WebControls.DropDownList>控制項和<xref:System.Web.UI.WebControls.GridView>頁面上顯示控制項。 當使用者選取中的值的其中一個<xref:System.Web.UI.WebControls.DropDownList>控制<xref:System.Web.UI.WebControls.LinqDataSource>從選取的控制項`Products`資料表具有資料列`UserPrice`值等於選取的值。 <xref:System.Web.UI.WebControls.GridView>控制項接著會顯示篩選過的資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用於建立 Where 子句的參數集合。</summary>
        <value>參數集合，用於在 <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" /> 屬性中建立 Where 子句。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource>控制項使用中的參數<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合來建立 Where 子句，在執行階段。 新增參數<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合，當您想要以程式設計方式設定一或多個條件，在 Where 子句。 比方說，您可能會在其中搜尋記錄的值相等的最後一個名稱的資料庫資料表<xref:System.Web.UI.WebControls.TextBox>控制項。 在此情況下，您將參數加入<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>文字方塊值的集合。  
  
 如果您沒有在執行階段設定值，在 Where 子句中，您就不必使用<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合。 您可以定義要擷取的欄位<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性。 例如，若要從資料庫資料表傳回值所在`LastName`等於"Adams 」 在標記中，設定<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性設`'LastName = "Adams"'`不含任何參數。  
  
 若要設定值，在<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合中，您指派給每個參數的名稱，然後再新增內某個預留位置<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>該參數的屬性。 在 Where 子句中，與每個參數名稱前加上 @ 符號。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合以動態方式建立 Where 子句。 <xref:System.Web.UI.WebControls.LinqDataSource>控制項會傳回值中的所有記錄`Price`資料行中的使用者所選取的值大於<xref:System.Web.UI.WebControls.DropDownList>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>