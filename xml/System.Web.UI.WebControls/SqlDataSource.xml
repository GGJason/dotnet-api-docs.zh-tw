<Type Name="SqlDataSource" FullName="System.Web.UI.WebControls.SqlDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="53aabeb15f65f69dee50d3b71b1ba96ada0187ee" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37534391" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SqlDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlDataSource extends System.Web.UI.DataSourceControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SqlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlDataSource&#xA;Inherits DataSourceControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlDataSource : System::Web::UI::DataSourceControl" />
  <TypeSignature Language="F#" Value="type SqlDataSource = class&#xA;    inherit DataSourceControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("SelectQuery")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.SqlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.SqlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示資料繫結控制項的 SQL 資料庫。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本主題內容：  
  
-   [簡介](#introduction)  
  
-   [資料連接](#data_connections)  
  
-   [執行資料作業](#performing_data_operations)  
  
-   [資料提供者](#data_provider)  
  
-   [快取](#caching)  
  
-   [其他功能](#additional_features)  
  
-   [資料來源檢視](#data_source_view)  
  
-   [宣告式語法](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>簡介  
 <xref:System.Web.UI.WebControls.SqlDataSource>資料來源控制項表示資料繫結控制項 SQL 關聯式資料庫中的資料。 您可以使用<xref:System.Web.UI.WebControls.SqlDataSource>一起與資料繫結控制項，從關聯式資料庫擷取資料，來顯示、 編輯和排序資料，使用幾乎任何程式碼的網頁上的控制項。  
  
<a name="data_connections"></a>   
## <a name="data-connections"></a>資料連接  
 若要連接到資料庫，您必須設定<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>屬性設為有效的連接字串。 <xref:System.Web.UI.WebControls.SqlDataSource>可支援可連接到使用 ADO.NET 提供者，例如任何 SQL 關聯式資料庫`SqlClient`， `OleDb`， `Odbc`，或`OracleClient`提供者。 如需如何保護連接字串資訊，請參閱[How To： 安全的連接字串時使用資料來源控制項](http://msdn.microsoft.com/library/942f6dcb-d278-4bec-8403-60eede9bcd62)。  
  
 若要從基礎資料庫擷取資料，請設定<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>使用 SQL 查詢的屬性。 如果資料庫的<xref:System.Web.UI.WebControls.SqlDataSource>相關聯的支援預存程序，您可以設定<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>預存程序名稱的屬性。 您指定的 SQL 查詢也可以是參數化的查詢。 您可以加入<xref:System.Web.UI.WebControls.Parameter>參數化查詢相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>集合。 如需有關參數化的 SQL 查詢和其語法的詳細資訊，請參閱 <<c0> [ 使用的參數，以篩選的資料來源控制項](http://msdn.microsoft.com/library/88622d04-2989-484e-93fe-594cd98dcf5f)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項擷取資料時<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>呼叫方法。 這個方法會提供以程式設計方式存取所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會自動呼叫繫結至控制項<xref:System.Web.UI.WebControls.SqlDataSource>當他們<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>呼叫方法。 如果您將設定<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A>資料繫結控制項的屬性，控制自動繫結至資料來源的資料，視需要。 設定`DataSourceID`屬性是繫結的建議的方法<xref:System.Web.UI.WebControls.ObjectDataSource>資料繫結控制項的控制項。 或者，您可以使用`DataSource`屬性，但接著您必須明確地呼叫<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>資料繫結控制項的方法。 可以使用的資料繫結控制項的一些範例<xref:System.Web.UI.WebControls.SqlDataSource>都<xref:System.Web.UI.WebControls.DataGrid>， <xref:System.Web.UI.WebControls.DetailsView>， <xref:System.Web.UI.WebControls.DataList>，和<xref:System.Web.UI.WebControls.DropDownList>。 您可以呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法以程式設計方式在任何時間，來擷取基礎資料庫中的資料。  
  
 在宣告式和程式設計 ASP.NET 案例中，您可以設定<xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>資料繫結控制項的 id 屬性<xref:System.Web.UI.WebControls.SqlDataSource>控制項。 您也可以指派的執行個體<xref:System.Web.UI.WebControls.SqlDataSource>類別來<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A>資料繫結控制項的屬性。 如需有關將資料繫結控制項繫結至資料來源控制項的詳細資訊，請參閱[ASP.NET 資料存取選項](http://msdn.microsoft.com/library/a5ff235e-397f-4bbe-9bfe-2720b6e7ab9d)。  
  
<a name="performing_data_operations"></a>   
## <a name="performing-data-operations"></a>執行資料作業  
 根據基礎資料庫產品的執行個體組態的功能<xref:System.Web.UI.WebControls.SqlDataSource>類別，您可以執行資料作業，例如插入、 更新和刪除。 若要執行這些資料作業，設定適當的命令文字和任何相關聯的參數，您想要執行的作業。 例如，更新作業，設定<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>屬性設為 SQL 字串或預存程序的名稱並加入任何必要的參數，以<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合。 在執行更新時<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>呼叫方法時，可以明確地您的程式碼也會自動由資料繫結控制項。 遵循相同的一般模式<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>作業。  
  
 SQL 查詢和使用中的命令<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>， <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>， <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>，和<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>可以參數化屬性。 這表示，查詢或命令可以使用預留位置，而不是常值的值並將預留位置繫結至應用程式或使用者定義的變數。 您可以結合 SQL 查詢中的參數，工作階段變數時，會在 Web Form 網頁的查詢字串傳遞的值，其他伺服器控制項，以及其他的屬性值。 如需有關如何使用 SQL 查詢中使用參數<xref:System.Web.UI.WebControls.SqlDataSource>，請參閱 <<c2> [ 與篩選的資料來源控制項使用的參數](http://msdn.microsoft.com/library/88622d04-2989-484e-93fe-594cd98dcf5f)和[使用的參數，使用 SqlDataSource 控制項](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295).  
  
> [!NOTE]
>  根據預設，如果其中一個參數是`null`當您執行`Select`命令中，將會傳回任何資料，並將擲回任何例外狀況。 您可以設定來變更此行為<xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A>屬性設`false`。  
  
<a name="data_provider"></a>   
## <a name="data-provider"></a>資料提供者  
 根據預設，<xref:System.Web.UI.WebControls.SqlDataSource>控制的運作與.NET Framework Data Provider for SQL Server，但<xref:System.Web.UI.WebControls.SqlDataSource>不是 Microsoft SQL Server 特有。 您可以連接<xref:System.Web.UI.WebControls.SqlDataSource>受管理的 ADO.NET 提供者是任何資料庫產品的控制項。 當搭配<xref:System.Data.OleDb?displayProperty=nameWithType>提供者，<xref:System.Web.UI.WebControls.SqlDataSource>可以使用任何 OLE DB 相容的資料庫。 當搭配<xref:System.Data.Odbc?displayProperty=nameWithType>提供者，<xref:System.Web.UI.WebControls.SqlDataSource>可以搭配任何 ODBC 驅動程式和資料庫，包括 IBM DB2、 MySQL 和 PostgreSQL。 當搭配<xref:System.Data.OracleClient?displayProperty=nameWithType>提供者，<xref:System.Web.UI.WebControls.SqlDataSource>能與 Oracle 8.1.7 資料庫及更新版本。 允許的提供者清單中註冊`DbProviderFactories`組態檔，在 Machine.config 或 Web.config 檔案區段。 如需詳細資訊，請參閱 <<c0> [ 使用 SqlDataSource 控制項的選取資料](http://msdn.microsoft.com/library/44623286-ff5a-4148-8a3c-85c56ed545eb)。  
  
<a name="caching"></a>   
## <a name="caching"></a>快取  
 如果您顯示資料在頁面使用<xref:System.Web.UI.WebControls.SqlDataSource>控制項，您可以使用快取的資料來源控制項功能的資料增加網頁的效能。 快取可減少資料庫伺服器，但代價是 Web 伺服器上的記憶體的處理負載在大部分情況下，這會是理想的取捨。 <xref:System.Web.UI.WebControls.SqlDataSource>自動快取資料時<xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>屬性設定為`true`而<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>屬性設定為快取會將資料儲存在捨棄快取項目之前的秒數。 您也可以指定<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>和選擇性<xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A>值。  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>其他功能  
 <xref:System.Web.UI.WebControls.SqlDataSource>提供額外的功能，如下表所示。  
  
|功能|需求|  
|----------------|------------------|  
|快取|設定<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性，以<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>的值，<xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>屬性設`true`，而<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>根據您想要針對您快取資料的快取行為的屬性。|  
|Deleting|設定<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>用來刪除資料的 SQL 陳述式的屬性。 此陳述式通常已參數化。|  
|篩選|設定<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>值。 設定<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>屬性，以用來篩選資料的篩選運算式時<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>呼叫方法。|  
|插入|設定<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>用來插入資料的 SQL 陳述式的屬性。 此陳述式通常已參數化。|  
|分頁|不支援目前<xref:System.Web.UI.WebControls.SqlDataSource>，不過有些資料繫結控制項，例如<xref:System.Web.UI.WebControls.GridView>，支援分頁，當您設定<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>值。|  
|選取|設定<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>用來擷取資料的 SQL 陳述式的屬性。|  
|排序|將 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 屬性設定為 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>。|  
|Updating|設定<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>用來更新資料的 SQL 陳述式的屬性。 此陳述式通常已參數化。|  
  
<a name="data_source_view"></a>   
## <a name="data-source-view"></a>資料來源檢視  
 如同所有的資料來源控制項，<xref:System.Web.UI.WebControls.SqlDataSource>控制項是在資料來源檢視類別與相關聯。 <xref:System.Web.UI.WebControls.SqlDataSource>控制項，則只有一個相關聯<xref:System.Web.UI.WebControls.SqlDataSourceView>，且一律命名為`Table`。  
  
 沒有任何視覺化的呈現的<xref:System.Web.UI.WebControls.SqlDataSource>控制項，好讓您可以建立其以宣告方式，並選擇性地允許它參與的狀態管理，它會實作為一個控制項。 如此一來，<xref:System.Web.UI.WebControls.SqlDataSource>不支援視覺化功能，例如所提供的項目<xref:System.Web.UI.DataSourceControl.EnableTheming%2A>或<xref:System.Web.UI.DataSourceControl.SkinID%2A>屬性。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>宣告式語法  
  
```  
<asp:SqlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    CancelSelectOnNullParameter="True|False"  
    ConflictDetection="OverwriteChanges|CompareAllValues"  
    ConnectionString="string"  
    DataSourceMode="DataReader|DataSet"  
    DeleteCommand="string"  
    DeleteCommandType="Text|StoredProcedure"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    FilterExpression="string"  
    ID="string"  
    InsertCommand="string"  
    InsertCommandType="Text|StoredProcedure"  
    OldValuesParameterFormatString="string"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnFiltering="Filtering event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    ProviderName="string|System.Data.Odbc|System.Data.OleDb|  
        System.Data.OracleClient|System.Data.SqlClient|  
        Microsoft.SqlServerCe.Client"  
    runat="server"  
    SelectCommand="string"  
    SelectCommandType="Text|StoredProcedure"  
    SkinID="string"  
    SortParameterName="string"  
    SqlCacheDependency="string"  
    UpdateCommand="string"  
    UpdateCommandType="Text|StoredProcedure"  
    Visible="True|False"  
>  
        <DeleteParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </DeleteParameters>  
        <FilterParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </FilterParameters>  
        <InsertParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </InsertParameters>  
        <SelectParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </SelectParameters>  
        <UpdateParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </UpdateParameters>  
</asp:SqlDataSource>  
```  
  
   
  
## Examples  
 本主題隨附了含有原始程式碼的 Visual Studio Web site 專案位於：[下載](http://go.microsoft.com/fwlink/?LinkId=192424)。  
  
 本節包含四個程式碼範例：  
  
-   第一個程式碼範例示範如何顯示資料從 SQL Server 中<xref:System.Web.UI.WebControls.GridView>控制使用宣告式語法。  
  
-   第二個程式碼範例示範如何從 ODBC 相容資料庫中的資料顯示<xref:System.Web.UI.WebControls.GridView>控制使用宣告式語法。  
  
-   第三個程式碼範例示範如何顯示及更新中的資料<xref:System.Web.UI.WebControls.GridView>控制項。  
  
-   第四個程式碼範例示範如何顯示及更新中的資料<xref:System.Web.UI.WebControls.DropDownList>控制項。  
  
    > [!NOTE]
    >  這些範例示範如何使用宣告式語法進行資料存取。 如需如何使用程式碼，而非標記來存取資料的資訊，請參閱[存取 Visual Studio 中的資料](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc)。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控制項以宣告方式來擷取 SQL Server 中的資料，並顯示在<xref:System.Web.UI.WebControls.GridView>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/CS/sql3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/VB/sql3vb.aspx#1)]  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控制項以宣告方式來從符合 ODBC 規範的資料庫擷取資料，並顯示在<xref:System.Web.UI.WebControls.GridView>控制項。 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>屬性是名稱的.NET Framework Data Provider for ODBC，後者是<xref:System.Data.Odbc?displayProperty=nameWithType>。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3odbc/CS/odbc3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3odbc/VB/odbc3vb.aspx#1)]  
  
 下列程式碼範例示範常見的顯示和更新的情況中使用<xref:System.Web.UI.WebControls.GridView>控制項。 如先前範例中，從 Northwind 資料庫的資料會顯示在<xref:System.Web.UI.WebControls.GridView>控制項。 此外，因為<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>指定屬性和<xref:System.Web.UI.WebControls.GridView.AutoGenerateEditButton%2A>屬性設定為`true`，您可以編輯和更新的記錄沒有額外的程式碼。 <xref:System.Web.UI.WebControls.GridView>控制項，會自動處理加入參數以<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合並呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>方法時**更新**按鈕<xref:System.Web.UI.WebControls.GridView>按一下控制項時。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_5sql/CS/sql5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_5sql/VB/sql5vb.aspx#1)]  
  
 下列程式碼範例示範常見的顯示和更新的情況中使用<xref:System.Web.UI.WebControls.DropDownList>和<xref:System.Web.UI.WebControls.TextBox>控制項。 <xref:System.Web.UI.WebControls.DropDownList>控制項不會自動新增至更新參數<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合，也不呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>方法，所以您必須這樣做。 更新參數以宣告方式指定，而且您可以新增事件處理常式執行<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>時就會引發事件的作業。  
  
> [!IMPORTANT]
>  此範例包含文字方塊中，接受使用者輸入，也就是潛在的安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
    <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 類別的新執行個體。</summary>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
        <altmember cref="T:System.Web.UI.DataSourceControl" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
        <altmember cref="T:System.Web.UI.DataSourceControl" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource (string connectionString, string selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, selectCommand As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource(System::String ^ connectionString, System::String ^ selectCommand);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.SqlDataSource : string * string -&gt; System.Web.UI.WebControls.SqlDataSource" Usage="new System.Web.UI.WebControls.SqlDataSource (connectionString, selectCommand)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="selectCommand" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">用來連接基礎資料庫的連接字串。</param>
        <param name="selectCommand">用來從基礎資料庫擷取資料的 SQL 查詢。 如果 SQL 查詢是參數型 SQL 字串，則您可能需要將 <see cref="T:System.Web.UI.WebControls.Parameter" /> 物件加入 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> 集合。</param>
        <summary>使用指定的連接字串和 Select 命令，初始化 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因為不同的資料庫產品使用不同的 SQL 語法`selectCommand`取決於目前 ADO.NET 提供者正在使用中，以識別<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>屬性。 如果 SQL 字串是參數型查詢或命令，參數的替代符號亦須視目前所使用的 ADO.NET 提供者而定。 例如，如果提供者<xref:System.Data.SqlClient?displayProperty=nameWithType>，這是預設提供者<xref:System.Web.UI.WebControls.SqlDataSource>類別，該參數的替代符號是`'@parameterName'`。 不過，如果提供者設定為<xref:System.Data.Odbc?displayProperty=nameWithType>或<xref:System.Data.OleDb?displayProperty=nameWithType>，參數的預留位置`'?'`。 如需有關參數化的 SQL 查詢和命令的詳細資訊，請參閱 <<c0> [ 使用的參數，使用 SqlDataSource 控制項](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>值可以是 SQL 字串或預存程序中，名稱，如果資料來源支援預存程序。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立<xref:System.Web.UI.WebControls.SqlDataSource>控制使用<xref:System.Web.UI.WebControls.SqlDataSource.%23ctor%2A>建構函式。 此範例是不尋常的<xref:System.Web.UI.WebControls.SqlDataSource>控制項用不在 Web Form 頁面上，但在中介層物件的實作中做簡單的方式，為商務物件，與資料庫互動。 此範例會使用連接字串儲存在 Web.config 檔案中。  
  
 此程式碼範例是針對提供之較大範例的一部分<xref:System.Web.UI.WebControls.ObjectDataSource>類別。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource (string providerName, string connectionString, string selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string providerName, string connectionString, string selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerName As String, connectionString As String, selectCommand As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataSource(System::String ^ providerName, System::String ^ connectionString, System::String ^ selectCommand);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.SqlDataSource : string * string * string -&gt; System.Web.UI.WebControls.SqlDataSource" Usage="new System.Web.UI.WebControls.SqlDataSource (providerName, connectionString, selectCommand)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providerName" Type="System.String" />
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="selectCommand" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="providerName">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 使用的資料提供者名稱。 如果未設定提供者，則 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 預設會將 ADO.NET 提供者用於 Microsoft SQL Server。</param>
        <param name="connectionString">用來連接基礎資料庫的連接字串。</param>
        <param name="selectCommand">用來從基礎資料庫擷取資料的 SQL 查詢。 如果 SQL 查詢是參數型 SQL 字串，則您可能需要將 <see cref="T:System.Web.UI.WebControls.Parameter" /> 物件加入 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> 集合。</param>
        <summary>使用指定的連接字串和 Select 命令，初始化 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因為不同的資料庫產品使用不同的 SQL 語法`selectCommand`取決於目前 ADO.NET 提供者正在使用中，以識別`providerName`參數。 如果 SQL 字串是參數型查詢或命令，參數的替代符號亦須視目前所使用的 ADO.NET 提供者而定。 例如，如果提供者<xref:System.Data.SqlClient?displayProperty=nameWithType>，這是預設提供者<xref:System.Web.UI.WebControls.SqlDataSource>類別，該參數的替代符號是`'@parameterName'`。 不過，如果提供者設定為<xref:System.Data.Odbc?displayProperty=nameWithType>或<xref:System.Data.OleDb?displayProperty=nameWithType>，參數的預留位置`'?'`。 如需有關參數化的 SQL 查詢和命令的詳細資訊，請參閱 <<c0> [ 使用的參數，使用 SqlDataSource 控制項](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性可以是 SQL 字串或預存程序中，名稱，如果資料來源支援預存程序。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料來源控制項快取 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> 方法所擷取之資料的時間長度 (以秒為單位)。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 快取 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> 作業結果的秒數。 預設值為 0。 值不能為負。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項支援的資料快取。 快取資料，雖然<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會從快取，而不是從基礎資料庫擷取資料。 當快取過期時，<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會從基礎資料庫中，擷取資料，並再次快取資料。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項自動快取資料時<xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>屬性設定為`true`而<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>屬性設為大於 0，表示快取會儲存資料的快取項目之前的秒數會被捨棄。 值為 0 表示無限長的快取。  
  
 快取的行為取決於持續時間的組合和<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>屬性。 如果<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>的值，<xref:System.Web.UI.WebControls.SqlDataSource>快取資料的第一個資料擷取作業、 保留它在記憶體中，最多的時間所指定的量<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>屬性。 需要記憶體時，就可能持續時間的時間之前, 釋放資料。 下次執行作業，然後會重新整理快取。 如果<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>值，資料來源控制項快取上第一次的資料擷取作業的資料，但重設它所保留的快取中的每個後續作業的時間範圍。 快取到期時間，等於沒有活動是否<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>值自上次<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>作業。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項可以快取資料，只有當它在時<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>模式。 A<xref:System.NotSupportedException>所擲回例外狀況<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法，如果<xref:System.Web.UI.WebControls.SqlDataSource>控制設為 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>值和快取也會啟用。  
  
> [!IMPORTANT]
>  當您使用在 Microsoft Windows 驗證的用戶端模擬時，第一位使用者存取資料時，會快取資料。 如果另一位使用者要求相同的資料，就會從快取擷取資料。 藉由另一個呼叫資料庫來驗證使用者的存取資料，不會擷取資料。 如果您預期有一個以上的使用者存取資料，而且您想要每個擷取資料的安全性組態資料庫所要驗證，請勿使用快取。  
  
   
  
## Examples  
 下列程式碼範例示範如何從 Microsoft SQL Server 中 Northwind 資料庫中擷取資料，並顯示在<xref:System.Web.UI.WebControls.GridView>控制項，以啟用快取的資料。 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>設定為 20 秒，因為<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>值，根據預設，此頁面的使用者會看到新的資料每隔 20 秒。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/CS/sql18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/VB/sql18vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定快取到期行為，當與持續期間搭配使用時，用來描述資料來源控制項所使用的快取行為。</summary>
        <value>其中一個 <see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 值。 預設值為 <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項支援的資料快取。 快取資料，雖然<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會從快取，而不是從基礎資料庫擷取資料。 當快取過期時，<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會從基礎資料庫中，擷取資料，並再次快取資料。  
  
 快取的行為取決於多種<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>設定。 如果<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>的值，<xref:System.Web.UI.WebControls.SqlDataSource>快取資料的第一個資料擷取作業、 保留在記憶體中所指定的時間長度<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>屬性，然後再捨棄它之後的時間失效。 下次執行作業，然後會重新整理快取。 如果<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>值，資料來源控制項快取上第一次的資料擷取作業的資料，但重設它所保留的快取中的每個後續作業的時間範圍。 快取到期時間，等於沒有活動是否<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>值自上次<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>作業。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項可以快取資料中的時，才<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>模式。 A<xref:System.NotSupportedException>所擲回例外狀況<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法，如果<xref:System.Web.UI.WebControls.SqlDataSource>控制設為 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>值和快取也會啟用。  
  
> [!IMPORTANT]
>  當您使用在 Microsoft Windows 驗證的用戶端模擬時，第一位使用者存取資料時，會快取資料。 如果另一位使用者要求相同的資料，就會從快取擷取資料。 藉由另一個呼叫資料庫來驗證使用者的存取資料，不會擷取資料。 如果您預期有一個以上的使用者存取資料，而且您想要每個擷取資料的安全性組態資料庫所要驗證，請勿使用快取。  
  
   
  
## Examples  
 下列程式碼範例示範如何從 Microsoft SQL Server 中 Northwind 資料庫中擷取資料，並顯示在<xref:System.Web.UI.WebControls.GridView>控制項，以啟用快取的資料。 因為<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry.Sliding>的值，使用者不會看到新的資料即使<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>值是 20 秒。 只有當沒有任何活動上超過 20 秒自最後一個頁面載入時，會重新整理快取的資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_19sql/CS/sql19cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_19sql/VB/sql19vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定使用者定義的索引鍵相依性，連結至資料來源控制項所建立的所有資料快取物件。 當索引鍵過期時，所有快取的物件也會明確過期。</summary>
        <value>索引鍵，識別 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 建立的所有快取物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項支援的資料快取。 快取資料，雖然<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會從快取，而不是從基礎資料庫擷取資料。 當快取過期時，<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會從基礎資料庫中，擷取資料，並再次快取資料。  
  
 您可以設定<xref:System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency%2A>屬性，以建立所建立的所有快取項目之間的相依性<xref:System.Web.UI.WebControls.SqlDataSource>控制項和索引鍵。 您以程式設計方式可以在任何時間過期所有快取項目，藉由索引鍵過期。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項可以快取資料中的時，才<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>模式。 A<xref:System.NotSupportedException>所擲回例外狀況<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法，如果<xref:System.Web.UI.WebControls.SqlDataSource>控制設為 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>值和快取也會啟用。  
  
 唯一快取項目建立的每個組合<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>， <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>，和<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>屬性。 多個<xref:System.Web.UI.WebControls.SqlDataSource>控制項可以使用相同的快取項目在案例中的控制項位置載入相同的資料來自相同的基礎資料庫。  
  
> [!IMPORTANT]
>  當您使用在 Microsoft Windows 驗證的用戶端模擬時，第一位使用者存取資料時，會快取資料。 如果另一位使用者要求相同的資料，就會從快取擷取資料。 藉由另一個呼叫資料庫來驗證使用者的存取資料，不會擷取資料。 如果您預期有一個以上的使用者存取資料，而且您想要每個擷取資料的安全性組態資料庫所要驗證，請勿使用快取。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
      </Docs>
    </Member>
    <Member MemberName="CancelSelectOnNullParameter">
      <MemberSignature Language="C#" Value="public virtual bool CancelSelectOnNullParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelSelectOnNullParameter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CancelSelectOnNullParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CancelSelectOnNullParameter { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CancelSelectOnNullParameter : bool with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出當 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> 集合中包含的任何參數評估為 <see langword="null" /> 時，是否取消資料擷取作業。</summary>
        <value>如果當 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> 集合中包含的參數評估為 <see langword="true" /> 時取消資料擷取作業，則為 <see langword="null" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A>屬性儲存在檢視狀態。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberSignature Language="F#" Value="member this.ConflictDetection : System.Web.UI.ConflictOptions with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出在作業期間，當基礎資料庫的資料列資料發生變更時，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控制項如何執行更新和刪除作業。</summary>
        <value>其中一個 <see cref="T:System.Web.UI.ConflictOptions" /> 值。 預設值為 <see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>屬性會決定是否要將舊的和新值的參數套用至`Update`方法。 比方說，如果命令是所指定<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性會傳回<xref:System.Data.DataTable>物件的資料行`Name`並`Number`和<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions.OverwriteChanges>值，參數會針對`Name`並`Number`如`Update`方法。 如果<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions.CompareAllValues>的值，參數會針對`Name`， `Number`， `original_Name`，和`original_Number`。 (原始值的確切名稱的參數取決於<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>屬性。)<xref:System.Web.UI.WebControls.SqlDataSource>控制項接著會判斷如果`Update`方法中指定<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>屬性具有相符的參數。  
  
 並行存取控制是一種技術，來控制如何讀取及多個用戶端存取和管理相同的資料時，存放區中變更資料的資料存放區使用。 例如，一個用戶端讀取資料，並提供給使用者，而另一個用戶端讀取相同的資料，並提供給不同的使用者。 如果兩個使用者更新的資料，並將它提交至資料存放區，可能會發生一些未預期的結果，因為兩個用戶端可能會更新為相同的資料不同的值。 這會視為衝突。 藉由設定<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>屬性，以<xref:System.Web.UI.ConflictOptions.CompareAllValues>的值，您`Update`方法可以再比較新舊值來偵測衝突，並處理它們，視原始資料來源。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>屬性會將委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public virtual string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionString : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.SqlDataSourceConnectionStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得和設定 ADO.NET 提供者特定的連接字串，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控制項會用來連接至基礎資料庫。</summary>
        <value>.NET Framework 資料提供者特定的字串，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 會用來連接至其所表示的 SQL 資料庫。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項可以搭配各種不同的 ADO.NET 提供者和用來連接到基礎資料來源的連接字串語法是特定提供者。  
  
 當您設定<xref:System.Web.UI.WebControls.SqlDataSource>控制項，您設定<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>的資料庫類型的屬性 (預設值是<xref:System.Data.SqlClient?displayProperty=nameWithType>)，而且您將<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>屬性設為連接字串，其中包含連接所需的資訊保存到資料庫。 連接字串的內容是根據資料庫存取資料來源控制項的類型而有所不同。 比方說，<xref:System.Web.UI.WebControls.SqlDataSource>控制項需要伺服器名稱、 資料庫 (catalog) 名稱及如何驗證使用者，當連接到 SQL Server 的相關資訊。 連接字串的內容的相關資訊，請參閱<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>屬性<xref:System.Data.SqlClient.SqlConnection>類別<xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A>屬性<xref:System.Data.OracleClient.OracleConnection>類別<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>屬性<xref:System.Data.OleDb.OleDbConnection>類別，或<xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A>屬性<xref:System.Data.Odbc.OdbcConnection>類別。  
  
 如果您變更<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>屬性，<xref:System.Web.UI.IDataSource.DataSourceChanged>引發事件時，造成任何繫結至的控制項<xref:System.Web.UI.WebControls.SqlDataSource>重新繫結的控制項。  
  
> [!IMPORTANT]
>  如需儲存連接字串資訊，請參閱 < [How To： 使用資料來源的控制項時，保護連接字串](http://msdn.microsoft.com/library/942f6dcb-d278-4bec-8403-60eede9bcd62)。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何設定<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>屬性設為連接到 Microsoft SQL Server 資料庫，並顯示的結果<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性中的<xref:System.Web.UI.WebControls.GridView>控制項。 第二個程式碼範例示範更複雜的案例中，其中<xref:System.Web.UI.WebControls.SqlDataSource>控制項用來顯示及更新在受密碼保護的 Microsoft Access 資料庫中的資料。 在每個案例中， `connectionStrings` Web.config 檔案的項目會顯示第一個，後面接著包含 ASP.NET 網頁<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
 下列程式碼範例示範如何設定<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>屬性設為連接到 SQL Server 資料庫，並顯示的結果<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性中的<xref:System.Web.UI.WebControls.GridView>控制項。  
  
  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/CS/sql3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/VB/sql3vb.aspx#1)]  
  
 下列程式碼範例示範更複雜的案例比先前的程式碼範例，其中<xref:System.Web.UI.WebControls.SqlDataSource>控制項用來顯示及更新受密碼保護 Access 資料庫中的資料。 因為<xref:System.Web.UI.WebControls.SqlDataSource>存取權，可搭配<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>屬性設定為<xref:System.Data.OleDb>提供者，而<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>屬性設定為 UNC 共用存取資料庫的適當連接字串。 A<xref:System.Web.UI.WebControls.GridView>控制項會顯示訂單的出貨日期。 您可以更新訂單，以選取適當的核取方塊，然後按一下**更新** 按鈕。  
  
> [!IMPORTANT]
>  此範例包含僅供說明用途的純文字密碼。 在生產環境應用程式，應該加密連接字串，包含密碼。 如需詳細資訊，請參閱[保護連線資訊](~/docs/framework/data/adonet/protecting-connection-information.md)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/CS/sql22cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/VB/sql22vb.aspx#1)]  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/CS/sql22cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/VB/sql22vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
      </Docs>
    </Member>
    <Member MemberName="CreateDataSourceView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateDataSourceView (viewName As String) As SqlDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::SqlDataSourceView ^ CreateDataSourceView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="abstract member CreateDataSourceView : string -&gt; System.Web.UI.WebControls.SqlDataSourceView&#xA;override this.CreateDataSourceView : string -&gt; System.Web.UI.WebControls.SqlDataSourceView" Usage="sqlDataSource.CreateDataSourceView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">資料來源檢視的名稱。</param>
        <summary>建立與資料來源控制項相關聯的資料來源檢視物件。</summary>
        <returns>與 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 關聯的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 衍生自類別<xref:System.Web.UI.WebControls.SqlDataSource>類別可以覆寫<xref:System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView%2A>方法來傳回強型別的資料來源檢視物件。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.DataSourceView" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceMode As SqlDataSourceMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceMode DataSourceMode { System::Web::UI::WebControls::SqlDataSourceMode get(); void set(System::Web::UI::WebControls::SqlDataSourceMode value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceMode : System.Web.UI.WebControls.SqlDataSourceMode with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控制項用於擷取資料的資料擷取模式。</summary>
        <value>其中一個 <see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" /> 值。 預設值是<see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataSet" />值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 資料擷取模式識別如何<xref:System.Web.UI.WebControls.SqlDataSource>控制項會從基礎資料庫中擷取資料。  
  
 當<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設定為<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>的值，將資料載入至<xref:System.Data.DataSet>物件和儲存在伺服器上的記憶體。 這項功能，使用者介面控制項，這類情況<xref:System.Web.UI.WebControls.GridView>，提供排序、 篩選和分頁功能。  
  
 當<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設定為<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>的值，以擷取資料<xref:System.Data.IDataReader>物件，這是順向、 唯讀資料指標。 特定型別的<xref:System.Data.IDataReader>物件相依於最終資料提供者所<xref:System.Web.UI.WebControls.SqlDataSource>使用，以識別<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>屬性。 根據預設，<xref:System.Web.UI.WebControls.SqlDataSource>控制項所使用的提供者的 Microsoft SQL Server <xref:System.Data.SqlClient?displayProperty=nameWithType>，以及資料讀取器<xref:System.Data.SqlClient.SqlDataReader>物件。  
  
 如果您變更<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性，<xref:System.Web.UI.IDataSource.DataSourceChanged>引發事件時，造成任何繫結至的控制項<xref:System.Web.UI.WebControls.SqlDataSource>重新繫結。  
  
 值<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性儲存在檢視狀態。  
  
   
  
## Examples  
 下列程式碼範例示範如何設定<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSource>若要控制<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>值的案例<xref:System.Web.UI.WebControls.ListBox>需要未排序的控制項、 分頁或篩選。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/CS/sql1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/VB/sql1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" /> 屬性不是在 <see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" /> 中定義的其中一個值。</exception>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete();" />
      <MemberSignature Language="F#" Value="member this.Delete : unit -&gt; int" Usage="sqlDataSource.Delete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> SQL 字串和 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" /> 集合中的任何參數，執行刪除作業。</summary>
        <returns>表示從基礎資料庫刪除之資料列數的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行刪除作業之前，請<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>會呼叫方法以引發<xref:System.Web.UI.WebControls.SqlDataSource.Deleting>事件。 您可以處理這個事件來檢查參數的值，並執行刪除作業之前任何前置處理。  
  
 在作業完成之後，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A>會呼叫方法以引發<xref:System.Web.UI.WebControls.SqlDataSource.Deleted>事件。 您可以處理這個事件來檢查任何傳回值和錯誤碼，並執行任何後續處理。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>方法提供以程式設計方式存取`Delete`方法。 如果<xref:System.Web.UI.WebControls.SqlDataSource>控制項相關聯的資料繫結控制項，會自動呼叫的資料繫結控制項**刪除**方法。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>方法會委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>方法<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。 若要執行的作業，<xref:System.Web.UI.WebControls.SqlDataSourceView>組建<xref:System.Data.Common.DbCommand>物件使用<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>文字以及任何相關聯<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>值，然後再執行<xref:System.Data.Common.DbCommand>對基礎資料庫。  
  
   
  
## Examples  
 下列程式碼範例示範如何設定<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>文字從 Northwind 資料庫中刪除訂單。 一開始，資料會從 Orders 資料表中擷取並顯示在<xref:System.Web.UI.WebControls.DropDownList>控制項。 您必須明確宣告<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>屬性並呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>方法時使用資料繫結控制項，例如<xref:System.Web.UI.WebControls.DropDownList>(不像其他控制項，例如<xref:System.Web.UI.WebControls.GridView>和<xref:System.Web.UI.WebControls.DetailsView>，這會自動填入參數和呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>上資料來源控制項的方法)。 在此範例中，<xref:System.Web.UI.WebControls.Button.OnClick%2A>事件會委派給私用`OnDelete`事件處理常式，它會明確呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>方法<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 不能以基礎資料來源建立連接。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public string DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 SQL 字串，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控制項會用來刪除基礎資料庫的資料。</summary>
        <value>SQL 字串，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 會用來刪除資料。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>代表 SQL 查詢或預存程序中，名稱，並由<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>方法。  
  
 由於不同的資料庫產品使用不同的 SQL，SQL 字串的語法須視目前所使用的 ADO.NET 提供者 (可由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 屬性識別) 而定。 如果 SQL 字串是參數型的查詢或命令，參數的語法也會取決於所使用的 ADO.NET 提供者中。 例如，如果提供者<xref:System.Data.SqlClient?displayProperty=nameWithType>，這是預設提供者<xref:System.Web.UI.WebControls.SqlDataSource>類別，參數的語法是`'@parameterName'`。 不過，如果提供者設定為<xref:System.Data.Odbc?displayProperty=nameWithType>或是<xref:System.Data.OleDb?displayProperty=nameWithType>，參數的預留位置`'?'`。 如需有關參數化的 SQL 查詢和命令的詳細資訊，請參閱 <<c0> [ 使用的參數，使用 SqlDataSource 控制項](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>屬性可以是 SQL 字串或預存程序中，名稱，如果資料庫支援預存程序。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>屬性會將委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
> [!IMPORTANT]
>  基於安全考量，<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>屬性不會儲存在檢視狀態。 因為它可能會有要解碼的用戶端上的檢視狀態內容，在檢視中儲存機密資訊的資料庫結構狀態可能會導致資訊洩漏弱點。  
  
   
  
## Examples  
 下列程式碼範例示範如何設定<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>文字從 Northwind 資料庫的 Orders 資料表中刪除訂單。 資料會從 Orders 資料表中擷取並顯示在<xref:System.Web.UI.WebControls.GridView>控制項。 <xref:System.Web.UI.WebControls.GridView>呈現**刪除**自動按鈕時<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A>屬性設定為`true`。 此外，當**刪除**按一下按鈕時，<xref:System.Web.UI.WebControls.GridView>控制會自動填入<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>集合並呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>方法。 最後，因為此程式碼範例會刪除資料，則事件處理常式嘗試將資料庫備份至磁碟之前新增<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>作業。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType DeleteCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.DeleteCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> 屬性中的文字是 SQL 陳述式還是預存程序的名稱。</summary>
        <value>其中一個 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值。 預設值為 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType%2A>屬性會將委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Deleted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於刪除作業已經完成時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.SqlDataSource.Deleted>刪除作業完成後，事件，以檢查的值輸出參數。 輸出參數都是從<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>與事件相關聯的物件。  
  
 如需有關如何處理事件的詳細資訊，請參閱 < [NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得參數集合，包含與 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> 控制項相關聯之 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 物件 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 屬性所使用的參數。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" />，包含 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> 屬性所使用的參數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>屬性包含參數化的 SQL 查詢<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>集合包含任何<xref:System.Web.UI.WebControls.Parameter>對應至 SQL 字串中參數預留位置的物件。  
  
> [!NOTE]
>  請確定沒有<xref:System.Web.UI.WebControls.BoundField>繫結至資料繫結控制項中的控制項<xref:System.Web.UI.WebControls.SqlDataSource>控制項具有符合中的任何參數名稱<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>集合。 可能有相同的名稱，因為繫結的欄位會排除 SQL 命令和 「 未提供參數 」 錯誤的參數。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions.CompareAllValues>值，參數會針對資料的舊和新值。 舊值的參數會根據名為<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>屬性。  
  
 根據 ADO.NET 提供者，這是參數的順序<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>集合可能很重要。 <xref:System.Data.OleDb?displayProperty=nameWithType>和<xref:System.Data.Odbc?displayProperty=nameWithType>提供者建立關聯的集合，根據參數在參數化 SQL 查詢中的出現的順序中的參數。 <xref:System.Data.SqlClient?displayProperty=nameWithType>提供者，也就是預設的 ADO.NET 提供者的<xref:System.Web.UI.WebControls.SqlDataSource>控制項，使集合中的參數符合 SQL 查詢中預留位置的參數名稱。 如需有關參數化的 SQL 查詢和命令的詳細資訊，請參閱 <<c0> [ 使用的參數，使用 SqlDataSource 控制項](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>屬性會擷取<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>屬性所含<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
> [!IMPORTANT]
>  值插入參數，而不需驗證，也就是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Deleting>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
   
  
## Examples  
 下列程式碼範例示範如何設定<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>文字從 Northwind 資料庫中刪除訂單。 一開始，資料會從 Orders 資料表中擷取並顯示在<xref:System.Web.UI.WebControls.DropDownList>控制項。 您必須明確宣告<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>屬性並呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>方法時使用資料繫結控制項，例如<xref:System.Web.UI.WebControls.DropDownList>(不像其他控制項，例如<xref:System.Web.UI.WebControls.GridView>和<xref:System.Web.UI.WebControls.DetailsView>，這會自動填入的參數和呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>上資料來源控制項)。 在此範例中，<xref:System.Web.UI.WebControls.Button.OnClick%2A>事件會委派給私用`OnDelete`事件處理常式，它會明確呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>方法<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Deleting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在刪除作業之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.SqlDataSource.Deleting>事件來執行特定應用程式時，用來驗證參數的值，或變更參數值之前的額外的初始化作業<xref:System.Web.UI.WebControls.SqlDataSource>控制項執行刪除作業。  
  
 基礎資料來源的連接尚未開啟時不會呼叫事件處理常式委派。 因此，您無法取消此作業，直接藉由呼叫<xref:System.Data.Common.DbCommand.Cancel%2A>方法<xref:System.Data.Common.DbCommand>物件所公開<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>物件。 您可以不過，將在資料庫作業取消藉由設定<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>的屬性<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>物件到`true`。  
  
 如需有關如何處理事件的詳細資訊，請參閱 < [NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列程式碼範例示範如何處理<xref:System.Web.UI.WebControls.SqlDataSource.Deleting>之前，會引發的事件<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>作業就會發生。 因為此範例會從 Northwind 資料庫中，刪除資料，所以<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>處理常式會嘗試將資料庫備份至磁碟之前加入<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>執行作業。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控制項是否啟用了資料快取。</summary>
        <value>如果啟用了資料來源控制項的資料快取則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項支援的資料快取。 快取資料，雖然<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會從快取，而不是從基礎資料庫擷取資料。 當快取過期時，<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會從基礎資料庫中，擷取資料，並再次快取資料。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項自動快取資料時<xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>屬性設定為`true`而<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>屬性設為大於 0，表示快取會儲存資料，然後再擷取秒數全新的設定。  
  
> [!IMPORTANT]
>  當您使用在 Microsoft Windows 驗證的用戶端模擬時，第一位使用者存取資料時，會快取資料。 如果另一位使用者要求相同的資料，就會從快取擷取資料。 藉由另一個呼叫資料庫來驗證使用者的存取資料，不會擷取資料。 如果您預期有一個以上的使用者存取資料，而且您想要每個擷取資料的安全性組態資料庫所要驗證，請勿使用快取。  
  
   
  
## Examples  
 下列程式碼範例示範如何從 Microsoft SQL Server 中 Northwind 資料庫中擷取資料，並顯示在<xref:System.Web.UI.WebControls.GridView>控制項，以啟用快取的資料。 <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>屬性設定為`true`而<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>設為 20 秒。 因為<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry.Absolute>欄位，根據預設，此頁面的使用者會看到新的資料每隔 20 秒。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/CS/sql18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/VB/sql18vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">當 <see cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" /> 不支援快取時，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 屬性會設為 <see langword="true" />。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterExpression : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定當呼叫 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> 時會套用的篩選運算式。</summary>
        <value>字串，代表當使用 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> 方法抓取資料時套用的篩選運算式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>屬性值是格式字串運算式 (字串，由處理<xref:System.String.Format%2A?displayProperty=nameWithType>方法) 使用中的值<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>包含在字串中任何替代參數的集合。 篩選條件運算式語法是可接受的相同語法<xref:System.Data.DataView.RowFilter%2A>屬性，因為篩選運算式套用至<xref:System.Data.DataView.RowFilter%2A>屬性<xref:System.Data.DataView>物件時所傳回的執行<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法。 如需詳細資訊，請參閱<xref:System.Data.DataColumn.Expression%2A>。  
  
 如果您加入的參數<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合，您也可以包含格式字串的預留位置 (例如`"{0}")`中要取代的參數值的運算式。 依照中的參數索引來取代預留位置<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合。 如果中的物件<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合是`null`，該物件會取代為空字串。  
  
 您可以包含在參數<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>屬性。 如果參數是字串或字元類型，請使用單引號括住的參數。 如果參數是數值類型，就不需要引號。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合包含的參數預留位置中找到的評估<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>屬性。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項支援篩選的資料中的時，才<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>模式。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>屬性會將委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
   
  
## Examples  
 下列程式碼範例示範如何從 Northwind 資料庫中擷取資料，並使用篩選<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>字串和<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>屬性會套用任何時間<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會執行，以擷取資料。 在此範例中，<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>包含篩選參數，包含此功能的預留位置<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合。 此外，filter 參數是<xref:System.Web.UI.WebControls.ControlParameter>繫結至物件<xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A>屬性<xref:System.Web.UI.WebControls.DropDownList>控制項。 因為<xref:System.Web.UI.WebControls.DropDownList>控制項具有其<xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A>屬性設定為`true`，選取範圍中的任何變更<xref:System.Web.UI.WebControls.DropDownList>控制項會在頁面回傳至伺服器的資訊和<xref:System.Web.UI.WebControls.GridView>控制項重新繫結至資料來源使用新的篩選器來控制。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">已設定 <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" /> 屬性，且 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 處於 <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataReader" /> 模式中。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As SqlDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberSignature Language="F#" Value="member this.Filtering : System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler " Usage="member this.Filtering : System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在篩選作業之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行驗證作業篩選參數值之前<xref:System.Web.UI.WebControls.SqlDataSource>控制項執行篩選作業。 您可以取消<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法，藉由設定<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs>物件`true`。 只有當引發事件<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>屬性設定。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering?displayProperty=nameWithType>事件會委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering?displayProperty=nameWithType>事件<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
 如需有關如何處理事件的詳細資訊，請參閱 < [NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與 <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" /> 字串中任何參數替代符號相關聯的參數集合。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" />，其中所包含的一組參數，與在 <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" /> 屬性中找到的任何參數預留位置相關聯。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中的參數<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合相關聯的任何參數，指定在<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>屬性。 中指定的參數預留位置<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>屬性會比對中的參數物件的順序<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合時<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>呼叫方法。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>屬性會擷取<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>屬性所含<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
> [!IMPORTANT]
>  值插入參數，而不需驗證，也就是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
   
  
## Examples  
 下列程式碼範例示範如何從 Northwind 資料庫中擷取資料，並使用篩選<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>屬性。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>的屬性<xref:System.Web.UI.WebControls.SqlDataSource>隨時套用控制<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會執行，以擷取資料。 在此範例中，<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>屬性包含篩選參數，包含此功能的預留位置<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合。 此外，filter 參數是<xref:System.Web.UI.WebControls.ControlParameter>繫結至物件<xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A>屬性<xref:System.Web.UI.WebControls.DropDownList>控制項。 因為<xref:System.Web.UI.WebControls.DropDownList>控制項都有其<xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A>屬性設定為`true`中的任何變更<xref:System.Web.UI.WebControls.DropDownList>選取項目會導致頁面回傳至伺服器的資訊和<xref:System.Web.UI.WebControls.GridView>重新繫結至資料來源控制項使用的控制項新的篩選器。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="GetDbProviderFactory">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.DbProviderFactory GetDbProviderFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.DbProviderFactory GetDbProviderFactory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetDbProviderFactory () As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::DbProviderFactory ^ GetDbProviderFactory();" />
      <MemberSignature Language="F#" Value="abstract member GetDbProviderFactory : unit -&gt; System.Data.Common.DbProviderFactory&#xA;override this.GetDbProviderFactory : unit -&gt; System.Data.Common.DbProviderFactory" Usage="sqlDataSource.GetDbProviderFactory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回與 <see cref="T:System.Data.Common.DbProviderFactory" /> 屬性所識別之 ADO.NET 提供者相關聯的 <see cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" /> 物件。</summary>
        <returns>
          <see cref="T:System.Data.Common.DbProviderFactory" />，表示已識別的 ADO.NET 提供者，如果未設定提供者，則為 <see cref="N:System.Data.SqlClient" /> 的執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbProviderFactory>屬性由<xref:System.Web.UI.WebControls.SqlDataSource>控制項與資料庫互動時，建立正確的 ADO.NET 連接、 命令和參數物件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.Common.DbProviderFactory" />
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="sqlDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">要擷取的檢視名稱。 因為 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 只支援一個檢視，所以會忽略 <c>viewName</c>。</param>
        <summary>取得與資料來源控制項相關聯的具名資料來源檢視。</summary>
        <returns>與 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 相關聯之名為 "Table" 的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項支援只有一個資料來源檢視。 如同所有的資料來源檢視物件，<xref:System.Web.UI.WebControls.SqlDataSourceView>與資料來源控制項相關聯的物件會定義它的功能時，會執行所有的工作，是為了擷取基礎資料庫中的資料執行作業，例如排序、插入、 刪除和更新。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="viewName" /> 為 <see langword="null" /> 或其他非 <c>Table</c> 的名稱。</exception>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="sqlDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得名稱集合，表示與 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控制項相關聯的檢視物件清單。</summary>
        <returns>
          <see cref="T:System.Collections.ICollection" />，包含與 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 關聯的檢視名稱。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項只支援一個檢視其資料為基礎，名為`"Table"`。 <xref:System.Web.UI.WebControls.SqlDataSource.GetViewNames%2A>方法會傳回此一的檢視表名稱的單一項目集合。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert();" />
      <MemberSignature Language="F#" Value="member this.Insert : unit -&gt; int" Usage="sqlDataSource.Insert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> SQL 字串和 <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" /> 集合中的任何參數，執行插入作業。</summary>
        <returns>表示插入基礎資料庫之資料列數的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在執行插入作業之前，請<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>會呼叫方法以引發<xref:System.Web.UI.WebControls.SqlDataSource.Inserting>事件。 您可以處理這個事件來檢查參數的值，並執行任何前置處理之前<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>作業。 若要執行插入作業，<xref:System.Web.UI.WebControls.SqlDataSourceView>物件的組建<xref:System.Data.Common.DbCommand>物件使用<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>文字以及任何相關聯<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>屬性，然後執行<xref:System.Data.Common.DbCommand>對基礎資料庫的物件。  
  
 在作業完成之後，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>會呼叫方法以引發<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件。 您可以處理這個事件來檢查任何傳回值和錯誤碼，並執行任何後續處理。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>方法提供以程式設計方式存取`Insert`方法。 如果<xref:System.Web.UI.WebControls.SqlDataSource>控制項相關聯的資料繫結控制項，會自動呼叫的資料繫結控制項`Insert`方法。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>方法會委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>方法<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
> [!IMPORTANT]
>  值插入參數，而不需驗證，也就是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
   
  
## Examples  
 下列程式碼範例示範如何將資料插入資料庫，使用<xref:System.Web.UI.WebControls.SqlDataSource>控制項和簡單的 Web Form 網頁。 目前的資料，資料表中的資料會顯示在<xref:System.Web.UI.WebControls.DropDownList>控制項。 您可以藉由輸入值中的新增記錄<xref:System.Web.UI.WebControls.TextBox>控制項，然後按一下**插入** 按鈕。 當**插入**按一下按鈕時，為指定的值會插入至資料庫，然後<xref:System.Web.UI.WebControls.DropDownList>會重新整理。  
  
> [!IMPORTANT]
>  此範例包含接受使用者輸入，也就是潛在的安全性威脅的文字方塊中，值插入參數，而不需驗證，這也是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Inserting>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
> [!NOTE]
>  此範例示範如何使用宣告式語法進行資料存取。 如需如何使用程式碼，而非標記來存取資料的資訊，請參閱[存取 Visual Studio 中的資料](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 不能以基礎資料來源建立連接。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public string InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 SQL 字串，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控制項會用來將資料插入基礎資料庫。</summary>
        <value>SQL 字串，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 會用來插入資料。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>代表 SQL 查詢或預存程序中，名稱，並由<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>方法。  
  
 由於不同的資料庫產品使用不同的 SQL，SQL 字串的語法須視目前所使用的 ADO.NET 提供者 (可由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 屬性識別) 而定。 如果 SQL 字串是參數型查詢或命令，參數的替代符號亦須視目前所使用的 ADO.NET 提供者而定。 例如，如果提供者<xref:System.Data.SqlClient?displayProperty=nameWithType>，這是預設提供者<xref:System.Web.UI.WebControls.SqlDataSource>類別，該參數的替代符號是`'@parameterName'`。 不過，如果提供者設定為<xref:System.Data.Odbc?displayProperty=nameWithType>或是<xref:System.Data.OleDb?displayProperty=nameWithType>，參數的預留位置`'?'`。 如需有關參數化的 SQL 查詢和命令的詳細資訊，請參閱 <<c0> [ 使用的參數，使用 SqlDataSource 控制項](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>可以是 SQL 字串或名稱的預存程序中，如果資料來源支援預存程序。  
  
 這個屬性會將委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>的屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
> [!IMPORTANT]
>  基於安全考量，<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>屬性不會儲存檢視狀態。 因為它可能會有要解碼的用戶端上的檢視狀態內容，在檢視中儲存機密資訊的資料庫結構狀態可能會導致資訊洩漏弱點。  
  
> [!IMPORTANT]
>  值插入參數，而不需驗證，也就是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何將資料插入資料庫，使用<xref:System.Web.UI.WebControls.SqlDataSource>控制項和簡單的 Web Form 網頁。 第二個程式碼範例示範如何從 Microsoft SQL Server 擷取資料並顯示在<xref:System.Web.UI.WebControls.GridView>控制項，以及如何使用<xref:System.Web.UI.WebControls.DetailsView>控制項，以查看所選資料列的詳細資料<xref:System.Web.UI.WebControls.GridView>控制項和表單，以插入新的記錄。  
  
> [!NOTE]
>  這些範例示範如何使用宣告式語法進行資料存取。 如需如何使用程式碼，而非標記來存取資料的資訊，請參閱[存取 Visual Studio 中的資料](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc)。  
  
 下列程式碼範例示範如何將資料插入資料庫，使用<xref:System.Web.UI.WebControls.SqlDataSource>控制項和簡單的 Web Form 網頁。 目前的資料，資料表中的資料會顯示在<xref:System.Web.UI.WebControls.DropDownList>控制項。 您可以藉由輸入值來新增記錄<xref:System.Web.UI.WebControls.TextBox>控制項，然後按一下**插入** 按鈕。 當**插入**按一下按鈕時，為指定的值會插入至資料庫，而<xref:System.Web.UI.WebControls.DropDownList>控制重新整理。  
  
> [!IMPORTANT]
>  此範例包含可接受使用者輸入，也就是潛在的安全性威脅，文字方塊中，值插入參數，而不需驗證，這也是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Inserting>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 下列程式碼範例示範如何從 SQL Server 擷取資料，並顯示在<xref:System.Web.UI.WebControls.GridView>控制項，以及如何使用<xref:System.Web.UI.WebControls.DetailsView>以查看所選的資料列中的詳細資料的控制項<xref:System.Web.UI.WebControls.GridView>控制項和表單，以插入新的記錄。  
  
 一開始，資料會顯示在<xref:System.Web.UI.WebControls.GridView>控制項，以及選取的資料列的<xref:System.Web.UI.WebControls.GridView>也會顯示在<xref:System.Web.UI.WebControls.DetailsView>控制項。 <xref:System.Web.UI.WebControls.GridView>和<xref:System.Web.UI.WebControls.DetailsView>控制項使用不同的資料來源控制項; 相關聯的一個<xref:System.Web.UI.WebControls.DetailsView>具有<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>並<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>屬性，可確保所選的資料列的<xref:System.Web.UI.WebControls.GridView>是顯示此項目。  
  
 如果您按一下 自動產生**插入**按鈕<xref:System.Web.UI.WebControls.DetailsView>控制項，<xref:System.Web.UI.WebControls.DetailsView>顯示不同的使用者介面，可用來插入新的記錄。 範例會使用預存程序來插入記錄，並傳回插入的資料列的主索引鍵。 如果您在插入一筆記錄，<xref:System.Web.UI.WebControls.DetailsView>會自動填入<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>的呼叫與繫結資料行值的集合<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>方法。 <xref:System.Web.UI.WebControls.DetailsView>可以推斷正確的參數，從任何<xref:System.Web.UI.WebControls.BoundField>物件和參數<xref:System.Web.UI.WebControls.TemplateField>物件時使用 ASP.NET 的雙向資料繫結語法。 在此範例中，加入額外的參數在<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>事件處理常式來處理預存程序所傳回的主索引鍵。  
  
 最後，資料會插入資料庫之後<xref:System.Web.UI.WebControls.DetailsView>控制項中，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>事件處理常式會呼叫來處理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件，插入的資料列的主索引鍵的值會顯示和<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>方法<xref:System.Web.UI.WebControls.GridView>控制項明確地呼叫，以重新整理資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType InsertCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.InsertCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> 屬性中的文字是 SQL 陳述式還是預存程序的名稱。</summary>
        <value>其中一個 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值。 預設值為 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A>屬性會將委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
   
  
## Examples  
 下列程式碼範例示範如何從 Microsoft SQL Server 資料庫擷取資料，並顯示在<xref:System.Web.UI.WebControls.GridView>控制項。 它也會示範如何使用<xref:System.Web.UI.WebControls.DetailsView>以查看所選的資料列中的詳細資料的控制項<xref:System.Web.UI.WebControls.GridView>和表單，以插入新的記錄。  
  
 <xref:System.Web.UI.WebControls.GridView>控制項會顯示一組資料而<xref:System.Web.UI.WebControls.DetailsView>顯示特定的資料列詳細資料。 如果您按一下 自動產生**插入**按鈕<xref:System.Web.UI.WebControls.DetailsView>控制項，<xref:System.Web.UI.WebControls.DetailsView>顯示不同的使用者介面，可用來插入新的記錄。 範例會使用預存程序來插入記錄，並傳回插入的資料列的主索引鍵。 預存程序名稱在中設定<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>屬性，並識別做為預存程序，藉由設定<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A>屬性設<xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure>值。  
  
 資料插入資料庫之後<xref:System.Web.UI.WebControls.DetailsView>控制項中，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>事件處理常式會呼叫來處理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>會顯示事件，插入的資料列的主索引鍵的值，而<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>方法<xref:System.Web.UI.WebControls.GridView>控制會明確呼叫，以重新整理資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Inserted : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於插入作業已經完成時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>插入作業完成後，事件，以檢查的值輸出參數。 輸出參數都是從<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>與事件相關聯的物件。  
  
 如需有關如何處理事件的詳細資訊，請參閱 < [NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列程式碼範例示範如何從 Microsoft SQL Server 擷取資料並顯示在<xref:System.Web.UI.WebControls.GridView>控制項，以及如何使用<xref:System.Web.UI.WebControls.DetailsView>以查看所選的資料列中的詳細資料的控制項<xref:System.Web.UI.WebControls.GridView>和表單，以插入新的記錄。  
  
> [!NOTE]
>  此範例示範如何使用宣告式語法進行資料存取。 如需如何使用程式碼，而非標記來存取資料的資訊，請參閱[存取 Visual Studio 中的資料](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc)。  
  
 一開始，資料會顯示在<xref:System.Web.UI.WebControls.GridView>控制項，以及選取的資料列的<xref:System.Web.UI.WebControls.GridView>也會顯示在<xref:System.Web.UI.WebControls.DetailsView>控制項。 <xref:System.Web.UI.WebControls.GridView>和<xref:System.Web.UI.WebControls.DetailsView>控制項使用不同的資料來源控制項; 相關聯的一個<xref:System.Web.UI.WebControls.DetailsView>具有<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>並<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>屬性，可確保所選的資料列的<xref:System.Web.UI.WebControls.GridView>是顯示此項目。  
  
 如果您按一下 自動產生**插入**按鈕<xref:System.Web.UI.WebControls.DetailsView>控制項，<xref:System.Web.UI.WebControls.DetailsView>顯示不同的使用者介面，可用來插入新的記錄。 範例會使用預存程序來插入記錄，並傳回插入的資料列的主索引鍵。 如果您在插入一筆記錄，<xref:System.Web.UI.WebControls.DetailsView>會自動填入<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>的呼叫與繫結資料行值的集合<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>方法。 <xref:System.Web.UI.WebControls.DetailsView>可以推斷正確的參數，從任何<xref:System.Web.UI.WebControls.BoundField>物件和參數<xref:System.Web.UI.WebControls.TemplateField>物件時使用 ASP.NET 的雙向資料繫結語法。 在此範例中，加入額外的參數在<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>事件處理常式來處理預存程序所傳回的主索引鍵。  
  
 最後，資料會插入資料庫之後<xref:System.Web.UI.WebControls.DetailsView>控制項，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>事件處理常式會呼叫來處理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>會顯示事件，插入的資料列的主索引鍵的值，而<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>方法<xref:System.Web.UI.WebControls.GridView>控制項明確地呼叫，以重新整理資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Inserting : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在插入作業之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.SqlDataSource.Inserting>事件來執行特定應用程式時，用來驗證參數的值，或變更參數值之前的額外的初始化作業<xref:System.Web.UI.WebControls.SqlDataSource>控制項執行插入作業。 基礎資料來源的連接尚未開啟時不會呼叫事件處理常式委派。 因此，您無法取消此作業，直接藉由呼叫<xref:System.Data.Common.DbCommand.Cancel%2A>方法<xref:System.Data.Common.DbCommand>物件，由<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>屬性。 您可以不過，將在資料庫作業取消藉由設定<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>的屬性<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>物件到`true`。  
  
 如需有關如何處理事件的詳細資訊，請參閱 < [NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列程式碼範例示範如何從 Microsoft SQL Server 擷取資料並顯示在<xref:System.Web.UI.WebControls.GridView>控制項，以及如何使用<xref:System.Web.UI.WebControls.DetailsView>以查看所選的資料列中的詳細資料的控制項<xref:System.Web.UI.WebControls.GridView>和表單，以插入新的記錄。  
  
> [!NOTE]
>  此範例示範如何使用宣告式語法進行資料存取。 如需如何使用程式碼，而非標記來存取資料的資訊，請參閱[存取 Visual Studio 中的資料](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc)。  
  
 一開始，資料會顯示在<xref:System.Web.UI.WebControls.GridView>控制項，以及選取的資料列的<xref:System.Web.UI.WebControls.GridView>也會顯示在<xref:System.Web.UI.WebControls.DetailsView>控制項。 <xref:System.Web.UI.WebControls.GridView>和<xref:System.Web.UI.WebControls.DetailsView>控制項使用不同的資料來源控制項; 相關聯的一個<xref:System.Web.UI.WebControls.DetailsView>具有<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>並<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>屬性，可確保所選的資料列的<xref:System.Web.UI.WebControls.GridView>是顯示此項目。  
  
 如果您按一下 自動產生**插入**按鈕<xref:System.Web.UI.WebControls.DetailsView>控制項，<xref:System.Web.UI.WebControls.DetailsView>顯示不同的使用者介面，可用來插入新的記錄。 範例會使用預存程序來插入記錄，並傳回插入的資料列的主索引鍵。 如果您在插入一筆記錄，<xref:System.Web.UI.WebControls.DetailsView>會自動填入<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>的呼叫與繫結資料行值的集合<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>方法。 <xref:System.Web.UI.WebControls.DetailsView>可以推斷正確的參數，從任何<xref:System.Web.UI.WebControls.BoundField>物件和參數<xref:System.Web.UI.WebControls.TemplateField>使用 ASP.NET 的雙向資料繫結語法時。 在此範例中，加入額外的參數在<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>事件處理常式來處理預存程序所傳回的主索引鍵。  
  
 最後，資料會插入資料庫之後<xref:System.Web.UI.WebControls.DetailsView>控制項，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>事件處理常式會呼叫來處理<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>會顯示事件，插入的資料列的主索引鍵的值，而`DataBind`方法<xref:System.Web.UI.WebControls.GridView>控制項明確地呼叫，以重新整理資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得參數集合，包含與 <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> 控制項相關聯之 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 物件 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 屬性所使用的參數。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" />，包含 <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> 屬性所使用的參數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>屬性會擷取<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A>屬性所含<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>屬性包含參數化的 SQL 查詢<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>集合包含任何<xref:System.Web.UI.WebControls.Parameter>對應至 SQL 字串中參數預留位置的物件。  
  
 根據 ADO.NET 提供者，這是參數的順序<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>集合可能很重要。 <xref:System.Data.OleDb?displayProperty=nameWithType>和<xref:System.Data.Odbc?displayProperty=nameWithType>提供者建立關聯的參數出現在參數化 SQL 查詢的順序根據集合中的參數。 <xref:System.Data.SqlClient?displayProperty=nameWithType>提供者，也就是預設的 ADO.NET 提供者的<xref:System.Web.UI.WebControls.SqlDataSource>控制項，將集合中的參數，藉由比對的 SQL 查詢中的預留位置別名的參數名稱。 如需有關參數化的 SQL 查詢和命令的詳細資訊，請參閱 <<c0> [ 使用的參數，使用 SqlDataSource 控制項](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
> [!IMPORTANT]
>  值插入參數，而不需驗證，也就是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
   
  
## Examples  
 下列程式碼範例示範如何將資料插入資料庫，使用<xref:System.Web.UI.WebControls.SqlDataSource>控制項和簡單的 Web Form 網頁。 目前的資料，資料表中的資料會顯示在<xref:System.Web.UI.WebControls.DropDownList>控制項。 您可以藉由輸入值中的新增記錄<xref:System.Web.UI.WebControls.TextBox>控制項，然後按一下**插入** 按鈕。 當**插入**按一下按鈕時，為指定的值會插入至資料庫，而<xref:System.Web.UI.WebControls.DropDownList>控制重新整理。  
  
> [!IMPORTANT]
>  此範例包含可接受使用者輸入，也就是潛在的安全性威脅，文字方塊中，值插入參數，而不需驗證，這也是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Inserting>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
> [!NOTE]
>  此範例示範如何使用宣告式語法進行資料存取。 如需如何使用程式碼，而非標記來存取資料的資訊，請參閱[存取 Visual Studio 中的資料](http://msdn.microsoft.com/library/9812a6d5-23d2-4427-8b98-70a2abfec3bc)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="sqlDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">表示 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 狀態的物件。</param>
        <summary>載入 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控制項中需要保存的屬性狀態。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.LoadViewState%2A>方法來載入先前儲存的檢視狀態的<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OldValuesParameterFormatString : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定格式字串，套用至傳遞給 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" /> 或 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Update" /> 方法之任何參數的名稱。</summary>
        <value>字串，表示套用至傳遞給 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" /> 或 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Update" /> 方法之任何 <paramref name="oldValues" /> 參數名稱的格式字串。 預設值為「{0}」。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>格式字串只會套用到主索引鍵，例如那些由識別`DataKeyNames`屬性的相關聯的資料繫結控制項，或刪除和更新案例其中<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions.CompareAllValues>值和一組`oldValues`會傳遞至對應的資料方法。 在此情況下，格式字串套用至每個參數名稱，在`oldValues`集合。  
  
 兩種常見的案例，您可能會在其中變更<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>屬性如下所示：  
  
-   若要區分在更新中的舊和新值。 當<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions.CompareAllValues>值，參數的原始和新的值都會加入<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。 沒有格式化的字串，具有相同名稱的兩個參數就會建立每個資料欄位。 藉由變更原始值參數的名稱，您可以比較資料與原始的資料來源，以便偵測衝突，並比較索引鍵的值。  
  
-   有些視覺化設計工具會實作特定的命名配置，針對原始值和索引鍵。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="sqlDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
        <summary>將 <see cref="E:System.Web.UI.Page.LoadComplete" /> 事件處理常式加入包含 <see cref="T:System.Web.UI.Page" /> 控制項的 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控制項。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 加入事件處理常式<xref:System.Web.UI.WebControls.SqlDataSource>物件更新<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>值。 在更新的值，如果<xref:System.Web.UI.IDataSource.DataSourceChanged>引發事件時，造成任何繫結至的控制項<xref:System.Web.UI.WebControls.SqlDataSource>重新繫結的控制項。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderName">
      <MemberSignature Language="C#" Value="public virtual string ProviderName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ProviderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ProviderName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderName : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.ProviderName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.WebControls.DataProviderNameConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 .NET Framework 資料提供者的名稱，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控制項會用來連接至基礎資料來源。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 使用的資料提供者名稱，如果未設定提供者，則為 Microsoft SQL Server 的 ADO.NET。 預設值為 Microsoft SQL Server 的 ADO.NET。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework 包含下列資料提供者：  
  
-   <xref:System.Data.SqlClient?displayProperty=nameWithType>提供者是.NET Framework Data Provider for SQL Server 的預設值。  
  
-   <xref:System.Data.OleDb?displayProperty=nameWithType>提供者是.NET Framework Data Provider for OLE DB。  
  
-   <xref:System.Data.Odbc?displayProperty=nameWithType>提供者是.NET Framework Data Provider for ODBC。  
  
-   <xref:System.Data.OracleClient?displayProperty=nameWithType>提供者是.NET Framework Data Provider for Oracle。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>永遠不會設定為未受管理的 ADO.NET 提供者的名稱這類`MSDAORA`。 如需詳細資訊，請參閱 <<c0> [ 使用 SqlDataSource 控制項的選取資料](http://msdn.microsoft.com/library/44623286-ff5a-4148-8a3c-85c56ed545eb)。  
  
 如果您變更<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>屬性，<xref:System.Web.UI.IDataSource.DataSourceChanged>引發事件時，造成任何繫結至的控制項<xref:System.Web.UI.WebControls.SqlDataSource>重新繫結。  
  
 可用的提供者清單中指定`DbProviderFactories`子區段`system.data`Machine.config 檔的區段。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼示範如何連線到 SQL Server 資料庫，使用預設.NET Framework Data Provider for SQL Server<xref:System.Web.UI.WebControls.SqlDataSource>控制項， <xref:System.Data.SqlClient?displayProperty=nameWithType>。 第二個程式碼範例示範如何使用.NET Framework Data Provider for ODBC，ODBC 資料庫連接<xref:System.Data.Odbc?displayProperty=nameWithType>。  
  
 下列程式碼範例示範如何連接到 SQL Server 資料庫使用的預設資料提供者<xref:System.Web.UI.WebControls.SqlDataSource>控制項， <xref:System.Data.SqlClient?displayProperty=nameWithType>。 每當<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>未明確設定屬性，會使用預設提供者。 <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>屬性是特定提供者。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/CS/sql1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/VB/sql1vb.aspx#1)]  
  
 下列程式碼範例中，也就是在功能上與先前的程式碼範例相同，示範如何使用.NET Framework Data Provider for ODBC，ODBC 資料庫連接<xref:System.Data.Odbc?displayProperty=nameWithType>。 <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>屬性設定為 ODBC 資料來源名稱 (DSN) 是用來連接至 ODBC 資料庫的名稱。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1odbc/CS/odbc1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1odbc/VB/odbc1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="sqlDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>儲存 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控制項的目前檢視狀態。</summary>
        <returns>包含 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 之儲存狀態的物件。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (arguments As DataSourceSelectArguments) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select(System::Web::UI::DataSourceSelectArguments ^ arguments);" />
      <MemberSignature Language="F#" Value="member this.Select : System.Web.UI.DataSourceSelectArguments -&gt; System.Collections.IEnumerable" Usage="sqlDataSource.Select arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">
          <see cref="T:System.Web.UI.DataSourceSelectArguments" /> 物件，用於針對基本資料擷取以外的資料要求作業。</param>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> SQL 字串和 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> 集合中的任何參數，從基礎資料庫擷取資料。</summary>
        <returns>資料列的 <see cref="T:System.Collections.IEnumerable" /> 清單。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>期間，會自動呼叫方法<xref:System.Web.UI.Control.PreRender>頁面生命週期的階段。 它會呼叫已附加至的資料繫結控制項<xref:System.Web.UI.WebControls.SqlDataSource>控制項透過其<xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>屬性。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法會傳回<xref:System.Data.DataView>物件，如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設定為<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet>值。 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法會傳回<xref:System.Data.IDataReader>物件，如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設定為<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader>值。 關閉<xref:System.Data.IDataReader>物件，當您完成讀取資料。  
  
 再<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>執行作業時，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A>方法呼叫來引發<xref:System.Web.UI.WebControls.SqlDataSource.Selecting>事件。 您可以處理這個事件來檢查參數的值，並執行任何處理之前<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>作業。  
  
 在後<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>作業完成時，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A>方法呼叫來引發<xref:System.Web.UI.WebControls.SqlDataSource.Selected>事件。 您可以處理這個事件來檢查任何傳回值和錯誤碼，並執行任何後續處理。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設定為<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet?displayProperty=nameWithType>並已啟用快取，則<xref:System.Web.UI.WebControls.SqlDataSource>物件擷取資料，並將資料儲存至快取期間<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>作業。 快取建立時，已捨棄，或重新整理基礎的組合所指定的快取行為<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>屬性。  
  
> [!IMPORTANT]
>  當您使用在 Microsoft Windows 驗證的用戶端模擬時，第一位使用者存取資料時，會快取資料。 如果另一位使用者要求相同的資料，就會從快取擷取資料。 藉由另一個呼叫資料庫來驗證使用者的存取資料，不會擷取資料。 如果您預期有一個以上的使用者存取資料，而且您想要每個擷取資料，由資料庫的安全性設定來加以驗證，請勿使用快取。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設定為<xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet?displayProperty=nameWithType>並<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>已指定屬性、 篩選條件運算式會評估與任何提供<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>屬性和結果篩選條件期間會套用到的資料清單<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>作業。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。 若要執行資料擷取作業，<xref:System.Web.UI.WebControls.SqlDataSourceView>建置<xref:System.Data.Common.DbCommand>使用的物件<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>文字和任何相關聯<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>值，然後再執行<xref:System.Data.Common.DbCommand>對基礎資料庫。  
  
> [!IMPORTANT]
>  值插入參數，而不需驗證，也就是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
   
  
## Examples  
 下列範例示範如何以程式設計方式呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法，並設定查詢的結果為基礎的值。 下列範例顯示 Web 控制項的宣告式程式碼。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource.Select#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource.Select#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/VB/Default.aspx#1)]  
  
 下列範例示範如何以程式設計方式呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法。 <xref:System.Web.UI.WebControls.SqlDataSource>控制項傳回一個整數。 整數值用來設定的文字<xref:System.Web.UI.WebControls.Label>控制項，並判斷是否要顯示<xref:System.Web.UI.WebControls.HyperLink>控制項。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource.Select#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/VB/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 物件無法建立與基礎資料來源的連接。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public string SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 SQL 字串，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控制項會用來擷取基礎資料庫的資料。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 用來擷取資料的 SQL 字串或預存程序名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性代表 SQL 查詢還是預存程序中，名稱，而且由<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法，以擷取 SQL Server 資料庫中的資料。 如果您在選取的命令中使用星號 （*），以選取所有資料行，而且如果您使用自動產生程式碼來執行更新或刪除作業，請確定沒有資料行就會有其名稱中的空格。  
  
 由於不同的資料庫產品使用不同的 SQL，SQL 字串的語法須視目前所使用的 ADO.NET 提供者 (可由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 屬性識別) 而定。 如果 SQL 字串是參數型查詢或命令，參數的替代符號亦須視目前所使用的 ADO.NET 提供者而定。 例如，如果提供者<xref:System.Data.SqlClient?displayProperty=nameWithType>，這是預設提供者<xref:System.Web.UI.WebControls.SqlDataSource>類別，該參數的替代符號是`'@parameterName'`。 不過，如果提供者設定為<xref:System.Data.Odbc?displayProperty=nameWithType>或是<xref:System.Data.OleDb?displayProperty=nameWithType>，參數的預留位置`'?'`。 如需有關參數化的 SQL 查詢和命令的詳細資訊，請參閱 <<c0> [ 使用的參數，使用 SqlDataSource 控制項](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性可以是 SQL 字串或預存程序中，名稱，如果資料來源支援預存程序。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性會將委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
> [!IMPORTANT]
>  基於安全考量，<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性不會儲存檢視狀態。 因為它可能會有要解碼的用戶端上的檢視狀態內容，在檢視中儲存機密資訊的資料庫結構狀態可能會導致資訊洩漏弱點。  
  
> [!IMPORTANT]
>  值插入參數，而不需驗證，也就是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何設定<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>基本的 SQL 查詢，以從 ODBC 相容資料庫中擷取資料，並顯示在文字<xref:System.Web.UI.WebControls.GridView>控制項。 第二個程式碼範例示範如何設定<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>預存程序名稱的文字和<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A>屬性設<xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure>值，以從 Microsoft SQL Server 資料庫擷取資料，並顯示在<xref:System.Web.UI.WebControls.DropDownList>控制項。  
  
 在這兩個範例中，沒有不需要明確呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法因為附加至資料來源的資料繫結控制項控制透過<xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>屬性會自動呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>期間方法<xref:System.Web.UI.Control.PreRender>階段。  
  
 下列程式碼範例示範如何設定<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>基本的 SQL 查詢，以從 ODBC 相容資料庫中擷取資料，並顯示在文字<xref:System.Web.UI.WebControls.GridView>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_4odbc/CS/odbc4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_4odbc/VB/odbc4vb.aspx#1)]  
  
 下列程式碼範例示範如何設定<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>預存程序名稱的文字和<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A>屬性設<xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure>值，以擷取 SQL Server 資料庫中的資料，並顯示在<xref:System.Web.UI.WebControls.DropDownList>控制項。 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性可以是 SQL 查詢或預存程序中，名稱，如果資料來源支援預存程序。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType SelectCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.SelectCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> 屬性中的文字是 SQL 查詢還是預存程序的名稱。</summary>
        <value>其中一個 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值。 預設值為 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A>屬性會將委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
   
  
## Examples  
 下列程式碼範例示範如何設定<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>預存程序名稱的文字和<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A>屬性設<xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure>值，才能從 Microsoft SQL Server 資料庫擷取資料，並顯示在<xref:System.Web.UI.WebControls.DropDownList>控制項。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Selected : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於資料擷取作業已經完成時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.SqlDataSource.Selected>資料擷取作業完成後，事件，以檢查的值輸出參數。 輸出參數都是從<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>與事件相關聯的物件。  
  
 如需有關如何處理事件的詳細資訊，請參閱 < [NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As SqlDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler " Usage="member this.Selecting : System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在資料擷取作業之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.SqlDataSource.Selecting>事件來執行特定應用程式時，用來驗證參數的值，或變更參數值之前的額外的初始化作業<xref:System.Web.UI.WebControls.SqlDataSource>控制項執行選取的作業。 選取的引數都是從<xref:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs>與事件相關聯的物件。  
  
 如需有關如何處理事件的詳細資訊，請參閱 < [NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得參數集合，包含與 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> 控制項相關聯之 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 物件 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 屬性所使用的參數。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" />，包含 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> 屬性所使用的參數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性包含參數化的 SQL 查詢<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>集合包含任何<xref:System.Web.UI.WebControls.Parameter>對應至 SQL 字串中參數預留位置的物件。  
  
 根據 ADO.NET 提供者，這是參數的順序<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>集合可能很重要。 <xref:System.Data.OleDb?displayProperty=nameWithType>和<xref:System.Data.Odbc?displayProperty=nameWithType>提供者建立關聯的參數出現在參數化 SQL 查詢的順序根據集合中的參數。 <xref:System.Data.SqlClient?displayProperty=nameWithType>提供者，也就是預設的 ADO.NET 提供者的<xref:System.Web.UI.WebControls.SqlDataSource>控制項，將集合中的參數，藉由比對的 SQL 查詢中的預留位置別名的參數名稱。 如需有關參數化的 SQL 查詢和命令的詳細資訊，請參閱 <<c0> [ 使用的參數，使用 SqlDataSource 控制項](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>屬性會擷取<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A>屬性所含<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
> [!IMPORTANT]
>  值插入參數，而不需驗證，也就是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Selecting>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
   
  
## Examples  
 下列程式碼範例示範如何從 Microsoft SQL Server 中 Northwind 資料庫中擷取資料，藉由設定<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>SQL 查詢的屬性。 在參數化 SQL 查詢和在預留位置<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性會對應到<xref:System.Web.UI.WebControls.ControlParameter>物件加入至<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>集合。 <xref:System.Web.UI.WebControls.DropDownList>控制哪些<xref:System.Web.UI.WebControls.ControlParameter>繫結至、 做為篩選條件的項目會顯示在<xref:System.Web.UI.WebControls.ListBox>控制項。  
  
 如需其他類型，您可以使用的參數資訊，請參閱<xref:System.Web.UI.WebControls.Parameter>類別概觀。  
  
> [!NOTE]
>  因為參數用在 WHERE 子句中，使用<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>程式碼範例中的屬性相當於使用<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>屬性。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/CS/sql2cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/VB/sql2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SortParameterName : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定預存程序參數的名稱，用於在使用預存程序執行資料擷取時，對擷取的資料進行排序。</summary>
        <value>預存程序參數的名稱，用於在使用預存程序執行資料擷取時，對擷取的資料進行排序。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>評估屬性只有當 SQL 命令也就是包含<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>屬性是預存程序的名稱。 在此情況下，如果<xref:System.Web.UI.WebControls.SqlDataSource.SortParameterName%2A>屬性設定，其中包含用來排序結果的預存程序參數的名稱。  
  
 如果<xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>屬性設定，它會附加至<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SqlCacheDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SqlCacheDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SqlCacheDependency : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定以分號分隔的字串，表示用於 Microsoft SQL Server 快取相依性的資料庫和資料表。</summary>
        <value>字串，表示用於 SQL Server 快取相依性的資料庫和資料表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource>控制項支援根據選擇性的到期原則<xref:System.Web.Caching.SqlCacheDependency>（服務必須設定為資料庫伺服器） 的資料快取的物件。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A>字串會識別資料庫和資料表根據相同的格式，可由`@ Page`指示詞，其中字串的第一個部分是 Microsoft SQL Server 資料庫的連接字串，後面接著冒號分隔符號和最後資料庫資料表的名稱 (例如`"connectionstring1:table1"`)。 如果<xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A>取決於多個資料表的屬性、 連接字串和表格名稱組會以分號 (比方說， `"connectionstring1:table1";connectionstring2:table2"`)。  
  
> [!IMPORTANT]
>  當您使用在 Microsoft Windows 驗證的用戶端模擬時，第一位使用者存取資料時，會快取資料。 如果另一位使用者要求相同的資料，就會從快取擷取資料。 藉由另一個呼叫資料庫來驗證使用者的存取資料，不會擷取資料。 如果您預期有一個以上的使用者存取資料，而且您想要每個擷取資料的安全性組態資料庫所要驗證，請勿使用快取。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立 SQL Server 快取相依性，並設定<xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSource>控制項。 在此範例中，資料庫是每隔 120 秒輪詢。 Northwind Traders 員工中的資料期間，資料表的變更時間，快取的任何資料<xref:System.Web.UI.WebControls.SqlDataSource>控制項，並顯示<xref:System.Web.UI.WebControls.GridView>控制重新整理<xref:System.Web.UI.WebControls.SqlDataSource>控制下一步 就會輪詢資料庫的時間。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_23sql/CS/sql23cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_23sql/VB/sql23vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="sqlDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>追蹤 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控制項的檢視狀態變更，以便變更可以儲存在控制項的 <see cref="T:System.Web.UI.StateBag" /> 物件中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.TrackViewState%2A>標示的起點開始追蹤並儲存變更至控制項的控制項檢視狀態的一部分，會覆寫方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Update" />
      <MemberSignature Language="VB.NET" Value="Public Function Update () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update();" />
      <MemberSignature Language="F#" Value="member this.Update : unit -&gt; int" Usage="sqlDataSource.Update " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> SQL 字串和 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" /> 集合中的任何參數，執行更新作業。</summary>
        <returns>表示基礎資料庫中更新之資料列數的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>方法會自動呼叫<xref:System.Web.UI.WebControls.GridView>， <xref:System.Web.UI.WebControls.DetailsView>，和<xref:System.Web.UI.WebControls.FormView>控制在回傳期間，如果資料已經變更。 在其他控制項中，已變更的資料<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>在回傳期間可以明確地呼叫方法<xref:System.Windows.Forms.Form.Load>事件。  
  
 再<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>執行作業時，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A>方法呼叫來引發<xref:System.Web.UI.WebControls.SqlDataSource.Updating>事件。 您可以處理這個事件來檢查參數的值，並執行任何前置處理之前<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>作業。  
  
 在後<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>作業完成時，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A>方法呼叫來引發<xref:System.Web.UI.WebControls.SqlDataSource.Updated>事件。 您可以處理這個事件來檢查任何傳回值和錯誤碼，並執行任何後續處理。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>方法會委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>方法<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。 若要執行更新作業，<xref:System.Web.UI.WebControls.SqlDataSourceView>組建<xref:System.Data.Common.DbCommand>物件使用<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>文字以及任何相關聯<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>屬性，然後執行<xref:System.Data.Common.DbCommand>對基礎資料庫的物件。  
  
> [!IMPORTANT]
>  值插入參數，而不需驗證，也就是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Updating>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控制項來顯示中的資料<xref:System.Web.UI.WebControls.DropDownList>控制和更新資料時**送出**按一下按鈕時。 第二個程式碼範例示範如何顯示從 Microsoft SQL Server 資料庫中擷取的資料<xref:System.Web.UI.WebControls.DropDownList>控制項，並更新記錄使用<xref:System.Web.UI.WebControls.TextBox>控制項。  
  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控制項來顯示中的資料<xref:System.Web.UI.WebControls.DropDownList>控制和更新資料時**送出**按一下按鈕時。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>屬性設定與參數化的 SQL 陳述式，以及兩個<xref:System.Web.UI.WebControls.ControlParameter>參數新增至<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合。 當**提交**按一下按鈕時，<xref:System.Web.UI.WebControls.Button.OnClick%2A>處理事件，以呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>方法明確。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 下列程式碼範例示範如何顯示資料從 SQL Server 資料庫中擷取<xref:System.Web.UI.WebControls.DropDownList>控制項，並更新記錄使用<xref:System.Web.UI.WebControls.TextBox>控制項。 此範例示範如何使用<xref:System.Data.Common.DbTransaction>物件時使用，將交易內容<xref:System.Web.UI.WebControls.SqlDataSource>控制項更新資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 不能以基礎資料來源建立連接。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public string UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateCommand { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : string with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 SQL 字串，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 控制項會用來更新基礎資料庫的資料。</summary>
        <value>SQL 字串，<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 會用來更新資料。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>代表 SQL 查詢或預存程序中，名稱，並由<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>方法。  
  
 由於不同的資料庫產品使用不同的 SQL，SQL 字串的語法須視目前所使用的 ADO.NET 提供者 (可由 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 屬性識別) 而定。 如果 SQL 字串是參數型查詢或命令，參數的替代符號亦須視目前所使用的 ADO.NET 提供者而定。 例如，如果提供者<xref:System.Data.SqlClient?displayProperty=nameWithType>，這是預設提供者<xref:System.Web.UI.WebControls.SqlDataSource>類別，該參數的替代符號是`'@parameterName'`。 不過，如果提供者設定為<xref:System.Data.Odbc?displayProperty=nameWithType>或是<xref:System.Data.OleDb?displayProperty=nameWithType>，參數的預留位置`'?'`。 如需有關參數化的 SQL 查詢和命令的詳細資訊，請參閱 <<c0> [ 使用的參數，使用 SqlDataSource 控制項](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>屬性可以是 SQL 字串或預存程序中，名稱，如果資料來源支援預存程序。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>屬性會將委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
> [!IMPORTANT]
>  基於安全考量，<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>屬性不會儲存檢視狀態。 因為它可能會有要解碼的用戶端上的檢視狀態內容，在檢視中儲存機密資訊的資料庫結構狀態可能會導致資訊洩漏弱點。  
  
> [!IMPORTANT]
>  值插入參數，而不需驗證，也就是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
   
  
## Examples  
 本節包含兩個程式碼範例。 第一個程式碼範例示範如何設定<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>的屬性<xref:System.Web.UI.WebControls.SqlDataSource>Microsoft SQL Server database 中的控制和更新資料<xref:System.Web.UI.WebControls.GridView>控制項。 第二個程式碼範例示範如何更新中的資料 ODBC 資料庫<xref:System.Web.UI.WebControls.GridView>控制項。  
  
 下列程式碼範例示範如何設定<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>的屬性<xref:System.Web.UI.WebControls.SqlDataSource>控制和更新的資料，在 SQL Server 資料庫中使用<xref:System.Web.UI.WebControls.GridView>控制項。 <xref:System.Web.UI.WebControls.GridView>會自動填入<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合中，推斷的參數<xref:System.Web.UI.WebControls.BoundField>物件，並呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>方法時**Update**連結可以讓您編輯<xref:System.Web.UI.WebControls.GridView>已選取。 這個範例也包含一些後置處理： 記錄更新之後，傳送通知電子郵件訊息。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/CS/sql7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/VB/sql7vb.aspx#1)]  
  
 下列程式碼範例中，也就是功能上與先前的程式碼範例，示範如何更新中的資料 ODBC 資料庫<xref:System.Web.UI.WebControls.GridView>控制項。 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>設定為 ODBC 的 ADO.NET 提供者<xref:System.Data.Odbc?displayProperty=nameWithType>，和<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>屬性設定為 ODBC 資料來源名稱 (DSN) 的名稱。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommandType As SqlDataSourceCommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::SqlDataSourceCommandType UpdateCommandType { System::Web::UI::WebControls::SqlDataSourceCommandType get(); void set(System::Web::UI::WebControls::SqlDataSourceCommandType value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommandType : System.Web.UI.WebControls.SqlDataSourceCommandType with get, set" Usage="System.Web.UI.WebControls.SqlDataSource.UpdateCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> 屬性中的文字是 SQL 陳述式還是預存程序的名稱。</summary>
        <value>其中一個 <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 值。 預設值為 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType%2A>屬性會將委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As SqlDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceStatusEventHandler ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " Usage="member this.Updated : System.Web.UI.WebControls.SqlDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於更新作業已經完成時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.SqlDataSource.Updated>事件，以檢查的值更新作業完成後，輸出參數。 輸出參數都是從<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>與事件相關聯的物件。  
  
 如需有關如何處理事件的詳細資訊，請參閱 < [NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列程式碼範例示範如何顯示及更新資料從 ODBC 資料庫中擷取<xref:System.Web.UI.WebControls.GridView>控制項。 已成功更新記錄之後，<xref:System.Web.UI.WebControls.SqlDataSource.Updated>事件由事件處理常式執行後置處理步驟傳送電子郵件通知的位置。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得參數集合，包含與 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> 控制項相關聯之 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> 控制項 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 屬性所使用的參數。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ParameterCollection" />，包含 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> 屬性所使用的參數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>屬性包含參數化的 SQL 查詢<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合包含任何<xref:System.Web.UI.WebControls.Parameter>對應至 SQL 字串中參數預留位置的物件。  
  
 參數名稱可能會受到<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>屬性，特別是如果名稱會識別主索引鍵，例如使用指定的索引鍵時，才`DataKeyNames`屬性的資料繫結控制項，或刪除和更新案例其中<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions.CompareAllValues>值和一組`oldValues`會傳遞至對應的資料方法。 在此情況下，格式字串套用至每個參數名稱，在`oldValues`集合。  
  
 參數的順序<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合可能是重要的是，根據的 ADO.NET 提供者。 <xref:System.Data.OleDb?displayProperty=nameWithType>和<xref:System.Data.Odbc?displayProperty=nameWithType>提供者建立關聯的參數出現在參數化 SQL 查詢的順序根據集合中的參數。 <xref:System.Data.SqlClient?displayProperty=nameWithType>提供者，也就是預設的 ADO.NET 提供者的<xref:System.Web.UI.WebControls.SqlDataSource>控制項，將集合中的參數，藉由比對的 SQL 查詢中的預留位置別名的參數名稱。 如需有關參數化的 SQL 查詢和命令的詳細資訊，請參閱 <<c0> [ 使用的參數，使用 SqlDataSource 控制項](http://msdn.microsoft.com/library/403ff44a-dd0b-484d-968e-dcd1dcd4c295)。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>屬性會擷取<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>屬性所含<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。  
  
> [!IMPORTANT]
>  值插入參數，而不需驗證，也就是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.UI.WebControls.SqlDataSource>控制項來顯示中的資料<xref:System.Web.UI.WebControls.DropDownList>控制和更新資料時**送出**按一下按鈕時。 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>設定與參數化的 SQL 陳述式和兩個<xref:System.Web.UI.WebControls.ControlParameter>參數新增至<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合。 當**提交**按一下按鈕時，<xref:System.Web.UI.WebControls.Button.OnClick%2A>處理事件，以呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>方法明確。  
  
> [!IMPORTANT]
>  此範例包含可接受使用者輸入，也就是潛在的安全性威脅，文字方塊中，值插入參數，而不需驗證，這也是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Inserting>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As SqlDataSourceCommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::SqlDataSourceCommandEventHandler ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " Usage="member this.Updating : System.Web.UI.WebControls.SqlDataSourceCommandEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在更新作業之前發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 處理<xref:System.Web.UI.WebControls.SqlDataSource.Updating>事件來執行特定應用程式時，用來驗證參數的值，或變更參數值之前的額外的初始化作業<xref:System.Web.UI.WebControls.SqlDataSource>控制項執行更新作業。 基礎資料來源的連接尚未開啟時不會呼叫事件處理常式委派。 因此，您無法直接取消<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>藉由呼叫資料庫作業<xref:System.Data.Common.DbCommand.Cancel%2A>方法<xref:System.Data.Common.DbCommand>所公開的物件<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>物件。 您可以不過，將在資料庫作業取消藉由設定<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>的屬性<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>至`true`。  
  
 如需有關如何處理事件的詳細資訊，請參閱 < [NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
> [!IMPORTANT]
>  值插入參數，而不需驗證，也就是潛在的安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Updating>事件來執行查詢之前，先驗證參數值。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
   
  
## Examples  
 下列程式碼範例示範如何顯示從 Microsoft SQL Server 資料庫中擷取的資料<xref:System.Web.UI.WebControls.DropDownList>控制項，並更新記錄使用<xref:System.Web.UI.WebControls.TextBox>控制項。 此範例示範如何使用<xref:System.Data.Common.DbTransaction>物件時使用，將交易內容<xref:System.Web.UI.WebControls.SqlDataSource>控制項更新資料。  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
  </Members>
</Type>