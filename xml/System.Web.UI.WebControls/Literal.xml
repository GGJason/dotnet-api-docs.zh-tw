<Type Name="Literal" FullName="System.Web.UI.WebControls.Literal">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="da4756060716171494e14cbbe327cdb95c3164c2" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36580497" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Literal : System.Web.UI.Control, System.Web.UI.ITextControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Literal extends System.Web.UI.Control implements class System.Web.UI.ITextControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Literal" />
  <TypeSignature Language="VB.NET" Value="Public Class Literal&#xA;Inherits Control&#xA;Implements ITextControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Literal : System::Web::UI::Control, System::Web::UI::ITextControl" />
  <TypeSignature Language="F#" Value="type Literal = class&#xA;    inherit Control&#xA;    interface ITextControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.ITextControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LiteralDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.WebControls.LiteralControlBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>在網頁上保留顯示靜態文字的位置。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本主題內容：  
  
-   [簡介](#introduction)  
  
-   [宣告式語法](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>簡介  
 使用<xref:System.Web.UI.WebControls.Literal?displayProperty=nameWithType>控制来保留在網頁上顯示文字的位置。 <xref:System.Web.UI.WebControls.Literal>控制項是類似於<xref:System.Web.UI.WebControls.Label>控制項，除了<xref:System.Web.UI.WebControls.Literal>控制項不允許您將樣式套用至顯示的文字。 您可以透過程式設計方式控制藉由設定在控制項中顯示的文字<xref:System.Web.UI.WebControls.Literal.Text%2A>屬性。  
  
> [!CAUTION]
>  此控制項可以用來顯示使用者輸入，其中可能包含惡意用戶端指令碼。 請檢查從用戶端可執行的指令碼、 SQL 陳述式，或其他程式碼傳送之後，顯示應用程式中的任何資訊。 ASP.NET 提供使用者輸入來封鎖指令碼和 HTML 的輸入的要求驗證功能。 驗證伺服器控制項也會提供以評估使用者輸入。  
  
 如需有關安全性的詳細資訊，請參閱[保護標準控制項](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8)， [How to： 保護對指令碼會利用 Web 應用程式中藉由套用 HTML 編碼字串](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b)，和[ASP.NET Web Pages 中驗證使用者輸入](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>宣告式語法  
  
```  
<asp:Literal  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    Mode="Transform|PassThrough|Encode"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    Text="string"  
    Visible="True|False"  
/>  
```  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Web.UI.WebControls.Literal>控制項顯示靜態文字。  
  
> [!NOTE]
>  下列範例會使用單一檔案的程式碼模型，並可能無法正常運作如果直接複製到程式碼後置檔案。 這個程式碼範例必須複製到.aspx 副檔名的空白文字檔。 如需 Web Form 程式碼模型的詳細資訊，請參閱[ASP.NET Web Form 網頁程式碼模型](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417)。  
  
 [!code-aspx-csharp[Literal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Literal/CS/literalcs.aspx#1)]
 [!code-aspx-vb[Literal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Literal/VB/literalvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.Label" />
    <altmember cref="P:System.Web.UI.WebControls.Literal.Text" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Literal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Literal();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.Literal" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParsedSubObject">
      <MemberSignature Language="C#" Value="protected override void AddParsedSubObject (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddParsedSubObject(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.AddParsedSubObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddParsedSubObject (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddParsedSubObject(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.AddParsedSubObject : obj -&gt; unit" Usage="literal.AddParsedSubObject obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">代表已剖析項目的 <see cref="T:System.Object" />。</param>
        <summary>通知 <see cref="T:System.Web.UI.ControlCollection" /> 控制項已剖析 XML 或 HTML 項目，並將該項目加入至控制項的 <see cref="T:System.Web.UI.WebControls.Literal" /> 中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何覆寫<xref:System.Web.UI.WebControls.Literal.AddParsedSubObject%2A>自訂的伺服器中的方法控制，好讓它永遠會設定<xref:System.Web.UI.WebControls.Literal.Text%2A>已剖析的物件的屬性`Text`屬性的已剖析的物件是否<xref:System.Web.UI.WebControls.Literal>，並為空白`string`否則。  
  
 [!code-aspx-csharp[CustomLiteralAddParsedSubObject#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/CS/custom_literal_addparsedsubobjectcs.aspx#1)]
 [!code-aspx-vb[CustomLiteralAddParsedSubObject#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/VB/custom_literal_addparsedsubobjectvb.aspx#1)]  
  
 [!code-csharp[CustomLiteralAddParsedSubObject#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/CS/custom_literal_addparsedsubobject.cs#2)]
 [!code-vb[CustomLiteralAddParsedSubObject#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/VB/custom_literal_addparsedsubobject.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="obj" /> 不是 <see cref="T:System.Web.UI.LiteralControl" /> 型別。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberSignature Language="F#" Value="override this.CreateControlCollection : unit -&gt; System.Web.UI.ControlCollection" Usage="literal.CreateControlCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>針對 <see cref="T:System.Web.UI.WebControls.Literal" /> 控制項目前的執行個體，建立 <see cref="T:System.Web.UI.EmptyControlCollection" /> 物件。</summary>
        <returns>
          <see cref="T:System.Web.UI.ControlCollection" /> 物件，包含目前伺服器控制項的子伺服器控制項。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何覆寫<xref:System.Web.UI.WebControls.Literal.CreateControlCollection%2A>方法中自訂的伺服器控制項，以便一律會傳回的執行個體<xref:System.Web.UI.EmptyControlCollection>類別<xref:System.Web.UI.WebControls.Literal>物件。  
  
 [!code-aspx-csharp[CustomLiteralCreateControlCollection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/CS/custom_literal_createcontrolcollectioncs.aspx#1)]
 [!code-aspx-vb[CustomLiteralCreateControlCollection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/VB/custom_literal_createcontrolcollectionvb.aspx#1)]  
  
 [!code-csharp[CustomLiteralCreateControlCollection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/CS/custom_literal_createcontrolcollection.cs#2)]
 [!code-vb[CustomLiteralCreateControlCollection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/VB/custom_literal_createcontrolcollection.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public override void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Focus();" />
      <MemberSignature Language="F#" Value="override this.Focus : unit -&gt; unit" Usage="literal.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>設定控制項的輸入焦點；<see cref="M:System.Web.UI.WebControls.Literal.Focus" /> 控制項上不支援 <see cref="T:System.Web.UI.WebControls.Literal" /> 基底控制項方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Literal>控制覆寫<xref:System.Web.UI.Control.Focus%2A>基底類別的方法。 <xref:System.Web.UI.WebControls.Literal.Focus%2A>方法<xref:System.Web.UI.WebControls.Literal>控制項一律會擲回的例外狀況，表示<xref:System.Web.UI.WebControls.Literal.Focus%2A>上不支援方法<xref:System.Web.UI.WebControls.Literal>控制項。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">在 <see cref="M:System.Web.UI.WebControls.Literal.Focus" /> 上呼叫 <see cref="T:System.Web.UI.WebControls.Literal" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LiteralMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.LiteralMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Literal.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As LiteralMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LiteralMode Mode { System::Web::UI::WebControls::LiteralMode get(); void set(System::Web::UI::WebControls::LiteralMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Web.UI.WebControls.LiteralMode with get, set" Usage="System.Web.UI.WebControls.Literal.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LiteralMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定列舉值，指定 <see cref="T:System.Web.UI.WebControls.Literal" /> 控制項的內容如何呈現。</summary>
        <value>其中一個 <see cref="T:System.Web.UI.WebControls.LiteralMode" /> 列舉值。 預設值為 <see langword="Transform" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.Literal.Mode%2A>屬性來指定如何內容<xref:System.Web.UI.WebControls.Literal>應該呈現控制項。 這個屬性會設定使用其中一種<xref:System.Web.UI.WebControls.LiteralMode>列舉值。 下表列出可能的值。  
  
|值|描述|  
|-----------|-----------------|  
|`PassThrough`|不會修改控制項的內容。|  
|`Encode`|控制項的內容會轉換成 HTML 編碼字串。|  
|`Transform`|不支援的標記語言項目已從控制項的內容。 如果<xref:System.Web.UI.WebControls.Literal>HTML 或 XHTML 支援的瀏覽器上呈現控制項，不會修改控制項的內容。|  
  
 如果您指定`PassThrough`的整個內容<xref:System.Web.UI.WebControls.Literal.Text%2A>屬性時，會傳遞至裝置或瀏覽器上，而不進行任何修改。 例如，如果<xref:System.Web.UI.WebControls.Literal.Text%2A>屬性<xref:System.Web.UI.WebControls.Literal>控制項包含`<hr>`標記，它會傳送至所有裝置和瀏覽器是否支援或不。  
  
 如果您指定`Encode`，如內容<xref:System.Web.UI.WebControls.Literal.Text%2A>屬性會轉換成 HTML 編碼字串呈現之前。 例如，如果<xref:System.Web.UI.WebControls.Literal.Text%2A>屬性<xref:System.Web.UI.WebControls.Literal>控制項包含`<hr>`標記，它會轉換成`&lt;Hr&gt;`並傳送至裝置或瀏覽器。  
  
 如果您指定`Transform`的呈現行為<xref:System.Web.UI.WebControls.Literal.Text%2A>屬性取決於所呈現的標記類型。 當<xref:System.Web.UI.WebControls.Literal>裝置或瀏覽器支援 HTML 或 XHTML，呈現控制項指定<xref:System.Web.UI.WebControls.LiteralMode.Transform>會產生相同的行為，與指定<xref:System.Web.UI.WebControls.LiteralMode.PassThrough>。 所有標記標籤和項目<xref:System.Web.UI.WebControls.Literal.Text%2A>屬性會要求瀏覽器的轉譯。  
  
 當<xref:System.Web.UI.WebControls.Literal>要呈現控制項的 HTML 或 XHTML，例如 WML 或 cHTML 標記語言，您可以使用<xref:System.Web.UI.WebControls.LiteralMode.Transform>来移除不支援的標記項目的值。 在此情況下的任何標記語言項目<xref:System.Web.UI.WebControls.Literal.Text%2A>中目標的標記語言不支援的屬性不會轉譯控制項。 例如，如果<xref:System.Web.UI.WebControls.Literal.Text%2A>屬性<xref:System.Web.UI.WebControls.Literal>控制項包含`<hr>`內容傳送至 WML 裝置之前，會移除標記，標記。 如果不支援的標記包含的內容，只會將標記會移除，然後將內容傳送至裝置或瀏覽器。 例如，如果<xref:System.Web.UI.WebControls.Literal.Text%2A>屬性包含的內容`<XYZ>Test</XYZ>`、`<XYZ>`和`</XYZ>`移除標記，並 「 測試 」 會傳送至裝置或瀏覽器的文字。  
  
   
  
## Examples  
 下列程式碼範例示範如何設定<xref:System.Web.UI.WebControls.Literal>控制項的<xref:System.Web.UI.WebControls.Literal.Mode%2A>屬性。 <xref:System.Web.UI.WebControls.Literal.Mode%2A>屬性一開始會設定為`Encode`在控制項的宣告式語法。 在頁面載入之後，使用者可以按一下按鈕，即可設定<xref:System.Web.UI.WebControls.Literal.Mode%2A>屬性`PassThrough`。 這會導致的內容<xref:System.Web.UI.WebControls.Literal.Text%2A>屬性以不同的方式呈現。  
  
> [!NOTE]
>  下列範例會使用單一檔案的程式碼模型，並可能無法正常運作如果直接複製到程式碼後置檔案。 這個程式碼範例必須複製到.aspx 副檔名的空白文字檔。 如需 Web Form 程式碼模型的詳細資訊，請參閱[ASP.NET Web Form 網頁程式碼模型](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417)。  
  
 [!code-aspx-vb[Literal.Mode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Literal.Mode/VB/literal.modevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的型別不是其中一個 <see cref="T:System.Web.UI.WebControls.LiteralMode" /> 列舉值。</exception>
        <altmember cref="T:System.Web.UI.WebControls.LiteralMode" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="literal.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">接收伺服器控制項內容的 <see cref="T:System.Web.UI.HtmlTextWriter" /> 物件。</param>
        <summary>將伺服器控制項內容傳送到提供的 <see cref="T:System.Web.UI.HtmlTextWriter" /> 物件，以寫入要在用戶端上呈現的內容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範如何覆寫<xref:System.Web.UI.WebControls.Literal.Render%2A>自訂的伺服器中的方法控制，好讓特定的文字一律會顯示前<xref:System.Web.UI.WebControls.Literal>。  
  
 [!code-aspx-csharp[CustomLiteralRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralRender/CS/custom_literal_rendercs.aspx#1)]
 [!code-aspx-vb[CustomLiteralRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralRender/VB/custom_literal_rendervb.aspx#1)]  
[!code-csharp[CustomLiteralRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralRender/CS/custom_literal_render.cs#2)]
[!code-vb[CustomLiteralRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralRender/VB/custom_literal_render.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Literal.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Web.UI.WebControls.Literal.Text" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.ITextControl.Text</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定顯示於 <see cref="T:System.Web.UI.WebControls.Literal" /> 控制項中的標題。</summary>
        <value>顯示於 <see cref="T:System.Web.UI.WebControls.Literal" /> 控制項中的標題。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.WebControls.Literal.Text%2A>屬性來指定，或判斷中顯示的標題<xref:System.Web.UI.WebControls.Literal>控制項。 這可讓您以程式設計方式在執行階段變更標題。  
  
 標題是 HTML 解碼根據值指派給這個屬性。 如果您將透過屬性的值指派<xref:System.Web.UI.WebControls.Literal>控制項，這個值是之前它會顯示已解碼的 HTML。 例如，`<asp:Literal id="DisplayLiteral" Text="A&nbsp;B"/>`瀏覽器上呈現為"B"。 不過，如果您設定這個屬性，以程式設計方式或是藉由將開頭和結尾標記的控制項之間的文字，標題不已解碼的 HTML。 例如，`<asp:Literal id="DisplayLiteral"> A&nbsp;B </asp:Literal>`會轉譯成"A&nbsp;B 」。  
  
> [!CAUTION]
>  此控制項可以用來顯示使用者輸入，其中可能包含惡意用戶端指令碼。 請檢查從用戶端可執行的指令碼、 SQL 陳述式，或其他程式碼傳送之後，顯示應用程式中的任何資訊。 ASP.NET 提供使用者輸入來封鎖指令碼和 HTML 的輸入的要求驗證功能。 驗證伺服器控制項也會提供以評估使用者輸入。 如需詳細資訊，請參閱[驗證伺服器控制項語法](http://msdn.microsoft.com/library/96d2c59e-693c-4079-9b53-b3ff0d9e9133)。  
  
 這個屬性的值設定時，可以自動儲存到資源檔使用設計工具。 如需詳細資訊，請參閱<xref:System.ComponentModel.LocalizableAttribute>和[全球化和當地語系化](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Web.UI.WebControls.Literal.Text%2A>屬性以程式設計方式變更中顯示的標題<xref:System.Web.UI.WebControls.Literal>控制項。  
  
> [!NOTE]
>  下列範例會使用單一檔案的程式碼模型，並可能無法正常運作如果直接複製到程式碼後置檔案。 這個程式碼範例必須複製到.aspx 副檔名的空白文字檔。 如需 Web Form 程式碼模型的詳細資訊，請參閱[ASP.NET Web Form 網頁程式碼模型](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417)。  
  
 [!code-aspx-csharp[Literal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Literal/CS/literalcs.aspx#1)]
 [!code-aspx-vb[Literal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Literal/VB/literalvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>