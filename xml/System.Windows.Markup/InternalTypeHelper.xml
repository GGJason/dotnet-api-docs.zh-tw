<Type Name="InternalTypeHelper" FullName="System.Windows.Markup.InternalTypeHelper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5095f7d280527d65f0d6634e89e388e92a437c35" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36502669" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class InternalTypeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit InternalTypeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.InternalTypeHelper" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class InternalTypeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class InternalTypeHelper abstract" />
  <TypeSignature Language="F#" Value="type InternalTypeHelper = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>WPF XAML 編譯器 (Compiler) 在內部使用抽象類別 (Abstract Class) 來支援使用內部型別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.InternalTypeHelper>類別不是用於由 WPF XAML 標記編譯器以外的任何項目。  
  
 當編譯 XAML 檔案時，您可以使用公用類型，但您也可以使用受限於相同限制存在的內部型別上的程式碼存取的內部型別。 <xref:System.Windows.Markup.InternalTypeHelper> 啟用支援的內部存取層級類型的標記。 這項作業包括建立產生的類別衍生自編譯器<xref:System.Windows.Markup.InternalTypeHelper>並實作其成員。 產生的類別存在安全性和存取內容中，產生的類別，因此內部型別可以參考相同組件或特別屬性化共用內部存取其他組件。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InternalTypeHelper ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.InternalTypeHelper.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InternalTypeHelper();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Markup.InternalTypeHelper" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEventHandler">
      <MemberSignature Language="C#" Value="protected internal abstract void AddEventHandler (System.Reflection.EventInfo eventInfo, object target, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void AddEventHandler(class System.Reflection.EventInfo eventInfo, object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.InternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void AddEventHandler(System::Reflection::EventInfo ^ eventInfo, System::Object ^ target, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddEventHandler : System.Reflection.EventInfo * obj * Delegate -&gt; unit" Usage="internalTypeHelper.AddEventHandler (eventInfo, target, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventInfo" Type="System.Reflection.EventInfo" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="eventInfo">事件的事件資訊 (CLR 反映資訊)。</param>
        <param name="target">附加處理常式的目標。</param>
        <param name="handler">事件處理常式。</param>
        <summary>在衍生 (產生的) 類別中覆寫時，將事件處理常式委派 (Delegate) 附加至內部事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.InternalTypeHelper>類別不是用於由 WPF XAML 標記編譯器以外的任何項目。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="protected internal abstract Delegate CreateDelegate (Type delegateType, object target, string handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Delegate CreateDelegate(class System.Type delegateType, object target, string handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.InternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function CreateDelegate (delegateType As Type, target As Object, handler As String) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract Delegate ^ CreateDelegate(Type ^ delegateType, System::Object ^ target, System::String ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member CreateDelegate : Type * obj * string -&gt; Delegate" Usage="internalTypeHelper.CreateDelegate (delegateType, target, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="delegateType">委派的 <see cref="T:System.Type" />。</param>
        <param name="target">附加處理常式的目標。</param>
        <param name="handler">處理常式實作的名稱。</param>
        <summary>在衍生 (產生的) 類別中覆寫時，建立參考非公用處理常式方法的事件委派。</summary>
        <returns>委派參考。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.InternalTypeHelper>類別不是用於由 WPF XAML 標記編譯器以外的任何項目。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected internal abstract object CreateInstance (Type type, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance object CreateInstance(class System.Type type, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.InternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Object ^ CreateInstance(Type ^ type, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : Type * System.Globalization.CultureInfo -&gt; obj" Usage="internalTypeHelper.CreateInstance (type, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="type">要建立的 <see cref="T:System.Type" />。</param>
        <param name="culture">特定文化特性 (Culture) 資訊。</param>
        <summary>在衍生 (產生的) 類別中覆寫時，建立內部型別的執行個體。</summary>
        <returns>建立的執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.InternalTypeHelper>類別不是用於由 WPF XAML 標記編譯器以外的任何項目。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValue">
      <MemberSignature Language="C#" Value="protected internal abstract object GetPropertyValue (System.Reflection.PropertyInfo propertyInfo, object target, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance object GetPropertyValue(class System.Reflection.PropertyInfo propertyInfo, object target, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.InternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Object ^ GetPropertyValue(System::Reflection::PropertyInfo ^ propertyInfo, System::Object ^ target, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyValue : System.Reflection.PropertyInfo * obj * System.Globalization.CultureInfo -&gt; obj" Usage="internalTypeHelper.GetPropertyValue (propertyInfo, target, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="propertyInfo">要取得之屬性的屬性資訊。</param>
        <param name="target">存放所需屬性值的物件。</param>
        <param name="culture">特定文化特性 (Culture) 資訊。</param>
        <summary>在衍生 (產生的) 類別中覆寫時，取得目標物件之內部屬性的值。</summary>
        <returns>屬性的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.InternalTypeHelper>類別不是用於由 WPF XAML 標記編譯器以外的任何項目。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyValue">
      <MemberSignature Language="C#" Value="protected internal abstract void SetPropertyValue (System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SetPropertyValue(class System.Reflection.PropertyInfo propertyInfo, object target, object value, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.InternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SetPropertyValue(System::Reflection::PropertyInfo ^ propertyInfo, System::Object ^ target, System::Object ^ value, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member SetPropertyValue : System.Reflection.PropertyInfo * obj * obj * System.Globalization.CultureInfo -&gt; unit" Usage="internalTypeHelper.SetPropertyValue (propertyInfo, target, value, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="propertyInfo">要設定之屬性的屬性資訊。</param>
        <param name="target">存放所需屬性值的物件。</param>
        <param name="value">要設定的值。</param>
        <param name="culture">特定文化特性 (Culture) 資訊。</param>
        <summary>在衍生 (產生的) 類別中覆寫時，設定目標物件之內部屬性的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.InternalTypeHelper>類別不是用於由 WPF XAML 標記編譯器以外的任何項目。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>