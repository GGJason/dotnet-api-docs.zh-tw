<Type Name="XmlLanguage" FullName="System.Windows.Markup.XmlLanguage">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ba785ec107ca9fc2ceb1e88a10c73a16798edaa3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36501352" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlLanguage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XmlLanguage" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlLanguage" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlLanguage" />
  <TypeSignature Language="F#" Value="type XmlLanguage = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.XmlLanguageConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a language tag for use in XAML markup.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 語言標記可能會或可能沒有註冊<xref:System.Globalization.CultureInfo>XAML 會解譯其中的系統上。  
  
 這個類別可用於處理值表示使用`xml:lang`XML 中。  
  
 在兩個字元或連字號連接的語言地區設定格式，可以指定語言標記。 請參閱[RFC 3066](http://go.microsoft.com/fwlink/?LinkId=132454)。  
  
 請注意，XML 規格允許空白字串代表`xml:lang`，不過，不允許 RFC 3066 中; 因此，<xref:System.Windows.Markup.XmlLanguage>輸入許可""（空字串屬性）。 預設建構<xref:System.Windows.Markup.XmlLanguage>行為就如同建構""（空字串）。  
  
<a name="xamlAttributeUsage_XmlLanguage"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="prefix"/>  
- or -  
<object property="prefix-subcode"/>  
```  
  
<a name="xamlValues_XmlLanguage"></a>   
## <a name="xaml-values"></a>XAML 值  
 *prefix*  
 使用 ISO 639-1 語言的前置詞值的語言首碼。 比方說，"en"或"zh-chs 和"。 接受大寫的值，轉換成小寫。 這也可能是空白的屬性，""。  
  
 *subcode*  
 如果提供，前面必須有單一連字號。 然後，寄件人 RFC 3066 所定義。 最常見的使用方式，也就是，這是最有可能正確對應至<xref:System.Globalization.CultureInfo>，例如是國家或地區指定"-我們"或"-hk"。 接受大寫的值，轉換成小寫。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Markup.XmlLanguage Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Markup::XmlLanguage ^ Empty { System::Windows::Markup::XmlLanguage ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Windows.Markup.XmlLanguage" Usage="System.Windows.Markup.XmlLanguage.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a static <see cref="T:System.Windows.Markup.XmlLanguage" /> instance as would be created by <see cref="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" /> with the language tag as an empty attribute string.</summary>
        <value>空標記版本的語言<see cref="T:System.Windows.Markup.XmlLanguage" />，比較作業中使用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個值實際上是<xref:System.Windows.Markup.XmlLanguage>對應至<xref:System.String.Empty?displayProperty=nameWithType>、 其<xref:System.Windows.Markup.XmlLanguage.GetEquivalentCulture%2A>結果是<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEquivalentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetEquivalentCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetEquivalentCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetEquivalentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEquivalentCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetEquivalentCulture();" />
      <MemberSignature Language="F#" Value="member this.GetEquivalentCulture : unit -&gt; System.Globalization.CultureInfo" Usage="xmlLanguage.GetEquivalentCulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the appropriate equivalent <see cref="T:System.Globalization.CultureInfo" /> for this <see cref="T:System.Windows.Markup.XmlLanguage" />, if and only if such a <see cref="T:System.Globalization.CultureInfo" /> is registered for the <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value of this <see cref="T:System.Windows.Markup.XmlLanguage" /></summary>
        <returns>A <see cref="T:System.Globalization.CultureInfo" /> that can be used for localization-globalization API calls that take that type as an argument.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果沒有對等<xref:System.Globalization.CultureInfo>可以是所產生，這個方法會引發例外狀況。 如果您不想處理的例外狀況，呼叫<xref:System.Windows.Markup.XmlLanguage.GetSpecificCulture%2A>改為。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No registered <see cref="T:System.Globalization.CultureInfo" /> for the provided <see cref="T:System.Windows.Markup.XmlLanguage" /> exists, as determined by a call to <see cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />.</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage GetLanguage (string ietfLanguageTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.XmlLanguage GetLanguage(string ietfLanguageTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguage (ietfLanguageTag As String) As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::XmlLanguage ^ GetLanguage(System::String ^ ietfLanguageTag);" />
      <MemberSignature Language="F#" Value="static member GetLanguage : string -&gt; System.Windows.Markup.XmlLanguage" Usage="System.Windows.Markup.XmlLanguage.GetLanguage ietfLanguageTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ietfLanguageTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ietfLanguageTag">An RFC 3066 language string, or empty string.</param>
        <summary>Returns a <see cref="T:System.Windows.Markup.XmlLanguage" /> instance, based on a string representing the language per RFC 3066.</summary>
        <returns>A new <see cref="T:System.Windows.Markup.XmlLanguage" /> with the provided string as its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法實際上就是建構函式。  
  
 語言字串可能是空的否則必須符合[RFC 3066](http://go.microsoft.com/fwlink/?LinkId=132454)規則：  
  
-   第一個子標記必須只組成[!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)]字母。  
  
-   必須包含其他子標記[!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)]字母和數字。  
  
-   子標記是由單一連字號字元分隔。  
  
-   每個子標記必須是 1 到 8 個字元。  
  
-   允許沒有前置或後端連字號。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ietfLanguageTag" /> parameter cannot be null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ietfLanguageTag" /> parameter was non-empty, but did not conform to the syntax specified in RFC 3066.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSpecificCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetSpecificCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetSpecificCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetSpecificCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecificCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetSpecificCulture();" />
      <MemberSignature Language="F#" Value="member this.GetSpecificCulture : unit -&gt; System.Globalization.CultureInfo" Usage="xmlLanguage.GetSpecificCulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the most-closely-related non-neutral <see cref="T:System.Globalization.CultureInfo" /> for this <see cref="T:System.Windows.Markup.XmlLanguage" />.</summary>
        <returns>A <see cref="T:System.Globalization.CultureInfo" /> that can be used for localization-globalization [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] calls that take that type as an argument.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個<xref:System.Windows.Markup.XmlLanguage>等於<xref:System.Windows.Markup.XmlLanguage.Empty%2A?displayProperty=nameWithType>則這個方法會傳回<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>。  
  
 這個方法會尋找已註冊<xref:System.Globalization.CultureInfo>符合這個最長可能首碼<xref:System.Windows.Markup.XmlLanguage>。 如果已註冊的<xref:System.Globalization.CultureInfo>是中性 (<xref:System.Globalization.CultureInfo.IsNeutralCulture%2A>是`true`)，則這個方法會依賴呼叫<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>對應是中性<xref:System.Globalization.CultureInfo>至特定的一個。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No related non-neutral <see cref="T:System.Globalization.CultureInfo" /> is registered for the current <see cref="T:System.Windows.Markup.XmlLanguage" /><see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the string representation of the language tag.</summary>
        <value>語言標記的字串表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性可能會傳回原先指定的字串正規化的版本，提供給<xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>。  
  
 這個屬性也可能會傳回<xref:System.String.Empty>如果空字串提供給<xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xmlLanguage.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Windows.Markup.XmlLanguage" />.</summary>
        <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Windows.Markup.XmlLanguage" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這會傳回<xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag%2A>的目前值<xref:System.Windows.Markup.XmlLanguage>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>