<Type Name="XmlLanguage" FullName="System.Windows.Markup.XmlLanguage">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="949b5d2e6f4e8bbe51d550b6df6cca7d0c9978c4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30658642" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlLanguage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XmlLanguage" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlLanguage" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlLanguage" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.XmlLanguageConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示在 XAML 標記 (Markup) 中使用的語言標記 (Tag)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 語言標記可能會或可能沒有註冊<xref:System.Globalization.CultureInfo>XAML 會解譯其中的系統上。  
  
 這個類別可用於處理值表示使用`xml:lang`XML 中。  
  
 在兩個字元或連字號連接的語言地區設定格式，可以指定語言標記。 請參閱[RFC 3066](http://go.microsoft.com/fwlink/?LinkId=132454)。  
  
 請注意，XML 規格允許空白字串代表`xml:lang`，不過，不允許 RFC 3066 中; 因此，<xref:System.Windows.Markup.XmlLanguage>輸入許可""（空字串屬性）。 預設建構<xref:System.Windows.Markup.XmlLanguage>行為就如同建構""（空字串）。  
  
<a name="xamlAttributeUsage_XmlLanguage"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="prefix"/>  
- or -  
<object property="prefix-subcode"/>  
```  
  
<a name="xamlValues_XmlLanguage"></a>   
## <a name="xaml-values"></a>XAML 值  
 *prefix*  
 使用 ISO 639-1 語言的前置詞值的語言首碼。 比方說，"en"或"zh-chs 和"。 接受大寫的值，轉換成小寫。 這也可能是空白的屬性，""。  
  
 *subcode*  
 如果提供，前面必須有單一連字號。 然後，寄件人 RFC 3066 所定義。 最常見的使用方式，也就是，這是最有可能正確對應至<xref:System.Globalization.CultureInfo>，例如是國家或地區指定"-我們"或"-hk"。 接受大寫的值，轉換成小寫。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Markup.XmlLanguage Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Markup::XmlLanguage ^ Empty { System::Windows::Markup::XmlLanguage ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得靜態 <see cref="T:System.Windows.Markup.XmlLanguage" /> 執行個體，該執行個體由 <see cref="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" /> 將語言標記設定為空屬性字串而建立。</summary>
        <value>
          <see cref="T:System.Windows.Markup.XmlLanguage" /> 的空語言標記版本，用於比較作業。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個值實際上是<xref:System.Windows.Markup.XmlLanguage>對應至<xref:System.String.Empty?displayProperty=nameWithType>、 其<xref:System.Windows.Markup.XmlLanguage.GetEquivalentCulture%2A>結果是<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEquivalentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetEquivalentCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetEquivalentCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetEquivalentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEquivalentCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetEquivalentCulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回這個 <see cref="T:System.Globalization.CultureInfo" /> 的適當對等 <see cref="T:System.Windows.Markup.XmlLanguage" />，僅限於針對這個 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 值註冊 <see cref="T:System.Windows.Markup.XmlLanguage" /> 的情況</summary>
        <returns>
          <see cref="T:System.Globalization.CultureInfo" />，可用於當地語系化-全球化 API 呼叫，這些呼叫將該型別視為引數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果沒有對等<xref:System.Globalization.CultureInfo>可以是所產生，這個方法會引發例外狀況。 如果您不想處理的例外狀況，呼叫<xref:System.Windows.Markup.XmlLanguage.GetSpecificCulture%2A>改為。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">沒有提供之 <see cref="T:System.Globalization.CultureInfo" /> 的已註冊 <see cref="T:System.Windows.Markup.XmlLanguage" />，由對 <see cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" /> 的呼叫決定。</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage GetLanguage (string ietfLanguageTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.XmlLanguage GetLanguage(string ietfLanguageTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguage (ietfLanguageTag As String) As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::XmlLanguage ^ GetLanguage(System::String ^ ietfLanguageTag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ietfLanguageTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ietfLanguageTag">RFC 3066 語言字串或空字串。</param>
        <summary>根據 RFC 3066，依照表示語言的字串傳回 <see cref="T:System.Windows.Markup.XmlLanguage" /> 執行個體。</summary>
        <returns>新 <see cref="T:System.Windows.Markup.XmlLanguage" />，所提供的字串做為其 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法實際上就是建構函式。  
  
 語言字串可能是空的否則必須符合[RFC 3066](http://go.microsoft.com/fwlink/?LinkId=132454)規則：  
  
-   第一個子標記必須只組成[!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)]字母。  
  
-   必須包含其他子標記[!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)]字母和數字。  
  
-   子標記是由單一連字號字元分隔。  
  
-   每個子標記必須是 1 到 8 個字元。  
  
-   允許沒有前置或後端連字號。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ietfLanguageTag" /> 參數不能為 null。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ietfLanguageTag" /> 參數並非空的，但不符合 RFC 3066 中指定的語法。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSpecificCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetSpecificCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetSpecificCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetSpecificCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecificCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetSpecificCulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回這個 <see cref="T:System.Globalization.CultureInfo" /> 之最為密切相關的非中性 <see cref="T:System.Windows.Markup.XmlLanguage" />。</summary>
        <returns>
          <see cref="T:System.Globalization.CultureInfo" />，可用於當地語系化-全球化 [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] 呼叫，這些呼叫將該型別視為引數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個<xref:System.Windows.Markup.XmlLanguage>等於<xref:System.Windows.Markup.XmlLanguage.Empty%2A?displayProperty=nameWithType>則這個方法會傳回<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>。  
  
 這個方法會尋找已註冊<xref:System.Globalization.CultureInfo>符合這個最長可能首碼<xref:System.Windows.Markup.XmlLanguage>。 如果已註冊的<xref:System.Globalization.CultureInfo>是中性 (<xref:System.Globalization.CultureInfo.IsNeutralCulture%2A>是`true`)，則這個方法會依賴呼叫<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>對應是中性<xref:System.Globalization.CultureInfo>至特定的一個。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">未針對目前的 <see cref="T:System.Windows.Markup.XmlLanguage" /><see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 註冊任何相關的非中性 <see cref="T:System.Globalization.CultureInfo" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得語言標記的字串表示。</summary>
        <value>語言標記的字串表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性可能會傳回原先指定的字串正規化的版本，提供給<xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>。  
  
 這個屬性也可能會傳回<xref:System.String.Empty>如果空字串提供給<xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回表示目前 <see cref="T:System.String" /> 的 <see cref="T:System.Windows.Markup.XmlLanguage" /></summary>
        <returns>
          <see cref="T:System.String" /> ，代表目前的 <see cref="T:System.Windows.Markup.XmlLanguage" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這會傳回<xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag%2A>的目前值<xref:System.Windows.Markup.XmlLanguage>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>