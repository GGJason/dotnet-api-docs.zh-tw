<Type Name="AmbientAttribute" FullName="System.Windows.Markup.AmbientAttribute">
  <TypeSignature Language="C#" Value="public sealed class AmbientAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AmbientAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.AmbientAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AmbientAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class AmbientAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Property, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b24e3-101">指定應該視為環境的屬性或類型。</span><span class="sxs-lookup"><span data-stu-id="b24e3-101">Specifies that a property or type should be treated as ambient.</span></span> <span data-ttu-id="b24e3-102">環境概念與 XAML 處理器如何判斷成員類別擁有者有關。</span><span class="sxs-lookup"><span data-stu-id="b24e3-102">The ambient concept relates to how XAML processors determine type owners of members.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b24e3-103">環境的屬性會是預期的值是可剖析器內容中建立物件圖形，但在一般的型別成員查閱已暫止基於立即的 XAML 節點集所建立的屬性。</span><span class="sxs-lookup"><span data-stu-id="b24e3-103">An ambient property is a property where the value is expected to be available in the parser context when creating an object graph, but where typical type-member lookup is suspended for purposes of the immediate XAML node set being created.</span></span> <span data-ttu-id="b24e3-104">有兩個主要案例，環境的概念：</span><span class="sxs-lookup"><span data-stu-id="b24e3-104">There are two main scenarios for the ambient concept:</span></span>  
  
-   <span data-ttu-id="b24e3-105">相同物件的某些其他屬性會影響，並評估符合該物件屬性查閱的運作方式。</span><span class="sxs-lookup"><span data-stu-id="b24e3-105">Some other property of the same object influences and qualifies how that object-property lookup should work.</span></span>  
  
-   <span data-ttu-id="b24e3-106">此屬性代表較大的延遲機制，以及查閱成員值的環境功能延伸至目前的物件內所包含的所有物件。</span><span class="sxs-lookup"><span data-stu-id="b24e3-106">The property represents a larger deferral mechanism and the ambient capabilities for looking up a member value extend to all objects contained within the current object.</span></span>  
  
 <span data-ttu-id="b24e3-107">這個屬性可以套用至特定的屬性有預期的容器，可讓環境屬性查閱行為，或可以套用至類別，以便啟用環境屬性行為，在所有情況下，值類型的屬性。</span><span class="sxs-lookup"><span data-stu-id="b24e3-107">This attribute can be applied to specific properties that have expected containers that enable an ambient property lookup behavior, or can be applied to a class to enable the ambient property behavior in all cases of that value type for a property.</span></span>  
  
 <span data-ttu-id="b24e3-108"><xref:System.Windows.Markup.AmbientAttribute> 也可以套用至 CLR 方法，以支援屬性設定為環境 XAML 可附加屬性。</span><span class="sxs-lookup"><span data-stu-id="b24e3-108"><xref:System.Windows.Markup.AmbientAttribute> can also be applied to a CLR method, to support attributing a XAML attachable property as ambient.</span></span> <span data-ttu-id="b24e3-109">這是可能有必要，因為 CLR 實作 XAML 附加的屬性會實作/以表示它與另一個存取子模式為反映`get`和`set`方法。</span><span class="sxs-lookup"><span data-stu-id="b24e3-109">This is potentially necessary because in a CLR implementation a XAML attached property is implemented/represented to reflection as an accessor pattern with `get` and `set` methods.</span></span> <span data-ttu-id="b24e3-110">沒有實際的 CLR 屬性至屬性存在，因此限制使用量<xref:System.AttributeTargets>至`Property`，就不具有啟用為環境指定可附加的成員。</span><span class="sxs-lookup"><span data-stu-id="b24e3-110">No actual CLR property to attribute exists, so restricting usage for <xref:System.AttributeTargets> to `Property` would not have enabled specifying an attachable member as ambient.</span></span> <span data-ttu-id="b24e3-111">您想要報告環境的可附加成員，如屬性`get`存取子。</span><span class="sxs-lookup"><span data-stu-id="b24e3-111">For an attachable member that you want to report as ambient, attribute the `get` accessor.</span></span> <span data-ttu-id="b24e3-112">您不應該嘗試不特別的支援方法的可附加成員的屬性方法。</span><span class="sxs-lookup"><span data-stu-id="b24e3-112">You should not attempt to attribute methods that are not specifically support methods of attachable members.</span></span>  
  
 <span data-ttu-id="b24e3-113">在舊版的.NET Framework 中，這個類別會存在於 WindowsBase WPF 專屬組件中。</span><span class="sxs-lookup"><span data-stu-id="b24e3-113">In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="b24e3-114">在[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，<xref:System.Windows.Markup.AmbientAttribute>位於 System.Xaml 組件中。</span><span class="sxs-lookup"><span data-stu-id="b24e3-114">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.AmbientAttribute> is in the System.Xaml assembly.</span></span> <span data-ttu-id="b24e3-115">如需詳細資訊，請參閱[從 WPF 移轉至 System.Xaml 的類型](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)。</span><span class="sxs-lookup"><span data-stu-id="b24e3-115">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
 <span data-ttu-id="b24e3-116">環境的類型 (類型 where<xref:System.Windows.Markup.AmbientAttribute>套用類型層級) 可用於其中屬性的類型需要解析順序的某些 XAML 處理情況。</span><span class="sxs-lookup"><span data-stu-id="b24e3-116">Ambient types (types where <xref:System.Windows.Markup.AmbientAttribute> is applied at type level) can be used for certain XAML processing situations where the type of a property needs to be resolved out of order.</span></span>  
  
## <a name="object-writer-scenarios"></a><span data-ttu-id="b24e3-117">物件寫入器案例</span><span class="sxs-lookup"><span data-stu-id="b24e3-117">Object Writer Scenarios</span></span>  
 <span data-ttu-id="b24e3-118">如果您正在定義的 XAML 物件寫入器，而您發生屬性、 方法或型別其中<xref:System.Windows.Markup.AmbientAttribute>會套用，您通常必須存取的服務，來決定所需的物件寫入的目標環境的屬性查閱行為。</span><span class="sxs-lookup"><span data-stu-id="b24e3-118">If you are defining a XAML object writer, and you encounter a property, method or type where <xref:System.Windows.Markup.AmbientAttribute> is applied, you typically must access a service to determine the intended ambient property lookup behavior that is needed for writing out objects.</span></span> <span data-ttu-id="b24e3-119">如需詳細資訊，請參閱<xref:System.Xaml.IAmbientProvider>。</span><span class="sxs-lookup"><span data-stu-id="b24e3-119">For more information, see <xref:System.Xaml.IAmbientProvider>.</span></span>  
  
## <a name="value-converters"></a><span data-ttu-id="b24e3-120">值轉換器</span><span class="sxs-lookup"><span data-stu-id="b24e3-120">Value Converters</span></span>  
 <span data-ttu-id="b24e3-121">型別轉換子或標記延伸模組可能需要知道處理表示間接的型別對應，例如字串名稱，或不限定性條件來指定成員或類型的屬性的屬性，使用環境的資訊。</span><span class="sxs-lookup"><span data-stu-id="b24e3-121">Type converters or markup extensions might need to know the ambient information in order to process properties that represent indirect type mappings, such as properties that specify members or types by string names with or without qualification.</span></span> <span data-ttu-id="b24e3-122">在此案例中，<xref:System.Windows.Markup.AmbientAttribute>不打算直接用於值轉換器的程式碼邏輯。</span><span class="sxs-lookup"><span data-stu-id="b24e3-122">In this scenario, <xref:System.Windows.Markup.AmbientAttribute> is not intended to be used directly for value converter code logic.</span></span> <span data-ttu-id="b24e3-123">相反地，值轉換器應依賴 XAML 寫入器處理行為，將會通過<xref:System.Xaml.IAmbientProvider>值轉換器方法時呼叫其服務內容中。</span><span class="sxs-lookup"><span data-stu-id="b24e3-123">Rather, the value converter should rely on the XAML writer processing behavior, which will pass <xref:System.Xaml.IAmbientProvider> in its service contexts to your value converter methods when called.</span></span>  
  
## <a name="wpf-scenarios-for-ambientattribute"></a><span data-ttu-id="b24e3-124">WPF AmbientAttribute 案例</span><span class="sxs-lookup"><span data-stu-id="b24e3-124">WPF Scenarios for AmbientAttribute</span></span>  
  
-   <span data-ttu-id="b24e3-125">屬性的<xref:System.Windows.Style>(<xref:System.Windows.Style.TargetType%2A>) 可以限定必要的屬性名稱查閱來尋找屬性名稱中支援參考所需<xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType>值。</span><span class="sxs-lookup"><span data-stu-id="b24e3-125">A property of a <xref:System.Windows.Style> (<xref:System.Windows.Style.TargetType%2A>) can qualify the necessary property name lookups that are needed to find the backing references for property names in <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> values.</span></span>  
  
-   <span data-ttu-id="b24e3-126">中的所有內容`Resources`屬性 (項目<xref:System.Windows.ResourceDictionary>) 範本的內容，以及應該能夠存取其他對等節點做為值。</span><span class="sxs-lookup"><span data-stu-id="b24e3-126">All content within a `Resources` property (items of a <xref:System.Windows.ResourceDictionary>) as well as template content, should be able to access other peers as values.</span></span> <span data-ttu-id="b24e3-127">宣告整個`Resources`屬性做為環境叫用的啟用 WPF XAML 剖析器中的邏輯。</span><span class="sxs-lookup"><span data-stu-id="b24e3-127">Declaring the entire `Resources` property as ambient invokes logic that enables this in the WPF XAML parser.</span></span>  
  
 <span data-ttu-id="b24e3-128">請參閱<xref:System.Windows.ResourceDictionary>設定案例的範例如<xref:System.Windows.Markup.AmbientAttribute>類型層級。</span><span class="sxs-lookup"><span data-stu-id="b24e3-128">See <xref:System.Windows.ResourceDictionary> for an example of a scenario for setting <xref:System.Windows.Markup.AmbientAttribute> at type level.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
    <altmember cref="T:System.Xaml.XamlMember" />
    <altmember cref="T:System.Xaml.IAmbientProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AmbientAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.AmbientAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AmbientAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b24e3-129">初始化 <see cref="T:System.Windows.Markup.AmbientAttribute" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="b24e3-129">Initializes a new instance of the <see cref="T:System.Windows.Markup.AmbientAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>