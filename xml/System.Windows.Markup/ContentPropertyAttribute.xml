<Type Name="ContentPropertyAttribute" FullName="System.Windows.Markup.ContentPropertyAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fccb72bf425ea39ebd2388db38ab8ee9c1c77e49" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32691236" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ContentPropertyAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ContentPropertyAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ContentPropertyAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ContentPropertyAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContentPropertyAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指出類型的哪一個屬性是 XAML 內容屬性。 XAML 處理器會在處理屬性化型別之 XAML 表示的 XAML 子項目時，使用這項資訊。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果相關聯的屬性<xref:System.Windows.Markup.ContentPropertyAttribute>的類型不是`string`或`object`，XAML 處理器會嘗試識別值的轉換技術。 第一次檢查適用於原生類型轉換的 XAML 語言基本類型或特定的原生轉換啟用該特定的 XAML 寫入器實作。 下一步是尋找型別轉換子。 在.NET 實作中，類型轉換器會識別根據<xref:System.ComponentModel.TypeConverterAttribute>任一成員層級或型別層級定義上套用。 如果可以識別沒有值的轉換，則 XAML 物件寫入器通常擲回例外狀況。  
  
 為了接受多個單一物件項目，做為內容，XAML 內容屬性的型別必須可支援當做集合型別。  
  
 因為`Inherited=true`屬性的值的宣告<xref:System.Windows.Markup.ContentPropertyAttribute>通常適用於所有衍生類別的內容屬性指定。 套用空<xref:System.Windows.Markup.ContentPropertyAttribute>可讓衍生的類別來移除的內容屬性宣告的基底類別 （和注意該類別會有任何內容屬性）。 套用不同的具名<xref:System.Windows.Markup.ContentPropertyAttribute>取代繼承<xref:System.Windows.Markup.ContentPropertyAttribute>以新的。  
  
 在舊版的.NET Framework 中，這個類別會存在於 WindowsBase 中，WPF 專屬組件，而且也有平行實作 Windows Communication Foundation (WCF)。 從.NET Framework 4.0，<xref:System.Windows.Markup.ContentPropertyAttribute>位於 System.Xaml 組件中。 如需詳細資訊，請參閱[從 WPF 移轉至 System.Xaml 的類型](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)。  
  
## <a name="wpf-usage-notes"></a>WPF 使用注意事項  
 在 Windows Presentation Foundation (WPF) 使用的類別範例<xref:System.Windows.Markup.ContentPropertyAttribute>是<xref:System.Windows.Controls.ContentControl>、 哪些<xref:System.Windows.Controls.Button>類別繼承自。  <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType>屬性是設定的內容屬性<xref:System.Windows.Markup.ContentPropertyAttribute>。  如果<xref:System.Windows.Controls.Button>在 XAML 中，具現化<xref:System.Windows.Controls.ContentControl.Content%2A>的<xref:System.Windows.Controls.Button>會設定為開始和結束按鈕標籤之間的項目。  
    
## Examples  
 下列範例會建立名為類別`Film`具有<xref:System.Windows.Markup.ContentPropertyAttribute>套用。  具名屬性`Title`指示為內容屬性。  
  
 [!code-csharp[MarkupSnippets#MarkupContentPropertyAttribute](~/samples/snippets/csharp/VS_Snippets_Wpf/MarkupSnippets/CSharp/Window1.xaml.cs#markupcontentpropertyattribute)]
 [!code-vb[MarkupSnippets#MarkupContentPropertyAttribute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MarkupSnippets/visualbasic/window1.xaml.vb#markupcontentpropertyattribute)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentPropertyAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ContentPropertyAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContentPropertyAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因為`Inherited=true`屬性的值的宣告<xref:System.Windows.Markup.ContentPropertyAttribute>通常適用於所有衍生類別的內容屬性指定。 使用此簽章，或套用空<xref:System.Windows.Markup.ContentPropertyAttribute>，讓您在移除的內容屬性宣告由基底類別 （並記下該類別會有任何內容屬性） 衍生的類別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentPropertyAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContentPropertyAttribute(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">本身為內容屬性之屬性的名稱。</param>
        <summary>使用指定的名稱，初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 假設 CLR 支援，提供`name`應符合<xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType>中 CLR 的相關屬性的型別系統。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.ContentPropertyAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得內容屬性之屬性的名稱。</summary>
        <value>表示內容屬性之屬性的名稱。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>