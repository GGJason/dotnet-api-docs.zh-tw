<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ContentPropertyAttribute.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55eb8ef0317620f292833aaf3256a172f0b14f146.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5eb8ef0317620f292833aaf3256a172f0b14f146</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>Indicates which property of a type is the XAML content property.</source>
          <target state="translated">指出類型的哪一個屬性是 XAML 內容屬性。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>A XAML processor uses this information when processing XAML child elements of XAML representations of the attributed type.</source>
          <target state="translated">XAML 處理器會在處理屬性化類型之 XAML 表示的 XAML 子項目時，使用這項資訊。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>If the associated property of a <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> is not of type <ph id="ph2">`string`</ph> or <ph id="ph3">`object`</ph>, a XAML processor attempts to identify a value conversion technique.</source>
          <target state="translated">如果相關聯的屬性<ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>的類型不是<ph id="ph2">`string`</ph>或<ph id="ph3">`object`</ph>，XAML 處理器會嘗試識別值的轉換技術。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>The first check is for native type conversion, either of the XAML language primitives or of specific native conversions enabled by that particular XAML writer implementation.</source>
          <target state="translated">第一次檢查適用於原生類型轉換的 XAML 語言基本類型或特定的原生轉換啟用該特定的 XAML 寫入器實作。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>The next step is to look for a type converter.</source>
          <target state="translated">下一步是尋找型別轉換子。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>In the .NET implementations, a type converter is identified based on <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> on either the member level or type level definition that applies.</source>
          <target state="translated">在.NET 實作中，類型轉換器會識別根據<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>任一成員層級或型別層級定義上套用。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>If no value conversion can be identified, a XAML object writer typically throws an exception.</source>
          <target state="translated">如果可以識別沒有值的轉換，則 XAML 物件寫入器通常擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>In order to accept more than a single object element as content, the type of the XAML content property must be supportable as a collection type.</source>
          <target state="translated">為了接受多個單一物件項目，做為內容，XAML 內容屬性的型別必須可支援當做集合型別。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>Because of the <ph id="ph1">`Inherited=true`</ph> declaration of the attribute, a value for a <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> normally applies a content property designation to all derived classes as well.</source>
          <target state="translated">因為<ph id="ph1">`Inherited=true`</ph>屬性的值的宣告<ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>通常適用於所有衍生類別的內容屬性指定。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>Applying an empty <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> enables a derived class to remove a declaration of a content property attribute by a base class (and to note that the class has no content property).</source>
          <target state="translated">套用空<ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>可讓衍生的類別來移除的內容屬性宣告的基底類別 （和注意該類別會有任何內容屬性）。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>Applying a differently named <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> replaces the inherited <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> with the new one.</source>
          <target state="translated">套用不同的具名<ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>取代繼承<ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>以新的。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase, and also had a parallel implementation in <ph id="ph1">[!INCLUDE[vsindigo](~/includes/vsindigo-md.md)]</ph>.</source>
          <target state="translated">在舊版的.NET framework 中，這個類別存在於 WindowsBase 中，WPF 專屬組件，也在平行實作<ph id="ph1">[!INCLUDE[vsindigo](~/includes/vsindigo-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>In <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> is in the System.Xaml assembly.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>，<ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>位於 System.Xaml 組件中。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>For more information, see <bpt id="p1">[</bpt>Types Migrated from WPF to System.Xaml<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>從 WPF 移轉至 System.Xaml 的類型<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>WPF Usage Notes</source>
          <target state="translated">WPF 使用注意事項</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>An example of a class in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> that uses the <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> is <ph id="ph3">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, which the <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph> class inherits from.</source>
          <target state="translated">中的類別的範例<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>使用<ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>是<ph id="ph3">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>、 哪些<ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>類別繼承自。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>The property <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> on the <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> is the content property set by the <ph id="ph3">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>.</source>
          <target state="translated">屬性<ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph>上<ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>由設定內容屬性<ph id="ph3">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is instantiate in XAML <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> of the <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> will be set to the element that is between the start and end button tags.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>是在 XAML 中具現化<ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph>的<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>會設定為開始和結束按鈕標籤之間的項目。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>The following example creates a class named <ph id="ph1">`Film`</ph> that has a <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> applied.</source>
          <target state="translated">下列範例會建立名為類別<ph id="ph1">`Film`</ph>具有<ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>套用。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>The property named <ph id="ph1">`Title`</ph> is indicated as the content property.</source>
          <target state="translated">具名屬性<ph id="ph1">`Title`</ph>指示為內容屬性。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ContentPropertyAttribute" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ContentPropertyAttribute" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ContentPropertyAttribute" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ContentPropertyAttribute" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
          <source>Because of the <ph id="ph1">`Inherited=true`</ph> declaration of the attribute, a value for a <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> normally applies a content property designation to all derived classes as well.</source>
          <target state="translated">因為<ph id="ph1">`Inherited=true`</ph>屬性的值的宣告<ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>通常適用於所有衍生類別的內容屬性指定。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
          <source>Using this signature, or applying an empty <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>, enables a derived class to remove a declaration of a content property attribute by a base class (and note that the class has no content property).</source>
          <target state="translated">使用此簽章，或套用空<ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>，讓您在移除的內容屬性宣告由基底類別 （並記下該類別會有任何內容屬性） 衍生的類別。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
          <source>The property name for the property that is the content property.</source>
          <target state="translated">表示內容屬性之屬性的屬性名稱。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ContentPropertyAttribute" /&gt;</ph> class, by using the specified name.</source>
          <target state="translated">使用指定的名稱，初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ContentPropertyAttribute" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
          <source>Assuming CLR backing, the provided <ph id="ph1">`name`</ph> should match the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType&gt;</ph> of the relevant property in the CLR type system.</source>
          <target state="translated">假設 CLR 支援，提供<ph id="ph1">`name`</ph>應符合<ph id="ph2">&lt;xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType&gt;</ph>中 CLR 的相關屬性的型別系統。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.ContentPropertyAttribute.Name">
          <source>Gets the name of the property that is the content property.</source>
          <target state="translated">取得表示內容屬性之屬性的名稱。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.ContentPropertyAttribute.Name">
          <source>The name of the property that is the content property.</source>
          <target state="translated">表示內容屬性之屬性的名稱。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>