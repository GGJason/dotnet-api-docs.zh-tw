<Type Name="UsableDuringInitializationAttribute" FullName="System.Windows.Markup.UsableDuringInitializationAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ecc0d32e21381a0d3a1e3d0d8352197fbb1e4895" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51915731" /></Metadata><TypeSignature Language="C#" Value="public sealed class UsableDuringInitializationAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit UsableDuringInitializationAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.UsableDuringInitializationAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class UsableDuringInitializationAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class UsableDuringInitializationAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type UsableDuringInitializationAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2dd8b-101">表示這個型別是否在建立 XAML 物件圖形期間由上往下建立。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-101">Indicates whether this type is built top-down during XAML object graph creation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd8b-102">由上而下是近似 XAML 處理器行為，建立物件圖形時的比喻。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-102">Top-down is a metaphor that approximates XAML processor behavior when creating the object graph.</span></span> <span data-ttu-id="2dd8b-103">建置由上而下，類別會具現化，附加至父代，，然後設定其屬性。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-103">When built top-down, a class is instantiated, attached to the parent, and then has its properties set.</span></span> <span data-ttu-id="2dd8b-104">由上而下建構可避免多次叫用屬性變更處理常式。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-104">Top-down construction avoids invoking property-changed handlers multiple times.</span></span> <span data-ttu-id="2dd8b-105">這類處理，都會影響啟動的物件圖形，因此排除多個處理常式會呼叫提供的物件圖形的啟動逾時的效能最佳化。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-105">Such handling will ripple up the object graph and therefore eliminating the multiple handler calls provides a performance optimization for startup of the object graph.</span></span>  
  
 <span data-ttu-id="2dd8b-106">在舊版的.NET Framework 中，這個類別會存在於 WindowsBase WPF 特定組件中。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-106">In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="2dd8b-107">在  [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]， <xref:System.Windows.Markup.UsableDuringInitializationAttribute> System.Xaml 組件中。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-107">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.UsableDuringInitializationAttribute> is in the System.Xaml assembly.</span></span> <span data-ttu-id="2dd8b-108">如需詳細資訊，請參閱 [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-108">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="2dd8b-109">WPF 使用注意事項</span><span class="sxs-lookup"><span data-stu-id="2dd8b-109">WPF Usage Notes</span></span>  
 <span data-ttu-id="2dd8b-110">中的 WPF XAML[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]和[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]，由上而下建構已內建 XAML 處理特定的類別。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-110">In WPF XAML for [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)], top-down construction was built in to the XAML processing for certain classes.</span></span> <span data-ttu-id="2dd8b-111"><xref:System.Windows.Markup.UsableDuringInitializationAttribute>屬性會統一報告中的由上而下行為[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-111">The <xref:System.Windows.Markup.UsableDuringInitializationAttribute> attribute formalizes the reporting of the top-down behavior in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)].</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.FrameworkElement" />
    <related type="Article" href="https://msdn.microsoft.com/library/5dfb299a-b6e2-41b8-8694-e6ac987547f1"><span data-ttu-id="2dd8b-112">自訂型別和程式庫的 XAML 相關 CLR 屬性</span><span class="sxs-lookup"><span data-stu-id="2dd8b-112">XAML-Related CLR Attributes For Custom Types and Libraries</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/c2667cbd-2f46-4a7f-9dfc-53696e35e8e4"><span data-ttu-id="2dd8b-113">定義可搭配 .NET Framework XAML 服務使用的自訂類型</span><span class="sxs-lookup"><span data-stu-id="2dd8b-113">Defining Custom Types for Use with .NET Framework XAML Services</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/0e11f386-808c-4eae-9ba6-029ad7ba2211"><span data-ttu-id="2dd8b-114">.NET XAML 服務概念文件</span><span class="sxs-lookup"><span data-stu-id="2dd8b-114">NET XAML Services Conceptual Documentation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UsableDuringInitializationAttribute (bool usable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool usable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.UsableDuringInitializationAttribute.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (usable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UsableDuringInitializationAttribute(bool usable);" />
      <MemberSignature Language="F#" Value="new System.Windows.Markup.UsableDuringInitializationAttribute : bool -&gt; System.Windows.Markup.UsableDuringInitializationAttribute" Usage="new System.Windows.Markup.UsableDuringInitializationAttribute usable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="usable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="usable"><span data-ttu-id="2dd8b-115">定義相關聯的類別是否可在初始化時使用。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-115">Defines whether the associated class is usable during initialization.</span></span></param>
        <summary><span data-ttu-id="2dd8b-116">初始化 <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-116">Initializes a new instance of the <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2dd8b-117">這個屬性會繼承。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-117">This attribute inherits.</span></span> <span data-ttu-id="2dd8b-118">初始應用程式將通常套用做`[UsableDuringInitialization(true)]`，但您接著可以將設定`[UsableDuringInitialization(false)]`變更報告的行為在衍生的類別的衍生類別。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-118">For the initial application you would typically apply as `[UsableDuringInitialization(true)]`, but you could then set `[UsableDuringInitialization(false)]` on a derived class to change the derived class reporting of the behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Usable">
      <MemberSignature Language="C#" Value="public bool Usable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Usable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.UsableDuringInitializationAttribute.Usable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Usable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Usable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Usable : bool" Usage="System.Windows.Markup.UsableDuringInitializationAttribute.Usable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2dd8b-119">取得值，這個值指出相關聯的類別是否可在初始化時使用。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-119">Gets a value that indicates whether the associated class is usable during initialization.</span></span></summary>
        <value><span data-ttu-id="2dd8b-120">如果可以在初始化時使用相關聯的類別，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2dd8b-120"><see langword="true" /> if the associated class is usable during initialization; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>