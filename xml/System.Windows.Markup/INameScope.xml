<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ac045db164c4d2d4320bd924bd6f858a4e66c0aa" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52239074" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameScope" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameScope" />
  <TypeSignature Language="F#" Value="type INameScope = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="6aa70-101">定義合約說明項目名稱應該如何在特定的 XAML 名稱範圍內存取，以及如何在該 XAML 名稱範圍內強制執行名稱的唯一性。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6aa70-101">Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6aa70-102">這個介面是由有子項目，要透過範本重複使用或延後隱喻的類別所實作。</span><span class="sxs-lookup"><span data-stu-id="6aa70-102">This interface is implemented by classes that have child elements that are intended to be reused through the template or defer metaphor.</span></span> <span data-ttu-id="6aa70-103">範本、 處理站和類似的建構都必須有唯一的 XAML 名稱範圍，與主要物件圖形中根 XAML。</span><span class="sxs-lookup"><span data-stu-id="6aa70-103">Templates, factories and similar constructs must have unique XAML namescopes that are separate from a main object graph and root XAML.</span></span> <span data-ttu-id="6aa70-104">這裡的原則就是應該有沒有名稱衝突引入應用程式的物件圖形，從這些子項目所建立的物件時，DOM 作業和 XAML 參考技巧，依據名稱識別項都可以依賴名稱每個 XAML 名稱範圍中的唯一性。</span><span class="sxs-lookup"><span data-stu-id="6aa70-104">The principle here is that there should be no name collisions when objects created from those child elements are introduced to an application's object graph, and so that DOM operations and XAML reference techniques that rely on the name identifier can rely on name uniqueness in each XAML namescope.</span></span>  
  
 <span data-ttu-id="6aa70-105">在舊版的.NET Framework 中，此介面會存在於 WindowsBase WPF 特定組件中。</span><span class="sxs-lookup"><span data-stu-id="6aa70-105">In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="6aa70-106">在  [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]， <xref:System.Windows.Markup.INameScope> System.Xaml 組件中。</span><span class="sxs-lookup"><span data-stu-id="6aa70-106">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> is in the System.Xaml assembly.</span></span> <span data-ttu-id="6aa70-107">如需詳細資訊，請參閱 [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)。</span><span class="sxs-lookup"><span data-stu-id="6aa70-107">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="6aa70-108">WPF 使用注意事項</span><span class="sxs-lookup"><span data-stu-id="6aa70-108">WPF Usage Notes</span></span>  
 <span data-ttu-id="6aa70-109">此介面由 WPF 類別實作<xref:System.Windows.NameScope>。</span><span class="sxs-lookup"><span data-stu-id="6aa70-109">This interface is implemented by the WPF class <xref:System.Windows.NameScope>.</span></span> <span data-ttu-id="6aa70-110">中的大部分 XAML 名稱範圍作業[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]使用的操作<xref:System.Windows.NameScope>執行個體，但資訊偶爾進行通信時在內部使用<xref:System.Windows.Markup.INameScope>參考。</span><span class="sxs-lookup"><span data-stu-id="6aa70-110">Most XAML namescope operations in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] operate by using <xref:System.Windows.NameScope> instances, but information is occasionally communicated internally by using <xref:System.Windows.Markup.INameScope> references.</span></span>  
  
 <span data-ttu-id="6aa70-111">使用處理站或延遲結合 XAML 表示的隱喻的 WPF 類別的範例包括<xref:System.Windows.Style>和<xref:System.Windows.FrameworkTemplate>。</span><span class="sxs-lookup"><span data-stu-id="6aa70-111">Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <xref:System.Windows.Style> and <xref:System.Windows.FrameworkTemplate>.</span></span> <span data-ttu-id="6aa70-112">這些實作通常會依賴可從介面方法的明確版本<xref:System.Windows.NameScope>類別。</span><span class="sxs-lookup"><span data-stu-id="6aa70-112">These implementations usually rely on the explicit versions of the interface methods available from the <xref:System.Windows.NameScope> class.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
    <related type="Article" href="https://msdn.microsoft.com/library/b7e61222-e8cf-48d2-acd0-6df3b7685d48">
      <span data-ttu-id="6aa70-113">X:name 屬性</span>
      <span class="sxs-lookup">
        <span data-stu-id="6aa70-113">x:Name Attribute</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member FindName : string -&gt; obj" Usage="iNameScope.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6aa70-114">所要求之物件的名稱識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6aa70-114">The name identifier for the object being requested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6aa70-115">傳回具有所提供之識別名稱的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6aa70-115">Returns an object that has the provided identifying name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6aa70-116">物件，如果找到的話。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6aa70-116">The object, if found.</span>
          </span>
          <span data-ttu-id="6aa70-117">如果找不到該名稱的任何物件則傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6aa70-117">Returns <see langword="null" /> if no object of that name was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6aa70-118">在 XAML 標記中的有效名稱字串必須符合所述的需求[XamlName 文法](~/docs/framework/xaml-services/xamlname-grammar.md)。</span><span class="sxs-lookup"><span data-stu-id="6aa70-118">Valid name strings in XAML markup must match the requirements documented in [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
        <related type="Article" href="https://msdn.microsoft.com/library/b7e61222-e8cf-48d2-acd0-6df3b7685d48">
          <span data-ttu-id="6aa70-119">X:name 屬性</span>
          <span class="sxs-lookup">
            <span data-stu-id="6aa70-119">x:Name Attribute</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="abstract member RegisterName : string * obj -&gt; unit" Usage="iNameScope.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6aa70-120">要註冊的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6aa70-120">The name to register.</span>
          </span>
        </param>
        <param name="scopedElement">
          <span data-ttu-id="6aa70-121">所提供 <paramref name="name" /> 參考的特定項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6aa70-121">The specific element that the provided <paramref name="name" /> refers to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6aa70-122">將提供的名稱註冊到目前的 XAML 名稱範圍中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6aa70-122">Registers the provided name into the current XAML namescope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6aa70-123">不允許重複的名稱，在 XAML 名稱範圍中。</span><span class="sxs-lookup"><span data-stu-id="6aa70-123">Duplicate names in a XAML namescope are not permitted.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="6aa70-124">不允許重複名稱註冊。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6aa70-124">Do not permit duplicate names to be registered.</span>
            </span>
            <span data-ttu-id="6aa70-125">如果輸入<paramref name="name" />已指派給現有的項目中的 XAML 名稱範圍的內部集合表示法 (即使它是與相同<paramref name="scopedElement" />)，會擲回例外狀況。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6aa70-125">If the input <paramref name="name" /> is already assigned to an existing element in the internal collection representation of the XAML namescope (even if it is the same as <paramref name="scopedElement" />), throw an exception.</span>
            </span>
            <span data-ttu-id="6aa70-126">也請考慮擲回例外狀況，如果提供的名稱不符合[XamlName 文法](~/docs/framework/xaml-services/xamlname-grammar.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6aa70-126">Also consider throwing an exception if the provided name does not conform to [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member UnregisterName : string -&gt; unit" Usage="iNameScope.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="6aa70-127">要取消註冊的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6aa70-127">The name to unregister.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6aa70-128">從目前的 XAML Namescope 中，取消註冊所提供的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6aa70-128">Unregisters the provided name from the current XAML namescope.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="6aa70-129">如果輸入的名稱不存在，會擲回例外狀況。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6aa70-129">If the input name does not exist, throw an exception.</span>
            </span>
            <span data-ttu-id="6aa70-130">使相同的名稱無法再次註冊在未來，您應該移除的名稱和先前註冊的項目，它是指從 XAML 名稱範圍的集合表示法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6aa70-130">You should remove the name and the previously registered element it refers to from the collection representation of the XAML namescope, so that the same name could potentially be registered again in the future.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>