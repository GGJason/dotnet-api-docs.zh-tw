<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlParseException.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f7785f59cbc386e6af15aa0c6eb7b76532178de9.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7785f59cbc386e6af15aa0c6eb7b76532178de9</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.XamlParseException">
          <source>Represents the exception class for parser-specific exceptions from a WPF XAML parser.</source>
          <target state="translated">表示來自 WPF XAML 剖析器之剖析器特有例外狀況的例外狀況類別。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.XamlParseException">
          <source>This exception is used in XAML API or WPF XAML parser operations from .NET Framework 3.0 and .NET Framework 3.5, or for specific use of the WPF XAML parser by calling <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlReader" /&gt;</ph> API.</source>
          <target state="translated">這個例外狀況用於 .NET Framework 3.0 和 .NET Framework 3.5 中的 XAML API 或 WPF XAML 剖析器作業，或特別供 WPF XAML 剖析器在呼叫 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlReader" /&gt;</ph> API 時使用。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph> is used only for the WPF-implemented XAML parser that performs the XAML parsing and loading for WPF applications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph> 只適用於執行記憶體剖析和載入的 XAML WPF 應用程式的 WPF 實作 XAML 剖析器。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>Specifically, the exception is only relevant when an application targets <ph id="ph1">[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]</ph> and <ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>.</source>
          <target state="translated">具體來說，例外狀況，才適用時應用程式的目標<ph id="ph1">[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]</ph>和<ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>The exception can also originate from user code in run-time calls to APIs that hook up the WPF-implemented XAML parser to load XAML from within a running WPF application (for example, calls to <ph id="ph1">&lt;xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">例外狀況也可能來自使用者程式碼中執行階段內執行的 WPF 應用程式載入的 XAML WPF 實作 XAML 剖析器相連結的 Api 呼叫 (例如，若要呼叫<ph id="ph1">&lt;xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>For <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Xaml.XamlParseException&gt;</ph> exception that typically reports XAML processing exceptions is defined in a different namespace (<ph id="ph3">&lt;xref:System.Xaml&gt;</ph>) and a different assembly (System.Xaml).</source>
          <target state="translated">如<ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>、<ph id="ph2">&lt;xref:System.Xaml.XamlParseException&gt;</ph>通常會報告 XAML 處理例外狀況的例外狀況在不同的命名空間中定義 (<ph id="ph3">&lt;xref:System.Xaml&gt;</ph>) 和不同的組件 (System.Xaml)。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>Unless you are writing an equivalent to the WPF XAML parser or working with <ph id="ph1">[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]</ph> and <ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> targeting, you generally will not throw <ph id="ph3">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph> from your own code.</source>
          <target state="translated">除非您是對等項目寫入 WPF XAML 剖析器，或使用<ph id="ph1">[!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)]</ph>和<ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>目標，您通常不會擲回<ph id="ph3">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph>從自己的程式碼。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>However, handling for the exception is sometimes necessary.</source>
          <target state="translated">但是，有時候是必要的例外狀況處理。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>For application scenarios, where you may want to suppress XAML parse errors, a <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph> event handler at the application level is one way to handle a run-time <ph id="ph3">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph>.</source>
          <target state="translated">如需應用程式案例，其中您可能想要隱藏 XAML 剖析錯誤， <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</ph>應用程式層級的事件處理常式是一種方式處理執行階段<ph id="ph3">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>Whether to suppress exceptions or let them surface to user code depends on how you design your application for purposes of loading XAML, and the trust level that you assign to the XAML your application loads.</source>
          <target state="translated">是否要隱藏例外狀況，或將這些介面對使用者程式碼取決於您如何設計您的應用程式載入 XAML 的用途，並指派到 XAML 應用程式的信任層級載入。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Security Considerations<ept id="p1">](~/docs/framework/xaml-services/xaml-security-considerations.md)</ept> or "XAML Security" section of <bpt id="p2">[</bpt>XAML Overview (WPF)<ept id="p2">](~/docs/framework/wpf/advanced/xaml-overview-wpf.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>XAML 安全性考量<ept id="p1">](~/docs/framework/xaml-services/xaml-security-considerations.md)</ept>或 「 XAML 安全性 &gt; 一節<bpt id="p2">[</bpt>XAML 概觀 (WPF)<ept id="p2">](~/docs/framework/wpf/advanced/xaml-overview-wpf.md)</ept>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>For pages of an application, when the <ph id="ph1">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph> is thrown, it is usually in the context of the <ph id="ph2">`InitializeComponent`</ph> call made by your page class, which is the entry point for the WPF application model's usage of the WPF XAML parser at the per-page level.</source>
          <target state="translated">頁面的 應用程式中，當<ph id="ph1">&lt;xref:System.Windows.Markup.XamlParseException&gt;</ph>會擲回，通常是在內容中<ph id="ph2">`InitializeComponent`</ph>page 類別，也就是在每個頁面層級的 WPF XAML 剖析 WPF 應用程式模型使用方式的進入點所做的呼叫。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>Therefore another possible handling strategy is to place <ph id="ph1">`try/catch`</ph> blocks in <ph id="ph2">`InitializeComponent`</ph>.</source>
          <target state="translated">因此另一個可能的處理策略是放置<ph id="ph1">`try/catch`</ph>區塊以<ph id="ph2">`InitializeComponent`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.XamlParseException">
          <source>However, this technique does not integrate well with templates, visual design surfaces and other generated sources that hook up <ph id="ph1">`InitializeComponent`</ph>.</source>
          <target state="translated">不過，這項技術就不會整合也使用樣板時，視覺化設計介面，以及產生其他來源的攔截向上<ph id="ph1">`InitializeComponent`</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.XamlParseException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String)">
          <source>The exception message.</source>
          <target state="translated">例外狀況訊息。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> class, using the specified exception message string.</source>
          <target state="translated">使用指定的例外狀況訊息字串，初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Contains all the information that is required to serialize or deserialize the object.</source>
          <target state="translated">包含序列化或還原序列化物件所需的全部資訊。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The source and destination of a serialized stream.</source>
          <target state="translated">序列化資料流的來源和目的端。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is used for serialization when marshaling an exception of this type across an application domain or machine boundary.</source>
          <target state="translated">這個建構函式用於序列化跨應用程式網域或電腦界限，這種例外狀況封送處理。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)">
          <source>The exception message.</source>
          <target state="translated">例外狀況訊息。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)">
          <source>The initial exception that occurred.</source>
          <target state="translated">發生的初始例外狀況。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> class, using the specified exception message string and inner exception.</source>
          <target state="translated">使用指定的例外狀況訊息字串和內部例外狀況，初始化<ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception.</source>
          <target state="translated">做為前一個例外狀況直接結果擲回的例外狀況應該包含前一個例外狀況的參考。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or <ph id="ph2">`null`</ph> if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 屬性會傳回與傳入建構函式中相同的值；如果 <ph id="ph2">`null`</ph> 屬性沒有提供內部例外值給建構函式，則傳回 <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32)">
          <source>The exception message.</source>
          <target state="translated">例外狀況訊息。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32)">
          <source>The line number where the exception occurred.</source>
          <target state="translated">發生例外狀況的行號。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32)">
          <source>The position in the line at which the exception occurred.</source>
          <target state="translated">行中發生例外狀況的位置。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> class, using the specified exception message string, and the specified line number and position in the line.</source>
          <target state="translated">使用指定的例外狀況訊息字串和指定的行號與在行中的位置，初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
          <source>The exception message.</source>
          <target state="translated">例外狀況訊息。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
          <source>The line number where the exception occurred.</source>
          <target state="translated">發生例外狀況的行號。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
          <source>The position in the line at which the exception occurred.</source>
          <target state="translated">行中發生例外狀況的位置。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
          <source>The initial exception that occurred.</source>
          <target state="translated">發生的初始例外狀況。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> class, using the specified exception message, inner exception, line number, and position in the line.</source>
          <target state="translated">使用指定的例外狀況訊息、內部例外狀況、行號和在行中的位置，初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlParseException" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception.</source>
          <target state="translated">做為前一個例外狀況直接結果擲回的例外狀況應該包含前一個例外狀況的參考。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or <ph id="ph2">`null`</ph> if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 屬性會傳回與傳入建構函式中相同的值；如果 <ph id="ph2">`null`</ph> 屬性沒有提供內部例外值給建構函式，則傳回 <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.XamlParseException.BaseUri">
          <source>Gets base URI information when the exception is thrown.</source>
          <target state="translated">在擲回例外狀況時取得基底 URI 資訊。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.BaseUri">
          <source>The parser context base URI.</source>
          <target state="translated">剖析器內容基底 URI。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.BaseUri">
          <source>Base URI is potentially available because of parser context when the exception occurred.</source>
          <target state="translated">基底 URI 是使用者可能可以使用因為剖析器內容時，發生例外狀況。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.BaseUri">
          <source>Knowing the base URI can be useful for debugging cases where a resource resolution error is the underlying cause.</source>
          <target state="translated">了解基底 URI 可用於偵錯的情況下，資源解析錯誤的根本原因。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The serialization information object to add the serialization data to.</source>
          <target state="translated">要向其中加入序列化資料的序列化資訊物件。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination for this serialization.</source>
          <target state="translated">這個序列化的目的端。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Gets the data that is required to serialize the specified object by populating the specified <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object.</source>
          <target state="translated">取得透過填入指定的 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 物件來序列化指定之物件所需的資料。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.XamlParseException.GetObjectData%2A&gt;</ph> sets a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> object with all the exception object data targeted for serialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.XamlParseException.GetObjectData%2A&gt;</ph> 設定<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>物件序列化的所有例外狀況物件資料。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>During deserialization, the exception is reconstituted from the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> transmitted over the stream.</source>
          <target state="translated">在還原序列化期間，從在資料流上傳輸的 <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> 重新組成例外狀況。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>for providing serialization services.</source>
          <target state="translated">提供序列化服務。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph> Security action: <ph id="ph2">&lt;see cref="M:System.Security.PermissionSet.Demand" /&gt;</ph>.</source>
          <target state="translated">列舉型別相關聯：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>安全性動作： <ph id="ph2">&lt;see cref="M:System.Security.PermissionSet.Demand" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.XamlParseException.KeyContext">
          <source>Gets or sets the key value of the item in a dictionary where the exception occurred.</source>
          <target state="translated">取得或設定項目的機碼值，該項目在發生例外狀況的字典中。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.KeyContext">
          <source>The relevant XAML <ph id="ph1">&lt;see langword="x:Key" /&gt;</ph> value.</source>
          <target state="translated">相關的 XAML <ph id="ph1">&lt;see langword="x:Key" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.XamlParseException.LineNumber">
          <source>Gets the line number where the exception occurred.</source>
          <target state="translated">取得發生例外狀況的行號。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.LineNumber">
          <source>The line number.</source>
          <target state="translated">行號。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.XamlParseException.LinePosition">
          <source>Gets the position in the line where the exception occurred.</source>
          <target state="translated">取得行中發生例外狀況的位置。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.LinePosition">
          <source>The line position.</source>
          <target state="translated">行位置。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.XamlParseException.NameContext">
          <source>Gets or sets the XAML name of the object where the exception occurred.</source>
          <target state="translated">取得或設定發生例外狀況之物件的 XAML 名稱。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.NameContext">
          <source>The XAML name of the object.</source>
          <target state="translated">物件的 XAML 名稱。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.XamlParseException.UidContext">
          <source>Gets or sets the <bpt id="p1">[</bpt>x:Uid Directive<ept id="p1">](~/docs/framework/xaml-services/x-uid-directive.md)</ept> of the object where the exception occurred.</source>
          <target state="translated">取得或設定發生例外狀況之物件的 <bpt id="p1">[</bpt>x:Uid 指示詞<ept id="p1">](~/docs/framework/xaml-services/x-uid-directive.md)</ept>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.XamlParseException.UidContext">
          <source>The value of the <ph id="ph1">&lt;see langword="Uid" /&gt;</ph> string.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Uid" /&gt;</ph> 字串的值。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>