<Type Name="ValueSerializer" FullName="System.Windows.Markup.ValueSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7d0bcead4cb9eb4ed8e1e1bf4db32bff7b856e73" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57936546" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ValueSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ValueSerializer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueSerializer abstract" />
  <TypeSignature Language="F#" Value="type ValueSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>抽象類別，會定義從物件表示進行序列化的轉換行為。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 轉換子傳回序列化的字串必須是無遺失和轉換器必須一律傳回相同的字串，針對特定的值。  如果型別轉換子 (衍生自<xref:System.ComponentModel.TypeConverter>) 不符合這些需求，在其`ConvertTo`字串輸出進行的實作、 自訂<xref:System.Windows.Markup.ValueSerializer>必須宣告。 任一<xref:System.Windows.Markup.ValueSerializer>應符合需求或 null<xref:System.Windows.Markup.ValueSerializer>應該與類型相關聯。 A<xref:System.Windows.Markup.ValueSerializer>是與類型相關聯，藉由套用<xref:System.Windows.Markup.ValueSerializerAttribute>屬性。  
  
 Null<xref:System.Windows.Markup.ValueSerializer>表示應該忽略型別轉換子的物件圖形中的轉換目標字串轉換。  
  
> [!IMPORTANT]
>  實作<xref:System.Windows.Markup.ValueSerializer>應該避免擲回例外狀況。 擲回任何例外狀況無法終止序列化。  
  
 <xref:System.Windows.Markup.IValueSerializerContext> 針對<xref:System.Windows.Markup.ValueSerializer>和其 Api 相當於<xref:System.ComponentModel.ITypeDescriptorContext>如<xref:System.ComponentModel.TypeConverter>。 事實上，<xref:System.Windows.Markup.IValueSerializerContext>繼承<xref:System.ComponentModel.ITypeDescriptorContext>。 當<xref:System.Windows.Markup.ValueSerializer>衍生的類別的 API 呼叫，呼叫端 （通常是序列化程式處理序） 傳遞可能會提供特定服務的內容。 因為一般指導方針，<xref:System.Windows.Markup.ValueSerializer>不得擲回例外狀況。 無法從內容傳回特定的服務也不能擲回任何例外狀況。  
  
 在舊版的.NET Framework 中，這個類別會存在於 WindowsBase WPF 特定組件中。 在  [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]， <xref:System.Windows.Markup.ValueSerializer> System.Xaml 組件中。 如需詳細資訊，請參閱 [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlXmlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Markup.ValueSerializer" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式的主體是空的。<xref:System.Windows.Markup.ValueSerializer>類別未包含任何需要初始化的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFromString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertFromString (value As String, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">要評估以進行轉換的字串。</param>
        <param name="context">用於轉換的內容資訊。</param>
        <summary>在衍生類別中覆寫時，判斷是否可以將指定的 <see cref="T:System.String" /> 轉換成 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的實作所支援之類型的執行個體。</summary>
        <returns>如果可以轉換值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個基底實作一定會傳回 `false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertToString (value As Object, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">要評估以進行轉換的物件。</param>
        <param name="context">用於轉換的內容資訊。</param>
        <summary>在衍生類別中覆寫時，判斷指定的物件是否可以轉換成 <see cref="T:System.String" />。</summary>
        <returns>如果 <paramref name="value" /> 可以轉換成 <see cref="T:System.String" />，則為 <see langword="true" />；否則為 <see langword="false." />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個基底實作一定會傳回 `false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromString">
      <MemberSignature Language="C#" Value="public virtual object ConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertFromString (value As String, context As IValueSerializerContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj&#xA;override this.ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj" Usage="valueSerializer.ConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">要轉換的字串。</param>
        <param name="context">用於轉換的內容資訊。</param>
        <summary>在衍生類別中覆寫時，將 <see cref="T:System.String" /> 轉換成 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的實作所支援之類型的執行個體。</summary>
        <returns><see cref="T:System.Windows.Markup.ValueSerializer" /> 的實作所支援並以所提供 <paramref name="value" /> 為基礎之類型的新執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基底實作一定會擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">無法轉換 <paramref name="value" />。</exception>
        <block subset="none" type="overrides"><para>避免擲回例外狀況與實作。 請參閱 <see cref="T:System.Windows.Markup.ValueSerializer" />。</para></block>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public virtual string ConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertToString (value As Object, context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string&#xA;override this.ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string" Usage="valueSerializer.ConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">要轉換為字串的物件。</param>
        <param name="context">用於轉換的內容資訊。</param>
        <summary>在衍生類別中覆寫時，將指定的物件轉換成 <see cref="T:System.String" />。</summary>
        <returns>指定物件的字串表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基底實作一定會擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">無法轉換 <paramref name="value" />。</exception>
        <block subset="none" type="overrides"><para>避免擲回例外狀況與實作。 請參閱 <see cref="T:System.Windows.Markup.ValueSerializer" />。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetConvertFromException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertFromException (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertFromException(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertFromException (value As Object) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertFromException(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.GetConvertFromException : obj -&gt; Exception" Usage="valueSerializer.GetConvertFromException value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">無法轉換的物件。</param>
        <summary>無法執行轉換時，會傳回要擲回的例外狀況。</summary>
        <returns><see cref="T:System.Exception" /> 物件，表示無法執行 <see langword="ConvertFrom" /> 轉換時將擲回的例外狀況。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 實際`throw`關鍵字不會叫用這個方法，因此典型的用法`throw GetConvertFromException`（與提供的參數）。  
  
 傳回特定的例外狀況<xref:System.InvalidOperationException>，使用`value`傳入例外狀況訊息。 使用方式的模式是例外狀況中的公用程式一樣<xref:System.ComponentModel.TypeConverter>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConvertToException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertToException (object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertToException(object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertToException (value As Object, destinationType As Type) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertToException(System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="member this.GetConvertToException : obj * Type -&gt; Exception" Usage="valueSerializer.GetConvertToException (value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="destinationType" Type="System.Type" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">無法轉換的物件。</param>
        <param name="destinationType">型別，表示轉換嘗試轉換成的型別。</param>
        <summary>無法執行轉換時，會傳回要擲回的例外狀況。</summary>
        <returns><see cref="T:System.Exception" /> 物件，表示無法執行 <see langword="ConvertTo" /> 轉換時將擲回的例外狀況。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 實際`throw`關鍵字不會叫用這個方法，因此典型的用法`throw GetConvertToException`(使用`value`提供的參數)。  
  
 傳回特定的例外狀況<xref:System.InvalidOperationException>，使用`value`傳入例外狀況訊息。 使用方式的模式是例外狀況中的公用程式一樣<xref:System.ComponentModel.TypeConverter>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSerializerFor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得物件的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor descriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="descriptor">要序列化之屬性的 CLR 屬性描述項。</param>
        <summary>藉由為屬性傳遞 CLR 屬性描述項，取得針對該屬性宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
        <returns>與指定之屬性相關聯的序列化程式。 可能傳回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Markup.ValueSerializer>屬性，或作為屬性值的型別，會由套用<xref:System.Windows.Markup.ValueSerializerAttribute>屬性或型別宣告上的屬性。 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>方法會讀取的 CLR 型別系統資訊，並傳回新的公用程式方法<xref:System.Windows.Markup.ValueSerializer>類別基礎屬性上，如果找到屬性，或是如果找到屬性的型別上。 `null` 可能會傳回這類的序列化程式是否存在。 `null` 可能也會傳回如果型別或屬性刻意屬性具有 null 值<xref:System.Windows.Markup.ValueSerializerAttribute>。  
  
 另一個模式，<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>支援傳回內部`TypeConverterValueSerializer`類別，這是<xref:System.Windows.Markup.ValueSerializer>實作包裝<xref:System.ComponentModel.TypeConverter>，並將轉譯`Convert`方法`Convert*String`方法 (例如<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>使用的輸入呼叫<xref:System.String>類型，而且會轉譯為<xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>。 這是只在下列各項為 true 的情況下：  
  
-   A<xref:System.ComponentModel.TypeConverterAttribute>找到相關的屬性，或相關屬性的型別。  
  
-   指定<xref:System.ComponentModel.TypeConverter>可以成功建構。  
  
-   <xref:System.ComponentModel.TypeConverter>會傳回`true`for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>，稱為參考<xref:System.String>型別。  
  
-   <xref:System.ComponentModel.TypeConverter>會傳回`true`for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>，稱為參考<xref:System.String>型別。  
  
-   <xref:System.ComponentModel.TypeConverter>會傳回`true`for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>，稱為參考<xref:System.String>型別。  
  
> [!NOTE]
>  以下是特殊案例︰<xref:System.DateTime>類型都會傳回<xref:System.Windows.Markup.DateTimeValueSerializer>;<xref:System.String>類型傳回內部但功能的序列化程式 (`StringValueSerializer`)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="descriptor" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="type">要為之取得 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的型別。</param>
        <summary>取得為指定之型別宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
        <returns>與指定之型別相關聯的序列化程式。 可能傳回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Markup.ValueSerializer>的型別由套用<xref:System.Windows.Markup.ValueSerializerAttribute>型別宣告上的屬性。 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>方法會讀取的 CLR 型別系統資訊，並傳回新的公用程式方法<xref:System.Windows.Markup.ValueSerializer>類別，如果根據屬性上指定找到`type`。 `null` 可能會傳回這類的序列化程式是否存在。 `null` 可能也會傳回型別如果刻意屬性具有 null 值<xref:System.Windows.Markup.ValueSerializerAttribute>。  
  
 另一個模式，<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>支援傳回內部`TypeConverterValueSerializer`類別，這是<xref:System.Windows.Markup.ValueSerializer>實作包裝<xref:System.ComponentModel.TypeConverter>，並將轉譯`Convert`方法`Convert*String`方法 (例如<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>使用的輸入呼叫<xref:System.String>類型，而且會轉譯為<xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>。 這是只在下列各項為 true 的情況下：  
  
-   A<xref:System.ComponentModel.TypeConverterAttribute>上找到`type`。  
  
-   指定<xref:System.ComponentModel.TypeConverter>可以成功建構。  
  
-   <xref:System.ComponentModel.TypeConverter>會傳回`true`for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>，稱為參考<xref:System.String>型別。  
  
-   <xref:System.ComponentModel.TypeConverter>會傳回`true`for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>，稱為參考<xref:System.String>型別。  
  
-   <xref:System.ComponentModel.TypeConverter>會傳回`true`for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>，稱為參考<xref:System.String>型別。  
  
> [!NOTE]
>  以下是特殊案例︰<xref:System.DateTime>類型都會傳回<xref:System.Windows.Markup.DateTimeValueSerializer>;<xref:System.String>類型傳回內部但功能的序列化程式 (`StringValueSerializer`)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor, context As IValueSerializerContext) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (descriptor, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="descriptor">要序列化之屬性的描述項。</param>
        <param name="context">用於轉換的內容資訊。</param>
        <summary>使用指定的內容，取得為指定之屬性宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
        <returns>與指定之屬性相關聯的序列化程式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 而不是單純在信賴憑證者報告屬性在 CLR 型別系統中，會使用這個多載`context`做為服務，並呼叫服務的實作<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>。 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>實作會通常也依賴`descriptor`，但可能會實作的特定內容的特殊行為。  
  
 呼叫端具有可用時，就應該呼叫這個方法<xref:System.Windows.Markup.IValueSerializerContext>從服務。  這可確保正確<xref:System.Windows.Markup.ValueSerializer>傳回特定的內容。  
  
 如果內容會傳回`null`從其<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>針對您指定`descriptor`，或如果您指定的內容為`null`，然後行為等同於呼叫<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29>多載。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="descriptor" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="type">要為之取得 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的型別。</param>
        <param name="context">用於轉換的內容資訊。</param>
        <summary>使用指定的內容，取得為指定之型別宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
        <returns>與指定之型別相關聯的序列化程式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 而不是單純在信賴憑證者報告屬性在 CLR 型別系統中，會使用這個多載`context`做為服務，並呼叫服務的實作<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>。 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>實作會通常也依賴`type`，但可能會實作的特定內容的特殊行為。  
  
 呼叫端具有可用時，就應該呼叫這個方法<xref:System.Windows.Markup.IValueSerializerContext>從服務。 這可確保正確<xref:System.Windows.Markup.ValueSerializer>傳回特定的內容。  
  
 如果內容會傳回`null`從其<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>針對您指定`type`，或如果您指定的內容為`null`，然後行為等同於呼叫<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29>多載。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TypeReferences (value As Object, context As IValueSerializerContext) As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;&#xA;override this.TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;" Usage="valueSerializer.TypeReferences (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.8" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" Index="1" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">正在序列化的值。</param>
        <param name="context">用於轉換的內容資訊。</param>
        <summary>取得 <see cref="T:System.Windows.Markup.ValueSerializer" /> 所參考之型別的列舉型別 (Enumeration)。</summary>
        <returns>由此序列化程式轉換的型別。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 任何型別<xref:System.Windows.Markup.ValueSerializer>轉換應該包含在傳回的列舉。  這可讓序列化程式，以確保還原序列化程式有足夠的資訊，關於類型轉換此序列化程式。  
  
 覆寫這個方法是進階的案例。 覆寫應該只會需要您實作一個系統提供 XAML 結構描述內容的 CLR 型別系統 ownertype 屬性關聯性並報告足夠的資訊。  
  
## <a name="wpf-usage-notes"></a>WPF 使用注意事項  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]屬性系統會實作覆寫的內部值序列化程式<xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A>因為相依性屬性概念，它可以有加入擁有者。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 運算式也會有特殊的內部處理。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>