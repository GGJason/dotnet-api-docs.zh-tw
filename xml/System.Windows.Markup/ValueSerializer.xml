<Type Name="ValueSerializer" FullName="System.Windows.Markup.ValueSerializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dfe7052738061deaaa68c30a6aaa5efc25671310" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ValueSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ValueSerializer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueSerializer abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d16d1-101">抽象類別，其定義從物件表示進行序列化的轉換行為。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d16d1-101">Abstract class that defines conversion behavior for serialization from an object representation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d16d1-102">轉換器會傳回序列化的字串必須是無遺失，而且轉換器必須一律會傳回特定的值相同的字串。</span><span class="sxs-lookup"><span data-stu-id="d16d1-102">The string a converter returns for serialization must be loss-less and the converter must always return the same string for a particular value.</span></span>  <span data-ttu-id="d16d1-103">如果型別轉換子 (衍生自<xref:System.ComponentModel.TypeConverter>) 不符合這些需求，在其`ConvertTo`字串輸出的實作、 自訂<xref:System.Windows.Markup.ValueSerializer>必須宣告。</span><span class="sxs-lookup"><span data-stu-id="d16d1-103">If a type converter (derived from <xref:System.ComponentModel.TypeConverter>) does not meet these requirements in its `ConvertTo` implementations for string output, a custom <xref:System.Windows.Markup.ValueSerializer> must be declared.</span></span> <span data-ttu-id="d16d1-104">任一<xref:System.Windows.Markup.ValueSerializer>應該符合需求或 null<xref:System.Windows.Markup.ValueSerializer>應該與類型相關聯。</span><span class="sxs-lookup"><span data-stu-id="d16d1-104">Either the <xref:System.Windows.Markup.ValueSerializer> should meet the requirements, or a null <xref:System.Windows.Markup.ValueSerializer> should be associated with the type.</span></span> <span data-ttu-id="d16d1-105">A<xref:System.Windows.Markup.ValueSerializer>是藉由套用的型別相關聯<xref:System.Windows.Markup.ValueSerializerAttribute>屬性。</span><span class="sxs-lookup"><span data-stu-id="d16d1-105">A <xref:System.Windows.Markup.ValueSerializer> is associated with a type by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute.</span></span>  
  
 <span data-ttu-id="d16d1-106">Null<xref:System.Windows.Markup.ValueSerializer>表示的類型轉換器，應該忽略的物件圖形中的轉換目標字串轉換。</span><span class="sxs-lookup"><span data-stu-id="d16d1-106">A null <xref:System.Windows.Markup.ValueSerializer> indicates the type converter should be ignored for convert-to-string conversions from the object graph.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d16d1-107">實作<xref:System.Windows.Markup.ValueSerializer>應該避免擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d16d1-107">Implementation of <xref:System.Windows.Markup.ValueSerializer> should avoid throwing exceptions.</span></span> <span data-ttu-id="d16d1-108">擲回任何例外狀況無法終止序列化。</span><span class="sxs-lookup"><span data-stu-id="d16d1-108">Any exceptions thrown could terminate serialization.</span></span>  
  
 <span data-ttu-id="d16d1-109"><xref:System.Windows.Markup.IValueSerializerContext> 如<xref:System.Windows.Markup.ValueSerializer>，及其的 Api 類似<xref:System.ComponentModel.ITypeDescriptorContext>如<xref:System.ComponentModel.TypeConverter>。</span><span class="sxs-lookup"><span data-stu-id="d16d1-109"><xref:System.Windows.Markup.IValueSerializerContext> for a <xref:System.Windows.Markup.ValueSerializer> and its APIs is analogous to <xref:System.ComponentModel.ITypeDescriptorContext> for a <xref:System.ComponentModel.TypeConverter>.</span></span> <span data-ttu-id="d16d1-110">事實上，<xref:System.Windows.Markup.IValueSerializerContext>繼承<xref:System.ComponentModel.ITypeDescriptorContext>。</span><span class="sxs-lookup"><span data-stu-id="d16d1-110">In fact, <xref:System.Windows.Markup.IValueSerializerContext> inherits <xref:System.ComponentModel.ITypeDescriptorContext>.</span></span> <span data-ttu-id="d16d1-111">當<xref:System.Windows.Markup.ValueSerializer>衍生的類別的 API 呼叫，呼叫端 （通常是序列化程式處理序） 傳遞可能會提供特定服務的內容。</span><span class="sxs-lookup"><span data-stu-id="d16d1-111">When a <xref:System.Windows.Markup.ValueSerializer> derived class API is called, the caller (typically a serializer process) passes a context that may provide certain services.</span></span> <span data-ttu-id="d16d1-112">因為一般指導方針，<xref:System.Windows.Markup.ValueSerializer>必須不會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d16d1-112">Because of the general guidance that a <xref:System.Windows.Markup.ValueSerializer> must not throw exceptions.</span></span> <span data-ttu-id="d16d1-113">無法從內容傳回特定的服務也不能擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d16d1-113">Failure to return a particular service from the context must also not throw any exceptions.</span></span>  
  
 <span data-ttu-id="d16d1-114">在舊版的.NET Framework 中，這個類別會存在於 WindowsBase WPF 專屬組件中。</span><span class="sxs-lookup"><span data-stu-id="d16d1-114">In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="d16d1-115">在[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，<xref:System.Windows.Markup.ValueSerializer>位於 System.Xaml 組件中。</span><span class="sxs-lookup"><span data-stu-id="d16d1-115">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ValueSerializer> is in the System.Xaml assembly.</span></span> <span data-ttu-id="d16d1-116">如需詳細資訊，請參閱[從 WPF 移轉至 System.Xaml 的類型](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)。</span><span class="sxs-lookup"><span data-stu-id="d16d1-116">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlXmlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d16d1-117">初始化 <see cref="T:System.Windows.Markup.ValueSerializer" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-117">Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializer" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d16d1-118">這個建構函式的主體是空的。<xref:System.Windows.Markup.ValueSerializer>類別不包含任何需要初始化的值。</span><span class="sxs-lookup"><span data-stu-id="d16d1-118">The body of this constructor is empty; the <xref:System.Windows.Markup.ValueSerializer> class does not contain any values that require initialization.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFromString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertFromString (value As String, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d16d1-119">要評估以進行轉換的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-119">The string to evaluate for conversion.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="d16d1-120">用於轉換的內容資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-120">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d16d1-121">在衍生類別中覆寫時，判斷是否可以將指定的 <see cref="T:System.String" /> 轉換成 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的實作所支援之類型的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-121">When overridden in a derived class, determines whether the specified <see cref="T:System.String" /> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d16d1-122">如果可以轉換值，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-122">
              <see langword="true" /> if the value can be converted; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d16d1-123">這個基底實作一定會傳回 `false`。</span><span class="sxs-lookup"><span data-stu-id="d16d1-123">The base implementation always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertToString (value As Object, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d16d1-124">要評估以進行轉換的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-124">The object to evaluate for conversion.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="d16d1-125">用於轉換的內容資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-125">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d16d1-126">在衍生類別中覆寫時，判斷指定的物件是否可以轉換成 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-126">When overridden in a derived class, determines whether the specified object can be converted into a <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d16d1-127">如果 <paramref name="value" /> 可以轉換成 <see cref="T:System.String" />，則為 <see langword="true" />；否則為 <see langword="false." />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-127">
              <see langword="true" /> if the <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, <see langword="false." /></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d16d1-128">這個基底實作一定會傳回 `false`。</span><span class="sxs-lookup"><span data-stu-id="d16d1-128">The base implementation always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromString">
      <MemberSignature Language="C#" Value="public virtual object ConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertFromString (value As String, context As IValueSerializerContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d16d1-129">要轉換的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-129">The string to convert.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="d16d1-130">用於轉換的內容資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-130">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d16d1-131">在衍生類別中覆寫時，將 <see cref="T:System.String" /> 轉換成 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的實作所支援之類型的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-131">When overridden in a derived class, converts a <see cref="T:System.String" /> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d16d1-132">
            <see cref="T:System.Windows.Markup.ValueSerializer" /> 的實作所支援並以所提供 <paramref name="value" /> 為基礎之類型的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-132">A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports based on the supplied <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d16d1-133">基底實作一律會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d16d1-133">The base implementation always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d16d1-134">無法轉換 <paramref name="value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-134">
              <paramref name="value" /> cannot be converted.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="d16d1-135">避免擲回例外狀況，從實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="d16d1-135">Avoid throwing exceptions from implementations.</span>
            </span>
            <span data-ttu-id="d16d1-136">請參閱 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="d16d1-136">See <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public virtual string ConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertToString (value As Object, context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d16d1-137">要轉換為字串的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-137">The object to convert into a string.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="d16d1-138">用於轉換的內容資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-138">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d16d1-139">在衍生類別中覆寫時，將指定的物件轉換成 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-139">When overridden in a derived class, converts the specified object to a <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d16d1-140">指定物件的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-140">A string representation of the specified object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d16d1-141">基底實作一律會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="d16d1-141">The base implementation always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d16d1-142">無法轉換 <paramref name="value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-142">
              <paramref name="value" /> cannot be converted.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="d16d1-143">避免擲回例外狀況，從實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="d16d1-143">Avoid throwing exceptions from implementations.</span>
            </span>
            <span data-ttu-id="d16d1-144">請參閱 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="d16d1-144">See <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetConvertFromException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertFromException (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertFromException(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertFromException (value As Object) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertFromException(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d16d1-145">無法轉換的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-145">The object that could not be converted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d16d1-146">傳回要在無法執行轉換時擲回的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-146">Returns an exception to throw when a conversion cannot be performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d16d1-147">
            <see cref="T:System.Exception" /> 物件，表示無法執行 <see langword="ConvertFrom" /> 轉換時將擲回的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-147">An <see cref="T:System.Exception" /> object for the exception to throw when a <see langword="ConvertFrom" /> conversion cannot be performed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d16d1-148">實際`throw`關鍵字不會叫用這個方法，因此通常的使用方式`throw GetConvertFromException`（與提供的參數）。</span><span class="sxs-lookup"><span data-stu-id="d16d1-148">The actual `throw` keyword is not invoked by this method, therefore the typical usage is `throw GetConvertFromException` (with parameters provided).</span></span>  
  
 <span data-ttu-id="d16d1-149">特定的例外狀況傳回為<xref:System.InvalidOperationException>，與`value`傳入例外狀況訊息。</span><span class="sxs-lookup"><span data-stu-id="d16d1-149">The specific exception returned is <xref:System.InvalidOperationException>, with `value` passed in the exception message.</span></span> <span data-ttu-id="d16d1-150">使用方式的模式是例外狀況中的公用程式與相同<xref:System.ComponentModel.TypeConverter>。</span><span class="sxs-lookup"><span data-stu-id="d16d1-150">The pattern for usage is the same as for exception utilities in <xref:System.ComponentModel.TypeConverter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConvertToException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertToException (object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertToException(object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertToException (value As Object, destinationType As Type) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertToException(System::Object ^ value, Type ^ destinationType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d16d1-151">無法轉換的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-151">The object that could not be converted.</span>
          </span>
        </param>
        <param name="destinationType">
          <span data-ttu-id="d16d1-152">類型，代表轉換嘗試轉換的目標類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-152">A type that represents the type the conversion was trying to convert to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d16d1-153">傳回要在無法執行轉換時擲回的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-153">Returns an exception to throw when a conversion cannot be performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d16d1-154">
            <see cref="T:System.Exception" /> 物件，表示無法執行 <see langword="ConvertTo" /> 轉換時將擲回的例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-154">An <see cref="T:System.Exception" /> object for the exception to throw when a <see langword="ConvertTo" /> conversion cannot be performed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d16d1-155">實際`throw`關鍵字不會叫用這個方法，因此通常的使用方式`throw GetConvertToException`(與`value`提供參數)。</span><span class="sxs-lookup"><span data-stu-id="d16d1-155">The actual `throw` keyword is not invoked by this method, therefore the typical usage is `throw GetConvertToException` (with `value` parameter provided).</span></span>  
  
 <span data-ttu-id="d16d1-156">特定的例外狀況傳回為<xref:System.InvalidOperationException>，與`value`傳入例外狀況訊息。</span><span class="sxs-lookup"><span data-stu-id="d16d1-156">The specific exception returned is <xref:System.InvalidOperationException>, with `value` passed in the exception message.</span></span> <span data-ttu-id="d16d1-157">使用方式的模式是例外狀況中的公用程式與相同<xref:System.ComponentModel.TypeConverter>。</span><span class="sxs-lookup"><span data-stu-id="d16d1-157">The pattern for usage is the same as for exception utilities in <xref:System.ComponentModel.TypeConverter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSerializerFor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d16d1-158">取得物件的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-158">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> for an object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="descriptor">
          <span data-ttu-id="d16d1-159">要序列化之屬性的 CLR 屬性描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-159">The CLR property descriptor for the property to be serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d16d1-160">藉由為屬性傳遞 CLR 屬性描述項，取得針對該屬性宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-160">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for a property, by passing a CLR property descriptor for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d16d1-161">與指定屬性相關聯的序列化程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-161">The serializer associated with the specified property.</span>
          </span>
          <span data-ttu-id="d16d1-162">可能傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-162">May return <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d16d1-163">A<xref:System.Windows.Markup.ValueSerializer>屬性，或做為屬性值的型別，會以套用<xref:System.Windows.Markup.ValueSerializerAttribute>屬性或類型宣告的屬性。</span><span class="sxs-lookup"><span data-stu-id="d16d1-163">A <xref:System.Windows.Markup.ValueSerializer> for a property, or for a type that is used as the value for a property, is indicated by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute on the property or type declaration.</span></span> <span data-ttu-id="d16d1-164"><xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>方法會讀取的 CLR 型別系統資訊，並傳回新的公用程式方法<xref:System.Windows.Markup.ValueSerializer>類別以在屬性上，如果找到屬性，或是如果找到屬性的型別上。</span><span class="sxs-lookup"><span data-stu-id="d16d1-164">The <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> method is a utility method that reads the CLR type system information and returns a new <xref:System.Windows.Markup.ValueSerializer> class based on the attribute if found on the property, or then if found on the property's type.</span></span> <span data-ttu-id="d16d1-165">`null` 可能會傳回這類的序列化程式是否存在。</span><span class="sxs-lookup"><span data-stu-id="d16d1-165">`null` might be returned if no such serializer exists.</span></span> <span data-ttu-id="d16d1-166">`null` 可能也會傳回如果型別或屬性刻意屬性具有 null 值<xref:System.Windows.Markup.ValueSerializerAttribute>。</span><span class="sxs-lookup"><span data-stu-id="d16d1-166">`null` might also be returned if a type or property is deliberately attributed with a null-value <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span>  
  
 <span data-ttu-id="d16d1-167">另一個模式，<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>支援傳回內部`TypeConverterValueSerializer`類別，這是<xref:System.Windows.Markup.ValueSerializer>實作包裝<xref:System.ComponentModel.TypeConverter>並轉譯`Convert`方法`Convert*String`方法 (執行個體<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>呼叫時所使用的輸入<xref:System.String>類型，而會轉譯為<xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="d16d1-167">Another mode that <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> supports is returning the internal `TypeConverterValueSerializer` class, which is a <xref:System.Windows.Markup.ValueSerializer> implementation that wraps a <xref:System.ComponentModel.TypeConverter> and translates the `Convert` methods to `Convert*String` methods (for instance <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> is called with input of the <xref:System.String> type, and translates to <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span></span> <span data-ttu-id="d16d1-168">這是只有在下列各項全部為 true 的情況下：</span><span class="sxs-lookup"><span data-stu-id="d16d1-168">This is done only in cases where all of the following are true:</span></span>  
  
-   <span data-ttu-id="d16d1-169">A<xref:System.ComponentModel.TypeConverterAttribute>相關的屬性或相關的屬性類型上找到。</span><span class="sxs-lookup"><span data-stu-id="d16d1-169">A <xref:System.ComponentModel.TypeConverterAttribute> is found on the relevant property, or the relevant property's type.</span></span>  
  
-   <span data-ttu-id="d16d1-170">指定<xref:System.ComponentModel.TypeConverter>可成功建構。</span><span class="sxs-lookup"><span data-stu-id="d16d1-170">The indicated <xref:System.ComponentModel.TypeConverter> can be successfully constructed.</span></span>  
  
-   <span data-ttu-id="d16d1-171"><xref:System.ComponentModel.TypeConverter>傳回`true`如<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>，稱為參考<xref:System.String>型別。</span><span class="sxs-lookup"><span data-stu-id="d16d1-171">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="d16d1-172"><xref:System.ComponentModel.TypeConverter>傳回`true`如<xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>，稱為參考<xref:System.String>型別。</span><span class="sxs-lookup"><span data-stu-id="d16d1-172">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="d16d1-173"><xref:System.ComponentModel.TypeConverter>傳回`true`如<xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>，稱為參考<xref:System.String>型別。</span><span class="sxs-lookup"><span data-stu-id="d16d1-173">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d16d1-174">以下是特殊情況：<xref:System.DateTime>類型都會傳回<xref:System.Windows.Markup.DateTimeValueSerializer>;<xref:System.String>類型都會傳回內部但功能的序列化程式 (`StringValueSerializer`)。</span><span class="sxs-lookup"><span data-stu-id="d16d1-174">The following are special cases: <xref:System.DateTime> types return a <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> types return an internal but functional serializer (`StringValueSerializer`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d16d1-175">
            <paramref name="descriptor" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-175">
              <paramref name="descriptor" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d16d1-176">要為之取得 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-176">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d16d1-177">取得為指定之型別宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-177">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d16d1-178">與指定類型相關聯的序列化程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-178">The serializer associated with the specified type.</span>
          </span>
          <span data-ttu-id="d16d1-179">可能傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-179">May return <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d16d1-180">A<xref:System.Windows.Markup.ValueSerializer>類型是藉由套用所示<xref:System.Windows.Markup.ValueSerializerAttribute>屬性的型別宣告。</span><span class="sxs-lookup"><span data-stu-id="d16d1-180">A <xref:System.Windows.Markup.ValueSerializer> for a type is indicated by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute on the type declaration.</span></span> <span data-ttu-id="d16d1-181"><xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>方法會讀取的 CLR 型別系統資訊，並傳回新的公用程式方法<xref:System.Windows.Markup.ValueSerializer>如果基礎屬性類別上指定找到`type`。</span><span class="sxs-lookup"><span data-stu-id="d16d1-181">The <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> method is a utility method that reads the CLR type system information and returns a new <xref:System.Windows.Markup.ValueSerializer> class based on the attribute if found on the specified `type`.</span></span> <span data-ttu-id="d16d1-182">`null` 可能會傳回這類的序列化程式是否存在。</span><span class="sxs-lookup"><span data-stu-id="d16d1-182">`null` might be returned if no such serializer exists.</span></span> <span data-ttu-id="d16d1-183">`null` 可能也會傳回型別如果刻意屬性具有 null 值<xref:System.Windows.Markup.ValueSerializerAttribute>。</span><span class="sxs-lookup"><span data-stu-id="d16d1-183">`null` might also be returned if a type is deliberately attributed with a null-value <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span>  
  
 <span data-ttu-id="d16d1-184">另一個模式，<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>支援傳回內部`TypeConverterValueSerializer`類別，這是<xref:System.Windows.Markup.ValueSerializer>實作包裝<xref:System.ComponentModel.TypeConverter>並轉譯`Convert`方法`Convert*String`方法 (執行個體<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>呼叫時所使用的輸入<xref:System.String>類型，而會轉譯為<xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="d16d1-184">Another mode that <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> supports is returning the internal `TypeConverterValueSerializer` class, which is a <xref:System.Windows.Markup.ValueSerializer> implementation that wraps a <xref:System.ComponentModel.TypeConverter> and translates the `Convert` methods to `Convert*String` methods (for instance <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> is called with input of the <xref:System.String> type, and translates to <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span></span> <span data-ttu-id="d16d1-185">這是只有在下列各項全部為 true 的情況下：</span><span class="sxs-lookup"><span data-stu-id="d16d1-185">This is done only in cases where all of the following are true:</span></span>  
  
-   <span data-ttu-id="d16d1-186">A<xref:System.ComponentModel.TypeConverterAttribute>上找到`type`。</span><span class="sxs-lookup"><span data-stu-id="d16d1-186">A <xref:System.ComponentModel.TypeConverterAttribute> is found on `type`.</span></span>  
  
-   <span data-ttu-id="d16d1-187">指定<xref:System.ComponentModel.TypeConverter>可成功建構。</span><span class="sxs-lookup"><span data-stu-id="d16d1-187">The indicated <xref:System.ComponentModel.TypeConverter> can be successfully constructed.</span></span>  
  
-   <span data-ttu-id="d16d1-188"><xref:System.ComponentModel.TypeConverter>傳回`true`如<xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>，稱為參考<xref:System.String>型別。</span><span class="sxs-lookup"><span data-stu-id="d16d1-188">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="d16d1-189"><xref:System.ComponentModel.TypeConverter>傳回`true`如<xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>，稱為參考<xref:System.String>型別。</span><span class="sxs-lookup"><span data-stu-id="d16d1-189">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="d16d1-190"><xref:System.ComponentModel.TypeConverter>傳回`true`如<xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>，稱為參考<xref:System.String>型別。</span><span class="sxs-lookup"><span data-stu-id="d16d1-190">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d16d1-191">以下是特殊情況：<xref:System.DateTime>類型都會傳回<xref:System.Windows.Markup.DateTimeValueSerializer>;<xref:System.String>類型都會傳回內部但功能的序列化程式 (`StringValueSerializer`)。</span><span class="sxs-lookup"><span data-stu-id="d16d1-191">The following are special cases: <xref:System.DateTime> types return a <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> types return an internal but functional serializer (`StringValueSerializer`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d16d1-192">
            <paramref name="type" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-192">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor, context As IValueSerializerContext) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="descriptor">
          <span data-ttu-id="d16d1-193">要序列化之屬性的描述元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-193">Descriptor for the property to be serialized.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="d16d1-194">用於轉換的內容資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-194">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d16d1-195">使用指定的內容，取得為指定之屬性宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-195">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified property, using the specified context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d16d1-196">與指定屬性相關聯的序列化程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-196">The serializer associated with the specified property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d16d1-197">而不是單純地在信賴憑證者報告屬性在 CLR 型別系統中，這個多載使用`context`為服務，並呼叫服務的實作<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d16d1-197">Rather than relying purely on attributes reported in the CLR type system, this overload uses the `context` as a service, and calls the service's implementation of <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d16d1-198"><xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>實作會通常也依賴`descriptor`，但可能會實作特殊行為的某些內容。</span><span class="sxs-lookup"><span data-stu-id="d16d1-198">The <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> implementation would typically also rely on the `descriptor`, but might implement special behavior for certain contexts.</span></span>  
  
 <span data-ttu-id="d16d1-199">當呼叫端具有可用時，應該呼叫這個方法<xref:System.Windows.Markup.IValueSerializerContext>從服務。</span><span class="sxs-lookup"><span data-stu-id="d16d1-199">This method should be called when the caller has an available <xref:System.Windows.Markup.IValueSerializerContext> from a service.</span></span>  <span data-ttu-id="d16d1-200">這可確保正確<xref:System.Windows.Markup.ValueSerializer>傳回特定內容。</span><span class="sxs-lookup"><span data-stu-id="d16d1-200">This will ensure that the correct <xref:System.Windows.Markup.ValueSerializer> is returned for the specific context.</span></span>  
  
 <span data-ttu-id="d16d1-201">如果內容傳回`null`從其<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>您指定`descriptor`，或如果您指定的內容為`null`，則行為等同於呼叫<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29>多載。</span><span class="sxs-lookup"><span data-stu-id="d16d1-201">If the context returns `null` from its <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> for your specified `descriptor`, or if the context you specify is `null`, then behavior is identical to calling the <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d16d1-202">
            <paramref name="descriptor" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-202">
              <paramref name="descriptor" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d16d1-203">要為之取得 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-203">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="d16d1-204">用於轉換的內容資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-204">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d16d1-205">使用指定的內容，取得為指定之型別宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-205">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type, using the specified context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d16d1-206">與指定類型相關聯的序列化程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-206">The serializer associated with the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d16d1-207">而不是單純地在信賴憑證者報告屬性在 CLR 型別系統中，這個多載使用`context`為服務，並呼叫服務的實作<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d16d1-207">Rather than relying purely on attributes reported in the CLR type system, this overload uses the `context` as a service, and calls the service's implementation of <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d16d1-208"><xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>實作會通常也依賴`type`，但可能會實作特殊行為的某些內容。</span><span class="sxs-lookup"><span data-stu-id="d16d1-208">The <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> implementation would typically also rely on the `type`, but might implement special behavior for certain contexts.</span></span>  
  
 <span data-ttu-id="d16d1-209">當呼叫端具有可用時，應該呼叫這個方法<xref:System.Windows.Markup.IValueSerializerContext>從服務。</span><span class="sxs-lookup"><span data-stu-id="d16d1-209">This method should be called when the caller has an available <xref:System.Windows.Markup.IValueSerializerContext> from a service.</span></span> <span data-ttu-id="d16d1-210">這可確保正確<xref:System.Windows.Markup.ValueSerializer>傳回特定內容。</span><span class="sxs-lookup"><span data-stu-id="d16d1-210">This will ensure that the correct <xref:System.Windows.Markup.ValueSerializer> is returned for the specific context.</span></span>  
  
 <span data-ttu-id="d16d1-211">如果內容傳回`null`從其<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>您指定`type`，或如果您指定的內容為`null`，則行為等同於呼叫<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29>多載。</span><span class="sxs-lookup"><span data-stu-id="d16d1-211">If the context returns `null` from its <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> for your specified `type`, or if the context you specify is `null`, then behavior is identical to calling the <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d16d1-212">
            <paramref name="type" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-212">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TypeReferences (value As Object, context As IValueSerializerContext) As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d16d1-213">正在序列化的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-213">The value being serialized.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="d16d1-214">用於轉換的內容資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-214">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d16d1-215">取得 <see cref="T:System.Windows.Markup.ValueSerializer" /> 所參考之型別的列舉型別 (Enumeration)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-215">Gets an enumeration of the types referenced by the <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d16d1-216">這個序列化程式轉換的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d16d1-216">The types converted by this serializer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d16d1-217">任何型別<xref:System.Windows.Markup.ValueSerializer>轉換應該包含在傳回的列舉。</span><span class="sxs-lookup"><span data-stu-id="d16d1-217">Any types a <xref:System.Windows.Markup.ValueSerializer> converts should be included in the returned enumeration.</span></span>  <span data-ttu-id="d16d1-218">這可讓以確保還原序列化程式有足夠的資訊，有關類型轉換這個序列化程式序列化程式。</span><span class="sxs-lookup"><span data-stu-id="d16d1-218">This allows a serializer to ensure a de-serializer has enough information about the types this serializer converts.</span></span>  
  
 <span data-ttu-id="d16d1-219">覆寫這個方法是進階的案例。</span><span class="sxs-lookup"><span data-stu-id="d16d1-219">Overriding this method is an advanced scenario.</span></span> <span data-ttu-id="d16d1-220">覆寫只能為必要，如果您實作系統可使用 XAML 結構描述內容的 CLR 型別系統 ownertype 屬性關聯性並報告足夠的資訊。</span><span class="sxs-lookup"><span data-stu-id="d16d1-220">Overriding should only be necessary if you are implementing a system where CLR type system ownertype-property relationships available to a XAML schema context do not report enough information.</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="d16d1-221">WPF 使用注意事項</span><span class="sxs-lookup"><span data-stu-id="d16d1-221">WPF Usage Notes</span></span>  
 <span data-ttu-id="d16d1-222">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]屬性系統會實作覆寫的內部值序列化程式<xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A>因為相依性屬性的概念，它可以有加入擁有者。</span><span class="sxs-lookup"><span data-stu-id="d16d1-222">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system implements an internal value serializer that overrides <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> because a dependency property has a concept that it can have added owners.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="d16d1-223"> 運算式也會有特殊的內部處理。</span><span class="sxs-lookup"><span data-stu-id="d16d1-223"> expressions also have special internal handling.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>