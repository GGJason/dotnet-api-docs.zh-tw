<Type Name="MarkupExtension" FullName="System.Windows.Markup.MarkupExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f36d9706c5d26b97dcc9537ee7078eceaf138fc8" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30658202" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarkupExtension abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>為 .NET Framework XAML 服務及其他 XAML 讀取器和 XAML 寫入器可支援的 XAML 標記延伸實作，提供基底類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 標記延伸會將物件傳回至呼叫者，根據輸入的字串屬性值或 XAML 中的標記項目。 標記延伸會比單獨的型別轉換子可以完成更複雜的方式傳回物件。 XAML 物件寫入器會叫用型別轉換子，因為型別或成員具有與其相關聯的類型轉換子實作。 從 CLR 參考框架，這表示類型或成員是<xref:System.ComponentModel.TypeConverterAttribute>屬性化。 從 XAML 類型系統觀點來看，這表示將 XAML 類型或 XAML 成員的值及其`TypeConverter`屬性。 型別轉換子的引動過程類型或屬性定義，繫結，而且一律由 XAML 處理這些情況下叫用。 相較之下，標記延伸更多控制的使用者程式碼和使用者產生的標記，可以在應用程式案例需要它時套用。 標記延伸可以叫用，並可用來設定不同的型別成員的值，只要在標記延伸的傳回型別是可指派給該值。  
  
 如需建立自訂標記延伸的資訊，請參閱<xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>。 如需有關一般中的標記延伸的詳細資訊，請參閱[標記延伸 XAML 概觀](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)。 如果您要建置在 WPF 和使用或建立 XAML 標記延伸，可以在主題中找到的其他相關資訊[標記延伸和 WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)。  
  
 <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>方法的每個標記延伸實作可以使用<xref:System.IServiceProvider>在執行階段可以提供內容。 這<xref:System.IServiceProvider>接著會針對特定的服務傳遞資訊，例如查詢<xref:System.Windows.Markup.IProvideValueTarget>或<xref:System.Windows.Markup.IXamlTypeResolver>。 如需標記延伸的服務內容的詳細資訊，請參閱[適用於類型轉換器和標記延伸](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)。  
  
 在衍生的類別應該以屬性<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>通知的最特定的傳回類型可以從標記延伸的取用者<xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>實作。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MarkupExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化衍生自 <see cref="T:System.Windows.Markup.MarkupExtension" /> 之類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.MarkupExtension>抽象類別不會保存需要初始化任何私用值。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>功能的標記延伸應該定義自己的公用預設建構函式。 此外，標記延伸都應該實作適合擴充功能的預定的功能和標記使用方式的建構函式。 如需詳細資訊，請參閱[標記延伸 XAML 概觀](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public abstract object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">可以為標記延伸提供服務的服務提供者 Helper。</param>
        <summary>在衍生類別中實作時，傳回物件，這個物件提供為這個標記延伸的目標屬性值。</summary>
        <returns>要在套用延伸的屬性上設定的物件值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XAML 處理器在處理標記延伸的型別節點和成員值，它會叫用<xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>該標記延伸的方法，並將結果寫入至物件圖形或序列化資料流。 XAML 物件寫入器會將服務內容傳遞至每個這類實作透過`serviceProvider`參數。  
  
 如需如何實作詳細資訊，請參閱"備忘稿實施者 」 一節<xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>自訂標記延伸中。  
  
## <a name="wpf-usage-notes"></a>WPF 使用注意事項  
  
> [!IMPORTANT]
>  具有特定標記的 set 作業互動的 WPF 類別不應依賴<xref:System.Windows.Markup.IReceiveMarkupExtension>如[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]實作。 使用<xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-改為屬性化回呼。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>通常是可自訂的或現有的預設服務提供者所傳回的通用服務<see cref="T:System.Windows.Markup.MarkupExtension" />實作包含下列主要的服務。  
  
-   <see cref="T:System.Windows.Markup.IProvideValueTarget" /> 報表物件參考，並從標記延伸的使用位置的內容屬性的識別項  
  
-   <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 會公開與一般的 XAML 物件寫入行為可提供服務<see cref="T:System.Type" />根據 XAML 型別名稱。 名稱可以選擇性地包含對應的 XAML 命名空間前置詞。  
  
-   <see cref="T:System.Xaml.IXamlSchemaContextProvider" /> 直接公開作用中的 XAML 結構描述內容。 從報告<see cref="T:System.Xaml.XamlSchemaContext" />，您可以取得 XAML 結構描述內容資訊這類組件對應的型別支援，慣用的前置詞，在組件如何列出每個<see cref="T:System.Xaml.XamlType" />組件，依此類推。  
  
-   其他可用服務的更具特製化的標記延伸案例包括：  
  
    -   <see cref="T:System.Windows.Markup.IUriContext" />  
  
    -   <see cref="T:System.Xaml.IAmbientProvider" />  
  
    -   <see cref="T:System.Xaml.IDestinationTypeProvider" />  
  
    -   <see cref="T:System.Xaml.IRootObjectProvider" />  
  
    -   <see cref="T:System.Xaml.IXamlNameResolver" />  
  
    -   <see cref="T:System.Xaml.IXamlNamespaceResolver" />  
  
 可能的實作<see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />可以忽略<paramref name="serviceProvider" />參數。 這是可行的一些基本的情況下，沒有內容完全需要傳回值。  
  
 在典型的使用方式，.NET Framework XAML 服務和實作的 XAML 物件寫入器會提供所有的值轉換器方法可在 XAML 期間叫用的服務提供者處理。 不過，以提供健全度，您應該提供程式碼路徑的 null 值的服務提供者本身和任何要求的服務。 Null 值可能會發生的情況下套用至標記延伸在 XAML 處理器基礎結構所提供的一般服務支援不使用。  
  
 如需有關從 XAML 服務提供者內容，以及如何使用它們的可用服務的詳細資訊，請參閱[類型轉換器和 XAML 的標記延伸](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)。  
  
 需要特定服務可用以產生會很有用的實作<see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />結果應擲回例外狀況，如果該服務無法使用。 建議擲回例外狀況是<see cref="T:System.InvalidOperationException" />。  
  
 如果其中一個提供的值為 null，能夠自訂標記延伸引數不適用於其資料型別，或者不包含標記延伸是可處理的值，實作也可能會擲回例外狀況。 建議擲回例外狀況是<see cref="T:System.InvalidOperationException" />。</para>
        </block>
        <altmember cref="T:System.Windows.Markup.IProvideValueTarget" />
        <altmember cref="T:System.Windows.Markup.IXamlTypeResolver" />
      </Docs>
    </Member>
  </Members>
</Type>