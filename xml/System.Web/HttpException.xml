<Type Name="HttpException" FullName="System.Web.HttpException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="58c641a30652a7ae02454aaab9977f13384e538a" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39856849" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HttpException : System.Runtime.InteropServices.ExternalException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit HttpException extends System.Runtime.InteropServices.ExternalException" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpException" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpException&#xA;Inherits ExternalException" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpException : System::Runtime::InteropServices::ExternalException" />
  <TypeSignature Language="F#" Value="type HttpException = class&#xA;    inherit ExternalException" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.InteropServices.ExternalException</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>描述處理 HTTP 要求期間發生的例外狀況。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpException>類別是可讓 ASP.NET 產生的例外狀況資訊的 HTTP 特定的例外狀況類別。 如需有關擲回和處理例外狀況的詳細資訊，請參閱[例外狀況](http://msdn.microsoft.com/library/f99a1d29-a2a8-47af-9707-9909f9010735)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Web.HttpException>類別，以引發自訂的例外狀況。 `Button_Click`方法會判斷哪一個按鈕已按下，，然後再呼叫其中一個`CheckNumber`或`CheckBoolean`方法。 如果使用者輸入的值，在文字方塊中沒有對應至預期的類型，<xref:System.Web.HttpException>例外狀況會建立並擲回的錯誤類型為基礎的自訂訊息。  
  
> [!IMPORTANT]
>  這個範例有一個可接受使用者輸入的文字方塊，這可能會造成安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[HttpException#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException/cs/httpexceptioncs.aspx#1)]
 [!code-aspx-vb[HttpException#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException/vb/httpexceptionvb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.HttpException" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.HttpException" /> 類別的新執行個體，並且建立空 <see cref="T:System.Web.HttpException" /> 物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時處理例外狀況，它可用來擷取一系列相關的例外狀況以回應內部例外狀況擲回外部例外狀況。  
  
 造成外部例外狀況之內部例外狀況的參考是可從<xref:System.Exception.InnerException%2A>外部例外狀況屬性。 這項機制會保留先前的例外狀況，包括原始的例外狀況，同時讓您建立更有意義的外部例外狀況傳送錯誤資訊。 如需詳細資訊，請參閱<xref:System.Exception.InnerException%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範<xref:System.Web.HttpException.%23ctor%2A>建構函式的<xref:System.Web.HttpException>類別。 `CheckNumber`方法會接受使用者輸入的值，透過在文字方塊中，並檢查它是否為整數。 如果值不是整數，會擲回例外狀況，然後新<xref:System.Web.HttpException>建立物件並將其擲回。 在攔截到例外狀況`Button_Click`事件處理常式和錯誤訊息會顯示在瀏覽器。  
  
> [!IMPORTANT]
>  這個範例有一個可接受使用者輸入的文字方塊，這可能會造成安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[HttpException_Constructor1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor1/CS/httpexception_constructor1.cs.aspx#1)]
 [!code-aspx-vb[HttpException_Constructor1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor1/VB/httpexception_constructor1.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpException : string -&gt; System.Web.HttpException" Usage="new System.Web.HttpException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">例外狀況擲回時，錯誤訊息會顯示在用戶端。</param>
        <summary>使用所提供的錯誤訊息，初始化 <see cref="T:System.Web.HttpException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範<xref:System.Web.HttpException.%23ctor%2A>建構函式的<xref:System.Web.HttpException>類別。 <xref:System.Web.HttpException>如果使用者輸入的值為 0，就會擲回。  
  
> [!IMPORTANT]
>  這個範例有一個可接受使用者輸入的文字方塊，這可能會造成安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-csharp[Classic HttpException.HttpException1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpException.HttpException1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpException.HttpException1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpException.HttpException1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (int httpCode, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 httpCode, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (httpCode As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(int httpCode, System::String ^ message);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpException : int * string -&gt; System.Web.HttpException" Usage="new System.Web.HttpException (httpCode, message)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="httpCode" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="httpCode">傳送至用戶端並對應至這個錯誤的 HTTP 回應狀態碼。</param>
        <param name="message">例外狀況擲回時，錯誤訊息會顯示在用戶端。</param>
        <summary>使用 HTTP 回應狀態碼和錯誤訊息，初始化 <see cref="T:System.Web.HttpException" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; HttpException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Web.HttpException" Usage="new System.Web.HttpException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" />，存放關於來源或目的端的內容資訊。</param>
        <summary>使用序列化資料，初始化 <see cref="T:System.Web.HttpException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpException.%23ctor%2A>重新構成經由資料流傳輸的例外狀況物件的還原序列化期間呼叫建構函式。 如需詳細資訊，請參閱 < [XML 和 SOAP 序列化](~/docs/standard/serialization/xml-and-soap-serialization.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpException : string * Exception -&gt; System.Web.HttpException" Usage="new System.Web.HttpException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">例外狀況擲回時，錯誤訊息會顯示在用戶端。</param>
        <param name="innerException">擲回目前例外狀況的 <see cref="P:System.Exception.InnerException" /> (如果有的話)。</param>
        <summary>使用錯誤訊息和 <see cref="T:System.Web.HttpException" /> 屬性，初始化 <see cref="P:System.Exception.InnerException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時處理例外狀況，它可用來擷取一系列相關的例外狀況以回應內部例外狀況擲回外部例外狀況。  
  
 造成外部例外狀況之內部例外狀況的參考是可從<xref:System.Exception.InnerException%2A>外部例外狀況屬性。 這項機制會保留先前的例外狀況，包括原始的例外狀況，同時讓您建立更有意義的外部例外狀況傳送錯誤資訊。 如需詳細資訊，請參閱<xref:System.Exception.InnerException%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範<xref:System.Web.HttpException.%23ctor%2A>建構函式的<xref:System.Web.HttpException>類別。 `CheckNumber`方法會接受使用者輸入的值，透過在文字方塊中，並檢查它是否為整數。 如果值不是整數，會擲回例外狀況，然後在 catch 區塊中，新<xref:System.Web.HttpException>建立物件並將其擲回。 在攔截到例外狀況`Button_Click`事件處理常式和錯誤訊息會顯示在瀏覽器。  
  
> [!IMPORTANT]
>  這個範例有一個可接受使用者輸入的文字方塊，這可能會造成安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[HttpException_Constructor2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor2/CS/httpexception_constructor2.cs.aspx#1)]
 [!code-aspx-vb[HttpException_Constructor2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor2/VB/httpexception_constructor2.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (string message, int hr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, int32 hr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, hr As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(System::String ^ message, int hr);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpException : string * int -&gt; System.Web.HttpException" Usage="new System.Web.HttpException (message, hr)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="hr" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">例外狀況擲回時，錯誤訊息會顯示在用戶端。</param>
        <param name="hr">定義此錯誤的例外狀況代碼。</param>
        <summary>使用錯誤訊息和例外狀況代碼，初始化 <see cref="T:System.Web.HttpException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範<xref:System.Web.HttpException.%23ctor%2A>建構函式的<xref:System.Web.HttpException>類別。 <xref:System.Web.HttpException>如果使用者輸入的值為 0，會擲回例外狀況。  
  
> [!IMPORTANT]
>  這個範例有一個可接受使用者輸入的文字方塊，這可能會造成安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-csharp[Classic HttpException.HttpException2 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpException.HttpException2 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpException.HttpException2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpException.HttpException2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (int httpCode, string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 httpCode, string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Int32,System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (httpCode As Integer, message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(int httpCode, System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpException : int * string * Exception -&gt; System.Web.HttpException" Usage="new System.Web.HttpException (httpCode, message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="httpCode" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="httpCode">顯示在用戶端的 HTTP 回應狀態碼。</param>
        <param name="message">例外狀況擲回時，錯誤訊息會顯示在用戶端。</param>
        <param name="innerException">擲回目前例外狀況的 <see cref="P:System.Exception.InnerException" /> (如果有的話)。</param>
        <summary>使用 HTTP 回應狀態碼、錯誤訊息和 <see cref="T:System.Web.HttpException" /> 屬性，初始化 <see cref="P:System.Exception.InnerException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時處理例外狀況，它可用來擷取一系列相關的例外狀況以回應內部例外狀況擲回外部例外狀況。  
  
 造成外部例外狀況之內部例外狀況的參考是可從<xref:System.Exception.InnerException%2A>外部例外狀況屬性。 這項機制會保留先前的例外狀況，包括原始的例外狀況，同時讓您建立更有意義的外部例外狀況傳送錯誤資訊。 如需詳細資訊，請參閱<xref:System.Exception.InnerException%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範<xref:System.Web.HttpException.%23ctor%2A>建構函式的<xref:System.Web.HttpException>類別。 `CheckNumber`方法會接受使用者輸入的值，並檢查它是否為整數。 如果值不是整數，會擲回例外狀況，然後新<xref:System.Web.HttpException>建立物件，其中包含 HTTP 回應狀態碼、 例外狀況的訊息和任何內部例外狀況。 在攔截到例外狀況`Button_Click`會顯示事件處理常式和錯誤訊息、 錯誤碼和內部例外狀況。  
  
> [!IMPORTANT]
>  這個範例有一個可接受使用者輸入的文字方塊，這可能會造成安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[HttpException_Constructor3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor3/CS/httpexception_constructor3.cs.aspx#1)]
 [!code-aspx-vb[HttpException_Constructor3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor3/VB/httpexception_constructor3.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (int httpCode, string message, int hr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 httpCode, string message, int32 hr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (httpCode As Integer, message As String, hr As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(int httpCode, System::String ^ message, int hr);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpException : int * string * int -&gt; System.Web.HttpException" Usage="new System.Web.HttpException (httpCode, message, hr)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="httpCode" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="hr" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="httpCode">顯示在用戶端的 HTTP 回應狀態碼。</param>
        <param name="message">例外狀況擲回時，錯誤訊息會顯示在用戶端。</param>
        <param name="hr">定義此錯誤的例外狀況代碼。</param>
        <summary>使用 HTTP 回應狀態碼、錯誤訊息和例外狀況代碼，初始化 <see cref="T:System.Web.HttpException" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範<xref:System.Web.HttpException.%23ctor%2A>建構函式的<xref:System.Web.HttpException>類別。 使用者在提供的文字方塊中輸入使用者名稱和電子郵件資訊。 如果任何的文字方塊保留空白，<xref:System.Web.HttpException>物件會建立和擲回。 錯誤碼<xref:System.Web.HttpException>來取得<xref:System.Web.HttpException.GetHttpCode%2A>方法並顯示在網頁上。  
  
> [!IMPORTANT]
>  這個範例有一個可接受使用者輸入的文字方塊，這可能會造成安全性威脅。 根據預設，ASP.NET Web 網頁會驗證使用者輸入未包含指令碼或 HTML 項目。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 [!code-aspx-csharp[HttpException_Constructor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor/CS/httpexception_constructor5.cs.aspx#1)]
 [!code-aspx-vb[HttpException_Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor/VB/httpexception_constructor5.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="CreateFromLastError">
      <MemberSignature Language="C#" Value="public static System.Web.HttpException CreateFromLastError (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.HttpException CreateFromLastError(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.CreateFromLastError(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromLastError (message As String) As HttpException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::HttpException ^ CreateFromLastError(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member CreateFromLastError : string -&gt; System.Web.HttpException" Usage="System.Web.HttpException.CreateFromLastError message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpException</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">例外狀況擲回時，錯誤訊息會顯示在用戶端。</param>
        <summary>根據 Win32 API <see langword="GetLastError()" /> 方法傳回的錯誤碼，建立新 <see cref="T:System.Web.HttpException" /> 例外狀況。</summary>
        <returns>
          <see cref="T:System.Web.HttpException" />，根據對 Win32 API <see langword="GetLastError()" /> 方法的呼叫所傳回的錯誤碼。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="GetHtmlErrorMessage">
      <MemberSignature Language="C#" Value="public string GetHtmlErrorMessage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetHtmlErrorMessage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.GetHtmlErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHtmlErrorMessage () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetHtmlErrorMessage();" />
      <MemberSignature Language="F#" Value="member this.GetHtmlErrorMessage : unit -&gt; string" Usage="httpException.GetHtmlErrorMessage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得 HTML 錯誤訊息以傳回用戶端。</summary>
        <returns>HTML 錯誤訊息。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="GetHttpCode">
      <MemberSignature Language="C#" Value="public int GetHttpCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetHttpCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.GetHttpCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHttpCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHttpCode();" />
      <MemberSignature Language="F#" Value="member this.GetHttpCode : unit -&gt; int" Usage="httpException.GetHttpCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得 HTTP 回應狀態碼以傳回用戶端。</summary>
        <returns>表示例外狀況的非零 HTTP 代碼或 <see cref="P:System.Exception.InnerException" /> 代碼，否則為 HTTP 回應狀態碼 500。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果有非零 HTTP 代碼，它會傳回它。 否則，<xref:System.Exception.InnerException%2A>傳回碼。 如果沒有<xref:System.Exception.InnerException%2A>使用程式碼或非零 HTTP 代碼，則會傳回 HTTP 回應狀態碼 500。 如需有關 HTTP 回應狀態碼的詳細資訊，請參閱超文字傳輸通訊協定為 HTTP/1.1 世界上的狀態碼定義[Wide Web Consortium (W3C) 網站](http://go.microsoft.com/fwlink/?linkid=37125)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="httpException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" />，存放關於來源或目的端的內容資訊。</param>
        <summary>取得例外狀況的相關資訊，並將此資訊加入至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpException.GetObjectData%2A>方法會加入至例外狀況資訊<xref:System.Runtime.Serialization.SerializationInfo>目標為序列化的物件。 還原序列化期間，例外狀況從重組<xref:System.Runtime.Serialization.SerializationInfo>，資料流上傳輸。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="WebEventCode">
      <MemberSignature Language="C#" Value="public int WebEventCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WebEventCode" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpException.WebEventCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WebEventCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WebEventCode { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WebEventCode : int" Usage="System.Web.HttpException.WebEventCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與 HTTP 例外狀況相關聯的事件代碼。</summary>
        <value>表示 Web 事件代碼的整數。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>