<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8cf383af2cfe41ccc4f4457e801dc8234e001255" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36574065" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandler" />
  <TypeSignature Language="F#" Value="type IHttpHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定義 ASP.NET 使用自訂 HTTP 處理常式所實作的合約，以同步處理 HTTP Web 要求。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以撰寫自訂 HTTP 處理常式來處理特定、 預先定義的任何 Common Language Specification (CLS) 標準的語言中的 HTTP 要求的型別。 可執行程式碼中定義`HttpHandler`類別，而不是傳統的 ASP 或 ASP.NET Web 網頁，這些特定要求的回應。 HTTP 處理常式提供一種互動的低層級的要求和回應服務的 IIS 網頁伺服器，並且大部分的 ISAPI 擴充功能類似，但與簡單的程式設計模型提供的功能。  
  
 如果您的處理常式會存取工作階段狀態的值，就必須實作<xref:System.Web.SessionState.IRequiresSessionState>介面 （沒有方法是標記介面）。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.IHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出另一個要求是否可以使用 <see cref="T:System.Web.IHttpHandler" /> 執行個體。</summary>
        <value>如果 <see cref="T:System.Web.IHttpHandler" /> 執行個體可重複使用，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 明確地設定<xref:System.Web.IHttpHandler.IsReusable%2A>屬性`true`或`false`由您提供程式碼會覆寫<xref:System.Web.IHttpHandler.IsReusable%2A>屬性存取子 (getter)。  
  
   
  
## Examples  
 下列程式碼範例會將四行的文字寫入 HTTP 輸出資料流，以名為 handler.aspx 的頁面的用戶端要求的回應。 所有要求的 handler.aspx 會由都服務`MyHttpHandler`命名空間中的類別`HandlerExample`包含在組件 HandlerTest.dll。  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="iHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" /> 物件，提供對內建伺服器物件 (例如 <see langword="Request" />、<see langword="Response" />、<see langword="Session" /> 和 <see langword="Server" />) 的參考，用來服務 HTTP 要求。</param>
        <summary>以實作 <see cref="T:System.Web.IHttpHandler" /> 介面的自訂 <see langword="HttpHandler" /> 來啟用 HTTP Web 要求的處理。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將您的自訂`HttpHandler`中的程式碼<xref:System.Web.IHttpHandler.ProcessRequest%2A>虛擬方法，如下列範例所示。  
  
   
  
## Examples  
 下列程式碼範例會將四行的文字寫入 HTTP 輸出資料流，以名為 handler.aspx 的頁面的用戶端要求的回應。 所有要求的 handler.aspx 會由都服務`MyHttpHandler`命名空間中的類別`HandlerExample`包含在組件 HandlerTest.dll。  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>