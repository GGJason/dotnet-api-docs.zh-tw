<Type Name="DefaultHttpHandler" FullName="System.Web.DefaultHttpHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b7092d6763234ab7b224c85923020aef6fec5259" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36574711" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DefaultHttpHandler : System.Web.IHttpAsyncHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultHttpHandler extends System.Object implements class System.Web.IHttpAsyncHandler, class System.Web.IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.DefaultHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultHttpHandler&#xA;Implements IHttpAsyncHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultHttpHandler : System::Web::IHttpAsyncHandler" />
  <TypeSignature Language="F#" Value="type DefaultHttpHandler = class&#xA;    interface IHttpAsyncHandler&#xA;    interface IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpAsyncHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示預設 HTTP 處理常式的屬性和方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Web.DefaultHttpHandler>設定要求攔截透過網際網路資訊服務 (IIS) 6.0 和明確繫結不會套用到要求的擴充功能時，物件會攔截 HTTP 管線中的內送要求。  
  
 要求攔截可以設定透過導入了 IIS 6.0 中的萬用字元應用程式對應功能。 如需詳細資訊，請搜尋[MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118)重新對應 URL 中使用萬用字元應用程式對應相關資訊。  
  
 <xref:System.Web.DefaultHttpHandler>類別會實作<xref:System.Web.IHttpAsyncHandler>介面，以提供非同步要求處理。 一般 HTTP 處理常式的詳細資訊，請參閱[HTTP 處理常式和 HTTP 模組概觀](http://msdn.microsoft.com/library/f540bdeb-d22e-4e1d-ba8a-fe6c9926283b)。 此外，如需詳細資訊，請參閱下列：  
  
-   如何建立非同步的 HTTP 處理常式，請參閱[逐步解說： 建立非同步的 HTTP 處理常式](http://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9)。  
  
-   有關註冊 HTTP 處理常式，請參閱[如何： 註冊 HTTP 處理常式](http://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60)。  
  
 可以從衍生類別<xref:System.Web.DefaultHttpHandler>類別，以提供自訂的要求處理。 衍生自的非同步 HTTP 處理常式<xref:System.Web.DefaultHttpHandler>無法覆寫<xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A>方法，以變更要求的處理方式。  
  
 A<xref:System.Web.DefaultHttpHandler>不會使用 ASP.NET 錯誤。 現有的內容時，使用 IIS 錯誤，或是還有專利 ISAPI 自訂錯誤機制會維持相同的運作。  
  
   
  
## Examples  
 下列程式碼範例示範如何實作自訂的 HTTP 處理常式，藉由衍生自<xref:System.Web.DefaultHttpHandler>類別。  
  
 [!code-csharp[System.Web.DefaultHttpHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/CS/source.cs#1)]
 [!code-vb[System.Web.DefaultHttpHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultHttpHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultHttpHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.DefaultHttpHandler" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginProcessRequest">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginProcessRequest (context As HttpContext, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginProcessRequest(System::Web::HttpContext ^ context, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult" Usage="defaultHttpHandler.BeginProcessRequest (context, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">提供對內建伺服器物件 (用於服務 HTTP 要求) 參考的物件。</param>
        <param name="callback">要在非同步方法呼叫完成時呼叫的方法。 如果 <c>callback</c> 為 <see langword="null" />，則不呼叫委派。</param>
        <param name="state">處理要求時所需的任何狀態資料。</param>
        <summary>啟始對 HTTP 處理常式的非同步呼叫 (Asynchronous Call)。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" />，包含處理序狀態的相關資訊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當建立非同步使用的 HTTP 處理常式，您的處理常式必須實作非同步<xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A>和<xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A>由 ASP.NET 以非同步方式呼叫的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">處理要求的先決條件失敗，並且所要求的檔案有副檔名 .asp 或要求透過 POST 傳送。</exception>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="protected System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.Context" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Web.HttpContext" Usage="System.Web.DefaultHttpHandler.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與目前 <see cref="T:System.Web.DefaultHttpHandler" /> 物件關聯的內容。</summary>
        <value>包含目前內容的 <see cref="T:System.Web.HttpContext" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.Context%2A>屬性可提供存取目前<xref:System.Web.HttpContext>衍生類別的物件。 <xref:System.Web.HttpContext>物件可存取此內建<xref:System.Web.HttpApplication.Request%2A>， <xref:System.Web.HttpApplication.Response%2A>，和<xref:System.Web.HttpApplication.Server%2A>要求屬性。 如需存取內容資訊的詳細資訊，請參閱<xref:System.Web.HttpContext>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="EndProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndProcessRequest (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndProcessRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndProcessRequest : IAsyncResult -&gt; unit&#xA;override this.EndProcessRequest : IAsyncResult -&gt; unit" Usage="defaultHttpHandler.EndProcessRequest result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">包含處理序狀態相關資訊的物件。</param>
        <summary>提供非同步處理序的結束方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A>方法會擲回任何會攔截在非同步處理序期間的例外狀況。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteUrlHeaders">
      <MemberSignature Language="C#" Value="protected System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ExecuteUrlHeaders As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Specialized::NameValueCollection ^ ExecuteUrlHeaders { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteUrlHeaders : System.Collections.Specialized.NameValueCollection" Usage="System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得隨要求傳輸之要求標頭和要求值的集合。</summary>
        <value>包含要求標頭和值的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.ExecuteUrlHeaders%2A>屬性會傳回空集合，除非它衍生自的類別中填入<xref:System.Web.DefaultHttpHandler>類別。 新增的標頭會附加至要求中的標頭的集合，再將要求傳遞回至網際網路資訊服務 (IIS)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public virtual bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.DefaultHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.IHttpHandler.IsReusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得布林值，指出其他要求是否可以使用 <see cref="T:System.Web.DefaultHttpHandler" /> 類別目前的執行個體。</summary>
        <value>如果 <see cref="T:System.Web.DefaultHttpHandler" /> 可以重複使用，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要明確地設定<xref:System.Web.DefaultHttpHandler.IsReusable%2A>屬性`true`或`false`，覆寫<xref:System.Web.DefaultHttpHandler.IsReusable%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnExecuteUrlPreconditionFailure">
      <MemberSignature Language="C#" Value="public virtual void OnExecuteUrlPreconditionFailure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExecuteUrlPreconditionFailure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnExecuteUrlPreconditionFailure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnExecuteUrlPreconditionFailure();" />
      <MemberSignature Language="F#" Value="abstract member OnExecuteUrlPreconditionFailure : unit -&gt; unit&#xA;override this.OnExecuteUrlPreconditionFailure : unit -&gt; unit" Usage="defaultHttpHandler.OnExecuteUrlPreconditionFailure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>當先決條件防止 <see cref="T:System.Web.DefaultHttpHandler" /> 物件處理要求時呼叫。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前置條件所指定的要求標頭欄位中的用戶端，且會在 Web 伺服器上進行評估。 例如，藉由使用前置條件，用戶端可以防止要求的方法 （例如，GET） 套用至資源所需的一個以外的資源。 如需詳細資訊，請參閱 < 14 中，「 標頭欄位定義 」 區段中[超文字傳輸通訊協定-HTTP/1.1](http://go.microsoft.com/fwlink/?LinkID=73147) World Wide Web Consortium (W3C) 網站上的規格。  
  
 <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A>呼叫方法時，防止先決條件<xref:System.Web.DefaultHttpHandler>無法處理要求的物件。 衍生的類別可能會覆寫<xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A>前置條件失敗時所擲回例外狀況的方法。 <xref:System.Web.DefaultHttpHandler>不會擲回例外狀況<xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A>方法。  
  
 下列其中一項會導致失敗的先決條件：  
  
-   呼叫 <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>。  
  
-   呼叫 <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>。  
  
-   呼叫 <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>。  
  
-   變更回應的快取原則。  
  
-   加入<xref:System.IO.Stream>當做篩選，將物件<xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType>屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideExecuteUrlPath">
      <MemberSignature Language="C#" Value="public virtual string OverrideExecuteUrlPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string OverrideExecuteUrlPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OverrideExecuteUrlPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ OverrideExecuteUrlPath();" />
      <MemberSignature Language="F#" Value="abstract member OverrideExecuteUrlPath : unit -&gt; string&#xA;override this.OverrideExecuteUrlPath : unit -&gt; string" Usage="defaultHttpHandler.OverrideExecuteUrlPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>覆寫目前要求的目標 URL。</summary>
        <returns>用於要求中的覆寫 URL，如果未提供覆寫 URL，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A>方法會傳回`null`除非衍生自的類別中覆寫<xref:System.Web.DefaultHttpHandler>類別。  
  
 <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A>僅如果 ASP.NET 在 IIS 6.0 上執行背景工作處理序隔離模式中，而且 à ³ ¤ £ 修改之前，會呼叫方法<xref:System.Web.DefaultHttpHandler>呼叫物件。 回應會修改下列任何一項：  
  
-   呼叫 <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>。  
  
-   呼叫 <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>。  
  
-   呼叫 <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>。  
  
-   變更回應的快取原則。  
  
-   加入<xref:System.IO.Stream>當做篩選，將物件<xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType>屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit&#xA;override this.ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="defaultHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">提供對內建伺服器物件 (用於服務 HTTP 要求) 參考的物件。</param>
        <summary>讓 <see cref="T:System.Web.DefaultHttpHandler" /> 物件可以處理 HTTP Web 要求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A>應該不以同步方式呼叫方法。 類別衍生自<xref:System.Web.DefaultHttpHandler>類別可以覆寫<xref:System.Web.DefaultHttpHandler.ProcessRequest%2A>來提供自訂的要求處理。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">同步呼叫 <see cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />。</exception>
        <altmember cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
  </Members>
</Type>