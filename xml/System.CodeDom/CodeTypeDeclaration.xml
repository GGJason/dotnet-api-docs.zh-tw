<Type Name="CodeTypeDeclaration" FullName="System.CodeDom.CodeTypeDeclaration">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="52c8bfcbe9527832064fa06fd15fae096ecb1cf0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30369642" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeTypeDeclaration extends System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeTypeDeclaration" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeTypeDeclaration&#xA;Inherits CodeTypeMember" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeTypeDeclaration : System::CodeDom::CodeTypeMember" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeTypeMember</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1e155-101">表示類別、結構、介面或列舉型別的型別宣告。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1e155-101">Represents a type declaration for a class, structure, interface, or enumeration.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e155-102"><xref:System.CodeDom.CodeTypeDeclaration> 可用來表示程式碼會宣告類別、 結構、 介面或列舉型別。</span><span class="sxs-lookup"><span data-stu-id="1e155-102"><xref:System.CodeDom.CodeTypeDeclaration> can be used to represent code that declares a class, structure, interface, or enumeration.</span></span> <span data-ttu-id="1e155-103"><xref:System.CodeDom.CodeTypeDeclaration> 可以用於宣告類型的另一個類型內巢狀類型。</span><span class="sxs-lookup"><span data-stu-id="1e155-103"><xref:System.CodeDom.CodeTypeDeclaration> can be used to declare a type that is nested within another type.</span></span>  
  
 <span data-ttu-id="1e155-104"><xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A>屬性指定的基底類型或基底類型所宣告的型別。</span><span class="sxs-lookup"><span data-stu-id="1e155-104">The <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> property specifies the base type or base types of the type being declared.</span></span> <span data-ttu-id="1e155-105"><xref:System.CodeDom.CodeTypeDeclaration.Members%2A>屬性包含的類型成員，可以包含方法、 欄位、 屬性、 註解和其他類型。</span><span class="sxs-lookup"><span data-stu-id="1e155-105">The <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> property contains the type members, which can include methods, fields, properties, comments and other types.</span></span> <span data-ttu-id="1e155-106"><xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A>屬性會指出<xref:System.Reflection.TypeAttributes>值型別宣告中，這表示類型的類型類別目錄。</span><span class="sxs-lookup"><span data-stu-id="1e155-106">The <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property indicates the <xref:System.Reflection.TypeAttributes> values for the type declaration, which indicate the type category of the type.</span></span> <span data-ttu-id="1e155-107"><xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>， <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>， <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>，和<xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A>方法指示類型是類別、 結構、 列舉或介面類型，分別。</span><span class="sxs-lookup"><span data-stu-id="1e155-107">The <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, and <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1e155-108">某些程式語言中僅支援參考類型或類別的宣告。</span><span class="sxs-lookup"><span data-stu-id="1e155-108">Some programming languages only support the declaration of reference types, or classes.</span></span> <span data-ttu-id="1e155-109">若要檢查的宣告介面、 列舉或實值型別支援特定語言 CodeDOM 程式碼產生器，呼叫<xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>方法來測試適當<xref:System.CodeDom.Compiler.GeneratorSupport>旗標。</span><span class="sxs-lookup"><span data-stu-id="1e155-109">To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method to test for the appropriate <xref:System.CodeDom.Compiler.GeneratorSupport> flags.</span></span> <span data-ttu-id="1e155-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> 表示支援的介面，<xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums>表示列舉型別支援與<xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes>表示支援實值類型，例如結構。</span><span class="sxs-lookup"><span data-stu-id="1e155-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> indicates support for interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> indicates support for enumerations, and <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> indicates support for value types such as structures.</span></span>  
  
 <span data-ttu-id="1e155-111">您可以建立類別或結構中實作一個完整的宣告，或實作分散在多個宣告。</span><span class="sxs-lookup"><span data-stu-id="1e155-111">You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="1e155-112"><xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A>屬性表示的型別宣告是整個或部分。</span><span class="sxs-lookup"><span data-stu-id="1e155-112">The <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property indicates whether the type declaration is complete or partial.</span></span> <span data-ttu-id="1e155-113">並非所有的程式碼產生器支援部分型別宣告，因此您應該針對這項支援藉由呼叫測試<xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>旗標方法<xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>。</span><span class="sxs-lookup"><span data-stu-id="1e155-113">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e155-114">這個範例示範如何使用<xref:System.CodeDom.CodeTypeDeclaration>來宣告類型。</span><span class="sxs-lookup"><span data-stu-id="1e155-114">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to declare a type.</span></span>  
  
 [!code-cpp[CodeTypeDeclarationExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeTypeDeclarationExample/CPP/codetypedeclarationexample.cpp#2)]
 [!code-csharp[CodeTypeDeclarationExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeTypeDeclarationExample/CS/codetypedeclarationexample.cs#2)]
 [!code-vb[CodeTypeDeclarationExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeTypeDeclarationExample/VB/codetypedeclarationexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.CodeTypeDeclarationCollection" />
    <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1e155-115">初始化 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-115">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1e155-116">初始化 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-116">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="1e155-117">新型別的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-117">The name for the new type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e155-118">使用指定的名稱，初始化 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-118">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class with the specified name.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseTypes">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReferenceCollection BaseTypes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseTypes As CodeTypeReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReferenceCollection ^ BaseTypes { System::CodeDom::CodeTypeReferenceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e155-119">取得型別的基底型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-119">Gets the base types of the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e155-120">
            <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 物件，表示型別的基底型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-120">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> object that indicates the base types of the type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e155-121">若要在 Visual Basic，其並非繼承自基底類型，但會實作一個或多個介面中產生類別，您必須包含<xref:System.Object>中的第一個項目為<xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="1e155-121">To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <xref:System.Object> as the first item in the <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1e155-122">在.NET Framework 2.0 版中不需要<xref:System.CodeDom.CodeTypeReference>如<xref:System.Object>如果您已實作的介面存在，而且在參考它的類型。</span><span class="sxs-lookup"><span data-stu-id="1e155-122">In the .NET Framework version 2.0 you do not need the <xref:System.CodeDom.CodeTypeReference> for <xref:System.Object> if the interface you are implementing already exists and you are referring to it by type.</span></span> <span data-ttu-id="1e155-123">例如，如果您實作<xref:System.Collections.ICollection>介面，並將它加入至集合，此陳述式， `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`，您不需要上述`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`陳述式。</span><span class="sxs-lookup"><span data-stu-id="1e155-123">For example, if you are implementing the <xref:System.Collections.ICollection> interface and add it to the collection with this statement, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, you do not need the preceding `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` statement.</span></span>  
  
 <span data-ttu-id="1e155-124">下列程式碼說明如何新增<xref:System.CodeDom.CodeTypeReference>至集合，它是指<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="1e155-124">The following code illustrates the addition of a <xref:System.CodeDom.CodeTypeReference> to the collection that refers to <xref:System.Object>.</span></span>  
  
```vb  
Dim ctd As New CodeTypeDeclaration("Class1")  
ctd.IsClass = True  
ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))  
ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))  
```  
  
```csharp  
CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");  
ctd.IsClass = true;  
ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));  
ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));  
```  
  
 <span data-ttu-id="1e155-125">上述程式碼會產生下列 Visual Basic 程式碼的對等項目。</span><span class="sxs-lookup"><span data-stu-id="1e155-125">The preceding code generates the equivalent of the following Visual Basic code.</span></span>  
  
```vb  
Public Class Class1  
Implements Interface1  
```  
  
 <span data-ttu-id="1e155-126">不過，實際產生的 Visual Basic 程式碼如下所示。</span><span class="sxs-lookup"><span data-stu-id="1e155-126">However, the Visual Basic code actually generated is the following.</span></span>  
  
```vb  
Public Class Class1  
Inherits Object  
Implements Interface1  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeReferenceCollection" />
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e155-127">取得或設定數值，表示型別是否為類別或參考型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-127">Gets or sets a value indicating whether the type is a class or reference type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e155-128">如果型別為類別或參考型別，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-128">
              <see langword="true" /> if the type is a class or reference type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e155-129">取得或設定數值，表示型別是否為列舉型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-129">Gets or sets a value indicating whether the type is an enumeration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e155-130">如果型別為列舉型別，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-130">
              <see langword="true" /> if the type is an enumeration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e155-131">取得或設定數值，表示型別是否為介面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-131">Gets or sets a value indicating whether the type is an interface.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e155-132">如果型別為介面，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-132">
              <see langword="true" /> if the type is an interface; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPartial">
      <MemberSignature Language="C#" Value="public bool IsPartial { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPartial" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPartial As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPartial { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e155-133">取得或設定值，指出型別宣告是完整的，還是部分的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-133">Gets or sets a value indicating whether the type declaration is complete or partial.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e155-134">如果類別或結構宣告是實作的部分表示，則為 <see langword="true" />，如果宣告是類別或結構的完整實作，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-134">
              <see langword="true" /> if the class or structure declaration is a partial representation of the implementation; <see langword="false" /> if the declaration is a complete implementation of the class or structure.</span>
          </span>
          <span data-ttu-id="1e155-135">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-135">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e155-136">您可以建立一個完整的宣告中的類別或結構實作，或實作分散在多個宣告。</span><span class="sxs-lookup"><span data-stu-id="1e155-136">You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="1e155-137">實作通常會提供一個完整的型別宣告中。</span><span class="sxs-lookup"><span data-stu-id="1e155-137">Implementations are commonly supplied in one complete type declaration.</span></span> <span data-ttu-id="1e155-138">在此案例中，設定型別宣告<xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A>屬性`false`，表示型別宣告表示類別或結構實作的所有詳細資料。</span><span class="sxs-lookup"><span data-stu-id="1e155-138">In this case, set the type declaration <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `false`, which indicates that the type declaration represents all details for the class or structure implementation.</span></span>  
  
 <span data-ttu-id="1e155-139">部分型別宣告可讓您更容易建立的類別或結構實作不同的模組中的應用程式的不同部分。</span><span class="sxs-lookup"><span data-stu-id="1e155-139">A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</span></span> <span data-ttu-id="1e155-140">可以儲存在某個原始程式檔，或分散到最終會以形成結合的型別實作一起編譯多重原始程式檔部分型別宣告。</span><span class="sxs-lookup"><span data-stu-id="1e155-140">The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</span></span>  
  
 <span data-ttu-id="1e155-141">C# 語言支援部分類型宣告的類別和結構透過`partial`關鍵字。</span><span class="sxs-lookup"><span data-stu-id="1e155-141">The C# language supports partial type declarations of classes and structures through the `partial` keyword.</span></span> <span data-ttu-id="1e155-142">Visual Basic 支援部分類型宣告的類別和結構與`Partial`關鍵字。</span><span class="sxs-lookup"><span data-stu-id="1e155-142">Visual Basic supports partial type declarations of classes and structures with the `Partial` keyword.</span></span> <span data-ttu-id="1e155-143">並非所有的程式碼產生器支援部分型別宣告，因此您應該針對這項支援藉由呼叫測試<xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>旗標方法<xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>。</span><span class="sxs-lookup"><span data-stu-id="1e155-143">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1e155-144">支援部分型別宣告類別和結構。</span><span class="sxs-lookup"><span data-stu-id="1e155-144">Partial type declarations are supported for classes and structures.</span></span> <span data-ttu-id="1e155-145">如果您指定的列舉型別或介面的部分類型宣告，產生的程式碼會產生編譯器錯誤。</span><span class="sxs-lookup"><span data-stu-id="1e155-145">If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</span></span>  
  
 <span data-ttu-id="1e155-146">當提供的類別或結構實作跨多個宣告，設定<xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A>屬性`true`的初始宣告和所有附加的宣告。</span><span class="sxs-lookup"><span data-stu-id="1e155-146">When supplying a class or structure implementation across multiple declarations, set the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true` for the initial declaration and all supplemental declarations.</span></span> <span data-ttu-id="1e155-147">初始宣告必須完整指定的類型簽章，包含存取修飾詞，繼承型別，以及實作介面。</span><span class="sxs-lookup"><span data-stu-id="1e155-147">The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</span></span> <span data-ttu-id="1e155-148">增補的宣告不需要重新指定的類型簽章。</span><span class="sxs-lookup"><span data-stu-id="1e155-148">The supplementary declarations do not need to re-specify the type signature.</span></span> <span data-ttu-id="1e155-149">編譯器錯誤通常是如果您重新定義補充的宣告中的類型簽章。</span><span class="sxs-lookup"><span data-stu-id="1e155-149">A compiler error typically results if you redefine the type signature in a supplementary declaration.</span></span>  
  
 <span data-ttu-id="1e155-150">Visual Studio 2005 使用部分的類型，與設計工具的程式碼分開使用者產生的程式碼。</span><span class="sxs-lookup"><span data-stu-id="1e155-150">Visual Studio 2005 uses partial types to separate user-generated code from designer code.</span></span> <span data-ttu-id="1e155-151">在 Visual Basic Windows 應用程式專案中，使用者程式碼置於並未被限定的部分類別`Partial`關鍵字; 設計工具提供程式碼會顯示在部分類別中具有`Partial`關鍵字。</span><span class="sxs-lookup"><span data-stu-id="1e155-151">In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the `Partial` keyword; the designer-provided code appears in the partial class that has the `Partial` keyword.</span></span> <span data-ttu-id="1e155-152">在 C# 中，所以使用者程式碼和設計工具程式碼會顯示所識別的部分類別中`partial`關鍵字。</span><span class="sxs-lookup"><span data-stu-id="1e155-152">In C#, both the user code and designer code appear in partial classes identified by the `partial` keyword.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e155-153">這個範例示範如何使用<xref:System.CodeDom.CodeTypeDeclaration>提供跨多個宣告的類別實作。</span><span class="sxs-lookup"><span data-stu-id="1e155-153">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to supply a class implementation across multiple declarations.</span></span> <span data-ttu-id="1e155-154">此範例會建立初始的類別宣告陳述式，並設定<xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A>屬性`true`。</span><span class="sxs-lookup"><span data-stu-id="1e155-154">The example builds the initial class declaration statement and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomPartialTypeExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#3)]
 [!code-vb[CodeDomPartialTypeExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#3)]  
  
 <span data-ttu-id="1e155-155">在範例中不同的方法擴充的類別實作。</span><span class="sxs-lookup"><span data-stu-id="1e155-155">A different method in the example extends the class implementation.</span></span> <span data-ttu-id="1e155-156">這個方法會建置新的型別宣告陳述式，現有的類別和組<xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A>屬性`true`。</span><span class="sxs-lookup"><span data-stu-id="1e155-156">This method builds a new type declaration statement for the existing class and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span> <span data-ttu-id="1e155-157">編譯器會結合在一起的完整類別實作的兩個部分的型別宣告。</span><span class="sxs-lookup"><span data-stu-id="1e155-157">The compiler combines the two partial type declarations together for the complete class implementation.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#7](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#7)]
 [!code-csharp[CodeDomPartialTypeExample#7](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#7)]
 [!code-vb[CodeDomPartialTypeExample#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes" />
      </Docs>
    </Member>
    <Member MemberName="IsStruct">
      <MemberSignature Language="C#" Value="public bool IsStruct { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStruct" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberSignature Language="VB.NET" Value="Public Property IsStruct As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStruct { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e155-158">取得或設定值，指出型別是否為實值型別 (結構)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-158">Gets or sets a value indicating whether the type is a value type (struct).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e155-159">如果型別為實值型別，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-159">
              <see langword="true" /> if the type is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeMemberCollection Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeMemberCollection Members" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Members As CodeTypeMemberCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeMemberCollection ^ Members { System::CodeDom::CodeTypeMemberCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeMemberCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e155-160">取得所表示型別之類別成員的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-160">Gets the collection of class members for the represented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e155-161">
            <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 物件，表示類別成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-161">A <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> object that indicates the class members.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeMemberCollection" />
      </Docs>
    </Member>
    <Member MemberName="PopulateBaseTypes">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateBaseTypes;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateBaseTypes" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateBaseTypes As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateBaseTypes;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e155-162">發生於第一次存取 <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> 集合時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-162">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> collection is accessed for the first time.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateMembers">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateMembers;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateMembers" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateMembers As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateMembers;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e155-163">發生於第一次存取 <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> 集合時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-163">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> collection is accessed for the first time.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAttributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes TypeAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes TypeAttributes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeAttributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes TypeAttributes { System::Reflection::TypeAttributes get(); void set(System::Reflection::TypeAttributes value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e155-164">取得或設定型別的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-164">Gets or sets the attributes of the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e155-165">
            <see cref="T:System.Reflection.TypeAttributes" /> 物件，表示型別的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-165">A <see cref="T:System.Reflection.TypeAttributes" /> object that indicates the attributes of the type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e155-166"><xref:System.Reflection.TypeAttributes>屬性包含相同的型別所使用之值<xref:System.Reflection>調查執行階段型別時。</span><span class="sxs-lookup"><span data-stu-id="1e155-166">The <xref:System.Reflection.TypeAttributes> property contains the same type of values used by <xref:System.Reflection> when investigating a type at run time.</span></span> <span data-ttu-id="1e155-167">許多這些旗標不符某些語言中的型別宣告語法。</span><span class="sxs-lookup"><span data-stu-id="1e155-167">Many of these flags do not correspond to the type declaration syntax for some languages.</span></span> <span data-ttu-id="1e155-168">如此一來，只有下列旗標為個<xref:System.CodeDom.CodeTypeDeclaration>: <xref:System.Reflection.TypeAttributes.Class>， <xref:System.Reflection.TypeAttributes.Interface>， <xref:System.Reflection.TypeAttributes.Abstract>， <xref:System.Reflection.TypeAttributes.Sealed>， <xref:System.Reflection.TypeAttributes.Public>， <xref:System.Reflection.TypeAttributes.NotPublic>， <xref:System.Reflection.TypeAttributes.NestedPublic>，和<xref:System.Reflection.TypeAttributes.NestedPrivate>。</span><span class="sxs-lookup"><span data-stu-id="1e155-168">As a result, only the following flags are significant to <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, and <xref:System.Reflection.TypeAttributes.NestedPrivate>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1e155-169">某些這類的旗標<xref:System.Reflection.TypeAttributes.Abstract>中旗標的意義與重疊<xref:System.CodeDom.CodeTypeMember.Attributes%2A>屬性<xref:System.CodeDom.CodeTypeDeclaration>，都繼承自<xref:System.CodeDom.CodeTypeMember>。</span><span class="sxs-lookup"><span data-stu-id="1e155-169">Some of the flags such as <xref:System.Reflection.TypeAttributes.Abstract> overlap with the meaning of flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property of <xref:System.CodeDom.CodeTypeDeclaration> that is inherited from <xref:System.CodeDom.CodeTypeMember>.</span></span> <span data-ttu-id="1e155-170"><xref:System.CodeDom.CodeTypeMember.Attributes%2A>屬性是造成的副作用<xref:System.CodeDom.CodeTypeDeclaration>類別繼承自<xref:System.CodeDom.CodeTypeMember>以便可以巢狀類別。</span><span class="sxs-lookup"><span data-stu-id="1e155-170">The <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property is a side effect of the <xref:System.CodeDom.CodeTypeDeclaration> class inheriting from <xref:System.CodeDom.CodeTypeMember> so that classes can be nested.</span></span> <span data-ttu-id="1e155-171">中的旗標<xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A>應該使用屬性，而不是中的旗標<xref:System.CodeDom.CodeTypeMember.Attributes%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="1e155-171">The flags in the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property should be used instead of the flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1e155-172">設定可視性旗標的模式 (旗標的字`Public`或`Nested`) 是所有的可見性遮住加上旗標使用<xref:System.Reflection.TypeAttributes.VisibilityMask>，然後設定所需的可視性旗標。</span><span class="sxs-lookup"><span data-stu-id="1e155-172">The pattern for setting the visibility flags (flags containing the words `Public` or `Nested`) is to mask out all visibility flags using the <xref:System.Reflection.TypeAttributes.VisibilityMask> and then set the desired visibility flag.</span></span> <span data-ttu-id="1e155-173">例如，C# 程式碼陳述式來識別<xref:System.CodeDom.CodeTypeDeclaration>(名為`cd`) 因為內部的類別是`cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`。</span><span class="sxs-lookup"><span data-stu-id="1e155-173">For example, the C# code statement to identify the <xref:System.CodeDom.CodeTypeDeclaration> (named `cd`) as an internal class is `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</span></span>  <span data-ttu-id="1e155-174">在 Visual Basic 中設定相同值的程式碼是`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`。</span><span class="sxs-lookup"><span data-stu-id="1e155-174">The code to set the same value in Visual Basic is `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`.</span></span> <span data-ttu-id="1e155-175">設定<xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A>屬性直接可視性旗標 (`cd.TypeAttributes = TypeAttributes.NotPublic;`) 會清除所有其他可能設定的旗標。</span><span class="sxs-lookup"><span data-stu-id="1e155-175">Setting the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property directly to a visibility flag (`cd.TypeAttributes = TypeAttributes.NotPublic;`) erases all other flags that might be set.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="TypeParameters">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeParameterCollection TypeParameters" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeParameters As CodeTypeParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeParameterCollection ^ TypeParameters { System::CodeDom::CodeTypeParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e155-176">取得型別宣告的型別參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-176">Gets the type parameters for the type declaration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e155-177">
            <see cref="T:System.CodeDom.CodeTypeParameterCollection" />，包含型別宣告的型別參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e155-177">A <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> that contains the type parameters for the type declaration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e155-178">泛型型別宣告包含一或多個未指定類型，稱為型別參數。</span><span class="sxs-lookup"><span data-stu-id="1e155-178">A generic type declaration contains one or more unspecified types known as type parameters.</span></span> <span data-ttu-id="1e155-179">型別參數名稱代表泛型宣告主體內的類型。</span><span class="sxs-lookup"><span data-stu-id="1e155-179">A type parameter name stands for the type within the body of the generic declaration.</span></span> <span data-ttu-id="1e155-180">例如，泛型宣告<xref:System.Collections.Generic.List%601>類別包含型別參數`T`。</span><span class="sxs-lookup"><span data-stu-id="1e155-180">For example, the generic declaration for the <xref:System.Collections.Generic.List%601> class contains the type parameter `T`.</span></span>  
  
 <span data-ttu-id="1e155-181">如需有關泛型的詳細資訊，請參閱[.NET Framework 類別庫中的泛型](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)。</span><span class="sxs-lookup"><span data-stu-id="1e155-181">For more information on generics, see [Generics in the .NET Framework Class Library](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeParameterCollection" />
        <altmember cref="T:System.CodeDom.CodeTypeParameter" />
      </Docs>
    </Member>
  </Members>
</Type>