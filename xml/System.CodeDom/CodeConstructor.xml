<Type Name="CodeConstructor" FullName="System.CodeDom.CodeConstructor">
  <TypeSignature Language="C#" Value="public class CodeConstructor : System.CodeDom.CodeMemberMethod" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeConstructor extends System.CodeDom.CodeMemberMethod" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeConstructor" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeConstructor&#xA;Inherits CodeMemberMethod" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeConstructor : System::CodeDom::CodeMemberMethod" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeMemberMethod</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b5919-101">代表型別之執行個體建構函式的宣告。</span><span class="sxs-lookup"><span data-stu-id="b5919-101">Represents a declaration for an instance constructor of a type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5919-102"><xref:System.CodeDom.CodeConstructor> 可用來表示類型的執行個體建構函式的宣告。</span><span class="sxs-lookup"><span data-stu-id="b5919-102"><xref:System.CodeDom.CodeConstructor> can be used to represent a declaration of an instance constructor for a type.</span></span> <span data-ttu-id="b5919-103">使用<xref:System.CodeDom.CodeTypeConstructor>宣告類型的靜態建構函式。</span><span class="sxs-lookup"><span data-stu-id="b5919-103">Use <xref:System.CodeDom.CodeTypeConstructor> to declare a static constructor for a type.</span></span>  
  
 <span data-ttu-id="b5919-104">如果建構函式呼叫的基底類別建構函式，設定中的基底類別建構函式的建構函式引數<xref:System.CodeDom.CodeConstructor.BaseConstructorArgs%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="b5919-104">If the constructor calls a base class constructor, set the constructor arguments for the base class constructor in the <xref:System.CodeDom.CodeConstructor.BaseConstructorArgs%2A> property.</span></span> <span data-ttu-id="b5919-105">如果建構函式多載另一個建構函式類型，設定要傳遞給型別多載建構函式中的建構函式引數<xref:System.CodeDom.CodeConstructor.ChainedConstructorArgs%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="b5919-105">If the constructor overloads another constuctor for the type, set the constructor arguments to pass to the overloaded type constructor in the <xref:System.CodeDom.CodeConstructor.ChainedConstructorArgs%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5919-106">這個範例示範如何使用<xref:System.CodeDom.CodeConstructor>宣告幾種類型的建構函式。</span><span class="sxs-lookup"><span data-stu-id="b5919-106">This example demonstrates using a <xref:System.CodeDom.CodeConstructor> to declare several types of constructors.</span></span>  
  
 [!code-cpp[CodeConstructorExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeConstructorExample/CPP/codeconstructorexample.cpp#2)]
 [!code-csharp[CodeConstructorExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeConstructorExample/CS/codeconstructorexample.cs#2)]
 [!code-vb[CodeConstructorExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeConstructorExample/VB/codeconstructorexample.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeConstructor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeConstructor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeConstructor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5919-107">初始化 <see cref="T:System.CodeDom.CodeConstructor" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="b5919-107">Initializes a new instance of the <see cref="T:System.CodeDom.CodeConstructor" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseConstructorArgs">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpressionCollection BaseConstructorArgs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpressionCollection BaseConstructorArgs" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeConstructor.BaseConstructorArgs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseConstructorArgs As CodeExpressionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpressionCollection ^ BaseConstructorArgs { System::CodeDom::CodeExpressionCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpressionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5919-108">取得基底建構函式引數的集合。</span><span class="sxs-lookup"><span data-stu-id="b5919-108">Gets the collection of base constructor arguments.</span></span></summary>
        <value><span data-ttu-id="b5919-109"><see cref="T:System.CodeDom.CodeExpressionCollection" /> 包含基底建構函式引數。</span><span class="sxs-lookup"><span data-stu-id="b5919-109">A <see cref="T:System.CodeDom.CodeExpressionCollection" /> that contains the base constructor arguments.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5919-110">當<xref:System.CodeDom.CodeConstructor>多載基底類別建構函式，這個集合包含任何要傳遞給基底類別建構函式的引數。</span><span class="sxs-lookup"><span data-stu-id="b5919-110">When the <xref:System.CodeDom.CodeConstructor> overloads a base class constructor, this collection contains any arguments to pass to a base class constructor.</span></span> <span data-ttu-id="b5919-111">若要呼叫沒有引數的基底類別建構函式，設定<xref:System.CodeDom.CodeSnippetExpression>包含空字串 ("") 與此集合。</span><span class="sxs-lookup"><span data-stu-id="b5919-111">To call a base class constructor with no arguments, set a <xref:System.CodeDom.CodeSnippetExpression> containing an empty string ("") to this collection.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeExpressionCollection" />
      </Docs>
    </Member>
    <Member MemberName="ChainedConstructorArgs">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpressionCollection ChainedConstructorArgs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpressionCollection ChainedConstructorArgs" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChainedConstructorArgs As CodeExpressionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpressionCollection ^ ChainedConstructorArgs { System::CodeDom::CodeExpressionCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpressionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5919-112">取得連鎖建構函式引數的集合。</span><span class="sxs-lookup"><span data-stu-id="b5919-112">Gets the collection of chained constructor arguments.</span></span></summary>
        <value><span data-ttu-id="b5919-113"><see cref="T:System.CodeDom.CodeExpressionCollection" /> 包含連鎖建構函式引數。</span><span class="sxs-lookup"><span data-stu-id="b5919-113">A <see cref="T:System.CodeDom.CodeExpressionCollection" /> that contains the chained constructor arguments.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5919-114">當<xref:System.CodeDom.CodeConstructor>多載另一個建構函式的相同型別，這個集合包含任何要傳遞給型別多載建構函式的引數。</span><span class="sxs-lookup"><span data-stu-id="b5919-114">When the <xref:System.CodeDom.CodeConstructor> overloads another constructor of the same type, this collection contains any arguments to pass to the overloaded type constructor.</span></span> <span data-ttu-id="b5919-115">若要針對目前的類型不使用引數呼叫建構函式，設定<xref:System.CodeDom.CodeSnippetExpression>包含空字串 ("") 與此集合。</span><span class="sxs-lookup"><span data-stu-id="b5919-115">To call a constructor for the current type with no arguments, set a <xref:System.CodeDom.CodeSnippetExpression> containing an empty string ("") to this collection.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeExpressionCollection" />
      </Docs>
    </Member>
  </Members>
</Type>