<Type Name="CodeSnippetCompileUnit" FullName="System.CodeDom.CodeSnippetCompileUnit">
  <TypeSignature Language="C#" Value="public class CodeSnippetCompileUnit : System.CodeDom.CodeCompileUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeSnippetCompileUnit extends System.CodeDom.CodeCompileUnit" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeSnippetCompileUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeSnippetCompileUnit&#xA;Inherits CodeCompileUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeSnippetCompileUnit : System::CodeDom::CodeCompileUnit" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeCompileUnit</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="1ba94-101">表示可以加以編譯的常值 (Literal) 程式碼片段。</span><span class="sxs-lookup"><span data-stu-id="1ba94-101">Represents a literal code fragment that can be compiled.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ba94-102"><xref:System.CodeDom.CodeSnippetCompileUnit> 可以表示常值直接包含在未經修改的來源的程式碼區塊。</span><span class="sxs-lookup"><span data-stu-id="1ba94-102"><xref:System.CodeDom.CodeSnippetCompileUnit> can represent a literal block of code that is included directly in the source without modification.</span></span>  
  
 <span data-ttu-id="1ba94-103">A<xref:System.CodeDom.CodeSnippetCompileUnit>一段程式碼，完全以其原始格式儲存，做為字串。</span><span class="sxs-lookup"><span data-stu-id="1ba94-103">A <xref:System.CodeDom.CodeSnippetCompileUnit> stores a section of code, exactly in its original format, as a string.</span></span> <span data-ttu-id="1ba94-104">CodeDOM 不會轉譯常值的程式碼片段。</span><span class="sxs-lookup"><span data-stu-id="1ba94-104">The CodeDOM does not translate literal code fragments.</span></span> <span data-ttu-id="1ba94-105">常值的程式碼片段會儲存，並以原始格式輸出。</span><span class="sxs-lookup"><span data-stu-id="1ba94-105">Literal code fragments are stored and output in their original format.</span></span> <span data-ttu-id="1ba94-106">CodeDOM 物件，其中包含常值的程式碼被為了讓開發人員可以將封裝已在目標語言的程式碼。</span><span class="sxs-lookup"><span data-stu-id="1ba94-106">CodeDOM objects that contain literal code are provided so developers can encapsulate code that is already in the target language.</span></span>  
  
 <span data-ttu-id="1ba94-107"><xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A>屬性包含做為字串常值的程式碼片段。</span><span class="sxs-lookup"><span data-stu-id="1ba94-107">The <xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A> property contains the literal code fragment as a string.</span></span> <span data-ttu-id="1ba94-108"><xref:System.CodeDom.CodeSnippetCompileUnit.LinePragma%2A>是選擇性屬性，指定資料來源的程式碼文件中的程式碼的位置。</span><span class="sxs-lookup"><span data-stu-id="1ba94-108">The <xref:System.CodeDom.CodeSnippetCompileUnit.LinePragma%2A> property is optional and specifies the position of the code within a source code document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ba94-109">下列程式碼範例示範如何建立的新執行個體<xref:System.CodeDom.CodeSnippetCompileUnit>使用字串，代表常值的程式碼的類別。</span><span class="sxs-lookup"><span data-stu-id="1ba94-109">The following code example demonstrates how to create a new instance of the <xref:System.CodeDom.CodeSnippetCompileUnit> class by using a string that represents literal code.</span></span>  
  
 [!code-cpp[CodeDomSampleBatch#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomSampleBatch/CPP/class1.cpp#8)]
 [!code-csharp[CodeDomSampleBatch#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomSampleBatch/CS/class1.cs#8)]
 [!code-vb[CodeDomSampleBatch#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomSampleBatch/VB/class1.vb#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1ba94-110">初始化 <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="1ba94-110">Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeSnippetCompileUnit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeSnippetCompileUnit.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeSnippetCompileUnit();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1ba94-111">初始化 <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="1ba94-111">Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ba94-112">如果您使用這個建構函式您也應該設定<xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="1ba94-112">If you use this constructor you should also set the <xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeSnippetCompileUnit (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeSnippetCompileUnit(System::String ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="1ba94-113">要表示的常值程式碼片段。</span><span class="sxs-lookup"><span data-stu-id="1ba94-113">The literal code fragment to represent.</span></span></param>
        <summary><span data-ttu-id="1ba94-114">初始化 <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="1ba94-114">Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1ba94-115">下列程式碼範例示範如何建立的新執行個體<xref:System.CodeDom.CodeSnippetCompileUnit>使用字串，代表常值的程式碼的類別。</span><span class="sxs-lookup"><span data-stu-id="1ba94-115">The following code example demonstrates how to create a new instance of the <xref:System.CodeDom.CodeSnippetCompileUnit> class by using a string that represents literal code.</span></span>  
  
 [!code-cpp[CodeDomSampleBatch#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomSampleBatch/CPP/class1.cpp#8)]
 [!code-csharp[CodeDomSampleBatch#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomSampleBatch/CS/class1.cs#8)]
 [!code-vb[CodeDomSampleBatch#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomSampleBatch/VB/class1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinePragma">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeLinePragma LinePragma { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeLinePragma LinePragma" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma" />
      <MemberSignature Language="VB.NET" Value="Public Property LinePragma As CodeLinePragma" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeLinePragma ^ LinePragma { System::CodeDom::CodeLinePragma ^ get(); void set(System::CodeDom::CodeLinePragma ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeLinePragma</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ba94-116">取得或是設定在原始程式碼文件中，程式碼所在行和檔案的資訊。</span><span class="sxs-lookup"><span data-stu-id="1ba94-116">Gets or sets the line and file information about where the code is located in a source code document.</span></span></summary>
        <value><span data-ttu-id="1ba94-117"><see cref="T:System.CodeDom.CodeLinePragma" />，表示程式碼片段的位置。</span><span class="sxs-lookup"><span data-stu-id="1ba94-117">A <see cref="T:System.CodeDom.CodeLinePragma" /> that indicates the position of the code fragment.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeLinePragma" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeSnippetCompileUnit.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1ba94-118">取得或設定要表示的常值程式碼片段。</span><span class="sxs-lookup"><span data-stu-id="1ba94-118">Gets or sets the literal code fragment to represent.</span></span></summary>
        <value><span data-ttu-id="1ba94-119">常值程式碼片段。</span><span class="sxs-lookup"><span data-stu-id="1ba94-119">The literal code fragment.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>