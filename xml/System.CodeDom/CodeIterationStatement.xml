<Type Name="CodeIterationStatement" FullName="System.CodeDom.CodeIterationStatement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a602afb36a6ac9c38da796d2c7aecfe2e5f27528" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeIterationStatement : System.CodeDom.CodeStatement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeIterationStatement extends System.CodeDom.CodeStatement" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeIterationStatement" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeIterationStatement&#xA;Inherits CodeStatement" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeIterationStatement : System::CodeDom::CodeStatement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeStatement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="10019-101">表示 <see langword="for" /> 陳述式或陳述式區塊的迴圈，使用測試運算式做為繼續迴圈的條件。</span>
      <span class="sxs-lookup">
        <span data-stu-id="10019-101">Represents a <see langword="for" /> statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10019-102">A<xref:System.CodeDom.CodeIterationStatement>可以代表`for`迴圈或`while`迴圈。</span><span class="sxs-lookup"><span data-stu-id="10019-102">A <xref:System.CodeDom.CodeIterationStatement> can represent a `for` loop or `while` loop.</span></span>  
  
 <span data-ttu-id="10019-103"><xref:System.CodeDom.CodeIterationStatement.InitStatement%2A>屬性會指定要在第一次迴圈反覆運算之前執行的陳述式。</span><span class="sxs-lookup"><span data-stu-id="10019-103">The <xref:System.CodeDom.CodeIterationStatement.InitStatement%2A> property specifies the statement to execute before the first loop iteration.</span></span> <span data-ttu-id="10019-104"><xref:System.CodeDom.CodeIterationStatement.TestExpression%2A>屬性會指定迴圈接續運算式必須評估為`true`結尾的另一個反覆項目開始，每個迴圈反覆項目。</span><span class="sxs-lookup"><span data-stu-id="10019-104">The <xref:System.CodeDom.CodeIterationStatement.TestExpression%2A> property specifies the loop continuation expression, which must evaluate to `true` at the end of each loop iteration for another iteration to begin.</span></span> <span data-ttu-id="10019-105"><xref:System.CodeDom.CodeIterationStatement.IncrementStatement%2A>屬性會指定要在每次迴圈反覆運算結束執行的陳述式。</span><span class="sxs-lookup"><span data-stu-id="10019-105">The <xref:System.CodeDom.CodeIterationStatement.IncrementStatement%2A> property specifies the statement to execute at the end of each loop iteration.</span></span> <span data-ttu-id="10019-106"><xref:System.CodeDom.CodeIterationStatement.Statements%2A>屬性會指定要在迴圈內執行的陳述式的集合。</span><span class="sxs-lookup"><span data-stu-id="10019-106">The <xref:System.CodeDom.CodeIterationStatement.Statements%2A> property specifies the collection of statements to execute within the loop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10019-107">這個範例示範如何使用<xref:System.CodeDom.CodeIterationStatement>來代表`for`迴圈。</span><span class="sxs-lookup"><span data-stu-id="10019-107">This example demonstrates using a <xref:System.CodeDom.CodeIterationStatement> to represent a `for` loop.</span></span>  
  
 [!code-cpp[CodeIterationStatementExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeIterationStatementExample/CPP/codeiterationstatementexample.cpp#2)]
 [!code-csharp[CodeIterationStatementExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeIterationStatementExample/CS/codeiterationstatementexample.cs#2)]
 [!code-vb[CodeIterationStatementExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeIterationStatementExample/VB/codeiterationstatementexample.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="10019-108">初始化 <see cref="T:System.CodeDom.CodeIterationStatement" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-108">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeIterationStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeIterationStatement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeIterationStatement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="10019-109">初始化 <see cref="T:System.CodeDom.CodeIterationStatement" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-109">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeIterationStatement (System.CodeDom.CodeStatement initStatement, System.CodeDom.CodeExpression testExpression, System.CodeDom.CodeStatement incrementStatement, params System.CodeDom.CodeStatement[] statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeStatement initStatement, class System.CodeDom.CodeExpression testExpression, class System.CodeDom.CodeStatement incrementStatement, class System.CodeDom.CodeStatement[] statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initStatement As CodeStatement, testExpression As CodeExpression, incrementStatement As CodeStatement, ParamArray statements As CodeStatement())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeIterationStatement(System::CodeDom::CodeStatement ^ initStatement, System::CodeDom::CodeExpression ^ testExpression, System::CodeDom::CodeStatement ^ incrementStatement, ... cli::array &lt;System::CodeDom::CodeStatement ^&gt; ^ statements);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initStatement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="testExpression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="incrementStatement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="statements" Type="System.CodeDom.CodeStatement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="initStatement">
          <span data-ttu-id="10019-110">
            <see cref="T:System.CodeDom.CodeStatement" />，包含迴圈初始化陳述式 (Statement)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-110">A <see cref="T:System.CodeDom.CodeStatement" /> containing the loop initialization statement.</span>
          </span>
        </param>
        <param name="testExpression">
          <span data-ttu-id="10019-111">
            <see cref="T:System.CodeDom.CodeExpression" />，包含用於測試離開條件的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-111">A <see cref="T:System.CodeDom.CodeExpression" /> containing the expression to test for exit condition.</span>
          </span>
        </param>
        <param name="incrementStatement">
          <span data-ttu-id="10019-112">
            <see cref="T:System.CodeDom.CodeStatement" />，包含每個循環遞增陳述式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-112">A <see cref="T:System.CodeDom.CodeStatement" /> containing the per-cycle increment statement.</span>
          </span>
        </param>
        <param name="statements">
          <span data-ttu-id="10019-113">
            <see cref="T:System.CodeDom.CodeStatement" /> 型別的陣列，包含迴圈中的陳述式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-113">An array of type <see cref="T:System.CodeDom.CodeStatement" /> containing the statements within the loop.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="10019-114">使用指定的參數初始化 <see cref="T:System.CodeDom.CodeIterationStatement" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-114">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class using the specified parameters.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="IncrementStatement">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatement IncrementStatement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatement IncrementStatement" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.IncrementStatement" />
      <MemberSignature Language="VB.NET" Value="Public Property IncrementStatement As CodeStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatement ^ IncrementStatement { System::CodeDom::CodeStatement ^ get(); void set(System::CodeDom::CodeStatement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="10019-115">取得或設定在每次迴圈循環之後，所呼叫的陳述式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-115">Gets or sets the statement that is called after each loop cycle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="10019-116">
            <see cref="T:System.CodeDom.CodeStatement" />，表示每個循環遞增陳述式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-116">A <see cref="T:System.CodeDom.CodeStatement" /> that indicates the per cycle increment statement.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10019-117">每個反覆項目之後呼叫此陳述式。</span><span class="sxs-lookup"><span data-stu-id="10019-117">This statement is called after each iteration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
      </Docs>
    </Member>
    <Member MemberName="InitStatement">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatement InitStatement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatement InitStatement" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.InitStatement" />
      <MemberSignature Language="VB.NET" Value="Public Property InitStatement As CodeStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatement ^ InitStatement { System::CodeDom::CodeStatement ^ get(); void set(System::CodeDom::CodeStatement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="10019-118">取得或設定迴圈初始化陳述式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-118">Gets or sets the loop initialization statement.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="10019-119">
            <see cref="T:System.CodeDom.CodeStatement" />，表示迴圈初始化陳述式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-119">A <see cref="T:System.CodeDom.CodeStatement" /> that indicates the loop initialization statement.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10019-120">您可以指定空白的初始化陳述式，此屬性設定為<xref:System.CodeDom.CodeExpressionStatement>包含<xref:System.CodeDom.CodeSnippetExpression>包含空字串。</span><span class="sxs-lookup"><span data-stu-id="10019-120">You can specify an empty initialization statement by setting this property to a <xref:System.CodeDom.CodeExpressionStatement> that contains a <xref:System.CodeDom.CodeSnippetExpression> that contains an empty string.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Statements">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatementCollection Statements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatementCollection Statements" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.Statements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Statements As CodeStatementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatementCollection ^ Statements { System::CodeDom::CodeStatementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="10019-121">取得在迴圈中要執行的陳述式集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-121">Gets the collection of statements to be executed within the loop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="10019-122">
            <see cref="T:System.CodeDom.CodeStatement" /> 型別的陣列，表示在迴圈中的陳述式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-122">An array of type <see cref="T:System.CodeDom.CodeStatement" /> that indicates the statements within the loop.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
      </Docs>
    </Member>
    <Member MemberName="TestExpression">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression TestExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression TestExpression" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.TestExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property TestExpression As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ TestExpression { System::CodeDom::CodeExpression ^ get(); void set(System::CodeDom::CodeExpression ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="10019-123">取得或設定做為繼續迴圈之條件測試的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-123">Gets or sets the expression to test as the condition that continues the loop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="10019-124">
            <see cref="T:System.CodeDom.CodeExpression" />，表示要測試的運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="10019-124">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the expression to test.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10019-125">如果此運算式解析為`true`，迴圈會繼續。</span><span class="sxs-lookup"><span data-stu-id="10019-125">If this expression resolves to `true`, the loop will continue.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
  </Members>
</Type>