<Type Name="CodeSnippetExpression" FullName="System.CodeDom.CodeSnippetExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="48fbb8f9e5551fd94c36487c94c413e29fc7883c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeSnippetExpression : System.CodeDom.CodeExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeSnippetExpression extends System.CodeDom.CodeExpression" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeSnippetExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeSnippetExpression&#xA;Inherits CodeExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeSnippetExpression : System::CodeDom::CodeExpression" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="3ab65-101">表示常值 (Literal) 運算式。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3ab65-101">Represents a literal expression.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ab65-102">常值運算式會將運算式的程式碼儲存為常值的程式碼片段。</span><span class="sxs-lookup"><span data-stu-id="3ab65-102">A literal expression stores the code of an expression as a literal code fragment.</span></span> <span data-ttu-id="3ab65-103">CodeDOM 不會轉譯常值的程式碼片段。</span><span class="sxs-lookup"><span data-stu-id="3ab65-103">The CodeDOM does not translate literal code fragments.</span></span> <span data-ttu-id="3ab65-104">常值的程式碼片段會儲存，並輸出就如同它們。</span><span class="sxs-lookup"><span data-stu-id="3ab65-104">Literal code fragments are stored and output just as they are.</span></span> <span data-ttu-id="3ab65-105">CodeDOM 物件，其中包含常值的程式碼被為了讓開發人員可以將封裝已在目標語言的程式碼。</span><span class="sxs-lookup"><span data-stu-id="3ab65-105">CodeDOM objects that contain literal code are provided so developers can encapsulate code that is already in the target language.</span></span>  
  
 <span data-ttu-id="3ab65-106"><xref:System.CodeDom.CodeSnippetExpression.Value%2A>屬性包含這個程式碼片段運算式常值的程式碼。</span><span class="sxs-lookup"><span data-stu-id="3ab65-106">The <xref:System.CodeDom.CodeSnippetExpression.Value%2A> property contains the literal code for this snippet expression.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3ab65-107">下列程式碼範例示範如何建立執行個體<xref:System.CodeDom.CodeSnippetExpression>類別使用的常值的程式碼片段。</span><span class="sxs-lookup"><span data-stu-id="3ab65-107">The following code example demonstrates how to create an instance of the <xref:System.CodeDom.CodeSnippetExpression> class using a literal code fragment.</span></span>  
  
 [!code-cpp[CodeDomSampleBatch#9](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomSampleBatch/CPP/class1.cpp#9)]
 [!code-csharp[CodeDomSampleBatch#9](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomSampleBatch/CS/class1.cs#9)]
 [!code-vb[CodeDomSampleBatch#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomSampleBatch/VB/class1.vb#9)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3ab65-108">初始化 <see cref="T:System.CodeDom.CodeSnippetExpression" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3ab65-108">Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetExpression" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeSnippetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeSnippetExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeSnippetExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3ab65-109">初始化 <see cref="T:System.CodeDom.CodeSnippetExpression" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3ab65-109">Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetExpression" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeSnippetExpression (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeSnippetExpression(System::String ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3ab65-110">要表示的常值運算式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3ab65-110">The literal expression to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3ab65-111">使用指定的常值運算式，來初始化 <see cref="T:System.CodeDom.CodeSnippetExpression" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3ab65-111">Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetExpression" /> class using the specified literal expression.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3ab65-112">下列程式碼範例示範如何使用<xref:System.CodeDom.CodeSnippetExpression.%23ctor%2A>建構函式建立的執行個體<xref:System.CodeDom.CodeSnippetExpression>類別。</span><span class="sxs-lookup"><span data-stu-id="3ab65-112">The following code example demonstrates in the use of the <xref:System.CodeDom.CodeSnippetExpression.%23ctor%2A> constructor to create an instance of the <xref:System.CodeDom.CodeSnippetExpression> class.</span></span>  
  
 [!code-cpp[CodeDomSampleBatch#9](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomSampleBatch/CPP/class1.cpp#9)]
 [!code-csharp[CodeDomSampleBatch#9](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomSampleBatch/CS/class1.cs#9)]
 [!code-vb[CodeDomSampleBatch#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomSampleBatch/VB/class1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeSnippetExpression.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3ab65-113">取得或設定程式碼的常值字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3ab65-113">Gets or sets the literal string of code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3ab65-114">常值字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3ab65-114">The literal string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3ab65-115">這可以包含程式碼註解。</span><span class="sxs-lookup"><span data-stu-id="3ab65-115">This can contain code or comments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>