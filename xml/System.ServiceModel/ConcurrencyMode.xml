<Type Name="ConcurrencyMode" FullName="System.ServiceModel.ConcurrencyMode">
  <TypeSignature Language="C#" Value="public enum ConcurrencyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConcurrencyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ConcurrencyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum ConcurrencyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class ConcurrencyMode" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="26bea-101">指定服務類別是支援單一執行緒或多重執行緒的作業模式。</span><span class="sxs-lookup"><span data-stu-id="26bea-101">Specifies whether a service class supports single-threaded or multi-threaded modes of operation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26bea-102"><xref:System.ServiceModel.ConcurrencyMode> 與 <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> 屬性搭配使用，指定服務類別是支援單一執行緒或多重執行緒的作業模式。</span><span class="sxs-lookup"><span data-stu-id="26bea-102"><xref:System.ServiceModel.ConcurrencyMode> is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation.</span></span> <span data-ttu-id="26bea-103">單一執行緒作業可為可重新進入 (Reentrant) 或不可重新進入 (Non-Reentrant)。</span><span class="sxs-lookup"><span data-stu-id="26bea-103">A single-threaded operation can be either reentrant or non-reentrant.</span></span>  
  
 <span data-ttu-id="26bea-104">下表顯示根據 [!INCLUDE[indigo1](~/includes/indigo1-md.md)]，<xref:System.ServiceModel.ConcurrencyMode> 允許作業在另一作業進行時叫用的時機。</span><span class="sxs-lookup"><span data-stu-id="26bea-104">The following table shows when [!INCLUDE[indigo1](~/includes/indigo1-md.md)] permits an operation to be invoked while another one is in progress, depending upon the <xref:System.ServiceModel.ConcurrencyMode>.</span></span>  
  
|<span data-ttu-id="26bea-105">ConcurrencyMode 值</span><span class="sxs-lookup"><span data-stu-id="26bea-105">ConcurrencyMode Value</span></span>|<span data-ttu-id="26bea-106">新作業可叫用嗎？</span><span class="sxs-lookup"><span data-stu-id="26bea-106">Can a new operation be invoked?</span></span>|  
|---------------------------|-------------------------------------|  
|<span data-ttu-id="26bea-107">Single</span><span class="sxs-lookup"><span data-stu-id="26bea-107">Single</span></span>|<span data-ttu-id="26bea-108">永不。</span><span class="sxs-lookup"><span data-stu-id="26bea-108">Never.</span></span>|  
|<span data-ttu-id="26bea-109">重新進入</span><span class="sxs-lookup"><span data-stu-id="26bea-109">Reentrant</span></span>|<span data-ttu-id="26bea-110">只在叫用另一服務或回呼時。</span><span class="sxs-lookup"><span data-stu-id="26bea-110">Only while invoking another service or a callback.</span></span>|  
|<span data-ttu-id="26bea-111">多頁</span><span class="sxs-lookup"><span data-stu-id="26bea-111">Multiple</span></span>|<span data-ttu-id="26bea-112">永遠是。</span><span class="sxs-lookup"><span data-stu-id="26bea-112">Always.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="26bea-113">下列程式碼範例示範使用單一、 Reentrant 和多個之間的差異。</span><span class="sxs-lookup"><span data-stu-id="26bea-113">The following code example demonstrates the different between using Single, Reentrant, and Multiple.</span></span> <span data-ttu-id="26bea-114">此範例不會編譯，實際實作情況下，但未示範種執行緒保證，WCF 可讓您的作業程式碼的意義。</span><span class="sxs-lookup"><span data-stu-id="26bea-114">This sample does not compile without a real implementation behind it, but does demonstrate the kind of threading guarantees that WCF makes and what that means for your operation code.</span></span>  
  
 [!code-csharp[C_BestPractices-Concurrency#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_bestpractices-concurrency/cs/reentrantandmultiple.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Multiple">
      <MemberSignature Language="C#" Value="Multiple" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Multiple = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberSignature Language="VB.NET" Value="Multiple" />
      <MemberSignature Language="C++ CLI" Value="Multiple" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="26bea-115">服務執行個體為多執行緒。</span><span class="sxs-lookup"><span data-stu-id="26bea-115">The service instance is multi-threaded.</span></span> <span data-ttu-id="26bea-116">不保證同步處理。</span><span class="sxs-lookup"><span data-stu-id="26bea-116">No synchronization guarantees are made.</span></span> <span data-ttu-id="26bea-117">由於其他執行緒可隨時變更您的服務物件，您必須隨時處理同步及狀態的一致性。</span><span class="sxs-lookup"><span data-stu-id="26bea-117">Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Reentrant">
      <MemberSignature Language="C#" Value="Reentrant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Reentrant = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberSignature Language="VB.NET" Value="Reentrant" />
      <MemberSignature Language="C++ CLI" Value="Reentrant" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="26bea-118">服務執行個體為單一執行緒，且接受重新進入呼叫。</span><span class="sxs-lookup"><span data-stu-id="26bea-118">The service instance is single-threaded and accepts reentrant calls.</span></span> <span data-ttu-id="26bea-119">重新進入服務在您呼叫其他服務時接受呼叫；因此您的責任是在 Callout 前保持物件狀態一致性，並且必須確定作業本機資料在 Callout 後有效。</span><span class="sxs-lookup"><span data-stu-id="26bea-119">The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts.</span></span> <span data-ttu-id="26bea-120">請注意，只有透過 WCF 通道呼叫另一個服務才能解除服務執行個體鎖定。</span><span class="sxs-lookup"><span data-stu-id="26bea-120">Note that the service instance is unlocked only by calling another service over a WCF channel.</span></span> <span data-ttu-id="26bea-121">此時，被呼叫的服務可透過回呼重新進入第一個服務。</span><span class="sxs-lookup"><span data-stu-id="26bea-121">In this case, the called service can reenter the first service via a callback.</span></span> <span data-ttu-id="26bea-122">如果第一個服務無法重新進入，這時的呼叫順序會造成死結。</span><span class="sxs-lookup"><span data-stu-id="26bea-122">If the first service is not reentrant, the sequence of calls results in a deadlock.</span></span> <span data-ttu-id="26bea-123">如需詳細資訊，請參閱 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />。</span><span class="sxs-lookup"><span data-stu-id="26bea-123">For details, see <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Single">
      <MemberSignature Language="C#" Value="Single" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Single = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Single" />
      <MemberSignature Language="VB.NET" Value="Single" />
      <MemberSignature Language="C++ CLI" Value="Single" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="26bea-124">該服務執行個體為單一執行緒服務，而且不接受重新進入 (Reentrant) 的呼叫。</span><span class="sxs-lookup"><span data-stu-id="26bea-124">The service instance is single-threaded and does not accept reentrant calls.</span></span> <span data-ttu-id="26bea-125">若 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> 屬性為 <see cref="F:System.ServiceModel.InstanceContextMode.Single" />，而且在執行個體處理呼叫時有另外的訊息抵達，這些訊息必須等到服務可使用，或者訊息逾時為止。</span><span class="sxs-lookup"><span data-stu-id="26bea-125">If the <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> property is <see cref="F:System.ServiceModel.InstanceContextMode.Single" />, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>