<Type Name="MsmqBindingBase" FullName="System.ServiceModel.MsmqBindingBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="feef632fb4ed6ae6640f684f22583f18b147cbea" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39997794" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MsmqBindingBase : System.ServiceModel.Channels.Binding, System.ServiceModel.Channels.IBindingRuntimePreferences" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MsmqBindingBase extends System.ServiceModel.Channels.Binding implements class System.ServiceModel.Channels.IBindingRuntimePreferences" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.MsmqBindingBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MsmqBindingBase&#xA;Inherits Binding&#xA;Implements IBindingRuntimePreferences" />
  <TypeSignature Language="C++ CLI" Value="public ref class MsmqBindingBase abstract : System::ServiceModel::Channels::Binding, System::ServiceModel::Channels::IBindingRuntimePreferences" />
  <TypeSignature Language="F#" Value="type MsmqBindingBase = class&#xA;    inherit Binding&#xA;    interface IBindingRuntimePreferences" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Channels.Binding</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IBindingRuntimePreferences</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <see cref="T:System.ServiceModel.NetMsmqBinding" /> 與 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding" /> 的基底類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此抽象類別包含 <xref:System.ServiceModel.NetMsmqBinding> 與 <xref:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding> 常見的屬性。 所有序列中的基礎概念以屬性形式顯示。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MsmqBindingBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.MsmqBindingBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MsmqBindingBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ServiceModel.MsmqBindingBase" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomDeadLetterQueue">
      <MemberSignature Language="C#" Value="public Uri CustomDeadLetterQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri CustomDeadLetterQueue" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.CustomDeadLetterQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomDeadLetterQueue As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ CustomDeadLetterQueue { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomDeadLetterQueue : Uri with get, set" Usage="System.ServiceModel.MsmqBindingBase.CustomDeadLetterQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 URI，其中包含每個應用程式寄不出的信件佇列的位置，所有已過期、無法傳輸或傳遞的訊息都會放到該佇列中。</summary>
        <value>包含每個應用程式寄不出的信件佇列之位置的 <see cref="T:System.Uri" />。 預設值是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 寄不出的信件佇列是傳送應用程式佇列管理員上的佇列，用於無法傳遞的過期訊息。  
  
 由 <xref:System.ServiceModel.MsmqBindingBase.CustomDeadLetterQueue%2A> 指定的 URI 必須使用 net.msmq 配置。  
  
 如果 <xref:System.ServiceModel.MsmqBindingBase.DeadLetterQueue%2A> 設定為 <xref:System.ServiceModel.DeadLetterQueue.None> 或 <xref:System.ServiceModel.DeadLetterQueue.System>，則 <xref:System.ServiceModel.MsmqBindingBase.CustomDeadLetterQueue%2A> 必須設定為 `null`。 如果 <xref:System.ServiceModel.MsmqBindingBase.CustomDeadLetterQueue%2A> 不是 `null`，則 <xref:System.ServiceModel.MsmqBindingBase.DeadLetterQueue%2A> 必須設定為 <xref:System.ServiceModel.DeadLetterQueue.Custom>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeadLetterQueue">
      <MemberSignature Language="C#" Value="public System.ServiceModel.DeadLetterQueue DeadLetterQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.DeadLetterQueue DeadLetterQueue" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.DeadLetterQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property DeadLetterQueue As DeadLetterQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::DeadLetterQueue DeadLetterQueue { System::ServiceModel::DeadLetterQueue get(); void set(System::ServiceModel::DeadLetterQueue value); };" />
      <MemberSignature Language="F#" Value="member this.DeadLetterQueue : System.ServiceModel.DeadLetterQueue with get, set" Usage="System.ServiceModel.MsmqBindingBase.DeadLetterQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.DeadLetterQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定列舉值，這個值會指出要使用之寄不出的信件佇列類型。</summary>
        <value>
          <see cref="T:System.ServiceModel.DeadLetterQueue" /> 列舉值，指出要使用之寄不出的信件佇列類型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 寄不出的信件佇列是傳送應用程式佇列管理員上的佇列，用於無法傳遞的過期訊息。 寄不出的信件佇列列舉型別會指定要使用之寄不出的信件佇列類型。 這些值包括：  
  
-   `None`：不需要寄不出的信件佇列。 如果訊息無法傳遞，則不會在寄不出的信件佇列中維護這個訊息的記錄。 當 <xref:System.ServiceModel.MsmqBindingBase.ExactlyOnce%2A> 設定為 `false` 時，這就是預設值。  
  
-   `System`：範圍觸及整個系統的寄不出的信件佇列會用來記錄無法傳遞的訊息。 訊息佇列 (MSMQ) 具有一個系統寄不出的信件交易式佇列和一個系統寄不出的信件非交易式佇列，可分別記錄無法從交易式佇列與非交易式佇列傳遞的過期訊息。 當 <xref:System.ServiceModel.MsmqBindingBase.ExactlyOnce%2A> 設定為 `true` 時，這就是預設值。  
  
-   `Custom`：在 <xref:System.ServiceModel.MsmqBindingBase.CustomDeadLetterQueue%2A> 屬性中指定的佇列，用於記錄無法傳遞的訊息。  
  
 訊息可能會因為下列任何一個原因而無法到達接收應用程式：  
  
-   交易式訊息已傳送至非交易式佇列。  
  
-   非交易式訊息已傳送至交易式佇列。  
  
-   未經驗證的訊息已傳送至僅接受經過驗證之訊息的佇列。  
  
-   未經加密的訊息已傳送至僅接受經過加密之訊息的佇列。  
  
-   訊息在傳送給接收者之前就已逾期。  
  
-   已超出目標電腦的訊息儲存配額或是目的佇列的儲存配額，或者是當訊息送達時，目標電腦上沒有可用的儲存空間。  
  
-   寄件者並沒有[存取權限](http://go.microsoft.com/fwlink/?LinkID=96167)才能將訊息放在目的端佇列。  
  
-   附加到訊息的數位簽章無效。  
  
-   加密的訊息無法由目的佇列管理員進行解密。  
  
-   擷取訊息前，會清除或刪除目的佇列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Durable">
      <MemberSignature Language="C#" Value="public bool Durable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Durable" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.Durable" />
      <MemberSignature Language="VB.NET" Value="Public Property Durable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Durable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Durable : bool with get, set" Usage="System.ServiceModel.MsmqBindingBase.Durable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值會指出由這個繫結處理的訊息是否具有永久性或變動性。</summary>
        <value>如果這個繫結處理的訊息是永久性的，則為 <see langword="true" />，如果為變動性的則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當佇列管理員停止回應時，永久性的訊息不會受到影響，但變動性訊息會受到影響。 如果應用程式可以容許訊息偶而遺失，變動性訊息就很有用。  
  
 如果 <xref:System.ServiceModel.MsmqBindingBase.ExactlyOnce%2A> 設定為 `true`，訊息必須是永久性的。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExactlyOnce">
      <MemberSignature Language="C#" Value="public bool ExactlyOnce { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExactlyOnce" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.ExactlyOnce" />
      <MemberSignature Language="VB.NET" Value="Public Property ExactlyOnce As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExactlyOnce { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExactlyOnce : bool with get, set" Usage="System.ServiceModel.MsmqBindingBase.ExactlyOnce" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值會指出由這個繫結處理的訊息是否會確實接收一次。</summary>
        <value>如果只接收一次由此繫結處理的訊息，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 訊息可以在有保證或無保證的情況下傳送。 如果有保證，應用程式便可確認傳送的訊息已到達接收訊息佇列，如果訊息沒有到達接收訊息佇列，應用程式可藉由讀取寄不出的信件佇列來判斷是否到達。  
  
 <xref:System.ServiceModel.MsmqBindingBase.ExactlyOnce%2A> 設定為 `true` 的已傳送訊息，必須只能傳送到交易式佇列。  
  
 <xref:System.ServiceModel.MsmqBindingBase.ExactlyOnce%2A>，當傳送至 `true` 時，表示訊息佇列 (MSMQ) 確保傳送的訊息已傳遞至接收訊息佇列一次，且僅此一次。 如果傳遞失敗，則訊息會傳送至寄不出的信件佇列。  
  
 如果是需要將 <xref:System.ServiceModel.MsmqBindingBase.ExactlyOnce%2A> 設定為 `false` 的訊息，<xref:System.ServiceModel.MsmqBindingBase.DeadLetterQueue%2A> 屬性會預設為 `null`。  
  
 如果是需要將 <xref:System.ServiceModel.MsmqBindingBase.ExactlyOnce%2A> 設定為 `true` 的訊息，<xref:System.ServiceModel.MsmqBindingBase.DeadLetterQueue%2A> 屬性會預設為在 MSMQ 的整個系統中，屬於交易式的寄不出信件佇列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxReceivedMessageSize">
      <MemberSignature Language="C#" Value="public long MaxReceivedMessageSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxReceivedMessageSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.MaxReceivedMessageSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxReceivedMessageSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxReceivedMessageSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxReceivedMessageSize : int64 with get, set" Usage="System.ServiceModel.MsmqBindingBase.MaxReceivedMessageSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(65536)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定這個繫結所處理之訊息的大小上限 (以位元組為單位)。</summary>
        <value>由此繫結處理之訊息的大小上限 (單位為位元組)。 預設值為 65,536 位元組。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項關於訊息大小的限制是為了避免受到阻絕服務 (DoS) 攻擊。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxRetryCycles">
      <MemberSignature Language="C#" Value="public int MaxRetryCycles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxRetryCycles" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.MaxRetryCycles" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxRetryCycles As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxRetryCycles { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxRetryCycles : int with get, set" Usage="System.ServiceModel.MsmqBindingBase.MaxRetryCycles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定嘗試傳遞訊息至接收應用程式的重試循環次數上限。</summary>
        <value>嘗試傳遞訊息至應用程式的重試循環次數上限。 預設值為 2。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 單一重試循環會嘗試以指定的次數，傳遞訊息至應用程式。 嘗試的次數是由 <xref:System.ServiceModel.MsmqBindingBase.ReceiveRetryCount%2A> 屬性設定。 在立即重試達指定次數後，如果應用程式無法存取訊息，訊息就會傳送至重試佇列。 在 <xref:System.ServiceModel.MsmqBindingBase.RetryCycleDelay%2A> 屬性指定的延遲之後，後續的重試循環會包含從重試佇列傳回應用程式佇列的訊息，以再次嘗試傳遞至應用程式。 <xref:System.ServiceModel.MsmqBindingBase.MaxRetryCycles%2A> 屬性會指定應用程式用於嘗試傳遞訊息的重試循環次數。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveContextEnabled">
      <MemberSignature Language="C#" Value="public bool ReceiveContextEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReceiveContextEnabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.ReceiveContextEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveContextEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReceiveContextEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveContextEnabled : bool with get, set" Usage="System.ServiceModel.MsmqBindingBase.ReceiveContextEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示是否已要求接收內容行為。</summary>
        <value>如果已要求接收內容行為，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveErrorHandling">
      <MemberSignature Language="C#" Value="public System.ServiceModel.ReceiveErrorHandling ReceiveErrorHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.ReceiveErrorHandling ReceiveErrorHandling" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.ReceiveErrorHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveErrorHandling As ReceiveErrorHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::ReceiveErrorHandling ReceiveErrorHandling { System::ServiceModel::ReceiveErrorHandling get(); void set(System::ServiceModel::ReceiveErrorHandling value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveErrorHandling : System.ServiceModel.ReceiveErrorHandling with get, set" Usage="System.ServiceModel.MsmqBindingBase.ReceiveErrorHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ReceiveErrorHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定列舉值，這個值會指定如何處理有害的訊息。</summary>
        <value>
          <see cref="T:System.ServiceModel.ReceiveErrorHandling" /> 值，指定如何處理有害和其他不可分派的訊息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果嘗試重複傳送訊息失敗，佇列中的訊息就會被破壞。 這種有害訊息最後會依據這項屬性的設定加以處理。 當這個屬性設定為 <xref:System.ServiceModel.ReceiveErrorHandling.Fault> 時，接聽程式會發生錯誤，並且會追蹤和擲回 <xref:System.ServiceModel.MsmqPoisonMessageException>。 有害訊息會留在佇列中，並且必須先將這些有害訊息移除，才能從佇列存取更多訊息。 <xref:System.ServiceModel.MsmqPoisonMessageException> 包含 <xref:System.ServiceModel.MsmqPoisonMessageException.MessageLookupId%2A>，後者可用於從佇列中識別並手動移除有害訊息。  
  
 當這個屬性設定為 <xref:System.ServiceModel.ReceiveErrorHandling.Drop> 時，即會捨棄有害訊息。  
  
 當這個屬性設定為 <xref:System.ServiceModel.ReceiveErrorHandling.Reject> 時，負認可會傳送至用戶端，並從佇列移除有害訊息。 只有在 Message Queuing 4.0 上才能使用這個選項，並且需要 [!INCLUDE[wv](~/includes/wv-md.md)]。  
  
 當設定為 <xref:System.ServiceModel.ReceiveErrorHandling.Move> 時，有害訊息會移到最後一個有害子佇列。 只有在 Message Queuing 4.0 上才能使用這個選項，並且須有 [!INCLUDE[wv](~/includes/wv-md.md)]。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveRetryCount">
      <MemberSignature Language="C#" Value="public int ReceiveRetryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveRetryCount" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.ReceiveRetryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveRetryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveRetryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveRetryCount : int with get, set" Usage="System.ServiceModel.MsmqBindingBase.ReceiveRetryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(5)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定從應用程式佇列讀取之訊息的立即傳遞嘗試次數上限。</summary>
        <value>立即傳遞嘗試的次數上限。 預設值為 5。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果達到立即傳遞重試的次數上限，且應用程式無法存取訊息，那麼會將這則訊息傳送至重試佇列，以便於稍後嘗試傳遞。 如果沒有指定重試循環，那麼訊息便會傳送至有害訊息佇列，或者系統會將負認可傳回寄件者。  
  
 如需詳細資訊，請參閱 <xref:System.ServiceModel.MsmqBindingBase.MaxRetryCycles%2A> 與 <xref:System.ServiceModel.MsmqBindingBase.RetryCycleDelay%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetryCycleDelay">
      <MemberSignature Language="C#" Value="public TimeSpan RetryCycleDelay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan RetryCycleDelay" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.RetryCycleDelay" />
      <MemberSignature Language="VB.NET" Value="Public Property RetryCycleDelay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan RetryCycleDelay { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.RetryCycleDelay : TimeSpan with get, set" Usage="System.ServiceModel.MsmqBindingBase.RetryCycleDelay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.TimeSpan), "00:30:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值會指出嘗試傳遞無法立即傳遞之訊息時，重試循環之間的時間延遲。</summary>
        <value>
          <see cref="T:System.TimeSpan" />，指定開始下一輪嘗試傳遞至接收應用程式的循環前，要等候的時間間隔。 預設值為 10 分鐘。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 單一重試循環會嘗試以指定的次數，傳遞訊息至接收應用程式。 嘗試的次數是由 <xref:System.ServiceModel.MsmqBindingBase.ReceiveRetryCount%2A> 屬性指定。 在立即重試達指定次數後，如果應用程式無法存取訊息，訊息就會傳送至重試佇列。 後續的重試循環是由重試佇列傳回應用程式佇列的訊息所組成，以便於 <xref:System.ServiceModel.MsmqBindingBase.RetryCycleDelay%2A> 指定的延遲之後，再次嘗試傳遞至應用程式。 重試循環的次數是由 <xref:System.ServiceModel.MsmqBindingBase.MaxRetryCycles%2A> 所指定。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scheme">
      <MemberSignature Language="C#" Value="public override string Scheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scheme" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.Scheme" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Scheme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Scheme { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheme : string" Usage="System.ServiceModel.MsmqBindingBase.Scheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>傳回這個繫結的配置。</summary>
        <value>這個繫結的配置。 傳回的配置視 <see cref="T:System.ServiceModel.MsmqBindingBase" /> 實作而定。 <see cref="T:System.ServiceModel.NetMsmqBinding" /> 實作會傳回 "net.msmq"。 <see cref="T:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding" /> 實作會傳回 "msmq.formatname"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 訊息佇列 (MSMQ) 支援使用原生 MSMQ 通訊協定與 SRMP 通訊協定的佇列管理員。 使用佇列傳輸繫結的應用程式可以使用這兩種通訊協定。 佇列傳輸繫結所支援的通訊協定配置如下：原生通訊協定的 net.msmq、SRMP 通訊協定的 net.srmp 和透過 HTTPS 的 SRMP 之 net.srmps。  
  
 <xref:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding> 支援單一配置，msmq.formatname，有了這種配置，使用者可以直接在佇列位址中指定佇列的格式名稱。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
      <MemberSignature Language="C#" Value="bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ReceiveSynchronously As Boolean Implements IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ServiceModel::Channels::IBindingRuntimePreferences::ReceiveSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值指出以同步還是非同步方式處理傳入要求可以比較有效率。</summary>
        <value>
          <see langword="true" /> 如果處理要求可以更有效率地以同步方式;否則<see langword=" false" />。 預設為 <see langword="false" />，這樣會以非同步方式處理要求。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當 <xref:System.ServiceModel.MsmqBindingBase.System%23ServiceModel%23Channels%23IBindingRuntimePreferences%23ReceiveSynchronously%2A> 為 `true`<xref:System.ServiceModel.MsmqBindingBase.ExactlyOnce%2A>時，`true` 屬性會設定為 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeToLive">
      <MemberSignature Language="C#" Value="public TimeSpan TimeToLive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeToLive" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.TimeToLive" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeToLive As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeToLive { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.TimeToLive : TimeSpan with get, set" Usage="System.ServiceModel.MsmqBindingBase.TimeToLive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.TimeSpan), "1.00:00:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定時間間隔，這個間隔會指出由此繫結所處理之訊息在到期前可保留在佇列中的時間長度。</summary>
        <value>
          <see cref="T:System.TimeSpan" />，指出訊息在到期前可保留在佇列中的時間長度。 預設值為 1 天。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定 <xref:System.ServiceModel.MsmqBindingBase.TimeToLive%2A> 屬性可確保有時效的訊息在接收應用程式處理之前不會變成過時。 佇列中未由接收應用程式於指定的時間間隔內存取的訊息，即為過期訊息。 過期訊息會傳送至稱為「寄不出的信件佇列」的特殊佇列。 寄不出的信件佇列的位置是使用 <xref:System.ServiceModel.MsmqBindingBase.DeadLetterQueue%2A> 屬性設定，或根據保證設定為適當的預設值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseMsmqTracing">
      <MemberSignature Language="C#" Value="public bool UseMsmqTracing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseMsmqTracing" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.UseMsmqTracing" />
      <MemberSignature Language="VB.NET" Value="Public Property UseMsmqTracing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseMsmqTracing { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseMsmqTracing : bool with get, set" Usage="System.ServiceModel.MsmqBindingBase.UseMsmqTracing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值會指出是否應追蹤由此繫結處理的訊息。</summary>
        <value>如果應追蹤由此繫結處理的訊息，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果啟用追蹤，每當訊息離開或到達訊息佇列 (MSMQ) 電腦時，都會建立報告訊息並傳送至報告佇列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSourceJournal">
      <MemberSignature Language="C#" Value="public bool UseSourceJournal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSourceJournal" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.UseSourceJournal" />
      <MemberSignature Language="VB.NET" Value="Public Property UseSourceJournal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSourceJournal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseSourceJournal : bool with get, set" Usage="System.ServiceModel.MsmqBindingBase.UseSourceJournal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，此值會指出是否要將此繫結處理之訊息的複本儲存在來源日誌佇列。</summary>
        <value>如果要將此繫結處理之訊息的複本儲存在來源日誌佇列，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有些佇列應用程式記錄已離開電腦輸出佇列的訊息，這些程式可以將訊息複製到日誌佇列。 只要訊息一離開輸出佇列，而且收到目的端電腦已收到訊息的認可，訊息的複本就會保留在傳送端電腦的系統日誌佇列中。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidityDuration">
      <MemberSignature Language="C#" Value="public TimeSpan ValidityDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ValidityDuration" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MsmqBindingBase.ValidityDuration" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidityDuration As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ValidityDuration { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.ValidityDuration : TimeSpan with get, set" Usage="System.ServiceModel.MsmqBindingBase.ValidityDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.TimeSpan), "00:05:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值會指定接收內容功能鎖定訊息的持續期間。</summary>
        <value>TimeSpan 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  如果訊息的 <xref:System.ServiceModel.MsmqBindingBase.ValidityDuration%2A> 過期，任何可用於處理訊息的交易都將中止，而且如果過期是在交易期間發生，工作流程執行個體也會一併中止。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>