<Type Name="MessageContractMemberAttribute" FullName="System.ServiceModel.MessageContractMemberAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9212fc608637a253f5a16676534255eb3e980570" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30519812" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MessageContractMemberAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageContractMemberAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.MessageContractMemberAttribute" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageContractMemberAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageContractMemberAttribute abstract : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>宣告 <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> 和 <see cref="T:System.ServiceModel.MessageHeaderAttribute" /> 的基底成員。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別包含 SOAP 訊息的所有部分都通用的屬性。 例如，所有的部分都會有名稱和命名空間，而且可能套用了某個層級的安全性。  
  
 如需如何控制 SOAP 本文內容的序列化，而不需修改預設 SOAP 封套本身的資訊，請參閱<xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>，[在服務合約中指定資料傳輸](~/docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md)，和[中使用資料合約](~/docs/framework/wcf/feature-details/using-data-contracts.md)。  
  
 如需有關如何建立訊息合約的詳細資訊，請參閱[使用訊息合約](~/docs/framework/wcf/feature-details/using-message-contracts.md)。  
  
   
  
## Examples  
 下列程式碼範例示範自訂訊息合約，這個合約會使用 <xref:System.ServiceModel.MessageContractAttribute>、<xref:System.ServiceModel.MessageHeaderAttribute> 和 <xref:System.ServiceModel.MessageBodyMemberAttribute> 屬性 (全都繼承自 <xref:System.ServiceModel.MessageContractMemberAttribute>) 建立自訂型別訊息以使用於作業中。 在此案例中，有三個序列化成 SOAP 訊息本文項目的成員：`sourceAccount`、`targetAccount` 以及 `amount` 值 (序列化成名稱為 `transactionAmount` 的項目)。 此外，`IsAudited` SOAP 標頭項目位於 `http://schemas.contosobank.com/auditing/2005` 命名空間中，而 `sourceAccount` 已經過加密和數位簽署。  
  
> [!NOTE]
>  `Operation` 和 `Account` 型別必須具有資料合約。  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader]   
  public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")]   
  public bool IsAudited;  
  [MessageBody(ProtectionLevel=ProtectionLevel.EncryptAndSign)]   
  public Account sourceAccount;  
  [MessageBody]   
  public Account targetAccount;  
  [MessageBody(Name="transactionAmount")]   
  public int amount;  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageContractMemberAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.MessageContractMemberAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageContractMemberAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ServiceModel.MessageContractMemberAttribute" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在衍生類別中覆寫時，取得指出成員是否已指派保護層級的值。</summary>
        <value>
          如果成員具有保護層級，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定對應於這個成員的項目名稱。</summary>
        <value>對應至這個成員的項目名稱。 這個字串必須是有效的 XML 項目名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範自訂訊息合約，這個合約會使用 <xref:System.ServiceModel.MessageContractAttribute>、<xref:System.ServiceModel.MessageHeaderAttribute> 和 <xref:System.ServiceModel.MessageBodyMemberAttribute> 屬性，以建立自訂的強型別訊息當做參數使用。 在此案例中，有三個序列化成 SOAP 訊息本文項目的資料成員：`sourceAccount`、`targetAccount` 以及 `amount` 值 (後者序列化成名稱為 `transactionAmount` 的項目)。 此外，`IsAudited` SOAP 標頭項目是位於 `http://schemas.contosobank.com/auditing/2005` 命名空間。  
  
> [!NOTE]
>  `Operation` 和 `Account` 型別還必須具有資料合約。  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader] public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")] public bool IsAudited;  
  [MessageBody] public Account sourceAccount;  
  [MessageBody] public Account targetAccount;  
  [MessageBody(Name="transactionAmount")] public int amount;  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定對應於這個成員的項目命名空間。</summary>
        <value>對應於這個成員的項目命名空間 URI。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例示範自訂訊息合約，這個合約會使用 <xref:System.ServiceModel.MessageContractAttribute>、<xref:System.ServiceModel.MessageHeaderAttribute> 和 <xref:System.ServiceModel.MessageBodyMemberAttribute> 屬性 (全都繼承自 <xref:System.ServiceModel.MessageContractMemberAttribute>) 建立自訂型別訊息以使用於作業中。 在此案例中，有三個序列化成 SOAP 訊息本文項目的成員：`sourceAccount`、`targetAccount` 以及 `amount` 值 (序列化成名稱為 `transactionAmount` 的項目)。 此外，`IsAudited` SOAP 標頭項目位於 `http://schemas.contosobank.com/auditing/2005` 命名空間中，而 `sourceAccount` 已經過加密和數位簽署。  
  
> [!NOTE]
>  `Operation` 和 `Account` 型別必須具有資料合約。  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader] public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")] public bool IsAudited;  
  [MessageBody] public Account sourceAccount;  
  [MessageBody] public Account targetAccount;  
  [MessageBody(Name="transactionAmount")] public int amount;  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定成員要依現狀加以傳輸、簽署，或者加以簽署並加密。</summary>
        <value>其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值。 預設值為 <see cref="F:System.Net.Security.ProtectionLevel.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使用 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A> 或 <xref:System.ServiceModel.MessageHeaderAttribute> 屬性中的 <xref:System.ServiceModel.MessageBodyMemberAttribute> 屬性，您必須正確設定繫結和行為。 如果沒有透過正確的組態 (例如，使用具有未提供安全性認證之訊息部分的 <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>) 使用這些安全性功能，就會在執行階段擲回例外狀況。  
  
 此外，保護層級是針對每一個標頭個別決定的。 不過，無論有多少個本文部分，SOAP 本文都只有一個保護層級。 本文保護層級是由所有本文部分的最高層 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A> 屬性值所決定。 例如，請參考下列類別：  
  
```csharp  
[MessageContract]  
public class PatientRecord  
{  
   [MessageHeader(ProtectionLevel=None)] public int recordID;  
   [MessageHeader(ProtectionLevel=Sign)] public string patientName;  
   [MessageHeader(ProtectionLevel=EncryptAndSign)] public string SSN;  
   [MessageBody(ProtectionLevel=None)] public string comments;  
   [MessageBody(ProtectionLevel=Sign)] public string diagnosis;  
   [MessageBody(ProtectionLevel=EncryptAndSign)] public string medicalHistory;  
}  
```  
  
 在這個範例中，`recordID` 標頭不受保護，`patientName` 已經過簽署，而 `SSN` 已經過加密並簽署。 至少有一個本文部分 `medicalHistory` 具有 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>，因此會加密並簽署整個訊息本文，即使 `comments` 和 `diagnosis` 本文部分指定較低的保護層級亦然。  
  
 執行階段的保護行為，是下列屬性的保護層級設定值的組合。 這些屬性有階層式結構。 除非針對較窄的範圍明確設定不同的值，否則，設定最外層的值會建立所有較窄範圍的預設值。 在此情況下，外部值仍為所有較窄範圍的預設值 (特別設定的範圍除外)。  
  
 例如，如果 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> 設定為 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> 而且沒有其他更窄的範圍具有保護層級設定，則會加密並簽署作業合約中的所有訊息。 但是，如果這些其中一個作業已將 <xref:System.ServiceModel.OperationContractAttribute> 設定為 <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>，則會簽署該作業的訊息，但是合約中的其他所有訊息都會經過加密並簽署。  
  
 如需保護層級及其假設和範圍的詳細資訊，請參閱[了解保護層級](~/docs/framework/wcf/understanding-protection-level.md)。  
  
 設定這些值的範圍如下：  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> 的 <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType> 屬性。  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> 的 <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType> 屬性。  
  
 當合約上未明確指定保護層級，而且基礎繫結可支援安全性 (不論是在傳輸層級或訊息層級) 時，整個合約的有效保護層級會是 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>。 如果繫結不支援安全性 (例如，<xref:System.ServiceModel.BasicHttpBinding>)，整個合約的有效 <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> 為 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>。 結果便是根據端點繫結的不同，用戶端可以要求不同的訊息或傳輸層級的安全性保護，即使當合約指定 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> 時亦然。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>