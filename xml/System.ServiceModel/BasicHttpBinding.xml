<Type Name="BasicHttpBinding" FullName="System.ServiceModel.BasicHttpBinding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1b8a657b515e0c1fef799e31b57f474437c99f08" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53516033" /></Metadata><TypeSignature Language="C#" Value="public class BasicHttpBinding : System.ServiceModel.HttpBindingBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BasicHttpBinding extends System.ServiceModel.HttpBindingBase implements class System.ServiceModel.Channels.IBindingRuntimePreferences" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.BasicHttpBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class BasicHttpBinding&#xA;Inherits HttpBindingBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class BasicHttpBinding : System::ServiceModel::HttpBindingBase" />
  <TypeSignature Language="F#" Value="type BasicHttpBinding = class&#xA;    inherit HttpBindingBase&#xA;    interface IBindingRuntimePreferences" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Http</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.HttpBindingBase</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.0">System.ServiceModel.Channels.Binding</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IBindingRuntimePreferences</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="6cd1b-101">代表繫結，Windows Communication Foundation (WCF) 服務可使用該繫結設定並公開能與 ASMX Web 服務和用戶端，以及其他符合 WS-I Basic Profile 1.1 的服務進行通訊的端點。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-101">Represents a binding that a Windows Communication Foundation (WCF) service can use to configure and expose endpoints that are able to communicate with ASMX-based Web services and clients and other services that conform to the WS-I Basic Profile 1.1.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cd1b-102"><xref:System.ServiceModel.BasicHttpBinding> 使用 HTTP 做為傳送 SOAP 1.1 訊息的傳輸。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-102">The <xref:System.ServiceModel.BasicHttpBinding> uses HTTP as the transport for sending SOAP 1.1 messages.</span></span> <span data-ttu-id="6cd1b-103">服務可使用這個繫結公開符合 WS-I BP 1.1 的端點，例如 ASMX 用戶端存取的端點。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-103">A service can use this binding to expose endpoints that conform to WS-I BP 1.1, such as those that ASMX clients access.</span></span> <span data-ttu-id="6cd1b-104">同樣地，用戶端可以使用<xref:System.ServiceModel.BasicHttpBinding>與公開符合 WS-I 的端點的服務進行通訊-我 BP 1.1，例如 ASMX Web 服務或與設定的 Windows Communication Foundation (WCF) 服務<xref:System.ServiceModel.BasicHttpBinding>。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-104">Similarly, a client can use the <xref:System.ServiceModel.BasicHttpBinding> to communicate with services exposing endpoints that conform to WS-I BP 1.1, such as ASMX Web services or Windows Communication Foundation (WCF) services configured with the <xref:System.ServiceModel.BasicHttpBinding>.</span></span>  
  
 <span data-ttu-id="6cd1b-105">安全性預設是關閉的，但是可以在 <xref:System.ServiceModel.BasicHttpSecurityMode> 建構函式中透過將 <xref:System.ServiceModel.BasicHttpSecurityMode.None> 設為非 <xref:System.ServiceModel.BasicHttpBinding.%23ctor%28System.ServiceModel.BasicHttpSecurityMode%29> 的值來新增。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-105">Security is turned off by default, but can be added setting the <xref:System.ServiceModel.BasicHttpSecurityMode> to a value other than <xref:System.ServiceModel.BasicHttpSecurityMode.None> in the <xref:System.ServiceModel.BasicHttpBinding.%23ctor%28System.ServiceModel.BasicHttpSecurityMode%29> constructor.</span></span> <span data-ttu-id="6cd1b-106">根據預設，它使用「文字」訊息編碼和 UTF-8 文字編碼。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-106">It uses a "Text" message encoding and UTF-8 text encoding by default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cd1b-107">下列範例會示範如何在應用程式組態檔中設定 <xref:System.ServiceModel.BasicHttpBinding>。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-107">The following example shows how to configure the <xref:System.ServiceModel.BasicHttpBinding> in an application configuration file.</span></span>  
  
  
  
 <span data-ttu-id="6cd1b-108">下列範例會示範如何以程式設計的方式設定 <xref:System.ServiceModel.BasicHttpBinding>。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-108">The following example shows how to programmatically configure <xref:System.ServiceModel.BasicHttpBinding>.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/service.cs#1)]
 [!code-vb[S_UEBasicHttpBinding#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/service.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6cd1b-109">初始化 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-109">Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BasicHttpBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BasicHttpBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cd1b-110">初始化 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-110">Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cd1b-111">使用之 <xref:System.ServiceModel.BasicHttpSecurityMode> 的預設值為 <xref:System.ServiceModel.BasicHttpSecurityMode.None>，這個值表示 SOAP 訊息並不安全，而且用戶端也尚未經過驗證。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-111">The default value of <xref:System.ServiceModel.BasicHttpSecurityMode> used is <xref:System.ServiceModel.BasicHttpSecurityMode.None>, which specifies that the SOAP message is not secured and the client is not authenticated.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UEBasicHttpBinding#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/service.cs#2)]
 [!code-vb[S_UEBasicHttpBinding#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/service.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BasicHttpBinding (System.ServiceModel.BasicHttpSecurityMode securityMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ServiceModel.BasicHttpSecurityMode securityMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (securityMode As BasicHttpSecurityMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BasicHttpBinding(System::ServiceModel::BasicHttpSecurityMode securityMode);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.BasicHttpBinding : System.ServiceModel.BasicHttpSecurityMode -&gt; System.ServiceModel.BasicHttpBinding" Usage="new System.ServiceModel.BasicHttpBinding securityMode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="securityMode" Type="System.ServiceModel.BasicHttpSecurityMode" />
      </Parameters>
      <Docs>
        <param name="securityMode"><span data-ttu-id="6cd1b-112"><see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> 的值，指定搭配 SOAP 訊息使用和用戶端的安全性類型。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-112">The value of <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> that specifies the type of security that is used with the SOAP message and for the client.</span></span></param>
        <summary><span data-ttu-id="6cd1b-113">使用由繫結所使用之安全性的指定類型，初始化 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-113">Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class with a specified type of security used by the binding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cd1b-114">使用之 <xref:System.ServiceModel.BasicHttpSecurityMode> 的預設值為 <xref:System.ServiceModel.BasicHttpSecurityMode.None>，這個值表示 SOAP 訊息並不安全，而且用戶端也尚未經過驗證。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-114">The default value of <xref:System.ServiceModel.BasicHttpSecurityMode> used is <xref:System.ServiceModel.BasicHttpSecurityMode.None>, which specifies that the SOAP message is not secured and the client is not authenticated.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UEBasicHttpBinding#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/snippets.cs#3)]
 [!code-vb[S_UEBasicHttpBinding#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/snippets.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BasicHttpBinding (string configurationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string configurationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (configurationName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BasicHttpBinding(System::String ^ configurationName);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.BasicHttpBinding : string -&gt; System.ServiceModel.BasicHttpBinding" Usage="new System.ServiceModel.BasicHttpBinding configurationName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configurationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="configurationName"><span data-ttu-id="6cd1b-115"><see cref="T:System.ServiceModel.Configuration.BasicHttpBindingElement" />的繫結組態名稱。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-115">The binding configuration name for the <see cref="T:System.ServiceModel.Configuration.BasicHttpBindingElement" />.</span></span></param>
        <summary><span data-ttu-id="6cd1b-116">使用由組態名稱指定的繫結，初始化 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-116">Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class with a binding specified by its configuration name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6cd1b-117">這個範例會使用組態名稱 <xref:System.ServiceModel.BasicHttpBinding> 指定的繫結初始化新 `BasicBinding` 類別。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-117">This example initializes a new <xref:System.ServiceModel.BasicHttpBinding> class with a binding specified by the configuration name `BasicBinding`.</span></span> <span data-ttu-id="6cd1b-118">您必須在服務的組態檔中建立繫結區段。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-118">You must create a bindings section in the service's configuration file.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/snippets.cs#5)]
 [!code-vb[S_UEBasicHttpBinding#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/snippets.vb#5)]  
  
 <span data-ttu-id="6cd1b-119">然後在呼叫 <xref:System.ServiceModel.BasicHttpBinding> 建構函式時，指定繫結組態的名稱。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-119">Then the name of the binding configuration is specified in the call to the <xref:System.ServiceModel.BasicHttpBinding> constructor.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/snippets.cs#4)]
 [!code-vb[S_UEBasicHttpBinding#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uebasichttpbinding/vb/snippets.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><span data-ttu-id="6cd1b-120">找不到組態名稱為 <paramref name="configurationName" /> 的繫結。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-120">The binding with the configuration name <paramref name="configurationName" /> was not found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AllowCookies">
      <MemberSignature Language="C#" Value="public bool AllowCookies { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowCookies" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.AllowCookies" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowCookies As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowCookies { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowCookies : bool with get, set" Usage="System.ServiceModel.BasicHttpBinding.AllowCookies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-121">取得或設定值，這個值會指出用戶端是否接受 Cookie 並依未來要求傳播 Cookie。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-121">Gets or sets a value that indicates whether the client accepts cookies and propagates them on future requests.</span></span></summary>
        <value><span data-ttu-id="6cd1b-122">如果允許 Cookie，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-122"><see langword="true" /> if cookies are allowed; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cd1b-123">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-123">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="6cd1b-124">提供這個屬性是為了方便與使用 Cookie 的 ASMX Web 服務互動。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-124">This property is provided as a convenience for interacting with ASMX Web services that use cookies.</span></span> <span data-ttu-id="6cd1b-125">用戶端將屬性設定為 `true`以接受 Cookie 後，從伺服器傳回的 Cookie 會自動複製到該服務未來所有的用戶端要求。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-125">When cookies are accepted by the client by setting the property to `true`, cookies returned from the server are automatically copied to all future client requests to that service.</span></span>

## Examples

<span data-ttu-id="6cd1b-126">下列範例會設定這個屬性，指出，從伺服器的所有 cookie 應該都複製到未來的用戶端要求：</span><span class="sxs-lookup"><span data-stu-id="6cd1b-126">The following example sets this property to indicate that all cookies from the server should be copied to future client requests:</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
binding.AllowCookies = true;
```

<span data-ttu-id="6cd1b-127">這個屬性的值也可以在組態檔中設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-127">The value of this property can also be set in the configuration file.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildChannelFactory&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt; BuildChannelFactory&lt;TChannel&gt; (System.ServiceModel.Channels.BindingParameterCollection parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.IChannelFactory`1&lt;!!TChannel&gt; BuildChannelFactory&lt;TChannel&gt;(class System.ServiceModel.Channels.BindingParameterCollection parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BuildChannelFactory(Of TChannel) (parameters As BindingParameterCollection) As IChannelFactory(Of TChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TChannel&gt;&#xA; override System::ServiceModel::Channels::IChannelFactory&lt;TChannel&gt; ^ BuildChannelFactory(System::ServiceModel::Channels::BindingParameterCollection ^ parameters);" />
      <MemberSignature Language="F#" Value="override this.BuildChannelFactory : System.ServiceModel.Channels.BindingParameterCollection -&gt; System.ServiceModel.Channels.IChannelFactory&lt;'Channel&gt;" Usage="basicHttpBinding.BuildChannelFactory parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="parameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel"><span data-ttu-id="6cd1b-128">通道處理站所產生之通道的類型。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-128">The type of channel the channel factory produces.</span></span></typeparam>
        <param name="parameters"><span data-ttu-id="6cd1b-129">指定所建置之通道處理站的需求。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-129">Specifies the requirements for the channel factory built.</span></span></param>
        <summary><span data-ttu-id="6cd1b-130">在用戶端上建置通道處理站堆疊，此堆疊會建立指定的通道型別，並滿足繫結參數集合所指定的功能。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-130">Builds the channel factory stack on the client that creates a specified type of channel and that satisfies the features specified by a collection of binding parameters.</span></span></summary>
        <returns><span data-ttu-id="6cd1b-131">屬於 <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> 型別的 <paramref name="TChannel" />，可滿足集合所指定的功能。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-131">An <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> that satisfies the features specified by the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BypassProxyOnLocal">
      <MemberSignature Language="C#" Value="public bool BypassProxyOnLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BypassProxyOnLocal" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.BypassProxyOnLocal" />
      <MemberSignature Language="VB.NET" Value="Public Property BypassProxyOnLocal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BypassProxyOnLocal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BypassProxyOnLocal : bool with get, set" Usage="System.ServiceModel.BasicHttpBinding.BypassProxyOnLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-132">取得或設定值，這個值會指出是否對本機位址略過 Proxy 伺服器。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-132">Gets or sets a value that indicates whether to bypass the proxy server for local addresses.</span></span></summary>
        <value><span data-ttu-id="6cd1b-133">若要對本機位址略過 Proxy 伺服器，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-133"><see langword="true" /> to bypass the proxy server for local addresses; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cd1b-134">預設值為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-134">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="6cd1b-135">如果網際網路資源有本機位址，則此資源為本機資源。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-135">An Internet resource is local if it has a local address.</span></span> <span data-ttu-id="6cd1b-136">本機位址是指位於同一部電腦、 區域 LAN 或內部網路上識別，語法上沒有句號 (\.) 與 Uri`http://webserver/`和`http://localhost/`。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-136">A local address is one that is on same computer, the local LAN or intranet and is identified, syntactically, by the lack of a period (\.) as in the URIs `http://webserver/` and `http://localhost/`.</span></span>

<span data-ttu-id="6cd1b-137">設定 BypassProxyOnLocal 屬性會決定端點是否已設有<xref:System.ServiceModel.BasicHttpBinding>存取本機資源時使用 proxy 伺服器。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-137">Setting the BypassProxyOnLocal property determines whether endpoints configured with the <xref:System.ServiceModel.BasicHttpBinding> use the proxy server when accessing local resources.</span></span>

<span data-ttu-id="6cd1b-138">如果 BypassProxyOnLocal `true`，對於本機網際網路資源的要求不使用 proxy 伺服器。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-138">If BypassProxyOnLocal is `true`, requests to local Internet resources do not use the proxy server.</span></span> <span data-ttu-id="6cd1b-139">當這個屬性設定為 `localhost` 時，如果想要讓用戶端在與相同電腦上的服務進行交談時通過 Proxy，請使用主機名稱 (而非 `true`)。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-139">Use the host name (rather than `localhost`) if you want clients to go through a proxy when talking to services on the same machine when this property is set to `true`.</span></span>

<span data-ttu-id="6cd1b-140">BypassProxyOnLocal 時`false`，所有的網際網路要求非 localhost 都會通過 proxy 伺服器。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-140">When BypassProxyOnLocal is `false`, all Internet requests to non-localhost URIs are made through the proxy server.</span></span> <span data-ttu-id="6cd1b-141">使用 localhost 的要求 uri 不會使用 proxy 伺服器，不論 BypassProxyOnLocal 設定為何。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-141">Requests to URIs with localhost will not use the proxy server regardless of the BypassProxyOnLocal setting.</span></span>
  
## Examples

<span data-ttu-id="6cd1b-142">下列範例會將這個屬性設為表示應略過本機資源的 Proxy。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-142">The following example sets this property to indicate that the proxy should be bypassed for local resources.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
binding.BypassProxyOnLocal = true;
```

<span data-ttu-id="6cd1b-143">這個屬性的值也可以在組態檔中設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-143">The value of this property can also be set in the configuration file.</span></span>

```xml
<configuration>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="Binding1" 
                 bypassProxyOnLocal="true">
          <security mode="None" />
        </binding>
      </basicHttpBinding>
    </bindings>
  </system.serviceModel>

</configuration>
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBindingElements">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.CreateBindingElements" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateBindingElements () As BindingElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ServiceModel::Channels::BindingElementCollection ^ CreateBindingElements();" />
      <MemberSignature Language="F#" Value="override this.CreateBindingElements : unit -&gt; System.ServiceModel.Channels.BindingElementCollection" Usage="basicHttpBinding.CreateBindingElements " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.BindingElementCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cd1b-144">建立並傳回包含在目前繫結中繫結項目的已排序集合。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-144">Creates and returns an ordered collection of binding elements contained in the current binding.</span></span></summary>
        <returns><span data-ttu-id="6cd1b-145"><see cref="T:System.ServiceModel.Channels.BindingElementCollection" />，其中包含 <see cref="T:System.ServiceModel.BasicHttpBinding" /> 所描述之繫結項目的已排序堆疊。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-145">The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the ordered stack of binding elements described by the <see cref="T:System.ServiceModel.BasicHttpBinding" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cd1b-146">繫結項目的順序很重要。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-146">The order of the binding elements is important.</span></span> <span data-ttu-id="6cd1b-147">它會反映建構及堆疊通訊協定和傳輸通道的順序。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-147">It reflects the order in which the protocol and transport channels are constructed and stacked.</span></span> <span data-ttu-id="6cd1b-148">這個繫結項目的集合是新的集合，可以修改後用於建立 <xref:System.ServiceModel.Channels.CustomBinding>。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-148">This collection of binding elements is a new collection and can be modified and then used to create a <xref:System.ServiceModel.Channels.CustomBinding>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cd1b-149">下列範例會在目前繫結中建立繫結項目的已排序集合。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-149">The following example creates an ordered collection of the binding elements in the current binding.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#26](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/client.cs#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableHttpCookieContainer">
      <MemberSignature Language="C#" Value="public bool EnableHttpCookieContainer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHttpCookieContainer" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.EnableHttpCookieContainer" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableHttpCookieContainer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableHttpCookieContainer { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableHttpCookieContainer : bool with get, set" Usage="System.ServiceModel.BasicHttpBinding.EnableHttpCookieContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This property is obsolete. To enable Http CookieContainer, use the AllowCookies property instead.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-150">取得或設定值，指出是否已啟用 HTTP Cookie 容器。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-150">Gets or sets a value that indicates whether HTTP cookie container is enabled.</span></span></summary>
        <value><span data-ttu-id="6cd1b-151">如果已啟用 HTTP Cookie 容器，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-151"><see langword="true" /> if HTTP cookie container is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnvelopeVersion">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EnvelopeVersion EnvelopeVersion" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.EnvelopeVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EnvelopeVersion As EnvelopeVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EnvelopeVersion ^ EnvelopeVersion { System::ServiceModel::EnvelopeVersion ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnvelopeVersion : System.ServiceModel.EnvelopeVersion" Usage="System.ServiceModel.BasicHttpBinding.EnvelopeVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EnvelopeVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-152">取得 SOAP 的版本，這個版本是用於由此繫結處理的訊息。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-152">Gets the version of SOAP that is used for messages that are processed by this binding.</span></span></summary>
        <value><span data-ttu-id="6cd1b-153">搭配此繫結使用的 <see cref="T:System.ServiceModel.EnvelopeVersion" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-153">The value of the <see cref="T:System.ServiceModel.EnvelopeVersion" /> that is used with this binding.</span></span> <span data-ttu-id="6cd1b-154">該值一律為 SOAP 1.1。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-154">The value is always SOAP 1.1.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks  

<span data-ttu-id="6cd1b-155">SOAP 1.1 是唯一可搭配此繫結使用的值。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-155">SOAP 1.1 is the only value that can be used with this binding.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostNameComparisonMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.HostNameComparisonMode HostNameComparisonMode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.HostNameComparisonMode" />
      <MemberSignature Language="VB.NET" Value="Public Property HostNameComparisonMode As HostNameComparisonMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::HostNameComparisonMode HostNameComparisonMode { System::ServiceModel::HostNameComparisonMode get(); void set(System::ServiceModel::HostNameComparisonMode value); };" />
      <MemberSignature Language="F#" Value="member this.HostNameComparisonMode : System.ServiceModel.HostNameComparisonMode with get, set" Usage="System.ServiceModel.BasicHttpBinding.HostNameComparisonMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.HostNameComparisonMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-156">取得或設定值，這個值會指出在比對 URI 時此主機名稱是否會用來取用服務。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-156">Gets or sets a value that indicates whether the hostname is used to reach the service when matching the URI.</span></span></summary>
        <value><span data-ttu-id="6cd1b-157"><see cref="T:System.ServiceModel.HostNameComparisonMode" /> 值，指出在比對 URI 時此主機名稱是否會用來取用服務。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-157">The <see cref="T:System.ServiceModel.HostNameComparisonMode" /> value that indicates whether the hostname is used to reach the service when matching on the URI.</span></span> <span data-ttu-id="6cd1b-158">預設值為 <see cref="F:System.ServiceModel.HostNameComparisonMode.StrongWildcard" />，表示比對時忽略主機名稱。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-158">The default value is <see cref="F:System.ServiceModel.HostNameComparisonMode.StrongWildcard" />, which ignores the hostname in the match.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples

<span data-ttu-id="6cd1b-159">下列範例會設定這個屬性，以表示需要完全相符。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-159">The following example sets this property to indicate that an exact match is required.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
binding.HostNameComparisonMode = HostNameComparisonMode.Exact;
```

<span data-ttu-id="6cd1b-160">這個屬性的值也可以在組態檔中設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-160">The value of this property can also be set in the configuration file.</span></span>

```xml
<configuration>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="Binding1"
                 hostNameComparisonMode ="Exact">
          <security mode="None" />
        </binding>
      </basicHttpBinding>
    </bindings>

  </system.serviceModel>

</configuration>
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxBufferPoolSize">
      <MemberSignature Language="C#" Value="public long MaxBufferPoolSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxBufferPoolSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.MaxBufferPoolSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxBufferPoolSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxBufferPoolSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxBufferPoolSize : int64 with get, set" Usage="System.ServiceModel.BasicHttpBinding.MaxBufferPoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(524288)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-161">取得或設定配置供訊息緩衝區管理員使用的最大記憶體量 (以位元組為單位)，其中訊息緩衝區會從通道接收訊息。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-161">Gets or sets the maximum amount of memory, in bytes,  that is allocated for use by the manager of the message buffers that receive messages from the channel.</span></span></summary>
        <value><span data-ttu-id="6cd1b-162">可供訊息緩衝區管理員使用的最大記憶體量，單位為位元組。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-162">The maximum amount of memory, in bytes, available for use by the message buffer manager.</span></span> <span data-ttu-id="6cd1b-163">預設值為 524288 (0x80000) 位元組。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-163">The default value is 524288 (0x80000) bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="6cd1b-164"><xref:System.ServiceModel.Channels.BufferManager> 利用緩衝區集區將使用緩衝區的成本降至最低。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-164">The <xref:System.ServiceModel.Channels.BufferManager> minimizes the cost of using buffers by using a buffer pool.</span></span> <span data-ttu-id="6cd1b-165">當訊息從通道送出時，服務將需要緩衝區來處理訊息。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-165">Buffers are required to process messages by the service when they come out of the channel.</span></span> <span data-ttu-id="6cd1b-166">如果緩衝區集區中沒有足夠的記憶體可以處理訊息負載，<xref:System.ServiceModel.Channels.BufferManager> 就必須從 CLR 堆積配置額外的記憶體，進而增加記憶體回收負荷。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-166">If there is not sufficient memory in the buffer pool to process the message load, the <xref:System.ServiceModel.Channels.BufferManager> must allocate additional memory from the CLR heap, which increases the garbage collection overhead.</span></span> <span data-ttu-id="6cd1b-167">從 CLR 記憶體回收堆積的大量配置是的表示緩衝區集區大小太小，而且可以藉由增加 MaxBufferPoolSize 限制較大的配置改善效能。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-167">Extensive allocation from the CLR garbage heap is an indication that the buffer pool size is too small and that performance can be improved with a larger allocation by increasing the MaxBufferPoolSize limit.</span></span>

## Examples

<span data-ttu-id="6cd1b-168">下列範例會將此屬性設為預設值的兩倍。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-168">The following example sets this property to twice the default value.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
// Use double the default value
binding.MaxBufferPoolSize = 0x80000 * 2;
```

<span data-ttu-id="6cd1b-169">這個屬性的值也可以在組態檔中設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-169">The value of this property can also be set in the configuration file.</span></span>

```xml
<configuration>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="Binding1">

          <!-- set pool size to double default of 0x80000 -->
          maxBufferPoolSize = 0x100000

          <security mode="None" />
        </binding>
      </basicHttpBinding>
    </bindings>

  </system.serviceModel>

</configuration>
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxBufferSize">
      <MemberSignature Language="C#" Value="public int MaxBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.MaxBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxBufferSize : int with get, set" Usage="System.ServiceModel.BasicHttpBinding.MaxBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(65536)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-170">取得或設定自通道接收訊息的緩衝區大小上限 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-170">Gets or sets the maximum size, in bytes, for a buffer that receives messages from the channel.</span></span></summary>
        <value><span data-ttu-id="6cd1b-171">儲存訊息之緩衝區的大小上限 (以位元組為單位)。在為此繫結設定的端點處理訊息時，可以將訊息儲存在緩衝區中。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-171">The maximum size, in bytes, of a buffer that stores messages while they are processed for an endpoint configured with this binding.</span></span> <span data-ttu-id="6cd1b-172">預設值為 65,536 位元組。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-172">The default value is 65,536 bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="6cd1b-173">如果在處理時緩衝區中沒有足夠的記憶體可以儲存訊息，就必須從 CLR 堆積配置額外的記憶體，因而增加記憶體回收負荷。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-173">If there is not sufficient memory in the buffer to store the message while it is processed, more memory must be allocated from the CLR heap, which increases the garbage collection overhead.</span></span> <span data-ttu-id="6cd1b-174">從 CLR 記憶體回收堆積所產生的大量配置表示緩衝區集區太小，而提供較大的配置便可改善效能。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-174">Extensive allocation from the CLR garbage heap is an indication that the message buffer size is too small and that performance can be improved with a larger allocation.</span></span>

<span data-ttu-id="6cd1b-175">MaxBufferSize 屬性，以及其重要性的值會有所不同的訊息是否正在緩衝還是串流方式透過它所收到之通道上：</span><span class="sxs-lookup"><span data-stu-id="6cd1b-175">The value of the MaxBufferSize property and its significance is different depending on whether the messages are being buffered or streamed on the channel through which they are being received:</span></span>

<span data-ttu-id="6cd1b-176">如果是經過緩衝處理的傳輸 (<xref:System.ServiceModel.BasicHttpBinding.TransferMode> 設定為 <xref:System.ServiceModel.TransferMode.Buffered>)，</span><span class="sxs-lookup"><span data-stu-id="6cd1b-176">For buffered transports, (<xref:System.ServiceModel.BasicHttpBinding.TransferMode> set to <xref:System.ServiceModel.TransferMode.Buffered>).</span></span> <span data-ttu-id="6cd1b-177">此值一律等於 <xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize> 所指定的值。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-177">This value is always equal to that specified by the <xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize>.</span></span>

<span data-ttu-id="6cd1b-178">如果是經過資料流處理的傳輸 (<xref:System.ServiceModel.BasicHttpBinding.TransferMode> 設定為 <xref:System.ServiceModel.TransferMode.Streamed>)，則只有 SOAP 標頭必須經過緩衝才能產生訊息。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-178">For streamed transports, (<xref:System.ServiceModel.BasicHttpBinding.TransferMode> set to <xref:System.ServiceModel.TransferMode.Streamed>), only the SOAP headers must be buffered to generate the message.</span></span> <span data-ttu-id="6cd1b-179">本文可視需要以資料流處理。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-179">The body can be streamed in on-demand.</span></span> <span data-ttu-id="6cd1b-180">在此情況下，MaxBufferSize 小於或等於<xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize>，其中<xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize>限制整個訊息 （標頭和本文） 的大小和 MaxBufferSize 限制只有 SOAP 標頭的大小。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-180">In this case, MaxBufferSize is less than or equal to <xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize>, where <xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize> bounds the size of the overall message (headers and body) and MaxBufferSize bounds only the size of the SOAP headers.</span></span>

<span data-ttu-id="6cd1b-181">此處針對緩衝區大小所設的限制是為了讓訊息交換的效能最佳化。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-181">The limitations on buffer size set here are for optimizing the performance of message exchanges.</span></span> <span data-ttu-id="6cd1b-182">如果訊息超出設定的緩衝區上限值，訊息不會被捨棄。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-182">If a message exceeds the maximum value set for the buffer, it is not dropped.</span></span> <span data-ttu-id="6cd1b-183">相反地，系統會從 CLR 堆積要求更多記憶體，進而比使用緩衝區造成更多記憶體回收負荷。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-183">Instead, more memory is requested from the CLR heap and this incurs more garbage collection overhead than using the buffers.</span></span>

> [!NOTE]
> <span data-ttu-id="6cd1b-184">MaxBufferSize 和 MaxReceivedMessageSize 的設定是本機行為設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-184">The settings for MaxBufferSize and MaxReceivedMessageSize, are local behavioral settings.</span></span> <span data-ttu-id="6cd1b-185">表示這些設定不會以中繼資料的方式傳送到其他端點。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-185">This means that they are not transmitted to other endpoints in metadata.</span></span> <span data-ttu-id="6cd1b-186">當您從中繼資料產生服務的 Proxy 時，如果訊息大小上限為 2GB，則此 Proxy 的預設值仍為 64K，</span><span class="sxs-lookup"><span data-stu-id="6cd1b-186">If you generate a proxy to a service with a maximum message size of 2GB from metadata, the proxy still has a default value of 64K.</span></span> <span data-ttu-id="6cd1b-187">讓訊息和訊息緩衝區大小適當限制的控制落在本機系統管理員的管轄範圍內。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-187">This leaves control of the appropriate bounds for message and message buffer size in the scope of local administrators.</span></span>
  
## Examples


<span data-ttu-id="6cd1b-188">下列範例會設定**MaxBufferSize**為 1,000,000 個位元組。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-188">The following example sets **MaxBufferSize** to 1,000,000 bytes.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
            
// set to one million
binding.MaxBufferSize = 1000000;
```

<span data-ttu-id="6cd1b-189">這個屬性的值也可以在組態檔中設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-189">The value of this property can also be set in the configuration file.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxReceivedMessageSize">
      <MemberSignature Language="C#" Value="public long MaxReceivedMessageSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxReceivedMessageSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxReceivedMessageSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxReceivedMessageSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxReceivedMessageSize : int64 with get, set" Usage="System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(65536)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-190">取得或設定可在使用此繫結所設定之通道上接收的訊息大小上限 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-190">Gets or sets the maximum size, in bytes, for a message that can be received on a channel configured with this binding.</span></span></summary>
        <value><span data-ttu-id="6cd1b-191">由此繫結處理之訊息的大小上限，單位為位元組。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-191">The maximum size, in bytes, for a message that is processed by the binding.</span></span> <span data-ttu-id="6cd1b-192">預設值為 65,536 位元組。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-192">The default value is 65,536 bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="6cd1b-193">可以在網路使用 BasicHttpBinding 的服務所接收的訊息大小受限於配置給每個訊息的記憶體數量。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-193">The size of the messages that can be received on the wire by services using the BasicHttpBinding is bounded by the amount of memory allocated for each message.</span></span> <span data-ttu-id="6cd1b-194">這項關於訊息大小的限制是為了防止受到 DoS 攻擊。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-194">This bound on message size is intended to limit exposure to DoS-style attacks.</span></span>

<span data-ttu-id="6cd1b-195"><xref:System.ServiceModel.BasicHttpBinding.MaxBufferSize><xref:System.ServiceModel.BasicHttpBinding>上也有  屬性：</span><span class="sxs-lookup"><span data-stu-id="6cd1b-195">There is also a <xref:System.ServiceModel.BasicHttpBinding.MaxBufferSize> property on the <xref:System.ServiceModel.BasicHttpBinding>:</span></span>

<span data-ttu-id="6cd1b-196">如果是經過緩衝處理的傳輸 (<xref:System.ServiceModel.BasicHttpBinding.TransferMode> 設定為 <xref:System.ServiceModel.TransferMode.Buffered>)，</span><span class="sxs-lookup"><span data-stu-id="6cd1b-196">For buffered transports, (<xref:System.ServiceModel.BasicHttpBinding.TransferMode> set to <xref:System.ServiceModel.TransferMode.Buffered>).</span></span> <span data-ttu-id="6cd1b-197">這個值會一律等於指定的 MaxReceivedMessageSize。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-197">This value is always equal to that specified by the MaxReceivedMessageSize.</span></span>

<span data-ttu-id="6cd1b-198">如果是經過資料流處理的傳輸 (<xref:System.ServiceModel.BasicHttpBinding.TransferMode> 設定為 <xref:System.ServiceModel.TransferMode.Streamed>)，則只有 SOAP 標頭必須經過緩衝才能產生訊息。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-198">For streamed transports (<xref:System.ServiceModel.BasicHttpBinding.TransferMode> set to <xref:System.ServiceModel.TransferMode.Streamed>), only the SOAP headers must be buffered to generate the message.</span></span> <span data-ttu-id="6cd1b-199">本文可視需要以資料流處理。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-199">The body can be streamed in on-demand.</span></span> <span data-ttu-id="6cd1b-200">在此情況下，<xref:System.ServiceModel.BasicHttpBinding.MaxBufferSize>小於或等於 MaxReceivedMessageSize，其中的 MaxReceivedMessageSize 限制整個訊息 （標頭和本文） 的大小和<xref:System.ServiceModel.BasicHttpBinding.MaxBufferSize>限制 SOAP 標頭的大小。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-200">In this case, <xref:System.ServiceModel.BasicHttpBinding.MaxBufferSize> is less than or equal to MaxReceivedMessageSize, where MaxReceivedMessageSize bounds the size of the overall message (headers and body) and <xref:System.ServiceModel.BasicHttpBinding.MaxBufferSize> bounds the size of the SOAP headers.</span></span>

## Examples

<span data-ttu-id="6cd1b-201">下列範例會設定為 1,000,000 個位元組的 MaxReceivedMessageSize。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-201">The following example sets MaxReceivedMessageSize to 1,000,000 bytes.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();

// Use double the default value
binding.MaxReceivedMessageSize = 65536 * 2;
```

<span data-ttu-id="6cd1b-202">這個屬性的值也可以在組態檔中設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-202">The value of this property can also be set in the configuration file.</span></span>

```xml
<configuration>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="Binding1"
                 maxReceivedMessageSize = "1000000">
          <security mode="None" />
        </binding>
      </basicHttpBinding>
    </bindings>

  </system.serviceModel>

</configuration>
```

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6cd1b-203">這個值小於零。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-203">The value is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MessageEncoding">
      <MemberSignature Language="C#" Value="public System.ServiceModel.WSMessageEncoding MessageEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.WSMessageEncoding MessageEncoding" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.MessageEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageEncoding As WSMessageEncoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::WSMessageEncoding MessageEncoding { System::ServiceModel::WSMessageEncoding get(); void set(System::ServiceModel::WSMessageEncoding value); };" />
      <MemberSignature Language="F#" Value="member this.MessageEncoding : System.ServiceModel.WSMessageEncoding with get, set" Usage="System.ServiceModel.BasicHttpBinding.MessageEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.WSMessageEncoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-204">取得或設定 MTOM 或 Text 是否要用來編碼 SOAP 訊息。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-204">Gets or sets whether MTOM or Text is used to encode SOAP messages.</span></span></summary>
        <value><span data-ttu-id="6cd1b-205"><see cref="T:System.ServiceModel.WSMessageEncoding" /> 的值，指出 MTOM 或 Text/XML 是否要用來編碼 SOAP 訊息。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-205">The value of <see cref="T:System.ServiceModel.WSMessageEncoding" /> that indicates whether MTOM or Text/XML is used to encode SOAP messages.</span></span> <span data-ttu-id="6cd1b-206">預設值為 <see cref="F:System.ServiceModel.WSMessageEncoding.Text" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-206">The default value is <see cref="F:System.ServiceModel.WSMessageEncoding.Text" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6cd1b-207">下列範例會將 MessageEncoding 設定為 Text。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-207">The following example sets MessageEncoding to Text.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#19](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/client.cs#19)]  
  
 <span data-ttu-id="6cd1b-208">這個屬性的值也可以在組態檔中設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-208">The value of this property can also be set in the configuration file.</span></span>  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProxyAddress">
      <MemberSignature Language="C#" Value="public Uri ProxyAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri ProxyAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.ProxyAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property ProxyAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ ProxyAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProxyAddress : Uri with get, set" Usage="System.ServiceModel.BasicHttpBinding.ProxyAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.UriTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-209">取得或設定 HTTP Proxy 的 URI 位址。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-209">Gets or sets the URI address of the HTTP proxy.</span></span></summary>
        <value><span data-ttu-id="6cd1b-210">當做 HTTP Proxy 之位址使用的 <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-210">A <see cref="T:System.Uri" /> that serves as the address of the HTTP proxy.</span></span> <span data-ttu-id="6cd1b-211">預設值為 null。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-211">The default value is null.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="6cd1b-212">如果<xref:System.ServiceModel.BasicHttpBinding.UseDefaultWebProxy>設為`true`會使用預設位址，則會忽略 ProxyAddress 集的值。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-212">If the <xref:System.ServiceModel.BasicHttpBinding.UseDefaultWebProxy> is set to `true`, the default address is used and the value of the ProxyAddress set is ignored.</span></span>

## Examples

<span data-ttu-id="6cd1b-213">下列範例會設定 ProxyAddress 應用程式設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-213">The following example sets ProxyAddress to application settings.</span></span>

```csharp
// Get base address from app settings in configuration
Uri baseAddress = new Uri(ConfigurationManager.AppSettings["baseAddress"]);

BasicHttpBinding binding = new BasicHttpBinding();

binding.ProxyAddress = baseAddress;
```

<span data-ttu-id="6cd1b-214">這個屬性的值也可以在組態檔中設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-214">The value of this property can also be set in the configuration file.</span></span>

```xml
<configuration>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="Binding1"
                 proxyAddress = "http://myProxy">
          <security mode="None" />
        </binding>
      </basicHttpBinding>
    </bindings>

  </system.serviceModel>

</configuration>
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderQuotas">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDictionaryReaderQuotas ReaderQuotas" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.ReaderQuotas" />
      <MemberSignature Language="VB.NET" Value="Public Property ReaderQuotas As XmlDictionaryReaderQuotas" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlDictionaryReaderQuotas ^ ReaderQuotas { System::Xml::XmlDictionaryReaderQuotas ^ get(); void set(System::Xml::XmlDictionaryReaderQuotas ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ReaderQuotas : System.Xml.XmlDictionaryReaderQuotas with get, set" Usage="System.ServiceModel.BasicHttpBinding.ReaderQuotas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReaderQuotas</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-215">取得或設定 SOAP 訊息複雜性的條件約束，而這些條件約束可由以此繫結所設定的端點處理。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-215">Gets or sets constraints on the complexity of SOAP messages that can be processed by endpoints configured with this binding.</span></span></summary>
        <value><span data-ttu-id="6cd1b-216">指定複雜性條件約束的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-216">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> that specifies the complexity constraints.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="6cd1b-217">複雜性條件約束可以防止受到阻絕服務 (DOS) 攻擊，這種攻擊會嘗試使用訊息的複雜性來困住端點處理資源。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-217">The complexity constraints provide protection from denial of service (DOS) attacks that attempt to use message complexity to tie up endpoint processing resources.</span></span> <span data-ttu-id="6cd1b-218">其他複雜性條件約束包含最大項目深度和訊息內最大字串內容長度等項目。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-218">Other complexity constraints include items such as a maximum element depth and a maximum length for string content within the message.</span></span>

## Examples

<span data-ttu-id="6cd1b-219">下列範例會設定 ReaderQuotas 應用程式設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-219">The following example sets ReaderQuotas to application settings.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
XmlDictionaryReaderQuotas readerQuotas = new XmlDictionaryReaderQuotas();
readerQuotas.MaxArrayLength = 25 * 1024;
        
binding.ReaderQuotas = readerQuotas;
```

<span data-ttu-id="6cd1b-220">這個屬性的值也可以在組態檔中設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-220">The value of this property can also be set in the configuration file.</span></span>

```xml
<configuration>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="Binding1">
          <readerQuotas maxBytesPerRead ="1000" 
                        maxDepth="100"/>

          <security mode="None" />
        </binding>
      </basicHttpBinding>
    </bindings>

  </system.serviceModel>

</configuration>
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scheme">
      <MemberSignature Language="C#" Value="public override string Scheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scheme" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.Scheme" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Scheme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Scheme { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheme : string" Usage="System.ServiceModel.BasicHttpBinding.Scheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-221">取得使用這項繫結所設定之通道與接聽程式的 URI 傳輸配置。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-221">Gets the URI transport scheme for the channels and listeners that are configured with this binding.</span></span></summary>
        <value><span data-ttu-id="6cd1b-222">如果傳輸繫結項目中的安全性模式設為 <see cref="F:System.ServiceModel.BasicHttpSecurityMode.Transport" /> 或 <see cref="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredential" />，則為 "https"，否則為 "http"。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-222">"https" if the security mode in the transport binding element is set to <see cref="F:System.ServiceModel.BasicHttpSecurityMode.Transport" /> or <see cref="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredential" />; "http" otherwise.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples

<span data-ttu-id="6cd1b-223">下列範例會取得目前配置。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-223">The following example gets the current Scheme.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
string thisScheme = binding.Scheme;
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Security">
      <MemberSignature Language="C#" Value="public System.ServiceModel.BasicHttpSecurity Security { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.BasicHttpSecurity Security" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.Security" />
      <MemberSignature Language="VB.NET" Value="Public Property Security As BasicHttpSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::BasicHttpSecurity ^ Security { System::ServiceModel::BasicHttpSecurity ^ get(); void set(System::ServiceModel::BasicHttpSecurity ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Security : System.ServiceModel.BasicHttpSecurity with get, set" Usage="System.ServiceModel.BasicHttpBinding.Security" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.BasicHttpSecurity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-224">取得要搭配此繫結使用的安全性類型。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-224">Gets the type of security used with this binding.</span></span></summary>
        <value><span data-ttu-id="6cd1b-225">搭配此繫結使用的 <see cref="T:System.ServiceModel.BasicHttpSecurity" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-225">The <see cref="T:System.ServiceModel.BasicHttpSecurity" /> that is used with this binding.</span></span> <span data-ttu-id="6cd1b-226">預設值為 <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-226">The default value is <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cd1b-227">根據預設，SOAP 訊息並不安全，而且用戶端也尚未經過驗證。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-227">By default, the SOAP message is not secured and the client is not authenticated.</span></span> <span data-ttu-id="6cd1b-228">若要使用非預設類型的安全性，請使用 <xref:System.ServiceModel.BasicHttpBinding.%23ctor%28System.ServiceModel.BasicHttpSecurityMode%29> 建構函式。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-228">To use a non-default type of security, use the <xref:System.ServiceModel.BasicHttpBinding.%23ctor%28System.ServiceModel.BasicHttpSecurityMode%29> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cd1b-229">下列範例會取得 `Security` 屬性。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-229">The following example gets the `Security` property.</span></span>  
  
 [!code-csharp[S_UEBasicHttpBinding#23](~/samples/snippets/csharp/VS_Snippets_CFX/s_uebasichttpbinding/cs/client.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeEnableHttpCookieContainer">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeEnableHttpCookieContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeEnableHttpCookieContainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.ShouldSerializeEnableHttpCookieContainer" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeEnableHttpCookieContainer () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeEnableHttpCookieContainer();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeEnableHttpCookieContainer : unit -&gt; bool" Usage="basicHttpBinding.ShouldSerializeEnableHttpCookieContainer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cd1b-230">表示 http cookie 容器是否應該啟用序列化。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-230">Indicates whether the http cookie container should enable the serialization.</span></span></summary>
        <returns><span data-ttu-id="6cd1b-231">如果 HTTP Cookie 容器應該啟用序列化則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-231"><see langword="true" /> if the http cookie container should enable the serialization; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeReaderQuotas">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeReaderQuotas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeReaderQuotas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.ShouldSerializeReaderQuotas" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeReaderQuotas () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeReaderQuotas();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeReaderQuotas : unit -&gt; bool" Usage="basicHttpBinding.ShouldSerializeReaderQuotas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cd1b-232">傳回是否應序列化針對 SOAP 訊息結構複雜度所設立的約束條件值。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-232">Returns whether the constraint values placed on the complexity of SOAP message structure should be serialized.</span></span></summary>
        <returns><span data-ttu-id="6cd1b-233">如果讀取器配額應該序列化，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-233"><see langword="true" /> if reader quotas should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSecurity">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeSecurity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.ShouldSerializeSecurity" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeSecurity () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeSecurity();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeSecurity : unit -&gt; bool" Usage="basicHttpBinding.ShouldSerializeSecurity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cd1b-234">根據序列化是否已經發生 (例如位於訊息層級或傳輸層級)，傳回是否應序列化安全性設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-234">Returns whether security settings should be serialized based upon whether serialization already occurs, for example at the message or transport level.</span></span></summary>
        <returns><span data-ttu-id="6cd1b-235">如果安全性應該序列化，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-235"><see langword="true" /> if security should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTextEncoding">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTextEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTextEncoding() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.BasicHttpBinding.ShouldSerializeTextEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTextEncoding () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTextEncoding();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTextEncoding : unit -&gt; bool" Usage="basicHttpBinding.ShouldSerializeTextEncoding " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cd1b-236">傳回是否應序列化文字編碼方式的設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-236">Returns whether settings for text encoding should be serialized.</span></span></summary>
        <returns><span data-ttu-id="6cd1b-237">如果文字編碼方式應該序列化，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-237"><see langword="true" /> if text encoding should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
      <MemberSignature Language="C#" Value="bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ReceiveSynchronously As Boolean Implements IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ServiceModel::Channels::IBindingRuntimePreferences::ReceiveSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-238">取得值，這個值會指出要以同步或非同步方式處理傳入要求。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-238">Gets a value that indicates whether incoming requests are handled synchronously or asynchronously.</span></span></summary>
        <value><span data-ttu-id="6cd1b-239">一定是 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-239">Always <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples

<span data-ttu-id="6cd1b-240">此範例會取得 ReceiveSynchronously 值。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-240">This example gets the ReceiveSynchronously value.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
IBindingRuntimePreferences s = (binding as IBindingRuntimePreferences);
bool receiveSynchronously = s.ReceiveSynchronously;
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding TextEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding TextEncoding" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.TextEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property TextEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ TextEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextEncoding : System.Text.Encoding with get, set" Usage="System.ServiceModel.BasicHttpBinding.TextEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ServiceModel.Configuration.EncodingConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-241">取得或設定用於訊息文字的字元編碼。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-241">Gets or sets the character encoding that is used for the message text.</span></span></summary>
        <value><span data-ttu-id="6cd1b-242"><see cref="T:System.Text.Encoding" />，表示所使用的字元編碼。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-242">The <see cref="T:System.Text.Encoding" /> that indicates the character encoding that is used.</span></span> <span data-ttu-id="6cd1b-243">預設為 <see cref="T:System.Text.UTF8Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-243">The default is <see cref="T:System.Text.UTF8Encoding" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples

<span data-ttu-id="6cd1b-244">下列範例設定 TextEncoding <xref:System.Text.Encoding.Unicode?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-244">The following example sets TextEncoding to <xref:System.Text.Encoding.Unicode?displayProperty=nameWithType>.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
binding.TextEncoding = System.Text.Encoding.Unicode;
```

<span data-ttu-id="6cd1b-245">這個屬性的值也可以在組態檔中設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-245">The value of this property can also be set in the configuration file.</span></span>

```xml
<configuration>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="Binding1"
          textEncoding = "UnicodeFffeTextEncoding">

          <security mode="None" />
        </binding>
      </basicHttpBinding>
    </bindings>
  </system.serviceModel>

</configuration>
```

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransferMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.TransferMode TransferMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.TransferMode TransferMode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.TransferMode" />
      <MemberSignature Language="VB.NET" Value="Public Property TransferMode As TransferMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::TransferMode TransferMode { System::ServiceModel::TransferMode get(); void set(System::ServiceModel::TransferMode value); };" />
      <MemberSignature Language="F#" Value="member this.TransferMode : System.ServiceModel.TransferMode with get, set" Usage="System.ServiceModel.BasicHttpBinding.TransferMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.TransferMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-246">取得或設定值，這個值會指出訊息是以經過緩衝處理或資料流處理的方式傳送。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-246">Gets or sets a value that indicates whether messages are sent buffered or streamed.</span></span></summary>
        <value><span data-ttu-id="6cd1b-247"><see cref="T:System.ServiceModel.TransferMode" />，指出訊息是以經過緩衝處理或資料流處理的方式傳送。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-247">The <see cref="T:System.ServiceModel.TransferMode" /> that indicates whether messages are sent buffered or streamed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples

<span data-ttu-id="6cd1b-248">下列範例會將傳輸模式設定為<xref:System.ServiceModel.TransferMode.Streamed>。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-248">The following example sets TransferMode to <xref:System.ServiceModel.TransferMode.Streamed>.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
binding.TransferMode = TransferMode.Streamed;
```

<span data-ttu-id="6cd1b-249">這個屬性的值也可以在組態檔中設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-249">The value of this property can also be set in the configuration file.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultWebProxy">
      <MemberSignature Language="C#" Value="public bool UseDefaultWebProxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultWebProxy" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.BasicHttpBinding.UseDefaultWebProxy" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDefaultWebProxy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDefaultWebProxy { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultWebProxy : bool with get, set" Usage="System.ServiceModel.BasicHttpBinding.UseDefaultWebProxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Http</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cd1b-250">取得或設定值，這個值會指出是否應使用系統自動設定的 HTTP Proxy (如果有的話)。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-250">Gets or sets a value that indicates whether the auto-configured HTTP proxy of the system should be used, if available.</span></span></summary>
        <value><span data-ttu-id="6cd1b-251">如果應使用系統自動設定的 HTTP Proxy (如果有的話)，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-251"><see langword="true" /> if the auto-configured HTTP proxy of the system should be used, if available; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6cd1b-252">預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-252">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="6cd1b-253">它是這個值是錯誤`true`和<xref:System.ServiceModel.BasicHttpBinding.ProxyAddress>為非 null。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-253">It is an error for this to be `true` and <xref:System.ServiceModel.BasicHttpBinding.ProxyAddress> to be non-null.</span></span>

## Examples

<span data-ttu-id="6cd1b-254">此範例中設定的值來 UseDefaultWebProxy `false`。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-254">This example sets the value of UseDefaultWebProxy to `false`.</span></span>

```csharp
BasicHttpBinding binding = new BasicHttpBinding();
binding.UseDefaultWebProxy = false;
```

<span data-ttu-id="6cd1b-255">這個屬性的值也可以在組態檔中設定。</span><span class="sxs-lookup"><span data-stu-id="6cd1b-255">The value of this property can also be set in the configuration file.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>