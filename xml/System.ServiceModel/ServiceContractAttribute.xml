<Type Name="ServiceContractAttribute" FullName="System.ServiceModel.ServiceContractAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aa5c44abf8964e705f5a899718153f6034bdc3df" /><Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/05/2018" /><Meta Name="ms.locfileid" Value="52909747" /></Metadata><TypeSignature Language="C#" Value="public sealed class ServiceContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ServiceContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ServiceContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ServiceContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ServiceContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示某個介面或類別定義了 Windows Communication Foundation (WCF) 應用程式中的服務合約。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用介面 (或類別) 上的 <xref:System.ServiceModel.ServiceContractAttribute> 屬性來定義服務合約。 接著使用一個或多個類別 (或介面) 方法上的 <xref:System.ServiceModel.OperationContractAttribute> 屬性，定義合約的服務作業。 當服務合約實作且結合[繫結](~/docs/framework/wcf/bindings.md)和<xref:System.ServiceModel.EndpointAddress>物件時，服務合約由使用用戶端。 如需使用簡單的範例程序的概觀，請參閱 <<c0> [ 入門教學課程](~/docs/framework/wcf/getting-started-tutorial.md)。 如需建立服務合約的詳細資訊，請參閱 <<c0> [ 設計與實作服務](~/docs/framework/wcf/designing-and-implementing-services.md)。  
  
 由 <xref:System.ServiceModel.ServiceContractAttribute> 表示的資訊及其介面與 Web 服務描述語言 (WSDL) 的 `<portType>` 項目鬆散相關。 服務合約的服務端上用以指定服務的端點公開給呼叫端。 用戶端亦會使用服務合約，來指定該用戶端所通訊之端點的合約，而在雙工合約中，也會指定用戶端必須實作的回呼合約 (使用 <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> 屬性)，以參與雙工對談。  
  
> [!NOTE]
>  以 <xref:System.ServiceModel.ServiceContractAttribute> 裝飾的介面或類別至少要有一個以 <xref:System.ServiceModel.OperationContractAttribute> 屬性標記的方法，才能公開其功能。 請參閱＜範例＞一節中，使用這兩個屬性來定義並實作服務的最簡單程式碼範例。  
  
 使用 <xref:System.ServiceModel.ServiceContractAttribute> 屬性修改服務合約。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.ConfigurationName%2A> 屬性指定了所使用組態檔中服務項目的名稱。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> 與 <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> 屬性控制了 WSDL `<portType>` 元素中的合約名稱與合約命名空間。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> 屬性指定合約是否需要支援工作階段的繫結。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> 屬性指定雙向 (雙工) 對談的傳回合約。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A> 與 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> 屬性表示支援合約的所有訊息是否有明確的 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> 值，若有，其值為何。  
  
 服務會實作服務合約，代表服務類型支援的資料交換。 服務類別可實作服務合約 (藉由實作以 <xref:System.ServiceModel.ServiceContractAttribute> 標記的介面，此介面有以 <xref:System.ServiceModel.OperationContractAttribute> 標記的方法)，或可用 <xref:System.ServiceModel.ServiceContractAttribute> 標記此類別，並套用 <xref:System.ServiceModel.OperationContractAttribute> 屬性至此類別的方法  (若類別實作以 <xref:System.ServiceModel.ServiceContractAttribute> 標記的介面，則此類別本身便不能以 <xref:System.ServiceModel.ServiceContractAttribute> 標記)。在服務類型中以 <xref:System.ServiceModel.OperationContractAttribute> 標記的方法，會視為預設服務合約的一部分 (此合約由該服務類型自行指定)。 如需服務作業的詳細資訊，請參閱 <xref:System.ServiceModel.OperationContractAttribute>。  
  
 根據預設，<xref:System.ServiceModel.ServiceContractAttribute.Name%2A> 與 <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> 屬性分別為合約類型名稱與 `http://tempuri.org` 的名稱，而 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> 則為 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>。 建議您使用這些屬性，明確設定服務合約的名稱、命名空間與保護層級。 如此可達成兩個目標， 首先，它會建置一份不會與 Managed 型別資訊直接連接的合約，可讓您在不破壞 WSDL 所表示的合約下，重構 Managed 程式碼與命名空間。 還有，在合約內明確要求某種保護層級，可讓執行階段驗證該繫結組態是否支援該安全性層級，避免因組態設定不當而洩漏敏感資訊。 如需有關保護層級的詳細資訊，請參閱[了解保護層級](~/docs/framework/wcf/understanding-protection-level.md)。  
  
 若要公開使用的服務用戶端應用程式，建立主應用程式與 Windows Communication Foundation (WCF) 中註冊您的服務端點。 您可以裝載在主控台應用程式、 Windows 服務應用程式、 ASP.NET 應用程式、 Windows Forms 應用程式或任何其他種類的應用程式定義域中使用 Windows Activation Services (WAS) 的 WCF 服務。  
  
 在 WAS 裝載的方式與建立 ASP.NET 應用程式非常相似。 如需詳細資訊，請參閱[How to:將 WCF 服務裝載於 IIS](~/docs/framework/wcf/feature-details/how-to-host-a-wcf-service-in-iis.md)。  
  
 用戶端使用服務合約介面 (以 <xref:System.ServiceModel.ServiceContractAttribute> 標示的介面) 建立通往服務的通道，或使用用戶端物件 (結合了服務合約介面的型別資訊與 <xref:System.ServiceModel.ClientBase%601> 類別) 與您的服務通訊。 如需服務的用戶端通道的詳細資訊，請參閱<xref:System.ServiceModel.ChannelFactory%601>類別以及[WCF Client Overview](~/docs/framework/wcf/wcf-client-overview.md)。  
  
 使用 <xref:System.ServiceModel.ServiceContractAttribute> 類別或介面來繼承另一個延伸了父合約的 <xref:System.ServiceModel.ServiceContractAttribute> 類別或介面。 例如，如果 `IChildContract` 介面以 <xref:System.ServiceModel.ServiceContractAttribute> 標記，並繼承了另一個服務合約介面 `IParentContract`，則 `IChildContract` 服務合約就包含了 `IParentContract` 與 `IChildContract` 的方法。 延伸合約 (在類別或介面上) 與延伸 Managed 類別與介面非常相似。  
  
 建立服務最有彈性的方式，是先定義服務合約介面，再讓您的服務類別實作該介面  (若您必須實作由別人定義的服務合約，那麼這也是建立服務最簡單的方式)。若服務只公開一個合約 (但該合約可被多個端點公開)，則可直接將某個類別以 <xref:System.ServiceModel.ServiceContractAttribute> 標記，其方法以 <xref:System.ServiceModel.OperationContractAttribute> 標記，來建置出服務。  
  
 使用<xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A>屬性來表示，當繫結在一起的原始服務合約定義兩種方式可以獨立地流動的訊息交換的另一個服務合約。 如需詳細資訊，請參閱 <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A>。  
  
   
  
## Examples  
 下列程式碼範例會示範如何將 <xref:System.ServiceModel.ServiceContractAttribute> 套用至介面，定義出含有一個服務方法的服務合約，此服務方法由 <xref:System.ServiceModel.OperationContractAttribute> 表示。 在此情況下，所有訊息之繫結所要求的保護層級為 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>。  
  
 程式碼範例接著在 `SampleService` 類別上實作該合約。  
  
 [!code-csharp[ServiceContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/servicecontractattribute/cs/services.cs#1)]
 [!code-vb[ServiceContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/servicecontractattribute/vb/services.vb#1)]  
  
 下列程式碼範例是前述服務的一個簡單組態檔，此服務會建立一個端點。  
  
 [!code-xml[ServiceContractAttribute#2](~/samples/snippets/csharp/VS_Snippets_CFX/servicecontractattribute/cs/hostapplication.exe.config#2)]   
  
 下列程式碼範例示範叫用前述 `SampleService` 的簡單用戶端。  
  
 [!code-csharp[ServiceContractAttribute#3](~/samples/snippets/csharp/VS_Snippets_CFX/servicecontractattribute/cs/client.cs#3)]
 [!code-vb[ServiceContractAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/servicecontractattribute/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.OperationContractAttribute" />
    <related type="Article" href="https://msdn.microsoft.com/library/036fae20-7c55-4002-b71d-ac4466e167a3">定義服務合約</related>
    <related type="Article" href="https://msdn.microsoft.com/library/192be927-6be2-4fda-98f0-e513c4881acc">裝載的服務</related>
    <related type="Article" href="https://msdn.microsoft.com/library/7cf21bfe-23bd-46aa-8033-609f851dbf76">服務建立概觀</related>
    <related type="Article" href="https://msdn.microsoft.com/library/28dfff47-d95b-4cc2-9d5c-b3b9ba71fd50">建置用戶端</related>
    <related type="Article" href="https://msdn.microsoft.com/library/d780af9f-73c5-42db-9e52-077a5e4de7fe">Proxy 建立概觀</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ServiceModel.ServiceContractAttribute" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建構函式使用預設名稱與命名空間，且沒有工作階段需求與回呼合約，來建立屬性的執行個體。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallbackContract">
      <MemberSignature Language="C#" Value="public Type CallbackContract { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type CallbackContract" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.CallbackContract" />
      <MemberSignature Language="VB.NET" Value="Public Property CallbackContract As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ CallbackContract { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CallbackContract : Type with get, set" Usage="System.ServiceModel.ServiceContractAttribute.CallbackContract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當合約是雙工合約時，取得或設定回呼合約的型別。</summary>
        <value>表示回呼合約的 <see cref="T:System.Type" />。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定 <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> 屬性中的介面，代表雙向 (或雙工) 訊息交換中所需的反向合約。 這可讓用戶端應用程式接聽傳入作業呼叫，伺服器端服務應用程式可傳送該呼叫給用戶端，不論用戶端的活動為何。 擁有單向作業的回呼合約，代表從服務端的呼叫，用戶端可處理此呼叫。  
  
> [!NOTE]
>  回呼合約上的 <xref:System.ServiceModel.ServiceContractAttribute> 屬性會忽略。 若要設定回呼物件的執行階段行為，請使用 <xref:System.ServiceModel.CallbackBehaviorAttribute?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列程式碼範例示範指定了回呼合約的服務，此回呼合約表示 `IDuplexHello``IHelloCallbackContract`型別的服務必須有一個對等項，此對等項實作了  型別的服務。 此外，`IHelloCallbackContract` 實作一個單向回呼方法，可讓服務呼叫用戶端，而不需等待用戶端回覆，以支援分散式事件驅動用戶端。  
  
 [!code-csharp[SCA.CallbackContract#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.callbackcontract/cs/services.cs#1)]
 [!code-vb[SCA.CallbackContract#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.callbackcontract/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigurationName">
      <MemberSignature Language="C#" Value="public string ConfigurationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConfigurationName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName" />
      <MemberSignature Language="VB.NET" Value="Public Property ConfigurationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConfigurationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConfigurationName : string with get, set" Usage="System.ServiceModel.ServiceContractAttribute.ConfigurationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來在應用程式組態檔中尋找服務的名稱。</summary>
        <value>用來在應用程式組態檔中尋找服務項目的名稱。 預設為服務實作類別的名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要設定組態系統用來在組態檔中尋找合約值的數值，請參閱 <xref:System.ServiceModel.ServiceBehaviorAttribute.ConfigurationName%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">值為 null。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">值為空字串。</exception>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.ServiceContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得指出成員是否已指派保護層級的值。</summary>
        <value>如果 <see cref="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" /> 屬性不為 <see cref="F:System.Net.Security.ProtectionLevel.None" /> 則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A> 屬性表示合約是否設定了 `false` 以外的保護層級值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.ServiceContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 Web 服務描述語言 (WSDL) 中的 <see langword="&lt;portType&gt;" /> 項目名稱。</summary>
        <value>預設值是套用 <see cref="T:System.ServiceModel.ServiceContractAttribute" /> 之類別或介面的名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> 與 <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> 屬性，來控制 WSDL 中 `<portType>` 元素的名稱與命名空間。  
  
   
  
## Examples  
 在下列程式碼範例中，會示範如何使用 <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> 的 <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> 與 <xref:System.ServiceModel.ServiceContractAttribute> 屬性來設定 WSDL 中相對應的值。  
  
 [!code-csharp[SCA.Names#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/services.cs#1)]
 [!code-vb[SCA.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/services.vb#1)]  
  
 下列程式碼範例顯示前述服務的 Windows Communication Foundation (WCF) 用戶端的匯入 WSDL 方法使用[ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)。 此用戶端使用 `HelloWorldProxy` 用戶端，而非 `SampleServiceProxy` 用戶端 (與 <xref:System.ServiceModel.ServiceContractAttribute> 之＜範例＞一節的範例一樣)。  
  
 [!code-csharp[SCA.Names#3](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/client.cs#3)]
 [!code-vb[SCA.Names#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/client.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">值為 null。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">值為空字串。</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.ServiceContractAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 Web 服務描述語言 (WSDL) 中的 <see langword="&lt;portType&gt;" /> 項目命名空間。</summary>
        <value><see langword="&lt;portType&gt;" /> 元素的 WSDL 命名空間。 預設值為 "http://tempuri.org"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 在下列程式碼範例中，會示範如何使用 <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> 的 <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> 與 <xref:System.ServiceModel.ServiceContractAttribute> 屬性來設定 WSDL 中相對應的值。  
  
 [!code-csharp[SCA.Names#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/services.cs#1)]
 [!code-vb[SCA.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/services.vb#1)]  
  
 下列程式碼範例顯示前述服務的 Windows Communication Foundation (WCF) 用戶端的匯入 WSDL 方法使用[ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)。 此用戶端使用 `HelloWorldClient` 用戶端，而非 `SampleServiceClient` 用戶端 (與 <xref:System.ServiceModel.ServiceContractAttribute> 之＜範例＞一節的範例一樣)。  
  
 [!code-csharp[SCA.Names#3](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/client.cs#3)]
 [!code-vb[SCA.Names#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/client.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.ServiceContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定合約繫結是否必須支援 <see cref="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" /> 屬性的值。</summary>
        <value>其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值。 預設為 <see cref="F:System.Net.Security.ProtectionLevel.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> 屬性指定公開合約的端點中，合約繫結是否需要加密、數位簽章或兩者均進行。 這裡設定的值，會成為所有作業訊息 (包括錯誤) 的預設值。  
  
 請記住，執行階段的保護行為，是以下屬性的保護層級設定值的組合，這點很重要。 這些屬性有階層式結構。 除非針對較窄的範圍明確設定不同的值，否則，設定最外層的值會建立所有較窄範圍的預設值。 在此情況下，外部值仍為所有較窄範圍的預設值 (特別設定的範圍除外)。  
  
 例如，如果 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> 設定為 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> 而且沒有其他更窄的範圍具有保護層級設定，則會加密並簽署作業合約中的所有訊息。 但是，如果這些其中一個作業已將 <xref:System.ServiceModel.OperationContractAttribute> 設定為 <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>，則會簽署該作業的訊息，但是合約中的其他所有訊息都會經過加密並簽署。  
  
 如需保護層級及其假設和範圍的詳細資訊，請參閱[了解保護層級](~/docs/framework/wcf/understanding-protection-level.md)。  
  
 設定這些值的範圍如下：  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> 的 <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType> 屬性。  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> 的 <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType> 屬性。  
  
 當合約上未明確指定保護層級，而且基礎繫結可支援安全性 (不論是在傳輸層級或訊息層級) 時，整個合約的有效保護層級會是 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>。 如果繫結不支援安全性 (例如，<xref:System.ServiceModel.BasicHttpBinding>)，整個合約的有效 <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> 為 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>。 結果便是根據端點繫結的不同，用戶端可以要求不同的訊息或傳輸層級的安全性保護，即使當合約指定 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> 時亦然。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">該值不是其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="SessionMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.SessionMode SessionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.SessionMode SessionMode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.SessionMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SessionMode As SessionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::SessionMode SessionMode { System::ServiceModel::SessionMode get(); void set(System::ServiceModel::SessionMode value); };" />
      <MemberSignature Language="F#" Value="member this.SessionMode : System.ServiceModel.SessionMode with get, set" Usage="System.ServiceModel.ServiceContractAttribute.SessionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.SessionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定是否允許工作階段、不允許工作階段，或需要工作階段。</summary>
        <value><see cref="T:System.ServiceModel.SessionMode" />，表示是否允許工作階段、不允許工作階段，或需要工作階段。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> 屬性要求可支援端點間工作階段的繫結。 工作階段是一種將兩個 (或更多) 端點間所交換的一組訊息予以關聯的方式。 若您的服務支援通道工作階段，便可使用 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> 屬性，來指定您的服務合約實作之執行個體與通道工作階段間的關係。 若繫結不支援工作階段，就會擲回例外狀況。  
  
 例如，若 <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> 屬性設為 <xref:System.ServiceModel.SessionMode.Required?displayProperty=nameWithType>，且 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> 屬性設為 <xref:System.ServiceModel.InstanceContextMode.PerSession>，用戶端可使用相同連線，對相同服務物件進行重複呼叫。  
  
 如需有關工作階段和服務執行個體的詳細資訊，請參閱 <<c0> [ 使用的工作階段](~/docs/framework/wcf/using-sessions.md)並[工作階段，Instancing，and Concurrency](~/docs/framework/wcf/feature-details/sessions-instancing-and-concurrency.md)。  
  
> [!NOTE]
>  支援工作階段的通道，可支援服務執行個體與特定工作階段之間的預設關聯。 但是，除了工作階段的執行個體控制外，不同工作階段實作會支援不同功能。 WCF 會提供四種可用來提供工作階段的應用程式的行為; 的工作階段每種類型的工作階段提供該工作階段類型特有的其他行為。  
  
1.  <xref:System.ServiceModel.Channels.SecurityBindingElement?displayProperty=nameWithType> 支援安全性工作階段，通訊兩端均同意加密與/或數位簽章程序，所有訊息都與該特定安全對談相關。 如需詳細資訊，請參閱 < [Securing Services](~/docs/framework/wcf/securing-services.md)。 例如，<xref:System.ServiceModel.WSHttpBinding?displayProperty=nameWithType> 同時支援安全性工作階段與可靠工作階段，但根據預設，只會使用安全工作階段，它會對訊息加密並進行數位簽章。  
  
2.  <xref:System.ServiceModel.NetTcpBinding?displayProperty=nameWithType> 支援 TCP/IP 連接所公開的工作階段，可確保所有訊息都在通訊端層級由連線工作階段建立相互關聯。  
  
3.  <xref:System.ServiceModel.Channels.ReliableSessionBindingElement?displayProperty=nameWithType>，它實作了 WS-ReliableMessaging 規格，提供可靠工作階段支援，讓訊息依序傳遞且只傳遞一次，可提供信賴度，即使訊息在對談期間流經多個節點亦然。 如需詳細資訊，請參閱 <<c0> [ 可靠工作階段](~/docs/framework/wcf/feature-details/reliable-sessions.md)。  
  
4.  <xref:System.ServiceModel.NetMsmqBinding?displayProperty=nameWithType> 提供 MSMQ 資料包工作階段。 如需詳細資訊，請參閱 < [WCF 中的佇列](~/docs/framework/wcf/feature-details/queues-in-wcf.md)。  
  
 記得，設定 <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> 屬性不會指定合約所需的工作階段型別，只代表它需要工作階段。  
  
   
  
## Examples  
 下列服務合約要求在與 `SampleDuplexHello` 服務實作互動時，設定的繫結要使用工作階段。  
  
 [!code-csharp[SCA.Session#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.session/cs/services.cs#1)]
 [!code-vb[SCA.Session#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.session/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">該值不是其中一個 <see cref="T:System.ServiceModel.SessionMode" /> 值。</exception>
      </Docs>
    </Member>
  </Members>
</Type>