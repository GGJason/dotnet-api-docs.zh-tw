<Type Name="NetNamedPipeBinding" FullName="System.ServiceModel.NetNamedPipeBinding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b04872c83fc7a10e810ab4f81b4b5ffa0b2f6667" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37452686" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NetNamedPipeBinding : System.ServiceModel.Channels.Binding, System.ServiceModel.Channels.IBindingRuntimePreferences" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NetNamedPipeBinding extends System.ServiceModel.Channels.Binding implements class System.ServiceModel.Channels.IBindingRuntimePreferences" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.NetNamedPipeBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class NetNamedPipeBinding&#xA;Inherits Binding&#xA;Implements IBindingRuntimePreferences" />
  <TypeSignature Language="C++ CLI" Value="public ref class NetNamedPipeBinding : System::ServiceModel::Channels::Binding, System::ServiceModel::Channels::IBindingRuntimePreferences" />
  <TypeSignature Language="F#" Value="type NetNamedPipeBinding = class&#xA;    inherit Binding&#xA;    interface IBindingRuntimePreferences" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Channels.Binding</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IBindingRuntimePreferences</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供針對電腦通訊最佳化，安全而可靠的繫結。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，<xref:System.ServiceModel.NetNamedPipeBinding> 會產生執行階段通訊堆疊，此堆疊使用傳輸安全性、具名管道 (用於訊息傳遞) 和二進位訊息編碼。 此繫結為適當的 Windows Communication Foundation (WCF) 系統提供的現成選擇，可用於電腦通訊。 它也支援交易。  
  
 <xref:System.ServiceModel.NetNamedPipeBinding> 的預設組態類似於 <xref:System.ServiceModel.NetTcpBinding> 所提供的組態，但較為簡單，因為 WCF 實作只針對電腦應用，所以公開的功能不多。 最顯著的差異在於，<xref:System.ServiceModel.SecurityMode> 設定只提供 <xref:System.ServiceModel.SecurityMode.None> 和 <xref:System.ServiceModel.SecurityMode.Transport> 選項。 SOAP 安全性支援並非包含的選項。 您可以使用建構函式 `securityMode` 中的選擇性 <xref:System.ServiceModel.NetNamedPipeBinding.%23ctor%28System.ServiceModel.NetNamedPipeSecurityMode%29> 參數，設定安全性行為。  
  
   
  
## Examples  
 下列範例會示範部分組態檔，其中包含值設為預設值之 <xref:System.ServiceModel.NetNamedPipeBinding> 的區段。  
  
  
  
 下列範例會示範如何以程式設計的方式使用 <xref:System.ServiceModel.NetNamedPipeBinding> 類別。  
  
 [!code-csharp[S_UENetNamedPipe#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.ServiceModel.NetNamedPipeBinding" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用建構函式中的選擇性 `securityMode` 參數，設定安全性行為。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetNamedPipeBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.NetNamedPipeBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetNamedPipeBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ServiceModel.NetNamedPipeBinding" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設使用的安全性模式為 <xref:System.ServiceModel.NetNamedPipeSecurityMode.Transport>。  
  
   
  
## Examples  
 下列範例會示範部分組態檔，其中包含值設為預設值之 <xref:System.ServiceModel.NetNamedPipeBinding> 的區段。  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetNamedPipeBinding (System.ServiceModel.NetNamedPipeSecurityMode securityMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ServiceModel.NetNamedPipeSecurityMode securityMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.NetNamedPipeBinding.#ctor(System.ServiceModel.NetNamedPipeSecurityMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (securityMode As NetNamedPipeSecurityMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetNamedPipeBinding(System::ServiceModel::NetNamedPipeSecurityMode securityMode);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.NetNamedPipeBinding : System.ServiceModel.NetNamedPipeSecurityMode -&gt; System.ServiceModel.NetNamedPipeBinding" Usage="new System.ServiceModel.NetNamedPipeBinding securityMode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="securityMode" Type="System.ServiceModel.NetNamedPipeSecurityMode" />
      </Parameters>
      <Docs>
        <param name="securityMode">指定 Windows 安全性是否搭配具名管道一起使用的 <see cref="T:System.ServiceModel.NetNamedPipeSecurityMode" /> 值。</param>
        <summary>使用指定的安全性模式，初始化 <see cref="T:System.ServiceModel.NetNamedPipeBinding" /> 類別的執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您設定安全性時，請明確使用這個建構函式。 當使用預設建構函式時，預設為 <xref:System.ServiceModel.NetNamedPipeSecurityMode.Transport>。  
  
   
  
## Examples  
 [!code-csharp[S_UENetNamedPipe#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/snippets.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetNamedPipeBinding (string configurationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string configurationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.NetNamedPipeBinding.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (configurationName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetNamedPipeBinding(System::String ^ configurationName);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.NetNamedPipeBinding : string -&gt; System.ServiceModel.NetNamedPipeBinding" Usage="new System.ServiceModel.NetNamedPipeBinding configurationName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configurationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="configurationName">[netNamedPipeBinding Element] (~/docs/framework/configure-apps/file-schema/wcf/netnamedpipebinding.md) 的繫結組態名稱。</param>
        <summary>使用指定的組態名稱，初始化 <see cref="T:System.ServiceModel.NetNamedPipeBinding" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您要透過組態來初始化繫結設定，請使用這個建構函式。  
  
   
  
## Examples  
 [!code-csharp[S_UENetNamedPipe#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/snippets.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBindingElements">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.BindingElementCollection CreateBindingElements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.NetNamedPipeBinding.CreateBindingElements" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateBindingElements () As BindingElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ServiceModel::Channels::BindingElementCollection ^ CreateBindingElements();" />
      <MemberSignature Language="F#" Value="override this.CreateBindingElements : unit -&gt; System.ServiceModel.Channels.BindingElementCollection" Usage="netNamedPipeBinding.CreateBindingElements " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.BindingElementCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立含有繫結之繫結項目的集合。</summary>
        <returns>組成繫結且型別為 <see cref="T:System.Collections.Generic.ICollection`1" /> 的 <see cref="T:System.ServiceModel.Channels.BindingElement" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[S_UENetNamedPipe#12](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnvelopeVersion">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EnvelopeVersion EnvelopeVersion" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.NetNamedPipeBinding.EnvelopeVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EnvelopeVersion As EnvelopeVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EnvelopeVersion ^ EnvelopeVersion { System::ServiceModel::EnvelopeVersion ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnvelopeVersion : System.ServiceModel.EnvelopeVersion" Usage="System.ServiceModel.NetNamedPipeBinding.EnvelopeVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EnvelopeVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 SOAP 的版本，用於由此繫結處理的訊息。</summary>
        <value>
          <see cref="P:System.ServiceModel.EnvelopeVersion.Soap12" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SOAP 1.2 必須搭配此繫結使用。  
  
   
  
## Examples  
 下列範例會示範如何取得 SOAP 的版本。  
  
 [!code-csharp[S_UENetNamedPipe#16](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostNameComparisonMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.HostNameComparisonMode HostNameComparisonMode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.NetNamedPipeBinding.HostNameComparisonMode" />
      <MemberSignature Language="VB.NET" Value="Public Property HostNameComparisonMode As HostNameComparisonMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::HostNameComparisonMode HostNameComparisonMode { System::ServiceModel::HostNameComparisonMode get(); void set(System::ServiceModel::HostNameComparisonMode value); };" />
      <MemberSignature Language="F#" Value="member this.HostNameComparisonMode : System.ServiceModel.HostNameComparisonMode with get, set" Usage="System.ServiceModel.NetNamedPipeBinding.HostNameComparisonMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.HostNameComparisonMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值會指出在比對 URI 時此主機名稱是否會用來取用服務。</summary>
        <value>
          <see cref="P:System.ServiceModel.Configuration.WSDualHttpBindingElement.HostNameComparisonMode" /> 值，指出在比對 URI 時此主機名稱是否會用來存取服務。 預設值為 <see cref="F:System.ServiceModel.HostNameComparisonMode.StrongWildcard" />，表示比對時忽略主機名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範如何取得 <xref:System.ServiceModel.NetNamedPipeBinding.HostNameComparisonMode%2A> 屬性。  
  
 [!code-csharp[S_UENetNamedPipe#13](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxBufferPoolSize">
      <MemberSignature Language="C#" Value="public long MaxBufferPoolSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxBufferPoolSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.NetNamedPipeBinding.MaxBufferPoolSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxBufferPoolSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxBufferPoolSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxBufferPoolSize : int64 with get, set" Usage="System.ServiceModel.NetNamedPipeBinding.MaxBufferPoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(524288)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定記憶體中用於緩衝傳入訊息的位元組數目上限。</summary>
        <value>記憶體中用於緩衝傳入訊息的位元組數目上限。 預設值為 524,288 個位元組。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您接收超出可以緩衝的資料，則超出緩衝大小的資料會保留在基礎通訊端中，直到緩衝區再度有空間可存放其他資料為止。  
  
   
  
## Examples  
 下列範例會示範如何取得 <xref:System.ServiceModel.NetNamedPipeBinding.MaxBufferPoolSize%2A> 值。  
  
 [!code-csharp[S_UENetNamedPipe#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxBufferSize">
      <MemberSignature Language="C#" Value="public int MaxBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.NetNamedPipeBinding.MaxBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxBufferSize : int with get, set" Usage="System.ServiceModel.NetNamedPipeBinding.MaxBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(65536)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定記憶體中用於緩衝傳入訊息的位元組數目上限。</summary>
        <value>記憶體中用於緩衝傳入訊息的位元組數目上限。 預設值為 65,536 位元組。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您接收超出可以緩衝的資料，則超出緩衝大小的資料會保留在基礎通訊端中，直到緩衝區再度有空間可存放其他資料為止。  
  
   
  
## Examples  
 下列範例會示範如何取得 <xref:System.ServiceModel.NetNamedPipeBinding.MaxBufferSize%2A> 值。  
  
 [!code-csharp[S_UENetNamedPipe#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定的值小於 0。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxConnections">
      <MemberSignature Language="C#" Value="public int MaxConnections { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxConnections" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.NetNamedPipeBinding.MaxConnections" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxConnections As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxConnections { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxConnections : int with get, set" Usage="System.ServiceModel.NetNamedPipeBinding.MaxConnections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定允許具名管道繫結設定端點允許的連線數量上限，傳入和傳出都納入計算。</summary>
        <value>此繫結允許之具名管道連線數量上限。 預設值為 10。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳入連線數量上限與傳出連線數量上限設為相同的值。  
  
   
  
## Examples  
 下列範例會示範如何取得 <xref:System.ServiceModel.NetNamedPipeBinding.MaxConnections%2A> 值。  
  
 [!code-csharp[S_UENetNamedPipe#7](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxReceivedMessageSize">
      <MemberSignature Language="C#" Value="public long MaxReceivedMessageSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxReceivedMessageSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.NetNamedPipeBinding.MaxReceivedMessageSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxReceivedMessageSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxReceivedMessageSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxReceivedMessageSize : int64 with get, set" Usage="System.ServiceModel.NetNamedPipeBinding.MaxReceivedMessageSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(65536)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定由繫結處理之接收訊息的大小上限 (以位元組為單位)。</summary>
        <value>由繫結處理之接收訊息的大小上限，以位元組為單位。 預設值為 65,536 位元組。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範如何取得 <xref:System.ServiceModel.NetNamedPipeBinding.MaxReceivedMessageSize%2A> 值。  
  
 [!code-csharp[S_UENetNamedPipe#8](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderQuotas">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDictionaryReaderQuotas ReaderQuotas" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.NetNamedPipeBinding.ReaderQuotas" />
      <MemberSignature Language="VB.NET" Value="Public Property ReaderQuotas As XmlDictionaryReaderQuotas" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlDictionaryReaderQuotas ^ ReaderQuotas { System::Xml::XmlDictionaryReaderQuotas ^ get(); void set(System::Xml::XmlDictionaryReaderQuotas ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ReaderQuotas : System.Xml.XmlDictionaryReaderQuotas with get, set" Usage="System.ServiceModel.NetNamedPipeBinding.ReaderQuotas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReaderQuotas</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 SOAP 訊息複雜性的條件約束，而這些條件約束可由以此繫結所設定的端點處理。</summary>
        <value>
          <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />，指定已交換之 SOAP 訊息的複雜度條件約束。 接下來的「備註」一節提供了這些條件約束的預設值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複雜性條件約束可以防止嘗試使用訊息複雜性困住端點處理資源的阻絕服務 (DOS) 攻擊類別。 表示這些條件約束及其預設值的屬性包括：  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxDepth%2A> = 32  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength%2A> = 8192  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength%2A> = 16384  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead%2A> = 4096  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxNameTableCharCount%2A> = 16384  
  
   
  
## Examples  
 下列範例將示範如何取得 <xref:System.ServiceModel.NetNamedPipeBinding.ReaderQuotas%2A> 物件。  
  
 [!code-csharp[S_UENetNamedPipe#11](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定的值為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Scheme">
      <MemberSignature Language="C#" Value="public override string Scheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Scheme" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.NetNamedPipeBinding.Scheme" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Scheme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Scheme { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheme : string" Usage="System.ServiceModel.NetNamedPipeBinding.Scheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得使用這項繫結所設定之通道與接聽程式的 URI 傳輸配置。</summary>
        <value>傳回 "net.pipe"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範如何取得 URI 傳輸配置。  
  
 [!code-csharp[S_UENetNamedPipe#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Security">
      <MemberSignature Language="C#" Value="public System.ServiceModel.NetNamedPipeSecurity Security { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.NetNamedPipeSecurity Security" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.NetNamedPipeBinding.Security" />
      <MemberSignature Language="VB.NET" Value="Public Property Security As NetNamedPipeSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::NetNamedPipeSecurity ^ Security { System::ServiceModel::NetNamedPipeSecurity ^ get(); void set(System::ServiceModel::NetNamedPipeSecurity ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Security : System.ServiceModel.NetNamedPipeSecurity with get, set" Usage="System.ServiceModel.NetNamedPipeBinding.Security" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.NetNamedPipeSecurity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得物件，指定與此繫結所設定之服務共用的安全性類型。</summary>
        <value>搭配此繫結使用的 <see cref="T:System.ServiceModel.NetNamedPipeSecurity" />。 預設值是 <see cref="F:System.ServiceModel.NetNamedPipeSecurityMode.Transport" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.NetNamedPipeSecurity> 提供 <xref:System.ServiceModel.NetNamedPipeBinding>可使用的安全性類型與設定。  
  
   
  
## Examples  
 下列範例會示範如何取得與此繫結搭配使用的安全性類型。  
  
 [!code-csharp[S_UENetNamedPipe#9](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeMaxConnections">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeMaxConnections ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeMaxConnections() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.NetNamedPipeBinding.ShouldSerializeMaxConnections" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeMaxConnections () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeMaxConnections();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeMaxConnections : unit -&gt; bool" Usage="netNamedPipeBinding.ShouldSerializeMaxConnections " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回值，這個值表示 <see cref="P:System.ServiceModel.NetNamedPipeBinding.MaxConnections" /> 屬性是否已變更為非預設值且應該序列化。</summary>
        <returns>如果應序列化 <see cref="P:System.ServiceModel.NetNamedPipeBinding.MaxConnections" /> 屬性值，則為 <see langword="True" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeReaderQuotas">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeReaderQuotas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeReaderQuotas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.NetNamedPipeBinding.ShouldSerializeReaderQuotas" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeReaderQuotas () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeReaderQuotas();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeReaderQuotas : unit -&gt; bool" Usage="netNamedPipeBinding.ShouldSerializeReaderQuotas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回值，這個值表示 <see cref="P:System.ServiceModel.NetNamedPipeBinding.ReaderQuotas" /> 屬性是否已變更為非預設值且應該序列化。 這項資訊會由 WCF 用於 XAML 整合。</summary>
        <returns>如果應序列化 <see cref="P:System.ServiceModel.NetNamedPipeBinding.ReaderQuotas" /> 屬性值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSecurity">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeSecurity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.NetNamedPipeBinding.ShouldSerializeSecurity" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeSecurity () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeSecurity();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeSecurity : unit -&gt; bool" Usage="netNamedPipeBinding.ShouldSerializeSecurity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回值，這個值表示 <see cref="P:System.ServiceModel.NetNamedPipeBinding.Security" /> 屬性是否已變更為非預設值且應該序列化。 這項資訊會由 WCF 用於 XAML 整合。</summary>
        <returns>如果應序列化 <see cref="P:System.ServiceModel.NetNamedPipeBinding.Security" /> 屬性值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTransactionProtocol">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTransactionProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTransactionProtocol() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.NetNamedPipeBinding.ShouldSerializeTransactionProtocol" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTransactionProtocol () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTransactionProtocol();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTransactionProtocol : unit -&gt; bool" Usage="netNamedPipeBinding.ShouldSerializeTransactionProtocol " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回值，這個值表示 <see cref="P:System.ServiceModel.NetNamedPipeBinding.TransactionProtocol" /> 屬性是否已變更為非預設值且應該序列化。 這項資訊會由 WCF 用於 XAML 整合。</summary>
        <returns>如果應序列化 <see cref="P:System.ServiceModel.NetNamedPipeBinding.TransactionProtocol" /> 屬性值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously">
      <MemberSignature Language="C#" Value="bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.NetNamedPipeBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ReceiveSynchronously As Boolean Implements IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberSignature Language="C++ CLI" Value="property bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ServiceModel.NetNamedPipeBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值會指出要以同步或非同步方式處理傳入要求。</summary>
        <value>
          <see langword="false" /> 表示傳入要求以非同步處理。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會示範部分組態檔，其中包含值設為預設值之 <xref:System.ServiceModel.NetNamedPipeBinding> 的區段。  
  
 [!code-csharp[S_UENetNamedPipe#17](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransactionFlow">
      <MemberSignature Language="C#" Value="public bool TransactionFlow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TransactionFlow" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.NetNamedPipeBinding.TransactionFlow" />
      <MemberSignature Language="VB.NET" Value="Public Property TransactionFlow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TransactionFlow { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TransactionFlow : bool with get, set" Usage="System.ServiceModel.NetNamedPipeBinding.TransactionFlow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值會決定交易是否應流動至服務。</summary>
        <value>如果用戶端的交易應流向服務，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.NetNamedPipeBinding.TransactionFlow%2A> 屬性可讓您指定此繫結是否應支援下列交易。  
  
   
  
## Examples  
 下列範例會示範如何取得 <xref:System.ServiceModel.NetNamedPipeBinding.TransactionFlow%2A> 的值。  
  
 [!code-csharp[S_UENetNamedPipe#14](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransactionProtocol">
      <MemberSignature Language="C#" Value="public System.ServiceModel.TransactionProtocol TransactionProtocol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.TransactionProtocol TransactionProtocol" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.NetNamedPipeBinding.TransactionProtocol" />
      <MemberSignature Language="VB.NET" Value="Public Property TransactionProtocol As TransactionProtocol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::TransactionProtocol ^ TransactionProtocol { System::ServiceModel::TransactionProtocol ^ get(); void set(System::ServiceModel::TransactionProtocol ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransactionProtocol : System.ServiceModel.TransactionProtocol with get, set" Usage="System.ServiceModel.NetNamedPipeBinding.TransactionProtocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.TransactionProtocol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定服務用來使交易流動的交易通訊協定。</summary>
        <value>服務用來流動交易的 <see cref="T:System.ServiceModel.TransactionProtocol" />。 預設通訊協定為 <see cref="P:System.ServiceModel.TransactionProtocol.OleTransactions" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 WS-Atomic 交易通訊協定也可藉由設定 <xref:System.ServiceModel.TransactionProtocol.WSAtomicTransactionOctober2004%2A> 值來使用。  
  
   
  
## Examples  
 下列範例將示範如何取得 <xref:System.ServiceModel.NetNamedPipeBinding.TransactionProtocol%2A> 物件。  
  
 [!code-csharp[S_UENetNamedPipe#15](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransferMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.TransferMode TransferMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.TransferMode TransferMode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.NetNamedPipeBinding.TransferMode" />
      <MemberSignature Language="VB.NET" Value="Public Property TransferMode As TransferMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::TransferMode TransferMode { System::ServiceModel::TransferMode get(); void set(System::ServiceModel::TransferMode value); };" />
      <MemberSignature Language="F#" Value="member this.TransferMode : System.ServiceModel.TransferMode with get, set" Usage="System.ServiceModel.NetNamedPipeBinding.TransferMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.TransferMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值會指出以繫結設定的服務使用訊息傳輸的資料流處理模式 (單一或雙向) 或緩衝處理模式。</summary>
        <value>
          <see cref="T:System.ServiceModel.TransferMode" /> 值，指出以繫結設定的服務使用訊息傳輸的資料流處理模式 (單一或雙向) 或緩衝處理模式。 預設值為 <see cref="F:System.ServiceModel.TransferMode.Buffered" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定 <xref:System.ServiceModel.TransferMode.StreamedRequest> 或 <xref:System.ServiceModel.TransferMode.StreamedResponse>，有可能只對傳入或傳出訊息進行資料流處理。  
  
   
  
## Examples  
 下列範例會示範如何取得 <xref:System.ServiceModel.NetNamedPipeBinding.TransferMode%2A>。  
  
 [!code-csharp[S_UENetNamedPipe#18](~/samples/snippets/csharp/VS_Snippets_CFX/s_uenetnamedpipe/cs/service.cs#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>