<Type Name="FaultContractAttribute" FullName="System.ServiceModel.FaultContractAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e29d1981c805f79f9ea69492a7147d1f247f4f8c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39928732" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FaultContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FaultContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.FaultContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FaultContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FaultContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type FaultContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定一個或多個 SOAP 錯誤，當服務作業遇到處理錯誤時會傳回這些 SOAP 錯誤。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以 <xref:System.ServiceModel.FaultContractAttribute> 屬性標記一個作業，來宣告該服務作業的 Web 服務描述語言 (WSDL) 描述中所加入的一個或多個特定例外狀況，做為該作業傳回的明確 SOAP 錯誤訊息。  
  
 在所有 Managed 應用程式中，處理錯誤由 <xref:System.Exception> 物件表示。 例如，Windows Communication Foundation (WCF) 應用程式以 SOAP 為基礎的應用程式，在服務方法通訊，使用 SOAP 錯誤訊息的處理錯誤資訊。 因為 WCF 應用程式執行這兩種錯誤系統下，必須傳送至用戶端的任何 managed 例外狀況資訊必須轉換成 SOAP 錯誤的例外狀況。 您可使用預設的服務例外狀況行為，或自行控制是否要將例外狀況對應到錯誤訊息，以及其對應方式。 如需例外狀況和 WCF 應用程式中的 SOAP 錯誤的概觀，請參閱 <<c0> [ 指定及處理合約和服務中的錯誤](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)。  
  
 我們建議，服務作業應使用 <xref:System.ServiceModel.FaultContractAttribute> 正式指定用戶端在正常作業期間可能收到的所有 SOAP 錯誤。 我們也建議 SOAP 錯誤只傳回用戶端應該知道的資訊，將資訊暴露的程度降至最低。  
  
-   <xref:System.ServiceModel.FaultContractAttribute.Action%2A> 屬性控制錯誤訊息的動作。  
  
-   <xref:System.ServiceModel.FaultContractAttribute.DetailType%2A> 屬性會取得在錯誤訊息中序列化的詳細物件型別。  
  
-   <xref:System.ServiceModel.FaultContractAttribute.Name%2A> 與 <xref:System.ServiceModel.FaultContractAttribute.Namespace%2A> 屬性分別控制了錯誤訊息的名稱與命名空間。  
  
-   <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A> 表示錯誤訊息是否有指定的保護層級，若有，則由 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> 屬性控制該保護層級。  
  
> [!CAUTION]
>  如果錯誤訊息含有敏感資訊或可能導致安全性問題的資訊，則強烈建議您設定 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> 屬性。  
  
-   若您明確地將 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> 設為 <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> 或 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>，則您必須使用繫結上的 <xref:System.ServiceModel.SecurityMode?displayProperty=nameWithType> 屬性，來使用一個啟用安全性的繫結，否則會擲回例外狀況。  
  
-   若您選擇了一個啟用安全性的繫結，卻沒有在合約中設定 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> 屬性，則所有應用程式資料都會加密與簽章。  
  
-   若您選擇了尚未啟用安全性的繫結 (例如，根據預設，<xref:System.ServiceModel.BasicHttpBinding?displayProperty=nameWithType> 的安全性是停用的)，又沒有明確設定 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>，則所有應用程式資料都不會受到保護。  
  
 對許多案例而言，將 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> 設為 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 對錯誤訊息而言就已足夠了。 如需詳細資訊，請參閱 <<c0> [ 了解保護層級](~/docs/framework/wcf/understanding-protection-level.md)。  
  
 若要從 <xref:System.ServiceModel.FaultContractAttribute> 所標記的作業傳回指定錯誤，那麼在作業期間發生 Managed 例外狀況時，請擲回一個 <xref:System.ServiceModel.FaultException%601> (其型別參數是可序列化的錯誤資訊)。 WCF 用戶端應用程式會顯示為相同類型的 SOAP 錯誤時擲回用戶端實作，也就是當為<xref:System.ServiceModel.FaultException%601>（typeparameter 是可序列化的錯誤資訊）。 <xref:System.ServiceModel.FaultContractAttribute> 只能用來指定雙向服務作業與非同步作業組的 SOAP 錯誤；單向作業不支援 SOAP 錯誤，因此也不支援 <xref:System.ServiceModel.FaultContractAttribute>。  
  
> [!NOTE]
>  您可使用任何可序列化型別來傳遞錯誤資訊。 在這個版本的 WCF 中的唯一限制是在指定類型<xref:System.ServiceModel.FaultContractAttribute>必須是可序列化的<xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType>。 如需序列化支援<xref:System.Runtime.Serialization.DataContractSerializer>提供，請參閱 <<c2> [ 資料合約序列化程式](~/docs/framework/wcf/feature-details/data-contract-serializer.md)。  
  
 例如，要指定用戶端可接受包含 <xref:System.Int32> 的 SOAP 錯誤，請將該型別參數置入您服務方法上的 <xref:System.ServiceModel.FaultContractAttribute>。  
  
> [!NOTE]
>  下列程式碼範例沒有設定 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>、<xref:System.ServiceModel.FaultContractAttribute.Name%2A><xref:System.ServiceModel.FaultContractAttribute.Namespace%2A>或  屬性。  
  
 [!code-csharp[C_FCA#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#1)]
 [!code-vb[C_FCA#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#1)]  
  
 接著，您的服務方法會擲回一個新的 <xref:System.ServiceModel.FaultException%601>，其型別參數是包含錯誤訊息的型別 (在前例中，便是 <xref:System.Int32>)。 例如:   
  
 [!code-csharp[C_FCA#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#2)]
 [!code-vb[C_FCA#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#2)]  
  
 前述範例非常基本；幾乎所有資訊都可使用 <xref:System.Int32?displayProperty=nameWithType> 程式碼傳遞，所以這個詳細型別不是最有用的。 一般而言，WCF 應用程式會指定 SOAP 錯誤詳細類型特有的用戶端錯誤資訊需求。 如需更完整的範例，請參閱＜範例＞一節。  
  
> [!NOTE]
>  若您指定一個 <xref:System.ServiceModel.FaultException%601>，且型別參數為 <xref:System.String?displayProperty=nameWithType>，則此字串值會指派給用戶端應用程式中的 Detail 屬性；用戶端無法藉由呼叫 <xref:System.ServiceModel.FaultException%601.ToString%2A?displayProperty=nameWithType> 方法來擷取該字串。 若要在用戶端應用程式呼叫 <xref:System.Exception.ToString%2A?displayProperty=nameWithType> 時傳回字串值，請在該作業內擲回一個 <xref:System.ServiceModel.FaultException?displayProperty=nameWithType> 例外狀況，並將字串傳遞給建構函式。  
  
 若要明確控制應用程式在擲回例外狀況或 <xref:System.ServiceModel.FaultException%601> 時的行為，請在 <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType>、<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> 或 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> 實作 <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> 介面，並將它指派給 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> 屬性。 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 可讓您明確地控制產生的 SOAP 錯誤，以及是否要將它傳送回用戶端。  
  
 為了方便偵錯，設定<xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType>要`true`程式碼，或者您可以使用<xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType>應用程式組態檔中。 啟用時，服務會自動將例外狀況資訊傳回給呼叫者。 這些錯誤會以 <xref:System.ServiceModel.FaultException> 例外狀況的形式呈現給用戶端。  
  
> [!IMPORTANT]
>  因為 managed 例外狀況可以顯露內部的應用程式的資訊，請設定<xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType>或是<xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType>到`true`可允許 WCF 用戶端取得有關內部服務作業例外狀況，包括個人資訊識別或其他機密資訊。  
>   
>  因此，若您只是暫時對服務應用程式進行偵錯，才建議把 <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> 或 <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> 設為 `true`。 此外，若某個方法以這種方式傳回未處理的 Managed 例外狀況，則該方法的 WSDL 不會包含 <xref:System.ServiceModel.FaultException%601> 型別之 <xref:System.String> 的合約。 用戶端必須預期未知 SOAP 錯誤的可能性 (傳回給 WCF 用戶端，做為<xref:System.ServiceModel.FaultException?displayProperty=nameWithType>物件) 以正確取得偵錯資訊。  
  
   
  
## Examples  
 下列程式碼範例將示範如何使用 <xref:System.ServiceModel.FaultContractAttribute> 來指定 `SampleMethod` 作業可以傳回 SOAP 錯誤，連同 `GreetingFault` 的詳細型別。  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 下列程式碼範例顯示的 WCF 用戶端`ISampleService`體驗做為此 SOAP 錯誤<xref:System.ServiceModel.FaultException%601>型別的`GreetingFault`。  
  
 [!code-csharp[FaultContractAttribute#3](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/client.cs#3)]
 [!code-vb[FaultContractAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FaultContractAttribute (Type detailType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type detailType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (detailType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FaultContractAttribute(Type ^ detailType);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.FaultContractAttribute : Type -&gt; System.ServiceModel.FaultContractAttribute" Usage="new System.ServiceModel.FaultContractAttribute detailType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="detailType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="detailType">包含呼叫者錯誤資訊的可序列化型別。</param>
        <summary>初始化 <see cref="T:System.ServiceModel.FaultContractAttribute" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此建構函式的典型執行方式，是將該屬性套用至服務方法，並指定一個型別當作該屬性中的引數。  
  
   
  
## Examples  
 下列程式碼範例將示範如何使用 <xref:System.ServiceModel.FaultContractAttribute> 來指定 `SampleMethod` 作業可以傳回 SOAP 錯誤，連同 `GreetingFault` 的詳細型別。  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="detailType" /> 引數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Action : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 SOAP 錯誤訊息的動作，此訊息指定為作業合約的一部分。</summary>
        <value>SOAP 錯誤訊息的動作值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用來控制 SOAP 錯誤訊息的動作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetailType">
      <MemberSignature Language="C#" Value="public Type DetailType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DetailType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DetailType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DetailType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DetailType : Type" Usage="System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得包含錯誤資訊的可序列化物件型別。</summary>
        <value>表示可序列化錯誤類別的型別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例將示範如何使用 <xref:System.ServiceModel.FaultContractAttribute> 來指定 `SampleMethod` 作業可以傳回 SOAP 錯誤，連同 `GreetingFault` 的詳細型別。  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得指出 SOAP 錯誤訊息是否已指派保護層級的值。</summary>
        <value>如果錯誤訊息有保護層級則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A> 屬性指定 SOAP 錯誤訊息是否要加密、簽章，或兩者都進行。 如需詳細資訊，請參閱 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> 屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 Web 服務描述語言 (WSDL) 中的錯誤訊息名稱。</summary>
        <value>錯誤訊息名稱。 預設是用來做為錯誤詳細資料之型別的名稱。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 SOAP 錯誤的命名空間。</summary>
        <value>SOAP 錯誤的命名空間。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定 SOAP 錯誤從繫結要求的保護層級。</summary>
        <value>其中一個 <see cref="T:System.Net.Security.ProtectionLevel" /> 值。 預設值為 <see cref="F:System.Net.Security.ProtectionLevel.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用 <xref:System.ServiceModel.Description.FaultDescription.ProtectionLevel%2A?displayProperty=nameWithType> 屬性來指定傳送 SOAP 錯誤時，繫結必須加密、簽署，或兩者都進行的程度。 強烈建議在合約上，就明確指定作業錯誤的安全保護層級需求。 預設保護層級為 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>，表示您定義的 SOAP 錯誤訊息不需加密或數位簽章 (雖然您的繫結設定或許可以提供此支援)。 如果錯誤訊息含有敏感資訊或可能導致安全性問題的資訊，則強烈建議將 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> 屬性設為 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>。 如需有關安全性問題的詳細資訊，請參閱[了解保護層級](~/docs/framework/wcf/understanding-protection-level.md)。  
  
 執行階段的保護行為，是各個保護層級屬性的組合，這些屬性具有階層式結構。 除非針對較窄的範圍明確設定不同的值，否則，設定最外層的值會建立所有較窄範圍的預設值。 在此情況下，外部值仍為所有較窄範圍的預設值 (特別設定的範圍除外)。  
  
 例如，如果 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> 設定為 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>，而且沒有其他更窄的範圍具有保護層級設定，則作業合約中的所有訊息 (包括錯誤訊息) 都會加密並簽署。 但是，如果這些作業之一已將 <xref:System.ServiceModel.OperationContractAttribute> 設定為 <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>，則會簽署該作業的訊息，但是合約中的其他所有訊息 (包括錯誤訊息) 都會經過加密並簽署。  
  
 設定這些值的範圍如下：  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> 的 <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType> 屬性。  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> 的 <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType> 屬性。  
  
 當合約上未明確指定保護層級，而且基礎繫結可支援安全性 (不論是在傳輸層級或訊息層級) 時，整個合約的有效保護層級會是 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>。 如果繫結不支援安全性 (例如，<xref:System.ServiceModel.BasicHttpBinding>)，整個合約的有效 <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> 為 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>。 結果便是根據端點繫結的不同，用戶端可以要求不同的訊息或傳輸層級的安全性保護，即使當合約指定 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> 時亦然。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>