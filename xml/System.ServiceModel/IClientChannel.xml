<Type Name="IClientChannel" FullName="System.ServiceModel.IClientChannel">
  <TypeSignature Language="C#" Value="public interface IClientChannel : IDisposable, System.ServiceModel.IContextChannel, System.ServiceModel.IExtensibleObject&lt;System.ServiceModel.IContextChannel&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IClientChannel implements class System.IDisposable, class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject, class System.ServiceModel.IContextChannel, class System.ServiceModel.IExtensibleObject`1&lt;class System.ServiceModel.IContextChannel&gt;" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.IClientChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IClientChannel&#xA;Implements IContextChannel, IDisposable, IExtensibleObject(Of IContextChannel)" />
  <TypeSignature Language="C++ CLI" Value="public interface class IClientChannel : IDisposable, System::ServiceModel::IContextChannel, System::ServiceModel::IExtensibleObject&lt;System::ServiceModel::IContextChannel ^&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.IContextChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.IExtensibleObject&lt;System.ServiceModel.IContextChannel&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="36de7-101">定義用戶端應用程式所使用之傳出要求和要求/回覆通道的行為。</span><span class="sxs-lookup"><span data-stu-id="36de7-101">Defines the behavior of outbound request and request/reply channels used by client applications.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36de7-102"><xref:System.ServiceModel.IClientChannel> 介面會定義由 <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> 的呼叫所傳回之所有通道支援的作業。</span><span class="sxs-lookup"><span data-stu-id="36de7-102">The <xref:System.ServiceModel.IClientChannel> interface defines the operations supported by all channels returned by a call to <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="36de7-103">您可以使用 <xref:System.ServiceModel.IClientChannel> 方法和屬性來檢查並修改傳出型別通道。</span><span class="sxs-lookup"><span data-stu-id="36de7-103">Use the <xref:System.ServiceModel.IClientChannel> methods and properties to inspect and modify the outbound typed channel.</span></span> <span data-ttu-id="36de7-104">[ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)匯出<xref:System.ServiceModel.ClientBase%601>類別並藉由建立繼承自目標服務合約的合約介面的服務合約介面和<xref:System.ServiceModel.IClientChannel>，可讓您使用做為服務 proxy 的擴充的合約，以及存取用戶端通道。</span><span class="sxs-lookup"><span data-stu-id="36de7-104">The [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) exports both a <xref:System.ServiceModel.ClientBase%601> class and a service contract interface by creating a contract interface that inherits from both the target service contract and <xref:System.ServiceModel.IClientChannel>, enabling you to use the extended contract as both the proxy to the service and to access the client channel.</span></span>  
  
 <span data-ttu-id="36de7-105">如需詳細資訊，請參閱[WCF 用戶端架構](~/docs/framework/wcf/feature-details/client-architecture.md)。</span><span class="sxs-lookup"><span data-stu-id="36de7-105">For more information, see [WCF Client Architecture](~/docs/framework/wcf/feature-details/client-architecture.md).</span></span> <span data-ttu-id="36de7-106">部分在產生的用戶端程式碼檔案中的範例，請參閱[了解產生的用戶端程式碼](~/docs/framework/wcf/feature-details/understanding-generated-client-code.md)。</span><span class="sxs-lookup"><span data-stu-id="36de7-106">For examples of its appearance in generated client code files, see [Understanding Generated Client Code](~/docs/framework/wcf/feature-details/understanding-generated-client-code.md).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowInitializationUI">
      <MemberSignature Language="C#" Value="public bool AllowInitializationUI { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowInitializationUI" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.IClientChannel.AllowInitializationUI" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowInitializationUI As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowInitializationUI { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36de7-107">取得或設定值，這個值表示 <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> 是否嘗試呼叫 <see cref="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer" /> 屬性中的 <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers" /> 物件，或者是否擲回 (如果該集合不是空白的話)。</span><span class="sxs-lookup"><span data-stu-id="36de7-107">Gets or sets a value indicating whether <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> attempts to call the <see cref="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer" /> objects in the <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers" /> property or throws if that collection is not empty.</span></span></summary>
        <value>
          <span data-ttu-id="36de7-108">如果允許 [!INCLUDE[indigo1](~/includes/indigo1-md.md)] 叫用互動式通道初始設定式，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="36de7-108"><see langword="true" /> if [!INCLUDE[indigo1](~/includes/indigo1-md.md)] is permitted to invoke interactive channel initializers; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36de7-109">如果您想要擲回例外狀況 (Exception)，而非顯示初始化對話方塊，請將它設定為 `false`。</span><span class="sxs-lookup"><span data-stu-id="36de7-109">Set this to `false` if you want to throw an exception rather than display an initialization dialog.</span></span> <span data-ttu-id="36de7-110">在中介層 (Middle Tier) 案例中，如果您想要確保不會出現對話方塊 (即使應用程式已設定為顯示對話方塊)，這將很有用。</span><span class="sxs-lookup"><span data-stu-id="36de7-110">This is useful in a middle-tier scenario in which you want to guarantee that no dialog appears even if the application is configured to display one.</span></span> <span data-ttu-id="36de7-111">如需詳細資訊，請參閱[使用 WCF 用戶端存取服務](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md)和<xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="36de7-111">For details, see [Accessing Services Using a WCF Client](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md) and <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDisplayInitializationUI">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginDisplayInitializationUI (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginDisplayInitializationUI(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginDisplayInitializationUI (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginDisplayInitializationUI(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="36de7-112">當這個方法完成時所呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="36de7-112">The method that is called when this method completes.</span></span></param>
        <param name="state"><span data-ttu-id="36de7-113">通道狀態的相關資訊。</span><span class="sxs-lookup"><span data-stu-id="36de7-113">Information about the state of the channel.</span></span></param>
        <summary><span data-ttu-id="36de7-114">要開始使用使用者介面來取得認證資訊的非同步呼叫。</span><span class="sxs-lookup"><span data-stu-id="36de7-114">An asynchronous call to begin using a user interface to obtain credential information.</span></span></summary>
        <returns><span data-ttu-id="36de7-115">要在處理完成時用於回呼的 <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="36de7-115">The <see cref="T:System.IAsyncResult" /> to use to call back when processing has completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36de7-116">您可以呼叫這個方法，讓任何互動式通道進行初始化 (例如 CardSpace 卡選取範圍)。</span><span class="sxs-lookup"><span data-stu-id="36de7-116">Call this method to cause any interactive channel initialization (for example, CardSpace card selection) to occur.</span></span> <span data-ttu-id="36de7-117">如果在未明確呼叫 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 的情況下使用通道，則會自動呼叫這個方法，因此，對許多應用程式而言，這個呼叫是選擇性的。</span><span class="sxs-lookup"><span data-stu-id="36de7-117">This happens automatically if the channel is used without explicitly calling <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType>, so for many applications this call is optional.</span></span>  
  
 <span data-ttu-id="36de7-118">不過，如果使用者在選取程序花了很長時間，則自動呼叫這個方法的作業可能會逾時。為避免逾時，請明確呼叫 <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A> (或 <xref:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI%2A> 和 <xref:System.ServiceModel.IClientChannel.EndDisplayInitializationUI%2A>)。</span><span class="sxs-lookup"><span data-stu-id="36de7-118">However, if the user takes a long time in the selection process, the operation that automatically called this may time out. To prevent this, call <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A> or <xref:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI%2A> and <xref:System.ServiceModel.IClientChannel.EndDisplayInitializationUI%2A> explicitly.</span></span> <span data-ttu-id="36de7-119">這些作業不會逾時，並且可讓您精確控制這個對話方塊要出現在應用程式的哪個位置。</span><span class="sxs-lookup"><span data-stu-id="36de7-119">These operations do not time out and allow you to control exactly where in your application this dialog comes up.</span></span>  
  
 <span data-ttu-id="36de7-120">只有在應用程式已設定為顯示對話方塊時，這個方法才會顯示對話方塊。</span><span class="sxs-lookup"><span data-stu-id="36de7-120">This method only brings up a dialog if the application is configured to do so.</span></span> <span data-ttu-id="36de7-121">當應用程式未設定為使用 CardSpace 或另一個互動式通道初始設定式時，這個呼叫會傳回，而不會有任何動作。</span><span class="sxs-lookup"><span data-stu-id="36de7-121">When the application is not configured to use CardSpace or another interactive channel initializer, this call returns without any action.</span></span>  
  
 <span data-ttu-id="36de7-122">如果您明確呼叫這個方法，則在使用通道之前，也必須明確開啟該通道。</span><span class="sxs-lookup"><span data-stu-id="36de7-122">If you call this method explicitly, you must also explicitly open the channel before using it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidInteractiveInitialization">
      <MemberSignature Language="C#" Value="public bool DidInteractiveInitialization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DidInteractiveInitialization" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.IClientChannel.DidInteractiveInitialization" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DidInteractiveInitialization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DidInteractiveInitialization { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36de7-123">取得值，這個值表示是否已呼叫使用者介面，以取得認證資訊。</span><span class="sxs-lookup"><span data-stu-id="36de7-123">Gets a value indicating whether a call was done to a user interface to obtain credential information.</span></span></summary>
        <value>
          <span data-ttu-id="36de7-124">如果已呼叫 <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> 方法 (或 <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> 和 <see cref="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" /> 方法)，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="36de7-124"><see langword="true" /> if the <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> method was called (or the <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> and <see cref="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" /> methods; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36de7-125">在未呼叫 <xref:System.ServiceModel.IClientChannel> 和 <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A> 的情況下，如果在 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 上呼叫作業，則會自動呼叫這些方法。</span><span class="sxs-lookup"><span data-stu-id="36de7-125">If operations are called on an <xref:System.ServiceModel.IClientChannel> without calling <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A> and <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType>, these methods are called automatically.</span></span> <span data-ttu-id="36de7-126">如需詳細資訊，請參閱[使用 WCF 用戶端存取服務](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md)和<xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="36de7-126">For details, see [Accessing Services Using a WCF Client](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md) and <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayInitializationUI">
      <MemberSignature Language="C#" Value="public void DisplayInitializationUI ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisplayInitializationUI() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" />
      <MemberSignature Language="VB.NET" Value="Public Sub DisplayInitializationUI ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DisplayInitializationUI();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36de7-127">呼叫使用者介面來取得認證資訊。</span><span class="sxs-lookup"><span data-stu-id="36de7-127">A call to a user interface to obtain credential information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36de7-128">您可以呼叫這個方法，讓任何互動式通道進行初始化 (例如 CardSpace 卡選取範圍)。</span><span class="sxs-lookup"><span data-stu-id="36de7-128">Call this method to cause any interactive channel initialization (for example, CardSpace card selection) to occur.</span></span> <span data-ttu-id="36de7-129">如果在未明確呼叫 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 的情況下使用通道，則會自動呼叫這個方法，因此，對許多應用程式而言，這個呼叫是選擇性的。</span><span class="sxs-lookup"><span data-stu-id="36de7-129">This happens automatically if the channel is used without explicitly calling <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType>, so for many applications this call is optional.</span></span>  
  
 <span data-ttu-id="36de7-130">不過，如果使用者在選取程序花了很長時間，則自動呼叫這個方法的作業可能會逾時。為避免逾時，請明確呼叫 <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A> (或 <xref:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI%2A> 和 <xref:System.ServiceModel.IClientChannel.EndDisplayInitializationUI%2A>)。</span><span class="sxs-lookup"><span data-stu-id="36de7-130">However, if the user takes a long time in the selection process, the operation that automatically called this may time out. To prevent this, call <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A> or <xref:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI%2A> and <xref:System.ServiceModel.IClientChannel.EndDisplayInitializationUI%2A> explicitly.</span></span> <span data-ttu-id="36de7-131">這些作業不會逾時，並且可讓您精確控制這個對話方塊要出現在應用程式的哪個位置。</span><span class="sxs-lookup"><span data-stu-id="36de7-131">These operations do not time out and allow you to control exactly where in your application this dialog comes up.</span></span>  
  
 <span data-ttu-id="36de7-132">只有在應用程式已設定為顯示對話方塊時，這個方法才會顯示對話方塊。</span><span class="sxs-lookup"><span data-stu-id="36de7-132">This method only brings up a dialog if the application is configured to do so.</span></span> <span data-ttu-id="36de7-133">當應用程式未設定為使用 CardSpace 或另一個互動式通道初始設定式時，這個呼叫會傳回，而不會有任何動作。</span><span class="sxs-lookup"><span data-stu-id="36de7-133">When the application is not configured to use CardSpace or another interactive channel initializer, this call returns without any action.</span></span>  
  
 <span data-ttu-id="36de7-134">如果您明確呼叫這個方法，則在使用通道之前，也必須明確開啟該通道。</span><span class="sxs-lookup"><span data-stu-id="36de7-134">If you call this method explicitly, you must also explicitly open the channel before using it.</span></span>  
  
 <span data-ttu-id="36de7-135">如需詳細資訊，請參閱[使用 WCF 用戶端存取服務](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md)和<xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="36de7-135">For details, see [Accessing Services Using a WCF Client](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md) and <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndDisplayInitializationUI">
      <MemberSignature Language="C#" Value="public void EndDisplayInitializationUI (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndDisplayInitializationUI(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndDisplayInitializationUI (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndDisplayInitializationUI(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="36de7-136"><see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="36de7-136">The <see cref="T:System.IAsyncResult" />.</span></span></param>
        <summary><span data-ttu-id="36de7-137">當呼叫 <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> 已完成時呼叫。</span><span class="sxs-lookup"><span data-stu-id="36de7-137">Called when the call to <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> has finished.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownMessageReceived">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.ServiceModel.UnknownMessageReceivedEventArgs&gt; UnknownMessageReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ServiceModel.UnknownMessageReceivedEventArgs&gt; UnknownMessageReceived" />
      <MemberSignature Language="DocId" Value="E:System.ServiceModel.IClientChannel.UnknownMessageReceived" />
      <MemberSignature Language="VB.NET" Value="Event UnknownMessageReceived As EventHandler(Of UnknownMessageReceivedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ServiceModel::UnknownMessageReceivedEventArgs ^&gt; ^ UnknownMessageReceived;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ServiceModel.UnknownMessageReceivedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36de7-138">這是保留的事件。</span><span class="sxs-lookup"><span data-stu-id="36de7-138">This is a reserved event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Via">
      <MemberSignature Language="C#" Value="public Uri Via { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Via" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.IClientChannel.Via" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Via As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Via { Uri ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36de7-139">取得包含在用戶端通道上傳送訊息之目標傳輸位址的 URI。</span><span class="sxs-lookup"><span data-stu-id="36de7-139">Gets the URI that contains the transport address to which messages are sent on the client channel.</span></span></summary>
        <value><span data-ttu-id="36de7-140"><see cref="T:System.Uri" />，包含在通道上傳送訊息的目標傳輸位址。</span><span class="sxs-lookup"><span data-stu-id="36de7-140">The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the channel.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36de7-141">如果沒有指定 <xref:System.ServiceModel.EndpointAddress>，<xref:System.ServiceModel.IClientChannel.Via%2A> 會同時當做最終目的端和實體位址。</span><span class="sxs-lookup"><span data-stu-id="36de7-141">The <xref:System.ServiceModel.EndpointAddress> serves as both the ultimate destination and the physical address if a <xref:System.ServiceModel.IClientChannel.Via%2A> is not specified.</span></span> <span data-ttu-id="36de7-142">如果指定了 <xref:System.ServiceModel.IClientChannel.Via%2A>，這就是訊息傳送的實際實體目標位址，而且訊息必須透過這個位址，才能到達目的端。</span><span class="sxs-lookup"><span data-stu-id="36de7-142">If the <xref:System.ServiceModel.IClientChannel.Via%2A> is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination.</span></span> <span data-ttu-id="36de7-143">您可以使用 <xref:System.ServiceModel.Description.ClientViaBehavior?displayProperty=nameWithType> 從組態檔設定這個值。</span><span class="sxs-lookup"><span data-stu-id="36de7-143">This value can be set from a configuration file using the <xref:System.ServiceModel.Description.ClientViaBehavior?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>