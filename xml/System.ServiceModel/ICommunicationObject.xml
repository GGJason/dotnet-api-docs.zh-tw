<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ICommunicationObject.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5864e880f75f69ec7b5b1eaad2fa2a42f3c1377ea.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">864e880f75f69ec7b5b1eaad2fa2a42f3c1377ea</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Defines the contract for the basic state machine for all communication-oriented objects in the system, including channels, the channel managers, factories, listeners, and dispatchers, and service hosts.</source>
          <target state="translated">定義系統中所有通訊導向物件 (包括通道、通道管理員、處理站、接聽程式、發送器和服務主機) 的基本狀態機器合約。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> interface defines:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 介面會定義︰</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>A set of open, close and abort methods for initiating state transitions:</source>
          <target state="translated">用來起始狀態轉換的一組開啟、關閉與中止方法︰</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Asynchronous versions of the open and close methods:</source>
          <target state="translated">開啟與關閉方法的非同步版本︰</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>A set of events that provide notifications of state transitions:</source>
          <target state="translated">提供狀態轉換通知的一組事件︰</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>A common <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.State%2A&gt;</ph> property for inspecting the state of an object</source>
          <target state="translated">用來檢查物件狀態的通用 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.State%2A&gt;</ph> 屬性</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Abort">
          <source>Causes a communication object to transition immediately from its current state into the closed state.</source>
          <target state="translated">導致通訊物件立即從目前的狀態轉換為已關閉狀態。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Abort">
          <source>This method indicates that any unfinished work should be ignored or ungracefully terminated before returning.</source>
          <target state="translated">這個方法表示應該忽略任何未完成的工作，或在傳回前強制終止。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Abort">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Abort%2A&gt;</ph> method can be used to cancel any outstanding operations, including outstanding calls to <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
          <target state="translated">您可以使用 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Abort%2A&gt;</ph> 方法來取消任何未處理的作業，包括未處理的 <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> 呼叫。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Abort">
          <source>To gracefully transition an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state call <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
          <target state="translated">若要正常地將 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 從 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> 狀態轉換為 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> 狀態，請呼叫 <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Begins an asynchronous operation to close a communication object.</source>
          <target state="translated">開始非同步作業以關閉通訊物件。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state.</source>
          <target state="translated">這個方法會讓 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 正常地從 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> 狀態轉換為 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Versions with and without an explicit timeout are provided.</source>
          <target state="translated">有明確逾時或無明確逾時的版本都會提供。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives notification of the completion of the asynchronous close operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 委派，這個委派會接收完成非同步關閉作業的通知。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous close operation.</source>
          <target state="translated">應用程式所指定的物件，其中包含與非同步關閉作業關聯的狀態資訊。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to close a communication object.</source>
          <target state="translated">開始非同步作業以關閉通訊物件。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous close operation.</source>
          <target state="translated">參考非同步關閉作業的 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from any state, other than the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state.</source>
          <target state="translated">這個方法會讓 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 正常地從任何狀態 (除了 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> 狀態以外) 轉換為 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> 方法可讓任何未完成的工作在傳回前完成 </target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>For example, finish sending any buffered messages).</source>
          <target state="translated">(例如，完成傳送任何經過緩衝處理的訊息)。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">已針對處於 <ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> 狀態中的物件呼叫 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
          <source>The default timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">經過預設的逾時時間之後，就可以正常關閉 <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，指定必須在逾時前多久完成傳送作業。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives notification of the completion of the asynchronous close operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 委派，這個委派會接收完成非同步關閉作業的通知。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous close operation.</source>
          <target state="translated">應用程式所指定的物件，其中包含與非同步關閉作業關聯的狀態資訊。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to close a communication object with a specified timeout.</source>
          <target state="translated">開始非同步作業，關閉有已指定逾時的通訊物件。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous close operation.</source>
          <target state="translated">參考非同步關閉作業的 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from any state, other than the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state with in a specified interval of time.</source>
          <target state="translated">這個方法可在指定時間間隔內，讓 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 正常地從 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> 狀態轉換為 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> 方法可讓任何未完成的工作在傳回前完成 </target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>For example, finish sending any buffered messages).</source>
          <target state="translated">(例如，完成傳送任何經過緩衝處理的訊息)。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">已針對處於 <ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> 狀態中的物件呼叫 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The specified timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">經過指定的逾時時間之後，就可以正常關閉 <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Begins an asynchronous operation to close a communication object.</source>
          <target state="translated">開始非同步作業以關閉通訊物件。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until its transition to the <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state is completed or fails.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> 方法會讓 <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 進入並維持 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> 狀態，直到轉換至 <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> 狀態結束或失敗為止。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Versions with and without an explicit timeout are provided.</source>
          <target state="translated">有明確逾時或無明確逾時的版本都會提供。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives notification of the completion of the asynchronous open operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 委派，這個委派會接收非同步開啟作業完成的通知。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous open operation.</source>
          <target state="translated">應用程式所指定的物件，其中包含與非同步開啟作業相關聯的狀態資訊。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to open a communication object.</source>
          <target state="translated">開始非同步作業以開啟通訊物件。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous open operation.</source>
          <target state="translated">參考非同步開啟作業的 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
          <target state="translated">當具現化 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 時，它一開始會處於 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> 狀態下，可以設定物件 (例如可以設定屬性或註冊事件)，但是仍無法傳送或接收訊息。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> 方法會使 <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 進入並維持 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> 狀態，直到開啟作業成功、開啟作業逾時或失敗、物件發生錯誤或中止 <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 為止。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> 狀態下，<ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 可供使用 (例如可以接受訊息)，但是無法再進行設定。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> 無法開啟，而且已進入 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
          <source>The default open timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">經過預設的開啟逾時時間之後，<ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> 就可以進入 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> 狀態，而且也已進入 <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，指定必須在逾時前多久完成傳送作業。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives notification of the completion of the asynchronous open operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 委派，這個委派會接收非同步開啟作業完成的通知。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous open operation.</source>
          <target state="translated">應用程式所指定的物件，其中包含與非同步開啟作業相關聯的狀態資訊。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to open a communication object within a specified interval of time.</source>
          <target state="translated">開始非同步作業，開啟有已指定時間間隔的通訊物件。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous open operation.</source>
          <target state="translated">參考非同步開啟作業的 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
          <target state="translated">當具現化 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 時，它一開始會處於 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> 狀態下，可以設定物件 (例如可以設定屬性或註冊事件)，但是仍無法傳送或接收訊息。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> 方法會使 <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 進入並維持 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> 狀態，直到開啟作業成功、開啟作業逾時或失敗、物件發生錯誤或中止 <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 為止。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> 狀態下，<ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 可供使用 (例如可以接受訊息)，但是無法再進行設定。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> 無法開啟，而且已進入 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The specified timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">經過指定的逾時時間之後，<ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> 就可以進入 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> 狀態，而且也已進入 <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation must throw a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">如果超出了指定的 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>，此作業必須擲回 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Causes a communication object to transition from its current state into the closed state.</source>
          <target state="translated">導致通訊物件從目前的狀態轉換為已關閉狀態。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>Causes a communication object to transition from its current state into the closed state.</source>
          <target state="translated">導致通訊物件從目前的狀態轉換為已關閉狀態。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state.</source>
          <target state="translated">這個方法會讓 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 正常地從 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> 狀態轉換為 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> 方法可讓任何未完成的工作在傳回前完成 </target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>For example, finish sending any buffered messages).</source>
          <target state="translated">(例如，完成傳送任何經過緩衝處理的訊息)。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> enters the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> state and remains in it until the transition to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is completed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 會進入並維持 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> 狀態，直到轉換至 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> 狀態結束為止。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> returns once the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is reached.</source>
          <target state="translated">一旦到達 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> 狀態，就會傳回 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>If the default close timeout elapses before the <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is able to close gracefully, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">如果在 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 可以正常關閉前，經過了預設關閉逾時時間，就會中止 <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceModel.CommunicationState.Faulted&gt;</ph> state, the <ph id="ph6">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">如果針對處於 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>、<ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 或 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> 狀態的 <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> 呼叫 <ph id="ph5">&lt;xref:System.ServiceModel.CommunicationState.Faulted&gt;</ph>，就會中止 <ph id="ph6">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state, the call returns immediately.</source>
          <target state="translated">如果針對處於 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> 或 <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 狀態的 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> 呼叫 <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>，就會立刻傳回該呼叫。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>There is also an asynchronous version of the close method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
          <target state="translated">也有非同步的方式可用於關閉方法，亦即藉由呼叫 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> 啟始，呼叫 <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> 完成。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.Close" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">已針對處於 <ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.Close" /&gt;</ph> 狀態中的物件呼叫 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close">
          <source>The default close timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">經過預設的關閉逾時時間之後，就可以正常關閉 <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，指定必須在逾時前多久完成傳送作業。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>Causes a communication object to transition from its current state into the closed state.</source>
          <target state="translated">導致通訊物件從目前的狀態轉換為已關閉狀態。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>This method causes an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to gracefully transition from the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state within a specified interval of time.</source>
          <target state="translated">這個方法可在指定時間間隔內，讓 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 正常地從 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> 狀態轉換為 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> method allows any unfinished work to be completed before returning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> 方法可讓任何未完成的工作在傳回前完成 </target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>For example, finish sending any buffered messages).</source>
          <target state="translated">(例如，完成傳送任何經過緩衝處理的訊息)。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> enters the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> state and remains in it until the transition to the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is completed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 會進入並維持 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> 狀態，直到轉換至 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> 狀態結束為止。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> returns once the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state is reached.</source>
          <target state="translated">一旦到達 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> 狀態，就會傳回 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>If the timeout elapses before the <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is able to gracefully close, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">如果在 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 可以正常關閉前，經過了逾時時間，就會中止 <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph>, or <ph id="ph5">&lt;xref:System.ServiceModel.CommunicationState.Faulted&gt;</ph> state, the <ph id="ph6">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated">如果針對處於 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>、<ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 或 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> 狀態的 <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> 呼叫 <ph id="ph5">&lt;xref:System.ServiceModel.CommunicationState.Faulted&gt;</ph>，就會中止 <ph id="ph6">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>If <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> is called on an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state, the call returns immediately.</source>
          <target state="translated">如果針對處於 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> 或 <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 狀態的 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Closing&gt;</ph> 呼叫 <ph id="ph4">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph>，就會立刻傳回該呼叫。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>There is also an asynchronous version of the close method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
          <target state="translated">也有非同步的方式可用於關閉方法，亦即藉由呼叫 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> 啟始，呼叫 <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> 完成。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source><ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.Close" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">已針對處於 <ph id="ph1">&lt;see cref="M:System.ServiceModel.ICommunicationObject.Close" /&gt;</ph> 狀態中的物件呼叫 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">經過逾時時間之後，就可以正常關閉 <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
          <source>The operation must throw a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">如果超出了指定的 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>，此作業必須擲回 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Closed">
          <source>Occurs when the communication object completes its transition from the closing state into the closed state.</source>
          <target state="translated">當通訊物件從關閉中狀態轉換為已關閉狀態完成時發生。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Closing">
          <source>Occurs when the communication object first enters the closing state.</source>
          <target state="translated">當通訊物件第一次進入關閉中狀態時發生。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ServiceModel.ICommunicationObject.Closing">
          <source>This event occurs when the communication object first begins to transition from the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state into the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> state, immediately after either the <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> method is invoked.</source>
          <target state="translated">緊接在叫用 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> 或 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Closed&gt;</ph> 方法後，通訊物件會先開始從 <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph> 狀態轉換為 <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.BeginClose%2A&gt;</ph> 狀態時，此時就會發生這個事件。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that is returned by a call to the <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，在呼叫 <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> 方法時所傳回。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
          <source>Completes an asynchronous operation to close a communication object.</source>
          <target state="translated">完成非同步作業以關閉通訊物件。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
          <source><ph id="ph1">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> was called on an object in the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">已針對處於 <ph id="ph1">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginClose" /&gt;</ph> 狀態中的物件呼叫 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
          <source>The timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to close gracefully.</source>
          <target state="translated">經過逾時時間之後，就可以正常關閉 <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that is returned by a call to the <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginOpen" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>，在呼叫 <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.ICommunicationObject.BeginOpen" /&gt;</ph> 方法時所傳回。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
          <source>Completes an asynchronous operation to open a communication object.</source>
          <target state="translated">完成非同步作業以開啟通訊物件。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> 無法開啟，而且已進入 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
          <source>The timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">經過逾時時間之後，<ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> 就可以進入 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> 狀態，而且也已進入 <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Faulted">
          <source>Occurs when the communication object first enters the faulted state.</source>
          <target state="translated">當通訊物件第一次進入錯誤狀態時發生。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Causes a communication object to transition from the created state into the opened state.</source>
          <target state="translated">導致通訊物件從已建立狀態轉換為已開啟狀態。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.ICommunicationObject">
          <source>Versions with and without an explicit timeout are provided.</source>
          <target state="translated">有明確逾時或無明確逾時的版本都會提供。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>Causes a communication object to transition from the created state into the opened state.</source>
          <target state="translated">導致通訊物件從已建立狀態轉換為已開啟狀態。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
          <target state="translated">當具現化 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 時，它一開始會處於 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> 狀態下，可以設定物件 (例如可以設定屬性或註冊事件)，但是仍無法傳送或接收訊息。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> 方法會使 <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 進入並維持 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> 狀態，直到開啟作業成功、開啟作業逾時或失敗、物件發生錯誤或中止 <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 為止。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> 狀態下，<ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 可供使用 (例如可以接受訊息)，但是無法再進行設定。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>There is also an asynchronous version of the open method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.EndOpen%28System.IAsyncResult%29&gt;</ph>.</source>
          <target state="translated">也有非同步的方式可用於開啟方法，亦即藉由呼叫 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> 啟始，呼叫 <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.EndOpen%28System.IAsyncResult%29&gt;</ph> 完成。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> 無法開啟，而且已進入 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open">
          <source>The default open timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">經過預設的開啟逾時時間之後，<ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> 就可以進入 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> 狀態，而且也已進入 <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the send operation has to complete before timing out.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>，指定必須在逾時前多久完成傳送作業。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>Causes a communication object to transition from the created state into the opened state within a specified interval of time.</source>
          <target state="translated">在指定時間間隔內，讓通訊物件從已建立狀態轉換為已開啟狀態。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is instantiated, it begins in the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state.</source>
          <target state="translated">當具現化 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 時，它一開始會處於 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state, the object can be configured (for example, properties can be set, or events can be registered), but it is not yet usable to send or receive messages.</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> 狀態下，可以設定物件 (例如可以設定屬性或註冊事件)，但是仍無法傳送或接收訊息。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> method causes an <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> to enter into the <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> state where it remains until the open operation succeeds, the open operation times out or fails and the object becomes faulted, or the <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is aborted.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> 方法會使 <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 進入並維持 <ph id="ph3">&lt;xref:System.ServiceModel.CommunicationState.Opening&gt;</ph> 狀態，直到開啟作業成功、開啟作業逾時或失敗、物件發生錯誤或中止 <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 為止。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>In the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> is usable (for example, messages can be received), but it is no longer configurable.</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> 狀態下，<ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 可供使用 (例如可以接受訊息)，但是無法再進行設定。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>There is also an asynchronous version of the open method that is initiated by calling <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> and completed by calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.EndOpen%28System.IAsyncResult%29&gt;</ph>.</source>
          <target state="translated">也有非同步的方式可用於開啟方法，亦即藉由呼叫 <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> 啟始，呼叫 <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.EndOpen%28System.IAsyncResult%29&gt;</ph> 完成。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was unable to be opened and has entered the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> 無法開啟，而且已進入 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The specified timeout elapsed before the <ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> was able to enter the <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> state and has entered the <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> state.</source>
          <target state="translated">經過指定的逾時時間之後，<ph id="ph1">&lt;see cref="T:System.ServiceModel.ICommunicationObject" /&gt;</ph> 就可以進入 <ph id="ph2">&lt;see cref="F:System.ServiceModel.CommunicationState.Opened" /&gt;</ph> 狀態，而且也已進入 <ph id="ph3">&lt;see cref="F:System.ServiceModel.CommunicationState.Faulted" /&gt;</ph> 狀態。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
          <source>The operation must throw a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">如果超出了指定的 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>，此作業必須擲回 <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Opened">
          <source>Occurs when the communication object completes its transition from the opening state into the opened state.</source>
          <target state="translated">當通訊物件從開啟中狀態轉換為已開啟狀態結束時發生。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="E:System.ServiceModel.ICommunicationObject.Opening">
          <source>Occurs when the communication object first enters the opening state.</source>
          <target state="translated">當通訊物件第一次進入開啟中狀態時發生。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ServiceModel.ICommunicationObject.Opening">
          <source>This event occurs when the communication object first begins to transition from the <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> state into the <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> state, immediately after either the <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> method is invoked.</source>
          <target state="translated">緊接在叫用 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> 或 <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph> 方法後，通訊物件會先開始從 <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> 狀態轉換為 <ph id="ph4">&lt;xref:System.ServiceModel.ICommunicationObject.BeginOpen%2A&gt;</ph> 狀態時，此時就會發生這個事件。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>Gets the current state of the communication-oriented object.</source>
          <target state="translated">取得通訊導向物件的目前狀態。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>The value of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationState" /&gt;</ph> of the object.</source>
          <target state="translated">物件的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationState" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>The main communication states available to an <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> are:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject&gt;</ph> 可用的主要通訊狀態有︰</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState.Created&gt;</ph> <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationState.Opened&gt;</ph></target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>There are also transitory states that such an object can occupy when transitioning between the first three main states:</source>
          <target state="translated">在下面三個主要狀態間轉換時，這類物件也可能處於某些過渡狀態：</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.ICommunicationObject.State">
          <source>This <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState&gt;</ph> defines the states that are valid for all communication-oriented objects in the system, including channels, listeners, the channel and listener factories, and the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> class.</source>
          <target state="translated">這個 <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationState&gt;</ph> 會定義適用於系統中所有通訊導向物件的狀態，這些物件包括通道、接聽程式、通道與接聽程式處理站，以及 <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> 類別。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>