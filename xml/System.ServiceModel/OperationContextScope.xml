<Type Name="OperationContextScope" FullName="System.ServiceModel.OperationContextScope">
  <Metadata><Meta Name="ms.openlocfilehash" Value="40f9d7eb2a12aa6aeb7c0ce6a9da8e1e44c42c67" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37451812" /></Metadata><TypeSignature Language="C#" Value="public sealed class OperationContextScope : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OperationContextScope extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.OperationContextScope" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OperationContextScope&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OperationContextScope sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type OperationContextScope = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="8c982-101">建立一個區塊，<see cref="T:System.ServiceModel.OperationContext" /> 物件在其範圍之內。</span><span class="sxs-lookup"><span data-stu-id="8c982-101">Creates a block within which an <see cref="T:System.ServiceModel.OperationContext" /> object is in scope.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c982-102">使用 <xref:System.ServiceModel.OperationContextScope> 類別建立特定 <xref:System.ServiceModel.OperationContext> 物件的範圍，或使用指定的 <xref:System.ServiceModel.OperationContext><xref:System.ServiceModel.IContextChannel>物件建立新  物件的範圍。</span><span class="sxs-lookup"><span data-stu-id="8c982-102">Use the <xref:System.ServiceModel.OperationContextScope> class to create a scope for a specific <xref:System.ServiceModel.OperationContext> object or a scope for a new <xref:System.ServiceModel.OperationContext> object using a specified <xref:System.ServiceModel.IContextChannel> object.</span></span> <span data-ttu-id="8c982-103"><xref:System.ServiceModel.OperationContextScope>可以用於 Windows Communication Foundation (WCF) 服務或 WCF 用戶端應用程式。</span><span class="sxs-lookup"><span data-stu-id="8c982-103">An <xref:System.ServiceModel.OperationContextScope> can be used in a Windows Communication Foundation (WCF) service or WCF client application.</span></span>  
  
 <span data-ttu-id="8c982-104">一旦 <xref:System.ServiceModel.OperationContextScope> 物件建立了目前的作業內容，您便可使用 <xref:System.ServiceModel.OperationContext> 來進行下列動作︰</span><span class="sxs-lookup"><span data-stu-id="8c982-104">Once the <xref:System.ServiceModel.OperationContextScope> object has established the current operation context, you can use the <xref:System.ServiceModel.OperationContext> to:</span></span>  
  
-   <span data-ttu-id="8c982-105">存取並修改傳入與傳出訊息的標頭與其他屬性。</span><span class="sxs-lookup"><span data-stu-id="8c982-105">Access and modify incoming and outgoing message headers and other properties.</span></span>  
  
-   <span data-ttu-id="8c982-106">存取執行階段，包括發送器、主機、通道與擴充部分。</span><span class="sxs-lookup"><span data-stu-id="8c982-106">Access the runtime, including dispatchers, the host, channel, and extensions.</span></span>  
  
-   <span data-ttu-id="8c982-107">存取其他型別的內容，例如安全性、執行個體與要求內容。</span><span class="sxs-lookup"><span data-stu-id="8c982-107">Access other types of contexts, such as security, instance, and request contexts.</span></span>  
  
-   <span data-ttu-id="8c982-108">存取與 <xref:System.ServiceModel.OperationContext> 物件相關的通道，或相關通道的工作階段識別項 (若該通道實作了 <xref:System.ServiceModel.Channels.ISession?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="8c982-108">Access the channel associated with the <xref:System.ServiceModel.OperationContext> object or (if the channel implements <xref:System.ServiceModel.Channels.ISession?displayProperty=nameWithType>) the associated channel's session identifier.</span></span>  
  
 <span data-ttu-id="8c982-109">建立 <xref:System.ServiceModel.OperationContextScope> 時，會儲存目前的 <xref:System.ServiceModel.OperationContext>，且新的 <xref:System.ServiceModel.OperationContext> 會成為 <xref:System.ServiceModel.OperationContext.Current%2A> 屬性所傳回的物件。</span><span class="sxs-lookup"><span data-stu-id="8c982-109">When an <xref:System.ServiceModel.OperationContextScope> is created, the current <xref:System.ServiceModel.OperationContext> is stored and the new <xref:System.ServiceModel.OperationContext> becomes the one returned by the <xref:System.ServiceModel.OperationContext.Current%2A> property.</span></span> <span data-ttu-id="8c982-110">處置 <xref:System.ServiceModel.OperationContextScope> 時，原本的 <xref:System.ServiceModel.OperationContext> 便會還原。</span><span class="sxs-lookup"><span data-stu-id="8c982-110">When the <xref:System.ServiceModel.OperationContextScope> is disposed, the original <xref:System.ServiceModel.OperationContext> is restored.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="8c982-111">請勿使用 OperationContextScope 區塊內的非同步 「 等候 」 模式。</span><span class="sxs-lookup"><span data-stu-id="8c982-111">Do not use the asynchronous "await" pattern within a OperationContextScope block.</span></span> <span data-ttu-id="8c982-112">接續時，它可能在不同的執行緒上執行，並且 OperationContextScope 為特定的執行緒。</span><span class="sxs-lookup"><span data-stu-id="8c982-112">When the continuation occurs, it may run on a different thread and OperationContextScope is thread specific.</span></span> <span data-ttu-id="8c982-113">如果您需要呼叫 await > 非同步呼叫，則會使用 OperationContextScope 區塊之外。</span><span class="sxs-lookup"><span data-stu-id="8c982-113">If you need to call "await" for an async call, use it outside of the OperationContextScope block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c982-114">下列範例將示範如何使用 <xref:System.ServiceModel.OperationContextScope> 於用戶端應用程式內建立新的內容，以便將自訂標頭新增至傳出訊息。</span><span class="sxs-lookup"><span data-stu-id="8c982-114">The following example shows how to use the <xref:System.ServiceModel.OperationContextScope> to create a new context in a client application to add a custom header to the outgoing message.</span></span>  
  
 [!code-csharp[OperationContextScope#3](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/client.cs#3)]
 [!code-vb[OperationContextScope#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c982-115">初始化 <see cref="T:System.ServiceModel.OperationContextScope" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="8c982-115">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContextScope (System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (channel As IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContextScope(System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.OperationContextScope : System.ServiceModel.IContextChannel -&gt; System.ServiceModel.OperationContextScope" Usage="new System.ServiceModel.OperationContextScope channel" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="channel"><span data-ttu-id="8c982-116">為新的 <see cref="T:System.ServiceModel.OperationContext" /> 建立範圍時使用的通道。</span><span class="sxs-lookup"><span data-stu-id="8c982-116">The channel to use when creating the scope for a new <see cref="T:System.ServiceModel.OperationContext" />.</span></span></param>
        <summary><span data-ttu-id="8c982-117">初始化 <see cref="T:System.ServiceModel.OperationContextScope" /> 類別的新執行個體，此執行個體使用指定的 <see cref="T:System.ServiceModel.IContextChannel" /> 建立該範圍的新 <see cref="T:System.ServiceModel.OperationContext" />。</span><span class="sxs-lookup"><span data-stu-id="8c982-117">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class that uses the specified <see cref="T:System.ServiceModel.IContextChannel" /> to create a new <see cref="T:System.ServiceModel.OperationContext" /> for the scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c982-118">使用 <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> 建構函式為用戶端通道建立新的 <xref:System.ServiceModel.OperationContext>，可使用它新增或修改傳出訊息標頭、讀取傳入訊息標頭，或存取 <xref:System.ServiceModel.OperationContext> 的其他執行階段屬性。</span><span class="sxs-lookup"><span data-stu-id="8c982-118">Use the <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> constructor to create a new <xref:System.ServiceModel.OperationContext> for a client channel that can be used to add or modify outbound message headers, read incoming message headers, or access other run-time properties of the <xref:System.ServiceModel.OperationContext>.</span></span>  
  
 <span data-ttu-id="8c982-119">在新建立的 <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=nameWithType><xref:System.ServiceModel.OperationContext>的 <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> 屬性中所加入的標頭，只適用於傳遞給  建構函式的通道。</span><span class="sxs-lookup"><span data-stu-id="8c982-119">The headers added to the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=nameWithType> property of the newly created <xref:System.ServiceModel.OperationContext> apply only to the channel that was passed to the <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> constructor.</span></span> <span data-ttu-id="8c982-120">如果使用者在此範圍內建立新的通道，那麼該標頭便不會套用至這個新通道所傳送的訊息上。</span><span class="sxs-lookup"><span data-stu-id="8c982-120">If the user creates a new channel within its scope then the headers are not applied to messages sent on the new channel.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c982-121">下列範例將示範如何使用 <xref:System.ServiceModel.OperationContextScope> 於用戶端應用程式內建立新的內容，以便將自訂標頭新增至傳出訊息。</span><span class="sxs-lookup"><span data-stu-id="8c982-121">The following example shows how to use the <xref:System.ServiceModel.OperationContextScope> to create a new context in a client application in order to add a custom header to the outgoing message.</span></span>  
  
 [!code-csharp[OperationContextScope#4](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/client.cs#4)]
 [!code-vb[OperationContextScope#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/client.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContextScope (System.ServiceModel.OperationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.OperationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContextScope(System::ServiceModel::OperationContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.OperationContextScope : System.ServiceModel.OperationContext -&gt; System.ServiceModel.OperationContextScope" Usage="new System.ServiceModel.OperationContextScope context" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="8c982-122">建立的範圍內的使用中 <see cref="T:System.ServiceModel.OperationContext" />。</span><span class="sxs-lookup"><span data-stu-id="8c982-122">The active <see cref="T:System.ServiceModel.OperationContext" /> in the created scope.</span></span></param>
        <summary><span data-ttu-id="8c982-123">初始化 <see cref="T:System.ServiceModel.OperationContextScope" /> 類別的新執行個體，以建立指定 <see cref="T:System.ServiceModel.OperationContext" /> 物件的範圍。</span><span class="sxs-lookup"><span data-stu-id="8c982-123">Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class to create a scope for the specified <see cref="T:System.ServiceModel.OperationContext" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c982-124">使用 <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> 建構函式建立一個程式碼區塊，其中之指定的 <xref:System.ServiceModel.OperationContextScope> 物件是目前的範圍。</span><span class="sxs-lookup"><span data-stu-id="8c982-124">Use the <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> constructor to create a code block within which the specified <xref:System.ServiceModel.OperationContextScope> object is the current scope.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="operationContextScope.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8c982-125">將原本的 <see cref="T:System.ServiceModel.OperationContext" /> 還原至使用中的內容，並回收 <see cref="T:System.ServiceModel.OperationContextScope" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="8c982-125">Restores the original <see cref="T:System.ServiceModel.OperationContext" /> to the active context and recycles the <see cref="T:System.ServiceModel.OperationContextScope" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>