<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="OperationContextScope.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac592b68d48771b6c7c4987c3fb267fd7fc41d167e5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92b68d48771b6c7c4987c3fb267fd7fc41d167e5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.OperationContextScope">
          <source>Creates a block within which an <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> object is in scope.</source>
          <target state="translated">建立一個區塊，<ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> 物件在其範圍之內。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> class to create a scope for a specific <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> object or a scope for a new <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> object using a specified <ph id="ph4">&lt;xref:System.ServiceModel.IContextChannel&gt;</ph> object.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> 類別建立特定 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> 物件的範圍，或使用指定的 <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph><ph id="ph4">&lt;xref:System.ServiceModel.IContextChannel&gt;</ph>物件建立新  物件的範圍。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>An <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> can be used in a <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> service or <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> client application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> 可在 <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> 服務或 <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 用戶端應用程式中使用。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>Once the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> object has established the current operation context, you can use the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> to:</source>
          <target state="translated">一旦 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> 物件建立了目前的作業內容，您便可使用 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> 來進行下列動作︰</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>Access and modify incoming and outgoing message headers and other properties.</source>
          <target state="translated">存取並修改傳入與傳出訊息的標頭與其他屬性。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>Access the runtime, including dispatchers, the host, channel, and extensions.</source>
          <target state="translated">存取執行階段，包括發送器、主機、通道與擴充部分。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>Access other types of contexts, such as security, instance, and request contexts.</source>
          <target state="translated">存取其他型別的內容，例如安全性、執行個體與要求內容。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>Access the channel associated with the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> object or (if the channel implements <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ISession?displayProperty=nameWithType&gt;</ph>) the associated channel's session identifier.</source>
          <target state="translated">存取與 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> 物件相關的通道，或相關通道的工作階段識別項 (若該通道實作了 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ISession?displayProperty=nameWithType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> is created, the current <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> is stored and the new <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> becomes the one returned by the <ph id="ph4">&lt;xref:System.ServiceModel.OperationContext.Current%2A&gt;</ph> property.</source>
          <target state="translated">建立 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> 時，會儲存目前的 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph>，且新的 <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> 會成為 <ph id="ph4">&lt;xref:System.ServiceModel.OperationContext.Current%2A&gt;</ph> 屬性所傳回的物件。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>When the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> is disposed, the original <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> is restored.</source>
          <target state="translated">處置 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> 時，原本的 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> 便會還原。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>Do not use the asynchronous "await" pattern within a OperationContextScope block.</source>
          <target state="translated">請勿使用 OperationContextScope 區塊內的非同步 「 等候 」 模式。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>When the continuation occurs, it may run on a different thread and OperationContextScope is thread specific.</source>
          <target state="translated">接續發生時，它可能在不同的執行緒上執行並 OperationContextScope 具備特定的執行緒。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>If you need to call "await" for an async call, use it outside of the OperationContextScope block.</source>
          <target state="translated">如果您需要呼叫 &lt; await &gt; 的非同步呼叫，則會使用 OperationContextScope 區塊之外。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.OperationContextScope">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> to create a new context in a client application to add a custom header to the outgoing message.</source>
          <target state="translated">下列範例將示範如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> 於用戶端應用程式內建立新的內容，以便將自訂標頭新增至傳出訊息。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.OperationContextScope">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
          <source>The channel to use when creating the scope for a new <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph>.</source>
          <target state="translated">為新的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> 建立範圍時使用的通道。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> class that uses the specified <ph id="ph2">&lt;see cref="T:System.ServiceModel.IContextChannel" /&gt;</ph> to create a new <ph id="ph3">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> for the scope.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> 類別的新執行個體，此執行個體使用指定的 <ph id="ph2">&lt;see cref="T:System.ServiceModel.IContextChannel" /&gt;</ph> 建立該範圍的新 <ph id="ph3">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph> constructor to create a new <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> for a client channel that can be used to add or modify outbound message headers, read incoming message headers, or access other run-time properties of the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph>.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph> 建構函式為用戶端通道建立新的 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph>，可使用它新增或修改傳出訊息標頭、讀取傳入訊息標頭，或存取 <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> 的其他執行階段屬性。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
          <source>The headers added to the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=nameWithType&gt;</ph> property of the newly created <ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph> apply only to the channel that was passed to the <ph id="ph3">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">在新建立的 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=nameWithType&gt;</ph><ph id="ph2">&lt;xref:System.ServiceModel.OperationContext&gt;</ph>的 <ph id="ph3">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph> 屬性中所加入的標頭，只適用於傳遞給  建構函式的通道。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
          <source>If the user creates a new channel within its scope then the headers are not applied to messages sent on the new channel.</source>
          <target state="translated">如果使用者在此範圍內建立新的通道，那麼該標頭便不會套用至這個新通道所傳送的訊息上。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> to create a new context in a client application in order to add a custom header to the outgoing message.</source>
          <target state="translated">下列範例將示範如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> 於用戶端應用程式內建立新的內容，以便將自訂標頭新增至傳出訊息。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)">
          <source>The active <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> in the created scope.</source>
          <target state="translated">建立的範圍內的使用中 <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> class to create a scope for the specified <ph id="ph2">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> object.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> 類別的新執行個體，以建立指定 <ph id="ph2">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> 物件的範圍。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph> constructor to create a code block within which the specified <ph id="ph2">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> object is the current scope.</source>
          <target state="translated">使用 <ph id="ph1">&lt;xref:System.ServiceModel.OperationContextScope.%23ctor%2A&gt;</ph> 建構函式建立一個程式碼區塊，其中之指定的 <ph id="ph2">&lt;xref:System.ServiceModel.OperationContextScope&gt;</ph> 物件是目前的範圍。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.OperationContextScope.Dispose">
          <source>Restores the original <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> to the active context and recycles the <ph id="ph2">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> object.</source>
          <target state="translated">將原本的 <ph id="ph1">&lt;see cref="T:System.ServiceModel.OperationContext" /&gt;</ph> 還原至使用中的內容，並回收 <ph id="ph2">&lt;see cref="T:System.ServiceModel.OperationContextScope" /&gt;</ph> 物件。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>