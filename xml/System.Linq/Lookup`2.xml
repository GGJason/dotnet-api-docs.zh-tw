<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Lookup`2.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae25fbb5-14a8-44f2-90c2-3c6d6fcaae7fbce0c33c358c210c3ec845aee721d6b9450d344e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bce0c33c358c210c3ec845aee721d6b9450d344e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b899505ed6d42225f2b3c9150bfdc080d0d1f9b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/28/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The type of the keys in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 中之索引鍵的型別。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The type of the elements of each <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> value in the <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 中每個 <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 值的項目型別。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Linq.Lookup`2">
          <source>Represents a collection of keys each mapped to one or more values.</source>
          <target state="translated">代表索引鍵的集合，每個索引鍵對應至一或多個值。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> resembles a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>類似<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The difference is that a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> maps keys to single values, whereas a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> maps keys to collections of values.</source>
          <target state="translated">其差異在於，<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>將索引鍵對應至單一值，而<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>將索引鍵對應至值的集合。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>You can create an instance of a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> by calling <ph id="ph2">&lt;xref:System.Linq.Enumerable.ToLookup%2A&gt;</ph> on an object that implements <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">您可以建立的執行個體<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>藉由呼叫<ph id="ph2">&lt;xref:System.Linq.Enumerable.ToLookup%2A&gt;</ph>實作的物件上<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>There is no public constructor to create a new instance of a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">若要建立的新執行個體沒有公用建構函式<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>Additionally, <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> objects are immutable, that is, you cannot add or remove elements or keys from a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> object after it has been created.</source>
          <target state="translated">此外，<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>物件是不變，也就是說，您無法加入或移除項目或索引鍵從<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>之後已經建立的物件。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> from a collection of objects.</source>
          <target state="translated">下列範例會建立<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>從物件的集合。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>It then enumerates the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> and outputs each key and each value in the key's associated collection of values.</source>
          <target state="translated">接著它會列舉<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>輸出每個索引鍵和索引鍵的關聯值的集合中每個值。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Lookup`2">
          <source>It also demonstrates how to use the properties <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph> and the methods <ph id="ph3">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph>.</source>
          <target state="translated">它也會示範如何使用屬性<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph>和方法<ph id="ph3">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>The type of the result values produced by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所產生的結果值的型別<bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>A function to project a result value from each key and its associated values.</source>
          <target state="translated">從每個索引鍵及其相關值投射結果值的函式。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>Applies a transform function to each key and its associated values and returns the results.</source>
          <target state="translated">將轉換函式套用至每個索引鍵及其相關值，並傳回結果。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
          <source>A collection that contains one value for each key/value collection pair in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">集合，針對 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 中的每個索引鍵/值集合組包含一個值。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>The key to find in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">要在 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 中尋找的索引鍵。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>Determines whether a specified key is in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">判斷指定的索引鍵是否存在 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is in the <ph id="ph3">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="key" /&gt;</ph> 位於 <ph id="ph3">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 中，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph> to determine whether a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> contains a specified key.</source>
          <target state="translated">下列範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Contains%2A&gt;</ph>來判斷是否<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>包含指定的索引鍵。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.Contains(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">這個程式碼範例是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Linq.Lookup`2.Count">
          <source>Gets the number of key/value collection pairs in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 中的索引鍵/值集合組數目。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>The number of key/value collection pairs in the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 集合中的索引鍵/值集合組數目。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>The value of the <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> property does not change because items cannot be added to or removed from a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> object after it has been created.</source>
          <target state="translated">值<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph>屬性不會變更，因為無法加入或移除項目<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>之後已經建立的物件。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph> to determine the number of key/value collection pairs in a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">下列範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Count%2A&gt;</ph>來判斷索引鍵/值集合中的配對數目<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Count">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">這個程式碼範例是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>Returns a generic enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">傳回會逐一查看 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 的泛型列舉值。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>An enumerator for the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 的列舉程式。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph> to iterate through the keys and values of a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">下列範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Lookup%602.GetEnumerator%2A&gt;</ph>來逐一查看索引鍵，值<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Lookup`2.GetEnumerator">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">這個程式碼範例是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>The key of the desired collection of values.</source>
          <target state="translated">所需之值集合的索引鍵。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>Gets the collection of values indexed by the specified key.</source>
          <target state="translated">取得以指定之索引鍵編製索引的值集合。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>The collection of values indexed by the specified key.</source>
          <target state="translated">以指定之索引鍵編製索引的值集合。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>This indexed property provides the ability to index a specific collection of values in the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> by using the following syntax: <ph id="ph2">`myLookup[key]`</ph> in Visual C# or <ph id="ph3">`myLookup(key)`</ph> in Visual Basic.</source>
          <target state="translated">這個索引的屬性提供的索引中的值的特定集合的能力<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>可以使用下列語法： <ph id="ph2">`myLookup[key]`</ph> Visual C# 或<ph id="ph3">`myLookup(key)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>If the <ph id="ph1">`key`</ph> is not found in the collection, an empty sequence is returned.</source>
          <target state="translated">如果<ph id="ph1">`key`</ph>找不到集合中傳回空的序列。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph> to index directly into a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>.</source>
          <target state="translated">下列範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Lookup%602.Item%2A&gt;</ph>來直接編製索引<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Lookup`2.Item(`0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> class.</source>
          <target state="translated">這個程式碼範例是針對所提供之較大範例的一部分<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated">傳回在 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 中逐一查看的列舉值。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
          <source>This class cannot be inherited.</source>
          <target state="translated">這個類別無法被繼承。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator for the <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 的列舉程式。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>