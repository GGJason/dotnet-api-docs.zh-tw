<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="94591eb679e306791135ec572f82d3e35573ab2e" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58694479" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">資料來源中的資料型別。</typeparam>
    <summary>提供功能，對已知資料型別的特定資料來源評估查詢。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Linq.IQueryable%601>介面主要供實作的查詢提供者。  
  
 此介面繼承<xref:System.Collections.Generic.IEnumerable%601>介面，所以如果它代表查詢，該查詢的結果可以列舉。 列舉型別會強制與相關聯的運算式樹狀架構<xref:System.Linq.IQueryable%601>来執行的物件。 執行不會傳回可列舉結果的查詢時<xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>呼叫方法。  
  
 「 執行運算式樹狀架構 」 的定義是查詢提供者特有的。 比方說，它可能包含轉譯為適當的基礎資料來源的查詢語言的運算式樹狀架構。  
  
 <xref:System.Linq.IQueryable%601>介面可讓查詢是多型。 也就是因為對查詢`IQueryable`資料來源會表示為運算式樹狀架構，可以針對不同類型的資料來源來執行。  
  
 `static` (`Shared` Visual Basic 中) 類別中定義的方法<xref:System.Linq.Queryable>(除了<xref:System.Linq.Queryable.AsQueryable%2A>， <xref:System.Linq.Queryable.ThenBy%2A>，和<xref:System.Linq.Queryable.ThenByDescending%2A>) 擴充物件的類型可實作<xref:System.Linq.IQueryable%601>介面。  
  
 如需如何建立自有 LINQ 提供者的詳細資訊，請參閱[LINQ:建置 IQueryable 提供者](https://go.microsoft.com/fwlink/?LinkID=112370)MSDN 部落格上。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>