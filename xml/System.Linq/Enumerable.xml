<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Enumerable.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae25fbb5-14a8-44f2-90c2-3c6d6fcaae7f1cae80cb1b945b1cd247a58e1afdb6cf00c93ee5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1cae80cb1b945b1cd247a58e1afdb6cf00c93ee5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b899505ed6d42225f2b3c9150bfdc080d0d1f9b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/28/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Provides a set of <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) methods for querying objects that implement <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">提供一組 <ph id="ph1">&lt;see langword="static" /&gt;</ph> (在 Visual Basic 中為 <ph id="ph2">&lt;see langword="Shared" /&gt;</ph>) 方法，用於查詢實作 <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 的物件。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The methods in this class provide an implementation of the standard query operators for querying data sources that implement <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">此類別中的方法提供實作標準查詢運算子的查詢資料來源實作<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The standard query operators are general purpose methods that follow the <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</source>
          <target state="translated">標準查詢運算子是一般用途的方法，請遵循<ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph>模式，並讓您透過任何表示周遊、 篩選和投射作業。以網路為基礎的程式設計語言。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The majority of the methods in this class are defined as extension methods that extend <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">這個類別中方法的大部分會定義為延伸的延伸模組方法<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>This means they can be called like an instance method on any object that implements <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">這表示您可以在實作任何物件上呼叫執行個體方法<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated.</source>
          <target state="translated">列舉查詢物件之前，傳回的值序列的查詢中使用的方法不會耗用目標資料。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>This is known as deferred execution.</source>
          <target state="translated">這稱為 「 延後執行 」。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>Methods that are used in a query that returns a singleton value execute and consume the target data immediately.</source>
          <target state="translated">傳回單一值的查詢中使用的方法會執行，並立即使用目標資料。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to aggregate over.</source>
          <target state="translated">所要彙總 (Aggregate) 的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>An accumulator function to be invoked on each element.</source>
          <target state="translated">要在每個項目上叫用 (Invoke) 的累加函式。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">將累加函式套用到序列上。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The final accumulator value.</source>
          <target state="translated">最終累積值。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph>方法可簡化透過一連串的值執行計算。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph> except the first one.</source>
          <target state="translated">這個方法的運作方式是呼叫<ph id="ph1">`func`</ph>中每個元素一次<ph id="ph2">`source`</ph>除了第一個。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
          <target state="translated">每次<ph id="ph1">`func`</ph>呼叫時，<ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph>通過的項目從序列和彙總的值 (做為第一個引數<ph id="ph3">`func`</ph>)。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The first element of <ph id="ph1">`source`</ph> is used as the initial aggregate value.</source>
          <target state="translated">第一個項目<ph id="ph1">`source`</ph>做為初始彙總的值。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
          <target state="translated">結果<ph id="ph1">`func`</ph>會取代先前的彙的總值。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> returns the final result of <ph id="ph2">`func`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> 傳回的最終結果<ph id="ph2">`func`</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> method isn't suitable for all cases because it uses the first element of <ph id="ph2">`source`</ph> as the initial aggregate value.</source>
          <target state="translated">這個多載<ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>方法不適合所有情況下，因為它會使用第一個項目<ph id="ph2">`source`</ph>做為初始彙總的值。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>You should choose another overload if the return value should include only the elements of <ph id="ph1">`source`</ph> that meet a certain condition.</source>
          <target state="translated">如果傳回的值應該包含的項目，您應選擇另一個多載<ph id="ph1">`source`</ph>符合特定條件。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>For example, this overload isn't reliable if you want to calculate the sum of the even numbers in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">例如，這個多載不可靠，如果您想要計算中的偶數<ph id="ph1">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The result will be incorrect if the first element is odd instead of even.</source>
          <target state="translated">結果會是不正確，如果第一個項目是奇數，而不是即使。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">若要簡化常見的彙總作業，標準查詢運算子也包含一般用途計數方法<ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>，和四個數值彙總方法，也就是<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>，和<ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The following code example demonstrates how to reverse the order of words in a string by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>.</source>
          <target state="translated">下列程式碼範例示範如何藉由使用反轉字串中的字詞的順序<ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="func" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The type of the accumulator value.</source>
          <target state="translated">累積值的類型。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to aggregate over.</source>
          <target state="translated">所要彙總 (Aggregate) 的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The initial accumulator value.</source>
          <target state="translated">初始累積值。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>An accumulator function to be invoked on each element.</source>
          <target state="translated">要在每個項目上叫用 (Invoke) 的累加函式。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">將累加函式套用到序列上。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The specified seed value is used as the initial accumulator value.</source>
          <target state="translated">使用指定的初始值做為初始累加值。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The final accumulator value.</source>
          <target state="translated">最終累積值。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph>方法可簡化透過一連串的值執行計算。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">這個方法的運作方式是呼叫<ph id="ph1">`func`</ph>中每個元素一次<ph id="ph2">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
          <target state="translated">每次<ph id="ph1">`func`</ph>呼叫時，<ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph>通過的項目從序列和彙總的值 (做為第一個引數<ph id="ph3">`func`</ph>)。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The value of the <ph id="ph1">`seed`</ph> parameter is used as the initial aggregate value.</source>
          <target state="translated">值<ph id="ph1">`seed`</ph>參數作為彙總的初始值。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
          <target state="translated">結果<ph id="ph1">`func`</ph>會取代先前的彙的總值。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> returns the final result of <ph id="ph2">`func`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> 傳回的最終結果<ph id="ph2">`func`</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">若要簡化常見的彙總作業，標準查詢運算子也包含一般用途計數方法<ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>，和四個數值彙總方法，也就是<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>，和<ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> to apply an accumulator function and use a seed value.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>適用於將累加函式，並使用種子值。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="func" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The type of the accumulator value.</source>
          <target state="translated">累積值的類型。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The type of the resulting value.</source>
          <target state="translated">結果值的類型。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to aggregate over.</source>
          <target state="translated">所要彙總 (Aggregate) 的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The initial accumulator value.</source>
          <target state="translated">初始累積值。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>An accumulator function to be invoked on each element.</source>
          <target state="translated">要在每個項目上叫用 (Invoke) 的累加函式。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>A function to transform the final accumulator value into the result value.</source>
          <target state="translated">用來將最終累加值轉換成結果值的函式。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">將累加函式套用到序列上。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</source>
          <target state="translated">使用指定的值做為初始累加值，並使用指定的函式來選取結果值。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The transformed final accumulator value.</source>
          <target state="translated">轉換後的最終累加值。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph>方法可簡化透過一連串的值執行計算。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">這個方法的運作方式是呼叫<ph id="ph1">`func`</ph>中每個元素一次<ph id="ph2">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
          <target state="translated">每次<ph id="ph1">`func`</ph>呼叫時，<ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph>通過的項目從序列和彙總的值 (做為第一個引數<ph id="ph3">`func`</ph>)。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The value of the <ph id="ph1">`seed`</ph> parameter is used as the initial aggregate value.</source>
          <target state="translated">值<ph id="ph1">`seed`</ph>參數作為彙總的初始值。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
          <target state="translated">結果<ph id="ph1">`func`</ph>會取代先前的彙的總值。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The final result of <ph id="ph1">`func`</ph> is passed to <ph id="ph2">`resultSelector`</ph> to obtain the final result of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">最終結果<ph id="ph1">`func`</ph>傳遞至<ph id="ph2">`resultSelector`</ph>取得的最終結果<ph id="ph3">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">若要簡化常見的彙總作業，標準查詢運算子也包含一般用途計數方法<ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>，和四個數值彙總方法，也就是<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>，和<ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> to apply an accumulator function and a result selector.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>套用將累加函式和結果選取器。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>、<ph id="ph2">&lt;paramref name="func" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> 為 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements to apply the predicate to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含要套用述詞 (Predicate) 的項目。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">用來測試每個項目是否符合條件的函式。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Determines whether all elements of a sequence satisfy a condition.</source>
          <target state="translated">判斷序列的所有項目是否全都符合條件。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果來源序列的每個項目都通過以指定之述詞 (Predicate) 進行的測試，或序列是空的，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method does not return all the elements of a collection.</source>
          <target state="translated">這個方法不會傳回集合的所有項目。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Instead, it determines whether all the elements of a collection satisfy a condition.</source>
          <target state="translated">相反地，它會判斷集合中的所有項目是否符合條件。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
          <target state="translated">列舉<ph id="ph1">`source`</ph>可以判斷結果為已停止。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into All()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into All()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph> to determine whether all the elements in a sequence satisfy a condition.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph>來判斷序列中的所有項目是否符合條件。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Variable <ph id="ph1">`allStartWithB`</ph> is true if all the pet names start with "B" or if the <ph id="ph2">`pets`</ph> array is empty.</source>
          <target state="translated">變數<ph id="ph1">`allStartWithB`</ph>成立如果所有寵物名稱都開頭為"B"，或如果<ph id="ph2">`pets`</ph>陣列是空的。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The Boolean value that the <ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph> method returns is typically used in the predicate of a <ph id="ph2">`where`</ph> clause (<ph id="ph3">`Where`</ph> clause in Visual Basic) or a direct call to the <ph id="ph4">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> method.</source>
          <target state="translated">布林值，<ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph>方法會傳回最常用的述詞在<ph id="ph2">`where`</ph>子句 (<ph id="ph3">`Where`</ph>子句在 Visual Basic 中的) 或直接呼叫<ph id="ph4">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following example demonstrates this use of the <ph id="ph1">`All`</ph> method.</source>
          <target state="translated">下列範例會示範這種使用<ph id="ph1">`All`</ph>方法。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Determines whether any element of a sequence exists or satisfies a condition.</source>
          <target state="translated">判斷序列的任何項目是否符合條件。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to check for emptiness.</source>
          <target state="translated">要檢查是否為空白的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Determines whether a sequence contains any elements.</source>
          <target state="translated">判斷序列是否包含任何項目。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the source sequence contains any elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果來源序列包含任何項目，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method does not return any one element of a collection.</source>
          <target state="translated">這個方法不會傳回集合中的任何一個項目。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead, it determines whether the collection contains any elements.</source>
          <target state="translated">相反地，它會判斷集合是否包含任何項目。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
          <target state="translated">列舉<ph id="ph1">`source`</ph>可以判斷結果為已停止。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Any()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Any()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> to determine whether a sequence contains any elements.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>來判斷序列是否包含任何項目。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The Boolean value that the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns is typically used in the predicate of a <ph id="ph2">`where`</ph> clause (<ph id="ph3">`Where`</ph> clause in Visual Basic) or a direct call to the <ph id="ph4">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method.</source>
          <target state="translated">布林值，<ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法會傳回最常用的述詞在<ph id="ph2">`where`</ph>子句 (<ph id="ph3">`Where`</ph>子句在 Visual Basic 中的) 或直接呼叫<ph id="ph4">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following example demonstrates this use of the <ph id="ph1">`Any`</ph> method.</source>
          <target state="translated">下列範例會示範這種使用<ph id="ph1">`Any`</ph>方法。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to apply the predicate to.</source>
          <target state="translated">其項目要套用述詞的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">用來測試每個項目是否符合條件的函式。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Determines whether any element of a sequence satisfies a condition.</source>
          <target state="translated">判斷序列的任何項目是否符合條件。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if any elements in the source sequence pass the test in the specified predicate; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果來源序列中的任何項目通過以指定之述詞進行的測試，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method does not return any one element of a collection.</source>
          <target state="translated">這個方法不會傳回集合中的任何一個項目。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Instead, it determines whether any elements of a collection satisfy a condition.</source>
          <target state="translated">相反地，它會判斷是否符合條件集合中的任何項目。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
          <target state="translated">列舉<ph id="ph1">`source`</ph>可以判斷結果為已停止。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Any()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Any()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> to determine whether any element in a sequence satisfies a condition.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>來判斷序列中的任何項目是否符合條件。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 項目的類型。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A sequence of values.</source>
          <target state="translated">一連串的值。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to append to <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">要附加在 <ph id="ph1">&lt;paramref name="source" /&gt;</ph> 後面的值。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Appends a value to the end of the sequence.</source>
          <target state="translated">將值附加在序列結尾。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A new sequence that ends with <ph id="ph1">&lt;paramref name="element" /&gt;</ph>.</source>
          <target state="translated">以 <ph id="ph1">&lt;paramref name="element" /&gt;</ph> 結尾的新序列。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to type as <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">型別為 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 的序列。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the input typed as <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 類型的輸入。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence typed as <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">型別為 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 的輸入序列。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method has no effect other than to change the compile-time type of <ph id="ph2">`source`</ph> from a type that implements <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> to <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> itself.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法沒有任何作用以外變更編譯時間類型的<ph id="ph2">`source`</ph>從型別可實作<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>至<ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>本身。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> can be used to choose between query implementations when a sequence implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> but also has a different set of public query methods available.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> 可用於查詢實作，當序列實作之間選擇<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>但也有一組不同的可用查詢的公用方法。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>For example, given a generic class <ph id="ph1">`Table`</ph> that implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and has its own methods such as <ph id="ph3">`Where`</ph>, <ph id="ph4">`Select`</ph>, and <ph id="ph5">`SelectMany`</ph>, a call to <ph id="ph6">`Where`</ph> would invoke the public <ph id="ph7">`Where`</ph> method of <ph id="ph8">`Table`</ph>.</source>
          <target state="translated">例如，假設泛型類別<ph id="ph1">`Table`</ph>實作<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>和有它自己的方法，例如<ph id="ph3">`Where`</ph>， <ph id="ph4">`Select`</ph>，和<ph id="ph5">`SelectMany`</ph>，呼叫<ph id="ph6">`Where`</ph>會叫用公用<ph id="ph7">`Where`</ph>方法<ph id="ph8">`Table`</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A <ph id="ph1">`Table`</ph> type that represents a database table could have a <ph id="ph2">`Where`</ph> method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution.</source>
          <target state="translated">A<ph id="ph1">`Table`</ph>代表資料庫資料表類型可能會有<ph id="ph2">`Where`</ph>方法會採用述詞的引數，做為運算式樹狀架構，並將樹狀目錄轉換成 SQL，遠端執行。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If remote execution is not desired, for example because the predicate invokes a local method, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph> method can be used to hide the custom methods and instead make the standard query operators available.</source>
          <target state="translated">如果遠端執行不需要，例如因為述詞會叫用的本機方法，<ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph>方法可以用來隱藏自訂方法，並改為提供的標準查詢運算子。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to hide a type's custom <ph id="ph2">`Where`</ph> method when the standard query operator implementation is desired.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>隱藏類型的自訂<ph id="ph2">`Where`</ph>時想要使用標準查詢運算子的實作方法。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Computes the average of a sequence of numeric values.</source>
          <target state="translated">計算數值序列的平均值。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">要計算平均值的 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">計算 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The average of the sequence of values.</source>
          <target state="translated">值序列的平均。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph>來計算值序列的平均值。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">要計算平均值的 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">計算 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The average of the sequence of values.</source>
          <target state="translated">值序列的平均。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>If the sum of the elements is too large to represent as a <ph id="ph1">&lt;xref:System.Double&gt;</ph>, this method returns positive or negative infinity.</source>
          <target state="translated">元素的總和是否太大而無法表示為<ph id="ph1">&lt;xref:System.Double&gt;</ph>，這個方法會傳回無限大的正數或負數。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">要計算平均值的 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">計算 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The average of the sequence of values.</source>
          <target state="translated">值序列的平均。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">要計算平均值的 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">計算 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The average of the sequence of values.</source>
          <target state="translated">值序列的平均。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">要計算其平均值的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值的序列。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">計算可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">值序列的平均值，或者，如果來源序列是空的或只包含 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 值，則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">序列中項目的總和大於 <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">要計算其平均值的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值的序列。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">計算可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">值序列的平均值，或者，如果來源序列是空的或只包含 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 值，則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>If the sum of the elements is too large to represent as a <ph id="ph1">&lt;xref:System.Double&gt;</ph>, this method returns positive or negative infinity.</source>
          <target state="translated">元素的總和是否太大而無法表示為<ph id="ph1">&lt;xref:System.Double&gt;</ph>，這個方法會傳回無限大的正數或負數。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">要計算其平均值的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值的序列。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">計算可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">值序列的平均值，或者，如果來源序列是空的或只包含 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 值，則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">序列中項目的總和大於 <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">要計算其平均值的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值的序列。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">計算可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">值序列的平均值，或者，如果來源序列是空的或只包含 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 值，則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">序列中項目的總和大於 <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">要計算其平均值的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值的序列。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">計算可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">值序列的平均值，或者，如果來源序列是空的或只包含 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 值，則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">要計算平均值的 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">計算 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The average of the sequence of values.</source>
          <target state="translated">值序列的平均。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values that are used to calculate an average.</source>
          <target state="translated">用來計算平均值的值序列。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得之 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The average of the sequence of values.</source>
          <target state="translated">值序列的平均。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">序列中項目的總和大於 <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">要計算平均值的值序列。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得之 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The average of the sequence of values.</source>
          <target state="translated">值序列的平均。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">要計算平均值的值序列。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得之 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The average of the sequence of values.</source>
          <target state="translated">值序列的平均。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">序列中項目的總和大於 <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of source.</source>
          <target state="translated">來源之項目的類型。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">要計算平均值的值序列。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得之 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The average of the sequence of values.</source>
          <target state="translated">值序列的平均。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">序列中項目的總和大於 <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">要計算平均值的值序列。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值的平均值。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">值序列的平均值，或者，如果來源序列是空的或只包含 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 值，則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">序列中項目的總和大於 <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">要計算平均值的值序列。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值的平均值。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">值序列的平均值，或者，如果來源序列是空的或只包含 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 值，則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">要計算平均值的值序列。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值的平均值。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">值序列的平均值，或者，如果來源序列是空的或只包含 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 值，則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">序列中項目的總和大於 <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">要計算平均值的值序列。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值的平均值。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">值序列的平均值，或者，如果來源序列是空的或只包含 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 值，則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">要計算平均值的值序列。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值的平均值。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">值序列的平均值，或者，如果來源序列是空的或只包含 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 值，則為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">要計算平均值的值序列。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得之 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列的平均值。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The average of the sequence of values.</source>
          <target state="translated">值序列的平均。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Average()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來計算平均值。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The type to cast the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated">要轉換的項目類型<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>至。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> that contains the elements to be cast to type <bpt id="p1">&lt;c&gt;</bpt>TResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>，其中包含要轉換成類型 <bpt id="p1">&lt;c&gt;</bpt>TResult<ept id="p1">&lt;/c&gt;</ept> 的項目。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>Casts the elements of an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> to the specified type.</source>
          <target state="translated">將 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> 的項目轉換成指定的型別。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains each element of the source sequence cast to the specified type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含已轉型成指定之型別的每個來源序列項目。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>方法可讓標準查詢運算子，以叫用非泛型集合上所提供的必要型別資訊。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>For example, <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> does not implement <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, but by calling <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> on the <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph> object, the standard query operators can then be used to query the sequence.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>未實作<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，但藉由呼叫<ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>上<ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph>物件的標準查詢運算子可以再用來查詢的順序。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>If an element cannot be converted to type <ph id="ph1">`TResult`</ph>, this method throws a <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
          <target state="translated">如果項目無法轉換成輸入<ph id="ph1">`TResult`</ph>，這個方法會擲回<ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The source sequence for this method is <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>, which means the elements have the compile-time static type of <ph id="ph2">`object`</ph>.</source>
          <target state="translated">來源序列，此方法是<ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>，表示項目都具有的編譯時期靜態類型<ph id="ph2">`object`</ph>。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The only type conversions that are performed by this method are reference conversions and unboxing conversions.</source>
          <target state="translated">這個方法所執行的唯一類型轉換為參考轉換和 unboxing 轉換。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The runtime type of the elements in the collection must match the target type, or in the case of value types, the runtime type of elements must be the result of a boxing conversion of the target type.</source>
          <target state="translated">執行階段類型的集合中的項目必須符合目標類型，或如果實值類型的項目執行階段型別必須是目標類型的 boxing 轉換的結果。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>Other conversion types, such as those between different numeric types, are not allowed.</source>
          <target state="translated">不允許其他轉換類型，例如不同的數值類型。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>To obtain only those elements that can be converted to type <ph id="ph1">`TResult`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> method instead of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
          <target state="translated">若要取得可以轉換成輸入這些項目<ph id="ph1">`TResult`</ph>，使用<ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph>方法，而非<ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>In a query expression, an explicitly typed iteration variable translates to an invocation of <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
          <target state="translated">在查詢運算式中，明確指定型別的的反覆運算變數則會轉譯為的引動過程<ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>This example shows the syntax for an explicitly typed range variable.</source>
          <target state="translated">這個範例會顯示明確指定型別的的範圍變數的語法。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>Use the <ph id="ph1">`select`</ph> clause of a query to perform other conversion types, like the implicit numeric conversions.</source>
          <target state="translated">使用<ph id="ph1">`select`</ph>查詢來執行其他轉換類型，例如之隱含數值轉換的子句。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The following example uses both the <ph id="ph1">`Cast`</ph> method and a <ph id="ph2">`select`</ph> statement to convert a sequence of boxed integers to a sequence of doubles.</source>
          <target state="translated">下列範例會使用這兩者<ph id="ph1">`Cast`</ph>方法和<ph id="ph2">`select`</ph>boxed 整數的序列轉換成一連串的雙精度浮點數的陳述式。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> to enable the use of the standard query operators on an <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>上啟用標準查詢運算子的用法<ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>An element in the sequence cannot be cast to type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">無法將序列中的項目轉換為型別 <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">輸入序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The first sequence to concatenate.</source>
          <target state="translated">要串連的第一個序列。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to concatenate to the first sequence.</source>
          <target state="translated">要串連到第一個序列的序列。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Concatenates two sequences.</source>
          <target state="translated">串連兩個序列。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the concatenated elements of the two input sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含兩個輸入序列的串連項目。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method differs from the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method because the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns all the original elements in the input sequences.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法不同於<ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>方法因為<ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法會傳回所有的原始項目中輸入序列。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method returns only unique elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>方法會傳回只有唯一的項目。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to concatenate two sequences.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>來串連兩個序列。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An alternative way of concatenating two sequences is to construct a collection, for example an array, of sequences and then apply the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method, passing it the identity selector function.</source>
          <target state="translated">串連兩個序列的替代方式是以建構一個集合，例如，為陣列的順序，然後套用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>方法，將身分識別選取器函式傳遞給它。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following example demonstrates this use of <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</source>
          <target state="translated">下列範例會示範這種使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="second" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Determines whether a sequence contains a specified element.</source>
          <target state="translated">判斷序列是否包含指定的項目。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A sequence in which to locate a value.</source>
          <target state="translated">要在其中尋找值的序列。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to locate in the sequence.</source>
          <target state="translated">要在序列中尋找的值。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Determines whether a sequence contains a specified element by using the default equality comparer.</source>
          <target state="translated">使用預設的相等比較子 (Comparer) 來判斷序列是否包含指定的項目。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the source sequence contains an element that has the specified value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果來源序列包含具有指定值的項目，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, the <ph id="ph3">`Contains`</ph> method in that implementation is invoked to obtain the result.</source>
          <target state="translated">如果類型<ph id="ph1">`source`</ph>實作<ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>、<ph id="ph3">`Contains`</ph>中實作的方法會叫用來取得結果。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Otherwise, this method determines whether <ph id="ph1">`source`</ph> contains the specified element.</source>
          <target state="translated">否則，這個方法會判斷是否<ph id="ph1">`source`</ph>包含指定的項目。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Enumeration is terminated as soon as a matching element is found.</source>
          <target state="translated">只要找到相符項目，列舉型別就會終止。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Elements are compared to the specified value by using the default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">項目會為指定的值進行比較使用預設相等比較子， <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to determine whether an array contains a specific element.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph>來判斷陣列是否包含特定項目。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence in which to locate a value.</source>
          <target state="translated">要在其中尋找值的序列。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The value to locate in the sequence.</source>
          <target state="translated">要在序列中尋找的值。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>An equality comparer to compare values.</source>
          <target state="translated">用來比較值的相等比較子。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>Determines whether a sequence contains a specified element by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> 來判斷序列是否包含指定的項目。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the source sequence contains an element that has the specified value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果來源序列包含具有指定值的項目，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>Enumeration is terminated as soon as a matching element is found.</source>
          <target state="translated">只要找到相符項目，列舉型別就會終止。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare elements to the specified value.</source>
          <target state="translated">如果<ph id="ph1">`comparer`</ph>是<ph id="ph2">`null`</ph>的預設相等比較子， <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來比較項目以指定的值。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> method.</source>
          <target state="translated">下列範例示範如何實作可用於相等比較子<ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use a sequence of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">這個比較子實作之後，您可以使用一系列<ph id="ph1">`Product`</ph>中的物件<ph id="ph2">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph>方法，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the number of elements in a sequence.</source>
          <target state="translated">傳回序列中的項目數。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence that contains elements to be counted.</source>
          <target state="translated">包含要計算之項目的序列。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the number of elements in a sequence.</source>
          <target state="translated">傳回序列中的項目數。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements in the input sequence.</source>
          <target state="translated">輸入序列中的項目數目。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, that implementation is used to obtain the count of elements.</source>
          <target state="translated">如果類型<ph id="ph1">`source`</ph>實作<ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>，該實作用來取得的項目計數。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Otherwise, this method determines the count.</source>
          <target state="translated">否則，這個方法會判斷計數。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> method when you expect and want to allow the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>方法時您所預期，而且想要允許的結果是大於<ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Count()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Count()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to count the elements in an array.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>來計算陣列中的項目。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> is larger than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 中的項目數目大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A sequence that contains elements to be tested and counted.</source>
          <target state="translated">包含要測試及計算之項目的序列。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">用來測試每個項目是否符合條件的函式。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns a number that represents how many elements in the specified sequence satisfy a condition.</source>
          <target state="translated">傳回數字，代表指定之序列中符合條件的項目數目。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</source>
          <target state="translated">數字，代表序列中符合述詞函式之條件的項目數目。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, that implementation is used to obtain the count of elements.</source>
          <target state="translated">如果類型<ph id="ph1">`source`</ph>實作<ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>，該實作用來取得的項目計數。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Otherwise, this method determines the count.</source>
          <target state="translated">否則，這個方法會判斷計數。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>You should use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> method when you expect and want to allow the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">您應該使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>方法時您所預期，而且想要允許的結果是大於<ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Count()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Count()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to count the elements in an array that satisfy a condition.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>計算陣列中滿足條件的項目。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> is larger than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 中的項目數目大於 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the elements of an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, or a default valued singleton collection if the sequence is empty.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 的項目；如果序列是空的，則傳回預設值單一集合。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to return a default value for if it is empty.</source>
          <target state="translated">序列，若此序列空白，便傳回預設值。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</source>
          <target state="translated">傳回指定之序列的項目；如果序列是空的，則傳回單一集合中型別參數的預設值。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> object that contains the default value for the <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> type if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> 為空白，則為包含 <ph id="ph3">&lt;paramref name="source" /&gt;</ph> 型別之預設值的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 物件，否則為 <ph id="ph4">&lt;paramref name="source" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">參考資料和可為 null 類型的預設值是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method can be used to produce a left outer join when it is combined with the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) method.</source>
          <target state="translated">這個方法可以用來產生左外部聯結時它就會結合<ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) 方法。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code examples demonstrate how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to provide a default value in case the source sequence is empty.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>提供預設值，如果來源序列是空的。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This example uses a non-empty sequence.</source>
          <target state="translated">這個範例會使用非空序列。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This example uses an empty sequence.</source>
          <target state="translated">這個範例會使用空的序列。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The sequence to return the specified value for if it is empty.</source>
          <target state="translated">序列，若此序列空白，便傳回指定的值。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to return if the sequence is empty.</source>
          <target state="translated">在序列空白時所要傳回的值。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</source>
          <target state="translated">傳回指定之序列的項目；如果序列是空的，則傳回單一集合中型別參數的預設值。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> 是空的，則為包含 <ph id="ph3">&lt;paramref name="source" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，否則為 <ph id="ph4">&lt;paramref name="source" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>This method can be used to produce a left outer join when it is combined with the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) method.</source>
          <target state="translated">這個方法可以用來產生左外部聯結時它就會結合<ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) 方法。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method and specify a default value.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph>方法並指定預設值。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The first sequence is not empty and the second sequence is empty.</source>
          <target state="translated">第一個序列不是空的第二個序列是空的。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns distinct elements from a sequence.</source>
          <target state="translated">從序列傳回獨特的項目。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The result sequence is unordered.</source>
          <target state="translated">結果序列沒有排序。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to remove duplicate elements from.</source>
          <target state="translated">要移除重複項目的序列。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns distinct elements from a sequence by using the default equality comparer to compare values.</source>
          <target state="translated">使用預設的相等比較子來比較值，以便從序列傳回獨特的項目。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains distinct elements from the source sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含來源序列中的獨特項目。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns an unordered sequence that contains no duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法傳回未排序的序列，其中不包含任何重複的值。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>It uses the default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, to compare values.</source>
          <target state="translated">它會使用預設相等比較子， <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>、 比較的值。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In Visual Basic query expression syntax, a <ph id="ph1">`Distinct`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Distinct`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generic interface.</source>
          <target state="translated">預設相等比較子， <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來比較值之型別的實作<ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph>泛型介面。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">若要比較的自訂資料類型，您需要實作這個介面，並提供您自己<ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph>類型的方法。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>For an example that uses <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> to define a custom comparer, see <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph>.</source>
          <target state="translated">如需範例，會使用<ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>若要定義自訂比較子，請參閱<ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return distinct elements from a sequence of integers.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>從整數的序列傳回不同的項目。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to return distinct elements from sequences of objects of some custom data type, you have to implement the <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> generic interface in the class.</source>
          <target state="translated">如果您想要從某些自訂資料類型的物件序列傳回不同的項目，您必須實作<ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph>類別中的泛型介面。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">下列程式碼範例示範如何實作這個介面中的自訂資料類型，並提供<ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use a sequence of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">實作這個介面之後，您可以使用一系列<ph id="ph1">`Product`</ph>中的物件<ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The sequence to remove duplicate elements from.</source>
          <target state="translated">要移除重複項目的序列。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">用來比較值的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Returns distinct elements from a sequence by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> 來比較值，以便從序列傳回獨特的項目。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains distinct elements from the source sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含來源序列中的獨特項目。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method returns an unordered sequence that contains no duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph>方法傳回未排序的序列，其中不包含任何重複的值。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">如果 c<ph id="ph1">`omparer`</ph>是<ph id="ph2">`null`</ph>的預設相等比較子， <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來比較值。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> method.</source>
          <target state="translated">下列範例示範如何實作可用於相等比較子<ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use a sequence of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">這個比較子實作之後，您可以使用一系列<ph id="ph1">`Product`</ph>中的物件<ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>方法，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">傳回項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The zero-based index of the element to retrieve.</source>
          <target state="translated">要擷取的項目之以零為起始索引。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Returns the element at a specified index in a sequence.</source>
          <target state="translated">傳回位於序列中指定索引處的項目。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The element at the specified position in the source sequence.</source>
          <target state="translated">位於來源序列中指定位置的項目。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, that implementation is used to obtain the element at the specified index.</source>
          <target state="translated">如果類型<ph id="ph1">`source`</ph>實作<ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>，該實作用來取得指定索引處的項目。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Otherwise, this method obtains the specified element.</source>
          <target state="translated">否則，這個方法會取得指定的項目。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This method throws an exception if <ph id="ph1">`index`</ph> is out of range.</source>
          <target state="translated">這個方法擲回例外狀況，如果<ph id="ph1">`index`</ph>超出範圍。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>To instead return a default value when the specified index is out of range, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">若要改為傳回預設值，指定的索引超出範圍時，請使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAt%2A&gt;</ph> to return an element at a specific position.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAt%2A&gt;</ph>傳回特定位置的項目。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0 or greater than or equal to the number of elements in <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小於 0 或大於或等於 <ph id="ph2">&lt;paramref name="source" /&gt;</ph> 中的項目數目。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">傳回項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The zero-based index of the element to retrieve.</source>
          <target state="translated">要擷取的項目之以零為起始索引。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Returns the element at a specified index in a sequence or a default value if the index is out of range.</source>
          <target state="translated">傳回位於序列中指定索引處的元素；如果索引超出範圍，則傳回預設值。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</source>
          <target state="translated">如果索引位於來源序列的界限之外，則為 <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>)，否則為位於來源序列中指定索引處的項目。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, that implementation is used to obtain the element at the specified index.</source>
          <target state="translated">如果類型<ph id="ph1">`source`</ph>實作<ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>，該實作用來取得指定索引處的項目。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Otherwise, this method obtains the specified element.</source>
          <target state="translated">否則，這個方法會取得指定的項目。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">參考資料和可為 null 類型的預設值是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph>.</source>
          <target state="translated">下列程式碼範例將示範如何使用 <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This example uses an index that is outside the bounds of the array.</source>
          <target state="translated">這個範例會使用陣列界限之外的索引。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The type to assign to the type parameter of the returned generic <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">型別，用來指派給傳回之泛型 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 的型別參數。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Empty``1">
          <source>Returns an empty <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that has the specified type argument.</source>
          <target state="translated">傳回具有指定之型別引數的空白 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Empty``1">
          <source>An empty <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose type argument is <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">其型別引數為 <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> 的空白 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> method caches an empty sequence of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph>方法會快取類型的空的序列<ph id="ph2">`TResult`</ph>。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>When the object it returns is enumerated, it yields no elements.</source>
          <target state="translated">它會傳回物件列舉時，它會產生任何項目。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">在某些情況下，此方法相當實用的空白時序傳遞至使用者定義的方法會採用<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>It can also be used to generate a neutral element for methods such as <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>.</source>
          <target state="translated">它也可用來產生方法的相關項目，例如<ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>See the Example section for an example of this use of <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph>.</source>
          <target state="translated">請參閱 &lt; 範例 &gt; 一節的範例<ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> to generate an empty <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph>來產生空白<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The following code example demonstrates a possible application of the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> method.</source>
          <target state="translated">下列程式碼範例示範可能的應用程式的<ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> method is applied to a collection of string arrays.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>方法套用到集合的字串陣列。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The elements of each array in the collection are added to the resulting <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> only if that array contains four or more elements.</source>
          <target state="translated">集合中每個陣列的項目會加入至產生<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>前提是該陣列包含四個或多個項目。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%2A&gt;</ph> is used to generate the seed value for <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> because if no array in the collection has four or more elements, only the empty sequence is returned.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%2A&gt;</ph> 用來產生種子值<ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>因為如果沒有陣列集合中的有四個或多個元素，即會傳回空的序列。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Produces the set difference of two sequences.</source>
          <target state="translated">產生兩個序列的差異。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">輸入序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that are not also in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其項目若未同時存在於 <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> 中，便會傳回這些項目。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，若其項目同時出現在第一個序列中，便會從傳回的序列中移除這些項目。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set difference of two sequences by using the default equality comparer to compare values.</source>
          <target state="translated">使用預設相等比較子來比較值，以便產生兩個序列的差異。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence that contains the set difference of the elements of two sequences.</source>
          <target state="translated">序列，其中包含兩個序列之項目的差異。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The set difference of two sets is defined as the members of the first set that do not appear in the second set.</source>
          <target state="translated">兩個集合的集合差異被定義為不會出現在第二個集合中第一個集合的成員。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method returns those elements in <ph id="ph1">`first`</ph> that do not appear in <ph id="ph2">`second`</ph>.</source>
          <target state="translated">這個方法會傳回這些項目中的<ph id="ph1">`first`</ph>，不會出現在<ph id="ph2">`second`</ph>。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>It does not also return those elements in <ph id="ph1">`second`</ph> that do not appear in <ph id="ph2">`first`</ph>.</source>
          <target state="translated">它也不會傳回這些項目中的<ph id="ph1">`second`</ph>，不會出現在<ph id="ph2">`first`</ph>。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">預設相等比較子， <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來比較值之型別的實作<ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>泛型介面。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">若要比較的自訂資料類型，您需要實作這個介面，並提供您自己<ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph>類型的方法。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method to compare two sequences of numbers and return elements that appear only in the first sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法來比較兩個序列的數字，並傳回項目，只會出現在第一個序列。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare sequences of objects of some custom data type, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in a helperclass.</source>
          <target state="translated">如果您想要比較之物件的某些自訂資料類型的序列，您必須實作<ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>helperclass 中的泛型介面。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">下列程式碼範例示範如何實作這個介面中的自訂資料類型，並提供<ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">實作這個介面之後，您可以使用的序列<ph id="ph1">`ProductA`</ph>中的物件<ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="second" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">輸入序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that are not also in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其項目若未同時存在於 <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> 中，便會傳回這些項目。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，若其項目同時出現在第一個序列中，便會從傳回的序列中移除這些項目。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">用來比較值的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set difference of two sequences by using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> 來比較值，以便產生兩個序列的差異。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence that contains the set difference of the elements of two sequences.</source>
          <target state="translated">序列，其中包含兩個序列之項目的差異。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">如果 c<ph id="ph1">`omparer`</ph>是<ph id="ph2">`null`</ph>的預設相等比較子， <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來比較值。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> method.</source>
          <target state="translated">下列範例示範如何實作可用於相等比較子<ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">這個比較子實作之後，您可以使用的序列<ph id="ph1">`Product`</ph>中的物件<ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph>方法，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="second" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the first element of a sequence.</source>
          <target state="translated">傳回序列的第一個項目。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the first element of.</source>
          <target state="translated">要傳回第一個項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the first element of a sequence.</source>
          <target state="translated">傳回序列的第一個項目。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first element in the specified sequence.</source>
          <target state="translated">指定之序列中的第一個項目。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法擲回例外狀況，如果<ph id="ph2">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To instead return a default value when the source sequence is empty, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">若要改為傳回預設值，當來源序列是空白時，使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return the first element of an array.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>傳回陣列的第一個項目。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The source sequence is empty.</source>
          <target state="translated">來源序列為空。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">傳回項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">用來測試每個項目是否符合條件的函式。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the first element in a sequence that satisfies a specified condition.</source>
          <target state="translated">傳回序列中符合指定條件的第一個元素。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The first element in the sequence that passes the test in the specified predicate function.</source>
          <target state="translated">序列中通過指定之述詞函式所做測試的第一個項目。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if no matching element is found in <ph id="ph2">`source`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>方法擲回例外狀況，如果沒有相符項目中找到<ph id="ph2">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>To instead return a default value when no matching element is found, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">若要改為傳回預設值，找到相符的項目時，使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to return the first element of an array that satisfies a condition.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>傳回陣列，符合條件的第一個元素。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">沒有任何項目符合 <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> 的條件。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The source sequence is empty.</source>
          <target state="translated">來源序列為空。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the first element of a sequence, or a default value if no element is found.</source>
          <target state="translated">傳回序列的第一個項目；如果找不到任何項目，則傳回預設值。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the first element of.</source>
          <target state="translated">要傳回第一個項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the first element of a sequence, or a default value if the sequence contains no elements.</source>
          <target state="translated">傳回序列的第一個元素；如果序列中沒有包含任何元素，則傳回預設值。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, the first element in <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> 是空的，則為 <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph3">&lt;paramref name="source" /&gt;</ph>)，否則為 <ph id="ph4">&lt;paramref name="source" /&gt;</ph> 中的第一個項目。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">參考資料和可為 null 類型的預設值是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph>方法不會提供方法來指定預設值。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">如果您想要指定預設值以外<ph id="ph1">`default(TSource)`</ph>，使用<ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph>範例 &gt; 一節中所述的方法。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> on an empty array.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>上的空陣列。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">有時候值<ph id="ph1">`default(TSource)`</ph>不是您想要使用如果集合不包含任何元素的預設值。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">不檢查不必要的預設值的結果，並再將它如有必要變更，您可以改用<ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph>方法，以指定您想要使用這個集合是空的預設值。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the first element.</source>
          <target state="translated">然後，呼叫<ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>取得第一個項目。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty.</source>
          <target state="translated">下列程式碼範例會使用這兩種技術以取得預設值是 1，如果數字月份的集合是空的。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead.</source>
          <target state="translated">因為整數的預設值為 0，不會對應到任何月份，預設值必須被指定為 1。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query has finished executing.</source>
          <target state="translated">查詢完成執行後不想要的預設值會檢查第一個結果變數。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The second result variable is obtained by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">第二個結果變數透過使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph>來指定預設值是 1。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">傳回項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">用來測試每個項目是否符合條件的函式。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</source>
          <target state="translated">傳回序列中符合條件的第一個元素；如果找不到這類元素，則傳回預設值。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty or if no element passes the test specified by <ph id="ph4">&lt;paramref name="predicate" /&gt;</ph>; otherwise, the first element in <ph id="ph5">&lt;paramref name="source" /&gt;</ph> that passes the test specified by <ph id="ph6">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> 是空的，或是沒有任何項目通過 <ph id="ph3">&lt;paramref name="source" /&gt;</ph> 所指定的測試，則為 <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph4">&lt;paramref name="predicate" /&gt;</ph>)，否則為 <ph id="ph5">&lt;paramref name="source" /&gt;</ph> 中通過 <ph id="ph6">&lt;paramref name="predicate" /&gt;</ph> 指定之測試的第一個項目。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">參考資料和可為 null 類型的預設值是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> by passing in a predicate.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>藉由傳遞述詞。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In the second call to the method, there is no element in the array that satisfies the condition.</source>
          <target state="translated">在第二個呼叫方法時，沒有任何項目中符合條件的陣列。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Groups the elements of a sequence.</source>
          <target state="translated">群組序列的項目。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">要群組其項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">用來擷取各項目之索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Groups the elements of a sequence according to a specified key selector function.</source>
          <target state="translated">依據指定的索引鍵選擇器函式來群組序列的項目。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in Visual Basic where each <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a sequence of objects and a key.</source>
          <target state="translated">C# 中的 <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept>，其中每個 <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> 物件包含一序列的物件序和一個索引鍵。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
          <target state="translated">如需範例的<ph id="ph1">`GroupBy`</ph>，請參閱下列主題。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph>方法傳回的集合<ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph>物件、 一個用於每個發現的相異索引鍵。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph>是<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>另有其項目相關聯的索引鍵。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph>根據順序中的項目順序因為都產生物件<ph id="ph2">`source`</ph>，產生第一個索引鍵，每個<ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Elements in a grouping are yielded in the order they appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">群組中的項目中出現的順序來產生<ph id="ph1">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">預設相等比較子<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">查詢運算式語法， <ph id="ph1">`group by`</ph> (Visual C#) 或<ph id="ph2">`Group By Into`</ph>(Visual Basic) 子句的引動過程轉譯<ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">如需詳細資訊和使用範例，請參閱<bpt id="p1">[</bpt>group 子句<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept>和<bpt id="p2">[</bpt>群組 By 子句<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">要群組其項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">用來擷取各項目之索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">用來比較金鑰的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</source>
          <target state="translated">依據指定的索引鍵選取器函式來群組序列的項目，並使用指定的比較子來比較索引鍵。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in Visual Basic where each <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a collection of objects and a key.</source>
          <target state="translated">C# 中的 <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept>，其中每個 <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> 物件包含一個物件集合和一個索引鍵。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
          <target state="translated">如需範例的<ph id="ph1">`GroupBy`</ph>，請參閱下列主題。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph>方法傳回的集合<ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph>物件、 一個用於每個發現的相異索引鍵。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph>是<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>另有其項目相關聯的索引鍵。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph>根據順序中的項目順序因為都產生物件<ph id="ph2">`source`</ph>，產生第一個索引鍵，每個<ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Elements in a grouping are yielded in the order they appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">群組中的項目中出現的順序來產生<ph id="ph1">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">如果<ph id="ph1">`comparer`</ph>是<ph id="ph2">`null`</ph>的預設相等比較子<ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If two keys are considered equal according to <ph id="ph1">`comparer`</ph>, the first key is chosen as the key for that grouping.</source>
          <target state="translated">如果兩個索引鍵會被視為相等根據<ph id="ph1">`comparer`</ph>，第一個索引鍵會被選為該群組的索引鍵。</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">查詢運算式語法， <ph id="ph1">`group by`</ph> (Visual C#) 或<ph id="ph2">`Group By Into`</ph>(Visual Basic) 子句的引動過程轉譯<ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">如需詳細資訊和使用範例，請參閱<bpt id="p1">[</bpt>group 子句<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept>和<bpt id="p2">[</bpt>群組 By 子句<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>。</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements in the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> 中的項目類型。</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">要群組其項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">用來擷取各項目之索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to map each source element to an element in the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">用來將每個來源項目對應至 <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> 之項目的函式。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</source>
          <target state="translated">依據指定的索引鍵選取器函式來群組序列的項目，並使用指定的函式來投影每個群組的項目。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in Visual Basic where each <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a collection of objects of type <ph id="ph6">&lt;paramref name="TElement" /&gt;</ph> and a key.</source>
          <target state="translated">C# 中的 <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept>，其中每個 <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> 物件包含一個 <ph id="ph6">&lt;paramref name="TElement" /&gt;</ph> 類型的物件集合和一個索引鍵。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph>方法傳回的集合<ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph>物件、 一個用於每個發現的相異索引鍵。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph>是<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>另有其項目相關聯的索引鍵。</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph>根據順序中的項目順序因為都產生物件<ph id="ph2">`source`</ph>，產生第一個索引鍵，每個<ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Elements in a grouping are yielded in the order that the elements that produced them appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">因為順序產生它們的項目會出現在群組中的項目都產生<ph id="ph1">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">預設相等比較子<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> to group the elements of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph>來群組序列的元素。</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">查詢運算式語法， <ph id="ph1">`group by`</ph> (Visual C#) 或<ph id="ph2">`Group By Into`</ph>(Visual Basic) 子句的引動過程轉譯<ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The translation of the query expression in the following example is equivalent to the query in the example above.</source>
          <target state="translated">下列範例中的查詢運算式中的轉譯就相當於上述範例中的查詢。</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>In a Visual C# or Visual Basic query expression, the element and key selection expressions occur in the reverse order from their argument positions in a call to the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method.</source>
          <target state="translated">Visual C# 或 Visual Basic 的查詢運算式中項目和索引鍵選取項目運算式會產生相反順序呼叫中引數的位置從<ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>、<ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> 為 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements in the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> 中的項目類型。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">要群組其項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">用來擷取各項目之索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">用來將每個來源項目對應至 <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> 之項目的函式。</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">用來比較金鑰的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a key selector function.</source>
          <target state="translated">依據索引鍵選取器函式來群組序列中的項目。</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The keys are compared by using a comparer and each group's elements are projected by using a specified function.</source>
          <target state="translated">索引鍵是使用比較子來進行比較，而每個群組的項目都是利用指定的函式進行投影。</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in Visual Basic where each <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a collection of objects of type <ph id="ph6">&lt;paramref name="TElement" /&gt;</ph> and a key.</source>
          <target state="translated">C# 中的 <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中的 <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept>，其中每個 <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> 物件包含一個 <ph id="ph6">&lt;paramref name="TElement" /&gt;</ph> 類型的物件集合和一個索引鍵。</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
          <target state="translated">如需範例的<ph id="ph1">`GroupBy`</ph>，請參閱下列主題。</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph>方法傳回的集合<ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph>物件、 一個用於每個發現的相異索引鍵。</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph>是<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>另有其項目相關聯的索引鍵。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph>根據順序中的項目順序因為都產生物件<ph id="ph2">`source`</ph>，產生第一個索引鍵，每個<ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Elements in a grouping are yielded in the order that the elements that produced them appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">因為順序產生它們的項目會出現在群組中的項目都產生<ph id="ph1">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">如果<ph id="ph1">`comparer`</ph>是<ph id="ph2">`null`</ph>的預設相等比較子<ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If two keys are considered equal according to <ph id="ph1">`comparer`</ph>, the first key is chosen as the key for that grouping.</source>
          <target state="translated">如果兩個索引鍵會被視為相等根據<ph id="ph1">`comparer`</ph>，第一個索引鍵會被選為該群組的索引鍵。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">查詢運算式語法， <ph id="ph1">`group by`</ph> (Visual C#) 或<ph id="ph2">`Group By Into`</ph>(Visual Basic) 子句的引動過程轉譯<ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">如需詳細資訊和使用範例，請參閱<bpt id="p1">[</bpt>group 子句<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept>和<bpt id="p2">[</bpt>群組 By 子句<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>、<ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> 為 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的結果值的型別<bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">要群組其項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">用來擷取各項目之索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">用來從各個群組建立結果值的函式。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">依據指定的索引鍵選取器函式來群組序列的項目，並從每個群組及其索引鍵建立結果值。</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> 型別項目的集合，其中每個項目都代表群組及其索引鍵的投影。</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">查詢運算式語法， <ph id="ph1">`group by`</ph> (Visual C#) 或<ph id="ph2">`Group By Into`</ph>(Visual Basic) 子句的引動過程轉譯<ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29&gt;</ph> to group the elements of a sequence and project a sequence of results of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29&gt;</ph>來群組序列的項目和專案類型的結果的序列<ph id="ph2">`TResult`</ph>。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的結果值的型別<bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">要群組其項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">用來擷取各項目之索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">用來從各個群組建立結果值的函式。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys with.</source>
          <target state="translated">用來比較索引鍵的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">依據指定的索引鍵選取器函式來群組序列的項目，並從每個群組及其索引鍵建立結果值。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The keys are compared by using a specified comparer.</source>
          <target state="translated">索引鍵是使用指定的比較子來進行比較。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> 型別項目的集合，其中每個項目都代表群組及其索引鍵的投影。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">每個 <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> 中的項目型別。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的結果值的型別<bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">要群組其項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">用來擷取各項目之索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">用來將每個來源項目對應至 <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> 之項目的函式。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">用來從各個群組建立結果值的函式。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">依據指定的索引鍵選取器函式來群組序列的項目，並從每個群組及其索引鍵建立結果值。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The elements of each group are projected by using a specified function.</source>
          <target state="translated">每個群組的項目都是利用指定的函式進行投影。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> 型別項目的集合，其中每個項目都代表群組及其索引鍵的投影。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">查詢運算式語法， <ph id="ph1">`group by`</ph> (Visual C#) 或<ph id="ph2">`Group By Into`</ph>(Visual Basic) 子句的引動過程轉譯<ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29&gt;</ph> to group the projected elements of a sequence and then project a sequence of results of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29&gt;</ph>來群組序列的預測的項目，並接著按一下 專案類型的結果的序列<ph id="ph2">`TResult`</ph>。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">每個 <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> 中的項目型別。</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的結果值的型別<bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">要群組其項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">用來擷取各項目之索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">用來將每個來源項目對應至 <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> 之項目的函式。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">用來從各個群組建立結果值的函式。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys with.</source>
          <target state="translated">用來比較索引鍵的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">依據指定的索引鍵選取器函式來群組序列的項目，並從每個群組及其索引鍵建立結果值。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</source>
          <target state="translated">索引鍵值是使用指定的比較子來進行比較，而每個群組的項目則都是利用指定的函式進行投影。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> 型別項目的集合，其中每個項目都代表群組及其索引鍵的投影。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Correlates the elements of two sequences based on key equality, and groups the results.</source>
          <target state="translated">根據索引鍵相等與否，將兩個序列的項目相互關聯，並群組產生的結果。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">第一個序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">第二個序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">索引鍵選取器函式所傳回之索引鍵的類型。</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the result elements.</source>
          <target state="translated">結果項目的類型。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The first sequence to join.</source>
          <target state="translated">要聯結的第一個序列。</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">要加入第一個序列的序列。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">用來從第一個序列各個項目擷取聯結索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">用來從第二個序列各個項目擷取聯結索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</source>
          <target state="translated">函式，用來從第一個序列的項目以及第二個序列的相符項目集合建立結果項目。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>Correlates the elements of two sequences based on equality of keys and groups the results.</source>
          <target state="translated">根據索引鍵相等與否，將兩個序列的項目相互關聯，並群組產生的結果。</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The default equality comparer is used to compare keys.</source>
          <target state="translated">預設的相等比較子是用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing a grouped join on two sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含透過對兩個序列執行群組聯結所取得之型別 <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> 的項目。</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">預設相等比較子， <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來雜湊和比較索引鍵。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> produces hierarchical results, which means that elements from <ph id="ph2">`outer`</ph> are paired with collections of matching elements from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> 產生階層式結果，這表示，項目從<ph id="ph2">`outer`</ph>會與集合的相符項目配對<ph id="ph3">`inner`</ph>。</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">`GroupJoin`</ph> enables you to base your results on a whole set of matches for each element of <ph id="ph2">`outer`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> 可讓您提供完整的相符項目，每個項目設定的基礎結果<ph id="ph2">`outer`</ph>。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>If there are no correlated elements in <ph id="ph1">`inner`</ph> for a given element of <ph id="ph2">`outer`</ph>, the sequence of matches for that element will be empty but will still appear in the results.</source>
          <target state="translated">如果不有任何相互關聯的項目中<ph id="ph1">`inner`</ph>給定項目的<ph id="ph2">`outer`</ph>，將會是空的相符項目序列，但仍然會出現在結果中。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The <ph id="ph1">`resultSelector`</ph> function is called only one time for each <ph id="ph2">`outer`</ph> element together with a collection of all the <ph id="ph3">`inner`</ph> elements that match the <ph id="ph4">`outer`</ph> element.</source>
          <target state="translated"><ph id="ph1">`resultSelector`</ph>函式會呼叫一次，每個<ph id="ph2">`outer`</ph>連同所有集合的項目<ph id="ph3">`inner`</ph>符合項目<ph id="ph4">`outer`</ph>項目。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>This differs from the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method, in which the result selector function is invoked on pairs that contain one element from <ph id="ph2">`outer`</ph> and one element from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated">這不同於<ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph>方法，在其中結果選取器函式會叫用對包含一個項目從<ph id="ph2">`outer`</ph>和一個項目從<ph id="ph3">`inner`</ph>。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">`GroupJoin`</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each element of <ph id="ph3">`outer`</ph>, the order of the matching elements from <ph id="ph4">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> 保留項目的順序<ph id="ph2">`outer`</ph>，和每個項目<ph id="ph3">`outer`</ph>，從相符項目的順序<ph id="ph4">`inner`</ph>。</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> has no direct equivalent in traditional relational database terms.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> 在傳統的關聯式資料庫詞彙中有沒有直接的對等用法。</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>However, this method does implement a superset of inner joins and left outer joins.</source>
          <target state="translated">不過，這個方法未實作內部聯結和左方外部聯結的超集。</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>Both of these operations can be written in terms of a grouped join.</source>
          <target state="translated">這兩種作業可以寫入以群組的聯結。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt>聯結作業<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>。</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>In query expression syntax, a <ph id="ph1">`join … into`</ph> (Visual C#) or <ph id="ph2">`Group Join`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>.</source>
          <target state="translated">查詢運算式語法， <ph id="ph1">`join … into`</ph> (Visual C#) 或<ph id="ph2">`Group Join`</ph>(Visual Basic) 子句的引動過程轉譯<ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29&gt;</ph> to perform a grouped join on two sequences.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29&gt;</ph>執行群組的聯結兩個序列。</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph>、<ph id="ph2">&lt;paramref name="inner" /&gt;</ph>、<ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph>、<ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> 或 <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> 為 <ph id="ph6">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">第一個序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">第二個序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">索引鍵選取器函式所傳回之索引鍵的類型。</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the result elements.</source>
          <target state="translated">結果項目的類型。</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The first sequence to join.</source>
          <target state="translated">要聯結的第一個序列。</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">要加入第一個序列的序列。</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">用來從第一個序列各個項目擷取聯結索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">用來從第二個序列各個項目擷取聯結索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</source>
          <target state="translated">函式，用來從第一個序列的項目以及第二個序列的相符項目集合建立結果項目。</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to hash and compare keys.</source>
          <target state="translated">用來雜湊及比較索引鍵的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Correlates the elements of two sequences based on key equality and groups the results.</source>
          <target state="translated">根據索引鍵相等與否，將兩個序列的項目相互關聯，並群組產生的結果。</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> is used to compare keys.</source>
          <target state="translated">指定的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> 是用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing a grouped join on two sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含透過對兩個序列執行群組聯結所取得之型別 <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> 的項目。</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">如果<ph id="ph1">`comparer`</ph>是<ph id="ph2">`null`</ph>的預設相等比較子， <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來雜湊和比較索引鍵。</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> produces hierarchical results, which means that elements from <ph id="ph2">`outer`</ph> are paired with collections of matching elements from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> 產生階層式結果，這表示，項目從<ph id="ph2">`outer`</ph>會與集合的相符項目配對<ph id="ph3">`inner`</ph>。</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">`GroupJoin`</ph> enables you to base your results on a whole set of matches for each element of <ph id="ph2">`outer`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> 可讓您提供完整的相符項目，每個項目設定的基礎結果<ph id="ph2">`outer`</ph>。</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>If there are no correlated elements in <ph id="ph1">`inner`</ph> for a given element of <ph id="ph2">`outer`</ph>, the sequence of matches for that element will be empty but will still appear in the results.</source>
          <target state="translated">如果不有任何相互關聯的項目中<ph id="ph1">`inner`</ph>給定項目的<ph id="ph2">`outer`</ph>，將會是空的相符項目序列，但仍然會出現在結果中。</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The <ph id="ph1">`resultSelector`</ph> function is called only one time for each <ph id="ph2">`outer`</ph> element together with a collection of all the <ph id="ph3">`inner`</ph> elements that match the <ph id="ph4">`outer`</ph> element.</source>
          <target state="translated"><ph id="ph1">`resultSelector`</ph>函式會呼叫一次，每個<ph id="ph2">`outer`</ph>連同所有集合的項目<ph id="ph3">`inner`</ph>符合項目<ph id="ph4">`outer`</ph>項目。</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This differs from the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method in which the result selector function is invoked on pairs that contain one element from <ph id="ph2">`outer`</ph> and one element from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated">這不同於<ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph>方法中的結果選取器函式會叫用對包含一個項目從<ph id="ph2">`outer`</ph>和一個項目從<ph id="ph3">`inner`</ph>。</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">`GroupJoin`</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each element of <ph id="ph3">`outer`</ph>, the order of the matching elements from <ph id="ph4">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> 保留項目的順序<ph id="ph2">`outer`</ph>，和每個項目<ph id="ph3">`outer`</ph>，從相符項目的順序<ph id="ph4">`inner`</ph>。</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> has no direct equivalent in traditional relational database terms.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> 在傳統的關聯式資料庫詞彙中有沒有直接的對等用法。</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>However, this method does implement a superset of inner joins and left outer joins.</source>
          <target state="translated">不過，這個方法未實作內部聯結和左方外部聯結的超集。</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Both of these operations can be written in terms of a grouped join.</source>
          <target state="translated">這兩種作業可以寫入以群組的聯結。</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt>聯結作業<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>。</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph>、<ph id="ph2">&lt;paramref name="inner" /&gt;</ph>、<ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph>、<ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> 或 <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> 為 <ph id="ph6">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Produces the set intersection of two sequences.</source>
          <target state="translated">產生兩個序列的交集。</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">輸入序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated">傳回其獨特項目同時出現在 <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> 中的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in the first sequence will be returned.</source>
          <target state="translated">傳回其獨特項目同時出現在第一個序列中的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set intersection of two sequences by using the default equality comparer to compare values.</source>
          <target state="translated">使用預設相等比較子來比較值，以便產生兩個序列的交集。</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence that contains the elements that form the set intersection of two sequences.</source>
          <target state="translated">序列，其中包含形成兩個序列之交集的項目。</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</source>
          <target state="translated">A 和 B 的兩個集合的交集會定義為包含所有項目同時出現在 B 中，但沒有其他項目集合。</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> yields distinct elements occurring in both sequences in the order in which they appear in <ph id="ph2">`first`</ph>.</source>
          <target state="translated">當這個方法所傳回的物件會列舉<ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph>會產生不同的項目發生在兩個序列中的出現順序<ph id="ph2">`first`</ph>。</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">預設相等比較子， <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來比較值之型別的實作<ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>泛型介面。</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">若要比較的自訂資料類型，您需要實作這個介面，並提供您自己<ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph>類型的方法。</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return the elements that appear in each of two sequences of integers.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>傳回整數的兩個序列的每個出現的項目。</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare sequences of objects of a custom data type, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in a helper class.</source>
          <target state="translated">如果您想要比較之物件的自訂資料類型的序列，您必須實作<ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>協助程式類別中的泛型介面。</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">下列程式碼範例示範如何實作這個介面中的自訂資料類型，並提供<ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">實作這個介面之後，您可以使用的序列<ph id="ph1">`ProductA`</ph>中的物件<ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph>方法，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="second" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">輸入序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated">傳回其獨特項目同時出現在 <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> 中的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in the first sequence will be returned.</source>
          <target state="translated">傳回其獨特項目同時出現在第一個序列中的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">用來比較值的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set intersection of two sequences by using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> 來比較值，以便產生兩個序列的交集。</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence that contains the elements that form the set intersection of two sequences.</source>
          <target state="translated">序列，其中包含形成兩個序列之交集的項目。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</source>
          <target state="translated">A 和 B 的兩個集合的交集會定義為包含所有項目同時出現在 B 中，但沒有其他項目集合。</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> yields distinct elements occurring in both sequences in the order in which they appear in <ph id="ph2">`first`</ph>.</source>
          <target state="translated">當這個方法所傳回的物件會列舉<ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph>會產生不同的項目發生在兩個序列中的出現順序<ph id="ph2">`first`</ph>。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">如果<ph id="ph1">`comparer`</ph>是<ph id="ph2">`null`</ph>的預設相等比較子， <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來比較值。</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> method.</source>
          <target state="translated">下列範例示範如何實作可用於相等比較子<ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">這個比較子實作之後，您可以使用的序列<ph id="ph1">`Product`</ph>中的物件<ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph>方法，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="second" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">根據相符索引鍵，將兩個序列的項目相互關聯。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">第一個序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">第二個序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">索引鍵選取器函式所傳回之索引鍵的類型。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the result elements.</source>
          <target state="translated">結果項目的類型。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The first sequence to join.</source>
          <target state="translated">要聯結的第一個序列。</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">要加入第一個序列的序列。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">用來從第一個序列各個項目擷取聯結索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">用來從第二個序列各個項目擷取聯結索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A function to create a result element from two matching elements.</source>
          <target state="translated">用來從兩個相符項目建立結果項目的函式。</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">根據相符索引鍵，將兩個序列的項目相互關聯。</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The default equality comparer is used to compare keys.</source>
          <target state="translated">預設的相等比較子是用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that has elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing an inner join on two sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含透過對兩個序列執行內部聯結所取得之型別 <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> 的項目。</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">預設相等比較子， <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來雜湊和比較索引鍵。</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A join refers to the operation of correlating the elements of two sources of information based on a common key.</source>
          <target state="translated">聯結是指兩個來源的資訊根據一般的索引鍵的項目相互關聯的作業。</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> brings the two information sources and the keys by which they are matched together in one method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> 將兩個資訊來源和相符的索引鍵，它們會一起其中一種方法呼叫中的整合。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>This differs from the use of <ph id="ph1">`SelectMany`</ph>, which requires more than one method call to perform the same operation.</source>
          <target state="translated">這不同於使用<ph id="ph1">`SelectMany`</ph>，這需要執行相同作業的多個方法呼叫。</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each of these elements, the order of the matching elements of <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> 保留項目的順序<ph id="ph2">`outer`</ph>，和每個項目，相符項目的順序<ph id="ph3">`inner`</ph>。</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>In query expression syntax, a <ph id="ph1">`join`</ph> (Visual C#) or <ph id="ph2">`Join`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph>.</source>
          <target state="translated">查詢運算式語法， <ph id="ph1">`join`</ph> (Visual C#) 或<ph id="ph2">`Join`</ph>(Visual Basic) 子句的引動過程轉譯<ph id="ph3">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>In relational database terms, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method implements an inner equijoin.</source>
          <target state="translated">在關聯式資料庫詞彙中，<ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph>方法會實作內部的等聯結。</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>'Inner' means that only elements that have a match in the other sequence are included in the results.</source>
          <target state="translated">「 內部 」 表示另一個序列中有符合的元素會包含在結果。</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>An 'equijoin' is a join in which the keys are compared for equality.</source>
          <target state="translated">等聯結 ' 聯結中的索引鍵比較是否相等。</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A left outer join operation has no dedicated standard query operator, but can be performed by using the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method.</source>
          <target state="translated">左方外部聯結作業有沒有專用的標準查詢運算子，但可使用執行<ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt>聯結作業<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>。</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29&gt;</ph> to perform an inner join of two sequences based on a common key.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29&gt;</ph>來執行一般的索引鍵為基礎的兩個序列的內部聯結。</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph>、<ph id="ph2">&lt;paramref name="inner" /&gt;</ph>、<ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph>、<ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> 或 <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> 為 <ph id="ph6">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">第一個序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">第二個序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">索引鍵選取器函式所傳回之索引鍵的類型。</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the result elements.</source>
          <target state="translated">結果項目的類型。</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The first sequence to join.</source>
          <target state="translated">要聯結的第一個序列。</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">要加入第一個序列的序列。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">用來從第一個序列各個項目擷取聯結索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">用來從第二個序列各個項目擷取聯結索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to create a result element from two matching elements.</source>
          <target state="translated">用來從兩個相符項目建立結果項目的函式。</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to hash and compare keys.</source>
          <target state="translated">用來雜湊及比較索引鍵的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">根據相符索引鍵，將兩個序列的項目相互關聯。</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> is used to compare keys.</source>
          <target state="translated">指定的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> 是用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that has elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing an inner join on two sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含透過對兩個序列執行內部聯結所取得之型別 <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> 的項目。</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">如果 c<ph id="ph1">`omparer`</ph>是<ph id="ph2">`null`</ph>的預設相等比較子， <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來雜湊和比較索引鍵。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A join refers to the operation of correlating the elements of two sources of information based on a common key.</source>
          <target state="translated">聯結是指兩個來源的資訊根據一般的索引鍵的項目相互關聯的作業。</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> brings the two information sources and the keys by which they are matched together in one method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> 將兩個資訊來源和相符的索引鍵，它們會一起其中一種方法呼叫中的整合。</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This differs from the use of <ph id="ph1">`SelectMany`</ph>, which requires more than one method call to perform the same operation.</source>
          <target state="translated">這不同於使用<ph id="ph1">`SelectMany`</ph>，這需要執行相同作業的多個方法呼叫。</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each of these elements, the order of the matching elements of <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> 保留項目的順序<ph id="ph2">`outer`</ph>，和每個項目，相符項目的順序<ph id="ph3">`inner`</ph>。</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>In relational database terms, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method implements an inner equijoin.</source>
          <target state="translated">在關聯式資料庫詞彙中，<ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph>方法會實作內部的等聯結。</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>'Inner' means that only elements that have a match in the other sequence are included in the results.</source>
          <target state="translated">「 內部 」 表示另一個序列中有符合的元素會包含在結果。</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An 'equijoin' is a join in which the keys are compared for equality.</source>
          <target state="translated">等聯結 ' 聯結中的索引鍵比較是否相等。</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A left outer join operation has no dedicated standard query operator, but can be performed by using the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method.</source>
          <target state="translated">左方外部聯結作業有沒有專用的標準查詢運算子，但可使用執行<ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt>聯結作業<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>。</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph>、<ph id="ph2">&lt;paramref name="inner" /&gt;</ph>、<ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph>、<ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> 或 <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> 為 <ph id="ph6">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the last element of a sequence.</source>
          <target state="translated">傳回序列的最後一個項目。</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the last element of.</source>
          <target state="translated">要傳回最後一個項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the last element of a sequence.</source>
          <target state="translated">傳回序列的最後一個項目。</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The value at the last position in the source sequence.</source>
          <target state="translated">位於來源序列中最後一個位置的值。</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法擲回例外狀況，如果<ph id="ph2">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To instead return a default value when the source sequence is empty, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">若要改為傳回預設值，當來源序列是空白時，使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return the last element of an array.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>傳回陣列的最後一個項目。</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The source sequence is empty.</source>
          <target state="translated">來源序列為空。</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">傳回項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">用來測試每個項目是否符合條件的函式。</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the last element of a sequence that satisfies a specified condition.</source>
          <target state="translated">傳回序列中符合指定之條件的最後一個元素。</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The last element in the sequence that passes the test in the specified predicate function.</source>
          <target state="translated">序列中通過指定之述詞函式所做測試的最後一個項目。</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if no matching element is found in <ph id="ph2">`source`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>方法擲回例外狀況，如果沒有相符項目中找到<ph id="ph2">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>To instead return a default value when no matching element is found, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">若要改為傳回預設值，找到相符的項目時，使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to return the last element of an array that satisfies a condition.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>傳回陣列，符合條件的最後一個元素。</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">沒有任何項目符合 <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> 的條件。</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The source sequence is empty.</source>
          <target state="translated">來源序列為空。</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the last element of a sequence, or a default value if no element is found.</source>
          <target state="translated">傳回序列的最後一個項目；如果找不到任何項目，則傳回預設值。</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the last element of.</source>
          <target state="translated">要傳回最後一個項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the last element of a sequence, or a default value if the sequence contains no elements.</source>
          <target state="translated">傳回序列的最後一個元素；如果序列中沒有包含任何元素，則傳回預設值。</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the source sequence is empty; otherwise, the last element in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">如果來源序列是空的，則為 <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>)，否則為 <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 中的最後一個項目。</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">參考資料和可為 null 類型的預設值是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph>方法不會提供方法來指定預設值。</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">如果您想要指定預設值以外<ph id="ph1">`default(TSource)`</ph>，使用<ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph>範例 &gt; 一節中所述的方法。</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> on an empty array.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>上的空陣列。</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">有時候值<ph id="ph1">`default(TSource)`</ph>不是您想要使用如果集合不包含任何元素的預設值。</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">不檢查不必要的預設值的結果，並再將它如有必要變更，您可以改用<ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph>方法，以指定您想要使用這個集合是空的預設值。</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the last element.</source>
          <target state="translated">然後，呼叫<ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>取得最後一個項目。</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty.</source>
          <target state="translated">下列程式碼範例會使用這兩種技術以取得預設值是 1，如果數字的每月天數的集合是空的。</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead.</source>
          <target state="translated">因為整數的預設值為 0，沒有對應的當月的任何一天，預設值必須被指定為 1。</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query has finished executing.</source>
          <target state="translated">查詢完成執行後不想要的預設值會檢查第一個結果變數。</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The second result variable is obtained by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">第二個結果變數透過使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph>來指定預設值是 1。</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">傳回項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">用來測試每個項目是否符合條件的函式。</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</source>
          <target state="translated">傳回序列中符合條件的最後一個元素；如果找不到這類元素，則傳回預設值。</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</source>
          <target state="translated">如果序列是空的，或是沒有任何項目通過述詞函式中的測試，則為 <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>)，否則為通過述詞函式之測試的最後一個項目。</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">參考資料和可為 null 類型的預設值是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> by passing in a predicate.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>藉由傳遞述詞。</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In the second call to the method, there is no element in the sequence that satisfies the condition.</source>
          <target state="translated">在第二個呼叫方法時，沒有任何項目中符合條件的順序。</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents the number of elements in a sequence.</source>
          <target state="translated">傳回代表序列中項目數目的 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated">包含要計算之項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents the total number of elements in a sequence.</source>
          <target state="translated">傳回代表序列中項目總數的 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements in the source sequence.</source>
          <target state="translated">來源序列中的項目數目。</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Use this method rather than <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> when you expect the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">使用這個方法，而非<ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>在預期的結果是大於<ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into LongCount()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into LongCount()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to count the elements in an array.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>來計算陣列中的項目。</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements exceeds <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">項目數目超出 <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated">包含要計算之項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">用來測試每個項目是否符合條件的函式。</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents how many elements in a sequence satisfy a condition.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>，其代表序列中符合條件的項目數目。</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</source>
          <target state="translated">數字，代表序列中符合述詞函式之條件的項目數目。</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Use this method rather than <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> when you expect the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">使用這個方法，而非<ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>在預期的結果是大於<ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into LongCount()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into LongCount()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to count the elements in an array that satisfy a condition.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>計算陣列中滿足條件的項目。</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The number of matching elements exceeds <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">符合的項目數目超出 <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the maximum value in a sequence of values.</source>
          <target state="translated">傳回值序列中的最大值。</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列中的最大值。</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">序列中的最大值。</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Decimal&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph>來判斷序列中的最大值。</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列中的最大值。</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">序列中的最大值。</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Double&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph>來判斷序列中的最大值。</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列中的最大值。</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">序列中的最大值。</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int32&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph>來判斷序列中的最大值。</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int64&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph>來判斷序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">傳回可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Decimal&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果來源序列是空的或包含的值<ph id="ph1">`null`</ph>，此函數會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph>來判斷序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">傳回可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Double&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果來源序列是空的或包含的值<ph id="ph1">`null`</ph>，此函數會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph>來判斷序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">傳回可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int32&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果來源序列是空的或包含的值<ph id="ph1">`null`</ph>，此函數會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph>來判斷序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">傳回可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int64&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果來源序列是空的或包含的值<ph id="ph1">`null`</ph>，此函數會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph>來判斷序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">傳回可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Single&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果來源序列是空的或包含的值<ph id="ph1">`null`</ph>，此函數會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph>來判斷序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Single&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph>來判斷序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的值序列。</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the maximum value in a generic sequence.</source>
          <target state="translated">傳回泛型序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method uses that implementation to compare values.</source>
          <target state="translated">如果型別<ph id="ph1">`TSource`</ph>實作<ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>、<ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法使用這個實作來比較值。</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Otherwise, if type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">否則，如果型別<ph id="ph1">`TSource`</ph>實作<ph id="ph2">&lt;xref:System.IComparable&gt;</ph>，該實作用來比較值。</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If <ph id="ph1">`TSource`</ph> is a reference type and the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>, this method returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`TSource`</ph>是參考類型，而且來源序列是空的或包含的值<ph id="ph2">`null`</ph>，這個方法會傳回<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to determine the maximum value in a sequence of <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> objects.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>來判斷序列中的最大值<ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的值序列。</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最大的 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Decimal&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Decimal&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最大值。</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的值序列。</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最大的 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Double&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Double&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最大值。</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的值序列。</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最大的 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int32&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Int32&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最大值。</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的值序列。</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最大的 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int64&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Int64&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最大值。</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的值序列。</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最大的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Decimal&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in Visual Basic.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值類型，特別是<ph id="ph3">`Nullable&lt;Decimal&gt;`</ph>在 C# 或<ph id="ph4">`Nullable(Of Decimal)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最大值。</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的值序列。</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最大的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Double&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in Visual Basic.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值類型，特別是<ph id="ph3">`Nullable&lt;Double&gt;`</ph>在 C# 或<ph id="ph4">`Nullable(Of Double)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最大值。</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的值序列。</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最大的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int32&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int32)`</ph> in Visual Basic.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值類型，特別是<ph id="ph3">`Nullable&lt;Int32&gt;`</ph>在 C# 或<ph id="ph4">`Nullable(Of Int32)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最大值。</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的值序列。</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最大的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int64&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in Visual Basic.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值類型，特別是<ph id="ph3">`Nullable&lt;Int64&gt;`</ph>在 C# 或<ph id="ph4">`Nullable(Of Int64)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最大值。</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的值序列。</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最大的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Single&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in Visual Basic.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值類型，特別是<ph id="ph3">`Nullable&lt;Single&gt;`</ph>在 C# 或<ph id="ph4">`Nullable(Of Single)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最大值。</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的值序列。</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最大的 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Single&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Single&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最大值。</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">傳回值的型別<bpt id="p1">&lt;c&gt;</bpt>選取器<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">要判斷最大值的值序列。</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</source>
          <target state="translated">在泛型序列的每個項目上叫用轉換函式，並傳回最大的結果值。</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">序列中的最大值。</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>If type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
          <target state="translated">如果型別<ph id="ph1">`TResult`</ph>實作<ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>，這個方法會使用這個實作來比較值。</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Otherwise, if type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">否則，如果型別<ph id="ph1">`TResult`</ph>實作<ph id="ph2">&lt;xref:System.IComparable&gt;</ph>，該實作用來比較值。</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Max()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最大值。</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the minimum value in a sequence of values.</source>
          <target state="translated">傳回值序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Decimal&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph>來判斷序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Double&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph>來判斷序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int32&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph>來判斷序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int64&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph>來判斷序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">傳回可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Decimal&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果來源序列是空的或包含的值<ph id="ph1">`null`</ph>，此函數會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph>來判斷序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">傳回可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Double&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果來源序列是空的或包含的值<ph id="ph1">`null`</ph>，此函數會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph>來判斷序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">傳回可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int32&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果來源序列是空的或包含的值<ph id="ph1">`null`</ph>，此函數會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph>來判斷序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">傳回可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int64&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果來源序列是空的或包含的值<ph id="ph1">`null`</ph>，此函數會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph>來判斷序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">傳回可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Single&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">如果來源序列是空的或包含的值<ph id="ph1">`null`</ph>，此函數會傳回<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph>來判斷序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Single&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph>來判斷序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的值序列。</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the minimum value in a generic sequence.</source>
          <target state="translated">傳回泛型序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
          <target state="translated">如果型別<ph id="ph1">`TSource`</ph>實作<ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>，這個方法會使用這個實作來比較值。</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Otherwise, if type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">否則，如果型別<ph id="ph1">`TSource`</ph>實作<ph id="ph2">&lt;xref:System.IComparable&gt;</ph>，該實作用來比較值。</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If <ph id="ph1">`TSource`</ph> is a reference type and the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>, this function returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`TSource`</ph>是參考類型，而且來源序列是空的或包含的值<ph id="ph2">`null`</ph>，此函數會傳回<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to determine the minimum value in a sequence of <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> objects.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>來判斷序列中的最小值<ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的值序列。</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最小的 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Decimal&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Decimal&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最小值。</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的值序列。</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最小的 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Double&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Double&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最小值。</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的值序列。</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最小的 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int32&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Int32&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最小值。</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的值序列。</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最小的 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int64&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Int64&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最小值。</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的值序列。</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最小的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Decimal&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in Visual Basic.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值類型，特別是<ph id="ph3">`Nullable&lt;Decimal&gt;`</ph>在 C# 或<ph id="ph4">`Nullable(Of Decimal)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最小值。</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的值序列。</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最小的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Double&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in Visual Basic.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值類型，特別是<ph id="ph3">`Nullable&lt;Double&gt;`</ph>在 C# 或<ph id="ph4">`Nullable(Of Double)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最小值。</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的值序列。</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最小的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int32&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of source into a numeric type, specifically <ph id="ph2">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph3">`Nullable(Of Int32)`</ph> in Visual Basic.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數，<ph id="ph1">`selector`</ph>的投射來源成員到數值類型，特別是<ph id="ph2">`Nullable&lt;Int32&gt;`</ph>在 C# 或<ph id="ph3">`Nullable(Of Int32)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最小值。</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的值序列。</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最小的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Int64&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in Visual Basic.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值類型，特別是<ph id="ph3">`Nullable&lt;Int64&gt;`</ph>在 C# 或<ph id="ph4">`Nullable(Of Int64)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最小值。</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的值序列。</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最小的可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">C# 中類型為 <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 中類型為 <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> 的值，其對應於序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Single&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in Visual Basic.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值類型，特別是<ph id="ph3">`Nullable&lt;Single&gt;`</ph>在 C# 或<ph id="ph4">`Nullable(Of Single)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最小值。</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的值序列。</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">在序列的每個項目上叫用轉換函式，並傳回最小的 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph>方法會使用<ph id="ph2">&lt;xref:System.Single&gt;</ph>實作<ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph>比較的值。</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Single&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最小值。</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 沒有包含任何項目。</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">傳回值的型別<bpt id="p1">&lt;c&gt;</bpt>選取器<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">要判斷最小值的值序列。</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</source>
          <target state="translated">在泛型序列的每個項目上叫用轉換函式，並傳回最小的結果值。</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">序列中的最小值。</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>If type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
          <target state="translated">如果型別<ph id="ph1">`TResult`</ph>實作<ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>，這個方法會使用這個實作來比較值。</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Otherwise, if type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">否則，如果型別<ph id="ph1">`TResult`</ph>實作<ph id="ph2">&lt;xref:System.IComparable&gt;</ph>，該實作用來比較值。</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Min()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph>來判斷序列中預計值的最小值。</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The type to filter the elements of the sequence on.</source>
          <target state="translated">用來做為序列項目之篩選依據的類型。</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> whose elements to filter.</source>
          <target state="translated">要篩選其項目的 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>Filters the elements of an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> based on a specified type.</source>
          <target state="translated">根據指定的型別來篩選 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> 的項目。</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含輸入序列中型別為 <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> 的項目。</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29&gt;</ph> method returns only those elements in <ph id="ph2">`source`</ph> that can be cast to type <ph id="ph3">`TResult`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29&gt;</ph>方法會傳回中的這些元素<ph id="ph2">`source`</ph>可以轉換為類型<ph id="ph3">`TResult`</ph>。</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>To instead receive an exception if an element cannot be cast to type <ph id="ph1">`TResult`</ph>, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
          <target state="translated">如果項目無法轉換為類型，而收到例外狀況<ph id="ph1">`TResult`</ph>，使用<ph id="ph2">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">這個方法是可以套用至集合，其中有非參數化的類型，例如的幾個標準查詢運算子方法的其中一個<ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>This is because <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> extends the type <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
          <target state="translated">這是因為<ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph>擴充類型<ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> cannot only be applied to collections that are based on the parameterized <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> type, but collections that are based on the non-parameterized <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> type also.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> 無法只套用至為基礎的集合上的參數化<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>類型，但根據非參數化的集合<ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>也輸入。</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>By applying <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> to a collection that implements <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>, you gain the ability to query the collection by using the standard query operators.</source>
          <target state="translated">藉由套用<ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph>到集合中實作<ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>，您就可以使用標準查詢運算子來查詢集合。</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>For example, specifying a type argument of <ph id="ph1">&lt;xref:System.Object&gt;</ph> to <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> would return an object of type <ph id="ph3">`IEnumerable&lt;Object&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Object)`</ph> in Visual Basic, to which the standard query operators can be applied.</source>
          <target state="translated">例如，如果指定的型別引數<ph id="ph1">&lt;xref:System.Object&gt;</ph>至<ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph>會傳回型別的物件<ph id="ph3">`IEnumerable&lt;Object&gt;`</ph>在 C# 或<ph id="ph4">`IEnumerable(Of Object)`</ph>在 Visual Basic 中，可以套用標準查詢運算子。</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> to filter the elements of an <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph>篩選的項目<ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Sorts the elements of a sequence in ascending order.</source>
          <target state="translated">依遞增順序排序序列中的項目。</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">要排序的值序列。</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">用來從項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Sorts the elements of a sequence in ascending order according to a key.</source>
          <target state="translated">依據索引鍵，按遞增順序排序序列中的項目。</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">依據索引鍵排序其項目的 <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">若要排序序列的項目本身的值，指定 identity 函數 (<ph id="ph1">`x =&gt; x`</ph> Visual C# 中或<ph id="ph2">`Function(x) x`</ph>在 Visual Basic 中) 的<ph id="ph3">`keySelector`</ph>。</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">兩種方法定義為延伸類型<ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>，這是這個方法的傳回型別。</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">這兩種方法，也就是<ph id="ph1">`ThenBy`</ph>和<ph id="ph2">`ThenByDescending`</ph>，可讓您指定其他排序準則來排序序列。</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> 和<ph id="ph2">`ThenByDescending`</ph>也會傳回<ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>，這表示任何數目的連續呼叫<ph id="ph4">`ThenBy`</ph>或<ph id="ph5">`ThenByDescending`</ph>才能進行。</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">因為<ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>繼承自<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，您可以呼叫<ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>呼叫的結果<ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>，<ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>或<ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">如此一來，引進了新的主要排序略過先前建立的排序。</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">這個方法會使用預設比較子來比較索引鍵<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, an <ph id="ph1">`orderby`</ph> (Visual C#) or <ph id="ph2">`Order By`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>.</source>
          <target state="translated">查詢運算式語法， <ph id="ph1">`orderby`</ph> (Visual C#) 或<ph id="ph2">`Order By`</ph>(Visual Basic) 子句的引動過程轉譯<ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to sort the elements of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph>排序序列的項目。</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">要排序的值序列。</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">用來從項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">用來比較金鑰的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Sorts the elements of a sequence in ascending order by using a specified comparer.</source>
          <target state="translated">使用指定的比較子，依遞增順序排序序列中的項目。</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">依據索引鍵排序其項目的 <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">若要排序序列的項目本身的值，指定 identity 函數 (<ph id="ph1">`x =&gt; x`</ph> Visual C# 中或<ph id="ph2">`Function(x) x`</ph>在 Visual Basic 中) 的<ph id="ph3">`keySelector`</ph>。</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">兩種方法定義為延伸類型<ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>，這是這個方法的傳回型別。</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">這兩種方法，也就是<ph id="ph1">`ThenBy`</ph>和<ph id="ph2">`ThenByDescending`</ph>，可讓您指定其他排序準則來排序序列。</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> 和<ph id="ph2">`ThenByDescending`</ph>也會傳回<ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>，這表示任何數目的連續呼叫<ph id="ph4">`ThenBy`</ph>或<ph id="ph5">`ThenByDescending`</ph>才能進行。</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">因為<ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>繼承自<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，您可以呼叫<ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>呼叫的結果<ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>，<ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>或<ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">如此一來，引進了新的主要排序略過先前建立的排序。</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">如果<ph id="ph1">`comparer`</ph>是<ph id="ph2">`null`</ph>，預設的比較子<ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Sorts the elements of a sequence in descending order.</source>
          <target state="translated">依遞減順序排序序列中的項目。</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">要排序的值序列。</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">用來從項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Sorts the elements of a sequence in descending order according to a key.</source>
          <target state="translated">依據索引鍵，按遞減順序排序序列中的項目。</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">依據索引鍵按遞減順序排序其項目的 <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">若要排序序列的項目本身的值，指定 identity 函數 (<ph id="ph1">`x =&gt; x`</ph> Visual C# 中或<ph id="ph2">`Function(x) x`</ph>在 Visual Basic 中) 的<ph id="ph3">`keySelector`</ph>。</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>For an example of this method, see <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph>.</source>
          <target state="translated">如需這個方法的範例，請參閱<ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">兩種方法定義為延伸類型<ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>，這是這個方法的傳回型別。</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">這兩種方法，也就是<ph id="ph1">`ThenBy`</ph>和<ph id="ph2">`ThenByDescending`</ph>，可讓您指定其他排序準則來排序序列。</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> 和<ph id="ph2">`ThenByDescending`</ph>也會傳回<ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>，這表示任何數目的連續呼叫<ph id="ph4">`ThenBy`</ph>或<ph id="ph5">`ThenByDescending`</ph>才能進行。</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">因為<ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>繼承自<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，您可以呼叫<ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>呼叫的結果<ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>，<ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>或<ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">如此一來，引進了新的主要排序略過先前建立的排序。</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">這個方法會使用預設比較子來比較索引鍵<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, an <ph id="ph1">`orderby descending`</ph> (Visual C#) or <ph id="ph2">`Order By Descending`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>.</source>
          <target state="translated">查詢運算式語法， <ph id="ph1">`orderby descending`</ph> (Visual C#) 或<ph id="ph2">`Order By Descending`</ph>(Visual Basic) 子句的引動過程轉譯<ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">要排序的值序列。</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">用來從項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">用來比較金鑰的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Sorts the elements of a sequence in descending order by using a specified comparer.</source>
          <target state="translated">使用指定的比較子，依遞減順序排序序列中的項目。</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">依據索引鍵按遞減順序排序其項目的 <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">若要排序序列的項目本身的值，指定 identity 函數 (<ph id="ph1">`x =&gt; x`</ph> Visual C# 中或<ph id="ph2">`Function(x) x`</ph>在 Visual Basic 中) 的<ph id="ph3">`keySelector`</ph>。</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">兩種方法定義為延伸類型<ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>，這是這個方法的傳回型別。</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">這兩種方法，也就是<ph id="ph1">`ThenBy`</ph>和<ph id="ph2">`ThenByDescending`</ph>，可讓您指定其他排序準則來排序序列。</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> 和<ph id="ph2">`ThenByDescending`</ph>也會傳回<ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>，這表示任何數目的連續呼叫<ph id="ph4">`ThenBy`</ph>或<ph id="ph5">`ThenByDescending`</ph>才能進行。</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">因為<ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>繼承自<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，您可以呼叫<ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>呼叫的結果<ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>，<ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>或<ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">如此一來，引進了新的主要排序略過先前建立的排序。</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">如果<ph id="ph1">`comparer`</ph>是<ph id="ph2">`null`</ph>，預設的比較子<ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> to sort the elements of a sequence in descending order by using a transform function and a custom comparer.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph>排序序列中使用的轉換函式和自訂比較子，依遞減順序的項目。</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 項目的類型。</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A sequence of values.</source>
          <target state="translated">一連串的值。</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to prepend to <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">要新增在 <ph id="ph1">&lt;paramref name="source" /&gt;</ph> 開頭的值。</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Adds a value to the beginning of the sequence.</source>
          <target state="translated">將值新增至序列的開頭。</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A new sequence that begins with <ph id="ph1">&lt;paramref name="element" /&gt;</ph>.</source>
          <target state="translated">以 <ph id="ph1">&lt;paramref name="element" /&gt;</ph> 開頭的新序列。</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The value of the first integer in the sequence.</source>
          <target state="translated">序列中第一個整數的值。</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The number of sequential integers to generate.</source>
          <target state="translated">要產生的循序整數數目。</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>Generates a sequence of integral numbers within a specified range.</source>
          <target state="translated">產生在指定之範圍內的整數序列。</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that contains a range of sequential integral numbers.</source>
          <target state="translated">包含一個循序整數範圍之 C# 的 <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> 或 Visual Basic 的 <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of Int32)<ept id="p2">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Range%2A&gt;</ph> to generate a sequence of values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Range%2A&gt;</ph>產生一連串的值。</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="start" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> -1 is larger than <ph id="ph4">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="start" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> -1 大於 <ph id="ph4">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The type of the value to be repeated in the result sequence.</source>
          <target state="translated">要在結果序列中重複出現的值之類型。</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The value to be repeated.</source>
          <target state="translated">要重複的值。</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The number of times to repeat the value in the generated sequence.</source>
          <target state="translated">這個值要在產生的序列中重複出現的次數。</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>Generates a sequence that contains one repeated value.</source>
          <target state="translated">產生包含一個重複值的序列。</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains a repeated value.</source>
          <target state="translated">包含重複值的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Repeat%2A&gt;</ph> to generate a sequence of a repeated value.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Repeat%2A&gt;</ph>產生一連串的重複值。</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence of values to reverse.</source>
          <target state="translated">要反轉方向的值序列。</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Inverts the order of the elements in a sequence.</source>
          <target state="translated">反轉序列中項目的排序方向。</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence whose elements correspond to those of the input sequence in reverse order.</source>
          <target state="translated">其項目對應於輸入序列中反向排序之項目的序列。</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Unlike <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, this sorting method does not consider the actual values themselves in determining the order.</source>
          <target state="translated">不同於<ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>，這個排序方法，不會考慮中的實際值自行決定的順序。</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.</source>
          <target state="translated">相反地，它只會傳回項目要從中產生的相反順序基礎來源。</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Reverse%2A&gt;</ph> to reverse the order of elements in an array.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Reverse%2A&gt;</ph>反轉陣列中項目的順序。</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Projects each element of a sequence into a new form.</source>
          <target state="translated">將序列的每個元素規劃成一個新的表單。</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">傳回值的型別<bpt id="p1">&lt;c&gt;</bpt>選取器<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>A sequence of values to invoke a transform function on.</source>
          <target state="translated">要對於叫用轉換函式的值序列。</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">要套用到每個來源項目的轉換函式；此函式的第二個參數代表來源項目的索引。</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>Projects each element of a sequence into a new form by incorporating the element's index.</source>
          <target state="translated">透過加入項目的索引，將序列的每個項目投影成新的表單。</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the transform function on each element of <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其項目是對 <ph id="ph2">&lt;paramref name="source" /&gt;</ph> 之各個項目叫用轉換函式所產生的結果。</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The first argument to <ph id="ph1">`selector`</ph> represents the element to process.</source>
          <target state="translated">第一個引數<ph id="ph1">`selector`</ph>代表要處理的項目。</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The second argument to <ph id="ph1">`selector`</ph> represents the zero-based index of that element in the source sequence.</source>
          <target state="translated">第二個引數<ph id="ph1">`selector`</ph>表示來源序列中項目的以零為起始的索引。</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</source>
          <target state="translated">如果項目是以已知的順序排列，而且您想要運用特定的索引處的項目，例如，這可能會很有用。</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>It can also be useful if you want to retrieve the index of one or more elements.</source>
          <target state="translated">可能也很有用如果您想要擷取的一或多個項目索引。</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>This projection method requires the transform function, <ph id="ph1">`selector`</ph>, to produce one value for each value in the source sequence, <ph id="ph2">`source`</ph>.</source>
          <target state="translated">此投影方法需要轉換函式<ph id="ph1">`selector`</ph>，產生一個在來源序列，每個值的值<ph id="ph2">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>If <ph id="ph1">`selector`</ph> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</source>
          <target state="translated">如果<ph id="ph1">`selector`</ph>本身就是集合的值傳回，負責決定是否要以手動方式周遊子取用者。</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>In such a situation, it might be better for your query to return a single coalesced sequence of values.</source>
          <target state="translated">在這種情況下，可能更適合您的查詢來傳回單一值的聯合的序列。</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>To achieve this, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
          <target state="translated">若要達成此目的，使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>方法，而非<ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>Although <ph id="ph1">`SelectMany`</ph> works similarly to <ph id="ph2">`Select`</ph>, it differs in that the transform function returns a collection that is then expanded by <ph id="ph3">`SelectMany`</ph> before it is returned.</source>
          <target state="translated">雖然<ph id="ph1">`SelectMany`</ph>運作方式類似<ph id="ph2">`Select`</ph>，它不同，因為轉換函式傳回一個集合，然後展開<ph id="ph3">`SelectMany`</ph>傳回之前。</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29&gt;</ph> to project over a sequence of values and use the index of each element.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29&gt;</ph>投射到序列的值和使用每個項目的索引。</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">傳回值的型別<bpt id="p1">&lt;c&gt;</bpt>選取器<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to invoke a transform function on.</source>
          <target state="translated">要對於叫用轉換函式的值序列。</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Projects each element of a sequence into a new form.</source>
          <target state="translated">將序列的每個元素規劃成一個新的表單。</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the transform function on each element of <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其項目是對 <ph id="ph2">&lt;paramref name="source" /&gt;</ph> 之各個項目叫用轉換函式所產生的結果。</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This projection method requires the transform function, <ph id="ph1">`selector`</ph>, to produce one value for each value in the source sequence, <ph id="ph2">`source`</ph>.</source>
          <target state="translated">此投影方法需要轉換函式<ph id="ph1">`selector`</ph>，產生一個在來源序列，每個值的值<ph id="ph2">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>If <ph id="ph1">`selector`</ph> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</source>
          <target state="translated">如果<ph id="ph1">`selector`</ph>本身就是集合的值傳回，負責決定是否要以手動方式周遊子取用者。</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In such a situation, it might be better for your query to return a single coalesced sequence of values.</source>
          <target state="translated">在這種情況下，可能更適合您的查詢來傳回單一值的聯合的序列。</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>To achieve this, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
          <target state="translated">若要達成此目的，使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>方法，而非<ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Although <ph id="ph1">`SelectMany`</ph> works similarly to <ph id="ph2">`Select`</ph>, it differs in that the transform function returns a collection that is then expanded by <ph id="ph3">`SelectMany`</ph> before it is returned.</source>
          <target state="translated">雖然<ph id="ph1">`SelectMany`</ph>運作方式類似<ph id="ph2">`Select`</ph>，它不同，因為轉換函式傳回一個集合，然後展開<ph id="ph3">`SelectMany`</ph>傳回之前。</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, a <ph id="ph1">`select`</ph> (Visual C#) or <ph id="ph2">`Select`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
          <target state="translated">查詢運算式語法， <ph id="ph1">`select`</ph> (Visual C#) 或<ph id="ph2">`Select`</ph>(Visual Basic) 子句的引動過程轉譯<ph id="ph3">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to project over a sequence of values.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph>專案透過一連串的值。</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and flattens the resulting sequences into one sequence.</source>
          <target state="translated">將序列的每個項目都投影成 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，並將產生的序列簡化成單一序列。</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of the sequence returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的序列的項目類型<bpt id="p1">&lt;c&gt;</bpt>選取器<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>A sequence of values to project.</source>
          <target state="translated">要投影的值序列。</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and flattens the resulting sequences into one sequence.</source>
          <target state="translated">將序列的每個項目都投影成 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，並將產生的序列簡化成單一序列。</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其項目是在輸入序列的各個項目上叫用一對多轉換函式所產生的結果。</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> method enumerates the input sequence, uses a transform function to map each element to an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, and then enumerates and yields the elements of each such <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph>方法列舉輸入的序列中，使用轉換函式對應至每個項目<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，然後列舉，並產生每個這類元素<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>That is, for each element of <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> is invoked and a sequence of values is returned.</source>
          <target state="translated">也就是說，每個項目<ph id="ph1">`source`</ph>，<ph id="ph2">`selector`</ph>叫用，而且會傳回值的序列。</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> then flattens this two-dimensional collection of collections into a one-dimensional <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and returns it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> 然後會壓平合併成一維集合的這個二維集合<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>並將它傳回。</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>For example, if a query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to obtain the orders (of type <ph id="ph2">`Order`</ph>) for each customer in a database, the result is of type <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Order)`</ph> in Visual Basic.</source>
          <target state="translated">比方說，如果查詢使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph>取得訂單 (型別<ph id="ph2">`Order`</ph>) 資料庫中每位客戶，則結果會是類型<ph id="ph3">`IEnumerable&lt;Order&gt;`</ph>在 C# 或<ph id="ph4">`IEnumerable(Of Order)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>If instead the query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> to obtain the orders, the collection of collections of orders is not combined and the result is of type <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in C# or <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> in Visual Basic.</source>
          <target state="translated">如果查詢改為使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>若要取得的訂單，訂單的集合不合併，而結果屬於類型<ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph>在 C# 或<ph id="ph3">`IEnumerable(Of List(Of Order))`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>In query expression syntax, each <ph id="ph1">`from`</ph> clause (Visual C#) or <ph id="ph2">`From`</ph> clause (Visual Basic) after the initial one translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</source>
          <target state="translated">在查詢運算式語法中，每個<ph id="ph1">`from`</ph>子句 (Visual C#) 或<ph id="ph2">`From`</ph>初始的子句 (Visual Basic) 其中一個將轉譯的引動過程<ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to perform a one-to-many projection over an array.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph>對陣列進行反覆執行的一對多投影。</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of the sequence returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的序列的項目類型<bpt id="p1">&lt;c&gt;</bpt>選取器<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>A sequence of values to project.</source>
          <target state="translated">要投影的值序列。</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">要套用到每個來源項目的轉換函式；此函式的第二個參數代表來源項目的索引。</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, and flattens the resulting sequences into one sequence.</source>
          <target state="translated">將序列的每個項目都投影成 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，並將產生的序列簡化成單一序列。</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The index of each source element is used in the projected form of that element.</source>
          <target state="translated">各來源項目的索引是在該項目的投影表單中使用。</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其項目是對輸入序列中各個項目叫用一對多轉換函式後所產生的結果。</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> method enumerates the input sequence, uses a transform function to map each element to an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, and then enumerates and yields the elements of each such <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph>方法列舉輸入的序列中，使用轉換函式對應至每個項目<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，然後列舉，並產生每個這類元素<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>That is, for each element of <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> is invoked and a sequence of values is returned.</source>
          <target state="translated">也就是說，每個項目<ph id="ph1">`source`</ph>，<ph id="ph2">`selector`</ph>叫用，而且會傳回值的序列。</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> then flattens this two-dimensional collection of collections into a one-dimensional <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and returns it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> 然後會壓平合併成一維集合的這個二維集合<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>並將它傳回。</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>For example, if a query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to obtain the orders (of type <ph id="ph2">`Order`</ph>) for each customer in a database, the result is of type <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Order)`</ph> in Visual Basic.</source>
          <target state="translated">比方說，如果查詢使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph>取得訂單 (型別<ph id="ph2">`Order`</ph>) 資料庫中每位客戶，則結果會是類型<ph id="ph3">`IEnumerable&lt;Order&gt;`</ph>在 C# 或<ph id="ph4">`IEnumerable(Of Order)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>If instead the query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> to obtain the orders, the collection of collections of orders is not combined and the result is of type <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in C# or <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> in Visual Basic.</source>
          <target state="translated">如果查詢改為使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>若要取得的訂單，訂單的集合不合併，而結果屬於類型<ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph>在 C# 或<ph id="ph3">`IEnumerable(Of List(Of Order))`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The first argument to <ph id="ph1">`selector`</ph> represents the element to process.</source>
          <target state="translated">第一個引數<ph id="ph1">`selector`</ph>代表要處理的項目。</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The second argument to <ph id="ph1">`selector`</ph> represents the zero-based index of that element in the source sequence.</source>
          <target state="translated">第二個引數<ph id="ph1">`selector`</ph>表示來源序列中項目的以零為起始的索引。</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</source>
          <target state="translated">如果項目是以已知的順序排列，而且您想要運用特定的索引處的項目，例如，這可能會很有用。</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>It can also be useful if you want to retrieve the index of one or more elements.</source>
          <target state="translated">可能也很有用如果您想要擷取的一或多個項目索引。</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to perform a one-to-many projection over an array and use the index of each outer element.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph>對陣列進行反覆執行的一對多投影，並使用每個外部項目的索引。</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the intermediate elements collected by <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所收集的中繼項目類型<bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of the resulting sequence.</source>
          <target state="translated">產生的序列之項目型別。</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A sequence of values to project.</source>
          <target state="translated">要投影的值序列。</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each element of the input sequence.</source>
          <target state="translated">要套用到輸入序列中各個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each element of the intermediate sequence.</source>
          <target state="translated">要套用到中繼序列中各個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</source>
          <target state="translated">將序列的每個項目投影為 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>、將產生的序列簡化成單一序列，並對其中的每個項目叫用結果選取器函式。</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> on each element of <ph id="ph3">&lt;paramref name="source" /&gt;</ph> and then mapping each of those sequence elements and their corresponding source element to a result element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其項目是執行下列動作後所產生的結果：對 <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> 的各個項目叫用一對多轉換函式 <ph id="ph3">&lt;paramref name="source" /&gt;</ph>，然後再將每個序列項目及其對應的來源項目對應到結果項目。</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> method is useful when you have to keep the elements of <ph id="ph2">`source`</ph> in scope for query logic that occurs after the call to <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>方法時，您必須保留的項目<ph id="ph2">`source`</ph>呼叫之後，就會發生的查詢邏輯的範圍內<ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>See the Example section for a code example.</source>
          <target state="translated">如需程式碼範例，請參閱＜範例＞一節。</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>If there is a bidirectional relationship between objects of type <ph id="ph1">`TSource`</ph> and objects of type <ph id="ph2">`TCollection`</ph>, that is, if an object of type <ph id="ph3">`TCollection`</ph> provides a property to retrieve the <ph id="ph4">`TSource`</ph> object that produced it, you do not need this overload of <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">如果類型的物件之間沒有雙向關聯性<ph id="ph1">`TSource`</ph>和類型的物件<ph id="ph2">`TCollection`</ph>，也就是如果型別的物件<ph id="ph3">`TCollection`</ph>提供屬性，以擷取<ph id="ph4">`TSource`</ph>，產生的物件不需要這多載<ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Instead, you can use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> and navigate back to the <ph id="ph2">`TSource`</ph> object through the <ph id="ph3">`TCollection`</ph> object.</source>
          <target state="translated">相反地，您可以使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph>然後瀏覽回<ph id="ph2">`TSource`</ph>物件透過<ph id="ph3">`TCollection`</ph>物件。</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>In query expression syntax, each <ph id="ph1">`from`</ph> clause (Visual C#) or <ph id="ph2">`From`</ph> clause (Visual Basic) after the initial one translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</source>
          <target state="translated">在查詢運算式語法中，每個<ph id="ph1">`from`</ph>子句 (Visual C#) 或<ph id="ph2">`From`</ph>初始的子句 (Visual Basic) 其中一個將轉譯的引動過程<ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> to perform a one-to-many projection over an array and use a result selector function to keep each corresponding element from the source sequence in scope for the final call to <ph id="ph2">`Select`</ph>.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>對陣列進行反覆執行的一對多投影，並使用結果選取器函式以防止來源序列的最後一個呼叫的範圍中的每個對應的項目<ph id="ph2">`Select`</ph>。</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>、<ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> 為 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the intermediate elements collected by <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所收集的中繼項目類型<bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of the resulting sequence.</source>
          <target state="translated">產生的序列之項目型別。</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A sequence of values to project.</source>
          <target state="translated">要投影的值序列。</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">要套用到每個來源項目的轉換函式；此函式的第二個參數代表來源項目的索引。</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each element of the intermediate sequence.</source>
          <target state="translated">要套用到中繼序列中各個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</source>
          <target state="translated">將序列的每個項目投影為 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>、將產生的序列簡化成單一序列，並對其中的每個項目叫用結果選取器函式。</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The index of each source element is used in the intermediate projected form of that element.</source>
          <target state="translated">各來源項目的索引是在該項目的中繼投影表單中使用。</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> on each element of <ph id="ph3">&lt;paramref name="source" /&gt;</ph> and then mapping each of those sequence elements and their corresponding source element to a result element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其項目是執行下列動作後所產生的結果：對 <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> 的各個項目叫用一對多轉換函式 <ph id="ph3">&lt;paramref name="source" /&gt;</ph>，然後再將每個序列項目及其對應的來源項目對應到結果項目。</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> method is useful when you have to keep the elements of <ph id="ph2">`source`</ph> in scope for query logic that occurs after the call to <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>方法時，您必須保留的項目<ph id="ph2">`source`</ph>呼叫之後，就會發生的查詢邏輯的範圍內<ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>See the Example section for a code example.</source>
          <target state="translated">如需程式碼範例，請參閱＜範例＞一節。</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>If there is a bidirectional relationship between objects of type <ph id="ph1">`TSource`</ph> and objects of type <ph id="ph2">`TCollection`</ph>, that is, if an object of type <ph id="ph3">`TCollection`</ph> provides a property to retrieve the <ph id="ph4">`TSource`</ph> object that produced it, you do not need this overload of <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">如果類型的物件之間沒有雙向關聯性<ph id="ph1">`TSource`</ph>和類型的物件<ph id="ph2">`TCollection`</ph>，也就是如果型別的物件<ph id="ph3">`TCollection`</ph>提供屬性，以擷取<ph id="ph4">`TSource`</ph>，產生的物件不需要這多載<ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Instead, you can use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> and navigate back to the <ph id="ph2">`TSource`</ph> object through the <ph id="ph3">`TCollection`</ph> object.</source>
          <target state="translated">相反地，您可以使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph>然後瀏覽回<ph id="ph2">`TSource`</ph>物件透過<ph id="ph3">`TCollection`</ph>物件。</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>、<ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> 為 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Determines whether two sequences are equal according to an equality comparer.</source>
          <target state="translated">根據相等比較子，判斷兩個序列是否相等。</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">輸入序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要與 <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> 比較的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to the first sequence.</source>
          <target state="translated">要與第一個序列比較的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</source>
          <target state="translated">使用項目之型別的預設相等比較子來比較項目，以判斷兩個序列是否相等。</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果根據其型別的預設相等比較子判斷，兩個來源序列的長度相等，而且其對應項目也相等，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for <ph id="ph2">`TSource`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法列舉以平行方式將兩個來源序列，並使用預設相等比較子來比較對應項目<ph id="ph2">`TSource`</ph>， <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">預設相等比較子， <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來比較值之型別的實作<ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>泛型介面。</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">若要比較的自訂資料類型，您需要實作這個介面，並提供您自己<ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph>類型的方法。</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code examples demonstrate how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to determine whether two sequences are equal.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>來判斷兩個序列是否相等。</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>In the first two examples, the method determines whether the compared sequences contain references to the same objects.</source>
          <target state="translated">在前兩個範例中，此方法會判斷比較的序列是否包含相同物件的參考。</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>In the third and fourth examples, the method compares the actual data of the objects within the sequences.</source>
          <target state="translated">在第三個和第四個範例中，此方法會比較實際的資料序列中的物件。</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>In this example the sequences are equal.</source>
          <target state="translated">在此範例中的序列相等。</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example compares two sequences that are not equal.</source>
          <target state="translated">下列程式碼範例會比較兩個不相等的序列。</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Note that the sequences contain identical data, but because the objects that they contain have different references, the sequences are not considered equal.</source>
          <target state="translated">請注意，序列包含相同的資料，因為它們包含的物件具有不同的參考，則不考慮其序列相等。</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare the actual data of the objects in the sequences instead of just comparing their references, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in your class.</source>
          <target state="translated">如果您想要比較的物件，而不是只要比較其參考此序列中實際資料，您必須實作<ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>您類別中的泛型介面。</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a helper class and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">下列程式碼範例示範如何實作這個介面中的協助程式類別，並提供<ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">實作這個介面之後，您可以使用的序列<ph id="ph1">`ProductA`</ph>中的物件<ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="second" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">輸入序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要與 <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> 比較的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to the first sequence.</source>
          <target state="translated">要與第一個序列比較的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to use to compare elements.</source>
          <target state="translated">用來比較項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Determines whether two sequences are equal by comparing their elements by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> 來比較項目，以判斷兩個序列是否相等。</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two source sequences are of equal length and their corresponding elements compare equal according to <ph id="ph2">&lt;paramref name="comparer" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果根據 <ph id="ph2">&lt;paramref name="comparer" /&gt;</ph> 判斷，兩個來源序列的長度相等，而且其對應項目的比較也相等，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph>方法列舉以平行方式將兩個來源序列，並使用指定的比較對應項目<ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare elements.</source>
          <target state="translated">如果 c<ph id="ph1">`omparer`</ph>是<ph id="ph2">`null`</ph>的預設相等比較子， <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來比較項目。</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method.</source>
          <target state="translated">下列範例示範如何實作可用於相等比較子<ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">這個比較子實作之後，您可以使用的序列<ph id="ph1">`Product`</ph>中的物件<ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph>方法，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="second" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns a single, specific element of a sequence.</source>
          <target state="translated">傳回序列的單一特定項目。</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the single element of.</source>
          <target state="translated">要傳回單一項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</source>
          <target state="translated">傳回序列的唯一一個元素，如果序列中不是正好一個元素，則擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The single element of the input sequence.</source>
          <target state="translated">輸入序列的單一項目。</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if the input sequence is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法擲回例外狀況，如果輸入的序列是空的。</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To instead return <ph id="ph1">`null`</ph> when the input sequence is empty, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</source>
          <target state="translated">若要改為傳回<ph id="ph1">`null`</ph>當輸入的序列是空的使用<ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to select the only element of an array.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>選取陣列中的唯一項目。</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> throws an exception when the sequence does not contain exactly one element.</source>
          <target state="translated">下列程式碼範例會示範<ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>序列不包含剛好只有一個項目時，會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence contains more than one element.</source>
          <target state="translated">輸入序列包含一個以上的項目。</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence is empty.</source>
          <target state="translated">輸入序列是空的。</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return a single element from.</source>
          <target state="translated">要傳回單一項目的來源 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test an element for a condition.</source>
          <target state="translated">用來測試項目是否符合條件的函式。</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</source>
          <target state="translated">傳回序列中符合指定之條件的唯一一個元素，如果有一個以上這類元素，則擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The single element of the input sequence that satisfies a condition.</source>
          <target state="translated">輸入序列中符合條件的單一項目。</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if the input sequence contains no matching element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>方法擲回例外狀況，如果輸入的序列包含沒有相符項目。</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>To instead return <ph id="ph1">`null`</ph> when no matching element is found, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</source>
          <target state="translated">若要改為傳回<ph id="ph1">`null`</ph>找到相符的項目時，使用<ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to select the only element of an array that satisfies a condition.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>選取唯一的項目滿足條件的陣列。</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> throws an exception when the sequence does not contain exactly one element that satisfies the condition.</source>
          <target state="translated">下列程式碼範例會示範<ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>序列不包含剛好一個滿足條件的項目時，會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">沒有任何項目符合 <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> 的條件。</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>More than one element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">超過一個項目符合 <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> 中的條件。</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The source sequence is empty.</source>
          <target state="translated">來源序列為空。</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns a single, specific element of a sequence, or a default value if that element is not found.</source>
          <target state="translated">傳回序列的單一特定項目；如果找不到該項目，則傳回預設值。</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the single element of.</source>
          <target state="translated">要傳回單一項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</source>
          <target state="translated">傳回序列的唯一一個項目，如果序列是空白，則為預設值，如果序列中有一個以上的項目，這個方法就會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The single element of the input sequence, or <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the sequence contains no elements.</source>
          <target state="translated">輸入序列的單一項目；如果序列沒有包含任何項目，則為 <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">參考資料和可為 null 類型的預設值是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>方法不會提供方法來指定預設值。</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">如果您想要指定預設值以外<ph id="ph1">`default(TSource)`</ph>，使用<ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph>範例 &gt; 一節中所述的方法。</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to select the only element of an array.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>選取陣列中的唯一項目。</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> returns a default value when the sequence does not contain exactly one element.</source>
          <target state="translated">下列程式碼範例會示範<ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>序列不包含剛好只有一個項目時，傳回預設值。</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">有時候值<ph id="ph1">`default(TSource)`</ph>不是您想要使用如果集合不包含任何元素的預設值。</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">不檢查不必要的預設值的結果，並再將它如有必要變更，您可以改用<ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph>方法，以指定您想要使用這個集合是空的預設值。</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the element.</source>
          <target state="translated">然後，呼叫<ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>若要取得的項目。</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty.</source>
          <target state="translated">下列程式碼範例會使用這兩種技術以取得預設值是 1，如果是空的頁面數字集合。</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead.</source>
          <target state="translated">因為整數的預設值為 0，但通常並不正確的頁碼，預設值必須被指定為 1。</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query has finished executing.</source>
          <target state="translated">查詢完成執行後不想要的預設值會檢查第一個結果變數。</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The second result variable is obtained by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">第二個結果變數透過使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph>來指定預設值是 1。</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence contains more than one element.</source>
          <target state="translated">輸入序列包含一個以上的項目。</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return a single element from.</source>
          <target state="translated">要傳回單一項目的來源 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test an element for a condition.</source>
          <target state="translated">用來測試項目是否符合條件的函式。</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</source>
          <target state="translated">傳回序列中符合指定之條件的唯一一個元素，如果沒有這類元素，則為預設值，如果有一個以上的元素符合條件，這個方法就會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The single element of the input sequence that satisfies the condition, or <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if no such element is found.</source>
          <target state="translated">輸入序列中符合條件的單一項目；如果找不到這類項目，則為 <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">參考資料和可為 null 類型的預設值是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to select the only element of an array that satisfies a condition.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>選取唯一的項目滿足條件的陣列。</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</source>
          <target state="translated">下列程式碼範例會示範<ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>序列不包含剛好只有一個項目符合條件時傳回預設值。</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>More than one element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">超過一個項目符合 <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> 中的條件。</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">傳回項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The number of elements to skip before returning the remaining elements.</source>
          <target state="translated">傳回其餘項目之前要略過的項目數目。</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</source>
          <target state="translated">略過序列中指定的項目數目，然後傳回其餘項目。</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements that occur after the specified index in the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含出現在輸入序列中指定之索引後面的項目。</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`source`</ph> contains fewer than <ph id="ph2">`count`</ph> elements, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">如果<ph id="ph1">`source`</ph>包含少於<ph id="ph2">`count`</ph>項目、 空白<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>傳回。</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`count`</ph> is less than or equal to zero, all elements of <ph id="ph2">`source`</ph> are yielded.</source>
          <target state="translated">如果<ph id="ph1">`count`</ph>小於或等於零的所有項目<ph id="ph2">`source`</ph>來產生。</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>方法都是功能的補充。</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and an integer <ph id="ph2">`n`</ph>, concatenating the results of <ph id="ph3">`coll.Take(n)`</ph> and <ph id="ph4">`coll.Skip(n)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">指定序列<ph id="ph1">`coll`</ph>和整數<ph id="ph2">`n`</ph>，串連的結果<ph id="ph3">`coll.Take(n)`</ph>和<ph id="ph4">`coll.Skip(n)`</ph>會產生相同的順序為<ph id="ph5">`coll`</ph>。</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>In Visual Basic query expression syntax, a <ph id="ph1">`Skip`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Skip`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> to skip a specified number of elements in a sorted array and return the remaining elements.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>來略過指定的已排序陣列中的項目數，並傳回其餘項目。</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">只要指定的條件為 true，便略過序列中的項目，然後傳回其餘項目。</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">傳回項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">用來測試每個項目是否符合條件的函式。</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">只要指定的條件為 true，便略過序列中的項目，然後傳回其餘項目。</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含的項目位於輸入序列中，而且是從沒有通過 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 所指定測試之線性系列中的第一個項目開始。</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method is implemented by using deferred execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>方法使用延後的執行來實作。</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method tests each element of <ph id="ph1">`source`</ph> by using <ph id="ph2">`predicate`</ph> and skips the element if the result is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">這個方法會測試每個項目<ph id="ph1">`source`</ph>使用<ph id="ph2">`predicate`</ph>並略過的項目，如果結果為<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>After the predicate function returns <ph id="ph1">`false`</ph> for an element, that element and the remaining elements in <ph id="ph2">`source`</ph> are yielded and there are no more invocations of <ph id="ph3">`predicate`</ph>.</source>
          <target state="translated">述詞函式傳回之後<ph id="ph1">`false`</ph>的項目，該項目並在其餘的項目<ph id="ph2">`source`</ph>因為都產生的任何多個引動過程而<ph id="ph3">`predicate`</ph>。</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>If <ph id="ph1">`predicate`</ph> returns <ph id="ph2">`true`</ph> for all elements in the sequence, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">如果<ph id="ph1">`predicate`</ph>傳回<ph id="ph2">`true`</ph>空序列中的所有項目的<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>傳回。</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>方法都是功能的補充。</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">指定序列<ph id="ph1">`coll`</ph>純虛擬函式和<ph id="ph2">`p`</ph>，串連的結果<ph id="ph3">`coll.TakeWhile(p)`</ph>和<ph id="ph4">`coll.SkipWhile(p)`</ph>會產生相同的順序為<ph id="ph5">`coll`</ph>。</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In Visual Basic query expression syntax, a <ph id="ph1">`Skip While`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Skip While`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to skip elements of an array as long as a condition is true.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>條件為 true 時，略過的陣列項目。</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">傳回項目的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">用來測試各來源項目是否符合條件的函式；此函式的第二個參數代表來源項目的索引。</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">只要指定的條件為 true，便略過序列中的項目，然後傳回其餘項目。</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The element's index is used in the logic of the predicate function.</source>
          <target state="translated">項目的索引是用於述詞功能的邏輯中。</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含的項目位於輸入序列中，而且是從沒有通過 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 所指定測試之線性系列中的第一個項目開始。</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and skips the element if the result is <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph>方法會測試每個項目<ph id="ph2">`source`</ph>使用<ph id="ph3">`predicate`</ph>並略過的項目，如果結果為<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>After the predicate function returns <ph id="ph1">`false`</ph> for an element, that element and the remaining elements in <ph id="ph2">`source`</ph> are yielded and there are no more invocations of <ph id="ph3">`predicate`</ph>.</source>
          <target state="translated">述詞函式傳回之後<ph id="ph1">`false`</ph>的項目，該項目並在其餘的項目<ph id="ph2">`source`</ph>因為都產生的任何多個引動過程而<ph id="ph3">`predicate`</ph>。</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>If <ph id="ph1">`predicate`</ph> returns <ph id="ph2">`true`</ph> for all elements in the sequence, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">如果<ph id="ph1">`predicate`</ph>傳回<ph id="ph2">`true`</ph>空序列中的所有項目的<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>傳回。</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
          <target state="translated">第一個引數<ph id="ph1">`predicate`</ph>表示若要測試的項目。</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
          <target state="translated">第二個引數代表內元素的以零為起始的索引<ph id="ph1">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>方法都是功能的補充。</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">指定序列<ph id="ph1">`coll`</ph>純虛擬函式和<ph id="ph2">`p`</ph>，串連的結果<ph id="ph3">`coll.TakeWhile(p)`</ph>和<ph id="ph4">`coll.SkipWhile(p)`</ph>會產生相同的順序為<ph id="ph5">`coll`</ph>。</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>In Visual Basic query expression syntax, a <ph id="ph1">`Skip While`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Skip While`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> to skip elements of an array as long as a condition that depends on the element's index is true.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph>取決於項目的索引條件為 true 時，略過的陣列項目。</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Computes the sum of a sequence of numeric values.</source>
          <target state="translated">計算數值序列的總和。</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">要計算總和的 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">計算 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">序列中值的總合。</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method returns zero if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph>方法會傳回零如果<ph id="ph2">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph>加總序列的值。</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">總和大於 <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">要計算總和的 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">計算 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">序列中值的總合。</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph>加總序列的值。</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">要計算總和的 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">計算 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">序列中值的總合。</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph>加總序列的值。</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">總和大於 <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">要計算總和的 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">計算 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">序列中值的總合。</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph>加總序列的值。</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">總和大於 <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">要計算總和之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">計算可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">序列中值的總合。</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The result doesnot include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">結果不包含值的<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph>加總序列的值。</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">總和大於 <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">要計算總和之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">計算可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">序列中值的總合。</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">結果不包含值的<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph>加總序列的值。</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">要計算總和之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">計算可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">序列中值的總合。</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">結果不包含值的<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph>加總序列的值。</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">總和大於 <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">要計算總和之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">計算可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">序列中值的總合。</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">結果不包含值的<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph>加總序列的值。</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">總和大於 <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">要計算總和之可為 Null 的 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">計算可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">序列中值的總合。</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">結果不包含值的<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph>加總序列的值。</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">要計算總和的 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列。</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">計算 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">序列中值的總合。</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph>加總序列的值。</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">用來計算總和的值序列。</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得之 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The sum of the projected values.</source>
          <target state="translated">預計值的總合。</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Decimal&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph>加總序列的預測的值。</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">總和大於 <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">用來計算總和的值序列。</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得之 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The sum of the projected values.</source>
          <target state="translated">預計值的總合。</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Double&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph>加總序列的預測的值。</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">用來計算總和的值序列。</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得之 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The sum of the projected values.</source>
          <target state="translated">預計值的總合。</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Int32&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph>加總序列的預測的值。</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">總和大於 <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">用來計算總和的值序列。</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得之 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The sum of the projected values.</source>
          <target state="translated">預計值的總合。</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Int64&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph>加總序列的預測的值。</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">總和大於 <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">用來計算總和的值序列。</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 值的總和。</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The sum of the projected values.</source>
          <target state="translated">預計值的總合。</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The result does not included values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">結果並不包含值<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in Visual Basic.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值類型，特別是<ph id="ph3">`Nullable&lt;Decimal&gt;`</ph>在 C# 或<ph id="ph4">`Nullable(Of Decimal)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph>加總序列的預測的值。</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">總和大於 <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">用來計算總和的值序列。</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 值的總和。</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The sum of the projected values.</source>
          <target state="translated">預計值的總合。</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">結果不包含值的<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in Visual Basic.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值類型，特別是<ph id="ph3">`Nullable&lt;Double&gt;`</ph>在 C# 或<ph id="ph4">`Nullable(Of Double)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph>加總序列的預測的值。</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">用來計算總和的值序列。</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 值的總和。</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The sum of the projected values.</source>
          <target state="translated">預計值的總合。</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">結果不包含值的<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int32)`</ph> in Visual Basic.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值類型，特別是<ph id="ph3">`Nullable&lt;Int32&gt;`</ph>在 C# 或<ph id="ph4">`Nullable(Of Int32)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph>加總序列的預測的值。</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">總和大於 <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">用來計算總和的值序列。</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 值的總和。</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The sum of the projected values.</source>
          <target state="translated">預計值的總合。</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">結果不包含值的<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in Visual Basic</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值類型，特別是<ph id="ph3">`Nullable&lt;Int64&gt;`</ph>在 C# 或<ph id="ph4">`Nullable(Of Int64)`</ph>在 Visual Basic 中</target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph>加總序列的預測的值。</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">總和大於 <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">用來計算總和的值序列。</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得可為 Null 之 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值的總和。</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The sum of the projected values.</source>
          <target state="translated">預計值的總合。</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">這個方法會傳回零如果<ph id="ph1">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">結果不包含值的<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in Visual Basic.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值類型，特別是<ph id="ph3">`Nullable&lt;Single&gt;`</ph>在 C# 或<ph id="ph4">`Nullable(Of Single)`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph>加總序列的預測的值。</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">用來計算總和的值序列。</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">要套用至每個項目的轉換函式。</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">計算在輸入序列中各項目上叫用轉換函式後所取得之 <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 值序列的總和。</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The sum of the projected values.</source>
          <target state="translated">預計值的總合。</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method returns zero if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph>方法會傳回零如果<ph id="ph2">`source`</ph>沒有包含任何元素。</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
          <target state="translated">您可以套用這個方法為任意值的序列，如果您提供的函數， <ph id="ph1">`selector`</ph>，之專案的成員<ph id="ph2">`source`</ph>成數值的型別，特別是<ph id="ph3">&lt;xref:System.Single&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Aggregate Into Sum()`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph>加總序列的預測的值。</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The sequence to return elements from.</source>
          <target state="translated">傳回項目的序列。</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The number of elements to return.</source>
          <target state="translated">要傳回的項目數目。</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Returns a specified number of contiguous elements from the start of a sequence.</source>
          <target state="translated">從序列開頭傳回指定的連續項目數目。</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the specified number of elements from the start of the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含輸入序列開頭處指定的項目數目。</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> enumerates <ph id="ph2">`source`</ph> and yields elements until <ph id="ph3">`count`</ph> elements have been yielded or <ph id="ph4">`source`</ph> contains no more elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> 列舉<ph id="ph2">`source`</ph>並產生項目，直到<ph id="ph3">`count`</ph>已產生的項目或<ph id="ph4">`source`</ph>未包含多個項目。</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`count`</ph> exceeds the number of elements in <ph id="ph2">`source`</ph>, all elements of <ph id="ph3">`source`</ph> are returned.</source>
          <target state="translated">如果<ph id="ph1">`count`</ph>超過中的項目數<ph id="ph2">`source`</ph>的所有項目<ph id="ph3">`source`</ph>會傳回。</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`count`</ph> is less than or equal to zero, <ph id="ph2">`source`</ph> is not enumerated and an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">如果<ph id="ph1">`count`</ph>小於或等於零，<ph id="ph2">`source`</ph>不是列舉，空的<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>傳回。</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>方法都是功能的補充。</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and an integer <ph id="ph2">`n`</ph>, concatenating the results of <ph id="ph3">`coll.Take(n)`</ph> and <ph id="ph4">`coll.Skip(n)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">指定序列<ph id="ph1">`coll`</ph>和整數<ph id="ph2">`n`</ph>，串連的結果<ph id="ph3">`coll.Take(n)`</ph>和<ph id="ph4">`coll.Skip(n)`</ph>會產生相同的順序為<ph id="ph5">`coll`</ph>。</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>In Visual Basic query expression syntax, a <ph id="ph1">`Take`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Take`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> to return elements from the start of a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph>從序列開頭傳回項目。</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</source>
          <target state="translated">只要指定的條件為 true，就會傳回序列中的項目，然後略過其餘項目。</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A sequence to return elements from.</source>
          <target state="translated">傳回項目的序列。</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">用來測試每個項目是否符合條件的函式。</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns elements from a sequence as long as a specified condition is true.</source>
          <target state="translated">只要指定的條件為 true，就會傳回序列中的項目。</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 其中包含輸入序列中的項目，而這些項目出現在已無法通過測試的項目前面。</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and yields the element if the result is <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>方法會測試每個項目<ph id="ph2">`source`</ph>使用<ph id="ph3">`predicate`</ph>並產生項目，如果結果為<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Enumeration stops when the predicate function returns <ph id="ph1">`false`</ph> for an element or when <ph id="ph2">`source`</ph> contains no more elements.</source>
          <target state="translated">述詞函式傳回時，就會停止列舉<ph id="ph1">`false`</ph>的項目或當<ph id="ph2">`source`</ph>未包含多個項目。</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>方法都是功能的補充。</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">指定序列<ph id="ph1">`coll`</ph>純虛擬函式和<ph id="ph2">`p`</ph>，串連的結果<ph id="ph3">`coll.TakeWhile(p)`</ph>和<ph id="ph4">`coll.SkipWhile(p)`</ph>會產生相同的順序為<ph id="ph5">`coll`</ph>。</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In Visual Basic query expression syntax, a <ph id="ph1">`Take While`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Take While`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to return elements from the start of a sequence as long as a condition is true.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>條件為 true 時，從序列開頭傳回項目。</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The sequence to return elements from.</source>
          <target state="translated">傳回項目的序列。</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">用來測試各來源項目是否符合條件的函式；此函式的第二個參數代表來源項目的索引。</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Returns elements from a sequence as long as a specified condition is true.</source>
          <target state="translated">只要指定的條件為 true，就會傳回序列中的項目。</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The element's index is used in the logic of the predicate function.</source>
          <target state="translated">項目的索引是用於述詞功能的邏輯中。</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence that occur before the element at which the test no longer passes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含輸入序列中的項目，而這些項目出現在已無法通過測試的項目前面。</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and yields the element if the result is <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph>方法會測試每個項目<ph id="ph2">`source`</ph>使用<ph id="ph3">`predicate`</ph>並產生項目，如果結果為<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Enumeration stops when the predicate function returns <ph id="ph1">`false`</ph> for an element or when <ph id="ph2">`source`</ph> contains no more elements.</source>
          <target state="translated">述詞函式傳回時，就會停止列舉<ph id="ph1">`false`</ph>的項目或當<ph id="ph2">`source`</ph>未包含多個項目。</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
          <target state="translated">第一個引數<ph id="ph1">`predicate`</ph>表示若要測試的項目。</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
          <target state="translated">第二個引數代表內元素的以零為起始的索引<ph id="ph1">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>方法都是功能的補充。</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">指定序列<ph id="ph1">`coll`</ph>純虛擬函式和<ph id="ph2">`p`</ph>，串連的結果<ph id="ph3">`coll.TakeWhile(p)`</ph>和<ph id="ph4">`coll.SkipWhile(p)`</ph>會產生相同的順序為<ph id="ph5">`coll`</ph>。</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>In Visual Basic query expression syntax, a <ph id="ph1">`Take While`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Take While`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> to return elements from the start of a sequence as long as a condition that uses the element's index is true.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph>，只要使用的項目索引的條件為 true，從序列開頭傳回項目。</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order.</source>
          <target state="translated">依遞增順序，執行序列中項目的後續排序作業。</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">包含要排序之項目的 <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">用來從各個項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</source>
          <target state="translated">依據索引鍵，按遞增順序執行序列中項目的後續排序作業。</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">依據索引鍵排序其項目的 <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">若要排序序列的項目本身的值，指定 identity 函數 (<ph id="ph1">`x =&gt; x`</ph> Visual C# 中或<ph id="ph2">`Function(x) x`</ph>在 Visual Basic 中) 的<ph id="ph3">`keySelector`</ph>。</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>定義為延伸類型<ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>，這也是一種方法的傳回型別。</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">此設計可讓您藉由套用任意數目的指定多個排序條件<ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">因為<ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>繼承自<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，您可以呼叫<ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>呼叫的結果<ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>，<ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>或<ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">如此一來，引進了新的主要排序略過先前建立的排序。</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">這個方法會使用預設比較子來比較索引鍵<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, an <ph id="ph1">`orderby [first criterion], [second criterion]`</ph> (Visual C#) or <ph id="ph2">`Order By [first criterion], [second criterion]`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>.</source>
          <target state="translated">查詢運算式語法， <ph id="ph1">`orderby [first criterion], [second criterion]`</ph> (Visual C#) 或<ph id="ph2">`Order By [first criterion], [second criterion]`</ph>(Visual Basic) 子句的引動過程轉譯<ph id="ph3">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to perform a secondary ordering of the elements in a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph>執行次要排序序列中的項目。</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">包含要排序之項目的 <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">用來從各個項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">用來比較金鑰的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</source>
          <target state="translated">使用指定的比較子，依遞增順序執行序列中項目的後續排序作業。</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">依據索引鍵排序其項目的 <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">若要排序序列的項目本身的值，指定 identity 函數 (<ph id="ph1">`x =&gt; x`</ph> Visual C# 中或<ph id="ph2">`Function(x) x`</ph>在 Visual Basic 中) 的<ph id="ph3">`keySelector`</ph>。</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>定義為延伸類型<ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>，這也是一種方法的傳回型別。</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">此設計可讓您藉由套用任意數目的指定多個排序條件<ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">因為<ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>繼承自<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，您可以呼叫<ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>呼叫的結果<ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>，<ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>或<ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">如此一來，引進了新的主要排序略過先前建立的排序。</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">如果<ph id="ph1">`comparer`</ph>是<ph id="ph2">`null`</ph>，預設的比較子<ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order.</source>
          <target state="translated">依遞減順序，執行序列中項目的後續排序作業。</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">包含要排序之項目的 <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">用來從各個項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</source>
          <target state="translated">依據索引鍵，按遞減順序執行序列中項目的後續排序作業。</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">依據索引鍵按遞減順序排序其項目的 <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">若要排序序列的項目本身的值，指定 identity 函數 (<ph id="ph1">`x =&gt; x`</ph> Visual C# 中或<ph id="ph2">`Function(x) x`</ph>在 Visual Basic 中) 的<ph id="ph3">`keySelector`</ph>。</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>定義為延伸類型<ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>，這也是一種方法的傳回型別。</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">此設計可讓您藉由套用任意數目的指定多個排序條件<ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">因為<ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>繼承自<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，您可以呼叫<ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>呼叫的結果<ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>，<ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>或<ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">如此一來，引進了新的主要排序略過先前建立的排序。</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This sorting method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">此排序方法會使用預設比較子來比較索引鍵<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In Visual C# query expression syntax, an <ph id="ph1">`orderby [first criterion], [second criterion] descending`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Visual C# 查詢運算式語法，<ph id="ph1">`orderby [first criterion], [second criterion] descending`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Order By [first criterion], [second criterion] Descending`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Visual Basic 查詢運算式語法，<ph id="ph1">`Order By [first criterion], [second criterion] Descending`</ph>子句的引動過程轉譯<ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">包含要排序之項目的 <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">用來從各個項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">用來比較金鑰的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</source>
          <target state="translated">使用指定的比較子，依遞減順序執行序列中項目的後續排序作業。</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">依據索引鍵按遞減順序排序其項目的 <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">若要排序序列的項目本身的值，指定 identity 函數 (<ph id="ph1">`x =&gt; x`</ph> Visual C# 中或<ph id="ph2">`Function(x) x`</ph>在 Visual Basic 中) 的<ph id="ph3">`keySelector`</ph>。</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>定義為延伸類型<ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>，這也是一種方法的傳回型別。</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">此設計可讓您藉由套用任意數目的指定多個排序條件<ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">因為<ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>繼承自<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，您可以呼叫<ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>呼叫的結果<ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>，<ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>或<ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">如此一來，引進了新的主要排序略過先前建立的排序。</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">如果<ph id="ph1">`comparer`</ph>是<ph id="ph2">`null`</ph>，預設的比較子<ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph>執行次要排序序列中使用自訂比較子，依遞減順序中的項目。</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create an array from.</source>
          <target state="translated">用來建立陣列的來源 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Creates an array from a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">從 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 建立陣列。</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An array that contains the elements from the input sequence.</source>
          <target state="translated">陣列，其中包含輸入序列中的項目。</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method forces immediate query evaluation and returns an array that contains the query results.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法強制立即查詢評估，並傳回陣列，其中包含查詢結果。</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>You can append this method to your query in order to obtain a cached copy of the query results.</source>
          <target state="translated">為了取得快取的查詢結果的複本，您可以將這個方法附加至查詢。</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> has similar behavior but returns a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> instead of an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> 具有類似的行為，但傳回<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>而非陣列。</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> to force immediate query evaluation and return an array of results.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph>來強制立即查詢評估並傳回結果的陣列。</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">從 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 建立 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">用來建立 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> 的來源 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">用來從各個項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function.</source>
          <target state="translated">根據指定的索引鍵選擇器函式，從 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> 建立 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">包含索引鍵和值的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method uses the default equality comparer <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> to compare keys.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph>方法會使用預設相等比較子<ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>以比較索引鍵。</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to create a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> by using a key selector.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph>建立<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>使用索引鍵選取器。</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> 產生的索引鍵為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> 產生兩個項目的重複索引鍵。</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the keys returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">用來建立 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> 的來源 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">用來從各個項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">用來比較金鑰的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function and key comparer.</source>
          <target state="translated">根據指定的索引鍵選取器函式和索引鍵比較子，從 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> 建立 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">包含索引鍵和值的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">如果<ph id="ph1">`comparer`</ph>是<ph id="ph2">`null`</ph>的預設相等比較子<ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> 產生的索引鍵為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> 產生兩個項目的重複索引鍵。</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">傳回值的型別<bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">用來建立 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> 的來源 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">用來從各個項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">用來從每個項目產生結果項目值的轉換函式。</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to specified key selector and element selector functions.</source>
          <target state="translated">根據指定的索引鍵選取器和項目選取器函式，從 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> 建立 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>，包含從輸入序列選取之 <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> 類型的值。</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method uses the default equality comparer <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> to compare keys.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph>方法會使用預設相等比較子<ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>以比較索引鍵。</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>、<ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> 為 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> 產生的索引鍵為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> 產生兩個項目的重複索引鍵。</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">傳回值的型別<bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">用來建立 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> 的來源 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">用來從各個項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">用來從每個項目產生結果項目值的轉換函式。</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">用來比較金鑰的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function, a comparer, and an element selector function.</source>
          <target state="translated">根據指定的索引鍵選取器函式、比較子和項目選取器函式，從 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> 建立 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>，包含從輸入序列選取之 <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> 類型的值。</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">如果<ph id="ph1">`comparer`</ph>是<ph id="ph2">`null`</ph>的預設相等比較子<ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>、<ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> 為 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> 產生的索引鍵為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> 產生兩個項目的重複索引鍵。</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> from.</source>
          <target state="translated">用來建立 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> 的來源 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">從 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 建立 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> that contains values of type TSource selected from the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph>，包含從輸入序列選取之 TSource 類型的值。</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> from.</source>
          <target state="translated">用來建立 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> 的來源 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">用來比較金鑰的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> using the <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> to compare keys</source>
          <target state="translated">使用 <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> 從 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 建立 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> 以比較金鑰</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph>，包含從輸入序列選取之 <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> 類型的值。</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> from.</source>
          <target state="translated">用來建立 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 的來源 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">從 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 建立 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that contains elements from the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>，包含輸入序列中的項目。</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method forces immediate query evaluation and returns a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains the query results.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法強制立即查詢評估並傳回<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>包含查詢結果。</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>You can append this method to your query in order to obtain a cached copy of the query results.</source>
          <target state="translated">為了取得快取的查詢結果的複本，您可以將這個方法附加至查詢。</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> has similar behavior but returns an array instead of a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> 具有類似的行為，但是會傳回而不是陣列<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> to force immediate query evaluation and return a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains the query results.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph>來強制立即查詢評估並傳回<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>包含查詢結果。</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Creates a generic <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">從 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 建立泛型 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">用來建立 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 的來源 <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">用來從各個項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function.</source>
          <target state="translated">根據指定的索引鍵選擇器函式，從 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 建立 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">包含索引鍵和值的 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph>方法會傳回<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>，來從一對多字典，將索引鍵對應至值的集合。</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>不同於<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>，它會執行為單一值的索引鍵的一對一對應。</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">預設相等比較子<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">用來建立 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 的來源 <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">用來從各個項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">用來比較金鑰的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function and key comparer.</source>
          <target state="translated">根據指定的索引鍵選取器函式和索引鍵比較子，從 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 建立 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">包含索引鍵和值的 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph>方法會傳回<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>，來從一對多字典，將索引鍵對應至值的集合。</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> is different to a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>不同<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>，它會執行為單一值的索引鍵的一對一對應。</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">如果<ph id="ph1">`comparer`</ph>是<ph id="ph2">`null`</ph>的預設相等比較子<ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">傳回值的型別<bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">用來建立 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 的來源 <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">用來從各個項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">用來從每個項目產生結果項目值的轉換函式。</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to specified key selector and element selector functions.</source>
          <target state="translated">根據指定的索引鍵選取器和項目選取器函式，從 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 建立 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>，包含從輸入序列選取之 <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> 類型的值。</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph>方法會傳回<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>，來從一對多字典，將索引鍵對應至值的集合。</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>不同於<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>，它會執行為單一值的索引鍵的一對一對應。</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">預設相等比較子<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> to create a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> by using a key selector function and an element selector function.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph>建立<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>使用索引鍵選取器函式以及項目選取器函式。</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>、<ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> 為 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">所傳回的索引鍵類型<bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">傳回值的型別<bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">用來建立 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 的來源 <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">用來從各個項目擷取索引鍵的函式。</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">用來從每個項目產生結果項目值的轉換函式。</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">用來比較金鑰的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function, a comparer and an element selector function.</source>
          <target state="translated">根據指定的索引鍵選取器函式、比較子和項目選取器函式，從 <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> 建立 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>，包含從輸入序列選取之 <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> 類型的值。</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph>方法會傳回<ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>，來從一對多字典，將索引鍵對應至值的集合。</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph>不同於<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>，它會執行為單一值的索引鍵的一對一對應。</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">如果<ph id="ph1">`comparer`</ph>是<ph id="ph2">`null`</ph>的預設相等比較子<ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>用於比較索引鍵。</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>、<ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> 或 <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> 為 <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Produces the set union of two sequences.</source>
          <target state="translated">產生兩個序列的集合等位。</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">輸入序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the first set for the union.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其獨特項目構成第一個等位集合。</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the second set for the union.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其獨特項目構成第二個等位集合。</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set union of two sequences by using the default equality comparer.</source>
          <target state="translated">使用預設相等比較值來比較值，以便產生兩個序列的集合等位。</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from both input sequences, excluding duplicates.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含來自兩個輸入序列的項目，但不包括重複的項目。</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method excludes duplicates from the return set.</source>
          <target state="translated">這個方法傳回集合中排除重複項目。</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This is different behavior to the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method, which returns all the elements in the input sequences including duplicates.</source>
          <target state="translated">這是以不同的行為<ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph>方法，包括重複項目輸入序列中傳回的所有項目。</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">預設相等比較子， <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來比較值之型別的實作<ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>泛型介面。</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">若要比較的自訂資料類型，您需要實作這個介面，並提供您自己<ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph>類型的方法。</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumerates <ph id="ph2">`first`</ph> and <ph id="ph3">`second`</ph> in that order and yields each element that has not already been yielded.</source>
          <target state="translated">當這個方法所傳回的物件會列舉<ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>列舉<ph id="ph2">`first`</ph>和<ph id="ph3">`second`</ph>的順序並產生已產生每個項目。</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the union of two sequences of integers.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>取得兩個整數的序列的聯集。</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare sequences of objects of a custom data type, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in a helperclass.</source>
          <target state="translated">如果您想要比較之物件的自訂資料類型的序列，您必須實作<ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>helperclass 中的泛型介面。</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">下列程式碼範例示範如何實作這個介面中的自訂資料類型，並提供<ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">實作這個介面之後，您可以使用的序列<ph id="ph1">`ProductA`</ph>中的物件<ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph>方法，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="second" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">輸入序列之項目的類型。</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the first set for the union.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其獨特項目構成第一個等位集合。</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the second set for the union.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其獨特項目構成第二個等位集合。</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">用來比較值的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set union of two sequences by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> 產生兩個序列的集合等位。</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from both input sequences, excluding duplicates.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含來自兩個輸入序列的項目，但不包括重複的項目。</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">如果 c<ph id="ph1">`omparer`</ph>是<ph id="ph2">`null`</ph>的預設相等比較子， <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>，用來比較值。</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumerates <ph id="ph2">`first`</ph> and <ph id="ph3">`second`</ph> in that order and yields each element that has not already been yielded.</source>
          <target state="translated">當這個方法所傳回的物件會列舉<ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>列舉<ph id="ph2">`first`</ph>和<ph id="ph3">`second`</ph>的順序並產生已產生每個項目。</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method differs from the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method because the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method returns all the elements in the input sequences including duplicates, whereas <ph id="ph4">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> returns only unique values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph>方法不同於<ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>方法因為<ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph>方法會傳回包含重複項目，此輸入序列中的所有項目而<ph id="ph4">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>傳回唯一的值。</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method.</source>
          <target state="translated">下列範例示範如何實作可用於相等比較子<ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">這個比較子實作之後，您可以使用的序列<ph id="ph1">`Product`</ph>中的物件<ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>方法，如下列範例所示。</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="second" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">根據述詞來篩選值序列。</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to filter.</source>
          <target state="translated">要篩選的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">用來測試每個項目是否符合條件的函式。</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">根據述詞來篩選值序列。</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence that satisfy the condition.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含輸入序列中符合條件的項目。</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In query expression syntax, a <ph id="ph1">`where`</ph> (Visual C#) or <ph id="ph2">`Where`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>.</source>
          <target state="translated">查詢運算式語法， <ph id="ph1">`where`</ph> (Visual C#) 或<ph id="ph2">`Where`</ph>(Visual Basic) 子句的引動過程轉譯<ph id="ph3">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to filter a sequence.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>來篩選序列。</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">項目的型別<bpt id="p1">&lt;c&gt;</bpt>來源<ept id="p1">&lt;/c&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to filter.</source>
          <target state="translated">要篩選的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">用來測試各來源項目是否符合條件的函式；此函式的第二個參數代表來源項目的索引。</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">根據述詞來篩選值序列。</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Each element's index is used in the logic of the predicate function.</source>
          <target state="translated">述詞函式的邏輯中使用各項目的索引。</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence that satisfy the condition.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含輸入序列中符合條件的項目。</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
          <target state="translated">第一個引數<ph id="ph1">`predicate`</ph>表示若要測試的項目。</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
          <target state="translated">第二個引數代表內元素的以零為起始的索引<ph id="ph1">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> to filter a sequence based on a predicate that involves the index of each element.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph>來篩選序列根據述詞牽涉的每個項目索引。</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The type of the elements of the first input sequence.</source>
          <target state="translated">第一個輸入序列的項目型別。</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The type of the elements of the second input sequence.</source>
          <target state="translated">第二個輸入序列的項目型別。</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The type of the elements of the result sequence.</source>
          <target state="translated">結果序列的項目型別。</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The first sequence to merge.</source>
          <target state="translated">要合併的第一個序列。</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The second sequence to merge.</source>
          <target state="translated">要合併的第二個序列。</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>A function that specifies how to merge the elements from the two sequences.</source>
          <target state="translated">指定如何從兩個序列合併項目的函式。</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</source>
          <target state="translated">將指定的函式套用至兩個序列的對應項目，產生結果的序列。</target>       </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains merged elements of two input sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>，其中包含兩個輸入序列的合併項目。</target>       </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">實作這個方法是使用延後的執行。</target>       </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">立即傳回值是儲存才能執行此動作的所有資訊的物件。</target>       </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其<ph id="ph1">`GetEnumerator`</ph>方法直接或使用<ph id="ph2">`foreach`</ph>Visual C# 或<ph id="ph3">`For Each`</ph>在 Visual Basic 中。</target>       </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The method merges each element of the first sequence with an element that has the same index in the second sequence.</source>
          <target state="translated">方法會將合併的第一個序列的每個項目，與具有相同的索引，第二個序列中的項目。</target>       </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</source>
          <target state="translated">如果序列沒有相同數目的項目，方法會將序列，直到達到其中一個的結尾。</target>       </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.</source>
          <target state="translated">例如，如果一個序列的方式有三項目，另一個有四個結果序列必須只有三個項目。</target>       </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Zip%2A&gt;</ph> method to merge two sequences.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Linq.Enumerable.Zip%2A&gt;</ph>方法來合併兩個序列。</target>       </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="second" /&gt;</ph> 為 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>