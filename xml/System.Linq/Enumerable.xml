<Type Name="Enumerable" FullName="System.Linq.Enumerable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b65af9e022135e017f1a90ce5dd6639c0ccc3dd7" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36557116" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Enumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Enumerable extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Enumerable" />
  <TypeSignature Language="VB.NET" Value="Public Module Enumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enumerable abstract sealed" />
  <TypeSignature Language="F#" Value="type Enumerable = class" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="3b63e-101">Provides a set of <see langword="static" /> (<see langword="Shared" /> in Visual Basic) methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3b63e-101">Provides a set of <see langword="static" /> (<see langword="Shared" /> in Visual Basic) methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-102">此類別中的方法提供實作標準查詢運算子的查詢資料來源實作<xref:System.Collections.Generic.IEnumerable%601>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-102">The methods in this class provide an implementation of the standard query operators for querying data sources that implement <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="3b63e-103">標準查詢運算子是一般用途的方法，請遵循[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]模式，並讓您透過任何表示周遊、 篩選和投射作業。以網路為基礎的程式設計語言。</span><span class="sxs-lookup"><span data-stu-id="3b63e-103">The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</span></span>  
  
 <span data-ttu-id="3b63e-104">這個類別中方法的大部分會定義為延伸的延伸模組方法<xref:System.Collections.Generic.IEnumerable%601>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-104">The majority of the methods in this class are defined as extension methods that extend <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="3b63e-105">這表示您可以在實作任何物件上呼叫執行個體方法<xref:System.Collections.Generic.IEnumerable%601>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-105">This means they can be called like an instance method on any object that implements <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="3b63e-106">列舉查詢物件之前，傳回的值序列的查詢中使用的方法不會耗用目標資料。</span><span class="sxs-lookup"><span data-stu-id="3b63e-106">Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated.</span></span> <span data-ttu-id="3b63e-107">這稱為 「 延後執行 」。</span><span class="sxs-lookup"><span data-stu-id="3b63e-107">This is known as deferred execution.</span></span> <span data-ttu-id="3b63e-108">傳回單一值的查詢中使用的方法會執行，並立即使用目標資料。</span><span class="sxs-lookup"><span data-stu-id="3b63e-108">Methods that are used in a query that returns a singleton value execute and consume the target data immediately.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Aggregate&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Aggregate&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TSource,TSource&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Aggregate&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, !!TSource, !!TSource&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource) (source As IEnumerable(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TSource, TSource&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * Func&lt;'Source, 'Source, 'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Aggregate (source, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="func" Type="System.Func&lt;TSource,TSource,TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-109">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-109">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-110">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-110">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          </span>
        </param>
        <param name="func">
          <span data-ttu-id="3b63e-111">An accumulator function to be invoked on each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-111">An accumulator function to be invoked on each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-112">Applies an accumulator function over a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-112">Applies an accumulator function over a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-113">The final accumulator value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-113">The final accumulator value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-114"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29>方法可簡化透過一連串的值執行計算。</span><span class="sxs-lookup"><span data-stu-id="3b63e-114">The <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="3b63e-115">這個方法的運作方式是呼叫`func`中每個元素一次`source`除了第一個。</span><span class="sxs-lookup"><span data-stu-id="3b63e-115">This method works by calling `func` one time for each element in `source` except the first one.</span></span> <span data-ttu-id="3b63e-116">每次`func`呼叫時，<xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29>通過的項目從序列和彙總的值 (做為第一個引數`func`)。</span><span class="sxs-lookup"><span data-stu-id="3b63e-116">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="3b63e-117">第一個項目`source`做為初始彙總的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-117">The first element of `source` is used as the initial aggregate value.</span></span> <span data-ttu-id="3b63e-118">結果`func`會取代先前的彙的總值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-118">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="3b63e-119"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> 傳回的最終結果`func`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-119"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> returns the final result of `func`.</span></span>  
  
 <span data-ttu-id="3b63e-120">這個多載<xref:System.Linq.Enumerable.Aggregate%2A>方法不適合所有情況下，因為它會使用第一個項目`source`做為初始彙總的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-120">This overload of the <xref:System.Linq.Enumerable.Aggregate%2A> method isn't suitable for all cases because it uses the first element of `source` as the initial aggregate value.</span></span> <span data-ttu-id="3b63e-121">如果傳回的值應該包含的項目，您應選擇另一個多載`source`符合特定條件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-121">You should choose another overload if the return value should include only the elements of `source` that meet a certain condition.</span></span> <span data-ttu-id="3b63e-122">例如，這個多載不可靠，如果您想要計算中的偶數`source`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-122">For example, this overload isn't reliable if you want to calculate the sum of the even numbers in `source`.</span></span> <span data-ttu-id="3b63e-123">結果會是不正確，如果第一個項目是奇數，而不是即使。</span><span class="sxs-lookup"><span data-stu-id="3b63e-123">The result will be incorrect if the first element is odd instead of even.</span></span>  
  
 <span data-ttu-id="3b63e-124">若要簡化常見的彙總作業，標準查詢運算子也包含一般用途計數方法<xref:System.Linq.Enumerable.Count%2A>，和四個數值彙總方法，也就是<xref:System.Linq.Enumerable.Min%2A>， <xref:System.Linq.Enumerable.Max%2A>， <xref:System.Linq.Enumerable.Sum%2A>，和<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-124">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-125">下列程式碼範例示範如何藉由使用反轉字串中的字詞的順序<xref:System.Linq.Enumerable.Aggregate%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-125">The following code example demonstrates how to reverse the order of words in a string by using <xref:System.Linq.Enumerable.Aggregate%2A>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#1)]
 [!code-vb[System.Linq.Enumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-126">
            <paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-126">
              <paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-127">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-127">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate&gt;">
      <MemberSignature Language="C#" Value="public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TAccumulate Aggregate&lt;TSource, TAccumulate&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate) (source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TAccumulate Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TAccumulate seed, Func&lt;TAccumulate, TSource, TAccumulate&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; -&gt; 'Accumulate" Usage="System.Linq.Enumerable.Aggregate (source, seed, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TAccumulate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-128">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-128">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TAccumulate">
          <span data-ttu-id="3b63e-129">累積值的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-129">The type of the accumulator value.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-130">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-130">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          </span>
        </param>
        <param name="seed">
          <span data-ttu-id="3b63e-131">The initial accumulator value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-131">The initial accumulator value.</span>
          </span>
        </param>
        <param name="func">
          <span data-ttu-id="3b63e-132">An accumulator function to be invoked on each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-132">An accumulator function to be invoked on each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-133">Applies an accumulator function over a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-133">Applies an accumulator function over a sequence.</span>
          </span>
          <span data-ttu-id="3b63e-134">The specified seed value is used as the initial accumulator value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-134">The specified seed value is used as the initial accumulator value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-135">The final accumulator value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-135">The final accumulator value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-136"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29>方法可簡化透過一連串的值執行計算。</span><span class="sxs-lookup"><span data-stu-id="3b63e-136">The <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="3b63e-137">這個方法的運作方式是呼叫`func`中每個元素一次`source`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-137">This method works by calling `func` one time for each element in `source`.</span></span> <span data-ttu-id="3b63e-138">每次`func`呼叫時，<xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29>通過的項目從序列和彙總的值 (做為第一個引數`func`)。</span><span class="sxs-lookup"><span data-stu-id="3b63e-138">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="3b63e-139">值`seed`參數作為彙總的初始值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-139">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="3b63e-140">結果`func`會取代先前的彙的總值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-140">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="3b63e-141"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> 傳回的最終結果`func`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-141"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> returns the final result of `func`.</span></span>  
  
 <span data-ttu-id="3b63e-142">若要簡化常見的彙總作業，標準查詢運算子也包含一般用途計數方法<xref:System.Linq.Enumerable.Count%2A>，和四個數值彙總方法，也就是<xref:System.Linq.Enumerable.Min%2A>， <xref:System.Linq.Enumerable.Max%2A>， <xref:System.Linq.Enumerable.Sum%2A>，和<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-142">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-143">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Aggregate%2A>適用於將累加函式，並使用種子值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-143">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and use a seed value.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#2)]
 [!code-vb[System.Linq.Enumerable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-144">
            <paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-144">
              <paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Aggregate&lt;TSource, TAccumulate, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func, class System.Func`2&lt;!!TAccumulate, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate, TResult) (source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TAccumulate seed, Func&lt;TAccumulate, TSource, TAccumulate&gt; ^ func, Func&lt;TAccumulate, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; * Func&lt;'Accumulate, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Aggregate (source, seed, func, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-145">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-145">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TAccumulate">
          <span data-ttu-id="3b63e-146">累積值的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-146">The type of the accumulator value.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-147">結果值的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-147">The type of the resulting value.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-148">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-148">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          </span>
        </param>
        <param name="seed">
          <span data-ttu-id="3b63e-149">The initial accumulator value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-149">The initial accumulator value.</span>
          </span>
        </param>
        <param name="func">
          <span data-ttu-id="3b63e-150">An accumulator function to be invoked on each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-150">An accumulator function to be invoked on each element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="3b63e-151">A function to transform the final accumulator value into the result value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-151">A function to transform the final accumulator value into the result value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-152">Applies an accumulator function over a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-152">Applies an accumulator function over a sequence.</span>
          </span>
          <span data-ttu-id="3b63e-153">The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-153">The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-154">The transformed final accumulator value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-154">The transformed final accumulator value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-155"><xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>方法可簡化透過一連串的值執行計算。</span><span class="sxs-lookup"><span data-stu-id="3b63e-155">The <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="3b63e-156">這個方法的運作方式是呼叫`func`中每個元素一次`source`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-156">This method works by calling `func` one time for each element in `source`.</span></span> <span data-ttu-id="3b63e-157">每次`func`呼叫時，<xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>通過的項目從序列和彙總的值 (做為第一個引數`func`)。</span><span class="sxs-lookup"><span data-stu-id="3b63e-157">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="3b63e-158">值`seed`參數作為彙總的初始值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-158">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="3b63e-159">結果`func`會取代先前的彙的總值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-159">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="3b63e-160">最終結果`func`傳遞至`resultSelector`取得的最終結果<xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-160">The final result of `func` is passed to `resultSelector` to obtain the final result of <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>.</span></span>  
  
 <span data-ttu-id="3b63e-161">若要簡化常見的彙總作業，標準查詢運算子也包含一般用途計數方法<xref:System.Linq.Enumerable.Count%2A>，和四個數值彙總方法，也就是<xref:System.Linq.Enumerable.Min%2A>， <xref:System.Linq.Enumerable.Max%2A>， <xref:System.Linq.Enumerable.Sum%2A>，和<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-161">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-162">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Aggregate%2A>套用將累加函式和結果選取器。</span><span class="sxs-lookup"><span data-stu-id="3b63e-162">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and a result selector.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#3)]
 [!code-vb[System.Linq.Enumerable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-163">
            <paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-163">
              <paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="All&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool All&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool All&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function All(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool All(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member All : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; bool" Usage="System.Linq.Enumerable.All (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-164">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-164">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-165">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to apply the predicate to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-165">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to apply the predicate to.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-166">A function to test each element for a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-166">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-167">Determines whether all elements of a sequence satisfy a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-167">Determines whether all elements of a sequence satisfy a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-168">
            <see langword="true" /> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-168">
              <see langword="true" /> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-169">這個方法不會傳回集合的所有項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-169">This method does not return all the elements of a collection.</span></span> <span data-ttu-id="3b63e-170">相反地，它會判斷集合中的所有項目是否符合條件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-170">Instead, it determines whether all the elements of a collection satisfy a condition.</span></span>  
  
 <span data-ttu-id="3b63e-171">列舉`source`可以判斷結果為已停止。</span><span class="sxs-lookup"><span data-stu-id="3b63e-171">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="3b63e-172">Visual Basic 查詢運算式語法，`Aggregate Into All()`子句的引動過程轉譯<xref:System.Linq.Enumerable.All%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-172">In Visual Basic query expression syntax, an `Aggregate Into All()` clause translates to an invocation of <xref:System.Linq.Enumerable.All%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-173">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.All%2A>來判斷序列中的所有項目是否符合條件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-173">The following code example demonstrates how to use <xref:System.Linq.Enumerable.All%2A> to determine whether all the elements in a sequence satisfy a condition.</span></span> <span data-ttu-id="3b63e-174">變數`allStartWithB`成立如果所有寵物名稱都開頭為"B"，或如果`pets`陣列是空的。</span><span class="sxs-lookup"><span data-stu-id="3b63e-174">Variable `allStartWithB` is true if all the pet names start with "B" or if the `pets` array is empty.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#4)]
 [!code-vb[System.Linq.Enumerable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#4)]  
  
 <span data-ttu-id="3b63e-175">布林值，<xref:System.Linq.Enumerable.All%2A>方法會傳回最常用的述詞在`where`子句 (`Where`子句在 Visual Basic 中的) 或直接呼叫<xref:System.Linq.Enumerable.Where%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-175">The Boolean value that the <xref:System.Linq.Enumerable.All%2A> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Enumerable.Where%2A> method.</span></span> <span data-ttu-id="3b63e-176">下列範例會示範這種使用`All`方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-176">The following example demonstrates this use of the `All` method.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#129](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#129)]
 [!code-vb[System.Linq.Enumerable#129](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#129)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-177">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-177">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Any&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-178">Determines whether any element of a sequence exists or satisfies a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-178">Determines whether any element of a sequence exists or satisfies a condition.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Any : seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.Any source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-179">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-179">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-180">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to check for emptiness.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-180">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to check for emptiness.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-181">Determines whether a sequence contains any elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-181">Determines whether a sequence contains any elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-182">
            <see langword="true" /> if the source sequence contains any elements; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-182">
              <see langword="true" /> if the source sequence contains any elements; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-183">這個方法不會傳回集合中的任何一個項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-183">This method does not return any one element of a collection.</span></span> <span data-ttu-id="3b63e-184">相反地，它會判斷集合是否包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-184">Instead, it determines whether the collection contains any elements.</span></span>  
  
 <span data-ttu-id="3b63e-185">列舉`source`可以判斷結果為已停止。</span><span class="sxs-lookup"><span data-stu-id="3b63e-185">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="3b63e-186">Visual Basic 查詢運算式語法，`Aggregate Into Any()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Any%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-186">In Visual Basic query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-187">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Any%2A>來判斷序列是否包含任何項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-187">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether a sequence contains any elements.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#5)]
 [!code-vb[System.Linq.Enumerable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#5)]  
  
 <span data-ttu-id="3b63e-188">布林值，<xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法會傳回最常用的述詞在`where`子句 (`Where`子句在 Visual Basic 中的) 或直接呼叫<xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-188">The Boolean value that the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method.</span></span> <span data-ttu-id="3b63e-189">下列範例會示範這種使用`Any`方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-189">The following example demonstrates this use of the `Any` method.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#130](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#130)]
 [!code-vb[System.Linq.Enumerable#130](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#130)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-190">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-190">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Docs>
    </Member>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Any : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; bool" Usage="System.Linq.Enumerable.Any (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-191">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-191">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-192">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to apply the predicate to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-192">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to apply the predicate to.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-193">A function to test each element for a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-193">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-194">Determines whether any element of a sequence satisfies a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-194">Determines whether any element of a sequence satisfies a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-195">
            <see langword="true" /> if any elements in the source sequence pass the test in the specified predicate; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-195">
              <see langword="true" /> if any elements in the source sequence pass the test in the specified predicate; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-196">這個方法不會傳回集合中的任何一個項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-196">This method does not return any one element of a collection.</span></span> <span data-ttu-id="3b63e-197">相反地，它會判斷是否符合條件集合中的任何項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-197">Instead, it determines whether any elements of a collection satisfy a condition.</span></span>  
  
 <span data-ttu-id="3b63e-198">列舉`source`可以判斷結果為已停止。</span><span class="sxs-lookup"><span data-stu-id="3b63e-198">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="3b63e-199">Visual Basic 查詢運算式語法，`Aggregate Into Any()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Any%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-199">In Visual Basic query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-200">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Any%2A>來判斷序列中的任何項目是否符合條件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-200">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether any element in a sequence satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#6)]
 [!code-vb[System.Linq.Enumerable#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-201">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-201">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Append&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Append&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource) (source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Append(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Append : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Append (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="element" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-202">
            <paramref name="source" /> 項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-202">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-203">A sequence of values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-203">A sequence of values.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="3b63e-204">The value to append to <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-204">The value to append to <paramref name="source" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-205">Appends a value to the end of the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-205">Appends a value to the end of the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-206">A new sequence that ends with <paramref name="element" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-206">A new sequence that ends with <paramref name="element" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-207">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-207">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; AsEnumerable&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; AsEnumerable&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ AsEnumerable(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-208">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-208">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-209">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-209">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-210">Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-210">Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-211">The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-211">The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-212"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法沒有任何作用以外變更編譯時間類型的`source`從型別可實作<xref:System.Collections.Generic.IEnumerable%601>至<xref:System.Collections.Generic.IEnumerable%601>本身。</span><span class="sxs-lookup"><span data-stu-id="3b63e-212">The <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method has no effect other than to change the compile-time type of `source` from a type that implements <xref:System.Collections.Generic.IEnumerable%601> to <xref:System.Collections.Generic.IEnumerable%601> itself.</span></span>  
  
 <span data-ttu-id="3b63e-213"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 可用於查詢實作，當序列實作之間選擇<xref:System.Collections.Generic.IEnumerable%601>但也有一組不同的可用查詢的公用方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-213"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> can be used to choose between query implementations when a sequence implements <xref:System.Collections.Generic.IEnumerable%601> but also has a different set of public query methods available.</span></span> <span data-ttu-id="3b63e-214">例如，假設泛型類別`Table`實作<xref:System.Collections.Generic.IEnumerable%601>和有它自己的方法，例如`Where`， `Select`，和`SelectMany`，呼叫`Where`會叫用公用`Where`方法`Table`.</span><span class="sxs-lookup"><span data-stu-id="3b63e-214">For example, given a generic class `Table` that implements <xref:System.Collections.Generic.IEnumerable%601> and has its own methods such as `Where`, `Select`, and `SelectMany`, a call to `Where` would invoke the public `Where` method of `Table`.</span></span> <span data-ttu-id="3b63e-215">A`Table`代表資料庫資料表類型可能會有`Where`方法會採用述詞的引數，做為運算式樹狀架構，並將樹狀目錄轉換成 SQL，遠端執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-215">A `Table` type that represents a database table could have a `Where` method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution.</span></span> <span data-ttu-id="3b63e-216">如果遠端執行不需要，例如因為述詞會叫用的本機方法，<xref:System.Linq.Enumerable.AsEnumerable%2A>方法可以用來隱藏自訂方法，並改為提供的標準查詢運算子。</span><span class="sxs-lookup"><span data-stu-id="3b63e-216">If remote execution is not desired, for example because the predicate invokes a local method, the <xref:System.Linq.Enumerable.AsEnumerable%2A> method can be used to hide the custom methods and instead make the standard query operators available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-217">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>隱藏類型的自訂`Where`時想要使用標準查詢運算子的實作方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-217">The following code example demonstrates how to use <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to hide a type's custom `Where` method when the standard query operator implementation is desired.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#108](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#108)]
 [!code-vb[System.Linq.Enumerable#108](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Average">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-218">Computes the average of a sequence of numeric values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-218">Computes the average of a sequence of numeric values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static decimal Average (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-219">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-219">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-220">Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-220">Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-221">The average of the sequence of values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-221">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-222">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-222">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-223">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>來計算值序列的平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-223">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-224">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-224">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-225">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-225">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-226">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-226">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-227">Computes the average of a sequence of <see cref="T:System.Double" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-227">Computes the average of a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-228">The average of the sequence of values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-228">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-229">元素的總和是否太大而無法表示為<xref:System.Double>，這個方法會傳回無限大的正數或負數。</span><span class="sxs-lookup"><span data-stu-id="3b63e-229">If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.</span></span>  
  
 <span data-ttu-id="3b63e-230">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-230">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-231">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-231">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-232">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-232">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-233">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-233">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;int&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-234">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-234">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-235">Computes the average of a sequence of <see cref="T:System.Int32" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-235">Computes the average of a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-236">The average of the sequence of values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-236">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-237">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-237">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-238">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-238">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-239">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-239">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-240">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-240">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;int64&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-241">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-241">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-242">Computes the average of a sequence of <see cref="T:System.Int64" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-242">Computes the average of a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-243">The average of the sequence of values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-243">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-244">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-244">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-245">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-245">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-246">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-246">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-247">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-247">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-248">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-248">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-249">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-249">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-250">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-250">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-251">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-251">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-252">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-252">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-253">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-253">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-254">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-254">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-255">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-255">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-256">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-256">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-257">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-257">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-258">元素的總和是否太大而無法表示為<xref:System.Double>，這個方法會傳回無限大的正數或負數。</span><span class="sxs-lookup"><span data-stu-id="3b63e-258">If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.</span></span>  
  
 <span data-ttu-id="3b63e-259">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-259">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-260">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-260">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-261">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-261">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-262">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-262">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-263">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-263">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-264">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-264">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-265">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-265">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-266">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-266">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-267">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-267">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-268">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-268">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-269">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-269">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-270">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-270">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-271">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-271">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-272">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-272">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-273">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-273">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-274">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-274">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-275">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-275">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-276">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-276">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-277">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-277">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-278">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-278">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-279">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-279">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-280">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-280">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-281">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-281">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static float Average (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-282">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-282">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-283">Computes the average of a sequence of <see cref="T:System.Single" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-283">Computes the average of a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-284">The average of the sequence of values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-284">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-285">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-285">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-286">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-286">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-287">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-287">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-288">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-288">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-289">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-289">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-290">A sequence of values that are used to calculate an average.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-290">A sequence of values that are used to calculate an average.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-291">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-291">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-292">Computes the average of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-292">Computes the average of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-293">The average of the sequence of values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-293">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-294">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-294">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-295">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-295">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-296">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-296">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-297">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-297">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-298">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-298">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-299">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-299">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-300">A sequence of values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-300">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-301">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-301">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-302">Computes the average of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-302">Computes the average of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-303">The average of the sequence of values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-303">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-304">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-304">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-305">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-305">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-306">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-306">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-307">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-307">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-308">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-308">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-309">A sequence of values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-309">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-310">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-310">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-311">Computes the average of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-311">Computes the average of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-312">The average of the sequence of values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-312">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-313">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-313">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-314">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-314">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-315">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-315">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-316">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-316">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-317">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-317">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-318">來源之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-318">The type of the elements of source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-319">A sequence of values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-319">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-320">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-320">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-321">Computes the average of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-321">Computes the average of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-322">The average of the sequence of values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-322">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-323">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-323">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-324">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-324">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-325">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-325">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-326">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-326">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-327">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-327">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-328">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-328">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-329">A sequence of values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-329">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-330">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-330">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-331">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-331">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-332">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-332">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-333">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-333">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-334">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-334">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-335">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-335">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-336">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-336">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-337">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-337">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-338">A sequence of values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-338">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-339">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-339">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-340">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-340">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-341">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-341">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-342">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-342">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-343">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-343">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-344">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-344">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-345">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-345">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-346">A sequence of values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-346">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-347">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-347">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-348">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-348">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-349">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-349">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-350">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-350">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-351">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-351">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-352">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-352">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-353">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-353">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-354">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-354">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-355">A sequence of values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-355">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-356">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-356">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-357">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-357">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-358">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-358">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-359">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-359">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-360">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-360">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-361">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-361">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-362">A sequence of values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-362">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-363">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-363">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-364">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-364">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-365">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-365">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-366">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-366">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-367">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-367">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-368">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-368">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-369">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-369">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-370">A sequence of values to calculate the average of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-370">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-371">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-371">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-372">Computes the average of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-372">Computes the average of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-373">The average of the sequence of values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-373">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-374">Visual Basic 查詢運算式語法，`Aggregate Into Average()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Average%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-374">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-375">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來計算平均值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-375">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-376">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-376">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-377">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-377">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Cast&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Cast(Of TResult) (source As IEnumerable) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Cast(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member Cast : System.Collections.IEnumerable -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Cast source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-378">要轉換的項目類型<c>來源</c>至。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-378">The type to cast the elements of <c>source</c> to.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-379">The <see cref="T:System.Collections.IEnumerable" /> that contains the elements to be cast to type <c>TResult</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-379">The <see cref="T:System.Collections.IEnumerable" /> that contains the elements to be cast to type <c>TResult</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-380">Casts the elements of an <see cref="T:System.Collections.IEnumerable" /> to the specified type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-380">Casts the elements of an <see cref="T:System.Collections.IEnumerable" /> to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-381">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains each element of the source sequence cast to the specified type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-381">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains each element of the source sequence cast to the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-382">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-382">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-383">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-383">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-384">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-384">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-385"><xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>方法可讓標準查詢運算子，以叫用非泛型集合上所提供的必要型別資訊。</span><span class="sxs-lookup"><span data-stu-id="3b63e-385">The <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information.</span></span> <span data-ttu-id="3b63e-386">例如，<xref:System.Collections.ArrayList>未實作<xref:System.Collections.Generic.IEnumerable%601>，但藉由呼叫<xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>上<xref:System.Collections.ArrayList>物件的標準查詢運算子可以再用來查詢的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-386">For example, <xref:System.Collections.ArrayList> does not implement <xref:System.Collections.Generic.IEnumerable%601>, but by calling <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> on the <xref:System.Collections.ArrayList> object, the standard query operators can then be used to query the sequence.</span></span>  
  
 <span data-ttu-id="3b63e-387">如果項目無法轉換成輸入`TResult`，這個方法會擲回<xref:System.InvalidCastException>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-387">If an element cannot be converted to type `TResult`, this method throws a <xref:System.InvalidCastException>.</span></span>

 <span data-ttu-id="3b63e-388">來源序列，此方法是<xref:System.Collections.IEnumerable>，表示項目都具有的編譯時期靜態類型`object`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-388">The source sequence for this method is <xref:System.Collections.IEnumerable>, which means the elements have the compile-time static type of `object`.</span></span> <span data-ttu-id="3b63e-389">這個方法所執行的唯一類型轉換為參考轉換和 unboxing 轉換。</span><span class="sxs-lookup"><span data-stu-id="3b63e-389">The only type conversions that are performed by this method are reference conversions and unboxing conversions.</span></span> <span data-ttu-id="3b63e-390">執行階段類型的集合中的項目必須符合目標類型，或如果實值類型的項目執行階段型別必須是目標類型的 boxing 轉換的結果。</span><span class="sxs-lookup"><span data-stu-id="3b63e-390">The runtime type of the elements in the collection must match the target type, or in the case of value types, the runtime type of elements must be the result of a boxing conversion of the target type.</span></span> <span data-ttu-id="3b63e-391">不允許其他轉換類型，例如不同的數值類型。</span><span class="sxs-lookup"><span data-stu-id="3b63e-391">Other conversion types, such as those between different numeric types, are not allowed.</span></span> 
 
 <span data-ttu-id="3b63e-392">若要取得可以轉換成輸入這些項目`TResult`，使用<xref:System.Linq.Enumerable.OfType%2A>方法，而非<xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-392">To obtain only those elements that can be converted to type `TResult`, use the <xref:System.Linq.Enumerable.OfType%2A> method instead of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span>  
  
 <span data-ttu-id="3b63e-393">在查詢運算式中，明確指定型別的的反覆運算變數則會轉譯為的引動過程<xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-393">In a query expression, an explicitly typed iteration variable translates to an invocation of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span> <span data-ttu-id="3b63e-394">這個範例會顯示明確指定型別的的範圍變數的語法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-394">This example shows the syntax for an explicitly typed range variable.</span></span>  
  
```csharp  
from int i in objects  
```  
  
```vb  
From i As Integer In objects  
```  

<span data-ttu-id="3b63e-395">使用`select`查詢來執行其他轉換類型，例如之隱含數值轉換的子句。</span><span class="sxs-lookup"><span data-stu-id="3b63e-395">Use the `select` clause of a query to perform other conversion types, like the implicit numeric conversions.</span></span> <span data-ttu-id="3b63e-396">下列範例會使用這兩者`Cast`方法和`select`boxed 整數的序列轉換成一連串的雙精度浮點數的陳述式。</span><span class="sxs-lookup"><span data-stu-id="3b63e-396">The following example uses both the `Cast` method and a `select` statement to convert a sequence of boxed integers to a sequence of doubles.</span></span>

```csharp
IEnumerable sequence = Enumerable.Range(0, 10);
var doubles = from int item in sequence
                select (double)item;
``` 

```vb
Dim sequence As IEnumerable = Enumerable.Range(0, 10)
Dim doubles = From item As Integer In sequence
                Select CType(item, Double)
```

## Examples  
 <span data-ttu-id="3b63e-397">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>上啟用標準查詢運算子的用法<xref:System.Collections.ArrayList>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-397">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> to enable the use of the standard query operators on an <xref:System.Collections.ArrayList>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#19)]
 [!code-vb[System.Linq.Enumerable#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-398">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-398">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="3b63e-399">An element in the sequence cannot be cast to type <paramref name="TResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-399">An element in the sequence cannot be cast to type <paramref name="TResult" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Concat&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Concat(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Concat(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Concat (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-400">輸入序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-400">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="3b63e-401">The first sequence to concatenate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-401">The first sequence to concatenate.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="3b63e-402">The sequence to concatenate to the first sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-402">The sequence to concatenate to the first sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-403">Concatenates two sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-403">Concatenates two sequences.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-404">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the concatenated elements of the two input sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-404">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the concatenated elements of the two input sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-405">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-405">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-406">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-406">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-407">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-407">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-408"><xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法不同於<xref:System.Linq.Enumerable.Union%2A>方法因為<xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法會傳回所有的原始項目中輸入序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-408">The <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns all the original elements in the input sequences.</span></span> <span data-ttu-id="3b63e-409"><xref:System.Linq.Enumerable.Union%2A>方法會傳回只有唯一的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-409">The <xref:System.Linq.Enumerable.Union%2A> method returns only unique elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-410">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>來串連兩個序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-410">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to concatenate two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#20)]
 [!code-vb[System.Linq.Enumerable#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#20)]  
  
 <span data-ttu-id="3b63e-411">串連兩個序列的替代方式是以建構一個集合，例如，為陣列的順序，然後套用<xref:System.Linq.Enumerable.SelectMany%2A>方法，將身分識別選取器函式傳遞給它。</span><span class="sxs-lookup"><span data-stu-id="3b63e-411">An alternative way of concatenating two sequences is to construct a collection, for example an array, of sequences and then apply the <xref:System.Linq.Enumerable.SelectMany%2A> method, passing it the identity selector function.</span></span> <span data-ttu-id="3b63e-412">下列範例會示範這種使用<xref:System.Linq.Enumerable.SelectMany%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-412">The following example demonstrates this use of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#112](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#112)]
 [!code-vb[System.Linq.Enumerable#112](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-413">
            <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-413">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-414">Determines whether a sequence contains a specified element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-414">Determines whether a sequence contains a specified element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IEnumerable(Of TSource), value As TSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource value);" />
      <MemberSignature Language="F#" Value="static member Contains : seq&lt;'Source&gt; * 'Source -&gt; bool" Usage="System.Linq.Enumerable.Contains (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-415">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-415">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-416">A sequence in which to locate a value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-416">A sequence in which to locate a value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="3b63e-417">The value to locate in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-417">The value to locate in the sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-418">Determines whether a sequence contains a specified element by using the default equality comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-418">Determines whether a sequence contains a specified element by using the default equality comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-419">
            <see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-419">
              <see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-420">如果類型`source`實作<xref:System.Collections.Generic.ICollection%601>、`Contains`中實作的方法會叫用來取得結果。</span><span class="sxs-lookup"><span data-stu-id="3b63e-420">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, the `Contains` method in that implementation is invoked to obtain the result.</span></span> <span data-ttu-id="3b63e-421">否則，這個方法會判斷是否`source`包含指定的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-421">Otherwise, this method determines whether `source` contains the specified element.</span></span>  
  
 <span data-ttu-id="3b63e-422">只要找到相符項目，列舉型別就會終止。</span><span class="sxs-lookup"><span data-stu-id="3b63e-422">Enumeration is terminated as soon as a matching element is found.</span></span>  
  
 <span data-ttu-id="3b63e-423">項目會為指定的值進行比較使用預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-423">Elements are compared to the specified value by using the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-424">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>來判斷陣列是否包含特定項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-424">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to determine whether an array contains a specific element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#21)]
 [!code-vb[System.Linq.Enumerable#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-425">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-425">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IEnumerable(Of TSource), value As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource value, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Contains : seq&lt;'Source&gt; * 'Source * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.Contains (source, value, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-426">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-426">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-427">A sequence in which to locate a value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-427">A sequence in which to locate a value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="3b63e-428">The value to locate in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-428">The value to locate in the sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-429">An equality comparer to compare values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-429">An equality comparer to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-430">Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-430">Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-431">
            <see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-431">
              <see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-432">只要找到相符項目，列舉型別就會終止。</span><span class="sxs-lookup"><span data-stu-id="3b63e-432">Enumeration is terminated as soon as a matching element is found.</span></span>  
  
 <span data-ttu-id="3b63e-433">如果`comparer`是`null`的預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來比較項目以指定的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-433">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements to the specified value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-434">下列範例示範如何實作可用於相等比較子<xref:System.Linq.Enumerable.Contains%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-434">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Contains%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="3b63e-435">這個比較子實作之後，您可以使用一系列`Product`中的物件<xref:System.Linq.Enumerable.Contains%2A>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="3b63e-435">After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Contains%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#6)]
 [!code-vb[CSLINQCustomComparer#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-436">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-436">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Count&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-437">Returns the number of elements in a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-437">Returns the number of elements in a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IEnumerable(Of TSource)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Count : seq&lt;'Source&gt; -&gt; int" Usage="System.Linq.Enumerable.Count source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-438">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-438">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-439">A sequence that contains elements to be counted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-439">A sequence that contains elements to be counted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-440">Returns the number of elements in a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-440">Returns the number of elements in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-441">The number of elements in the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-441">The number of elements in the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-442">如果類型`source`實作<xref:System.Collections.Generic.ICollection%601>，該實作用來取得的項目計數。</span><span class="sxs-lookup"><span data-stu-id="3b63e-442">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements.</span></span> <span data-ttu-id="3b63e-443">否則，這個方法會判斷計數。</span><span class="sxs-lookup"><span data-stu-id="3b63e-443">Otherwise, this method determines the count.</span></span>  
  
 <span data-ttu-id="3b63e-444">使用<xref:System.Linq.Enumerable.LongCount%2A>方法時您所預期，而且想要允許的結果是大於<xref:System.Int32.MaxValue>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-444">Use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="3b63e-445">Visual Basic 查詢運算式語法，`Aggregate Into Count()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-445">In Visual Basic query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-446">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>來計算陣列中的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-446">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#22)]
 [!code-vb[System.Linq.Enumerable#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-447">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-447">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-448">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-448">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Count : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; int" Usage="System.Linq.Enumerable.Count (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-449">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-449">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-450">A sequence that contains elements to be tested and counted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-450">A sequence that contains elements to be tested and counted.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-451">A function to test each element for a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-451">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-452">Returns a number that represents how many elements in the specified sequence satisfy a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-452">Returns a number that represents how many elements in the specified sequence satisfy a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-453">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-453">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-454">如果類型`source`實作<xref:System.Collections.Generic.ICollection%601>，該實作用來取得的項目計數。</span><span class="sxs-lookup"><span data-stu-id="3b63e-454">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements.</span></span> <span data-ttu-id="3b63e-455">否則，這個方法會判斷計數。</span><span class="sxs-lookup"><span data-stu-id="3b63e-455">Otherwise, this method determines the count.</span></span>  
  
 <span data-ttu-id="3b63e-456">您應該使用<xref:System.Linq.Enumerable.LongCount%2A>方法時您所預期，而且想要允許的結果是大於<xref:System.Int32.MaxValue>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-456">You should use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="3b63e-457">Visual Basic 查詢運算式語法，`Aggregate Into Count()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-457">In Visual Basic query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-458">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>計算陣列中滿足條件的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-458">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#23)]
 [!code-vb[System.Linq.Enumerable#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-459">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-459">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-460">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-460">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-461">Returns the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, or a default valued singleton collection if the sequence is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-461">Returns the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, or a default valued singleton collection if the sequence is empty.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.DefaultIfEmpty source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-462">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-462">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-463">The sequence to return a default value for if it is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-463">The sequence to return a default value for if it is empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-464">Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-464">Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-465">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that contains the default value for the <paramref name="TSource" /> type if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-465">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that contains the default value for the <paramref name="TSource" /> type if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-466">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-466">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-467">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-467">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-468">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-468">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-469">參考資料和可為 null 類型的預設值是`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-469">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="3b63e-470">這個方法可以用來產生左外部聯結時它就會結合<xref:System.Linq.Enumerable.GroupJoin%2A>) 方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-470">This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-471">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>提供預設值，如果來源序列是空的。</span><span class="sxs-lookup"><span data-stu-id="3b63e-471">The following code examples demonstrate how to use <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to provide a default value in case the source sequence is empty.</span></span>  
  
 <span data-ttu-id="3b63e-472">這個範例會使用非空序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-472">This example uses a non-empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#24)]
 [!code-vb[System.Linq.Enumerable#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#24)]  
  
 <span data-ttu-id="3b63e-473">這個範例會使用空的序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-473">This example uses an empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#25)]
 [!code-vb[System.Linq.Enumerable#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-474">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-474">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IEnumerable(Of TSource), defaultValue As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource defaultValue);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.DefaultIfEmpty (source, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="defaultValue" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-475">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-475">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-476">The sequence to return the specified value for if it is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-476">The sequence to return the specified value for if it is empty.</span>
          </span>
        </param>
        <param name="defaultValue">
          <span data-ttu-id="3b63e-477">The value to return if the sequence is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-477">The value to return if the sequence is empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-478">Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-478">Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-479">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-479">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-480">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-480">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-481">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-481">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-482">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-482">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-483">這個方法可以用來產生左外部聯結時它就會結合<xref:System.Linq.Enumerable.GroupJoin%2A>) 方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-483">This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-484">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>方法並指定預設值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-484">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method and specify a default value.</span></span> <span data-ttu-id="3b63e-485">第一個序列不是空的第二個序列是空的。</span><span class="sxs-lookup"><span data-stu-id="3b63e-485">The first sequence is not empty and the second sequence is empty.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#26)]
 [!code-vb[System.Linq.Enumerable#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Distinct&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-486">Returns distinct elements from a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-486">Returns distinct elements from a sequence.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-487">結果序列沒有排序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-487">The result sequence is unordered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Distinct source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-488">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-488">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-489">The sequence to remove duplicate elements from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-489">The sequence to remove duplicate elements from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-490">Returns distinct elements from a sequence by using the default equality comparer to compare values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-490">Returns distinct elements from a sequence by using the default equality comparer to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-491">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-491">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-492">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-492">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-493">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-493">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-494">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-494">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-495"><xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法傳回未排序的序列，其中不包含任何重複的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-495">The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values.</span></span> <span data-ttu-id="3b63e-496">它會使用預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>、 比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-496">It uses the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-497">Visual Basic 查詢運算式語法，`Distinct`子句的引動過程轉譯<xref:System.Linq.Enumerable.Distinct%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-497">In Visual Basic query expression syntax, a `Distinct` clause translates to an invocation of <xref:System.Linq.Enumerable.Distinct%2A>.</span></span>  
  
 <span data-ttu-id="3b63e-498">預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來比較值之型別的實作<xref:System.IEquatable%601>泛型介面。</span><span class="sxs-lookup"><span data-stu-id="3b63e-498">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.IEquatable%601> generic interface.</span></span> <span data-ttu-id="3b63e-499">若要比較的自訂資料類型，您需要實作這個介面，並提供您自己<xref:System.Object.GetHashCode%2A>和<xref:System.Object.Equals%2A>類型的方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-499">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
 <span data-ttu-id="3b63e-500">如需範例，會使用<xref:System.Collections.Generic.IEqualityComparer%601>若要定義自訂比較子，請參閱<xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-500">For an example that uses <xref:System.Collections.Generic.IEqualityComparer%601> to define a custom comparer, see <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-501">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>從整數的序列傳回不同的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-501">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return distinct elements from a sequence of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#27)]
 [!code-vb[System.Linq.Enumerable#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#27)]  
  
 <span data-ttu-id="3b63e-502">如果您想要從某些自訂資料類型的物件序列傳回不同的項目，您必須實作<xref:System.IEquatable%601>類別中的泛型介面。</span><span class="sxs-lookup"><span data-stu-id="3b63e-502">If you want to return distinct elements from sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in the class.</span></span> <span data-ttu-id="3b63e-503">下列程式碼範例示範如何實作這個介面中的自訂資料類型，並提供<xref:System.Object.GetHashCode%2A>和<xref:System.Object.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-503">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#1)]
 [!code-vb[CSLINQEncapsulatedComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#1)]  
  
 <span data-ttu-id="3b63e-504">實作這個介面之後，您可以使用一系列`Product`中的物件<xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="3b63e-504">After you implement this interface, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#5)]
 [!code-vb[CSLINQEncapsulatedComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-505">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-505">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Distinct (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-506">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-506">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-507">The sequence to remove duplicate elements from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-507">The sequence to remove duplicate elements from.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-508">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-508">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-509">Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-509">Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-510">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-510">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-511">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-511">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-512">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-512">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-513">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-513">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-514"><xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>方法傳回未排序的序列，其中不包含任何重複的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-514">The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values.</span></span> <span data-ttu-id="3b63e-515">如果 c`omparer`是`null`的預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來比較值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-515">If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-516">下列範例示範如何實作可用於相等比較子<xref:System.Linq.Enumerable.Distinct%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-516">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="3b63e-517">這個比較子實作之後，您可以使用一系列`Product`中的物件<xref:System.Linq.Enumerable.Distinct%2A>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="3b63e-517">After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#5)]
 [!code-vb[CSLINQCustomComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-518">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-518">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAt&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAt&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAt&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAt(Of TSource) (source As IEnumerable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAt(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAt : seq&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Enumerable.ElementAt (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-519">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-519">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-520">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-520">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="3b63e-521">The zero-based index of the element to retrieve.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-521">The zero-based index of the element to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-522">Returns the element at a specified index in a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-522">Returns the element at a specified index in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-523">The element at the specified position in the source sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-523">The element at the specified position in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-524">如果類型`source`實作<xref:System.Collections.Generic.IList%601>，該實作用來取得指定索引處的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-524">If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index.</span></span> <span data-ttu-id="3b63e-525">否則，這個方法會取得指定的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-525">Otherwise, this method obtains the specified element.</span></span>  
  
 <span data-ttu-id="3b63e-526">這個方法擲回例外狀況，如果`index`超出範圍。</span><span class="sxs-lookup"><span data-stu-id="3b63e-526">This method throws an exception if `index` is out of range.</span></span> <span data-ttu-id="3b63e-527">若要改為傳回預設值，指定的索引超出範圍時，請使用<xref:System.Linq.Enumerable.ElementAtOrDefault%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-527">To instead return a default value when the specified index is out of range, use the <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-528">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.ElementAt%2A>傳回特定位置的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-528">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAt%2A> to return an element at a specific position.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#28)]
 [!code-vb[System.Linq.Enumerable#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-529">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-529">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3b63e-530">
            <paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-530">
              <paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAtOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAtOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAtOrDefault(Of TSource) (source As IEnumerable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAtOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAtOrDefault : seq&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Enumerable.ElementAtOrDefault (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-531">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-531">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-532">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-532">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="3b63e-533">The zero-based index of the element to retrieve.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-533">The zero-based index of the element to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-534">Returns the element at a specified index in a sequence or a default value if the index is out of range.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-534">Returns the element at a specified index in a sequence or a default value if the index is out of range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-535">
            <see langword="default" />(<paramref name="TSource" />) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-535">
              <see langword="default" />(<paramref name="TSource" />) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-536">如果類型`source`實作<xref:System.Collections.Generic.IList%601>，該實作用來取得指定索引處的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-536">If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index.</span></span> <span data-ttu-id="3b63e-537">否則，這個方法會取得指定的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-537">Otherwise, this method obtains the specified element.</span></span>  
  
 <span data-ttu-id="3b63e-538">參考資料和可為 null 類型的預設值是`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-538">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-539">下列程式碼範例將示範如何使用 <xref:System.Linq.Enumerable.ElementAtOrDefault%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-539">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAtOrDefault%2A>.</span></span> <span data-ttu-id="3b63e-540">這個範例會使用陣列界限之外的索引。</span><span class="sxs-lookup"><span data-stu-id="3b63e-540">This example uses an index that is outside the bounds of the array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#29)]
 [!code-vb[System.Linq.Enumerable#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-541">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-541">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Empty&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Empty&lt;TResult&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Empty&lt;TResult&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Empty``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Empty(Of TResult) () As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Empty();" />
      <MemberSignature Language="F#" Value="static member Empty : unit -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-542">若要指派給傳回的泛型型別參數的型別<see cref="T:System.Collections.Generic.IEnumerable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-542">The type to assign to the type parameter of the returned generic <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="3b63e-543">Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has the specified type argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-543">Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has the specified type argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-544">An empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose type argument is <paramref name="TResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-544">An empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose type argument is <paramref name="TResult" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-545"><xref:System.Linq.Enumerable.Empty%60%601>方法會快取類型的空的序列`TResult`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-545">The <xref:System.Linq.Enumerable.Empty%60%601> method caches an empty sequence of type `TResult`.</span></span> <span data-ttu-id="3b63e-546">它會傳回物件列舉時，它會產生任何項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-546">When the object it returns is enumerated, it yields no elements.</span></span>  
  
 <span data-ttu-id="3b63e-547">在某些情況下，此方法相當實用的空白時序傳遞至使用者定義的方法會採用<xref:System.Collections.Generic.IEnumerable%601>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-547">In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="3b63e-548">它也可用來產生方法的相關項目，例如<xref:System.Linq.Enumerable.Union%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-548">It can also be used to generate a neutral element for methods such as <xref:System.Linq.Enumerable.Union%2A>.</span></span> <span data-ttu-id="3b63e-549">請參閱 < 範例 > 一節的範例<xref:System.Linq.Enumerable.Empty%60%601>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-549">See the Example section for an example of this use of <xref:System.Linq.Enumerable.Empty%60%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-550">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Empty%60%601>來產生空白<xref:System.Collections.Generic.IEnumerable%601>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-550">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Empty%60%601> to generate an empty <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#30)]
 [!code-vb[System.Linq.Enumerable#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#30)]  
  
 <span data-ttu-id="3b63e-551">下列程式碼範例示範可能的應用程式的<xref:System.Linq.Enumerable.Empty%60%601>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-551">The following code example demonstrates a possible application of the <xref:System.Linq.Enumerable.Empty%60%601> method.</span></span> <span data-ttu-id="3b63e-552"><xref:System.Linq.Enumerable.Aggregate%2A>方法套用到集合的字串陣列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-552">The <xref:System.Linq.Enumerable.Aggregate%2A> method is applied to a collection of string arrays.</span></span> <span data-ttu-id="3b63e-553">集合中每個陣列的項目會加入至產生<xref:System.Collections.Generic.IEnumerable%601>前提是該陣列包含四個或多個項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-553">The elements of each array in the collection are added to the resulting <xref:System.Collections.Generic.IEnumerable%601> only if that array contains four or more elements.</span></span> <span data-ttu-id="3b63e-554"><xref:System.Linq.Enumerable.Empty%2A> 用來產生種子值<xref:System.Linq.Enumerable.Aggregate%2A>因為如果沒有陣列集合中的有四個或多個元素，即會傳回空的序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-554"><xref:System.Linq.Enumerable.Empty%2A> is used to generate the seed value for <xref:System.Linq.Enumerable.Aggregate%2A> because if no array in the collection has four or more elements, only the empty sequence is returned.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#31)]
 [!code-vb[System.Linq.Enumerable#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Except&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-555">Produces the set difference of two sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-555">Produces the set difference of two sequences.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Except : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Except (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-556">輸入序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-556">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="3b63e-557">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <c>second</c> will be returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-557">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <c>second</c> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="3b63e-558">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-558">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-559">Produces the set difference of two sequences by using the default equality comparer to compare values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-559">Produces the set difference of two sequences by using the default equality comparer to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-560">A sequence that contains the set difference of the elements of two sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-560">A sequence that contains the set difference of the elements of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-561">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-561">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-562">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-562">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-563">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-563">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-564">兩個集合的集合差異被定義為不會出現在第二個集合中第一個集合的成員。</span><span class="sxs-lookup"><span data-stu-id="3b63e-564">The set difference of two sets is defined as the members of the first set that do not appear in the second set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-565">這個方法會傳回這些項目中的`first`，不會出現在`second`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-565">This method returns those elements in `first` that do not appear in `second`.</span></span> <span data-ttu-id="3b63e-566">它也不會傳回這些項目中的`second`，不會出現在`first`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-566">It does not also return those elements in `second` that do not appear in `first`.</span></span>  
  
 <span data-ttu-id="3b63e-567">預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來比較值之型別的實作<xref:System.Collections.Generic.IEqualityComparer%601>泛型介面。</span><span class="sxs-lookup"><span data-stu-id="3b63e-567">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="3b63e-568">若要比較的自訂資料類型，您需要實作這個介面，並提供您自己<xref:System.Object.GetHashCode%2A>和<xref:System.Object.Equals%2A>類型的方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-568">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-569">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法來比較兩個序列的數字，並傳回項目，只會出現在第一個序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-569">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method to compare two sequences of numbers and return elements that appear only in the first sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#34)]
 [!code-vb[System.Linq.Enumerable#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#34)]  
  
 <span data-ttu-id="3b63e-570">如果您想要比較之物件的某些自訂資料類型的序列，您必須實作<xref:System.Collections.Generic.IEqualityComparer%601>helperclass 中的泛型介面。</span><span class="sxs-lookup"><span data-stu-id="3b63e-570">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helperclass.</span></span> <span data-ttu-id="3b63e-571">下列程式碼範例示範如何實作這個介面中的自訂資料類型，並提供<xref:System.Object.GetHashCode%2A>和<xref:System.Object.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-571">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="3b63e-572">實作這個介面之後，您可以使用的序列`ProductA`中的物件<xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="3b63e-572">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#7)]
 [!code-vb[CSLINQEncapsulatedComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-573">
            <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-573">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Except : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Except (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-574">輸入序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-574">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="3b63e-575">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <c>second</c> will be returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-575">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <c>second</c> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="3b63e-576">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-576">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-577">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-577">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-578">Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-578">Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-579">A sequence that contains the set difference of the elements of two sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-579">A sequence that contains the set difference of the elements of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-580">如果 c`omparer`是`null`的預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來比較值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-580">If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-581">下列範例示範如何實作可用於相等比較子<xref:System.Linq.Enumerable.Except%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-581">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Except%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="3b63e-582">這個比較子實作之後，您可以使用的序列`Product`中的物件<xref:System.Linq.Enumerable.Except%2A>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="3b63e-582">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Except%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#7)]
 [!code-vb[CSLINQCustomComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-583">
            <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-583">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="First&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-584">Returns the first element of a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-584">Returns the first element of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member First : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.First source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-585">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-585">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-586">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-586">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-587">Returns the first element of a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-587">Returns the first element of a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-588">The first element in the specified sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-588">The first element in the specified sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-589"><xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法擲回例外狀況，如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-589">The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements.</span></span> <span data-ttu-id="3b63e-590">若要改為傳回預設值，當來源序列是空白時，使用<xref:System.Linq.Enumerable.FirstOrDefault%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-590">To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-591">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>傳回陣列的第一個項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-591">The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the first element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#35)]
 [!code-vb[System.Linq.Enumerable#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-592">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-592">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-593">The source sequence is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-593">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member First : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.First (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-594">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-594">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-595">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-595">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-596">A function to test each element for a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-596">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-597">Returns the first element in a sequence that satisfies a specified condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-597">Returns the first element in a sequence that satisfies a specified condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-598">The first element in the sequence that passes the test in the specified predicate function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-598">The first element in the sequence that passes the test in the specified predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-599"><xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>方法擲回例外狀況，如果沒有相符項目中找到`source`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-599">The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`.</span></span> <span data-ttu-id="3b63e-600">若要改為傳回預設值，找到相符的項目時，使用<xref:System.Linq.Enumerable.FirstOrDefault%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-600">To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-601">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>傳回陣列，符合條件的第一個元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-601">The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the first element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#36)]
 [!code-vb[System.Linq.Enumerable#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-602">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-602">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-603">No element satisfies the condition in <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-603">No element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="3b63e-604">-or-  The source sequence is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-604">-or-  The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FirstOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-605">Returns the first element of a sequence, or a default value if no element is found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-605">Returns the first element of a sequence, or a default value if no element is found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.FirstOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-606">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-606">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-607">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-607">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-608">Returns the first element of a sequence, or a default value if the sequence contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-608">Returns the first element of a sequence, or a default value if the sequence contains no elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-609">
            <see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-609">
              <see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-610">參考資料和可為 null 類型的預設值是`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-610">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="3b63e-611"><xref:System.Linq.Enumerable.FirstOrDefault%2A>方法不會提供方法來指定預設值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-611">The <xref:System.Linq.Enumerable.FirstOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="3b63e-612">如果您想要指定預設值以外`default(TSource)`，使用<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>範例 > 一節中所述的方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-612">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-613">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>上的空陣列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-613">The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#37)]
 [!code-vb[System.Linq.Enumerable#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#37)]  
  
 <span data-ttu-id="3b63e-614">有時候值`default(TSource)`不是您想要使用如果集合不包含任何元素的預設值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-614">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="3b63e-615">不檢查不必要的預設值的結果，並再將它如有必要變更，您可以改用<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>方法，以指定您想要使用這個集合是空的預設值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-615">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="3b63e-616">然後，呼叫<xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>取得第一個項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-616">Then, call <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the first element.</span></span> <span data-ttu-id="3b63e-617">下列程式碼範例會使用這兩種技術以取得預設值是 1，如果數字月份的集合是空的。</span><span class="sxs-lookup"><span data-stu-id="3b63e-617">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty.</span></span> <span data-ttu-id="3b63e-618">因為整數的預設值為 0，不會對應到任何月份，預設值必須被指定為 1。</span><span class="sxs-lookup"><span data-stu-id="3b63e-618">Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="3b63e-619">查詢完成執行後不想要的預設值會檢查第一個結果變數。</span><span class="sxs-lookup"><span data-stu-id="3b63e-619">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="3b63e-620">第二個結果變數透過使用<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>來指定預設值是 1。</span><span class="sxs-lookup"><span data-stu-id="3b63e-620">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#126](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#126)]
 [!code-vb[System.Linq.Enumerable#126](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#126)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-621">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-621">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.FirstOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-622">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-622">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-623">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-623">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-624">A function to test each element for a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-624">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-625">Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-625">Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-626">
            <see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-626">
              <see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-627">參考資料和可為 null 類型的預設值是`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-627">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-628">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>藉由傳遞述詞。</span><span class="sxs-lookup"><span data-stu-id="3b63e-628">The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="3b63e-629">在第二個呼叫方法時，沒有任何項目中符合條件的陣列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-629">In the second call to the method, there is no element in the array that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#38)]
 [!code-vb[System.Linq.Enumerable#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-630">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-630">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-631">Groups the elements of a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-631">Groups the elements of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-632">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-632">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-633">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-633">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-634">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-634">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-635">A function to extract the key for each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-635">A function to extract the key for each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-636">Groups the elements of a sequence according to a specified key selector function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-636">Groups the elements of a sequence according to a specified key selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-637">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-637">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-638">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-638">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-639">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-639">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-640">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-640">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-641">如需範例的`GroupBy`，請參閱下列主題。</span><span class="sxs-lookup"><span data-stu-id="3b63e-641">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="3b63e-642"><xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>方法傳回的集合<xref:System.Linq.IGrouping%602>物件、 一個用於每個發現的相異索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-642">The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="3b63e-643"><xref:System.Linq.IGrouping%602>是<xref:System.Collections.Generic.IEnumerable%601>另有其項目相關聯的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-643">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="3b63e-644"><xref:System.Linq.IGrouping%602>根據順序中的項目順序因為都產生物件`source`，產生第一個索引鍵，每個<xref:System.Linq.IGrouping%602>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-644">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="3b63e-645">群組中的項目中出現的順序來產生`source`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-645">Elements in a grouping are yielded in the order they appear in `source`.</span></span>  
  
 <span data-ttu-id="3b63e-646">預設相等比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-646">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="3b63e-647">查詢運算式語法， `group by` (Visual C#) 或`Group By Into`(Visual Basic) 子句的引動過程轉譯<xref:System.Linq.Enumerable.GroupBy%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-647">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="3b63e-648">如需詳細資訊和使用範例，請參閱[group 子句](~/docs/csharp/language-reference/keywords/group-clause.md)和[群組 By 子句](~/docs/visual-basic/language-reference/queries/group-by-clause.md)。</span><span class="sxs-lookup"><span data-stu-id="3b63e-648">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-649">
            <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-649">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-650">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-650">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-651">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-651">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-652">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-652">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-653">A function to extract the key for each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-653">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-654">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-654">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-655">Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-655">Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-656">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects and a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-656">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-657">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-657">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-658">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-658">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-659">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-659">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-660">如需範例的`GroupBy`，請參閱下列主題。</span><span class="sxs-lookup"><span data-stu-id="3b63e-660">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="3b63e-661"><xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>方法傳回的集合<xref:System.Linq.IGrouping%602>物件、 一個用於每個發現的相異索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-661">The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="3b63e-662"><xref:System.Linq.IGrouping%602>是<xref:System.Collections.Generic.IEnumerable%601>另有其項目相關聯的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-662">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="3b63e-663"><xref:System.Linq.IGrouping%602>根據順序中的項目順序因為都產生物件`source`，產生第一個索引鍵，每個<xref:System.Linq.IGrouping%602>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-663">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="3b63e-664">群組中的項目中出現的順序來產生`source`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-664">Elements in a grouping are yielded in the order they appear in `source`.</span></span>  
  
 <span data-ttu-id="3b63e-665">如果`comparer`是`null`的預設相等比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-665">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="3b63e-666">如果兩個索引鍵會被視為相等根據`comparer`，第一個索引鍵會被選為該群組的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-666">If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.</span></span>  
  
 <span data-ttu-id="3b63e-667">查詢運算式語法， `group by` (Visual C#) 或`Group By Into`(Visual Basic) 子句的引動過程轉譯<xref:System.Linq.Enumerable.GroupBy%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-667">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="3b63e-668">如需詳細資訊和使用範例，請參閱[group 子句](~/docs/csharp/language-reference/keywords/group-clause.md)和[群組 By 子句](~/docs/visual-basic/language-reference/queries/group-by-clause.md)。</span><span class="sxs-lookup"><span data-stu-id="3b63e-668">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-669">
            <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-669">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As IEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-670">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-670">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-671">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-671">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="3b63e-672">
            <see cref="T:System.Linq.IGrouping`2" /> 中的項目類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-672">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-673">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-673">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-674">A function to extract the key for each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-674">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="3b63e-675">A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-675">A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-676">Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-676">Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-677">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-677">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-678">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-678">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-679">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-679">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-680">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-680">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-681"><xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>方法傳回的集合<xref:System.Linq.IGrouping%602>物件、 一個用於每個發現的相異索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-681">The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="3b63e-682"><xref:System.Linq.IGrouping%602>是<xref:System.Collections.Generic.IEnumerable%601>另有其項目相關聯的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-682">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="3b63e-683"><xref:System.Linq.IGrouping%602>根據順序中的項目順序因為都產生物件`source`，產生第一個索引鍵，每個<xref:System.Linq.IGrouping%602>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-683">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="3b63e-684">因為順序產生它們的項目會出現在群組中的項目都產生`source`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-684">Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.</span></span>  
  
 <span data-ttu-id="3b63e-685">預設相等比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-685">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-686">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>來群組序列的元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-686">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to group the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#39)]
 [!code-vb[System.Linq.Enumerable#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#39)]  
  
 <span data-ttu-id="3b63e-687">查詢運算式語法， `group by` (Visual C#) 或`Group By Into`(Visual Basic) 子句的引動過程轉譯<xref:System.Linq.Enumerable.GroupBy%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-687">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="3b63e-688">下列範例中的查詢運算式中的轉譯就相當於上述範例中的查詢。</span><span class="sxs-lookup"><span data-stu-id="3b63e-688">The translation of the query expression in the following example is equivalent to the query in the example above.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#122](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#122)]
 [!code-vb[System.Linq.Enumerable#122](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#122)]  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-689">Visual C# 或 Visual Basic 的查詢運算式中項目和索引鍵選取項目運算式會產生相反順序呼叫中引數的位置從<xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-689">In a Visual C# or Visual Basic query expression, the element and key selection expressions occur in the reverse order from their argument positions in a call to the <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-690">
            <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-690">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-691">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-691">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-692">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-692">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="3b63e-693">
            <see cref="T:System.Linq.IGrouping`2" /> 中的項目類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-693">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-694">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-694">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-695">A function to extract the key for each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-695">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="3b63e-696">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-696">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-697">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-697">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-698">Groups the elements of a sequence according to a key selector function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-698">Groups the elements of a sequence according to a key selector function.</span>
          </span>
          <span data-ttu-id="3b63e-699">The keys are compared by using a comparer and each group's elements are projected by using a specified function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-699">The keys are compared by using a comparer and each group's elements are projected by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-700">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-700">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-701">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-701">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-702">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-702">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-703">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-703">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-704">如需範例的`GroupBy`，請參閱下列主題。</span><span class="sxs-lookup"><span data-stu-id="3b63e-704">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="3b63e-705"><xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>方法傳回的集合<xref:System.Linq.IGrouping%602>物件、 一個用於每個發現的相異索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-705">The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="3b63e-706"><xref:System.Linq.IGrouping%602>是<xref:System.Collections.Generic.IEnumerable%601>另有其項目相關聯的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-706">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="3b63e-707"><xref:System.Linq.IGrouping%602>根據順序中的項目順序因為都產生物件`source`，產生第一個索引鍵，每個<xref:System.Linq.IGrouping%602>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-707">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="3b63e-708">因為順序產生它們的項目會出現在群組中的項目都產生`source`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-708">Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.</span></span>  
  
 <span data-ttu-id="3b63e-709">如果`comparer`是`null`的預設相等比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-709">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="3b63e-710">如果兩個索引鍵會被視為相等根據`comparer`，第一個索引鍵會被選為該群組的索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-710">If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.</span></span>  
  
 <span data-ttu-id="3b63e-711">查詢運算式語法， `group by` (Visual C#) 或`Group By Into`(Visual Basic) 子句的引動過程轉譯<xref:System.Linq.Enumerable.GroupBy%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-711">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="3b63e-712">如需詳細資訊和使用範例，請參閱[group 子句](~/docs/csharp/language-reference/keywords/group-clause.md)和[群組 By 子句](~/docs/visual-basic/language-reference/queries/group-by-clause.md)。</span><span class="sxs-lookup"><span data-stu-id="3b63e-712">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-713">
            <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-713">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-714">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-714">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-715">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-715">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-716">所傳回的結果值的型別<c>resultSelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-716">The type of the result value returned by <c>resultSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-717">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-717">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-718">A function to extract the key for each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-718">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="3b63e-719">A function to create a result value from each group.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-719">A function to create a result value from each group.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-720">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-720">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-721">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-721">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-722">查詢運算式語法， `group by` (Visual C#) 或`Group By Into`(Visual Basic) 子句的引動過程轉譯<xref:System.Linq.Enumerable.GroupBy%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-722">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-723">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>來群組序列的項目和專案類型的結果的序列`TResult`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-723">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29> to group the elements of a sequence and project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#15)]
 [!code-vb[System.Linq.Enumerable#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-724">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-724">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-725">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-725">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-726">所傳回的結果值的型別<c>resultSelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-726">The type of the result value returned by <c>resultSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-727">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-727">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-728">A function to extract the key for each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-728">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="3b63e-729">A function to create a result value from each group.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-729">A function to create a result value from each group.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-730">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-730">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-731">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-731">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
          <span data-ttu-id="3b63e-732">The keys are compared by using a specified comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-732">The keys are compared by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-733">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-733">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-734">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-734">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-735">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-735">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="3b63e-736">在每個項目的類型<see cref="T:System.Linq.IGrouping`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-736">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-737">所傳回的結果值的型別<c>resultSelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-737">The type of the result value returned by <c>resultSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-738">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-738">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-739">A function to extract the key for each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-739">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="3b63e-740">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-740">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="3b63e-741">A function to create a result value from each group.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-741">A function to create a result value from each group.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-742">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-742">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
          <span data-ttu-id="3b63e-743">The elements of each group are projected by using a specified function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-743">The elements of each group are projected by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-744">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-744">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-745">查詢運算式語法， `group by` (Visual C#) 或`Group By Into`(Visual Basic) 子句的引動過程轉譯<xref:System.Linq.Enumerable.GroupBy%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-745">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-746">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>來群組序列的預測的項目，並接著按一下 專案類型的結果的序列`TResult`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-746">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29> to group the projected elements of a sequence and then project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#125](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#125)]
 [!code-vb[System.Linq.Enumerable#125](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-747">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-747">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-748">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-748">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="3b63e-749">在每個項目的類型<see cref="T:System.Linq.IGrouping`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-749">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-750">所傳回的結果值的型別<c>resultSelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-750">The type of the result value returned by <c>resultSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-751">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-751">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-752">A function to extract the key for each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-752">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="3b63e-753">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-753">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="3b63e-754">A function to create a result value from each group.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-754">A function to create a result value from each group.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-755">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-755">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-756">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-756">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
          <span data-ttu-id="3b63e-757">Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-757">Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-758">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-758">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-759">Correlates the elements of two sequences based on key equality, and groups the results.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-759">Correlates the elements of two sequences based on key equality, and groups the results.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupJoin(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="3b63e-760">第一個序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-760">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="3b63e-761">第二個序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-761">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-762">索引鍵選取器函式所傳回之索引鍵的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-762">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-763">結果項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-763">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="3b63e-764">The first sequence to join.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-764">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="3b63e-765">The sequence to join to the first sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-765">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="3b63e-766">A function to extract the join key from each element of the first sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-766">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="3b63e-767">A function to extract the join key from each element of the second sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-767">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="3b63e-768">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-768">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-769">Correlates the elements of two sequences based on equality of keys and groups the results.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-769">Correlates the elements of two sequences based on equality of keys and groups the results.</span>
          </span>
          <span data-ttu-id="3b63e-770">The default equality comparer is used to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-770">The default equality comparer is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-771">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-771">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-772">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-772">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-773">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-773">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-774">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-774">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-775">預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來雜湊和比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-775">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="3b63e-776"><xref:System.Linq.Enumerable.GroupJoin%2A> 產生階層式結果，這表示，項目從`outer`會與集合的相符項目配對`inner`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-776"><xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`.</span></span> <span data-ttu-id="3b63e-777">`GroupJoin` 可讓您提供完整的相符項目，每個項目設定的基礎結果`outer`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-777">`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-778">如果不有任何相互關聯的項目中`inner`給定項目的`outer`，將會是空的相符項目序列，但仍然會出現在結果中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-778">If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.</span></span>  
  
 <span data-ttu-id="3b63e-779">`resultSelector`函式會呼叫一次，每個`outer`連同所有集合的項目`inner`符合項目`outer`項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-779">The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element.</span></span> <span data-ttu-id="3b63e-780">這不同於<xref:System.Linq.Enumerable.Join%2A>方法，在其中結果選取器函式會叫用對包含一個項目從`outer`和一個項目從`inner`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-780">This differs from the <xref:System.Linq.Enumerable.Join%2A> method, in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.</span></span>  
  
 <span data-ttu-id="3b63e-781">`GroupJoin` 保留項目的順序`outer`，和每個項目`outer`，從相符項目的順序`inner`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-781">`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.</span></span>  
  
 <span data-ttu-id="3b63e-782"><xref:System.Linq.Enumerable.GroupJoin%2A> 在傳統的關聯式資料庫詞彙中有沒有直接的對等用法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-782"><xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms.</span></span> <span data-ttu-id="3b63e-783">不過，這個方法未實作內部聯結和左方外部聯結的超集。</span><span class="sxs-lookup"><span data-stu-id="3b63e-783">However, this method does implement a superset of inner joins and left outer joins.</span></span> <span data-ttu-id="3b63e-784">這兩種作業可以寫入以群組的聯結。</span><span class="sxs-lookup"><span data-stu-id="3b63e-784">Both of these operations can be written in terms of a grouped join.</span></span> <span data-ttu-id="3b63e-785">請參閱[聯結作業](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)。</span><span class="sxs-lookup"><span data-stu-id="3b63e-785">See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 <span data-ttu-id="3b63e-786">查詢運算式語法， `join … into` (Visual C#) 或`Group Join`(Visual Basic) 子句的引動過程轉譯<xref:System.Linq.Enumerable.GroupJoin%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-786">In query expression syntax, a `join … into` (Visual C#) or `Group Join` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupJoin%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-787">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29>執行群組的聯結兩個序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-787">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29> to perform a grouped join on two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#40)]
 [!code-vb[System.Linq.Enumerable#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-788">
            <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-788">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupJoin(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="3b63e-789">第一個序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-789">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="3b63e-790">第二個序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-790">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-791">索引鍵選取器函式所傳回之索引鍵的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-791">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-792">結果項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-792">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="3b63e-793">The first sequence to join.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-793">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="3b63e-794">The sequence to join to the first sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-794">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="3b63e-795">A function to extract the join key from each element of the first sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-795">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="3b63e-796">A function to extract the join key from each element of the second sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-796">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="3b63e-797">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-797">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-798">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-798">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-799">Correlates the elements of two sequences based on key equality and groups the results.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-799">Correlates the elements of two sequences based on key equality and groups the results.</span>
          </span>
          <span data-ttu-id="3b63e-800">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-800">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-801">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-801">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-802">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-802">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-803">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-803">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-804">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-804">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-805">如果`comparer`是`null`的預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來雜湊和比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-805">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="3b63e-806"><xref:System.Linq.Enumerable.GroupJoin%2A> 產生階層式結果，這表示，項目從`outer`會與集合的相符項目配對`inner`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-806"><xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`.</span></span> <span data-ttu-id="3b63e-807">`GroupJoin` 可讓您提供完整的相符項目，每個項目設定的基礎結果`outer`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-807">`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-808">如果不有任何相互關聯的項目中`inner`給定項目的`outer`，將會是空的相符項目序列，但仍然會出現在結果中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-808">If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.</span></span>  
  
 <span data-ttu-id="3b63e-809">`resultSelector`函式會呼叫一次，每個`outer`連同所有集合的項目`inner`符合項目`outer`項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-809">The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element.</span></span> <span data-ttu-id="3b63e-810">這不同於<xref:System.Linq.Enumerable.Join%2A>方法中的結果選取器函式會叫用對包含一個項目從`outer`和一個項目從`inner`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-810">This differs from the <xref:System.Linq.Enumerable.Join%2A> method in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.</span></span>  
  
 <span data-ttu-id="3b63e-811">`GroupJoin` 保留項目的順序`outer`，和每個項目`outer`，從相符項目的順序`inner`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-811">`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.</span></span>  
  
 <span data-ttu-id="3b63e-812"><xref:System.Linq.Enumerable.GroupJoin%2A> 在傳統的關聯式資料庫詞彙中有沒有直接的對等用法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-812"><xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms.</span></span> <span data-ttu-id="3b63e-813">不過，這個方法未實作內部聯結和左方外部聯結的超集。</span><span class="sxs-lookup"><span data-stu-id="3b63e-813">However, this method does implement a superset of inner joins and left outer joins.</span></span> <span data-ttu-id="3b63e-814">這兩種作業可以寫入以群組的聯結。</span><span class="sxs-lookup"><span data-stu-id="3b63e-814">Both of these operations can be written in terms of a grouped join.</span></span> <span data-ttu-id="3b63e-815">請參閱[聯結作業](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)。</span><span class="sxs-lookup"><span data-stu-id="3b63e-815">See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-816">
            <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-816">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Intersect&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-817">Produces the set intersection of two sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-817">Produces the set intersection of two sequences.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Intersect : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Intersect (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-818">輸入序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-818">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="3b63e-819">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <c>second</c> will be returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-819">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <c>second</c> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="3b63e-820">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-820">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-821">Produces the set intersection of two sequences by using the default equality comparer to compare values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-821">Produces the set intersection of two sequences by using the default equality comparer to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-822">A sequence that contains the elements that form the set intersection of two sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-822">A sequence that contains the elements that form the set intersection of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-823">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-823">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-824">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-824">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-825">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-825">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-826">A 和 B 的兩個集合的交集會定義為包含所有項目同時出現在 B 中，但沒有其他項目集合。</span><span class="sxs-lookup"><span data-stu-id="3b63e-826">The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</span></span>  
  
 <span data-ttu-id="3b63e-827">當這個方法所傳回的物件會列舉<xref:System.Linq.Enumerable.Intersect%2A>會產生不同的項目發生在兩個序列中的出現順序`first`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-827">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Intersect%2A> yields distinct elements occurring in both sequences in the order in which they appear in `first`.</span></span>  
  
 <span data-ttu-id="3b63e-828">預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來比較值之型別的實作<xref:System.Collections.Generic.IEqualityComparer%601>泛型介面。</span><span class="sxs-lookup"><span data-stu-id="3b63e-828">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="3b63e-829">若要比較的自訂資料類型，您需要實作這個介面，並提供您自己<xref:System.Object.GetHashCode%2A>和<xref:System.Object.Equals%2A>類型的方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-829">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-830">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>傳回整數的兩個序列的每個出現的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-830">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the elements that appear in each of two sequences of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#41)]
 [!code-vb[System.Linq.Enumerable#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#41)]  
  
 <span data-ttu-id="3b63e-831">如果您想要比較之物件的自訂資料類型的序列，您必須實作<xref:System.Collections.Generic.IEqualityComparer%601>協助程式類別中的泛型介面。</span><span class="sxs-lookup"><span data-stu-id="3b63e-831">If you want to compare sequences of objects of a custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helper class.</span></span> <span data-ttu-id="3b63e-832">下列程式碼範例示範如何實作這個介面中的自訂資料類型，並提供<xref:System.Object.GetHashCode%2A>和<xref:System.Object.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-832">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="3b63e-833">實作這個介面之後，您可以使用的序列`ProductA`中的物件<xref:System.Linq.Enumerable.Intersect%2A>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="3b63e-833">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Intersect%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]  
[!code-csharp[CSLINQEncapsulatedComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#3)]
[!code-vb[CSLINQEncapsulatedComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-834">
            <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-834">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Intersect : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Intersect (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-835">輸入序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-835">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="3b63e-836">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <c>second</c> will be returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-836">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <c>second</c> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="3b63e-837">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-837">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-838">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-838">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-839">Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-839">Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-840">A sequence that contains the elements that form the set intersection of two sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-840">A sequence that contains the elements that form the set intersection of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-841">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-841">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-842">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-842">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-843">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-843">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-844">A 和 B 的兩個集合的交集會定義為包含所有項目同時出現在 B 中，但沒有其他項目集合。</span><span class="sxs-lookup"><span data-stu-id="3b63e-844">The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</span></span>  
  
 <span data-ttu-id="3b63e-845">當這個方法所傳回的物件會列舉<xref:System.Linq.Enumerable.Intersect%2A>會產生不同的項目發生在兩個序列中的出現順序`first`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-845">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Intersect%2A> yields distinct elements occurring in both sequences in the order in which they appear in `first`.</span></span>  
  
 <span data-ttu-id="3b63e-846">如果`comparer`是`null`的預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來比較值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-846">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-847">下列範例示範如何實作可用於相等比較子<xref:System.Linq.Enumerable.Intersect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-847">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Intersect%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="3b63e-848">這個比較子實作之後，您可以使用的序列`Product`中的物件<xref:System.Linq.Enumerable.Intersect%2A>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="3b63e-848">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Intersect%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]
 [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  
[!code-csharp[CSLINQCustomComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#3)]
[!code-vb[CSLINQCustomComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-849">
            <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-849">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-850">Correlates the elements of two sequences based on matching keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-850">Correlates the elements of two sequences based on matching keys.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Join(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, TInner, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Join : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="3b63e-851">第一個序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-851">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="3b63e-852">第二個序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-852">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-853">索引鍵選取器函式所傳回之索引鍵的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-853">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-854">結果項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-854">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="3b63e-855">The first sequence to join.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-855">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="3b63e-856">The sequence to join to the first sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-856">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="3b63e-857">A function to extract the join key from each element of the first sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-857">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="3b63e-858">A function to extract the join key from each element of the second sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-858">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="3b63e-859">A function to create a result element from two matching elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-859">A function to create a result element from two matching elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-860">Correlates the elements of two sequences based on matching keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-860">Correlates the elements of two sequences based on matching keys.</span>
          </span>
          <span data-ttu-id="3b63e-861">The default equality comparer is used to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-861">The default equality comparer is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-862">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-862">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-863">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-863">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-864">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-864">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-865">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-865">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-866">預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來雜湊和比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-866">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="3b63e-867">聯結是指兩個來源的資訊根據一般的索引鍵的項目相互關聯的作業。</span><span class="sxs-lookup"><span data-stu-id="3b63e-867">A join refers to the operation of correlating the elements of two sources of information based on a common key.</span></span> <span data-ttu-id="3b63e-868"><xref:System.Linq.Enumerable.Join%2A> 將兩個資訊來源和相符的索引鍵，它們會一起其中一種方法呼叫中的整合。</span><span class="sxs-lookup"><span data-stu-id="3b63e-868"><xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call.</span></span> <span data-ttu-id="3b63e-869">這不同於使用`SelectMany`，這需要執行相同作業的多個方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="3b63e-869">This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.</span></span>  
  
 <span data-ttu-id="3b63e-870"><xref:System.Linq.Enumerable.Join%2A> 保留項目的順序`outer`，和每個項目，相符項目的順序`inner`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-870"><xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.</span></span>  
  
 <span data-ttu-id="3b63e-871">查詢運算式語法， `join` (Visual C#) 或`Join`(Visual Basic) 子句的引動過程轉譯<xref:System.Linq.Enumerable.Join%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-871">In query expression syntax, a `join` (Visual C#) or `Join` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Join%2A>.</span></span>  
  
 <span data-ttu-id="3b63e-872">在關聯式資料庫詞彙中，<xref:System.Linq.Enumerable.Join%2A>方法會實作內部的等聯結。</span><span class="sxs-lookup"><span data-stu-id="3b63e-872">In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin.</span></span> <span data-ttu-id="3b63e-873">「 內部 」 表示另一個序列中有符合的元素會包含在結果。</span><span class="sxs-lookup"><span data-stu-id="3b63e-873">'Inner' means that only elements that have a match in the other sequence are included in the results.</span></span> <span data-ttu-id="3b63e-874">等聯結 ' 聯結中的索引鍵比較是否相等。</span><span class="sxs-lookup"><span data-stu-id="3b63e-874">An 'equijoin' is a join in which the keys are compared for equality.</span></span> <span data-ttu-id="3b63e-875">左方外部聯結作業有沒有專用的標準查詢運算子，但可使用執行<xref:System.Linq.Enumerable.GroupJoin%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-875">A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method.</span></span> <span data-ttu-id="3b63e-876">請參閱[聯結作業](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)。</span><span class="sxs-lookup"><span data-stu-id="3b63e-876">See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-877">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29>來執行一般的索引鍵為基礎的兩個序列的內部聯結。</span><span class="sxs-lookup"><span data-stu-id="3b63e-877">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29> to perform an inner join of two sequences based on a common key.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#42)]
 [!code-vb[System.Linq.Enumerable#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-878">
            <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-878">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Join(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, TInner, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Join : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="3b63e-879">第一個序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-879">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="3b63e-880">第二個序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-880">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-881">索引鍵選取器函式所傳回之索引鍵的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-881">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-882">結果項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-882">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="3b63e-883">The first sequence to join.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-883">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="3b63e-884">The sequence to join to the first sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-884">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="3b63e-885">A function to extract the join key from each element of the first sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-885">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="3b63e-886">A function to extract the join key from each element of the second sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-886">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="3b63e-887">A function to create a result element from two matching elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-887">A function to create a result element from two matching elements.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-888">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-888">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-889">Correlates the elements of two sequences based on matching keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-889">Correlates the elements of two sequences based on matching keys.</span>
          </span>
          <span data-ttu-id="3b63e-890">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-890">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-891">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-891">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-892">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-892">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-893">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-893">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-894">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-894">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-895">如果 c`omparer`是`null`的預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來雜湊和比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-895">If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="3b63e-896">聯結是指兩個來源的資訊根據一般的索引鍵的項目相互關聯的作業。</span><span class="sxs-lookup"><span data-stu-id="3b63e-896">A join refers to the operation of correlating the elements of two sources of information based on a common key.</span></span> <span data-ttu-id="3b63e-897"><xref:System.Linq.Enumerable.Join%2A> 將兩個資訊來源和相符的索引鍵，它們會一起其中一種方法呼叫中的整合。</span><span class="sxs-lookup"><span data-stu-id="3b63e-897"><xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call.</span></span> <span data-ttu-id="3b63e-898">這不同於使用`SelectMany`，這需要執行相同作業的多個方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="3b63e-898">This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.</span></span>  
  
 <span data-ttu-id="3b63e-899"><xref:System.Linq.Enumerable.Join%2A> 保留項目的順序`outer`，和每個項目，相符項目的順序`inner`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-899"><xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.</span></span>  
  
 <span data-ttu-id="3b63e-900">在關聯式資料庫詞彙中，<xref:System.Linq.Enumerable.Join%2A>方法會實作內部的等聯結。</span><span class="sxs-lookup"><span data-stu-id="3b63e-900">In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin.</span></span> <span data-ttu-id="3b63e-901">「 內部 」 表示另一個序列中有符合的元素會包含在結果。</span><span class="sxs-lookup"><span data-stu-id="3b63e-901">'Inner' means that only elements that have a match in the other sequence are included in the results.</span></span> <span data-ttu-id="3b63e-902">等聯結 ' 聯結中的索引鍵比較是否相等。</span><span class="sxs-lookup"><span data-stu-id="3b63e-902">An 'equijoin' is a join in which the keys are compared for equality.</span></span> <span data-ttu-id="3b63e-903">左方外部聯結作業有沒有專用的標準查詢運算子，但可使用執行<xref:System.Linq.Enumerable.GroupJoin%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-903">A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method.</span></span> <span data-ttu-id="3b63e-904">請參閱[聯結作業](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)。</span><span class="sxs-lookup"><span data-stu-id="3b63e-904">See [Join Operations](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-905">
            <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-905">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Last&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-906">Returns the last element of a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-906">Returns the last element of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Last : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Last source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-907">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-907">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-908">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-908">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-909">Returns the last element of a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-909">Returns the last element of a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-910">The value at the last position in the source sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-910">The value at the last position in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-911"><xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法擲回例外狀況，如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-911">The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements.</span></span> <span data-ttu-id="3b63e-912">若要改為傳回預設值，當來源序列是空白時，使用<xref:System.Linq.Enumerable.LastOrDefault%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-912">To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-913">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>傳回陣列的最後一個項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-913">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the last element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#43)]
 [!code-vb[System.Linq.Enumerable#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-914">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-914">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-915">The source sequence is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-915">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Last : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Last (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-916">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-916">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-917">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-917">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-918">A function to test each element for a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-918">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-919">Returns the last element of a sequence that satisfies a specified condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-919">Returns the last element of a sequence that satisfies a specified condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-920">The last element in the sequence that passes the test in the specified predicate function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-920">The last element in the sequence that passes the test in the specified predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-921"><xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>方法擲回例外狀況，如果沒有相符項目中找到`source`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-921">The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`.</span></span> <span data-ttu-id="3b63e-922">若要改為傳回預設值，找到相符的項目時，使用<xref:System.Linq.Enumerable.LastOrDefault%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-922">To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-923">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>傳回陣列，符合條件的最後一個元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-923">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the last element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#44)]
 [!code-vb[System.Linq.Enumerable#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-924">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-924">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-925">No element satisfies the condition in <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-925">No element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="3b63e-926">-or-  The source sequence is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-926">-or-  The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LastOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-927">Returns the last element of a sequence, or a default value if no element is found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-927">Returns the last element of a sequence, or a default value if no element is found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.LastOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-928">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-928">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-929">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-929">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-930">Returns the last element of a sequence, or a default value if the sequence contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-930">Returns the last element of a sequence, or a default value if the sequence contains no elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-931">
            <see langword="default" />(<paramref name="TSource" />) if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-931">
              <see langword="default" />(<paramref name="TSource" />) if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-932">參考資料和可為 null 類型的預設值是`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-932">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="3b63e-933"><xref:System.Linq.Enumerable.LastOrDefault%2A>方法不會提供方法來指定預設值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-933">The <xref:System.Linq.Enumerable.LastOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="3b63e-934">如果您想要指定預設值以外`default(TSource)`，使用<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>範例 > 一節中所述的方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-934">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-935">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>上的空陣列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-935">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#45)]
 [!code-vb[System.Linq.Enumerable#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#45)]  
  
 <span data-ttu-id="3b63e-936">有時候值`default(TSource)`不是您想要使用如果集合不包含任何元素的預設值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-936">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="3b63e-937">不檢查不必要的預設值的結果，並再將它如有必要變更，您可以改用<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>方法，以指定您想要使用這個集合是空的預設值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-937">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="3b63e-938">然後，呼叫<xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>取得最後一個項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-938">Then, call <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the last element.</span></span> <span data-ttu-id="3b63e-939">下列程式碼範例會使用這兩種技術以取得預設值是 1，如果數字的每月天數的集合是空的。</span><span class="sxs-lookup"><span data-stu-id="3b63e-939">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty.</span></span> <span data-ttu-id="3b63e-940">因為整數的預設值為 0，沒有對應的當月的任何一天，預設值必須被指定為 1。</span><span class="sxs-lookup"><span data-stu-id="3b63e-940">Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="3b63e-941">查詢完成執行後不想要的預設值會檢查第一個結果變數。</span><span class="sxs-lookup"><span data-stu-id="3b63e-941">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="3b63e-942">第二個結果變數透過使用<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>來指定預設值是 1。</span><span class="sxs-lookup"><span data-stu-id="3b63e-942">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#127](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#127)]
 [!code-vb[System.Linq.Enumerable#127](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#127)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-943">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-943">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.LastOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-944">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-944">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-945">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-945">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-946">A function to test each element for a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-946">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-947">Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-947">Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-948">
            <see langword="default" />(<paramref name="TSource" />) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-948">
              <see langword="default" />(<paramref name="TSource" />) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-949">參考資料和可為 null 類型的預設值是`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-949">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-950">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>藉由傳遞述詞。</span><span class="sxs-lookup"><span data-stu-id="3b63e-950">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="3b63e-951">在第二個呼叫方法時，沒有任何項目中符合條件的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-951">In the second call to the method, there is no element in the sequence that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#46)]
 [!code-vb[System.Linq.Enumerable#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-952">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-952">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LongCount&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-953">Returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-953">Returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IEnumerable(Of TSource)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LongCount : seq&lt;'Source&gt; -&gt; int64" Usage="System.Linq.Enumerable.LongCount source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-954">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-954">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-955">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-955">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-956">Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-956">Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-957">The number of elements in the source sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-957">The number of elements in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-958">使用這個方法，而非<xref:System.Linq.Enumerable.Count%2A>在預期的結果是大於<xref:System.Int32.MaxValue>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-958">Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="3b63e-959">Visual Basic 查詢運算式語法，`Aggregate Into LongCount()`子句的引動過程轉譯<xref:System.Linq.Enumerable.LongCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-959">In Visual Basic query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-960">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>來計算陣列中的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-960">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#47)]
 [!code-vb[System.Linq.Enumerable#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-961">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-961">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-962">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-962">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LongCount : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; int64" Usage="System.Linq.Enumerable.LongCount (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-963">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-963">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-964">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-964">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-965">A function to test each element for a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-965">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-966">Returns an <see cref="T:System.Int64" /> that represents how many elements in a sequence satisfy a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-966">Returns an <see cref="T:System.Int64" /> that represents how many elements in a sequence satisfy a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-967">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-967">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-968">使用這個方法，而非<xref:System.Linq.Enumerable.Count%2A>在預期的結果是大於<xref:System.Int32.MaxValue>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-968">Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="3b63e-969">Visual Basic 查詢運算式語法，`Aggregate Into LongCount()`子句的引動過程轉譯<xref:System.Linq.Enumerable.LongCount%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-969">In Visual Basic query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-970">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>計算陣列中滿足條件的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-970">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#48)]
 [!code-vb[System.Linq.Enumerable#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-971">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-971">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-972">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-972">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Max">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-973">Returns the maximum value in a sequence of values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-973">Returns the maximum value in a sequence of values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static decimal Max (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Max(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-974">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-974">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-975">Returns the maximum value in a sequence of <see cref="T:System.Decimal" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-975">Returns the maximum value in a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-976">The maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-976">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-977"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29>方法會使用<xref:System.Decimal>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-977">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-978">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-978">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-979">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>來判斷序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-979">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-980">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-980">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-981">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-981">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static double Max (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Max(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-982">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-982">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-983">Returns the maximum value in a sequence of <see cref="T:System.Double" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-983">Returns the maximum value in a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-984">The maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-984">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-985"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>方法會使用<xref:System.Double>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-985">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-986">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-986">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-987">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>來判斷序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-987">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-988">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-988">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-989">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-989">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static int Max (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Max(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-990">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-990">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-991">Returns the maximum value in a sequence of <see cref="T:System.Int32" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-991">Returns the maximum value in a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-992">The maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-992">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-993"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>方法會使用<xref:System.Int32>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-993">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-994">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-994">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-995">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>來判斷序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-995">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-996">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-996">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-997">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-997">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static long Max (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Max(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-998">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-998">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-999">Returns the maximum value in a sequence of <see cref="T:System.Int64" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-999">Returns the maximum value in a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1000">The maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1000">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1001"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>方法會使用<xref:System.Int64>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1001">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1002">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1002">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1003">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>來判斷序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1003">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1004">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1004">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1005">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1005">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1006">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1006">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1007">Returns the maximum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1007">Returns the maximum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1008">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1008">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1009"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29>方法會使用<xref:System.Decimal>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1009">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1010">如果來源序列是空的或包含的值`null`，此函數會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1010">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1011">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1011">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1012">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>來判斷序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1012">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1013">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1013">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1014">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1014">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1015">Returns the maximum value in a sequence of nullable <see cref="T:System.Double" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1015">Returns the maximum value in a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1016">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1016">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1017"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>方法會使用<xref:System.Double>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1017">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1018">如果來源序列是空的或包含的值`null`，此函數會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1018">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1019">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1019">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1020">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>來判斷序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1020">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1021">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1021">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1022">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1022">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1023">Returns the maximum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1023">Returns the maximum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1024">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1024">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1025"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>方法會使用<xref:System.Int32>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1025">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1026">如果來源序列是空的或包含的值`null`，此函數會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1026">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1027">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1027">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1028">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>來判斷序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1028">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1029">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1029">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1030">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1030">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1031">Returns the maximum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1031">Returns the maximum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1032">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1032">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1033"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>方法會使用<xref:System.Int64>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1033">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1034">如果來源序列是空的或包含的值`null`，此函數會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1034">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1035">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1035">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1036">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>來判斷序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1036">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1037">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1037">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1038">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1038">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1039">Returns the maximum value in a sequence of nullable <see cref="T:System.Single" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1039">Returns the maximum value in a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1040">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1040">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1041"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>方法會使用<xref:System.Single>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1041">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1042">如果來源序列是空的或包含的值`null`，此函數會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1042">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1043">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1043">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1044">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>來判斷序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1044">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1045">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1045">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Max(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1046">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1046">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1047">Returns the maximum value in a sequence of <see cref="T:System.Single" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1047">Returns the maximum value in a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1048">The maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1048">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1049"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>方法會使用<xref:System.Single>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1049">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1050">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1050">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1051">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>來判斷序列中的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1051">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1052">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1052">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1053">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1053">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1054">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1054">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1055">A sequence of values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1055">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1056">Returns the maximum value in a generic sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1056">Returns the maximum value in a generic sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1057">The maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1057">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1058">如果型別`TSource`實作<xref:System.IComparable%601>、<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法使用這個實作來比較值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1058">If type `TSource` implements <xref:System.IComparable%601>, the <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method uses that implementation to compare values.</span></span> <span data-ttu-id="3b63e-1059">否則，如果型別`TSource`實作<xref:System.IComparable>，該實作用來比較值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1059">Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1060">如果`TSource`是參考類型，而且來源序列是空的或包含的值`null`，這個方法會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1060">If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this method returns `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1061">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1061">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1062">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>來判斷序列中的最大值<xref:System.IComparable%601>物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1062">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the maximum value in a sequence of <xref:System.IComparable%601> objects.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#57](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#57)]
 [!code-vb[System.Linq.Enumerable#57](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1063">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1063">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1064">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1064">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1065">A sequence of values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1065">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1066">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1066">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1067">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1067">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1068">The maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1068">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1069"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29>方法會使用<xref:System.Decimal>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1069">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1070">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Decimal>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1070">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="3b63e-1071">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1071">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1072">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1072">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1073">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1073">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1074">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1074">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1075">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1075">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1076">A sequence of values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1076">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1077">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1077">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1078">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1078">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1079">The maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1079">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1080"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>方法會使用<xref:System.Double>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1080">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1081">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Double>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1081">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="3b63e-1082">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1082">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1083">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1083">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1084">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1084">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1085">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1085">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1086">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1086">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1087">A sequence of values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1087">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1088">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1088">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1089">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1089">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1090">The maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1090">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1091"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>方法會使用<xref:System.Int32>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1091">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1092">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1092">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="3b63e-1093">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1093">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1094">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1094">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1095">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1095">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1096">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1096">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1097">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1097">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1098">A sequence of values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1098">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1099">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1099">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1100">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1100">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1101">The maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1101">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1102"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>方法會使用<xref:System.Int64>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1102">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1103">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Int64>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1103">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="3b63e-1104">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1104">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1105">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1105">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1106">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1106">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1107">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1107">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1108">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1108">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1109">A sequence of values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1109">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1110">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1110">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1111">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1111">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1112">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1112">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1113"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29>方法會使用<xref:System.Decimal>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1113">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1114">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值類型，特別是`Nullable<Decimal>`在 C# 或`Nullable(Of Decimal)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1114">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1115">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1115">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1116">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1116">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1117">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1117">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1118">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1118">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1119">A sequence of values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1119">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1120">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1120">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1121">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1121">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1122">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1122">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1123"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29>方法會使用<xref:System.Double>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1123">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1124">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值類型，特別是`Nullable<Double>`在 C# 或`Nullable(Of Double)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1124">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1125">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1125">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1126">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1126">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1127">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1127">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1128">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1128">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1129">A sequence of values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1129">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1130">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1130">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1131">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1131">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1132">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1132">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1133"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29>方法會使用<xref:System.Int32>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1133">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1134">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值類型，特別是`Nullable<Int32>`在 C# 或`Nullable(Of Int32)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1134">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1135">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1135">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1136">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1136">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1137">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1137">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1138">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1138">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1139">A sequence of values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1139">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1140">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1140">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1141">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1141">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1142">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1142">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1143"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29>方法會使用<xref:System.Int64>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1143">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1144">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值類型，特別是`Nullable<Int64>`在 C# 或`Nullable(Of Int64)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1144">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1145">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1145">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1146">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1146">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1147">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1147">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1148">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1148">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1149">A sequence of values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1149">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1150">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1150">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1151">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1151">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1152">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1152">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1153"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29>方法會使用<xref:System.Single>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1153">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1154">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值類型，特別是`Nullable<Single>`在 C# 或`Nullable(Of Single)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1154">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1155">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1155">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1156">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1156">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1157">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1157">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1158">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1158">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1159">A sequence of values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1159">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1160">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1160">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1161">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1161">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1162">The maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1162">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1163"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29>方法會使用<xref:System.Single>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1163">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1164">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1164">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="3b63e-1165">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1165">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1166">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1166">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1167">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1167">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1168">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1168">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Max&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Max&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1169">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1169">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-1170">傳回值的型別<c>選取器</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1170">The type of the value returned by <c>selector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1171">A sequence of values to determine the maximum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1171">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1172">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1172">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1173">Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1173">Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1174">The maximum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1174">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1175">如果型別`TResult`實作<xref:System.IComparable%601>，這個方法會使用這個實作來比較值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1175">If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="3b63e-1176">否則，如果型別`TResult`實作<xref:System.IComparable>，該實作用來比較值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1176">Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1177">Visual Basic 查詢運算式語法，`Aggregate Into Max()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Max%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1177">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1178">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最大值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1178">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1179">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1179">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Min">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-1180">Returns the minimum value in a sequence of values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1180">Returns the minimum value in a sequence of values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static decimal Min (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Min(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1181">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1181">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1182">Returns the minimum value in a sequence of <see cref="T:System.Decimal" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1182">Returns the minimum value in a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1183">The minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1183">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1184"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29>方法會使用<xref:System.Decimal>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1184">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1185">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1185">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1186">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>來判斷序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1186">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1187">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1187">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1188">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1188">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static double Min (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Min(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1189">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1189">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1190">Returns the minimum value in a sequence of <see cref="T:System.Double" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1190">Returns the minimum value in a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1191">The minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1191">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1192"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>方法會使用<xref:System.Double>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1192">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1193">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1193">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1194">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>來判斷序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1194">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1195">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1195">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1196">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1196">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static int Min (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Min(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1197">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1197">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1198">Returns the minimum value in a sequence of <see cref="T:System.Int32" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1198">Returns the minimum value in a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1199">The minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1199">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1200"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29>方法會使用<xref:System.Int32>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1200">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1201">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1201">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1202">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>來判斷序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1202">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1203">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1203">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1204">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1204">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static long Min (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Min(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1205">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1205">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1206">Returns the minimum value in a sequence of <see cref="T:System.Int64" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1206">Returns the minimum value in a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1207">The minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1207">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1208"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29>方法會使用<xref:System.Int64>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1208">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1209">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1209">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1210">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>來判斷序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1210">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1211">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1211">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1212">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1212">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1213">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1213">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1214">Returns the minimum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1214">Returns the minimum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1215">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1215">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1216"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29>方法會使用<xref:System.Decimal>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1216">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1217">如果來源序列是空的或包含的值`null`，此函數會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1217">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1218">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1218">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1219">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>來判斷序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1219">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1220">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1220">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1221">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1221">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1222">Returns the minimum value in a sequence of nullable <see cref="T:System.Double" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1222">Returns the minimum value in a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1223">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1223">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1224"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29>方法會使用<xref:System.Double>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1224">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1225">如果來源序列是空的或包含的值`null`，此函數會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1225">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1226">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1226">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1227">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>來判斷序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1227">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1228">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1228">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1229">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1229">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1230">Returns the minimum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1230">Returns the minimum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1231">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1231">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1232"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>方法會使用<xref:System.Int32>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1232">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1233">如果來源序列是空的或包含的值`null`，此函數會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1233">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1234">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1234">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1235">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>來判斷序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1235">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1236">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1236">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1237">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1237">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1238">Returns the minimum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1238">Returns the minimum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1239">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1239">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1240"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29>方法會使用<xref:System.Int64>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1240">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1241">如果來源序列是空的或包含的值`null`，此函數會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1241">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1242">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1242">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1243">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>來判斷序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1243">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1244">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1244">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1245">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1245">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1246">Returns the minimum value in a sequence of nullable <see cref="T:System.Single" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1246">Returns the minimum value in a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1247">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1247">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1248"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>方法會使用<xref:System.Single>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1248">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1249">如果來源序列是空的或包含的值`null`，此函數會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1249">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1250">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1250">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1251">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29>來判斷序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1251">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1252">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1252">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Min(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1253">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1253">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1254">Returns the minimum value in a sequence of <see cref="T:System.Single" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1254">Returns the minimum value in a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1255">The minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1255">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1256"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>方法會使用<xref:System.Single>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1256">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1257">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1257">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1258">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29>來判斷序列中的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1258">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1259">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1259">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1260">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1260">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1261">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1261">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1262">A sequence of values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1262">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1263">Returns the minimum value in a generic sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1263">Returns the minimum value in a generic sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1264">The minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1264">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1265">如果型別`TSource`實作<xref:System.IComparable%601>，這個方法會使用這個實作來比較值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1265">If type `TSource` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="3b63e-1266">否則，如果型別`TSource`實作<xref:System.IComparable>，該實作用來比較值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1266">Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1267">如果`TSource`是參考類型，而且來源序列是空的或包含的值`null`，此函數會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1267">If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1268">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1268">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1269">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>來判斷序列中的最小值<xref:System.IComparable%601>物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1269">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the minimum value in a sequence of <xref:System.IComparable%601> objects.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#67](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#67)]
 [!code-vb[System.Linq.Enumerable#67](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1270">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1270">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1271">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1271">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1272">A sequence of values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1272">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1273">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1273">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1274">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1274">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1275">The minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1275">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1276"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29>方法會使用<xref:System.Decimal>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1276">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1277">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Decimal>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1277">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="3b63e-1278">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1278">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1279">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1279">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1280">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1280">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1281">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1281">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1282">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1282">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1283">A sequence of values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1283">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1284">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1284">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1285">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1285">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1286">The minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1286">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1287"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>方法會使用<xref:System.Double>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1287">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1288">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Double>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1288">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="3b63e-1289">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1289">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1290">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1290">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1291">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1291">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1292">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1292">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1293">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1293">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1294">A sequence of values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1294">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1295">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1295">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1296">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1296">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1297">The minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1297">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1298"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>方法會使用<xref:System.Int32>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1298">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1299">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1299">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="3b63e-1300">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1300">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1301">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1301">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1302">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1302">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1303">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1303">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1304">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1304">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1305">A sequence of values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1305">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1306">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1306">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1307">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1307">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1308">The minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1308">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1309"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29>方法會使用<xref:System.Int64>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1309">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1310">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Int64>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1310">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="3b63e-1311">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1311">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1312">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1312">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1313">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1313">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1314">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1314">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1315">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1315">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1316">A sequence of values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1316">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1317">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1317">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1318">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1318">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1319">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1319">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1320"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29>方法會使用<xref:System.Decimal>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1320">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1321">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值類型，特別是`Nullable<Decimal>`在 C# 或`Nullable(Of Decimal)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1321">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1322">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1322">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1323">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1323">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1324">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1324">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1325">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1325">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1326">A sequence of values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1326">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1327">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1327">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1328">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1328">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1329">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1329">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1330"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29>方法會使用<xref:System.Double>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1330">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1331">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值類型，特別是`Nullable<Double>`在 C# 或`Nullable(Of Double)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1331">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1332">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1332">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1333">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1333">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1334">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1334">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1335">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1335">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1336">A sequence of values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1336">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1337">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1337">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1338">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1338">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1339">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1339">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1340"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29>方法會使用<xref:System.Int32>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1340">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1341">您可以套用這個方法為任意值的序列，如果您提供的函數，`selector`的投射來源成員到數值類型，特別是`Nullable<Int32>`在 C# 或`Nullable(Of Int32)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1341">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of source into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1342">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1342">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1343">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1343">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1344">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1344">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1345">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1345">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1346">A sequence of values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1346">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1347">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1347">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1348">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1348">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1349">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1349">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1350"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29>方法會使用<xref:System.Int64>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1350">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1351">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值類型，特別是`Nullable<Int64>`在 C# 或`Nullable(Of Int64)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1351">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1352">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1352">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1353">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1353">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1354">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1354">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1355">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1355">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1356">A sequence of values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1356">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1357">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1357">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1358">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1358">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1359">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1359">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1360"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29>方法會使用<xref:System.Single>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1360">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1361">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值類型，特別是`Nullable<Single>`在 C# 或`Nullable(Of Single)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1361">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1362">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1362">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1363">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1363">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1364">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1364">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1365">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1365">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1366">A sequence of values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1366">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1367">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1367">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1368">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1368">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1369">The minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1369">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1370"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29>方法會使用<xref:System.Single>實作<xref:System.IComparable%601>比較的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1370">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1371">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1371">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="3b63e-1372">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1372">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1373">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1373">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1374">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1374">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1375">
            <paramref name="source" /> contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1375">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Min&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Min&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1376">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1376">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-1377">傳回值的型別<c>選取器</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1377">The type of the value returned by <c>selector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1378">A sequence of values to determine the minimum value of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1378">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1379">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1379">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1380">Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1380">Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1381">The minimum value in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1381">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1382">如果型別`TResult`實作<xref:System.IComparable%601>，這個方法會使用這個實作來比較值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1382">If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="3b63e-1383">否則，如果型別`TResult`實作<xref:System.IComparable>，該實作用來比較值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1383">Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-1384">Visual Basic 查詢運算式語法，`Aggregate Into Min()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Min%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1384">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1385">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29>來判斷序列中預計值的最小值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1385">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1386">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1386">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; OfType&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OfType(Of TResult) (source As IEnumerable) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ OfType(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member OfType : System.Collections.IEnumerable -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.OfType source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-1387">用來做為序列項目之篩選依據的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1387">The type to filter the elements of the sequence on.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1388">The <see cref="T:System.Collections.IEnumerable" /> whose elements to filter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1388">The <see cref="T:System.Collections.IEnumerable" /> whose elements to filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1389">Filters the elements of an <see cref="T:System.Collections.IEnumerable" /> based on a specified type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1389">Filters the elements of an <see cref="T:System.Collections.IEnumerable" /> based on a specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1390">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence of type <paramref name="TResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1390">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence of type <paramref name="TResult" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1391">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1391">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1392">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1392">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1393">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1393">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1394"><xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29>方法會傳回中的這些元素`source`可以轉換為類型`TResult`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1394">The <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29> method returns only those elements in `source` that can be cast to type `TResult`.</span></span> <span data-ttu-id="3b63e-1395">如果項目無法轉換為類型，而收到例外狀況`TResult`，使用<xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1395">To instead receive an exception if an element cannot be cast to type `TResult`, use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span>  
  
 <span data-ttu-id="3b63e-1396">這個方法是可以套用至集合，其中有非參數化的類型，例如的幾個標準查詢運算子方法的其中一個<xref:System.Collections.ArrayList>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1396">This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <xref:System.Collections.ArrayList>.</span></span> <span data-ttu-id="3b63e-1397">這是因為<xref:System.Linq.Enumerable.OfType%2A>擴充類型<xref:System.Collections.IEnumerable>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1397">This is because <xref:System.Linq.Enumerable.OfType%2A> extends the type <xref:System.Collections.IEnumerable>.</span></span> <span data-ttu-id="3b63e-1398"><xref:System.Linq.Enumerable.OfType%2A> 無法只套用至為基礎的集合上的參數化<xref:System.Collections.Generic.IEnumerable%601>類型，但根據非參數化的集合<xref:System.Collections.IEnumerable>也輸入。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1398"><xref:System.Linq.Enumerable.OfType%2A> cannot only be applied to collections that are based on the parameterized <xref:System.Collections.Generic.IEnumerable%601> type, but collections that are based on the non-parameterized <xref:System.Collections.IEnumerable> type also.</span></span>  
  
 <span data-ttu-id="3b63e-1399">藉由套用<xref:System.Linq.Enumerable.OfType%2A>到集合中實作<xref:System.Collections.IEnumerable>，您就可以使用標準查詢運算子來查詢集合。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1399">By applying <xref:System.Linq.Enumerable.OfType%2A> to a collection that implements <xref:System.Collections.IEnumerable>, you gain the ability to query the collection by using the standard query operators.</span></span> <span data-ttu-id="3b63e-1400">例如，如果指定的型別引數<xref:System.Object>至<xref:System.Linq.Enumerable.OfType%2A>會傳回型別的物件`IEnumerable<Object>`在 C# 或`IEnumerable(Of Object)`在 Visual Basic 中，可以套用標準查詢運算子。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1400">For example, specifying a type argument of <xref:System.Object> to <xref:System.Linq.Enumerable.OfType%2A> would return an object of type `IEnumerable<Object>` in C# or `IEnumerable(Of Object)` in Visual Basic, to which the standard query operators can be applied.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1401">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.OfType%2A>篩選的項目<xref:System.Collections.IEnumerable>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1401">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OfType%2A> to filter the elements of an <xref:System.Collections.IEnumerable>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#69](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#69)]
 [!code-vb[System.Linq.Enumerable#69](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1402">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1402">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-1403">Sorts the elements of a sequence in ascending order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1403">Sorts the elements of a sequence in ascending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1404">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1404">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-1405">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1405">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1406">A sequence of values to order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1406">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-1407">A function to extract a key from an element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1407">A function to extract a key from an element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1408">Sorts the elements of a sequence in ascending order according to a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1408">Sorts the elements of a sequence in ascending order according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1409">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1409">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1410">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1410">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1411">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1411">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1412">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1412">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1413">若要排序序列的項目本身的值，指定 identity 函數 (`x => x` Visual C# 中或`Function(x) x`在 Visual Basic 中) 的`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1413">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="3b63e-1414">兩種方法定義為延伸類型<xref:System.Linq.IOrderedEnumerable%601>，這是這個方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1414">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="3b63e-1415">這兩種方法，也就是`ThenBy`和`ThenByDescending`，可讓您指定其他排序準則來排序序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1415">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="3b63e-1416">`ThenBy` 和`ThenByDescending`也會傳回<xref:System.Linq.IOrderedEnumerable%601>，這表示任何數目的連續呼叫`ThenBy`或`ThenByDescending`才能進行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1416">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-1417">因為<xref:System.Linq.IOrderedEnumerable%601>繼承自<xref:System.Collections.Generic.IEnumerable%601>，您可以呼叫<xref:System.Linq.Enumerable.OrderBy%2A>或<xref:System.Linq.Enumerable.OrderByDescending%2A>呼叫的結果<xref:System.Linq.Enumerable.OrderBy%2A>， <xref:System.Linq.Enumerable.OrderByDescending%2A>，<xref:System.Linq.Enumerable.ThenBy%2A>或<xref:System.Linq.Enumerable.ThenByDescending%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1417">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="3b63e-1418">如此一來，引進了新的主要排序略過先前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1418">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="3b63e-1419">這個方法會使用預設比較子來比較索引鍵<xref:System.Collections.Generic.Comparer%601.Default%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1419">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="3b63e-1420">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1420">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="3b63e-1421">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1421">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="3b63e-1422">查詢運算式語法， `orderby` (Visual C#) 或`Order By`(Visual Basic) 子句的引動過程轉譯<xref:System.Linq.Enumerable.OrderBy%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1422">In query expression syntax, an `orderby` (Visual C#) or `Order By` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1423">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>排序序列的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1423">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to sort the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#70](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#70)]
 [!code-vb[System.Linq.Enumerable#70](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1424">
            <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1424">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1425">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1425">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-1426">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1426">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1427">A sequence of values to order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1427">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-1428">A function to extract a key from an element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1428">A function to extract a key from an element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-1429">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1429">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1430">Sorts the elements of a sequence in ascending order by using a specified comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1430">Sorts the elements of a sequence in ascending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1431">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1431">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1432">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1432">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1433">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1433">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1434">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1434">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1435">若要排序序列的項目本身的值，指定 identity 函數 (`x => x` Visual C# 中或`Function(x) x`在 Visual Basic 中) 的`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1435">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="3b63e-1436">兩種方法定義為延伸類型<xref:System.Linq.IOrderedEnumerable%601>，這是這個方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1436">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="3b63e-1437">這兩種方法，也就是`ThenBy`和`ThenByDescending`，可讓您指定其他排序準則來排序序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1437">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="3b63e-1438">`ThenBy` 和`ThenByDescending`也會傳回<xref:System.Linq.IOrderedEnumerable%601>，這表示任何數目的連續呼叫`ThenBy`或`ThenByDescending`才能進行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1438">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-1439">因為<xref:System.Linq.IOrderedEnumerable%601>繼承自<xref:System.Collections.Generic.IEnumerable%601>，您可以呼叫<xref:System.Linq.Enumerable.OrderBy%2A>或<xref:System.Linq.Enumerable.OrderByDescending%2A>呼叫的結果<xref:System.Linq.Enumerable.OrderBy%2A>， <xref:System.Linq.Enumerable.OrderByDescending%2A>，<xref:System.Linq.Enumerable.ThenBy%2A>或<xref:System.Linq.Enumerable.ThenByDescending%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1439">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="3b63e-1440">如此一來，引進了新的主要排序略過先前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1440">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="3b63e-1441">如果`comparer`是`null`，預設的比較子<xref:System.Collections.Generic.Comparer%601.Default%2A>用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1441">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="3b63e-1442">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1442">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="3b63e-1443">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1443">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1444">
            <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1444">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-1445">Sorts the elements of a sequence in descending order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1445">Sorts the elements of a sequence in descending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByDescending(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1446">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1446">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-1447">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1447">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1448">A sequence of values to order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1448">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-1449">A function to extract a key from an element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1449">A function to extract a key from an element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1450">Sorts the elements of a sequence in descending order according to a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1450">Sorts the elements of a sequence in descending order according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1451">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1451">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1452">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1452">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1453">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1453">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1454">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1454">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1455">若要排序序列的項目本身的值，指定 identity 函數 (`x => x` Visual C# 中或`Function(x) x`在 Visual Basic 中) 的`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1455">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="3b63e-1456">如需這個方法的範例，請參閱<xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1456">For an example of this method, see <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>.</span></span>  
  
 <span data-ttu-id="3b63e-1457">兩種方法定義為延伸類型<xref:System.Linq.IOrderedEnumerable%601>，這是這個方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1457">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="3b63e-1458">這兩種方法，也就是`ThenBy`和`ThenByDescending`，可讓您指定其他排序準則來排序序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1458">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="3b63e-1459">`ThenBy` 和`ThenByDescending`也會傳回<xref:System.Linq.IOrderedEnumerable%601>，這表示任何數目的連續呼叫`ThenBy`或`ThenByDescending`才能進行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1459">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-1460">因為<xref:System.Linq.IOrderedEnumerable%601>繼承自<xref:System.Collections.Generic.IEnumerable%601>，您可以呼叫<xref:System.Linq.Enumerable.OrderBy%2A>或<xref:System.Linq.Enumerable.OrderByDescending%2A>呼叫的結果<xref:System.Linq.Enumerable.OrderBy%2A>， <xref:System.Linq.Enumerable.OrderByDescending%2A>，<xref:System.Linq.Enumerable.ThenBy%2A>或<xref:System.Linq.Enumerable.ThenByDescending%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1460">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="3b63e-1461">如此一來，引進了新的主要排序略過先前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1461">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="3b63e-1462">這個方法會使用預設比較子來比較索引鍵<xref:System.Collections.Generic.Comparer%601.Default%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1462">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="3b63e-1463">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1463">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="3b63e-1464">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1464">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="3b63e-1465">查詢運算式語法， `orderby descending` (Visual C#) 或`Order By Descending`(Visual Basic) 子句的引動過程轉譯<xref:System.Linq.Enumerable.OrderByDescending%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1465">In query expression syntax, an `orderby descending` (Visual C#) or `Order By Descending` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderByDescending%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1466">
            <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1466">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByDescending(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1467">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1467">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-1468">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1468">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1469">A sequence of values to order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1469">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-1470">A function to extract a key from an element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1470">A function to extract a key from an element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-1471">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1471">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1472">Sorts the elements of a sequence in descending order by using a specified comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1472">Sorts the elements of a sequence in descending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1473">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1473">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1474">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1474">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1475">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1475">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1476">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1476">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1477">若要排序序列的項目本身的值，指定 identity 函數 (`x => x` Visual C# 中或`Function(x) x`在 Visual Basic 中) 的`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1477">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="3b63e-1478">兩種方法定義為延伸類型<xref:System.Linq.IOrderedEnumerable%601>，這是這個方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1478">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="3b63e-1479">這兩種方法，也就是`ThenBy`和`ThenByDescending`，可讓您指定其他排序準則來排序序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1479">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="3b63e-1480">`ThenBy` 和`ThenByDescending`也會傳回<xref:System.Linq.IOrderedEnumerable%601>，這表示任何數目的連續呼叫`ThenBy`或`ThenByDescending`才能進行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1480">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-1481">因為<xref:System.Linq.IOrderedEnumerable%601>繼承自<xref:System.Collections.Generic.IEnumerable%601>，您可以呼叫<xref:System.Linq.Enumerable.OrderBy%2A>或<xref:System.Linq.Enumerable.OrderByDescending%2A>呼叫的結果<xref:System.Linq.Enumerable.OrderBy%2A>， <xref:System.Linq.Enumerable.OrderByDescending%2A>，<xref:System.Linq.Enumerable.ThenBy%2A>或<xref:System.Linq.Enumerable.ThenByDescending%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1481">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="3b63e-1482">如此一來，引進了新的主要排序略過先前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1482">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="3b63e-1483">如果`comparer`是`null`，預設的比較子<xref:System.Collections.Generic.Comparer%601.Default%2A>用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1483">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="3b63e-1484">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1484">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="3b63e-1485">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1485">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1486">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>排序序列中使用的轉換函式和自訂比較子，依遞減順序的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1486">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to sort the elements of a sequence in descending order by using a transform function and a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#71](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#71)]
 [!code-vb[System.Linq.Enumerable#71](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1487">
            <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1487">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <Member MemberName="Prepend&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Prepend&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Prepend&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Prepend(Of TSource) (source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Prepend(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Prepend : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Prepend (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="element" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1488">
            <paramref name="source" /> 項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1488">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1489">A sequence of values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1489">A sequence of values.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="3b63e-1490">The value to prepend to <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1490">The value to prepend to <paramref name="source" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1491">Adds a value to the beginning of the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1491">Adds a value to the beginning of the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1492">A new sequence that begins with <paramref name="element" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1492">A new sequence that begins with <paramref name="element" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1493">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1493">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; Range (int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;int32&gt; Range(int32 start, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Range (start As Integer, count As Integer) As IEnumerable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;int&gt; ^ Range(int start, int count);" />
      <MemberSignature Language="F#" Value="static member Range : int * int -&gt; seq&lt;int&gt;" Usage="System.Linq.Enumerable.Range (start, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="3b63e-1494">The value of the first integer in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1494">The value of the first integer in the sequence.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3b63e-1495">The number of sequential integers to generate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1495">The number of sequential integers to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1496">Generates a sequence of integral numbers within a specified range.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1496">Generates a sequence of integral numbers within a specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1497">An <c>IEnumerable&lt;Int32&gt;</c> in C# or <c>IEnumerable(Of Int32)</c> in Visual Basic that contains a range of sequential integral numbers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1497">An <c>IEnumerable&lt;Int32&gt;</c> in C# or <c>IEnumerable(Of Int32)</c> in Visual Basic that contains a range of sequential integral numbers.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1498">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1498">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1499">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1499">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1500">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1500">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1501">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Range%2A>產生一連串的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1501">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Range%2A> to generate a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#72](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#72)]
 [!code-vb[System.Linq.Enumerable#72](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3b63e-1502">
            <paramref name="count" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1502">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3b63e-1503">-or-  <paramref name="start" /> + <paramref name="count" /> -1 is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1503">-or-  <paramref name="start" /> + <paramref name="count" /> -1 is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Repeat&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Repeat&lt;TResult&gt; (TResult element, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Repeat&lt;TResult&gt;(!!TResult element, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Repeat(Of TResult) (element As TResult, count As Integer) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Repeat(TResult element, int count);" />
      <MemberSignature Language="F#" Value="static member Repeat : 'Result * int -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Repeat (element, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="element" Type="TResult" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-1504">要在結果序列中重複出現的值之類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1504">The type of the value to be repeated in the result sequence.</span>
          </span>
        </typeparam>
        <param name="element">
          <span data-ttu-id="3b63e-1505">The value to be repeated.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1505">The value to be repeated.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3b63e-1506">The number of times to repeat the value in the generated sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1506">The number of times to repeat the value in the generated sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1507">Generates a sequence that contains one repeated value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1507">Generates a sequence that contains one repeated value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1508">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a repeated value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1508">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a repeated value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1509">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1509">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1510">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1510">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1511">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1511">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1512">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Repeat%2A>產生一連串的重複值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1512">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Repeat%2A> to generate a sequence of a repeated value.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#73](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#73)]
 [!code-vb[System.Linq.Enumerable#73](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3b63e-1513">
            <paramref name="count" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1513">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Reverse&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Reverse(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Reverse(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Reverse : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Reverse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1514">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1514">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1515">A sequence of values to reverse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1515">A sequence of values to reverse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1516">Inverts the order of the elements in a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1516">Inverts the order of the elements in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1517">A sequence whose elements correspond to those of the input sequence in reverse order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1517">A sequence whose elements correspond to those of the input sequence in reverse order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1518">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1518">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1519">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1519">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1520">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1520">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1521">不同於<xref:System.Linq.Enumerable.OrderBy%2A>，這個排序方法，不會考慮中的實際值自行決定的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1521">Unlike <xref:System.Linq.Enumerable.OrderBy%2A>, this sorting method does not consider the actual values themselves in determining the order.</span></span> <span data-ttu-id="3b63e-1522">相反地，它只會傳回項目要從中產生的相反順序基礎來源。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1522">Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1523">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Reverse%2A>反轉陣列中項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1523">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Reverse%2A> to reverse the order of elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#74](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#74)]
 [!code-vb[System.Linq.Enumerable#74](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1524">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1524">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Select&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-1525">Projects each element of a sequence into a new form.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1525">Projects each element of a sequence into a new form.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : seq&lt;'Source&gt; * Func&lt;'Source, int, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1526">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1526">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-1527">傳回值的型別<c>選取器</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1527">The type of the value returned by <c>selector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1528">A sequence of values to invoke a transform function on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1528">A sequence of values to invoke a transform function on.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1529">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1529">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1530">Projects each element of a sequence into a new form by incorporating the element's index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1530">Projects each element of a sequence into a new form by incorporating the element's index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1531">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1531">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1532">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1532">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1533">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1533">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1534">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1534">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1535">第一個引數`selector`代表要處理的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1535">The first argument to `selector` represents the element to process.</span></span> <span data-ttu-id="3b63e-1536">第二個引數`selector`表示來源序列中項目的以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1536">The second argument to `selector` represents the zero-based index of that element in the source sequence.</span></span> <span data-ttu-id="3b63e-1537">如果項目是以已知的順序排列，而且您想要運用特定的索引處的項目，例如，這可能會很有用。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1537">This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</span></span> <span data-ttu-id="3b63e-1538">可能也很有用如果您想要擷取的一或多個項目索引。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1538">It can also be useful if you want to retrieve the index of one or more elements.</span></span>  
  
 <span data-ttu-id="3b63e-1539">此投影方法需要轉換函式`selector`，產生一個在來源序列，每個值的值`source`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1539">This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`.</span></span> <span data-ttu-id="3b63e-1540">如果`selector`本身就是集合的值傳回，負責決定是否要以手動方式周遊子取用者。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1540">If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</span></span> <span data-ttu-id="3b63e-1541">在這種情況下，可能更適合您的查詢來傳回單一值的聯合的序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1541">In such a situation, it might be better for your query to return a single coalesced sequence of values.</span></span> <span data-ttu-id="3b63e-1542">若要達成此目的，使用<xref:System.Linq.Enumerable.SelectMany%2A>方法，而非<xref:System.Linq.Enumerable.Select%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1542">To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>.</span></span> <span data-ttu-id="3b63e-1543">雖然`SelectMany`運作方式類似`Select`，它不同，因為轉換函式傳回一個集合，然後展開`SelectMany`傳回之前。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1543">Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1544">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29>投射到序列的值和使用每個項目的索引。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1544">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29> to project over a sequence of values and use the index of each element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#76](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#76)]
 [!code-vb[System.Linq.Enumerable#76](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1545">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1545">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1546">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1546">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-1547">傳回值的型別<c>選取器</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1547">The type of the value returned by <c>selector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1548">A sequence of values to invoke a transform function on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1548">A sequence of values to invoke a transform function on.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1549">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1549">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1550">Projects each element of a sequence into a new form.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1550">Projects each element of a sequence into a new form.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1551">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1551">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1552">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1552">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1553">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1553">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1554">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1554">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1555">此投影方法需要轉換函式`selector`，產生一個在來源序列，每個值的值`source`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1555">This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`.</span></span> <span data-ttu-id="3b63e-1556">如果`selector`本身就是集合的值傳回，負責決定是否要以手動方式周遊子取用者。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1556">If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</span></span> <span data-ttu-id="3b63e-1557">在這種情況下，可能更適合您的查詢來傳回單一值的聯合的序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1557">In such a situation, it might be better for your query to return a single coalesced sequence of values.</span></span> <span data-ttu-id="3b63e-1558">若要達成此目的，使用<xref:System.Linq.Enumerable.SelectMany%2A>方法，而非<xref:System.Linq.Enumerable.Select%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1558">To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>.</span></span> <span data-ttu-id="3b63e-1559">雖然`SelectMany`運作方式類似`Select`，它不同，因為轉換函式傳回一個集合，然後展開`SelectMany`傳回之前。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1559">Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.</span></span>  
  
 <span data-ttu-id="3b63e-1560">查詢運算式語法， `select` (Visual C#) 或`Select`(Visual Basic) 子句的引動過程轉譯<xref:System.Linq.Enumerable.Select%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1560">In query expression syntax, a `select` (Visual C#) or `Select` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Select%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1561">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>專案透過一連串的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1561">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to project over a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#75](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#75)]
 [!code-vb[System.Linq.Enumerable#75](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1562">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1562">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectMany&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-1563">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1563">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, IEnumerable(Of TResult))) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Result&gt;&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1564">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1564">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-1565">所傳回的序列的項目類型<c>選取器</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1565">The type of the elements of the sequence returned by <c>selector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1566">A sequence of values to project.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1566">A sequence of values to project.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1567">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1567">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1568">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1568">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1569">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1569">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1570">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1570">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1571">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1571">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1572">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1572">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1573"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>方法列舉輸入的序列中，使用轉換函式對應至每個項目<xref:System.Collections.Generic.IEnumerable%601>，然後列舉，並產生每個這類元素<xref:System.Collections.Generic.IEnumerable%601>物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1573">The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object.</span></span> <span data-ttu-id="3b63e-1574">也就是說，每個項目`source`，`selector`叫用，而且會傳回值的序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1574">That is, for each element of `source`, `selector` is invoked and a sequence of values is returned.</span></span> <span data-ttu-id="3b63e-1575"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> 然後會壓平合併成一維集合的這個二維集合<xref:System.Collections.Generic.IEnumerable%601>並將它傳回。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1575"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it.</span></span> <span data-ttu-id="3b63e-1576">比方說，如果查詢使用<xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>取得訂單 (型別`Order`) 資料庫中每位客戶，則結果會是類型`IEnumerable<Order>`在 C# 或`IEnumerable(Of Order)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1576">For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in Visual Basic.</span></span> <span data-ttu-id="3b63e-1577">如果查詢改為使用<xref:System.Linq.Enumerable.Select%2A>若要取得的訂單，訂單的集合不合併，而結果屬於類型`IEnumerable<List<Order>>`在 C# 或`IEnumerable(Of List(Of Order))`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1577">If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1578">在查詢運算式語法中，每個`from`子句 (Visual C#) 或`From`初始的子句 (Visual Basic) 其中一個將轉譯的引動過程<xref:System.Linq.Enumerable.SelectMany%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1578">In query expression syntax, each `from` clause (Visual C#) or `From` clause (Visual Basic) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1579">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>對陣列進行反覆執行的一對多投影。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1579">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#77](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#77)]
 [!code-vb[System.Linq.Enumerable#77](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1580">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1580">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, IEnumerable(Of TResult))) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Result&gt;&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1581">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1581">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-1582">所傳回的序列的項目類型<c>選取器</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1582">The type of the elements of the sequence returned by <c>selector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1583">A sequence of values to project.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1583">A sequence of values to project.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1584">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1584">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1585">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, and flattens the resulting sequences into one sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1585">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, and flattens the resulting sequences into one sequence.</span>
          </span>
          <span data-ttu-id="3b63e-1586">The index of each source element is used in the projected form of that element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1586">The index of each source element is used in the projected form of that element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1587">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1587">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1588">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1588">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1589">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1589">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1590">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1590">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1591"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>方法列舉輸入的序列中，使用轉換函式對應至每個項目<xref:System.Collections.Generic.IEnumerable%601>，然後列舉，並產生每個這類元素<xref:System.Collections.Generic.IEnumerable%601>物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1591">The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object.</span></span> <span data-ttu-id="3b63e-1592">也就是說，每個項目`source`，`selector`叫用，而且會傳回值的序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1592">That is, for each element of `source`, `selector` is invoked and a sequence of values is returned.</span></span> <span data-ttu-id="3b63e-1593"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> 然後會壓平合併成一維集合的這個二維集合<xref:System.Collections.Generic.IEnumerable%601>並將它傳回。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1593"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it.</span></span> <span data-ttu-id="3b63e-1594">比方說，如果查詢使用<xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>取得訂單 (型別`Order`) 資料庫中每位客戶，則結果會是類型`IEnumerable<Order>`在 C# 或`IEnumerable(Of Order)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1594">For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in Visual Basic.</span></span> <span data-ttu-id="3b63e-1595">如果查詢改為使用<xref:System.Linq.Enumerable.Select%2A>若要取得的訂單，訂單的集合不合併，而結果屬於類型`IEnumerable<List<Order>>`在 C# 或`IEnumerable(Of List(Of Order))`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1595">If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1596">第一個引數`selector`代表要處理的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1596">The first argument to `selector` represents the element to process.</span></span> <span data-ttu-id="3b63e-1597">第二個引數`selector`表示來源序列中項目的以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1597">The second argument to `selector` represents the zero-based index of that element in the source sequence.</span></span> <span data-ttu-id="3b63e-1598">如果項目是以已知的順序排列，而且您想要運用特定的索引處的項目，例如，這可能會很有用。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1598">This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</span></span> <span data-ttu-id="3b63e-1599">可能也很有用如果您想要擷取的一或多個項目索引。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1599">It can also be useful if you want to retrieve the index of one or more elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1600">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>對陣列進行反覆執行的一對多投影，並使用每個外部項目的索引。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1600">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array and use the index of each outer element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#78](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#78)]
 [!code-vb[System.Linq.Enumerable#78](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1601">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1601">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1602">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1602">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TCollection">
          <span data-ttu-id="3b63e-1603">所收集的中繼項目類型<c>collectionSelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1603">The type of the intermediate elements collected by <c>collectionSelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-1604">結果序列的項目類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1604">The type of the elements of the resulting sequence.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1605">A sequence of values to project.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1605">A sequence of values to project.</span>
          </span>
        </param>
        <param name="collectionSelector">
          <span data-ttu-id="3b63e-1606">A transform function to apply to each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1606">A transform function to apply to each element of the input sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="3b63e-1607">A transform function to apply to each element of the intermediate sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1607">A transform function to apply to each element of the intermediate sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1608">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1608">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1609">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1609">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1610">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1610">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1611">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1611">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1612">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1612">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1613"><xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>方法時，您必須保留的項目`source`呼叫之後，就會發生的查詢邏輯的範圍內<xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1613">The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="3b63e-1614">如需程式碼範例，請參閱＜範例＞一節。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1614">See the Example section for a code example.</span></span> <span data-ttu-id="3b63e-1615">如果類型的物件之間沒有雙向關聯性`TSource`和類型的物件`TCollection`，也就是如果型別的物件`TCollection`提供屬性，以擷取`TSource`，產生的物件不需要這多載<xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1615">If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="3b63e-1616">相反地，您可以使用<xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>然後瀏覽回`TSource`物件透過`TCollection`物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1616">Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.</span></span>  
  
 <span data-ttu-id="3b63e-1617">在查詢運算式語法中，每個`from`子句 (Visual C#) 或`From`初始的子句 (Visual Basic) 其中一個將轉譯的引動過程<xref:System.Linq.Enumerable.SelectMany%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1617">In query expression syntax, each `from` clause (Visual C#) or `From` clause (Visual Basic) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1618">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>對陣列進行反覆執行的一對多投影，並使用結果選取器函式以防止來源序列的最後一個呼叫的範圍中的每個對應的項目`Select`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1618">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> to perform a one-to-many projection over an array and use a result selector function to keep each corresponding element from the source sequence in scope for the final call to `Select`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#124](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#124)]
 [!code-vb[System.Linq.Enumerable#124](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#124)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1619">
            <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1619">
              <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, Integer, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1620">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1620">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TCollection">
          <span data-ttu-id="3b63e-1621">所收集的中繼項目類型<c>collectionSelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1621">The type of the intermediate elements collected by <c>collectionSelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-1622">結果序列的項目類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1622">The type of the elements of the resulting sequence.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1623">A sequence of values to project.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1623">A sequence of values to project.</span>
          </span>
        </param>
        <param name="collectionSelector">
          <span data-ttu-id="3b63e-1624">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1624">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="3b63e-1625">A transform function to apply to each element of the intermediate sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1625">A transform function to apply to each element of the intermediate sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1626">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1626">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span>
          </span>
          <span data-ttu-id="3b63e-1627">The index of each source element is used in the intermediate projected form of that element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1627">The index of each source element is used in the intermediate projected form of that element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1628">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1628">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1629">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1629">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1630">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1630">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1631">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1631">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1632"><xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>方法時，您必須保留的項目`source`呼叫之後，就會發生的查詢邏輯的範圍內<xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1632">The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="3b63e-1633">如需程式碼範例，請參閱＜範例＞一節。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1633">See the Example section for a code example.</span></span> <span data-ttu-id="3b63e-1634">如果類型的物件之間沒有雙向關聯性`TSource`和類型的物件`TCollection`，也就是如果型別的物件`TCollection`提供屬性，以擷取`TSource`，產生的物件不需要這多載<xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1634">If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="3b63e-1635">相反地，您可以使用<xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>然後瀏覽回`TSource`物件透過`TCollection`物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1635">Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1636">
            <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1636">
              <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SequenceEqual&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-1637">Determines whether two sequences are equal according to an equality comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1637">Determines whether two sequences are equal according to an equality comparer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.SequenceEqual (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1638">輸入序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1638">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="3b63e-1639">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <c>second</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1639">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <c>second</c>.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="3b63e-1640">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1640">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1641">Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1641">Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1642">
            <see langword="true" /> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1642">
              <see langword="true" /> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1643"><xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法列舉以平行方式將兩個來源序列，並使用預設相等比較子來比較對應項目`TSource`， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1643">The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for `TSource`, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span></span> <span data-ttu-id="3b63e-1644">預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來比較值之型別的實作<xref:System.Collections.Generic.IEqualityComparer%601>泛型介面。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1644">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="3b63e-1645">若要比較的自訂資料類型，您需要實作這個介面，並提供您自己<xref:System.Object.GetHashCode%2A>和<xref:System.Object.Equals%2A>類型的方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1645">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1646">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>來判斷兩個序列是否相等。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1646">The following code examples demonstrate how to use <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine whether two sequences are equal.</span></span> <span data-ttu-id="3b63e-1647">在前兩個範例中，此方法會判斷比較的序列是否包含相同物件的參考。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1647">In the first two examples, the method determines whether the compared sequences contain references to the same objects.</span></span> <span data-ttu-id="3b63e-1648">在第三個和第四個範例中，此方法會比較實際的資料序列中的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1648">In the third and fourth examples, the method compares the actual data of the objects within the sequences.</span></span>  
  
 <span data-ttu-id="3b63e-1649">在此範例中的序列相等。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1649">In this example the sequences are equal.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#32)]
 [!code-vb[System.Linq.Enumerable#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#32)]  
  
 <span data-ttu-id="3b63e-1650">下列程式碼範例會比較兩個不相等的序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1650">The following code example compares two sequences that are not equal.</span></span> <span data-ttu-id="3b63e-1651">請注意，序列包含相同的資料，因為它們包含的物件具有不同的參考，則不考慮其序列相等。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1651">Note that the sequences contain identical data, but because the objects that they contain have different references, the sequences are not considered equal.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#33)]
 [!code-vb[System.Linq.Enumerable#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#33)]  
  
 <span data-ttu-id="3b63e-1652">如果您想要比較的物件，而不是只要比較其參考此序列中實際資料，您必須實作<xref:System.Collections.Generic.IEqualityComparer%601>您類別中的泛型介面。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1652">If you want to compare the actual data of the objects in the sequences instead of just comparing their references, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in your class.</span></span> <span data-ttu-id="3b63e-1653">下列程式碼範例示範如何實作這個介面中的協助程式類別，並提供<xref:System.Object.GetHashCode%2A>和<xref:System.Object.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1653">The following code example shows how to implement this interface in a helper class and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="3b63e-1654">實作這個介面之後，您可以使用的序列`ProductA`中的物件<xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1654">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#8)]
 [!code-vb[CSLINQEncapsulatedComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1655">
            <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1655">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.SequenceEqual (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1656">輸入序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1656">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="3b63e-1657">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <c>second</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1657">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <c>second</c>.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="3b63e-1658">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1658">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-1659">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1659">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1660">Determines whether two sequences are equal by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1660">Determines whether two sequences are equal by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1661">
            <see langword="true" /> if the two source sequences are of equal length and their corresponding elements compare equal according to <paramref name="comparer" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1661">
              <see langword="true" /> if the two source sequences are of equal length and their corresponding elements compare equal according to <paramref name="comparer" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1662"><xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>方法列舉以平行方式將兩個來源序列，並使用指定的比較對應項目<xref:System.Collections.Generic.IEqualityComparer%601>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1662">The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <xref:System.Collections.Generic.IEqualityComparer%601>.</span></span> <span data-ttu-id="3b63e-1663">如果 c`omparer`是`null`的預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來比較項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1663">If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1664">下列範例示範如何實作可用於相等比較子<xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1664">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="3b63e-1665">這個比較子實作之後，您可以使用的序列`Product`中的物件<xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1665">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#8)]
 [!code-vb[CSLINQCustomComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1666">
            <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1666">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Single&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-1667">Returns a single, specific element of a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1667">Returns a single, specific element of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Single : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Single source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1668">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1668">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1669">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1669">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1670">Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1670">Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1671">The single element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1671">The single element of the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1672"><xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法擲回例外狀況，如果輸入的序列是空的。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1672">The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if the input sequence is empty.</span></span> <span data-ttu-id="3b63e-1673">若要改為傳回`null`當輸入的序列是空的使用<xref:System.Linq.Enumerable.SingleOrDefault%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1673">To instead return `null` when the input sequence is empty, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1674">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>選取陣列中的唯一項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1674">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#79](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#79)]
 [!code-vb[System.Linq.Enumerable#79](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#79)]  
  
 <span data-ttu-id="3b63e-1675">下列程式碼範例會示範<xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>序列不包含剛好只有一個項目時，會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1675">The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> throws an exception when the sequence does not contain exactly one element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#80](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#80)]
 [!code-vb[System.Linq.Enumerable#80](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1676">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1676">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1677">The input sequence contains more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1677">The input sequence contains more than one element.</span>
          </span>
          <span data-ttu-id="3b63e-1678">-or-  The input sequence is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1678">-or-  The input sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Single : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Single (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1679">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1679">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1680">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1680">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-1681">A function to test an element for a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1681">A function to test an element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1682">Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1682">Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1683">The single element of the input sequence that satisfies a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1683">The single element of the input sequence that satisfies a condition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1684"><xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>方法擲回例外狀況，如果輸入的序列包含沒有相符項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1684">The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if the input sequence contains no matching element.</span></span> <span data-ttu-id="3b63e-1685">若要改為傳回`null`找到相符的項目時，使用<xref:System.Linq.Enumerable.SingleOrDefault%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1685">To instead return `null` when no matching element is found, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1686">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>選取唯一的項目滿足條件的陣列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1686">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#81](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#81)]
 [!code-vb[System.Linq.Enumerable#81](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#81)]  
  
 <span data-ttu-id="3b63e-1687">下列程式碼範例會示範<xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>序列不包含剛好一個滿足條件的項目時，會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1687">The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> throws an exception when the sequence does not contain exactly one element that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#82](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#82)]
 [!code-vb[System.Linq.Enumerable#82](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1688">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1688">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1689">No element satisfies the condition in <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1689">No element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="3b63e-1690">-or-  More than one element satisfies the condition in <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1690">-or-  More than one element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="3b63e-1691">-or-  The source sequence is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1691">-or-  The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SingleOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-1692">Returns a single, specific element of a sequence, or a default value if that element is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1692">Returns a single, specific element of a sequence, or a default value if that element is not found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.SingleOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1693">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1693">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1694">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1694">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1695">Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1695">Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1696">The single element of the input sequence, or <see langword="default" />(<paramref name="TSource" />) if the sequence contains no elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1696">The single element of the input sequence, or <see langword="default" />(<paramref name="TSource" />) if the sequence contains no elements.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1697">參考資料和可為 null 類型的預設值是`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1697">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1698"><xref:System.Linq.Enumerable.SingleOrDefault%2A>方法不會提供方法來指定預設值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1698">The <xref:System.Linq.Enumerable.SingleOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="3b63e-1699">如果您想要指定預設值以外`default(TSource)`，使用<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>範例 > 一節中所述的方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1699">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1700">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>選取陣列中的唯一項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1700">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#83](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#83)]
 [!code-vb[System.Linq.Enumerable#83](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#83)]  
  
 <span data-ttu-id="3b63e-1701">下列程式碼範例會示範<xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>序列不包含剛好只有一個項目時，傳回預設值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1701">The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> returns a default value when the sequence does not contain exactly one element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#84](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#84)]
 [!code-vb[System.Linq.Enumerable#84](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#84)]  
  
 <span data-ttu-id="3b63e-1702">有時候值`default(TSource)`不是您想要使用如果集合不包含任何元素的預設值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1702">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="3b63e-1703">不檢查不必要的預設值的結果，並再將它如有必要變更，您可以改用<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>方法，以指定您想要使用這個集合是空的預設值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1703">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="3b63e-1704">然後，呼叫<xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>若要取得的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1704">Then, call <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the element.</span></span> <span data-ttu-id="3b63e-1705">下列程式碼範例會使用這兩種技術以取得預設值是 1，如果是空的頁面數字集合。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1705">The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty.</span></span> <span data-ttu-id="3b63e-1706">因為整數的預設值為 0，但通常並不正確的頁碼，預設值必須被指定為 1。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1706">Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="3b63e-1707">查詢完成執行後不想要的預設值會檢查第一個結果變數。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1707">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="3b63e-1708">第二個結果變數透過使用<xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29>來指定預設值是 1。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1708">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#128](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#128)]
 [!code-vb[System.Linq.Enumerable#128](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#128)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1709">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1709">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1710">The input sequence contains more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1710">The input sequence contains more than one element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.SingleOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1711">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1711">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1712">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1712">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-1713">A function to test an element for a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1713">A function to test an element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1714">Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1714">Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1715">The single element of the input sequence that satisfies the condition, or <see langword="default" />(<paramref name="TSource" />) if no such element is found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1715">The single element of the input sequence that satisfies the condition, or <see langword="default" />(<paramref name="TSource" />) if no such element is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1716">參考資料和可為 null 類型的預設值是`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1716">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1717">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>選取唯一的項目滿足條件的陣列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1717">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#85](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#85)]
 [!code-vb[System.Linq.Enumerable#85](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#85)]  
  
 <span data-ttu-id="3b63e-1718">下列程式碼範例會示範<xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>序列不包含剛好只有一個項目符合條件時傳回預設值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1718">The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#86](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#86)]
 [!code-vb[System.Linq.Enumerable#86](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1719">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1719">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3b63e-1720">More than one element satisfies the condition in <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1720">More than one element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Skip&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Skip(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Skip : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Skip (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1721">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1721">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1722">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1722">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3b63e-1723">The number of elements to skip before returning the remaining elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1723">The number of elements to skip before returning the remaining elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1724">Bypasses a specified number of elements in a sequence and then returns the remaining elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1724">Bypasses a specified number of elements in a sequence and then returns the remaining elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1725">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1725">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1726">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1726">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1727">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1727">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1728">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1728">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1729">如果`source`包含少於`count`項目、 空白<xref:System.Collections.Generic.IEnumerable%601>傳回。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1729">If `source` contains fewer than `count` elements, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span> <span data-ttu-id="3b63e-1730">如果`count`小於或等於零的所有項目`source`來產生。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1730">If `count` is less than or equal to zero, all elements of `source` are yielded.</span></span>  
  
 <span data-ttu-id="3b63e-1731"><xref:System.Linq.Enumerable.Take%2A>和<xref:System.Linq.Enumerable.Skip%2A>方法都是功能的補充。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1731">The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements.</span></span> <span data-ttu-id="3b63e-1732">指定序列`coll`和整數`n`，串連的結果`coll.Take(n)`和`coll.Skip(n)`會產生相同的順序為`coll`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1732">Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="3b63e-1733">Visual Basic 查詢運算式語法，`Skip`子句的引動過程轉譯<xref:System.Linq.Enumerable.Skip%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1733">In Visual Basic query expression syntax, a `Skip` clause translates to an invocation of <xref:System.Linq.Enumerable.Skip%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1734">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Skip%2A>來略過指定的已排序陣列中的項目數，並傳回其餘項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1734">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Skip%2A> to skip a specified number of elements in a sorted array and return the remaining elements.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#87](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#87)]
 [!code-vb[System.Linq.Enumerable#87](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1735">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1735">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SkipLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipLast&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipLast(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipLast(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member SkipLast : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SkipWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-1736">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1736">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1737">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1737">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1738">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1738">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-1739">A function to test each element for a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1739">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1740">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1740">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1741">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1741">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1742"><xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>方法使用延後的執行來實作。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1742">The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1743">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1743">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1744">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1744">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1745">這個方法會測試每個項目`source`使用`predicate`並略過的項目，如果結果為`true`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1745">This method tests each element of `source` by using `predicate` and skips the element if the result is `true`.</span></span> <span data-ttu-id="3b63e-1746">述詞函式傳回之後`false`的項目，該項目並在其餘的項目`source`因為都產生的任何多個引動過程而`predicate`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1746">After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.</span></span>  
  
 <span data-ttu-id="3b63e-1747">如果`predicate`傳回`true`空序列中的所有項目的<xref:System.Collections.Generic.IEnumerable%601>傳回。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1747">If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="3b63e-1748"><xref:System.Linq.Enumerable.TakeWhile%2A>和<xref:System.Linq.Enumerable.SkipWhile%2A>方法都是功能的補充。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1748">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="3b63e-1749">指定序列`coll`純虛擬函式和`p`，串連的結果`coll.TakeWhile(p)`和`coll.SkipWhile(p)`會產生相同的順序為`coll`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1749">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="3b63e-1750">Visual Basic 查詢運算式語法，`Skip While`子句的引動過程轉譯<xref:System.Linq.Enumerable.SkipWhile%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1750">In Visual Basic query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1751">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>條件為 true 時，略過的陣列項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1751">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#88](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#88)]
 [!code-vb[System.Linq.Enumerable#88](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1752">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1752">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1753">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1753">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1754">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1754">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-1755">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1755">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1756">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1756">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          </span>
          <span data-ttu-id="3b63e-1757">The element's index is used in the logic of the predicate function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1757">The element's index is used in the logic of the predicate function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1758">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1758">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1759">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1759">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1760">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1760">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1761">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1761">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1762"><xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29>方法會測試每個項目`source`使用`predicate`並略過的項目，如果結果為`true`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1762">The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and skips the element if the result is `true`.</span></span> <span data-ttu-id="3b63e-1763">述詞函式傳回之後`false`的項目，該項目並在其餘的項目`source`因為都產生的任何多個引動過程而`predicate`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1763">After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.</span></span>  
  
 <span data-ttu-id="3b63e-1764">如果`predicate`傳回`true`空序列中的所有項目的<xref:System.Collections.Generic.IEnumerable%601>傳回。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1764">If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="3b63e-1765">第一個引數`predicate`表示若要測試的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1765">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="3b63e-1766">第二個引數代表內元素的以零為起始的索引`source`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1766">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
 <span data-ttu-id="3b63e-1767"><xref:System.Linq.Enumerable.TakeWhile%2A>和<xref:System.Linq.Enumerable.SkipWhile%2A>方法都是功能的補充。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1767">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="3b63e-1768">指定序列`coll`純虛擬函式和`p`，串連的結果`coll.TakeWhile(p)`和`coll.SkipWhile(p)`會產生相同的順序為`coll`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1768">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="3b63e-1769">Visual Basic 查詢運算式語法，`Skip While`子句的引動過程轉譯<xref:System.Linq.Enumerable.SkipWhile%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1769">In Visual Basic query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1770">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29>取決於項目的索引條件為 true 時，略過的陣列項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1770">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition that depends on the element's index is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#89](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#89)]
 [!code-vb[System.Linq.Enumerable#89](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1771">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1771">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sum">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-1772">Computes the sum of a sequence of numeric values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1772">Computes the sum of a sequence of numeric values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static decimal Sum (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1773">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1773">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1774">Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1774">Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1775">The sum of the values in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1775">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1776"><xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29>方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1776">The <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1777">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1777">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1778">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>加總序列的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1778">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1779">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1779">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-1780">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1780">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static double Sum (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1781">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1781">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1782">Computes the sum of a sequence of <see cref="T:System.Double" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1782">Computes the sum of a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1783">The sum of the values in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1783">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1784">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1784">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1785">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1785">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1786">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>加總序列的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1786">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1787">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1787">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static int Sum (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1788">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1788">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1789">Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1789">Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1790">The sum of the values in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1790">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1791">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1791">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1792">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1792">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1793">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>加總序列的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1793">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1794">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1794">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-1795">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1795">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static long Sum (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1796">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1796">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1797">Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1797">Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1798">The sum of the values in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1798">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1799">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1799">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1800">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1800">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1801">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>加總序列的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1801">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1802">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1802">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-1803">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1803">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1804">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1804">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1805">Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1805">Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1806">The sum of the values in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1806">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1807">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1807">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1808">結果不包含值的`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1808">The result doesnot include values that are `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1809">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1809">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1810">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>加總序列的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1810">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1811">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1811">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-1812">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1812">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1813">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1813">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1814">Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1814">Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1815">The sum of the values in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1815">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1816">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1816">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1817">結果不包含值的`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1817">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1818">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1818">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1819">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>加總序列的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1819">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1820">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1820">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1821">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1821">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1822">Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1822">Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1823">The sum of the values in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1823">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1824">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1824">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1825">結果不包含值的`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1825">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1826">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1826">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1827">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>加總序列的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1827">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1828">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1828">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-1829">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1829">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1830">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1830">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1831">Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1831">Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1832">The sum of the values in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1832">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1833">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1833">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1834">結果不包含值的`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1834">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1835">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1835">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1836">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>加總序列的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1836">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1837">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1837">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-1838">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1838">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1839">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1839">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1840">Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1840">Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1841">The sum of the values in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1841">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1842">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1842">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1843">結果不包含值的`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1843">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1844">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1844">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1845">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29>加總序列的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1845">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1846">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1846">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static float Sum (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="3b63e-1847">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1847">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1848">Computes the sum of a sequence of <see cref="T:System.Single" /> values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1848">Computes the sum of a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1849">The sum of the values in the sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1849">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1850">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1850">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1851">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1851">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1852">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29>加總序列的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1852">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1853">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1853">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1854">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1854">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1855">A sequence of values that are used to calculate a sum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1855">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1856">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1856">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1857">Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1857">Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1858">The sum of the projected values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1858">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1859">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1859">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1860">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Decimal>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1860">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="3b63e-1861">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1861">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1862">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>加總序列的預測的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1862">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1863">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1863">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-1864">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1864">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1865">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1865">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1866">A sequence of values that are used to calculate a sum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1866">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1867">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1867">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1868">Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1868">Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1869">The sum of the projected values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1869">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1870">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1870">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1871">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Double>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1871">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="3b63e-1872">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1872">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1873">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>加總序列的預測的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1873">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1874">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1874">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1875">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1875">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1876">A sequence of values that are used to calculate a sum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1876">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1877">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1877">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1878">Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1878">Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1879">The sum of the projected values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1879">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1880">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1880">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1881">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1881">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="3b63e-1882">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1882">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1883">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>加總序列的預測的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1883">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1884">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1884">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-1885">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1885">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1886">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1886">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1887">A sequence of values that are used to calculate a sum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1887">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1888">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1888">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1889">Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1889">Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1890">The sum of the projected values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1890">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1891">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1891">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1892">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Int64>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1892">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="3b63e-1893">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1893">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1894">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>加總序列的預測的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1894">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1895">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1895">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-1896">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1896">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1897">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1897">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1898">A sequence of values that are used to calculate a sum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1898">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1899">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1899">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1900">Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1900">Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1901">The sum of the projected values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1901">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1902">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1902">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1903">結果並不包含值`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1903">The result does not included values that are `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1904">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值類型，特別是`Nullable<Decimal>`在 C# 或`Nullable(Of Decimal)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1904">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1905">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1905">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1906">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>加總序列的預測的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1906">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1907">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1907">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-1908">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1908">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1909">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1909">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1910">A sequence of values that are used to calculate a sum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1910">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1911">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1911">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1912">Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1912">Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1913">The sum of the projected values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1913">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1914">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1914">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1915">結果不包含值的`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1915">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1916">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值類型，特別是`Nullable<Double>`在 C# 或`Nullable(Of Double)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1916">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1917">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1917">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1918">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>加總序列的預測的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1918">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1919">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1919">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1920">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1920">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1921">A sequence of values that are used to calculate a sum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1921">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1922">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1922">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1923">Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1923">Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1924">The sum of the projected values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1924">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1925">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1925">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1926">結果不包含值的`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1926">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1927">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值類型，特別是`Nullable<Int32>`在 C# 或`Nullable(Of Int32)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1927">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1928">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1928">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1929">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>加總序列的預測的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1929">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1930">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1930">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-1931">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1931">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1932">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1932">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1933">A sequence of values that are used to calculate a sum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1933">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1934">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1934">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1935">Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1935">Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1936">The sum of the projected values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1936">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1937">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1937">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1938">結果不包含值的`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1938">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1939">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值類型，特別是`Nullable<Int64>`在 C# 或`Nullable(Of Int64)`在 Visual Basic 中</span><span class="sxs-lookup"><span data-stu-id="3b63e-1939">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic</span></span>  
  
 <span data-ttu-id="3b63e-1940">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1940">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1941">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>加總序列的預測的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1941">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1942">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1942">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3b63e-1943">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1943">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1944">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1944">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1945">A sequence of values that are used to calculate a sum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1945">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1946">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1946">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1947">Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1947">Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1948">The sum of the projected values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1948">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1949">這個方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1949">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1950">結果不包含值的`null`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1950">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="3b63e-1951">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值類型，特別是`Nullable<Single>`在 C# 或`Nullable(Of Single)`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1951">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1952">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1952">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1953">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>加總序列的預測的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1953">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1954">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1954">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1955">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1955">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1956">A sequence of values that are used to calculate a sum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1956">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="3b63e-1957">A transform function to apply to each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1957">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1958">Computes the sum of the sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1958">Computes the sum of the sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1959">The sum of the projected values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1959">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1960"><xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29>方法會傳回零如果`source`沒有包含任何元素。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1960">The <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="3b63e-1961">您可以套用這個方法為任意值的序列，如果您提供的函數， `selector`，之專案的成員`source`成數值的型別，特別是<xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1961">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="3b63e-1962">Visual Basic 查詢運算式語法，`Aggregate Into Sum()`子句的引動過程轉譯<xref:System.Linq.Enumerable.Sum%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1962">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1963">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29>加總序列的預測的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1963">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1964">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1964">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Take&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Take(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Take : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Take (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1965">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1965">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1966">The sequence to return elements from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1966">The sequence to return elements from.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3b63e-1967">The number of elements to return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1967">The number of elements to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1968">Returns a specified number of contiguous elements from the start of a sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1968">Returns a specified number of contiguous elements from the start of a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1969">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of elements from the start of the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1969">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of elements from the start of the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1970">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1970">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1971">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1971">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1972">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1972">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1973"><xref:System.Linq.Enumerable.Take%2A> 列舉`source`並產生項目，直到`count`已產生的項目或`source`未包含多個項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1973"><xref:System.Linq.Enumerable.Take%2A> enumerates `source` and yields elements until `count` elements have been yielded or `source` contains no more elements.</span></span> <span data-ttu-id="3b63e-1974">如果`count`超過中的項目數`source`的所有項目`source`會傳回。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1974">If `count` exceeds the number of elements in `source`, all elements of `source` are returned.</span></span>  
  
 <span data-ttu-id="3b63e-1975">如果`count`小於或等於零，`source`不是列舉，空的<xref:System.Collections.Generic.IEnumerable%601>傳回。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1975">If `count` is less than or equal to zero, `source` is not enumerated and an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="3b63e-1976"><xref:System.Linq.Enumerable.Take%2A>和<xref:System.Linq.Enumerable.Skip%2A>方法都是功能的補充。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1976">The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements.</span></span> <span data-ttu-id="3b63e-1977">指定序列`coll`和整數`n`，串連的結果`coll.Take(n)`和`coll.Skip(n)`會產生相同的順序為`coll`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1977">Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="3b63e-1978">Visual Basic 查詢運算式語法，`Take`子句的引動過程轉譯<xref:System.Linq.Enumerable.Take%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1978">In Visual Basic query expression syntax, a `Take` clause translates to an invocation of <xref:System.Linq.Enumerable.Take%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1979">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Take%2A>從序列開頭傳回項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1979">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Take%2A> to return elements from the start of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#99](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#99)]
 [!code-vb[System.Linq.Enumerable#99](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1980">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1980">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TakeLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeLast&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeLast(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeLast(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member TakeLast : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TakeWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-1981">Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1981">Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1982">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1982">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1983">A sequence to return elements from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1983">A sequence to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-1984">A function to test each element for a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1984">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-1985">Returns elements from a sequence as long as a specified condition is true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1985">Returns elements from a sequence as long as a specified condition is true.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-1986">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1986">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-1987">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1987">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-1988">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1988">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-1989">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1989">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-1990"><xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>方法會測試每個項目`source`使用`predicate`並產生項目，如果結果為`true`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1990">The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`.</span></span> <span data-ttu-id="3b63e-1991">述詞函式傳回時，就會停止列舉`false`的項目或當`source`未包含多個項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1991">Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.</span></span>  
  
 <span data-ttu-id="3b63e-1992"><xref:System.Linq.Enumerable.TakeWhile%2A>和<xref:System.Linq.Enumerable.SkipWhile%2A>方法都是功能的補充。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1992">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="3b63e-1993">指定序列`coll`純虛擬函式和`p`，串連的結果`coll.TakeWhile(p)`和`coll.SkipWhile(p)`會產生相同的順序為`coll`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1993">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="3b63e-1994">Visual Basic 查詢運算式語法，`Take While`子句的引動過程轉譯<xref:System.Linq.Enumerable.TakeWhile%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1994">In Visual Basic query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-1995">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>條件為 true 時，從序列開頭傳回項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-1995">The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#100](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#100)]
 [!code-vb[System.Linq.Enumerable#100](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-1996">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1996">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-1997">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1997">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-1998">The sequence to return elements from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1998">The sequence to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-1999">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-1999">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2000">Returns elements from a sequence as long as a specified condition is true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2000">Returns elements from a sequence as long as a specified condition is true.</span>
          </span>
          <span data-ttu-id="3b63e-2001">The element's index is used in the logic of the predicate function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2001">The element's index is used in the logic of the predicate function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2002">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that occur before the element at which the test no longer passes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2002">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that occur before the element at which the test no longer passes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2003">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2003">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-2004">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2004">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-2005">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2005">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-2006"><xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29>方法會測試每個項目`source`使用`predicate`並產生項目，如果結果為`true`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2006">The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`.</span></span> <span data-ttu-id="3b63e-2007">述詞函式傳回時，就會停止列舉`false`的項目或當`source`未包含多個項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2007">Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.</span></span>  
  
 <span data-ttu-id="3b63e-2008">第一個引數`predicate`表示若要測試的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2008">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="3b63e-2009">第二個引數代表內元素的以零為起始的索引`source`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2009">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
 <span data-ttu-id="3b63e-2010"><xref:System.Linq.Enumerable.TakeWhile%2A>和<xref:System.Linq.Enumerable.SkipWhile%2A>方法都是功能的補充。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2010">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="3b63e-2011">指定序列`coll`純虛擬函式和`p`，串連的結果`coll.TakeWhile(p)`和`coll.SkipWhile(p)`會產生相同的順序為`coll`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2011">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="3b63e-2012">Visual Basic 查詢運算式語法，`Take While`子句的引動過程轉譯<xref:System.Linq.Enumerable.TakeWhile%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2012">In Visual Basic query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-2013">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29>，只要使用的項目索引的條件為 true，從序列開頭傳回項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2013">The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition that uses the element's index is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#101](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#101)]
 [!code-vb[System.Linq.Enumerable#101](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2014">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2014">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-2015">Performs a subsequent ordering of the elements in a sequence in ascending order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2015">Performs a subsequent ordering of the elements in a sequence in ascending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2016">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2016">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-2017">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2017">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2018">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2018">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-2019">A function to extract a key from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2019">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2020">Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2020">Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2021">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2021">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2022">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2022">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-2023">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2023">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-2024">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2024">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-2025">若要排序序列的項目本身的值，指定 identity 函數 (`x => x` Visual C# 中或`Function(x) x`在 Visual Basic 中) 的`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2025">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="3b63e-2026"><xref:System.Linq.Enumerable.ThenBy%2A> 和<xref:System.Linq.Enumerable.ThenByDescending%2A>定義為延伸類型<xref:System.Linq.IOrderedEnumerable%601>，這也是一種方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2026"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="3b63e-2027">此設計可讓您藉由套用任意數目的指定多個排序條件<xref:System.Linq.Enumerable.ThenBy%2A>或<xref:System.Linq.Enumerable.ThenByDescending%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2027">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-2028">因為<xref:System.Linq.IOrderedEnumerable%601>繼承自<xref:System.Collections.Generic.IEnumerable%601>，您可以呼叫<xref:System.Linq.Enumerable.OrderBy%2A>或<xref:System.Linq.Enumerable.OrderByDescending%2A>呼叫的結果<xref:System.Linq.Enumerable.OrderBy%2A>， <xref:System.Linq.Enumerable.OrderByDescending%2A>，<xref:System.Linq.Enumerable.ThenBy%2A>或<xref:System.Linq.Enumerable.ThenByDescending%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2028">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="3b63e-2029">如此一來，引進了新的主要排序略過先前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2029">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="3b63e-2030">這個方法會使用預設比較子來比較索引鍵<xref:System.Collections.Generic.Comparer%601.Default%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2030">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="3b63e-2031">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2031">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="3b63e-2032">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2032">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="3b63e-2033">查詢運算式語法， `orderby [first criterion], [second criterion]` (Visual C#) 或`Order By [first criterion], [second criterion]`(Visual Basic) 子句的引動過程轉譯<xref:System.Linq.Enumerable.ThenBy%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2033">In query expression syntax, an `orderby [first criterion], [second criterion]` (Visual C#) or `Order By [first criterion], [second criterion]` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.ThenBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-2034">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>執行次要排序序列中的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2034">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to perform a secondary ordering of the elements in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#102](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#102)]
 [!code-vb[System.Linq.Enumerable#102](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2035">
            <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2035">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2036">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2036">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-2037">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2037">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2038">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2038">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-2039">A function to extract a key from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2039">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-2040">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2040">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2041">Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2041">Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2042">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2042">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2043">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2043">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-2044">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2044">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-2045">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2045">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-2046">若要排序序列的項目本身的值，指定 identity 函數 (`x => x` Visual C# 中或`Function(x) x`在 Visual Basic 中) 的`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2046">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="3b63e-2047"><xref:System.Linq.Enumerable.ThenBy%2A> 和<xref:System.Linq.Enumerable.ThenByDescending%2A>定義為延伸類型<xref:System.Linq.IOrderedEnumerable%601>，這也是一種方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2047"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="3b63e-2048">此設計可讓您藉由套用任意數目的指定多個排序條件<xref:System.Linq.Enumerable.ThenBy%2A>或<xref:System.Linq.Enumerable.ThenByDescending%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2048">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-2049">因為<xref:System.Linq.IOrderedEnumerable%601>繼承自<xref:System.Collections.Generic.IEnumerable%601>，您可以呼叫<xref:System.Linq.Enumerable.OrderBy%2A>或<xref:System.Linq.Enumerable.OrderByDescending%2A>呼叫的結果<xref:System.Linq.Enumerable.OrderBy%2A>， <xref:System.Linq.Enumerable.OrderByDescending%2A>，<xref:System.Linq.Enumerable.ThenBy%2A>或<xref:System.Linq.Enumerable.ThenByDescending%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2049">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="3b63e-2050">如此一來，引進了新的主要排序略過先前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2050">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="3b63e-2051">如果`comparer`是`null`，預設的比較子<xref:System.Collections.Generic.Comparer%601.Default%2A>用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2051">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="3b63e-2052">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2052">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="3b63e-2053">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2053">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2054">
            <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2054">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-2055">Performs a subsequent ordering of the elements in a sequence in descending order.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2055">Performs a subsequent ordering of the elements in a sequence in descending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2056">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2056">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-2057">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2057">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2058">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2058">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-2059">A function to extract a key from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2059">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2060">Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2060">Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2061">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2061">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2062">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2062">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-2063">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2063">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-2064">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2064">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-2065">若要排序序列的項目本身的值，指定 identity 函數 (`x => x` Visual C# 中或`Function(x) x`在 Visual Basic 中) 的`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2065">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="3b63e-2066"><xref:System.Linq.Enumerable.ThenBy%2A> 和<xref:System.Linq.Enumerable.ThenByDescending%2A>定義為延伸類型<xref:System.Linq.IOrderedEnumerable%601>，這也是一種方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2066"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="3b63e-2067">此設計可讓您藉由套用任意數目的指定多個排序條件<xref:System.Linq.Enumerable.ThenBy%2A>或<xref:System.Linq.Enumerable.ThenByDescending%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2067">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-2068">因為<xref:System.Linq.IOrderedEnumerable%601>繼承自<xref:System.Collections.Generic.IEnumerable%601>，您可以呼叫<xref:System.Linq.Enumerable.OrderBy%2A>或<xref:System.Linq.Enumerable.OrderByDescending%2A>呼叫的結果<xref:System.Linq.Enumerable.OrderBy%2A>， <xref:System.Linq.Enumerable.OrderByDescending%2A>，<xref:System.Linq.Enumerable.ThenBy%2A>或<xref:System.Linq.Enumerable.ThenByDescending%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2068">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="3b63e-2069">如此一來，引進了新的主要排序略過先前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2069">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="3b63e-2070">此排序方法會使用預設比較子來比較索引鍵<xref:System.Collections.Generic.Comparer%601.Default%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2070">This sorting method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="3b63e-2071">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2071">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="3b63e-2072">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2072">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="3b63e-2073">Visual C# 查詢運算式語法，`orderby [first criterion], [second criterion] descending`子句的引動過程轉譯<xref:System.Linq.Enumerable.ThenByDescending%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2073">In Visual C# query expression syntax, an `orderby [first criterion], [second criterion] descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span>  
  
 <span data-ttu-id="3b63e-2074">Visual Basic 查詢運算式語法，`Order By [first criterion], [second criterion] Descending`子句的引動過程轉譯<xref:System.Linq.Enumerable.ThenByDescending%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2074">In Visual Basic query expression syntax, an `Order By [first criterion], [second criterion] Descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2075">
            <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2075">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2076">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2076">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-2077">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2077">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2078">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2078">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-2079">A function to extract a key from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2079">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-2080">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2080">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2081">Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2081">Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2082">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2082">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2083">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2083">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-2084">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2084">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-2085">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2085">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-2086">若要排序序列的項目本身的值，指定 identity 函數 (`x => x` Visual C# 中或`Function(x) x`在 Visual Basic 中) 的`keySelector`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2086">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="3b63e-2087"><xref:System.Linq.Enumerable.ThenBy%2A> 和<xref:System.Linq.Enumerable.ThenByDescending%2A>定義為延伸類型<xref:System.Linq.IOrderedEnumerable%601>，這也是一種方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2087"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="3b63e-2088">此設計可讓您藉由套用任意數目的指定多個排序條件<xref:System.Linq.Enumerable.ThenBy%2A>或<xref:System.Linq.Enumerable.ThenByDescending%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2088">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3b63e-2089">因為<xref:System.Linq.IOrderedEnumerable%601>繼承自<xref:System.Collections.Generic.IEnumerable%601>，您可以呼叫<xref:System.Linq.Enumerable.OrderBy%2A>或<xref:System.Linq.Enumerable.OrderByDescending%2A>呼叫的結果<xref:System.Linq.Enumerable.OrderBy%2A>， <xref:System.Linq.Enumerable.OrderByDescending%2A>，<xref:System.Linq.Enumerable.ThenBy%2A>或<xref:System.Linq.Enumerable.ThenByDescending%2A>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2089">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="3b63e-2090">如此一來，引進了新的主要排序略過先前建立的排序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2090">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="3b63e-2091">如果`comparer`是`null`，預設的比較子<xref:System.Collections.Generic.Comparer%601.Default%2A>用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2091">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="3b63e-2092">這個方法會執行穩定的排序。也就是說，如果兩個項目索引鍵相等，會保留項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2092">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="3b63e-2093">相反地，不穩定的排序不會保留具有相同索引鍵的項目的順序。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2093">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-2094">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>執行次要排序序列中使用自訂比較子，依遞減順序中的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2094">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#103](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#103)]
 [!code-vb[System.Linq.Enumerable#103](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2095">
            <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2095">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource[] ToArray&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource[] ToArray&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToArray(Of TSource) (source As IEnumerable(Of TSource)) As TSource()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static cli::array &lt;TSource&gt; ^ ToArray(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToArray : seq&lt;'Source&gt; -&gt; 'Source[]" Usage="System.Linq.Enumerable.ToArray source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2096">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2096">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2097">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create an array from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2097">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create an array from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2098">Creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2098">Creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2099">An array that contains the elements from the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2099">An array that contains the elements from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2100"><xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法強制立即查詢評估，並傳回陣列，其中包含查詢結果。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2100">The <xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns an array that contains the query results.</span></span> <span data-ttu-id="3b63e-2101">為了取得快取的查詢結果的複本，您可以將這個方法附加至查詢。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2101">You can append this method to your query in order to obtain a cached copy of the query results.</span></span>  
  
 <span data-ttu-id="3b63e-2102"><xref:System.Linq.Enumerable.ToList%2A> 具有類似的行為，但傳回<xref:System.Collections.Generic.List%601>而非陣列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2102"><xref:System.Linq.Enumerable.ToList%2A> has similar behavior but returns a <xref:System.Collections.Generic.List%601> instead of an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-2103">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.ToArray%2A>來強制立即查詢評估並傳回結果的陣列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2103">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToArray%2A> to force immediate query evaluation and return an array of results.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#104](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#104)]
 [!code-vb[System.Linq.Enumerable#104](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2104">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2104">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-2105">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2105">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As Dictionary(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TSource&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2106">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2106">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-2107">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2107">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2108">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2108">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-2109">A function to extract a key from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2109">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2110">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2110">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2111">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2111">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2112"><xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>方法會使用預設相等比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>以比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2112">The <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-2113">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>建立<xref:System.Collections.Generic.Dictionary%602>使用索引鍵選取器。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2113">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to create a <xref:System.Collections.Generic.Dictionary%602> by using a key selector.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#105](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#105)]
 [!code-vb[System.Linq.Enumerable#105](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2114">
            <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2114">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="3b63e-2115">-or-  <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2115">-or-  <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3b63e-2116">
            <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2116">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TSource&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2117">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2117">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-2118">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2118">The type of the keys returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2119">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2119">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-2120">A function to extract a key from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2120">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-2121">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2121">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2122">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2122">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2123">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2123">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2124">如果`comparer`是`null`的預設相等比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2124">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2125">
            <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2125">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="3b63e-2126">-or-  <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2126">-or-  <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3b63e-2127">
            <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2127">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2128">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2128">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-2129">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2129">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="3b63e-2130">傳回值的型別<c>elementSelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2130">The type of the value returned by <c>elementSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2131">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2131">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-2132">A function to extract a key from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2132">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="3b63e-2133">A transform function to produce a result element value from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2133">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2134">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2134">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2135">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2135">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2136"><xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>方法會使用預設相等比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>以比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2136">The <xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2137">
            <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2137">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="3b63e-2138">-or-  <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2138">-or-  <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3b63e-2139">
            <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2139">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2140">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2140">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-2141">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2141">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="3b63e-2142">傳回值的型別<c>elementSelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2142">The type of the value returned by <c>elementSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2143">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2143">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-2144">A function to extract a key from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2144">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="3b63e-2145">A transform function to produce a result element value from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2145">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-2146">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2146">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2147">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer, and an element selector function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2147">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer, and an element selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2148">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2148">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2149">如果`comparer`是`null`的預設相等比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2149">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2150">
            <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2150">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="3b63e-2151">-or-  <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2151">-or-  <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3b63e-2152">
            <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2152">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToHashSet&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.HashSet`1&lt;!!TSource&gt; ToHashSet&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSet(Of TSource) (source As IEnumerable(Of TSource)) As HashSet(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::HashSet&lt;TSource&gt; ^ ToHashSet(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToHashSet : seq&lt;'Source&gt; -&gt; System.Collections.Generic.HashSet&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToHashSet source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2153">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2153">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2154">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2154">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2155">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2155">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2156">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type TSource selected from the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2156">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type TSource selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToHashSet&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.HashSet`1&lt;!!TSource&gt; ToHashSet&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSet(Of TSource) (source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As HashSet(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::HashSet&lt;TSource&gt; ^ ToHashSet(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToHashSet : seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Collections.Generic.HashSet&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToHashSet (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2157">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2157">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2158">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2158">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-2159">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2159">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2160">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> using the <paramref name="comparer" /> to compare keys</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2160">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> using the <paramref name="comparer" /> to compare keys</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2161">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type <paramref name="TSource" /> selected from the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2161">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type <paramref name="TSource" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToList&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;TSource&gt; ToList&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;!!TSource&gt; ToList&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToList(Of TSource) (source As IEnumerable(Of TSource)) As List(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::List&lt;TSource&gt; ^ ToList(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToList : seq&lt;'Source&gt; -&gt; System.Collections.Generic.List&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToList source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2162">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2162">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2163">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2163">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2164">Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2164">Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2165">A <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2165">A <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2166"><xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法強制立即查詢評估並傳回<xref:System.Collections.Generic.List%601>包含查詢結果。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2166">The <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns a <xref:System.Collections.Generic.List%601> that contains the query results.</span></span> <span data-ttu-id="3b63e-2167">為了取得快取的查詢結果的複本，您可以將這個方法附加至查詢。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2167">You can append this method to your query in order to obtain a cached copy of the query results.</span></span>  
  
 <span data-ttu-id="3b63e-2168"><xref:System.Linq.Enumerable.ToArray%2A> 具有類似的行為，但是會傳回而不是陣列<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2168"><xref:System.Linq.Enumerable.ToArray%2A> has similar behavior but returns an array instead of a <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-2169">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.ToList%2A>來強制立即查詢評估並傳回<xref:System.Collections.Generic.List%601>包含查詢結果。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2169">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToList%2A> to force immediate query evaluation and return a <xref:System.Collections.Generic.List%601> that contains the query results.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#106](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#106)]
 [!code-vb[System.Linq.Enumerable#106](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2170">
            <paramref name="source" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2170">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLookup&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-2171">Creates a generic <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2171">Creates a generic <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TSource&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2172">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2172">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-2173">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2173">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2174">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2174">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-2175">A function to extract a key from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2175">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2176">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2176">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2177">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2177">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2178"><xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29>方法會傳回<xref:System.Linq.Lookup%602>，來從一對多字典，將索引鍵對應至值的集合。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2178">The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="3b63e-2179">A<xref:System.Linq.Lookup%602>不同於<xref:System.Collections.Generic.Dictionary%602>，它會執行為單一值的索引鍵的一對一對應。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2179">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="3b63e-2180">預設相等比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2180">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2181">
            <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2181">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TSource&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2182">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2182">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-2183">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2183">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2184">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2184">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-2185">A function to extract a key from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2185">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-2186">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2186">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2187">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2187">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2188">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2188">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2189"><xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>方法會傳回<xref:System.Linq.Lookup%602>，來從一對多字典，將索引鍵對應至值的集合。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2189">The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="3b63e-2190">A<xref:System.Linq.Lookup%602>不同<xref:System.Collections.Generic.Dictionary%602>，它會執行為單一值的索引鍵的一對一對應。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2190">A <xref:System.Linq.Lookup%602> is different to a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="3b63e-2191">如果`comparer`是`null`的預設相等比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2191">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2192">
            <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2192">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TElement&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2193">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2193">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-2194">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2194">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="3b63e-2195">傳回值的型別<c>elementSelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2195">The type of the value returned by <c>elementSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2196">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2196">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-2197">A function to extract a key from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2197">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="3b63e-2198">A transform function to produce a result element value from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2198">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2199">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2199">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2200">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2200">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2201"><xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>方法會傳回<xref:System.Linq.Lookup%602>，來從一對多字典，將索引鍵對應至值的集合。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2201">The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="3b63e-2202">A<xref:System.Linq.Lookup%602>不同於<xref:System.Collections.Generic.Dictionary%602>，它會執行為單一值的索引鍵的一對一對應。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2202">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="3b63e-2203">預設相等比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2203">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-2204">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>建立<xref:System.Linq.Lookup%602>使用索引鍵選取器函式以及項目選取器函式。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2204">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to create a <xref:System.Linq.Lookup%602> by using a key selector function and an element selector function.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#107](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#107)]
 [!code-vb[System.Linq.Enumerable#107](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2205">
            <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2205">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TElement&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2206">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2206">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="3b63e-2207">所傳回的索引鍵類型<c>keySelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2207">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="3b63e-2208">傳回值的型別<c>elementSelector</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2208">The type of the value returned by <c>elementSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2209">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2209">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="3b63e-2210">A function to extract a key from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2210">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="3b63e-2211">A transform function to produce a result element value from each element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2211">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-2212">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2212">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2213">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer and an element selector function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2213">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer and an element selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2214">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2214">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2215"><xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29>方法會傳回<xref:System.Linq.Lookup%602>，來從一對多字典，將索引鍵對應至值的集合。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2215">The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="3b63e-2216">A<xref:System.Linq.Lookup%602>不同於<xref:System.Collections.Generic.Dictionary%602>，它會執行為單一值的索引鍵的一對一對應。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2216">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="3b63e-2217">如果`comparer`是`null`的預設相等比較子<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>用於比較索引鍵。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2217">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2218">
            <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2218">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Union&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-2219">Produces the set union of two sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2219">Produces the set union of two sequences.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Union : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Union (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2220">輸入序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2220">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="3b63e-2221">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2221">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="3b63e-2222">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2222">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2223">Produces the set union of two sequences by using the default equality comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2223">Produces the set union of two sequences by using the default equality comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2224">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2224">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2225">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2225">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-2226">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2226">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-2227">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2227">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-2228">這個方法傳回集合中排除重複項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2228">This method excludes duplicates from the return set.</span></span> <span data-ttu-id="3b63e-2229">這是以不同的行為<xref:System.Linq.Enumerable.Concat%2A>方法，包括重複項目輸入序列中傳回的所有項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2229">This is different behavior to the <xref:System.Linq.Enumerable.Concat%2A> method, which returns all the elements in the input sequences including duplicates.</span></span>  
  
 <span data-ttu-id="3b63e-2230">預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來比較值之型別的實作<xref:System.Collections.Generic.IEqualityComparer%601>泛型介面。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2230">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="3b63e-2231">若要比較的自訂資料類型，您需要實作這個介面，並提供您自己<xref:System.Object.GetHashCode%2A>和<xref:System.Object.Equals%2A>類型的方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2231">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
 <span data-ttu-id="3b63e-2232">當這個方法所傳回的物件會列舉<xref:System.Linq.Enumerable.Union%2A>列舉`first`和`second`的順序並產生已產生每個項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2232">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-2233">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>取得兩個整數的序列的聯集。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2233">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the union of two sequences of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#109](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#109)]
 [!code-vb[System.Linq.Enumerable#109](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#109)]  
  
 <span data-ttu-id="3b63e-2234">如果您想要比較之物件的自訂資料類型的序列，您必須實作<xref:System.Collections.Generic.IEqualityComparer%601>helperclass 中的泛型介面。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2234">If you want to compare sequences of objects of a custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helperclass.</span></span> <span data-ttu-id="3b63e-2235">下列程式碼範例示範如何實作這個介面中的自訂資料類型，並提供<xref:System.Object.GetHashCode%2A>和<xref:System.Object.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2235">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="3b63e-2236">實作這個介面之後，您可以使用的序列`ProductA`中的物件<xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2236">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]  
[!code-csharp[CSLINQEncapsulatedComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#4)]
[!code-vb[CSLINQEncapsulatedComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2237">
            <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2237">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Union : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Union (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2238">輸入序列之項目的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2238">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="3b63e-2239">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2239">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="3b63e-2240">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2240">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3b63e-2241">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2241">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2242">Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2242">Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2243">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2243">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2244">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2244">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-2245">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2245">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-2246">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2246">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-2247">如果 c`omparer`是`null`的預設相等比較子， <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>，用來比較值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2247">If c`omparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
 <span data-ttu-id="3b63e-2248">當這個方法所傳回的物件會列舉<xref:System.Linq.Enumerable.Union%2A>列舉`first`和`second`的順序並產生已產生每個項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2248">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.</span></span>  
  
 <span data-ttu-id="3b63e-2249"><xref:System.Linq.Enumerable.Concat%2A>方法不同於<xref:System.Linq.Enumerable.Union%2A>方法因為<xref:System.Linq.Enumerable.Concat%2A>方法會傳回包含重複項目，此輸入序列中的所有項目而<xref:System.Linq.Enumerable.Union%2A>傳回唯一的值。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2249">The <xref:System.Linq.Enumerable.Concat%2A> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%2A> method returns all the elements in the input sequences including duplicates, whereas <xref:System.Linq.Enumerable.Union%2A> returns only unique values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-2250">下列範例示範如何實作可用於相等比較子<xref:System.Linq.Enumerable.Union%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2250">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Union%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="3b63e-2251">這個比較子實作之後，您可以使用的序列`Product`中的物件<xref:System.Linq.Enumerable.Union%2A>方法，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2251">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Union%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]
 [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  
[!code-csharp[CSLINQCustomComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#4)]
[!code-vb[CSLINQCustomComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2252">
            <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2252">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Where&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3b63e-2253">Filters a sequence of values based on a predicate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2253">Filters a sequence of values based on a predicate.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2254">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2254">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2255">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2255">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-2256">A function to test each element for a condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2256">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2257">Filters a sequence of values based on a predicate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2257">Filters a sequence of values based on a predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2258">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2258">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2259">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2259">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-2260">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2260">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-2261">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2261">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-2262">查詢運算式語法， `where` (Visual C#) 或`Where`(Visual Basic) 子句的引動過程轉譯<xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2262">In query expression syntax, a `where` (Visual C#) or `Where` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-2263">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>來篩選序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2263">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to filter a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#110](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#110)]
 [!code-vb[System.Linq.Enumerable#110](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2264">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2264">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="3b63e-2265">項目的型別<c>來源</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2265">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="3b63e-2266">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2266">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="3b63e-2267">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2267">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2268">Filters a sequence of values based on a predicate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2268">Filters a sequence of values based on a predicate.</span>
          </span>
          <span data-ttu-id="3b63e-2269">Each element's index is used in the logic of the predicate function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2269">Each element's index is used in the logic of the predicate function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2270">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2270">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2271">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2271">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-2272">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2272">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-2273">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2273">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-2274">第一個引數`predicate`表示若要測試的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2274">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="3b63e-2275">第二個引數代表內元素的以零為起始的索引`source`。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2275">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-2276">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29>來篩選序列根據述詞牽涉的每個項目索引。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2276">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to filter a sequence based on a predicate that involves the index of each element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#111](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#111)]
 [!code-vb[System.Linq.Enumerable#111](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2277">
            <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2277">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Zip&lt;TFirst,TSecond,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IEnumerable&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSecond&gt; second, class System.Func`3&lt;!!TFirst, !!TSecond, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip(Of TFirst, TSecond, TResult) (first As IEnumerable(Of TFirst), second As IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFirst, typename TSecond, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Zip(System::Collections::Generic::IEnumerable&lt;TFirst&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSecond&gt; ^ second, Func&lt;TFirst, TSecond, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Zip : seq&lt;'First&gt; * seq&lt;'Second&gt; * Func&lt;'First, 'Second, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Zip (first, second, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst" />
        <TypeParameter Name="TSecond" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TFirst&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSecond&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TFirst,TSecond,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFirst">
          <span data-ttu-id="3b63e-2278">第一個輸入序列的項目類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2278">The type of the elements of the first input sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TSecond">
          <span data-ttu-id="3b63e-2279">第二個輸入序列的項目類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2279">The type of the elements of the second input sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="3b63e-2280">在結果序列的項目類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2280">The type of the elements of the result sequence.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="3b63e-2281">The first sequence to merge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2281">The first sequence to merge.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="3b63e-2282">The second sequence to merge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2282">The second sequence to merge.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="3b63e-2283">A function that specifies how to merge the elements from the two sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2283">A function that specifies how to merge the elements from the two sequences.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3b63e-2284">Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2284">Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3b63e-2285">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains merged elements of two input sequences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2285">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains merged elements of two input sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b63e-2286">實作這個方法是使用延後的執行。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2286">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="3b63e-2287">立即傳回值是儲存才能執行此動作的所有資訊的物件。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2287">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="3b63e-2288">這個方法所表示的查詢不會執行直到列舉物件藉由呼叫其`GetEnumerator`方法直接或使用`foreach`Visual C# 或`For Each`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2288">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="3b63e-2289">方法會將合併的第一個序列的每個項目，與具有相同的索引，第二個序列中的項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2289">The method merges each element of the first sequence with an element that has the same index in the second sequence.</span></span> <span data-ttu-id="3b63e-2290">如果序列沒有相同數目的項目，方法會將序列，直到達到其中一個的結尾。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2290">If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</span></span> <span data-ttu-id="3b63e-2291">例如，如果一個序列的方式有三項目，另一個有四個結果序列必須只有三個項目。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2291">For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b63e-2292">下列程式碼範例示範如何使用<xref:System.Linq.Enumerable.Zip%2A>方法來合併兩個序列。</span><span class="sxs-lookup"><span data-stu-id="3b63e-2292">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.Zip%2A> method to merge two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#200](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#200)]
 [!code-vb[System.Linq.Enumerable#200](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#200)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3b63e-2293">
            <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3b63e-2293">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>